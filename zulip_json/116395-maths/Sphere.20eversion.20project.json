[
    {
        "content": "<p>Hi everybody! I'm very excited to announce the official start of the <a href=\"https://leanprover-community.github.io/sphere-eversion/\">sphere eversion project</a>! I mentioned this dream during FoMM2020 in Pittsburgh, but it has now started. You can read a first version  of the blueprint, either in <a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint.pdf\">pdf</a> or <a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/sect0001.html\">online</a>, although the third chapter is currently pretty rough.</p>\n<p>Everybody is welcome to contribute. There is plenty to do, as you can see from <a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/dep_graph.html\">this graph</a> (read the legend and click nodes). The first two chapters are completely elementary, and contain enough material for publication in CPP or ITP.</p>",
        "id": 199637683,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591199554
    },
    {
        "content": "<p>I'm attempting Carath√©odory's lemma :)</p>",
        "id": 199639518,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1591200393
    },
    {
        "content": "<p>That would be the second item to get its check-mark, after <a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/chap-local.html#def:ample_subset\">https://leanprover-community.github.io/sphere-eversion/blueprint/chap-local.html#def:ample_subset</a></p>",
        "id": 199640010,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591200665
    },
    {
        "content": "<p>Is there a plan with respect to mathlib integration? I mean, PR early and PR often, or get something complete and polished and PR in the end?</p>",
        "id": 199640228,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591200777
    },
    {
        "content": "<p>We already tried \"PR in the end\" in the perfectoid project... As you can see from the existence of a blueprint, I'm trying new stuff for this project.</p>",
        "id": 199640504,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591200904
    },
    {
        "content": "<p>I don't understand the difference between \"blue bg\": proof ready, and \"green bg\": proof done.</p>",
        "id": 199640692,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591200976
    },
    {
        "content": "<p>Proof ready to be formalized</p>",
        "id": 199640720,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591200989
    },
    {
        "content": "<p>Aha</p>",
        "id": 199640751,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591201003
    },
    {
        "content": "<p>As in: all dependencies are green?</p>",
        "id": 199640775,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591201012
    },
    {
        "content": "<p>It means everything the proof depends on has been formalized.</p>",
        "id": 199640791,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591201018
    },
    {
        "content": "<p>Yes</p>",
        "id": 199640806,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591201025
    },
    {
        "content": "<p>Hopefully this is clear in the explanation on the project home page. This legend is already too long</p>",
        "id": 199640858,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591201050
    },
    {
        "content": "<p>On the project homepage, I would add \" for formalization\" after the word \"ready\" (2x)</p>",
        "id": 199641074,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591201139
    },
    {
        "content": "<p>PR!</p>",
        "id": 199641174,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591201192
    },
    {
        "content": "<p>main motivations on web page: non-sense -&gt; nonsense and pionneered -&gt; pioneered</p>",
        "id": 199641252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591201216
    },
    {
        "content": "<p>Before formalizing loops, shouldn't one formalize the circle?</p>",
        "id": 199641294,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591201239
    },
    {
        "content": "<p>I explain somewhere that a map on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">S</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb S^1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span> is a periodic map on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>.</p>",
        "id": 199641364,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591201274
    },
    {
        "content": "<p>And we'll need that point of view anyway, in order to write down the key construction at <a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/chap-local.html#def:corrugation\">https://leanprover-community.github.io/sphere-eversion/blueprint/chap-local.html#def:corrugation</a></p>",
        "id": 199641518,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591201329
    },
    {
        "content": "<p>When can I do sep#corrugation?</p>",
        "id": 199641958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591201499
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/sphere-eversion/pull/1\">sphere#1</a></p>",
        "id": 199642027,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591201530
    },
    {
        "content": "<p>That's a good start</p>",
        "id": 199642081,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591201560
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Here's your chance for another +5xp by making another zulip linkifier.)</p>",
        "id": 199642156,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591201574
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/116395-maths/topic/Sphere.20eversion.20project/near/199640228\">said</a>:</p>\n<blockquote>\n<p>Is there a plan with respect to mathlib integration? I mean, PR early and PR often, or get something complete and polished and PR in the end?</p>\n</blockquote>\n<p>I suggest \"PR early and often\". (It shouldn't be hard to allow linking to lean facts in mathlib besides the sphere repo. Maybe it's already supported!)</p>",
        "id": 199642513,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591201739
    },
    {
        "content": "<p>Kevin, corrugation probably need the integration PRs that are stuck in the queue since January.</p>",
        "id": 199643400,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591202092
    },
    {
        "content": "<p>Sure we'll have links to mathlib. Currently the linking stuff is very primitive, see our only example at <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/master/blueprint/src/local_convex_integration.tex#L290\">https://github.com/leanprover-community/sphere-eversion/blob/master/blueprint/src/local_convex_integration.tex#L290</a></p>",
        "id": 199643503,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591202142
    },
    {
        "content": "<p>I see the possibility of shortening that url a bit (-;</p>",
        "id": 199643637,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591202192
    },
    {
        "content": "<p>Maybe you should manually go through some levels and flag them as mathlib-candidates, and in your fancy interface you can flag what is not formalised, what is not proved, and what is not PR'ed.</p>",
        "id": 199643686,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591202216
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/U70mjEzgxEsKZb2vlT0bOuRf/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/U70mjEzgxEsKZb2vlT0bOuRf/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/U70mjEzgxEsKZb2vlT0bOuRf/image.png\"></a></div>",
        "id": 199643780,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591202268
    },
    {
        "content": "<p>This is what the website looks like on a small screen</p>",
        "id": 199643796,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591202278
    },
    {
        "content": "<p>Would it be possible to devote only 25% width to the blue ToC?</p>",
        "id": 199643855,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591202296
    },
    {
        "content": "<p>Sure, but not today. Although we can overwrite this in the leanblueprint plasTeX plugin, this change could be made directly to the default CSS of plasTeX.</p>",
        "id": 199644042,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591202397
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/sphere-eversion/pull/2\">sphere#2</a></p>",
        "id": 199645931,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591203300
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/116395-maths/topic/Sphere.20eversion.20project/near/199639518\">said</a>:</p>\n<blockquote>\n<p>I'm attempting Carath√©odory's lemma :)</p>\n</blockquote>\n<p>If anyone feels like joining in, I'm streaming this in the Xena discord - going pretty slowly so far</p>",
        "id": 199651799,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1591206116
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> were you working on a mathlib branch?</p>",
        "id": 199659396,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591209686
    },
    {
        "content": "<p>No</p>",
        "id": 199659409,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1591209695
    },
    {
        "content": "<p>A slightly out of the blue question but as a spir of this could you prove hairy ball theorem with all the Maths here?</p>",
        "id": 199663782,
        "sender_full_name": "James Arthur",
        "timestamp": 1591211879
    },
    {
        "content": "<p>There is some intersection of tool sets but not much. But the hairy ball theorem is quite a bit easier.</p>",
        "id": 199668725,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591214158
    },
    {
        "content": "<p>regarding mathlib integration, could I suggest the (fantastic!) dependency graph page uses three colours, to indicate:</p>\n<ul>\n<li>\"Ready for formalisation\"</li>\n<li>\"Draft version ready\" (i.e. in the <code>sphere-eversion</code> repository)</li>\n<li>\"Complete\" (i.e. in <code>mathlib</code>)</li>\n</ul>",
        "id": 199689117,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591226291
    },
    {
        "content": "<p>(This would implicitly set expectations that we need to get stuff PR'd.)</p>",
        "id": 199689167,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591226334
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> I couldn't find any trace of what you did on discord earlier, so perhaps this was duplicative, but I just PR'd what is hopefully a helpful step to Caratheodory's lemma. <a href=\"https://github.com/leanprover-community/mathlib/issues/2944\">#2944</a>.</p>",
        "id": 199698136,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591236072
    },
    {
        "content": "<p>Thanks - I didn't end up making much progress, was mostly trying to figure out how the dimension API works</p>",
        "id": 199698209,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1591236162
    },
    {
        "content": "<p>I think the main things that would be helpful right now is the stuff mentioned <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/linear.20dependence.20of.20more.20than.20dimension\">here</a></p>",
        "id": 199698703,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1591236881
    },
    {
        "content": "<p>An alternative would be to have some sort of \"badge\" that could be attached to each ellipse or rectangle that indicated that it was in now in mathlib.</p>",
        "id": 199700038,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591238903
    },
    {
        "content": "<p>I pushed a simpler proof of <a href=\"https://github.com/leanprover-community/mathlib/issues/2944\">#2944</a>. Now I think that I should review it. Let's wait for <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> or <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> .</p>",
        "id": 199702983,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591243281
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/Sphere.20eversion.20project/near/199698136\">said</a>:</p>\n<blockquote>\n<p>I couldn't find any trace of what you did on discord earlier</p>\n</blockquote>\n<p>What exactly means \"on discord\" here? I just wonder if I need +1 account/open tab to know what happens.</p>",
        "id": 199703060,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591243381
    },
    {
        "content": "<p>BTW, I don't understand why do you need this for Carath√©odory.</p>",
        "id": 199703221,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591243605
    },
    {
        "content": "<p>You can start with <code>rw [convex_hull_eq]</code>, <code>rcases</code>, then deal with a <code>finset</code> with indexes in <code>Œπ</code>.</p>",
        "id": 199703244,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591243667
    },
    {
        "content": "<p>It's certainly not strictly necessary. I was going to take a point in the convex hull, use this lemma to see it is in the convex hull of some finset, and then reduce the cardinality of that finset in steps.</p>",
        "id": 199703294,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591243689
    },
    {
        "content": "<blockquote>\n<p>What exactly means \"on discord\" here? I just wonder if I need +1 account/open tab to know what happens.</p>\n</blockquote>\n<p>Kevin has a discord server for talking to students at Imperial. Bhavik mentioned that he was working on caratheodory in a livestream there, so I went looking for it. I'd never been there before today.</p>",
        "id": 199703382,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591243836
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>, what statement did you have in mind for Carath√©odory? I was thinking about</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">caratheodory</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">convex_hull</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"err\">‚ãÉ</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"err\">‚Üë</span><span class=\"n\">t</span> <span class=\"err\">‚äÜ</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">‚â§</span> <span class=\"n\">findim</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">E</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">convex_hull</span> <span class=\"err\">‚Üë</span><span class=\"n\">t</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 199703445,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591243934
    },
    {
        "content": "<p>which hence lead me away from using indices.</p>",
        "id": 199703450,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591243946
    },
    {
        "content": "<p>(And then proving this from</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">caratheodory_reduction</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">findim</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">E</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">convex_hull</span> <span class=\"o\">(</span><span class=\"err\">‚Üë</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">‚ãÉ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">‚Üë</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)),</span> <span class=\"n\">convex_hull</span> <span class=\"err\">‚Üë</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">erase</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span> <span class=\"c1\">-- this is the real work</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">caratheodory_reduction&#39;</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">convex_hull</span> <span class=\"o\">(</span><span class=\"err\">‚Üë</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"err\">‚ãÉ</span> <span class=\"o\">(</span><span class=\"n\">t&#39;</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">t&#39;</span> <span class=\"err\">‚äÜ</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">t&#39;</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">‚â§</span> <span class=\"n\">findim</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">E</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">convex_hull</span> <span class=\"err\">‚Üë</span><span class=\"n\">t&#39;</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span> <span class=\"c1\">-- just an induction and playing with sets</span>\n</code></pre></div>\n\n\n<p>and the lemma in <a href=\"https://github.com/leanprover-community/mathlib/issues/2944\">#2944</a>.)</p>",
        "id": 199703618,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591244228
    },
    {
        "content": "<p>I was thinking about something involving an actual <code>center_mass</code>.</p>",
        "id": 199703640,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591244274
    },
    {
        "content": "<p>But probably your version is better.</p>",
        "id": 199703684,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591244298
    },
    {
        "content": "<p>You can get a <code>center_mass</code> version by rewriting <code>set.finite.convex_hull_eq</code>.</p>",
        "id": 199703699,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591244330
    },
    {
        "content": "<p>I made a bit more progress on Carath√©odory, essentially doing the \"boring bits\", with the actual calculation still to go. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">findim</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">E</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">convex_hull</span> <span class=\"o\">(</span><span class=\"err\">‚Üë</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">‚ãÉ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">‚Üë</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)),</span> <span class=\"n\">convex_hull</span> <span class=\"err\">‚Üë</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">erase</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- This is the actual work!</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>I'll probably stop for a bit, but if anyone feels like pushing to branch <code>caratheodory2</code>, please go ahead!</p>",
        "id": 199710928,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591253696
    },
    {
        "content": "<p>I poked a bit at your <code>step</code> lemma and found that I wanted a notion of <code>linear_independent</code> for <code>finset</code>, and a theorem saying you can't have independence when the cardinality is too big. (I guess I'm saying this because even though i couldn't find the code, I'm sure someone has thought of this)</p>\n<p>I also wanted</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_pos_iff_exists_mem</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">‚Üî</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">‚àà</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">‚Üî</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">:=</span> <span class=\"n\">mem_def</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">card_pos_iff_exists_mem</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199715160,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591257428
    },
    {
        "content": "<p>I am just trying to understand the nature of this project. Some dumb questions.</p>\n<p>What is the URL for lemma 3.13?</p>\n<p>Is \"Prove Lemma 3.13, assuming a proof of Lemma 3.12 has been formalised and a statement of Level 3.13 has been formalised\" a state which someone with Lean installed properly can render into VS Code on their own PC?</p>",
        "id": 199715304,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591257509
    },
    {
        "content": "<p>I am asking if we can go full tactic mode, in some sense</p>",
        "id": 199715319,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591257523
    },
    {
        "content": "<p>I don't think this is the answer to your question, but this is a URL that takes you to lemma 3.13 <br>\n<a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/chap-global.html#a0000000047\">https://leanprover-community.github.io/sphere-eversion/blueprint/chap-global.html#a0000000047</a></p>",
        "id": 199715500,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591257651
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> relevant thread: <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/linear.20dependence.20of.20more.20than.20dimension/near/199646286\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/linear.20dependence.20of.20more.20than.20dimension/near/199646286</a></p>",
        "id": 199715650,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591257736
    },
    {
        "content": "<p>Kevin, are you asking for something more sophisticated than \"go to the file which has the statement of lemma 3.13 and start filling in a proof\"?</p>",
        "id": 199715707,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591257791
    },
    {
        "content": "<p>I think that there should be a prominent link to the Sphere Eversion project at the top of the Leanprover-community website, maybe in some sort of \"New (3/6/20): The Sphere Eversion Project\" way, with a direct link to Patrick's web page. I want to start promoting the Lean prover community in general. I think that various Lean projects are beginning to pop up and it would be good if google started to notice it and start asking the question \"when someone googles Lean do they want to go to the MS dead pages or ours?\"</p>",
        "id": 199715850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591257911
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span>, I've just pushed a bit more, reducing it closer to some \"obvious facts\" about linear algebra, and a few easy sorries.</p>",
        "id": 199716140,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591258171
    },
    {
        "content": "<p>As I wanted to state Caratheodory in terms of <code>finset</code>s, we're now running up against some awkwardness that linear algebra is instead about vectors indexed by fintype.</p>",
        "id": 199716244,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591258225
    },
    {
        "content": "<p>There should be a link to the project home page displayed at the top of <a href=\"https://github.com/leanprover-community/sphere-eversion\">https://github.com/leanprover-community/sphere-eversion</a> for people who were looking for the project but are terrified of github pages because they are something to do with source code</p>",
        "id": 199716357,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591258281
    },
    {
        "content": "<p>Also... a README</p>",
        "id": 199716463,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591258356
    },
    {
        "content": "<p>The two basic things I'm now missing are:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- a basic fact about convex hulls of finsets.</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">quux</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">‚àà</span> <span class=\"n\">convex_hull</span> <span class=\"o\">(</span><span class=\"err\">‚Üë</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÉ</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">‚àÄ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">‚â§</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">‚àß</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">‚àß</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">e</span> <span class=\"err\">‚Ä¢</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"c1\">-- a basic fact about linear algebra!</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">turkle</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">findim</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">E</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÉ</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">e</span> <span class=\"err\">‚Ä¢</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">‚àß</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">x</span> <span class=\"err\">‚àà</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 199716466,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591258358
    },
    {
        "content": "<p>It would be really great if we can add some easy-to-use hooks that enable people to indicate where work is happening.</p>",
        "id": 199716502,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591258394
    },
    {
        "content": "<p>e.g. that there's a mathlib branch <code>caratheodory2</code> that people are working on for one of the lemmas</p>",
        "id": 199716534,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591258432
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/sphere-eversion/issues/4\">sphere-eversion#4</a><br>\nadds a link to the project website from the github</p>",
        "id": 199716612,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591258489
    },
    {
        "content": "<p>We need to make more of an effort to drive people to Patrick's lovely project website.</p>",
        "id": 199716639,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591258513
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Sphere.20eversion.20project/near/199716357\">said</a>:</p>\n<blockquote>\n<p>There should be a link to the project home page displayed at the top of <a href=\"https://github.com/leanprover-community/sphere-eversion\">https://github.com/leanprover-community/sphere-eversion</a> for people who were looking for the project but are terrified of github pages because they are something to do with source code</p>\n</blockquote>\n<p>Done</p>",
        "id": 199716690,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591258555
    },
    {
        "content": "<p>I'm sorry, I just don't have a clue how to do all of this, but this is how stuff works nowadays.</p>",
        "id": 199716691,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591258557
    },
    {
        "content": "<p>It's next stop Hacker News remember.</p>",
        "id": 199716751,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591258582
    },
    {
        "content": "<p>And maybe Reddit and then maybe some random news source, I've seen this stuff happen now</p>",
        "id": 199716791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591258623
    },
    {
        "content": "<p>We have to be ready</p>",
        "id": 199716804,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591258634
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Sphere.20eversion.20project/near/199716691\">said</a>:</p>\n<blockquote>\n<p>I'm sorry, I just don't have a clue how to do all of this, but this is how stuff works nowadays.</p>\n</blockquote>\n<p>I think it's fine if your comparative advantage is telling people what changes to make.</p>",
        "id": 199716837,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591258666
    },
    {
        "content": "<p>I think <code>quux</code> is not far from <code>set.finite.convex_hull_eq </code></p>",
        "id": 199716943,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591258708
    },
    {
        "content": "<p>Maybe the landing page of the project should already display the graph...</p>",
        "id": 199717134,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591258851
    },
    {
        "content": "<p>Or a screenshot of the graph that links to the real thing.</p>",
        "id": 199717185,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591258888
    },
    {
        "content": "<p>I genuinely think that the Wikipedia page on sphere eversion should be updated to point to this project. It is the top duck duck go hit for sphere eversion. It doesn't even have to mention Lean. It could just say something about there is an ongoing project to formalise the proof on a computer and then have some link to one of those listy pages of theorems being formalised by computers or whatever they have</p>",
        "id": 199717262,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591258930
    },
    {
        "content": "<p>I don't know the details of how Wikipedia works but I think that that this is newsworthy.</p>",
        "id": 199717293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591258954
    },
    {
        "content": "<p>Lean gets a mention on this web page <a href=\"https://en.wikipedia.org/wiki/Perfectoid_space\">https://en.wikipedia.org/wiki/Perfectoid_space</a> and I certainly didn't put that there.</p>",
        "id": 199717390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591259020
    },
    {
        "content": "<p>Mathematicians need to be pointed to the display of what we can do.</p>",
        "id": 199717528,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591259117
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/Sphere.20eversion.20project/near/199716466\">said</a>:</p>\n<blockquote>\n<p>The two basic things I'm now missing are:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- a basic fact about convex hulls of finsets.</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">quux</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">‚àà</span> <span class=\"n\">convex_hull</span> <span class=\"o\">(</span><span class=\"err\">‚Üë</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÉ</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">‚àÄ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">‚â§</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">‚àß</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">‚àß</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">e</span> <span class=\"err\">‚Ä¢</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"c1\">-- a basic fact about linear algebra!</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">turkle</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">findim</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">E</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÉ</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">e</span> <span class=\"err\">‚Ä¢</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">‚àß</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">x</span> <span class=\"err\">‚àà</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>Here's the mathematical content of <code>quux</code></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">quux</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">‚àà</span> <span class=\"n\">convex_hull</span> <span class=\"o\">(</span><span class=\"err\">‚Üë</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÉ</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">‚àÄ</span> <span class=\"n\">y</span> <span class=\"err\">‚àà</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">‚â§</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">‚àß</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">‚àß</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">e</span> <span class=\"err\">‚Ä¢</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">convex_hull_eq</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">finite_to_set</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"bp\">‚ü®</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">w_nonneg</span><span class=\"o\">,</span> <span class=\"n\">w_sum_one</span><span class=\"o\">,</span> <span class=\"n\">w_center</span><span class=\"bp\">‚ü©</span> <span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199717870,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591259297
    },
    {
        "content": "<p>I still don't know how to figure out the correct URL for Lemma 3.13 in the project</p>",
        "id": 199718291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591259564
    },
    {
        "content": "<p>There are three things left to do to get Carath√©odory's theorem</p>\n<ol>\n<li>hook up two lemmas  to the library API</li>\n<li>prove a linear algebra lemma <code>exists_nontrivial_relation_sum_zero_of_dim_succ_lt_card</code></li>\n<li>fill in the sorries, which are all easy facts about inequalities or finsets, in <code>mem_convex_hull_erase</code></li>\n</ol>",
        "id": 199718339,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591259599
    },
    {
        "content": "<ol start=\"2\">\n<li>is:</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">exists_nontrivial_relation_sum_zero_of_dim_succ_lt_card</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">findim</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">E</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÉ</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">e</span> <span class=\"err\">‚Ä¢</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">‚àß</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">‚àß</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">x</span> <span class=\"err\">‚àà</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- pick an element x‚ÇÄ ‚àà t,</span>\n  <span class=\"c1\">-- apply the previous lemma to the other x·µ¢ - x‚ÇÄ,</span>\n  <span class=\"c1\">-- to obtain a function `f`</span>\n  <span class=\"c1\">-- and then adjust f x‚ÇÄ := - others.sum f</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199718353,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591259612
    },
    {
        "content": "<p>As Johan pointed out, your 2 is the topic of this thread<br>\n<a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/linear.20dependence.20of.20more.20than.20dimension/near/199646286\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/linear.20dependence.20of.20more.20than.20dimension/near/199646286</a></p>",
        "id": 199718508,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591259729
    },
    {
        "content": "<p>(it's not solved there, but people gave pointers to the library that may be useful)</p>",
        "id": 199718595,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591259773
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, can you say a little more about your vision for \"full tactic mode\"?</p>",
        "id": 199718637,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591259802
    },
    {
        "content": "<p>Do you want to click on a lemma in the informal overview and be taken to the lean file that's supposed to contain its formalization?</p>",
        "id": 199718682,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591259843
    },
    {
        "content": "<p>If my browser is in the blueprint web pages and I just want to get back to the main project website, how do I do that? Should there be a link to the main project website from the blueprint?</p>",
        "id": 199718684,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591259847
    },
    {
        "content": "<p>I've been too busy with PR, I've not opened the project in VS Code myself yet</p>",
        "id": 199718778,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591259900
    },
    {
        "content": "<p>as far as I can tell, opening the project in VS Code doesn't have any special <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> style formatting or anything like that, I don't know if that's what you were suggesting</p>",
        "id": 199718947,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591260019
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span>, I copied and pasted your start to <code>quux</code> in, and did the next few lines.</p>",
        "id": 199718960,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591260038
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Sphere.20eversion.20project/near/199718684\">said</a>:</p>\n<blockquote>\n<p>If my browser is in the blueprint web pages and I just want to get back to the main project website, how do I do that? Should there be a link to the main project website from the blueprint?</p>\n</blockquote>\n<p>raised as an issue <a href=\"https://github.com/leanprover-community/sphere-eversion/issues/5\">https://github.com/leanprover-community/sphere-eversion/issues/5</a></p>",
        "id": 199719424,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591260352
    },
    {
        "content": "<p>I'm sorry I've been ignoring the discussion in this thread since yesterday afternoon. I really wanted to release the website before giving this talk in IAS, but then I had to focus on the talk and then sleep. I know some infrastructure stuff is not as polished as I hoped for. I'll continue working on it of course, and help is welcome (especially since I've been telling my family to be patient for two weeks while I was rushing to get that ready, so I'll have less time for a while). Also on the back-end side there is no continuous integration at all, and building the blue-print website currently requires a non-master branch of plasTeX, but this will all converge pretty quickly I hope (I have full control here since I'm the current maintainer of plasTeX).</p>",
        "id": 199729454,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591267536
    },
    {
        "content": "<p>About the statement of Caratheodory, the project definitely need a version with <code>center_mass</code>. But it can be deduced of another version in terms of <code>convex_hull</code> of course.</p>",
        "id": 199729861,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591267918
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Sphere.20eversion.20project/near/199715304\">said</a>:</p>\n<blockquote>\n<p>Is \"Prove Lemma 3.13, assuming a proof of Lemma 3.12 has been formalised and a statement of Level 3.13 has been formalised\" a state which someone with Lean installed properly can render into VS Code on their own PC?</p>\n</blockquote>\n<p>I don't understand this question.</p>",
        "id": 199729956,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591267984
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Sphere.20eversion.20project/near/199715304\">said</a>:</p>\n<blockquote>\n<p>What is the URL for lemma 3.13?</p>\n</blockquote>\n<p>Indeed there is something missing here, I also noticed it yesterday when I had to go to the graph page to figure out the url pointing a lemma I was looking at. I'll fix that.</p>",
        "id": 199730039,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591268045
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/116395-maths/topic/Sphere.20eversion.20project/near/199718947\">said</a>:</p>\n<blockquote>\n<p>as far as I can tell, opening the project in VS Code doesn't have any special <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> style formatting or anything like that, I don't know if that's what you were suggesting</p>\n</blockquote>\n<p>It's definitely planned, but I simply didn't have enough time to implement this before the talk, so I released the website anyway.</p>",
        "id": 199730126,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591268139
    },
    {
        "content": "<p>Thanks for the big push, Patrick! I hope your adrenaline levels are settling back into a normal place. </p>\n<p>I don't think anyone was expecting these kinds of things to already be ironed out at introduction time. I think Kevin's main point is that people outside of the zulip are going to start paying attention, so maybe we should prioritize features in order of \"what will a skeptic complain about us not having\" rather than some more natural-seeming prioritization.</p>\n<p>Do you think you convinced any of the IAS folks to contribute?</p>",
        "id": 199739246,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591273926
    },
    {
        "content": "<p>I didn't really try to convince people to contribute. The goal was to convince people that we are doing here is interesting.</p>",
        "id": 199786188,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591293816
    },
    {
        "content": "<p>I basically don't understand any of the mathematical content, but I wanted to say: the way you set this up Patrick is just wonderful.</p>",
        "id": 199818101,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1591310848
    },
    {
        "content": "<p>I think the button to view the blueprint should be more prominent than the button to go to the github page (if i were confident this was correct, i'd post an issue on github)</p>",
        "id": 199821776,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591313648
    },
    {
        "content": "<p>I'm still not sure how to set this up, but I something that would be lovely would be for each implicit \"TODO\" item to have a publicly editable text box (ideally not even requiring a PR) for \"URL containing active work\".</p>",
        "id": 199824343,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591316039
    },
    {
        "content": "<p>This way people could indicate they've started work on some item, by pasting a link to a branch / zulip discussion / twitch stream, whatever, and other people could find and join in.</p>",
        "id": 199824399,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591316071
    },
    {
        "content": "<p>I would love to make it easier and easier for people to work on math in Lean collaboratively.</p>",
        "id": 199824414,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591316094
    },
    {
        "content": "<p>We want the kids to make plans: \"Hey let's go do a raid on a corrugation level tonight.\"</p>",
        "id": 199824538,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591316216
    },
    {
        "content": "<p>(\"Isn't that a boss level? We might need extra help designing the statement of the big theorem --- let's see if Patrick's free. Oh, and invite Johan, there are going to be some tough big_operator sorries.\")</p>",
        "id": 199824636,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591316317
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/Sphere.20eversion.20project/near/199729861\">said</a>:</p>\n<blockquote>\n<p>About the statement of Caratheodory, the project definitely need a version with <code>center_mass</code>. But it can be deduced of another version in terms of <code>convex_hull</code> of course.</p>\n</blockquote>\n<p>We already have <code>set.finite.convex_hull_eq</code>. I suggest adding a <code>finset.convex_hull_eq</code> and make <code>set.finite.convex_hull_eq</code> use it. Then leave Caratheodory with <code>convex_hull</code>, and add a hint in the docs: \"you might want to <code>simp only [finset.convex_hull_eq]</code> the RHS \".</p>",
        "id": 199833884,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591329579
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2956\">#2956</a></p>",
        "id": 199834265,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591330157
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Sphere.20eversion.20project/near/199834265\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2956\">#2956</a></p>\n</blockquote>\n<p>It's on the merge queue already</p>",
        "id": 199836202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591332927
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/Sphere.20eversion.20project/near/199824414\">said</a>:</p>\n<blockquote>\n<p>I would love to make it easier and easier for people to work on math in Lean collaboratively.</p>\n</blockquote>\n<p>In case this isn't clear: exploring ways to \"make it easier and easier for people to work on math in Lean collaboratively\" is very much a goal of this project.</p>",
        "id": 199846731,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591344969
    },
    {
        "content": "<p>About discussing ongoing work, the canonical option is to use GitHub issues, and of course there Zulip which is less structured. The difficulty is to make it easy to add a link to a GitHub issue (or anything else) from the blueprint. It's difficult because the project is currently hosted on GitHub pages which is a static website host, I don't have interactive access to a database here. Any help is welcome.</p>",
        "id": 199847006,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591345246
    },
    {
        "content": "<p>Is it possible to make a \"Lean blueprint\" of this proof?</p>",
        "id": 199847054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591345302
    },
    {
        "content": "<p>Literally skipping every definition and proof, but getting down the types of definitions and the statements of theorems?</p>",
        "id": 199847120,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591345331
    },
    {
        "content": "<p>I'm not sure this would be so useful. And it would pollute every import statement with sorry warnings.</p>",
        "id": 199847201,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591345431
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> and I were talking about a related thing in Pittsburgh. Sometimes, when you know the right way to set things up, but don't have time to build the theory, you have valuable information: you are capable of being the supervisor of a project, in some sense.</p>",
        "id": 199847209,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591345441
    },
    {
        "content": "<p>I think you can do this locally, but I wouldn't try doing that for the whole project.</p>",
        "id": 199847281,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591345478
    },
    {
        "content": "<p>I see. You can play it the following way: you carry in your head what you think are a bunch of good ideas about how things should work, and then people maybe make PRs and if they have missed some tricks then you just tell them at that point</p>",
        "id": 199847291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591345488
    },
    {
        "content": "<p>In particular I expect the plan to evolve non-trivially while formalizing.</p>",
        "id": 199847317,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591345517
    },
    {
        "content": "<p>No, you can still leave indications. We can even have comments in the Lean files laying out the structure if you have a good idea.</p>",
        "id": 199847407,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591345572
    },
    {
        "content": "<p>I really wonder whether we are missing something here. I am interested in proving Lemma 3.13 but not for mathematical reasons.</p>",
        "id": 199847472,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591345637
    },
    {
        "content": "<p>If a mathematical expert (with no knowledge about computer proof systems) were to look at the statement of 3.13 and then asked to deduce it from 3.12 they would say it was trivial. And then when we well them that our software cannot even do it they will think that our software is somehow stupid.</p>",
        "id": 199847634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591345742
    },
    {
        "content": "<p>My idea of a computer game is proving theorems in tactic mode. In some sense a milestone for the project will  be a situation where the only <code>sorry</code>s are Props.</p>",
        "id": 199847763,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591345835
    },
    {
        "content": "<p><em>At that moment</em> you are true computer game. Definitions are hard for mathematicians.</p>",
        "id": 199847787,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591345862
    },
    {
        "content": "<p>Patrick is there some explicit sorried definition which in some sense when filled in would mark the success of the project? Like <code>perfectoid [prime p] X := sorry</code> or whatever we had?</p>",
        "id": 199847914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591345967
    },
    {
        "content": "<p>The sooner you can advertise a sorry of any form the better.</p>",
        "id": 199847944,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591345998
    },
    {
        "content": "<p>Even if it's just some dumb <code>constant Sphere_Eversion, theorem : Sphere_Eversion := sorry</code> or however you want to display it.</p>",
        "id": 199848047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591346067
    },
    {
        "content": "<p>I am still interested in a top-down approach.</p>",
        "id": 199848091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591346093
    },
    {
        "content": "<p>I agree with Kevin here. Having a formal plan modulo sorried theorems is already half the battle</p>",
        "id": 199848104,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591346099
    },
    {
        "content": "<p>We are making a plan Mario</p>",
        "id": 199848133,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591346118
    },
    {
        "content": "<p>I thought that having a blueprint was already a good part of the battle.</p>",
        "id": 199848148,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591346128
    },
    {
        "content": "<p>Of course the statements of the theorems will evolve between this point and the completion</p>",
        "id": 199848156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591346136
    },
    {
        "content": "<p>It is</p>",
        "id": 199848162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591346141
    },
    {
        "content": "<p>Sphere eversion will be spoken of as one of the triumphs if the community pull this off. Patrick do you honestly think sphere eversion is achievable in Lean 3?</p>",
        "id": 199848237,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591346166
    },
    {
        "content": "<p>But sure we can write a lot more Lean code. The Lean code of the project is currently two lines long.</p>",
        "id": 199848240,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591346170
    },
    {
        "content": "<p>Oh yes I hope it is.</p>",
        "id": 199848260,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591346187
    },
    {
        "content": "<p>Right, it's like groundbreaking in a construction project</p>",
        "id": 199848268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591346192
    },
    {
        "content": "<p>you have the blueprint, now you need the physical scaffolding</p>",
        "id": 199848294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591346218
    },
    {
        "content": "<p>Patrick's approach is what mathematicians need. Many of us think very vaguely but Patrick has learnt a really good way of expressing mathematics in a format humans understand and yet is good enough for others to be able to join in</p>",
        "id": 199848318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591346236
    },
    {
        "content": "<p>I came along and asked for localications of rings because I had a blueprint for schemes. Two years later look at what <span class=\"user-mention\" data-user-id=\"118107\">@Amelia Livingston</span>  has done.</p>",
        "id": 199848359,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591346277
    },
    {
        "content": "<p>My blueprint was just in my head, so it was realised by people close to me like <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> and <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> . They were all at Imperial and I was too busy to write it all down properly.</p>",
        "id": 199848432,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591346328
    },
    {
        "content": "<p>So I just taught them. Patrick is enabling this teaching to take place online.</p>",
        "id": 199848442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591346346
    },
    {
        "content": "<p>My blueprint for schemes turned into a much better understanding of the concept of a localisation of a ring</p>",
        "id": 199848472,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591346382
    },
    {
        "content": "<p>Patrick's project just opens more doors I think.</p>",
        "id": 199848542,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591346420
    },
    {
        "content": "<p>Right now I need to do a lot of stuff that I neglected while I was rushing to get this stuff out. But then I'll go through the blueprint to polish it. I also hope that S√©bastien, Reid, Yury and Heather will have a look (we have seen Heather for a while, I should make sure she saw this thread).</p>",
        "id": 199848750,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591346571
    },
    {
        "content": "<p>\"The easiest example of a flexible construction problem which is not totally trivial and is algebraically obstructed is the deformation of immersions of circles into planes. \" Is it possible to give some Wikipedia link to the definition of an immersion? This term has a precise meaning, right?</p>",
        "id": 199849997,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591347272
    },
    {
        "content": "<p>Or maybe some kind of hover thing giving a precise definition?</p>",
        "id": 199850053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591347307
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Sphere.20eversion.20project/near/199849997\">said</a>:</p>\n<blockquote>\n<p>\"The easiest example of a flexible construction problem which is not totally trivial and is algebraically obstructed is the deformation of immersions of circles into planes. \" Is it possible to give some Wikipedia link to the definition of an immersion? This term has a precise meaning, right?</p>\n</blockquote>\n<p>It looks like the three sentences following that one are meant to be the definition. (In general, an immersion <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>X</mi><mo>‚Üí</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">f:X \\to Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚Üí</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> is a smooth function whose differential <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>f</mi><mo>:</mo><mi>T</mi><mi>X</mi><mo>‚Üí</mo><mi>T</mi><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">df:TX\\to TY</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚Üí</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> is everywhere injective.  \"Deformations\" refers to smooth homotopies through the space of immersions, i.e. smooth maps <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo>:</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>√ó</mo><mi>X</mi><mo>‚Üí</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">F: [0,1]\\times X\\to Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">√ó</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚Üí</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mi>t</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo separator=\"true\">,</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f_t(x)=F(t,x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2805559999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">t</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span> is an immersion for each <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">t</span></span></span></span>.  Such homotopies are known as <em>regular homotopies</em>.)</p>",
        "id": 199857379,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1591352271
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I would really like a sorry to be able to point people to, for a blog post. \"That's the goal\"</p>",
        "id": 199858095,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591352814
    },
    {
        "content": "<p>Yes the three sentences following that one are meant to explain the words.</p>",
        "id": 199859873,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591354021
    },
    {
        "content": "<p>And the general explanation is in <a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/sect0001.html#a0000000003\">https://leanprover-community.github.io/sphere-eversion/blueprint/sect0001.html#a0000000003</a> and the next line.</p>",
        "id": 199859918,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591354056
    },
    {
        "content": "<p>We can't yet state the sphere eversion theorem because mathlib doesn't know that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">S</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb S^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> is a manifold, and doesn't know about immersions. But we can certainly sprint towards that.</p>",
        "id": 199860108,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591354169
    },
    {
        "content": "<p>Right -- just sorry the definitions, hide them away, assume that people know the specification but not the implementation.</p>",
        "id": 199860403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591354367
    },
    {
        "content": "<p>And find a juicy-looking theorem and say the proof is <code>sorry</code> and it can somehow be the flagship thing</p>",
        "id": 199860445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591354411
    },
    {
        "content": "<p>and you could run a comedy clone of the webserver which when you fire it up just has the theorem statement and sorried proof and challenge all-comers to fill in the sorry</p>",
        "id": 199860570,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591354497
    },
    {
        "content": "<p>mathematical deathmatch!</p>",
        "id": 199861732,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591355328
    },
    {
        "content": "<p>if some crank says that they can prove sphere eversion using Fermat's Last Theorem then you can tell them to go ahead and fill in the sorry</p>",
        "id": 199862392,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591355814
    },
    {
        "content": "<p>one reason we don't have much lean code in the repo is because e.g. caratheodory development is happening in mathlib</p>",
        "id": 199887933,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591368921
    },
    {
        "content": "<p>it would be nice later (or, right now, really) to have evidence that this mathlib development was caused by the sphere eversion project</p>",
        "id": 199888030,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591368952
    },
    {
        "content": "<p>(I don't have an idea how to implement that, just throwing out an open problem in \"mathematical MMO design theory\")</p>",
        "id": 199888191,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591369005
    },
    {
        "content": "<p>In the perfectoid project we tried to say explicitly in PR messages when it came from the project. But sometimes we forgot.</p>",
        "id": 199893263,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591371006
    },
    {
        "content": "<p>In my PRs from projects I've usually included that it's come from a project, but I'm not sure how helpful that is for Jalex's goal?</p>",
        "id": 199894308,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1591371424
    },
    {
        "content": "<p>to clarify, my goal is that an outsider should be able to tell, right now, that caratheodory has significant progress. I suppose it would be enough to have an earlier suggestion of kevin, which was something like:<br>\non each lemma tracked in the blueprint, let people leave comments saying things like \"I am working on this in the caratheodory2 branch of mathlib\"</p>",
        "id": 199894772,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591371640
    },
    {
        "content": "<p>like the comments on <a href=\"http://hgbook.red-bean.com/read/a-tour-of-mercurial-the-basics.html\">this book</a> (the book is about <code>hg</code>, a <code>git</code> alternative. The commenting is implemented in <code>hg</code> instead of in <code>git</code>, so can't be copied to use out-of-the-box)</p>",
        "id": 199894918,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591371706
    },
    {
        "content": "<p>Can we generate a GitHub issue per node and add links to these issues?</p>",
        "id": 199905641,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591376333
    },
    {
        "content": "<p>I don't think we should create issues a priori since it would make an unmanageable list, but we can certainly create them as soon as someone starts discussing something in particular.</p>",
        "id": 199905941,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591376487
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> In the graph <a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/dep_graph.html\">https://leanprover-community.github.io/sphere-eversion/blueprint/dep_graph.html</a> why does <code>theilliere</code> have a blue background, if it depends on the definition <code>corrugation</code> that hasn't been done yet...?</p>",
        "id": 199960884,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591428301
    },
    {
        "content": "<p>It means that the proof will be ready to be formalized as soon as the statement will be there. I know it looks a bit silly, but I wanted to convey the idea that formalizing the statement should be somehow prioritized since we will then be able to play proving it right away.</p>",
        "id": 199963145,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591432225
    },
    {
        "content": "<p>Aha. Thanks.</p>",
        "id": 199963237,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591432367
    },
    {
        "content": "<p>I'm open to other color coding suggestions of course, especially in this special case where it's clearly confusing.</p>",
        "id": 199963299,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591432456
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/Sphere.20eversion.20project/near/199963299\">said</a>:</p>\n<blockquote>\n<p>I'm open to other color coding suggestions of course, especially in this special case where it's clearly confusing.</p>\n</blockquote>\n<p>My gut reaction is to just leave the interior white. Take something like <code>one_jet_extension_prop</code>... that still has a decent amount of dependencies that need to be done first.</p>",
        "id": 199963593,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591432867
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, I think <a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/chap-loops.html#lem:int_cvx\">Lemma 1.4</a> is not the statement you want.</p>\n<p>As it's written, it's trivially true, because it says \"at most (d+1) points\" --- you just use Lemma 1.3, and discard the points with coefficient zero.<br>\nIt's not true if you change the statement to say \"exactly (d+1) points\" (take the intersection of the diagonals in a convex quadrilateral in R^2).</p>\n<p>Because in later applications we really need it to say \"exactly (d+1) points\" (because the essential fact is that the point is in the interior of a simplex), presumably Lemma 1.4 is meant to have stronger hypotheses, e.g. that P itself is open, as well as a stronger conclusion \"exactly (d+1) points\". Then the theorem becomes both true and useful. :-)</p>",
        "id": 199963846,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591433201
    },
    {
        "content": "<p>Indeed. And you can see from the \"proof\" that I wrote that statement in a hurry and wasn't happy about it.</p>",
        "id": 199963919,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591433298
    },
    {
        "content": "<p>I just made a <a href=\"https://github.com/leanprover-community/sphere-eversion/pull/8\">PR</a> to the sphere-eversion project which takes Patrick's human proof of lem:int_cvx and turns it into a Lean file with lots of sorries.</p>",
        "id": 200007203,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591504237
    },
    {
        "content": "<p>None of the statements have <code>sorry</code>, and I think it would be reasonable for someone to finish off this file without  having to introduce any new declarations. (i.e. nothing should take more than 10 lines to prove :-)</p>",
        "id": 200007211,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591504264
    },
    {
        "content": "<p>As <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> was discussing above, I hope files like this are useful intermediate steps between the human readable blueprint and a compilable Lean file.</p>",
        "id": 200007248,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591504323
    },
    {
        "content": "<p>Thanks Scott!</p>",
        "id": 200034249,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591551613
    },
    {
        "content": "<p>I think this is indeed a very good way to move the project forward. It even allows even more contributors to work on the project, since proving stuff is rather easier than writing definitions and statements in the right way.</p>",
        "id": 200034275,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591551669
    },
    {
        "content": "<p>I also love the idea that we could this as an excuse to improve and battle test our young affine geometry library. <span class=\"user-mention\" data-user-id=\"266253\">@Joseph Myers</span> did you see that PR?</p>",
        "id": 200034339,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591551738
    },
    {
        "content": "<p>I certainly expect there is some overlap between affine combinations of points as needed for barycentric coordinates for geometry (PR <a href=\"https://github.com/leanprover-community/mathlib/issues/2979\">#2979</a>), and whatever's needed for convexity (issue <a href=\"https://github.com/leanprover-community/mathlib/issues/2910\">#2910</a>).</p>\n<p>Defining homotheties in affine spaces (<code>dilation</code> in that PR) is on my list of things that obviously should be added to fill out the affine space implementation, but isn't done yet (although it's trivial).</p>",
        "id": 200035318,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1591553212
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> how do you feel about putting in italics the words being defined in a definition? I rather like this style but you use it sparingly. I'm currently on an exercise bike looking at the blueprint on a tablet and it looks <em>really</em> good</p>",
        "id": 200036137,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591554508
    },
    {
        "content": "<p>Sure, I also like this. But I guess I wasn't systematic here.</p>",
        "id": 200037541,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591556558
    },
    {
        "content": "<p>I have a branch with <code>dilation</code>, <code>const</code>, <code>line_map</code> affine maps and <code>monoid</code> structure on affine self-maps. I'll push it tonight.</p>",
        "id": 200038140,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591557538
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2981\">#2981</a></p>",
        "id": 200047945,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591572809
    },
    {
        "content": "<p>I started porting convexity to affine spaces, see branch <a href=\"https://github.com/leanprover-community/mathlib/tree/convex-affine\">convex-affine</a>. It should be ported to <code>line_map</code> from <a href=\"https://github.com/leanprover-community/mathlib/issues/2981\">#2981</a> and affine combinations of points from <a href=\"https://github.com/leanprover-community/mathlib/issues/2979\">#2979</a>.</p>",
        "id": 200049097,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591574944
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> What do you prefer with <a href=\"https://github.com/leanprover-community/sphere-eversion/pull/8\">https://github.com/leanprover-community/sphere-eversion/pull/8</a>, should I wait for all these mathlib PR to be merged first or would you prefer that I merge the this PR and modify stuff later?</p>",
        "id": 200071804,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591606451
    },
    {
        "content": "<p>My suggestion would be to merge earlier rather than later. I don't particularly mind, but for other contributors I'd suggest setting a \"lower bar\" for PRs etc to be accepted to a \"blueprint project\" than to something like mathlib.</p>",
        "id": 200071912,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591606512
    },
    {
        "content": "<p>I haven't even had a change to look at the affine combinations PR, so haven't thought about how to adapt to that.</p>",
        "id": 200071981,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591606560
    },
    {
        "content": "<p>Ok I don't mind merging. Any preference about squashing?</p>",
        "id": 200072139,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591606666
    },
    {
        "content": "<p>I think I have a slight preference for not squashing.</p>",
        "id": 200072217,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591606712
    },
    {
        "content": "<p>I guess I was going to say slight preference for squashing, but it's very weak.</p>",
        "id": 200074551,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591608279
    },
    {
        "content": "<p>As that sphere-eversion PR includes a <code>sorry</code> definition of <code>affine_independent</code>, I'll note I did start writing a definition of <code>affine_independent</code> for geometry purposes but it hasn't got far enough yet to be useful (and I don't guarantee what's there is correct). In case it's useful:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">affine_space</span>\n<span class=\"kn\">open</span> <span class=\"n\">add_torsor</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">affine_space</span> <span class=\"n\">k</span> <span class=\"n\">V</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"n\">S</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- Whether the points in an indexed family, minus a given base point,</span>\n<span class=\"cm\">produce linearly independent vectors. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">vsub_linear_independent</span> <span class=\"o\">{</span><span class=\"n\">Œπ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">linear_independent</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">-</span><span class=\"err\">·µ•</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">))</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- If the base point is in the indexed family,</span>\n<span class=\"cm\">`vsub_linear_independent` for the rest of that family does not depend</span>\n<span class=\"cm\">on the choice of base point. -/</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">vsub_linear_independent_of_vsub_linear_independent</span> <span class=\"o\">{</span><span class=\"n\">Œπ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i1</span> <span class=\"n\">i2</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">vsub_linear_independent</span> <span class=\"n\">k</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">‚â†</span> <span class=\"n\">i1</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">vsub_linear_independent</span> <span class=\"n\">k</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">‚â†</span> <span class=\"n\">i2</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">vsub_linear_independent</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">linear_independent_iff&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">linear_independent_iff&#39;</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">g</span> <span class=\"n\">hs</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"n\">conv_lhs</span> <span class=\"n\">at</span> <span class=\"n\">hs</span> <span class=\"o\">{</span>\n    <span class=\"n\">congr</span><span class=\"o\">,</span>\n    <span class=\"n\">skip</span><span class=\"o\">,</span>\n    <span class=\"n\">funext</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">‚Üê</span><span class=\"n\">vsub_sub_vsub_right_cancel</span> <span class=\"n\">V</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i1</span><span class=\"o\">),</span> <span class=\"n\">smul_sub</span><span class=\"o\">]</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- Whether the points in an indexed family are affinely</span>\n<span class=\"cm\">independent. This definition means an empty family is affinely</span>\n<span class=\"cm\">independent. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">affine_independent</span> <span class=\"o\">{</span><span class=\"n\">Œπ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span><span class=\"o\">),</span> <span class=\"n\">vsub_linear_independent</span> <span class=\"n\">k</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">‚â†</span> <span class=\"n\">i</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 200086517,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1591617043
    },
    {
        "content": "<p>Is this going to go in a PR soon? How about we update the <code>sorry</code> in the sphere-eversion file once it's in a PR and/or mathlib.</p>",
        "id": 200178252,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591671926
    },
    {
        "content": "<p>I think I'm done with url generation, see eg <a href=\"https://github.com/leanprover-community/sphere-eversion/commit/e9a8890590a2d2b93d9e36923d8d724ca88ec86f#diff-6194fd631687617766ca346682c26e22L290\">this change</a> which then generates <a href=\"https://github.com/leanprover-community/sphere-eversion//blob/5b7894bc319067e252cff7c45d76d193979ab336/src/local/int_cvx.lean#L130\">this url</a>. It means the LaTeX command <code>\\lean</code> now takes a list of fully qualified Lean names and will build urls. Those names have to be in scope when you import all files from the sphere eversion project, hence it won't work with mathlib declaration from files not (transitively) imported by the project. </p>\n<p>I apologize to <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> because in the end I don't use his export.json. I didn't think carefully enough before asking. I doesn't make sense to use his file since I need to pinpoint a mathlib commit, otherwise mathlib will move faster than the TeX file and data will get out of sync.</p>",
        "id": 200202141,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591696323
    },
    {
        "content": "<p>I also apologize for not writing (non-meta) Lean code for this project. All my Lean time is still taken up by infrastructure work, but this should improve soon (next week or earlier) since I hope we are now happy with the infrastructure (but it still needs some more cleanup in the <code>leanblueprint</code> plasTeX plugin) and I only have one last exam to mark and I'll be done with hiring committees on Thursday night.</p>",
        "id": 200202440,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591696513
    },
    {
        "content": "<p>There are a few other things I'll probably do with affine spaces and geometry before getting back to affine independent families, so feel free to pick up affine independence if you'd like it working sooner.</p>",
        "id": 200221527,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1591706789
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> By the way... have you seen this thread?</p>",
        "id": 200456080,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591813332
    },
    {
        "content": "<p>Yes, I have, I am interested to join.  I hope that at some point I can contribute to Lean's manifold libraries, and perhaps in particular do some of the manifold things needed for the sphere eversion project.</p>",
        "id": 200456333,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1591813447
    },
    {
        "content": "<p>I do now have a working definition of <code>affine_independent</code>, and a proof relating <code>affine_independent</code> and <code>linear_independent</code> (longer than I'd like, and depends on <a href=\"https://github.com/leanprover-community/mathlib/issues/3122\">#3122</a> for the definition and <a href=\"https://github.com/leanprover-community/mathlib/issues/3124\">#3124</a> for the proof), ready to PR once those two PRs are in.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- An indexed family is said to be affinely independent if no</span>\n<span class=\"cm\">nontrivial weighted subtractions (where the sum of weights is 0) are</span>\n<span class=\"cm\">0. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">affine_independent</span> <span class=\"o\">{</span><span class=\"n\">Œπ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Œπ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"err\">‚àë</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">weighted_vsub</span> <span class=\"n\">V</span> <span class=\"n\">w</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">i</span> <span class=\"err\">‚àà</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- A family is affinely independent if and only if the differences</span>\n<span class=\"cm\">from a base point in that family are linearly independent. -/</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">affine_independent_iff_linear_independent_vsub</span> <span class=\"o\">{</span><span class=\"n\">Œπ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i1</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">affine_independent</span> <span class=\"n\">k</span> <span class=\"n\">V</span> <span class=\"n\">p</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">linear_independent</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">‚â†</span> <span class=\"n\">i1</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">-</span><span class=\"err\">·µ•</span> <span class=\"n\">p</span> <span class=\"n\">i1</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">sorry</span> <span class=\"c1\">-- long proof omitted here</span>\n</code></pre></div>",
        "id": 201540484,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1592755312
    },
    {
        "content": "<p>I've been greenwashing the <a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/dep_graph.html\">dependency graph</a>. As usual with greenwashing, this is pretty superficial. I wrote definitions and stated theorems, but haven't proved anything. As usual, you can see the <a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/coverage.html\">next targets</a>. The preliminaries part is still waiting for some affine geometry PRs but it should move forward soon.</p>",
        "id": 202106379,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593185968
    },
    {
        "content": "<p>Is there a maths proof somewhere for Lemma 2.13?</p>",
        "id": 202106686,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1593186061
    },
    {
        "content": "<p>We will also need to glue <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/master/src/loops/int_cvx.lean\">https://github.com/leanprover-community/sphere-eversion/blob/master/src/loops/int_cvx.lean</a> to <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/master/src/loops/basic.lean#L32-L43\">https://github.com/leanprover-community/sphere-eversion/blob/master/src/loops/basic.lean#L32-L43</a></p>",
        "id": 202106710,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593186077
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/116395-maths/topic/Sphere.20eversion.20project/near/202106686\">said</a>:</p>\n<blockquote>\n<p>Is there a maths proof somewhere for Lemma 2.13?</p>\n</blockquote>\n<p>Good point, I forgot to write it. Of course the real world proof is: this is obviously obvious. But at some point I also thought about a nice Lean path. I need to remember it and write it down.</p>",
        "id": 202106886,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593186154
    },
    {
        "content": "<p>if i'm looking at the blueprint and see a statement with a green border, what's the intended way for me to pull up the lean statement?</p>",
        "id": 202106928,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593186181
    },
    {
        "content": "<p>Hmm, it needs quite a lot of clicks. Clicking the node will show the math statement. Clicking the header brings the blueprint page, clicking Lean next to the header shows the link to GitHub.</p>",
        "id": 202107656,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593186566
    },
    {
        "content": "<p>I could easily save a couple of clicks here.</p>",
        "id": 202107682,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593186586
    },
    {
        "content": "<p>it would be amazing if clicking the node would show the math statement and the lean statement</p>",
        "id": 202108764,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593187113
    },
    {
        "content": "<p>Showing a link to GitHub is easy (and already done from the main text). Going further would require more work. It's nothing impossible of course, as proven by mathlib docs, but I already spent a <em>lot</em> of time on this infrastructure, and now I need to prove stuff.</p>",
        "id": 202108994,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593187217
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> I pushed a LaTeX <a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/chap-local.html#a0000000046\">proof</a>. I think this is a very nice target. It will be helpful to the topology library (I think we don't have path-connected components) and linear algebra. Of course there should be many preliminaries Lean lemmas.</p>",
        "id": 202112910,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593189159
    },
    {
        "content": "<p>Great, Bhavik opened a <a href=\"https://github.com/leanprover-community/sphere-eversion/pull/10\">WIP PR</a>.</p>",
        "id": 202123639,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593195212
    },
    {
        "content": "<p>I should say this is pretty much one of the first times I'm using this bit of mathlib, so it's entirely possible that some of my proofs can be shortened/improved!</p>",
        "id": 202123829,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1593195329
    },
    {
        "content": "<p>Defining path components of sets is tricky because there are so many options. In addition to what Bhavik did in his PR, consider the following two options:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">instances</span><span class=\"bp\">.</span><span class=\"n\">real</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">topological_space</span> <span class=\"n\">filter</span>\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">set</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">I</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"mi\">1</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\">## Using a structured predicate on ‚Ñù ‚Üí X</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- A path `Œ≥` joins `x` to `y` in `F` -/</span>\n<span class=\"kn\">structure</span> <span class=\"n\">joins_in</span> <span class=\"o\">(</span><span class=\"n\">Œ≥</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">cont</span> <span class=\"o\">:</span> <span class=\"n\">continuous_on</span> <span class=\"n\">Œ≥</span> <span class=\"n\">I</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">src</span> <span class=\"o\">:</span> <span class=\"n\">Œ≥</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">tgt</span> <span class=\"o\">:</span> <span class=\"n\">Œ≥</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inside</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">t</span> <span class=\"err\">‚àà</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">Œ≥</span> <span class=\"n\">t</span> <span class=\"err\">‚àà</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">joined_in</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">Œ≥</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">joins_in</span> <span class=\"n\">Œ≥</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">F</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\">## Using bundled paths</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- A continuous path in `F` -/</span>\n<span class=\"kn\">structure</span> <span class=\"n\">path</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">cont&#39;</span> <span class=\"o\">:</span> <span class=\"n\">continuous_on</span> <span class=\"n\">to_fun</span> <span class=\"n\">I</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inside&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">t</span> <span class=\"err\">‚àà</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"n\">t</span> <span class=\"err\">‚àà</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span>  <span class=\"o\">(</span><span class=\"n\">path</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">‚ü®_</span><span class=\"o\">,</span> <span class=\"n\">path</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span><span class=\"bp\">‚ü©</span>\n\n<span class=\"c1\">-- Now restate fields of path in terms of the coercion</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">path</span><span class=\"bp\">.</span><span class=\"n\">cont</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Œ≥</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">continuous_on</span> <span class=\"n\">Œ≥</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"n\">Œ≥</span><span class=\"bp\">.</span><span class=\"n\">cont&#39;</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">path</span><span class=\"bp\">.</span><span class=\"n\">inside</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Œ≥</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">t</span> <span class=\"err\">‚àà</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">Œ≥</span> <span class=\"n\">t</span> <span class=\"err\">‚àà</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">Œ≥</span><span class=\"bp\">.</span><span class=\"n\">inside&#39;</span>\n\n<span class=\"n\">def</span> <span class=\"n\">joined_in&#39;</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">Œ≥</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">Œ≥</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">‚àß</span> <span class=\"n\">Œ≥</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n</code></pre></div>\n\n\n<p>This is only scratching the surface of design space like Leo would say.</p>",
        "id": 202124933,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593195990
    },
    {
        "content": "<p>Everybody is welcome to come up with alternative designs and, more importantly, try to manipulate it. The first milestone is to prove this gives an equivalence relation. Next prove a couple of simple sets are connected.</p>",
        "id": 202125074,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593196075
    },
    {
        "content": "<p>Note the common point of those alternative approaches is to avoid subtypes everywhere (source and target).</p>",
        "id": 202125186,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593196118
    },
    {
        "content": "<p>I think it's a pretty safe bet, but I may be wrong.</p>",
        "id": 202125258,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593196163
    },
    {
        "content": "<p>I think what makes me nervous about these is that it might be awkward to define <code>Œ≥</code> on all of R, although if we provide a constructor allowing one to define it on [0,1] instead this could be alright</p>",
        "id": 202125378,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1593196210
    },
    {
        "content": "<p>I agree that the subtypes in my version aren't the most pleasant though</p>",
        "id": 202125399,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1593196224
    },
    {
        "content": "<p>For what it's worth, my vote goes to the bundled path approach above</p>",
        "id": 202125837,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1593196454
    },
    {
        "content": "<p>I'm serious when I write we shouldn't vote before trying all three approaches (and maybe one more).</p>",
        "id": 202129312,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593198317
    },
    {
        "content": "<p>About defining only on [0, 1], I claim that if you can prove transitivity of the relation then it won't matter. The only explicit constructions will be affine maps.</p>",
        "id": 202129465,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593198372
    },
    {
        "content": "<p>An approach was already explored in <a href=\"https://github.com/leanprover-community/mathlib/issues/1160\">#1160</a>.</p>",
        "id": 202135479,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593201543
    },
    {
        "content": "<p>See in particular the comments by Reid there.</p>",
        "id": 202135628,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593201606
    },
    {
        "content": "<p>I'll read that, but we don't need anything that looks even remotely like homotopy theory here.</p>",
        "id": 202150125,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593210304
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> do you intend to work on that soon? Or would you prefer that I setup path connected component and then you try to prove stuff from the project?</p>",
        "id": 202296554,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593429570
    },
    {
        "content": "<p>I made a bit more progress but I wasn't sure that there's much point in me continuing to prove things about path connectivity if we're going to change the definition later on</p>",
        "id": 202329988,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1593446142
    },
    {
        "content": "<p>I think though that I'm probably not the best person to explore how good different definitions are for topology since I don't know the topology library at all well</p>",
        "id": 202330219,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1593446258
    },
    {
        "content": "<p>Did you try to prove transitivity?</p>",
        "id": 202330226,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593446260
    },
    {
        "content": "<p>Did you want to play with the linear algebra part of this lemma instead?</p>",
        "id": 202330336,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593446295
    },
    {
        "content": "<p>I did and the annoying part for me was showing continuity - I think it was because the gluing lemma and continuity of subtypes was tricky to me; but this might be me not understanding/finding the right lemmas</p>",
        "id": 202330710,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1593446473
    },
    {
        "content": "<p>For instance I also struggled with <a href=\"https://github.com/leanprover-community/sphere-eversion/pull/10/files#diff-c7f593664d2edfb1c442be00f422be93R42\">https://github.com/leanprover-community/sphere-eversion/pull/10/files#diff-c7f593664d2edfb1c442be00f422be93R42</a></p>",
        "id": 202330739,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1593446494
    },
    {
        "content": "<p>Of course continuity is the annoying part, there is nothing else!</p>",
        "id": 202330841,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593446528
    },
    {
        "content": "<p>Again, all this is already done in <a href=\"https://github.com/leanprover-community/mathlib/issues/1160\">#1160</a>.</p>",
        "id": 202331438,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593446845
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> I just pushed an experiment in <a href=\"https://github.com/leanprover-community/sphere-eversion/commit/9d4fde464db108e4aae1ab5cf5a9449a429031ba\">https://github.com/leanprover-community/sphere-eversion/commit/9d4fde464db108e4aae1ab5cf5a9449a429031ba</a>. There is one file that proves a rather general gluing lemma for <code>continuous_on</code>. The proof needs cleaning up (there is a big almost duplicate chunk in the middle) but we'll need the statement a lot in other places of the project. Then there is a file about path connected sets which is an easy application (the gluing lemma is used to concatenate paths). The main theme of this approach is to avoid subtypes everywhere. Every data is global and conditions are enforced only on subsets. I'm not yet fully convinced this is the way to go, but at least there is no coercion to fight (since coercions to functions now work). I hope this can get you unstuck on the way to the part you feel comfortable working on.</p>",
        "id": 202589735,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593620317
    },
    {
        "content": "<p>Wonderful, looks great, thanks!</p>",
        "id": 202590000,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1593620470
    },
    {
        "content": "<p>What's the purpose of <code>F</code> rather than just using the whole space?</p>",
        "id": 202590274,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593620638
    },
    {
        "content": "<p>As far as I can see, removing <code>F</code> makes everything simpler</p>",
        "id": 202590344,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593620656
    },
    {
        "content": "<p>I think it makes it easier to speak about path connected subsets</p>",
        "id": 202590366,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1593620670
    },
    {
        "content": "<p>It doesn't look easier though.</p>",
        "id": 202590406,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593620698
    },
    {
        "content": "<p>The alternative is to use the subspace topology which is against the main theme</p>",
        "id": 202590421,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1593620703
    },
    {
        "content": "<p>As far as I can tell</p>",
        "id": 202590433,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1593620706
    },
    {
        "content": "<p>Yes, use the subspace topology.</p>",
        "id": 202590467,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593620728
    },
    {
        "content": "<p>For functions out of a subspace I can kind of understand these oblique methods, but for functions into a subspace they don't seem to gain anything.</p>",
        "id": 202590551,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593620762
    },
    {
        "content": "<p>By the way, it's harmless to define the path as a continuous function on the whole real line since you can map the reals to [0, 1] continuously and preserving 0 and 1.</p>",
        "id": 202590665,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593620809
    },
    {
        "content": "<p>Yes, I wanted to also try with using the subspace topology. This is not the really complicated part anyway. The gluing lemma is more complicated than I would like. But your continuity trick could help here, I definitely didn't think about it.</p>",
        "id": 202592151,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593621488
    },
    {
        "content": "<p>All these discussions are so unnatural from a mathematical perspective where moving between types and subtypes is completely transparent.</p>",
        "id": 202592252,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593621529
    },
    {
        "content": "<p>Another nice animation: <a href=\"https://rreusser.github.io/explorations/sphere-eversion/\">https://rreusser.github.io/explorations/sphere-eversion/</a></p>",
        "id": 202859569,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593844293
    },
    {
        "content": "<p>hi! after some tragic struggles, I've very recently regained the ability to actually run Lean. I was hoping there might be something I can do that can possibly be helpful for this project. is there any other ongoing work I should be aware of, in addition to the discussion here &amp; what's in the repository so far?</p>\n<p>I spent some time last year prodding at <a href=\"https://github.com/leanprover-community/mathlib/issues/1160\">#1160</a> as well as other previous approaches towards paths-y stuff (<a href=\"https://github.com/ImperialCollegeLondon/xena-UROP-2018/tree/master/src/Topology\">https://github.com/ImperialCollegeLondon/xena-UROP-2018/tree/master/src/Topology</a>),  so I looked at the blueprint and started out trying have a go at some of the sorries in <code>loops/surrounding</code>, and then I realised I didn't have some Elementary Topology Facts‚Ñ¢. I sidetracked and started writing some of those down:</p>\n<p><a href=\"https://github.com/leanprover-community/sphere-eversion/pull/11\">https://github.com/leanprover-community/sphere-eversion/pull/11</a></p>\n<p>I feel that not having to worry about functions out of a unit-interval subtype with this formulation was nice, but some of the stuff I wrote down myself involving relative-open-ness and <code>nhds_within</code> felt maybe a little dubious? There are comments; hopefully those would be helpful even if the code isn't very, as just an example of someone naively trying to work with the implementation.</p>",
        "id": 203844657,
        "sender_full_name": "Jean Lo",
        "timestamp": 1594739269
    },
    {
        "content": "<p>HI! This project has not moved recently because all my Lean time has been devoted to preparing the workshop. But I'll certainly return to it and you are very welcome.</p>",
        "id": 203867007,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594750136
    },
    {
        "content": "<p>Next week I'm meant to be in vacations but I'll try to move this project forward a bit.</p>",
        "id": 203867034,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594750163
    },
    {
        "content": "<p>I was looking at the graph again <a href=\"https://leanprover-community.github.io/sphere-eversion/blueprint/dep_graph.html\">https://leanprover-community.github.io/sphere-eversion/blueprint/dep_graph.html</a> and I'm excited to see that there's already quite a lot of blue there! (And also a bunch of green borders, which means that those are <code>sorry</code>s whose statement is done, but the proof has to be filled in.)</p>",
        "id": 208255090,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598551945
    },
    {
        "content": "<p>Yes, I defined a bunch of things and stated quite a few lemmas, hoping it would be easier to contribute proofs, but up to now nobody proved much. I've been working of the mathlib side however, as you can see <a href=\"https://github.com/leanprover-community/mathlib/search?q=sphere+eversion&amp;type=Issues\">here</a>. I need to finish the determinant series, but I'm working on integration in parallel. I have a proof of the main theorem about differentiation under the integral sign modulo the theorem claiming you can commute integration and applying a continuous linear map. Unfortunately the later result is very close to the construction and I'm waiting for help from either S√©bastien or Yury.</p>",
        "id": 208260361,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598554471
    },
    {
        "content": "<p>Oh, I just saw Anatole opened a PR three hours ago!</p>",
        "id": 208261626,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598555033
    },
    {
        "content": "<p>I'll look into the \"commute\" statement. I also need it but for a different reason: I want to prove that the integral of a \"uniformly analytic\" family of functions is analytic.</p>",
        "id": 210184521,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1600201016
    },
    {
        "content": "<p>Oh I have a proof of the commute statement.</p>",
        "id": 210184570,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1600201044
    },
    {
        "content": "<p>My last 5 PRs or so are working towards this.</p>",
        "id": 210184592,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1600201059
    },
    {
        "content": "<p>It was a nightmare until Floris proved his induction principle for integrable functions.</p>",
        "id": 210184696,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1600201096
    },
    {
        "content": "<p>Do you want to see the proof?</p>",
        "id": 210184799,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1600201142
    },
    {
        "content": "<p>Actually I think I have enough preliminaries for the commutation lemma now. So I need one PR for this lemma, one calculus preliminaries PR and then one PR differentiating under integrals.</p>",
        "id": 210185315,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1600201399
    },
    {
        "content": "<p>What induction principle are you talking about?</p>",
        "id": 210187851,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1600202633
    },
    {
        "content": "<p>Found <a href=\"https://github.com/leanprover-community/mathlib/issues/3978\">#3978</a></p>",
        "id": 210188080,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1600202743
    },
    {
        "content": "<p>Could you please paste the statement of the commute lemma here? What typeclasses do you assume?</p>",
        "id": 210188687,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1600203042
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">continuous_linear_map</span><span class=\"bp\">.</span><span class=\"n\">integral_apply_comm</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">Œº</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">second_countable_topology</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">borel_space</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">second_countable_topology</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">borel_space</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">œÜ</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">‚Ñù</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">),</span>\n    <span class=\"n\">measurable</span> <span class=\"n\">œÜ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">integrable</span> <span class=\"n\">œÜ</span> <span class=\"n\">Œº</span> <span class=\"bp\">‚Üí</span> <span class=\"err\">‚à´</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">),</span> <span class=\"err\">‚áë</span><span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"err\">‚àÇ</span><span class=\"n\">Œº</span> <span class=\"bp\">=</span> <span class=\"err\">‚áë</span><span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"err\">‚à´</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">),</span> <span class=\"n\">œÜ</span> <span class=\"n\">a</span> <span class=\"err\">‚àÇ</span><span class=\"n\">Œº</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 210189728,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1600203548
    },
    {
        "content": "<p>And of course there is a version with <code>(œÜ : Œ± ‚Üí‚ÇÅ[Œº] E)</code></p>",
        "id": 210189898,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1600203613
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">set_integral</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span> <span class=\"n\">measure_theory</span> <span class=\"n\">filter</span> <span class=\"n\">metric</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span> <span class=\"n\">filter</span> <span class=\"n\">nnreal</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">Œº</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">second_countable_topology</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n          <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">borel_space</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">second_countable_topology</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">borel_space</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">measure_theory</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">integrable</span><span class=\"bp\">.</span><span class=\"n\">clm_apply</span> <span class=\"o\">{</span><span class=\"n\">œÜ</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">œÜ_int</span> <span class=\"o\">:</span> <span class=\"n\">integrable</span> <span class=\"n\">œÜ</span> <span class=\"n\">Œº</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">‚Ñù</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">integrable</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">),</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">Œº</span> <span class=\"o\">:=</span>\n<span class=\"o\">((</span><span class=\"n\">integrable</span><span class=\"bp\">.</span><span class=\"n\">norm</span> <span class=\"n\">œÜ_int</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">const_mul</span> <span class=\"err\">‚à•</span><span class=\"n\">L</span><span class=\"err\">‚à•</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mono&#39;</span> <span class=\"o\">(</span><span class=\"n\">eventually_of_forall</span> <span class=\"err\">$</span> <span class=\"bp\">Œª</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">le_op_norm</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n\n<span class=\"n\">def</span> <span class=\"n\">l1</span><span class=\"bp\">.</span><span class=\"n\">clm_apply</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span><span class=\"err\">‚ÇÅ</span><span class=\"o\">[</span><span class=\"n\">Œº</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">‚Ñù</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span><span class=\"err\">‚ÇÅ</span><span class=\"o\">[</span><span class=\"n\">Œº</span><span class=\"o\">]</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"n\">l1</span><span class=\"bp\">.</span><span class=\"n\">of_fun</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span><span class=\"bp\">.</span><span class=\"n\">measurable</span><span class=\"bp\">.</span><span class=\"n\">clm_apply</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span><span class=\"bp\">.</span><span class=\"n\">integrable</span><span class=\"bp\">.</span><span class=\"n\">clm_apply</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">l1</span><span class=\"bp\">.</span><span class=\"n\">clm_apply_apply</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span><span class=\"err\">‚ÇÅ</span><span class=\"o\">[</span><span class=\"n\">Œº</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">‚Ñù</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span><span class=\"err\">·µê</span> <span class=\"n\">a</span> <span class=\"err\">‚àÇ</span><span class=\"n\">Œº</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span><span class=\"bp\">.</span><span class=\"n\">clm_apply</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">l1</span><span class=\"bp\">.</span><span class=\"n\">to_fun_of_fun</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n\n<span class=\"c1\">-- The next lemma is a bit silly since the conclusion holds everywhere, but this weakening is</span>\n<span class=\"c1\">-- useful</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">l1</span><span class=\"bp\">.</span><span class=\"n\">norm_clm_apply_le</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span><span class=\"err\">‚ÇÅ</span><span class=\"o\">[</span><span class=\"n\">Œº</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">‚Ñù</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span><span class=\"err\">·µê</span> <span class=\"n\">a</span> <span class=\"err\">‚àÇ</span><span class=\"n\">Œº</span><span class=\"o\">,</span> <span class=\"err\">‚à•</span><span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"err\">‚à•</span> <span class=\"bp\">‚â§</span> <span class=\"err\">‚à•</span><span class=\"n\">L</span><span class=\"err\">‚à•</span><span class=\"bp\">*</span><span class=\"err\">‚à•</span><span class=\"n\">œÜ</span> <span class=\"n\">a</span><span class=\"err\">‚à•</span> <span class=\"o\">:=</span>\n<span class=\"n\">eventually_of_forall</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">le_op_norm</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">l1</span><span class=\"bp\">.</span><span class=\"n\">measurable_clm_apply</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">‚Ñù</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span><span class=\"err\">‚ÇÅ</span><span class=\"o\">[</span><span class=\"n\">Œº</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">):</span> <span class=\"n\">measurable</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span><span class=\"bp\">.</span><span class=\"n\">clm_apply</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">œÜ</span><span class=\"bp\">.</span><span class=\"n\">clm_apply</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">measurable</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">l1</span><span class=\"bp\">.</span><span class=\"n\">measurable_clm_apply&#39;</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">‚Ñù</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span><span class=\"err\">‚ÇÅ</span><span class=\"o\">[</span><span class=\"n\">Œº</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">):</span> <span class=\"n\">measurable</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">measurable</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">œÜ</span><span class=\"bp\">.</span><span class=\"n\">measurable</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">l1</span><span class=\"bp\">.</span><span class=\"n\">integrable_clm_apply</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">‚Ñù</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span><span class=\"err\">‚ÇÅ</span><span class=\"o\">[</span><span class=\"n\">Œº</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">):</span> <span class=\"n\">integrable</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span><span class=\"bp\">.</span><span class=\"n\">clm_apply</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">Œº</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">œÜ</span><span class=\"bp\">.</span><span class=\"n\">clm_apply</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">integrable</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">l1</span><span class=\"bp\">.</span><span class=\"n\">integrable_clm_apply&#39;</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">‚Ñù</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span><span class=\"err\">‚ÇÅ</span><span class=\"o\">[</span><span class=\"n\">Œº</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">):</span> <span class=\"n\">integrable</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"n\">Œº</span> <span class=\"o\">:=</span>\n<span class=\"n\">œÜ</span><span class=\"bp\">.</span><span class=\"n\">integrable</span><span class=\"bp\">.</span><span class=\"n\">clm_apply</span> <span class=\"n\">L</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">l1</span><span class=\"bp\">.</span><span class=\"n\">integral_clm_apply</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span><span class=\"err\">‚ÇÅ</span><span class=\"o\">[</span><span class=\"n\">Œº</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">‚Ñù</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">):</span>\n  <span class=\"err\">‚à´</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span><span class=\"bp\">.</span><span class=\"n\">clm_apply</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"err\">‚àÇ</span><span class=\"n\">Œº</span> <span class=\"bp\">=</span> <span class=\"err\">‚à´</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"err\">‚àÇ</span><span class=\"n\">Œº</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">l1</span><span class=\"bp\">.</span><span class=\"n\">clm_apply</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">l1</span><span class=\"bp\">.</span><span class=\"n\">clm_apply‚Çó</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">‚Ñù</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span><span class=\"err\">‚ÇÅ</span><span class=\"o\">[</span><span class=\"n\">Œº</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span><span class=\"err\">‚Çó</span><span class=\"o\">[</span><span class=\"n\">‚Ñù</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span><span class=\"err\">‚ÇÅ</span><span class=\"o\">[</span><span class=\"n\">Œº</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">œÜ</span><span class=\"o\">,</span> <span class=\"n\">œÜ</span><span class=\"bp\">.</span><span class=\"n\">clm_apply</span> <span class=\"n\">L</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">l1</span><span class=\"bp\">.</span><span class=\"n\">clm_apply</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">‚Üê</span> <span class=\"n\">l1</span><span class=\"bp\">.</span><span class=\"n\">of_fun_add</span><span class=\"o\">,</span> <span class=\"n\">l1</span><span class=\"bp\">.</span><span class=\"n\">of_fun_eq_of_fun</span><span class=\"o\">],</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">l1</span><span class=\"bp\">.</span><span class=\"n\">add_to_fun</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mono</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_apply</span><span class=\"o\">,</span> <span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">map_add</span><span class=\"o\">]</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">map_smul&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">c</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">l1</span><span class=\"bp\">.</span><span class=\"n\">clm_apply</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">‚Üê</span> <span class=\"n\">l1</span><span class=\"bp\">.</span><span class=\"n\">of_fun_smul</span><span class=\"o\">,</span> <span class=\"n\">l1</span><span class=\"bp\">.</span><span class=\"n\">of_fun_eq_of_fun</span><span class=\"o\">],</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">l1</span><span class=\"bp\">.</span><span class=\"n\">smul_to_fun</span> <span class=\"n\">c</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mono</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">smul_apply</span><span class=\"o\">,</span> <span class=\"n\">continuous_linear_map</span><span class=\"bp\">.</span><span class=\"n\">map_smul</span><span class=\"o\">]</span>\n  <span class=\"kn\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">l1</span><span class=\"bp\">.</span><span class=\"n\">clm_apply_norm_le</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span><span class=\"err\">‚ÇÅ</span><span class=\"o\">[</span><span class=\"n\">Œº</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">‚Ñù</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">‚à•</span><span class=\"n\">œÜ</span><span class=\"bp\">.</span><span class=\"n\">clm_apply</span> <span class=\"n\">L</span><span class=\"err\">‚à•</span> <span class=\"bp\">‚â§</span> <span class=\"err\">‚à•</span><span class=\"n\">L</span><span class=\"err\">‚à•</span><span class=\"bp\">*</span><span class=\"err\">‚à•</span><span class=\"n\">œÜ</span><span class=\"err\">‚à•</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">erw</span> <span class=\"n\">l1</span><span class=\"bp\">.</span><span class=\"n\">norm_of_fun_eq_integral_norm</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span>\n  <span class=\"err\">‚à´</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"err\">‚à•</span><span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"err\">‚à•</span> <span class=\"err\">‚àÇ</span><span class=\"n\">Œº</span> <span class=\"bp\">‚â§</span> <span class=\"err\">‚à´</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"err\">‚à•</span><span class=\"n\">L</span><span class=\"err\">‚à•</span> <span class=\"bp\">*</span><span class=\"err\">‚à•</span><span class=\"n\">œÜ</span> <span class=\"n\">a</span><span class=\"err\">‚à•</span> <span class=\"err\">‚àÇ</span><span class=\"n\">Œº</span> <span class=\"o\">:</span> <span class=\"n\">integral_mono</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">measurable</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">œÜ</span><span class=\"bp\">.</span><span class=\"n\">measurable</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">norm</span>\n                                <span class=\"o\">(</span><span class=\"n\">œÜ</span><span class=\"bp\">.</span><span class=\"n\">integrable_clm_apply&#39;</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">norm</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span><span class=\"bp\">.</span><span class=\"n\">measurable_norm</span><span class=\"bp\">.</span><span class=\"n\">const_mul</span> <span class=\"err\">$</span> <span class=\"err\">‚à•</span><span class=\"n\">L</span><span class=\"err\">‚à•</span><span class=\"o\">)</span>\n                                <span class=\"o\">(</span><span class=\"n\">œÜ</span><span class=\"bp\">.</span><span class=\"n\">integrable_norm</span><span class=\"bp\">.</span><span class=\"n\">const_mul</span> <span class=\"err\">$</span> <span class=\"err\">‚à•</span><span class=\"n\">L</span><span class=\"err\">‚à•</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span><span class=\"bp\">.</span><span class=\"n\">norm_clm_apply_le</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"err\">‚à•</span><span class=\"n\">L</span><span class=\"err\">‚à•</span> <span class=\"bp\">*</span> <span class=\"err\">‚à•</span><span class=\"n\">œÜ</span><span class=\"err\">‚à•</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">integral_mul_left</span><span class=\"o\">,</span> <span class=\"n\">œÜ</span><span class=\"bp\">.</span><span class=\"n\">norm_eq_integral_norm</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">measure_theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">Œº</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">continuous_linear_map</span><span class=\"bp\">.</span><span class=\"n\">l1_apply</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">‚Ñù</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span><span class=\"err\">‚ÇÅ</span><span class=\"o\">[</span><span class=\"n\">Œº</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">‚Ñù</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span><span class=\"err\">‚ÇÅ</span><span class=\"o\">[</span><span class=\"n\">Œº</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">mk_continuous</span> <span class=\"o\">(</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">l1</span><span class=\"bp\">.</span><span class=\"n\">clm_apply‚Çó</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">‚à•</span><span class=\"n\">L</span><span class=\"err\">‚à•</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">œÜ</span><span class=\"o\">,</span> <span class=\"n\">œÜ</span><span class=\"bp\">.</span><span class=\"n\">clm_apply_norm_le</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">continuous_linear_map</span><span class=\"bp\">.</span><span class=\"n\">continuous_integral_apply</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">‚Ñù</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span><span class=\"err\">‚ÇÅ</span><span class=\"o\">[</span><span class=\"n\">Œº</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"err\">‚à´</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">),</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"err\">‚àÇ</span><span class=\"n\">Œº</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"err\">‚Üê</span> <span class=\"n\">funext</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">œÜ</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span><span class=\"err\">‚ÇÅ</span><span class=\"o\">[</span><span class=\"n\">Œº</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">œÜ</span><span class=\"bp\">.</span><span class=\"n\">integral_clm_apply</span> <span class=\"n\">L</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">continuous_integral</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">l1_apply</span> <span class=\"n\">Œº</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">continuous</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">Œº</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">continuous_linear_map</span><span class=\"bp\">.</span><span class=\"n\">integral_apply_comm</span> <span class=\"o\">{</span><span class=\"n\">œÜ</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">‚Ñù</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">œÜ_meas</span> <span class=\"o\">:</span> <span class=\"n\">measurable</span> <span class=\"n\">œÜ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">œÜ_int</span> <span class=\"o\">:</span> <span class=\"n\">integrable</span> <span class=\"n\">œÜ</span> <span class=\"n\">Œº</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">‚à´</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"err\">‚àÇ</span><span class=\"n\">Œº</span> <span class=\"bp\">=</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"err\">‚à´</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">œÜ</span> <span class=\"n\">a</span> <span class=\"err\">‚àÇ</span><span class=\"n\">Œº</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">integrable</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">œÜ_meas</span> <span class=\"n\">œÜ_int</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">e</span> <span class=\"n\">s</span> <span class=\"n\">s_meas</span> <span class=\"n\">s_finite</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">integral_indicator_const</span> <span class=\"n\">e</span> <span class=\"n\">s_meas</span><span class=\"o\">,</span> <span class=\"n\">continuous_linear_map</span><span class=\"bp\">.</span><span class=\"n\">map_smul</span><span class=\"o\">,</span>\n        <span class=\"err\">‚Üê</span> <span class=\"n\">integral_indicator_const</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">s_meas</span><span class=\"o\">],</span>\n    <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">indicator_comp_of_zero</span> <span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">map_zero</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">H</span> <span class=\"n\">f_meas</span> <span class=\"n\">g_meas</span> <span class=\"n\">f_int</span> <span class=\"n\">g_int</span> <span class=\"n\">hf</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">integral_add</span> <span class=\"n\">f_meas</span> <span class=\"n\">f_int</span> <span class=\"n\">g_meas</span> <span class=\"n\">g_int</span><span class=\"o\">,</span>\n      <span class=\"n\">integral_add</span> <span class=\"o\">(</span><span class=\"n\">f_meas</span><span class=\"bp\">.</span><span class=\"n\">clm_apply</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f_int</span><span class=\"bp\">.</span><span class=\"n\">clm_apply</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">g_meas</span><span class=\"bp\">.</span><span class=\"n\">clm_apply</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g_int</span><span class=\"bp\">.</span><span class=\"n\">clm_apply</span> <span class=\"n\">L</span><span class=\"o\">),</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">is_closed_eq</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">continuous_integral_apply</span> <span class=\"n\">Œº</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">continuous</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">continuous_integral</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">hfg</span> <span class=\"n\">f_meas</span> <span class=\"n\">g_meas</span> <span class=\"n\">f_int</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">hf</span> <span class=\"kn\">using</span> <span class=\"mi\">1</span> <span class=\"bp\">;</span> <span class=\"n\">clear</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">integral_congr_ae</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">measurable</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">g_meas</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">measurable</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">f_meas</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfg</span><span class=\"bp\">.</span><span class=\"n\">fun_comp</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">integral_congr_ae</span> <span class=\"n\">g_meas</span> <span class=\"n\">f_meas</span> <span class=\"n\">hfg</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">continuous_linear_map</span><span class=\"bp\">.</span><span class=\"n\">l1_integral_apply_comm</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">‚Ñù</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span><span class=\"err\">‚ÇÅ</span><span class=\"o\">[</span><span class=\"n\">Œº</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"err\">‚à´</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">œÜ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"err\">‚àÇ</span><span class=\"n\">Œº</span> <span class=\"bp\">=</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"err\">‚à´</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">œÜ</span> <span class=\"n\">a</span> <span class=\"err\">‚àÇ</span><span class=\"n\">Œº</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">integral_apply_comm</span> <span class=\"n\">œÜ</span><span class=\"bp\">.</span><span class=\"n\">measurable</span> <span class=\"n\">œÜ</span><span class=\"bp\">.</span><span class=\"n\">integrable</span>\n</code></pre></div>",
        "id": 210190139,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1600203724
    },
    {
        "content": "<p>I don't have time to make a PR today but you can already comment on the above code if you want. This should work with a modern mathlib.</p>",
        "id": 210190205,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1600203769
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 210190525,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1600203908
    },
    {
        "content": "<p>Is that version suitable for your use?</p>",
        "id": 210191602,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1600204455
    },
    {
        "content": "<p>Most probably yes but there may be difficulties.</p>",
        "id": 210193593,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1600205540
    },
    {
        "content": "<p>(e.g., I'm not sure yet what <code>[second_countable_topology]</code> assumption I'll need).</p>",
        "id": 210193843,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1600205656
    },
    {
        "content": "<p>Both second countability assumptions are needed to even write the integrals from the statement, unless you redo Bochner integration without second countability. Did you notice <a href=\"https://github.com/leanprover-community/mathlib/issues/4099\">#4099</a>?</p>",
        "id": 210198815,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1600208491
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/leanprover-community/mathlib/issues/4167\">#4167</a></p>",
        "id": 210238193,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1600247934
    },
    {
        "content": "<p>One more way to prove lemmas about integrals is in <a href=\"https://github.com/leanprover-community/mathlib/issues/4199\">#4199</a>: the new proof in <code>simple_func_dense</code> actually states that the sequence of functions approximating <code>f : Œ± ‚Üí E</code> does not depend on <code>Œº : measure Œ±</code>. This makes the proofs dealing with different measures much shorter.</p>",
        "id": 210825389,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1600745989
    },
    {
        "content": "<p>Very nice!</p>",
        "id": 210834767,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1600758922
    },
    {
        "content": "<p>But we should really decide something about <a href=\"https://github.com/leanprover-community/mathlib/issues/4170\">#4170</a> (add measurable to integrable). <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> I think we are waiting for your opinion there.</p>",
        "id": 210834897,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1600759055
    },
    {
        "content": "<p>I think it is a very good idea, but I haven't looked at the details. I'm willing to trust Floris on this, though, and fix things later if needed.</p>",
        "id": 210835939,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1600759980
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Sphere.20eversion.20project/near/200049097\">said</a>:</p>\n<blockquote>\n<p>I started porting convexity to affine spaces, see branch <a href=\"https://github.com/leanprover-community/mathlib/tree/convex-affine\">convex-affine</a>. It should be ported to <code>line_map</code> from <a href=\"https://github.com/leanprover-community/mathlib/issues/2981\">#2981</a> and affine combinations of points from <a href=\"https://github.com/leanprover-community/mathlib/issues/2979\">#2979</a>.</p>\n</blockquote>\n<p>Do you still have a copy of that <code>convex-affine</code> branch locally?</p>",
        "id": 211236791,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601026893
    },
    {
        "content": "<p>Yes, I'll reopen the pr tomorrow</p>",
        "id": 211296013,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601058622
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> <span aria-label=\"ping pong\" class=\"emoji emoji-1f3d3\" role=\"img\" title=\"ping pong\">:ping_pong:</span> <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span> <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 212419397,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601987154
    },
    {
        "content": "<p>Sorry, I've got distracted. I must record ~30min videos for students in the next 1h30m, then I'll come back to this.</p>",
        "id": 212419554,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601987238
    },
    {
        "content": "<p>Having only just discovered this thread I'm going to use it to advertise <a href=\"https://github.com/leanprover-community/mathlib/issues/8892\">#8892</a></p>",
        "id": 251349807,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1630398631
    },
    {
        "content": "<p>The sphere eversion project is moving again. I got distracted by the liquid tensor experiment but I now want to come back to it. Recently I got a lot of help from Oliver Nash, and Floris van Doorn seems to be interested as well. Inspired by the efficient organization of LTE, I just created a new stream #sphere eversion instead of trying to fit everything into a single topic. Future updates will be posted there. I'll start writing messages describing the current state and entry points of the project.</p>",
        "id": 256757655,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633707110
    },
    {
        "content": "<p>I am very pleased to announce the full completion of the <a href=\"https://leanprover-community.github.io/sphere-eversion/\">sphere eversion project</a>! As planned, we formalized Smale's <a href=\"https://www.youtube.com/watch?v=OI-To1eUtuU\">sphere eversion theorem</a> as a consequence of a much more abstract and general theorem by Gromov. The goal was to prove that proof assistants are not limited to algebra and elementary analysis but can do differential geometry as well. The main team was made of Floris van Doorn, Oliver Nash and myself. But of course we built on the amazing work of the whole Lean community that brought us Lean and mathlib. </p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"OI-To1eUtuU\" href=\"https://www.youtube.com/watch?v=OI-To1eUtuU\"><img src=\"https://uploads.zulipusercontent.net/6dfbceebe127e0b6ac7100802bba9dcf2ca3fadc/68747470733a2f2f692e7974696d672e636f6d2f76692f4f492d546f3165557475552f64656661756c742e6a7067\"></a></div><p>This project was first mentioned as a dream during the <a href=\"https://www.andrew.cmu.edu/user/avigad/meetings/fomm2020/\">FoMM2020 meeting</a> in Pittsburgh and I started to work on an informal blueprint sometime around May 2020, but the project really took off one year ago when I was joined by Oliver and Floris.</p>",
        "id": 310222035,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1668525156
    },
    {
        "content": "<p>Congratulations!!</p>",
        "id": 310222612,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668525305
    },
    {
        "content": "<p>It is tricky to start listing other names from the community because mathlib is really a massive collaboration. But if we exclude very foundational things like general topology and linear algebra then I think it's safe to mention that the project relies particularly on the work of Yury  Kudryashov and S√©bastien Gou√´zel on differential calculus and integration and of S√©bastien Gou√´zel and Heather Macbeth on differentiable manifolds. Particularly related to the project title, Heather gave us a sphere (as a differentiable manifold) to turn inside out, as well as rotations to use in the process.</p>",
        "id": 310223978,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1668525677
    },
    {
        "content": "<p>Proficiat <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> ! A true milestone!</p>",
        "id": 310225241,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1668526082
    },
    {
        "content": "<p>Am I wrong or the project does not appear in the <a href=\"https://leanprover-community.github.io/lean_projects.html\">dedicated page</a> on the community website?</p>",
        "id": 311173634,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1668970412
    },
    {
        "content": "<p>No it does not. That was reported a few weeks ago already.</p>",
        "id": 311173668,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1668970439
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-contrib/leanprover-contrib/actions/runs/3175159229/jobs/5172851813\">https://github.com/leanprover-contrib/leanprover-contrib/actions/runs/3175159229/jobs/5172851813</a> <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 311182495,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1668976398
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-contrib/leanprover-contrib/actions\">https://github.com/leanprover-contrib/leanprover-contrib/actions</a> suggests there is a real problem and it's not new</p>",
        "id": 311182534,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1668976433
    },
    {
        "content": "<p>Wait, the workflow broke precisely when Floris added sphere-eversion to the list of projects.</p>",
        "id": 311183486,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1668977126
    },
    {
        "content": "<p>Annoyingly I now get an email every time that job fails!</p>",
        "id": 311188751,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668981085
    },
    {
        "content": "<p>I would guess that we need to split the CI up into one job per project</p>",
        "id": 311188816,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668981136
    },
    {
        "content": "<p>From the github docs:</p>\n<blockquote>\n<ul>\n<li>Job execution time - Each job in a workflow can run for up to 6 hours of execution time. If a job reaches this limit, the job is terminated and fails to complete.</li>\n<li>Workflow run time - Each workflow run is limited to 35 days. If a workflow run reaches this limit, the workflow run is cancelled. This period includes execution duration, and time spent on waiting and approval.</li>\n</ul>\n</blockquote>\n<p>So we have plenty of headroom if we can distribute the work</p>",
        "id": 311188970,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668981263
    },
    {
        "content": "<p>Oh, I think the problem here is that the CI is incremental</p>",
        "id": 311188982,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668981288
    },
    {
        "content": "<p>I'll see if I can parallelize the different lean versions</p>",
        "id": 311193794,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668985362
    },
    {
        "content": "<p>Attempted in <a href=\"https://github.com/eric-wieser/leanprover-contrib/actions/runs/3510677680\">https://github.com/eric-wieser/leanprover-contrib/actions/runs/3510677680</a></p>",
        "id": 311202854,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668994147
    },
    {
        "content": "<p>Building the project took only 5-20 minutes before I added the two new projects. Why does it suddenly need 6 hours?</p>",
        "id": 311235885,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669019489
    },
    {
        "content": "<p>Because it had to build it for every lean version</p>",
        "id": 311236209,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669019649
    },
    {
        "content": "<p>Splitting the build did the trick, I'll try to clean up the mess I've made of the script</p>",
        "id": 311240284,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669021279
    },
    {
        "content": "<p>I see. And once it succeeds, it will just use the cache next time?</p>",
        "id": 311292180,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669040423
    },
    {
        "content": "<p>Yes</p>",
        "id": 311409392,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669045137
    },
    {
        "content": "<p>But every time a new lean version or a new project was added, it would previously get overloaded</p>",
        "id": 311409463,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669045156
    },
    {
        "content": "<p>PR at <a href=\"https://github.com/leanprover-contrib/leanprover-contrib/pull/22\">https://github.com/leanprover-contrib/leanprover-contrib/pull/22</a></p>",
        "id": 311494851,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669074415
    },
    {
        "content": "<p>18 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Sphere.20eversion.20project.20not.20appearing.20in.20project.20list\">#general &gt; Sphere eversion project not appearing in project list</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 311784481,
        "sender_full_name": "Notification Bot",
        "timestamp": 1669195780
    }
]