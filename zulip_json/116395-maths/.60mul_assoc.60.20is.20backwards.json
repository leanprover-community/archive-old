[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→+</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">add_monoid_hom.comp</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- why does this come out backwards?</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">add_monoid_hom.comp_assoc</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">add_monoid_hom.id</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">add_monoid_hom.id_comp</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">add_monoid_hom.comp_id</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Why do the letters go backwards? Is mathlib's \"random\" convention for associativity of multiplication upsetting the category theory gods somehow?</p>",
        "id": 264791530,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639442343
    },
    {
        "content": "<p>Isn't it just because of the order of the variables in <code>comp_assoc</code>?</p>",
        "id": 264792386,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639443031
    },
    {
        "content": "<p>Right -- isn't this evidence that <code>comp_assoc</code> variables are the \"wrong way round\"?</p>",
        "id": 264811374,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639457495
    },
    {
        "content": "<p>I'm pretty sure this has been asked before, and I'm somewhat suspicious that it was by you that time too!</p>",
        "id": 264823960,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639469786
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/topic/add_monoid_hom.2Ecomp_assoc.20is.20the.20wrong.20way.20around/near/241593485\">Yep, it was you</a>; though you said <code>comp_assoc</code> was wrong last time instead.</p>",
        "id": 264863056,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639491324
    },
    {
        "content": "<p>so when was I right? Looks like <code>monoid_hom.comp_assoc</code> is backwards?</p>",
        "id": 264936464,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639521249
    },
    {
        "content": "<p>Yeah, I think <code>comp_assoc</code> has its variables in the wrong order</p>",
        "id": 264936627,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639521356
    },
    {
        "content": "<p>By the way, I wonder whether <code>commutator</code> doesn't have its variables in the wrong order too. It is defined by <code>p * q * p⁻¹ * q⁻¹</code> but <br>\n1) this is sometimes awkward to prove equality modulo commutators (because <code>quotient_group.eq</code> proves <code>↑a = ↑b ↔ a⁻¹ * b ∈ s </code>),<br>\n2) at least some reputable sources (Suzuki, Group theory) use the convention  <code>p⁻¹ * q⁻¹ * p * q</code>.</p>",
        "id": 265015455,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1639577635
    },
    {
        "content": "<p>+1, Wikipedia also uses the inverses first convention which bit me recently when I wrote some exercises formalizing <a href=\"https://en.wikipedia.org/wiki/Commutator#Identities_(group_theory)\">https://en.wikipedia.org/wiki/Commutator#Identities_(group_theory)</a></p>",
        "id": 265016984,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1639578309
    },
    {
        "content": "<p>Antoine -- to you want to try a refactor? You just clone mathlib, get oleans with <code>leanproject get-cache</code>, switch to a new branch <code>commutator-refactor</code>, edit the definition, see what breaks in that file, fix it up, and then push to github and come back the next day to see what else is broken (github reports which files didn't compile). You do this once every few days for a while and eventually everything compiles and then you make a PR.</p>",
        "id": 265018013,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639578789
    },
    {
        "content": "<p>Yes, I can do that.</p>",
        "id": 265131311,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1639647907
    },
    {
        "content": "<p>The reason I suggest it is that I have seen undergraduates who get to the stage where you're at (they can write some self-contained proofs and know the basic tactics) and then I've found that giving them a \"mechanical\" and hopefully straightforward task of this nature teaches them a lot more about how mathlib uses term mode and dot notation and structure creation with <code>..</code> and other tricks like this -- it just forces people to read library files carefully rather than just using lemmas from them.</p>",
        "id": 265131779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639648178
    }
]