[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">closed</span><span class=\"bp\">.</span><span class=\"n\">cartesian</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span>\n\n<span class=\"n\">class</span> <span class=\"n\">foo</span> <span class=\"kn\">extends</span> <span class=\"n\">has_finite_limits</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">has_finite_colimits</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">cartesian_closed</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"bp\">.</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">category_theory</span>\n</code></pre></div>\n\n\n<p>This fails, with the message complaining that <code>cartesian_closed</code> isn't a structure (it's an abbreviation for a structure); how can I get this to work?</p>",
        "id": 201087603,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592351166
    },
    {
        "content": "<p>Or is the only option to make it a field and mark the deconstructors as attributes</p>",
        "id": 201087618,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592351186
    },
    {
        "content": "<p>I suppose I could minimise the example more:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n<span class=\"kn\">abbreviation</span> <span class=\"n\">baz</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">class</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"kn\">extends</span> <span class=\"n\">baz</span> <span class=\"n\">α</span><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 201088097,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592351656
    },
    {
        "content": "<p>In linear algebra we <code>extend</code> the original structure (e.g., <code>extends semimodule</code> instead of <code>extends vector_space</code>).</p>",
        "id": 201095646,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592360807
    },
    {
        "content": "<p>But that's not good enough in this case, since <code>cartesian_closed</code> is a special case of <code>monoidal_closed</code> with a specific typeclass argument</p>",
        "id": 201095732,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592360933
    },
    {
        "content": "<p>Though I might be missing something in your description</p>",
        "id": 201095757,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592360973
    },
    {
        "content": "<p>Could you please copy+paste or link the definitions you're talking about?</p>",
        "id": 201095940,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592361170
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/a19dca67c228f784c9a3321106b939953a6f83ba/src/category_theory/closed/cartesian.lean#L77\">https://github.com/leanprover-community/mathlib/blob/a19dca67c228f784c9a3321106b939953a6f83ba/src/category_theory/closed/cartesian.lean#L77</a></p>",
        "id": 201095972,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592361234
    },
    {
        "content": "<p>How should <code>cartesian_closed</code> deduce <code>category</code> and <code>has_finite_products</code>?</p>",
        "id": 201096152,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592361435
    },
    {
        "content": "<p>I'm not sure what you mean by that...</p>",
        "id": 201096226,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592361516
    },
    {
        "content": "<p>I don't see these arguments in your example.</p>",
        "id": 201096253,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592361578
    },
    {
        "content": "<p>Ah sorry my mistake</p>",
        "id": 201096332,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592361685
    },
    {
        "content": "<p>Corrected version:</p>",
        "id": 201096334,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592361688
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">closed</span><span class=\"bp\">.</span><span class=\"n\">cartesian</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"n\">class</span> <span class=\"n\">foo</span> <span class=\"kn\">extends</span> <span class=\"n\">has_finite_limits</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">has_finite_colimits</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">cartesian_closed</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"bp\">.</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">category_theory</span>\n</code></pre></div>",
        "id": 201096338,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592361699
    },
    {
        "content": "<p><code>has_finite_products</code> is inferred from <code>has_finite_limits</code> which is in mathlib somewhere in the import</p>",
        "id": 201096342,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592361710
    },
    {
        "content": "<p>Have you tried using <code>monoidal_closed</code> in the definition? Can it prove <code>cartesian_closed</code> from <code>foo</code> by <code>apply_instance</code> in this case?</p>",
        "id": 201096934,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592362520
    },
    {
        "content": "<p>I expect no because of <a href=\"https://github.com/leanprover-community/mathlib/blob/a19dca67c228f784c9a3321106b939953a6f83ba/src/category_theory/closed/cartesian.lean#L38\">https://github.com/leanprover-community/mathlib/blob/a19dca67c228f784c9a3321106b939953a6f83ba/src/category_theory/closed/cartesian.lean#L38</a></p>",
        "id": 201096996,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592362593
    },
    {
        "content": "<p>The obvious fix for that is to just include that line</p>",
        "id": 201097009,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592362614
    },
    {
        "content": "<p>But that would mean I'd need that line in any file where I use <code>foo</code></p>",
        "id": 201097020,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592362629
    }
]