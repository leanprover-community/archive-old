[
    {
        "content": "<p>It would sure be nice for to have polynomials in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}[X]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span> automatically coerce to polynomials in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}[X]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span>. The conversion is implemented in the <code>ring_theory</code> folder, but it isn't made into a coercion, and I'm not sure if it's a technical obstacle or if I should make a PR. Is there anything preventing <code>of_subring</code> in <code>ring_theory/polynomial.lean</code> from having an instance of <code>has_coe (polynomial T) (polynomial R)</code>?</p>",
        "id": 197643262,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1589511341
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"297832\">@Jack J Garzella</span> But <code>int</code> is not a subring of <code>rat</code>, so that will not help you, right? But I think that at the moment the API for polynomials is quite \"fragile\" for lack of a better word (with <code>eval</code>, <code>eval₂</code>, <code>map</code>, etc) so I'm weary of putting in coercions.</p>",
        "id": 197645265,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589513972
    },
    {
        "content": "<p>Also, in practice it might be helpful to use bundled ring homs a lot. They read less nice, but they give a lot more power. I've head many many troubles with trying <code>rw map_mul</code> on <code>map f (p * q)</code> and lean complaining that it couldn't figure out why <code>f</code> was a <code>is_semiring_hom</code>.</p>",
        "id": 197645330,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589514080
    },
    {
        "content": "<p>If you use bundled homs, that problem completely vanishes.</p>",
        "id": 197645332,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589514094
    },
    {
        "content": "<p>But of course <code>int.cast_ring_hom rat</code> is very ugly, compared to \"the invisible map\"</p>",
        "id": 197645341,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589514119
    },
    {
        "content": "<p>Yes, I realized this, I guess it could technically be <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> again. I can do what I want to do, I'm interested in discussing how we can get rid of <code>int.cast_ring_hom rat</code> everywhere though</p>",
        "id": 197645396,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1589514160
    },
    {
        "content": "<p>Do you think the polynomial api just needs to be used more before we can stabilize it and put some sugar/coercions in?</p>",
        "id": 197645410,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1589514201
    },
    {
        "content": "<p>Yes, there seems to be room for improvement. But I don't see a good way forward atm that is also aesthetically pleasing <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 197645455,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589514255
    },
    {
        "content": "<p>One solution is: do as much as possible for a generic ring hom <code>f : R →+* S</code> (possibly with hypothesis <code>hf : injective f</code>). Then everything looks good.</p>",
        "id": 197645489,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589514308
    },
    {
        "content": "<p>And then finally, at some point, apply it to <code>int.cast_ring_hom rat</code>. Then you have pushed all the uglyness in one little corner</p>",
        "id": 197645494,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589514333
    },
    {
        "content": "<p>So, speaking of <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>, what are your <em>really</em> trying to do? What is your bigger plan/goal.</p>",
        "id": 197645538,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589514381
    },
    {
        "content": "<p>Oh, it's partly Eisenstein's criteron and partly proving that quadratic extensions are normal, though both need this type of thing</p>",
        "id": 197645550,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1589514419
    },
    {
        "content": "<p>But neither need <code>int</code>?</p>",
        "id": 197645560,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589514442
    },
    {
        "content": "<p>Certainly quadratic extensions don't</p>",
        "id": 197645566,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589514460
    },
    {
        "content": "<p>I am using <code>int</code> in my first example, but no, neither need <code>int</code>. I think the question I was asking was \"what is the right way to do this for an arbitrary subring/injective hom?\"</p>",
        "id": 197645624,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1589514545
    },
    {
        "content": "<p>And for Eisenstein, it will probably be easier to go for <a href=\"https://en.wikipedia.org/wiki/Eisenstein%27s_criterion#Generalized_criterion\">https://en.wikipedia.org/wiki/Eisenstein%27s_criterion#Generalized_criterion</a></p>",
        "id": 197645632,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589514581
    },
    {
        "content": "<p>Yes, I'm using that. It would be nice maybe to have a specialized \"corollary\" version of Eisenstein that has <code>int</code> and <code>rat</code> though</p>",
        "id": 197645637,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1589514595
    },
    {
        "content": "<p>It turns out that with these sort of questions, the general case is often easier. Because you don't run into all these nasty issues with the specifics of <code>int</code> and <code>rat</code></p>",
        "id": 197645684,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589514626
    },
    {
        "content": "<p>Yup, the specialisation can come afterwards, I agree</p>",
        "id": 197645693,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589514644
    },
    {
        "content": "<p>But it would be nice, for example, to be able to say something like \"this polynomial in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R[X]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span> irreducible over the field of fractions\" where the \"over the field of fractions\" has the injective ring hom tied into it and some polynomial coercion</p>",
        "id": 197645783,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1589514771
    },
    {
        "content": "<p>There's also a hiccup here in that when a mathematician thinks \"I want to think about a polynomial over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span> as one in bigger ring <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span>\", the first place they will look in the library is the subring structure--at the very least, I would like to write documentation showing that one should really think about the ring hom</p>",
        "id": 197645861,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1589514883
    },
    {
        "content": "<p>But the field of fractions of <code>int</code> is not defeq to <code>rat</code>...</p>",
        "id": 197645863,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589514886
    },
    {
        "content": "<p>So you want to say <code>K</code> is <em>a</em> field of fractions of <code>R</code>, and hence...</p>",
        "id": 197645875,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589514907
    },
    {
        "content": "<p>There's a sequence of PRs going on about localisation (of monoids/ rings/ etc). That's certainly going to help here.</p>",
        "id": 197645947,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589514977
    },
    {
        "content": "<p>Before, we could only speak about \"the\" localisation. But you want to speak about \"a\" localisation, unique up to unique iso.</p>",
        "id": 197645955,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589515007
    },
    {
        "content": "<p>Field of fractions is of course a special case.</p>",
        "id": 197645960,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589515026
    },
    {
        "content": "<p>ok I see, so probably the thing to do is to be explicit for now</p>",
        "id": 197646033,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1589515137
    },
    {
        "content": "<p>It seems based on what you're saying that depending on each special case to the mathematician's idea of an ambient/bigger ring, there might be a different \"right way\"</p>",
        "id": 197646112,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1589515217
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"297832\">Jack J Garzella</span> <a href=\"#narrow/stream/116395-maths/topic/of_subring.20as.20a.20coercion/near/197646033\">said</a>:</p>\n<blockquote>\n<p>ok I see, so probably the thing to do is to be explicit for now</p>\n</blockquote>\n<p>And generalise.... generalise your problems away. (Remember the problems and issues that Patrick wrote about in the perfectoid paper!)</p>",
        "id": 197646159,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589515312
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"297832\">@Jack J Garzella</span> What is the definition of \"normal extension\" that you wanted to use?</p>",
        "id": 197646471,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589515722
    },
    {
        "content": "<p>It looks like this</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">class</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">normal</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">α</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">splits</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>I didn't write this though, I'm just using it (I believe this definition is due to <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> )</p>",
        "id": 197646577,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1589515920
    },
    {
        "content": "<p>Right now I'm working on proving that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">[</mo><msqrt><mn>2</mn></msqrt><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}[\\sqrt{2}]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1572200000000001em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span><span class=\"mopen\">[</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.90722em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.86722em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg height=\"1.08em\" preserveAspectRatio=\"xMinYMin slice\" viewBox=\"0 0 400000 1080\" width=\"400em\"><path d=\"M95,702 c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14 c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54 c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10 s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429 c69,-144,104.5,-217.7,106.5,-221 l0 -0 c5.3,-9.3,12,-14,20,-14 H400000v40H845.2724 s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7 c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.13278em;\"><span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span> is a normal extension (just to get myself familiar), then I'll move on to something slightly more complicated</p>",
        "id": 197646655,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1589516039
    },
    {
        "content": "<p>Once again, I think you'll find the general case easier then this specific one.</p>",
        "id": 197646705,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589516076
    },
    {
        "content": "<p>Is that definition already in mathlib?</p>",
        "id": 197646714,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589516124
    },
    {
        "content": "<p>I'll try out the general case.</p>",
        "id": 197646880,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1589516313
    },
    {
        "content": "<p>Of course, you would need to think about how you formulate the general case...</p>",
        "id": 197646902,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589516350
    },
    {
        "content": "<p>No, the definition isn't in mathlib, though I believe it may get PR'ed sometime. There's some Galois theory stuff that is on it's way to being PR'ed, but I think algebraic closure is a holdup a bunch of it.</p>",
        "id": 197646991,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1589516427
    },
    {
        "content": "<p>But I would start with the following lemma: Let <code>f</code> be a polynomial over a ring <code>R</code>, of degree <code>2</code>. Suppose that <code>x</code> is a root of <code>f</code>. Then <code>f</code> splits.</p>",
        "id": 197646999,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589516459
    },
    {
        "content": "<p>wouldn't any degree above 1 work?</p>",
        "id": 197647012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589516506
    },
    {
        "content": "<p>Mathlib name: <code>polynomial.splits_of_degree_two_of_root</code></p>",
        "id": 197647017,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589516515
    },
    {
        "content": "<p>I think <code>splits</code> means \"splits completely\"</p>",
        "id": 197647056,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589516529
    },
    {
        "content": "<p>But I haven't seen the definition.</p>",
        "id": 197647058,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589516537
    },
    {
        "content": "<p>It does mean \"splits completely\"</p>",
        "id": 197647065,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1589516554
    },
    {
        "content": "<p>it's in <code>splitting_field.lean</code></p>",
        "id": 197647085,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1589516607
    },
    {
        "content": "<p>Probably written by some guy called Mario</p>",
        "id": 197647099,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589516623
    },
    {
        "content": "<p>Two years ago in a hotel room in Orsay (-;</p>",
        "id": 197647104,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589516640
    },
    {
        "content": "<p>actually, I think I was only tangentially involved in this part of the library. I think Chris and Kenny pulled this through</p>",
        "id": 197647150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589516669
    },
    {
        "content": "<p>The file says Chris</p>",
        "id": 197647153,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1589516679
    },
    {
        "content": "<p>I wish I'd defined splits as <code>monoid.closure {f | degree f \\le 1}</code>. This is a much more elegant definition.</p>",
        "id": 197719938,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1589561356
    },
    {
        "content": "<p>I think it can even be <code>degree f = 1</code></p>",
        "id": 197720016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589561395
    },
    {
        "content": "<p>Arguably a unit splits.</p>",
        "id": 197720100,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589561419
    },
    {
        "content": "<p>constant polys split I think. Then everything in an algebraically closed field splits.</p>",
        "id": 197720144,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1589561438
    },
    {
        "content": "<p>oh yeah, ignore me</p>",
        "id": 197720279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589561476
    }
]