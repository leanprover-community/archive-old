[
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/basis.sum_extend\">docs#basis.sum_extend</a> creates really nasty types which appear in the context as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">basis</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">⊕</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">_.extend</span> <span class=\"n\">basis.sum_extend._proof_2</span> <span class=\"bp\">\\</span> <span class=\"n\">range</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span>\n</code></pre></div>\n<p>for instance. <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> do you think there is anyway we could improve that?</p>",
        "id": 240527495,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1622147709
    },
    {
        "content": "<p>The alternative I see is having the return type look like <code>Σ (s : set V), basis (ι + s) K V</code> (or putting this <code>s</code> in a separate definition). Do you have an example of <code>sum_extend</code> being applied, so I can see what we need to know about the return type?</p>",
        "id": 240575596,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1622190930
    },
    {
        "content": "<p>Anne, I used it <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/2d8dfb998303c0ea56412c091dc9dcb31e2ee966/src/loops/convexity.lean#L160\">here</a> when rewriting <code>sphere-eversion</code>; I assume this is where Patrick saw it</p>",
        "id": 240575895,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622191117
    },
    {
        "content": "<p>I guess it would already look better if <code>linear_independent.extend</code> didn't have the proof arguments, i.e. if it was <code>linear_independent.extend (s t : V)</code> (w/o a linear_independent argument) meaning a \"minimal subset of t containing s and spanning t\".</p>",
        "id": 240576056,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1622191234
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> did anything came out of this discussion?</p>",
        "id": 242060006,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623243350
    },
    {
        "content": "<p>I agree with Gabriel's suggestion, that <code>linear_independent.extend</code> shouldn't take a proof argument. AFAIK, nobody has written code (yet) to implement that.</p>",
        "id": 242060155,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623243420
    },
    {
        "content": "<p>I have some time now to implement the suggestion, look forward to making a PR soon!</p>",
        "id": 242337512,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623414509
    },
    {
        "content": "<p>It was more difficult than I was hoping, but here's an ungolfed, messy commit: <a href=\"https://github.com/leanprover-community/mathlib/tree/linear_independent_extend\">branch#linear_independent_extend</a></p>",
        "id": 242598351,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623678125
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, would you be willing to help with PR'ing this?</p>",
        "id": 242599196,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623678506
    },
    {
        "content": "<p>Oh, that's the stuff I need :)</p>",
        "id": 242632395,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1623691708
    },
    {
        "content": "<p>I'll try to have a look tonight</p>",
        "id": 242632543,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623691764
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 242636288,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623693441
    },
    {
        "content": "<p>I had a look but I'm puzzled. Why this super convoluted <code>exists_extend</code>? Why not simply stating there are subsets <code>s0</code> of <code>s</code> and <code>t0</code> of <code>t</code> such that the union of <code>s0</code> and <code>t0</code> is linear independent and spans the same subspace as <code>t</code>?</p>",
        "id": 242663525,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623707355
    },
    {
        "content": "<p>Well, you need to apply Zorn's lemma in some way to get this result, so unless I missed an easy way to apply <code>exists_linear_independent</code> as-is, you essentially have to redo its proof in the more general setting.</p>",
        "id": 242704058,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623746839
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/basis.2Esum_extend/near/242663525\">said</a>:</p>\n<blockquote>\n<p>there are subsets <code>s0</code> of <code>s</code> and <code>t0</code> of <code>t</code> such that the union of <code>s0</code> and <code>t0</code> is linear independent and spans the same subspace as <code>t</code>?</p>\n</blockquote>\n<p>I don't think that's strong enough to prove <code>linear_independent_extend</code>, since we could just choose <code>s0</code> empty and <code>t0</code> outside of <code>s</code>, making <code>linear_independent_extend</code> false.</p>",
        "id": 242704219,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623746926
    }
]