[
    {
        "content": "<p>This has come up before. I need additive group homs. I can duplicate Patrick's work on group homs, but I also saw <code>@[to_additive finsupp.sum_map_range_index]</code> in <code>data/finsupp.lean</code>. Can someone explain to me how that magic works? Would it be enough to sprinkle some <code>@[to_additive ...]</code>'s into <code>algebra/group.lean</code> to have everything work?</p>",
        "id": 126990085,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527100618
    },
    {
        "content": "<p>There are additive group homs in the scheme stuff</p>",
        "id": 126990781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527101611
    },
    {
        "content": "<p>Kenny wrote them</p>",
        "id": 126990782,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527101617
    },
    {
        "content": "<p>you could cut and paste for some basic stuff</p>",
        "id": 126990787,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527101628
    },
    {
        "content": "<p>if you just want a solution</p>",
        "id": 126990789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527101631
    },
    {
        "content": "<p>Sure, but I'm also interested in the long-term approach</p>",
        "id": 126990833,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527101653
    },
    {
        "content": "<p>lines 47 onwards at <a href=\"https://github.com/kbuzzard/lean-stacks-project/blob/master/src/canonical_isomorphism_nonsense.lean\" target=\"_blank\" title=\"https://github.com/kbuzzard/lean-stacks-project/blob/master/src/canonical_isomorphism_nonsense.lean\">https://github.com/kbuzzard/lean-stacks-project/blob/master/src/canonical_isomorphism_nonsense.lean</a></p>",
        "id": 126990842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527101685
    },
    {
        "content": "<p>already there is a little magic going on</p>",
        "id": 126990862,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527101732
    },
    {
        "content": "<p>the long term approach would be to learn a bit about tactics and understand how to_additive works, which is for automatically moving theorems from multiplicative groups to additive groups... unfortunately, learning tactics in Lean is a bit of a chore right now since Programming in Lean is unfinished</p>",
        "id": 126991426,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527102260
    },
    {
        "content": "<p>well, actually, now that I'm looking at <code>algebra/group.lean</code>, you don't need to know much about tactics to understand what's going on there</p>",
        "id": 126991559,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527102477
    },
    {
        "content": "<p>But then... I know next to nothing...</p>",
        "id": 126991753,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527102701
    },
    {
        "content": "<p>hmm, have you worked through TPIL by chance?</p>",
        "id": 126992374,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527103539
    },
    {
        "content": "<p>The first eleven chapters of Software Foundations is in Coq, but also quite good</p>",
        "id": 126992434,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527103598
    },
    {
        "content": "<p>I am the kind of person who learns by grabbing a textbook and doing the exercises...</p>",
        "id": 126992443,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527103614
    },
    {
        "content": "<p>Yes, maybe I should do that as well... but trying to define singular homology seems like a lot more fun...</p>",
        "id": 126992799,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527104084
    },
    {
        "content": "<p>I am the kind of person who learns by cargo cult hacking</p>",
        "id": 126992815,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527104114
    },
    {
        "content": "<p>this is also valid, but unfortunately if you get stuck there is no solutions manual available to unstuck you, whereas such a thing exists for Software Foundations... the solutions manual known as Mario is asleep right now</p>",
        "id": 126993051,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527104411
    },
    {
        "content": "<p>the magic of <code>to_additive</code> is a search and replace of all <code>to_additive</code> constants in the definition of the constant. Afterwards the additive, multiplicative constant pair is added to the <code>to_additive</code> database. By using <code>attribute [to_additive a_c] m_c</code> you add a new relation. The requirement is that the additive constants are an exact mirror of the multiplicative ones.</p>",
        "id": 126993084,
        "sender_full_name": "Johannes HÃ¶lzl",
        "timestamp": 1527104491
    },
    {
        "content": "<p>So, if I understand you correctly, it shouldn't be too complicated to sprinkle <code>@to_additive</code> in <code>algebra/group.lean</code>. Is that right?</p>",
        "id": 126993161,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527104585
    },
    {
        "content": "<p>Ok, so here is something that I am a bit worried about: in mathematics the notion of an \"additive\" group is really just notation (though pretty useful!). In Lean we have \"groups\" and \"additive groups\" and now we have <code>is_group_hom</code> and <code>is_add_group_hom</code>. But we also need mixed homomorphisms (from a multiplicative group to an additive group, and vice versa). For example, exp and log are such mixed homomorphisms. So all of a sudden, we have 4 notions of group homomorphisms. And now we want to compose these guys. So we need 8 composition lemmas. And I proved the 5 lemma some time ago: it has 10 groups in its statements. But any of those can be an \"additive\" group (and this occurs in nature!). Does that mean we need 1024 statements of the Five Lemma?</p>",
        "id": 127063451,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527221257
    },
    {
        "content": "<p>Use <code>multiplicative</code> to do these kind of things</p>",
        "id": 127064340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527223300
    },
    {
        "content": "<p>But, doesn't that mean we should use <code>multiplicative</code> all the time?</p>",
        "id": 127064381,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527223329
    },
    {
        "content": "<p>The additive / multiplicative group thing has a long history, and we are still debating the best way to do it</p>",
        "id": 127064392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527223364
    },
    {
        "content": "<p>Ok, I see. I can understand that it might be delicate to pick the correct approach</p>",
        "id": 127064404,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527223398
    },
    {
        "content": "<p><code>multiplicative</code> is useful for post hoc fitting a multiplicative theorem in an additive or mixed-additive use case</p>",
        "id": 127064456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527223501
    },
    {
        "content": "<p>I feel like I would rather just remove <code>add_group</code> entirely. But I don't see through all the ramifications</p>",
        "id": 127064464,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527223515
    },
    {
        "content": "<p><code>to_additive</code> is useful for preparing theorems up front <em>with new names</em> and statements</p>",
        "id": 127064467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527223547
    },
    {
        "content": "<p>It's very confusing to apply <code>mul_one</code> when you want to simplify <code>x + 0 = x</code></p>",
        "id": 127064508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527223573
    },
    {
        "content": "<p>Yes, but I think that that <code>to_additive</code> magic will replace <em>all</em> occurences of mul with add</p>",
        "id": 127064513,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527223603
    },
    {
        "content": "<p>yes, that's the idea</p>",
        "id": 127064515,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527223612
    },
    {
        "content": "<p>Or can you also use it to create mixed statements?</p>",
        "id": 127064516,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527223615
    },
    {
        "content": "<p>it's not very smart, it usually fails on mixed statements</p>",
        "id": 127064522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527223636
    },
    {
        "content": "<p>like <code>gpow</code>, which has an interplay between the additive semiring N and the group in question</p>",
        "id": 127064551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527223683
    },
    {
        "content": "<p>those translations had to be done manually, and in that case usually <code>multiplicative</code> is easier</p>",
        "id": 127064565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527223714
    },
    {
        "content": "<p>So, if we didn't have all the \"multiplicative\" connotations with our groups... but just <code>op_neu</code> instead of <code>mul_one</code>. Would that be helpful?</p>",
        "id": 127064577,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527223801
    },
    {
        "content": "<p>Jeremy likes this idea. I think it's the worst of both worlds</p>",
        "id": 127064621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527223827
    },
    {
        "content": "<p>If you could somehow have some magic that infers whether you use <code>*</code> or <code>+</code> notation, I feel like it would give a very nice fusion.</p>",
        "id": 127064630,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527223876
    },
    {
        "content": "<p>(Jeremy Avigad has been testing out a bunch of solutions in this space the past few months)</p>",
        "id": 127064633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527223881
    },
    {
        "content": "<p>But why do you think it is worse?</p>",
        "id": 127064635,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527223889
    },
    {
        "content": "<p>It's less mnemonic than either add_zero or mul_one</p>",
        "id": 127064638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527223908
    },
    {
        "content": "<p>some of that magic goes beyond what lean will currently do on its own</p>",
        "id": 127064679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527223936
    },
    {
        "content": "<p>Yes, but having a lot of <code>gsmul</code> sprinkled through your goal is also not very helpful</p>",
        "id": 127064681,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527223943
    },
    {
        "content": "<p>but then it gets into extending lean, which gets messy</p>",
        "id": 127064683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527223950
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 127064691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527223991
    },
    {
        "content": "<p>Well, I was playing around with <code>multiplicative</code> a bit. And I think it gave me those <code>gsmul</code>'s</p>",
        "id": 127064696,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527224028
    },
    {
        "content": "<p>But maybe I just used it wrong</p>",
        "id": 127064735,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527224051
    },
    {
        "content": "<p>I think I will just wait to see what you and Jeremy work out.</p>",
        "id": 127064768,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527224162
    },
    {
        "content": "<p>What are you trying to do exactly?</p>",
        "id": 127064811,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527224266
    },
    {
        "content": "<p>If I understand you correctly, you say that a class <code>is_add_group_hom</code> is fine. But we shouldn't have classes for mixed homomorphisms. If one of those pops up, just turn it into an <code>is_group_hom</code>with <code>multiplicative</code>. Is that correct?</p>",
        "id": 127064812,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527224275
    },
    {
        "content": "<p>yes</p>",
        "id": 127064852,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527224309
    },
    {
        "content": "<p>Because if we also have classes for the mixed homomorphisms, then you do need 8 composition rules. And I feel like you run head first into some cambrian explosion.</p>",
        "id": 127064853,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527224319
    },
    {
        "content": "<p>we don't</p>",
        "id": 127064855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527224339
    },
    {
        "content": "<p>So, shouldn't I just get rid of <code>is_add_group_hom</code> as well? And just use <code>multiplicative</code> immediately?</p>",
        "id": 127064865,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527224362
    },
    {
        "content": "<p>I should hope there isn't too much theory on <code>is_add_group_hom</code></p>",
        "id": 127064914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527224413
    },
    {
        "content": "<p>seeing as it can usually be rephrased in terms of <code>is_group_hom</code></p>",
        "id": 127064917,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527224436
    },
    {
        "content": "<p>But still, I don't see why you draw the line there...</p>",
        "id": 127064929,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527224496
    },
    {
        "content": "<p>two is manageable, 2^n isn't?</p>",
        "id": 127064933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527224521
    },
    {
        "content": "<p>Anyway, what I am trying to do, is to prove that the boundary operator on the simplicial complex satisfies <code>d \\circ d = 0</code></p>",
        "id": 127064969,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527224523
    },
    {
        "content": "<p>Yes, but one is even more manageable... (-;</p>",
        "id": 127064975,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527224541
    },
    {
        "content": "<p>so use <code>is_group_hom</code> and call it a day</p>",
        "id": 127064979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527224556
    },
    {
        "content": "<p>And this complex consists of an additive group for each <code>n : nat</code>. And an additive hom between succesive groups.</p>",
        "id": 127064980,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527224580
    },
    {
        "content": "<p>what makes them additive?</p>",
        "id": 127064989,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527224600
    },
    {
        "content": "<p>Those groups are all <code>finsupp (X n) int</code></p>",
        "id": 127064991,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527224624
    },
    {
        "content": "<p>where <code>X n</code> is a Type; depending on <code>n</code> (duh)</p>",
        "id": 127064992,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527224639
    },
    {
        "content": "<p>okay, so where is the mixed group hom?</p>",
        "id": 127065036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527224683
    },
    {
        "content": "<p>And the homomorphisms between them are somehow a bit involved... You take an alternating sum of (n+1) maps from <code>X (n+1)</code> to <code>X n</code>, and those induce maps between those additive groups.</p>",
        "id": 127065048,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527224719
    },
    {
        "content": "<p>Aah, there is no mixed group hom in this picture yet.</p>",
        "id": 127065051,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527224729
    },
    {
        "content": "<p>But I was thinking about other stuff in maths, where they do pop up.</p>",
        "id": 127065052,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527224742
    },
    {
        "content": "<p>In all sorts of exponential sequences</p>",
        "id": 127065055,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527224757
    },
    {
        "content": "<p>So you can use <code>is_group_hom</code> + <code>multiplicative</code> to define <code>is_add_group_hom</code>, and then most of the theorems will defeq carry over (although they may need to be restated)</p>",
        "id": 127065098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527224790
    },
    {
        "content": "<p>Ok, but I think I will try to just use <code>multiplicative</code> directly.</p>",
        "id": 127065121,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527224877
    },
    {
        "content": "<p>So instead of proving <code>is_add_group_hom d</code> I prove <code>@is_group_hom (multiplicate _) (multiplicative _) d</code></p>",
        "id": 127065163,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527224930
    },
    {
        "content": "<p>Or something like that.</p>",
        "id": 127065164,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527224936
    },
    {
        "content": "<p>they should be the same, but yes unfold if necessary</p>",
        "id": 127065222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527225011
    },
    {
        "content": "<p>Ok, thanks for this discussion! I learned something (-;</p>",
        "id": 127065227,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527225059
    },
    {
        "content": "<p>Ooh, and if I locally make every instance of <code>add_group</code> into an instance of <code>group</code>, I think I run into the same trouble with ugly notation and names, right?</p>",
        "id": 127065234,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527225111
    },
    {
        "content": "<p>Oh don't do that</p>",
        "id": 127065235,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527225121
    },
    {
        "content": "<p>that's a recipe for disaster because the notations get all mixed up</p>",
        "id": 127065275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527225140
    },
    {
        "content": "<p>ok</p>",
        "id": 127065277,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527225146
    },
    {
        "content": "<p>next you know it you write <code>1 + 1 : nat</code> and get <code>0</code> :/</p>",
        "id": 127065281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527225173
    },
    {
        "content": "<p>got it</p>",
        "id": 127065286,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527225198
    },
    {
        "content": "<p>Ok, so here is another ignorant question:<br>\nThe reason we have infix notation <code>*</code> for every <code>group</code> is because they are instances of <code>has_mul</code>, right?</p>",
        "id": 127067503,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527229957
    },
    {
        "content": "<p>So what if we made abstract groups, with <code>op</code> and <code>neu</code> etc...</p>",
        "id": 127067516,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527229977
    },
    {
        "content": "<p>And we don't have infix notation for those</p>",
        "id": 127067520,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527229985
    },
    {
        "content": "<p>And then we have concrete groups (like the units in <code>rat</code>, or <code>int</code>) and we make those instances of <code>has_mul</code> resp. <code>has_add</code></p>",
        "id": 127067526,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527230016
    },
    {
        "content": "<p>Then we still have our beloved infix notation.</p>",
        "id": 127067527,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527230025
    },
    {
        "content": "<p>And then we can have some <code>to_multiplicate</code> resp. <code>to_additive</code> magic, that will turn <code>op_neu</code> into <code>mul_one</code> resp. <code>add_zero</code></p>",
        "id": 127067568,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527230063
    },
    {
        "content": "<p>So the proofs remain readable and intuitive</p>",
        "id": 127067569,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527230078
    },
    {
        "content": "<p>If you want to prove something about an abstract group, and you would like to use infix <code>*</code> notation, then inside the proof you can make the group into an instance of <code>has_mul</code> (I hope) and voila, you have your <code>*</code>. But the statement that you proved is all of a sudden also valid in the context of additive notation.</p>",
        "id": 127067616,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527230164
    },
    {
        "content": "<p>Does this idea make any sense at all?</p>",
        "id": 127067619,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527230172
    },
    {
        "content": "<p>If you use <code>has_mul</code> then it gets involved in the statements of the theorems you prove, so there is some unfolding to apply it in a given context</p>",
        "id": 127067625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527230223
    },
    {
        "content": "<p>Well, I hope to keep it out of the statements.</p>",
        "id": 127067629,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527230256
    },
    {
        "content": "<p>then you can't use notation with abstract group theory</p>",
        "id": 127067631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527230276
    },
    {
        "content": "<p>which is a thing people want</p>",
        "id": 127067669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527230284
    },
    {
        "content": "<p>So you would have some statement <code>theorem {G : Type} [group G] : blabla := begin ... end</code></p>",
        "id": 127067672,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527230294
    },
    {
        "content": "<p>and between the <code>begin</code> and <code>end</code> you do some sort of <code>have_instance : has_mul G := { mul := op }</code></p>",
        "id": 127067677,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527230338
    },
    {
        "content": "<p>and then you can use multiplicative notation in the rest of the proof.</p>",
        "id": 127067683,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527230352
    },
    {
        "content": "<p>But it does not affect the statement</p>",
        "id": 127067685,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527230363
    },
    {
        "content": "<p>so <code>blabla</code> there has no notation?</p>",
        "id": 127067690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527230399
    },
    {
        "content": "<p>Yes, that is correct</p>",
        "id": 127067733,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527230414
    },
    {
        "content": "<p>Unless we can somehow sugar that in... but I guess then we run into trouble again (which was your point)</p>",
        "id": 127067734,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527230440
    },
    {
        "content": "<p>right</p>",
        "id": 127067735,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527230448
    },
    {
        "content": "<p>Also, without <code>mul</code> constants in that statement <code>simp</code>  gets lost in higher order unification</p>",
        "id": 127067742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527230470
    },
    {
        "content": "<p>I think there is quite a lot of interesting <code>blabla</code> that does not have very much notation</p>",
        "id": 127067743,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527230471
    },
    {
        "content": "<p>for example if you have the theorem <code>op x id = x</code> where <code>op</code> and <code>id</code> are variables, <code>simp</code> can't use it</p>",
        "id": 127067745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527230501
    },
    {
        "content": "<p>but if the theorem is <code>x + 0 = x</code> then it can</p>",
        "id": 127067748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527230512
    },
    {
        "content": "<p>You could wrap the statement with <code>local notation x' \\bullet 'y := op x y</code></p>",
        "id": 127067788,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527230542
    },
    {
        "content": "<p>If you really want infix notation in the statement</p>",
        "id": 127067789,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527230552
    },
    {
        "content": "<p>that doesn't solve the problem I just mentioned though</p>",
        "id": 127067790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527230560
    },
    {
        "content": "<p>Hmmm, so why can't <code>simp</code> use the former? (Newbie alert!)</p>",
        "id": 127067797,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527230597
    },
    {
        "content": "<p>the expression <code>?M1 x ?M2</code> matches almost anything</p>",
        "id": 127067800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527230631
    },
    {
        "content": "<p>because you can have some lambda term for <code>?M1</code></p>",
        "id": 127067835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527230643
    },
    {
        "content": "<p>unification up to beta reduction is called higher order unification and it's undecidable</p>",
        "id": 127067842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527230671
    },
    {
        "content": "<p>and lean only does a very limited subset of it</p>",
        "id": 127067843,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527230688
    },
    {
        "content": "<p>Ok, so then we don't have <code>simp</code> for abstract groups.</p>",
        "id": 127067849,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527230710
    },
    {
        "content": "<p>sad face</p>",
        "id": 127067850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527230717
    },
    {
        "content": "<p>But as soon as you are in a multiplicate of additive setting, you have it back</p>",
        "id": 127067851,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527230726
    },
    {
        "content": "<p>then I always want to be in a multiplicative or additive setting</p>",
        "id": 127067854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527230745
    },
    {
        "content": "<p>and if inside the proof you do the <code>have instance</code> thing that I suggested above, then you also have it back (I hope)</p>",
        "id": 127067855,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527230753
    },
    {
        "content": "<p>So (I hope, once again) inside proofs you can always assume that you are inside the multiplicative setting</p>",
        "id": 127067895,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527230785
    },
    {
        "content": "<p>even if you prove something for an abstract group</p>",
        "id": 127067898,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527230798
    },
    {
        "content": "<p>no, you still have that <code>simp</code> can only <em>use</em> groups with notation regardless of whether the goal uses notation</p>",
        "id": 127067908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527230832
    },
    {
        "content": "<p>Yes, but you will <em>have</em> a group with notation. Because the first thing you prove inside your proof is that you have notation. And then you continue with the actual proof.</p>",
        "id": 127067918,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527230882
    },
    {
        "content": "<p>I really hope something like that is possible</p>",
        "id": 127067957,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527230900
    },
    {
        "content": "<p>I mean, if you have a theorem whose statement is neutral but whose proof uses notation, it can't be used with simp</p>",
        "id": 127067959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527230913
    },
    {
        "content": "<p>Hmmz, that is very sad</p>",
        "id": 127067961,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527230927
    },
    {
        "content": "<p>because only the statement matters for simp</p>",
        "id": 127067962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527230937
    },
    {
        "content": "<p>But you can change the statement inside the proof, right? By some <code>apply to_multiplicative</code>, or something</p>",
        "id": 127067971,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527230974
    },
    {
        "content": "<p>So I just use multiplicative notation for \"generic\" group theory, and use <code>multiplicative</code> for transferring to additive</p>",
        "id": 127067975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527230993
    },
    {
        "content": "<p>I don't see any reason to avoid some kind of primacy between the notations</p>",
        "id": 127068019,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527231014
    },
    {
        "content": "<p>Ok, maybe I just need to get used to that (-;</p>",
        "id": 127068020,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527231037
    },
    {
        "content": "<p>But let me try to understand Lean better: if I have a \"generic\" statement, and I start my proof with <code>apply multiplicative</code>. Would I be able to use <code>simp</code> after that?</p>",
        "id": 127068042,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527231121
    },
    {
        "content": "<p><code>simp</code> can be used on any statement, but it can only use simp lemmas that are stated with notation</p>",
        "id": 127068094,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527231195
    },
    {
        "content": "<p>I guess if you want to use <code>simp</code> on a generic statement you will need to change your goal to one that uses notation for the lemmas to match though</p>",
        "id": 127068133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527231248
    },
    {
        "content": "<p>Right, and I think a tactic could do that change for me</p>",
        "id": 127068143,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527231267
    },
    {
        "content": "<p>yes</p>",
        "id": 127068145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527231270
    },
    {
        "content": "<p>no such tactic exists, but it could be done</p>",
        "id": 127068152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527231292
    },
    {
        "content": "<p>Great. Then I prefer that approach to group theory. But I respect your choice.</p>",
        "id": 127068154,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527231302
    },
    {
        "content": "<p>It would solve all the <code>group_hom</code> hassle</p>",
        "id": 127068160,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527231311
    },
    {
        "content": "<p>I think in the end, the code would be shorter, less duplication, and less <code>multiplicative</code> for end users.</p>",
        "id": 127068161,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527231345
    },
    {
        "content": "<p>but it would still have the problem of not being registerable with simp, as a lemma on its own right</p>",
        "id": 127068162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527231348
    },
    {
        "content": "<p>True, but I believe that the bulk of generic group theory is not simp lemmas</p>",
        "id": 127068202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527231397
    },
    {
        "content": "<p>So we would need to state a couple of simp lemmas for groups with notation.</p>",
        "id": 127068205,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527231418
    },
    {
        "content": "<p>We don't want the five lemma to be a simp lemma, right?</p>",
        "id": 127068212,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527231443
    },
    {
        "content": "<p>more complicated theorems, proving existence of things or what not, can often be opened up to defeq anyway so it doesn't matter</p>",
        "id": 127068214,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527231461
    },
    {
        "content": "<p>But I wouldn't mind if end users could use it, without figuring out to which of the 10 groups they first need to apply <code>multiplicative</code></p>",
        "id": 127068216,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527231480
    },
    {
        "content": "<p>Why don't you just state a version where everything is group, and another where everything is add_group, and let users deal with it themselves if they have mixed groups</p>",
        "id": 127068266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527231527
    },
    {
        "content": "<p>Because I really think that means I won't have many users...</p>",
        "id": 127068274,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527231549
    },
    {
        "content": "<p>The conversion between <code>group</code> and <code>add_group</code> should be completely transparent</p>",
        "id": 127068287,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527231577
    },
    {
        "content": "<p>Otherwise we won't convert much mathematicians to formalisation</p>",
        "id": 127068299,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527231598
    },
    {
        "content": "<p>Not completely transparent, if it's too transparent then <code>*</code> and <code>+</code> become the same and that's bad</p>",
        "id": 127068346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527231608
    },
    {
        "content": "<p>it's really not an easy problem</p>",
        "id": 127068348,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527231615
    },
    {
        "content": "<p>I think <code>multiplicative</code> strikes the right balance, you have to explicitly state what you want but otherwise lean does the proof for free</p>",
        "id": 127068356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527231654
    },
    {
        "content": "<p>Hmmm, would still like to have groups without notation</p>",
        "id": 127068370,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527231710
    },
    {
        "content": "<p>why?</p>",
        "id": 127068371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527231715
    },
    {
        "content": "<p>it's not easier to read</p>",
        "id": 127068397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527231723
    },
    {
        "content": "<p>it's not easier to use</p>",
        "id": 127068412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527231729
    },
    {
        "content": "<p>the names are less obvious</p>",
        "id": 127068415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527231738
    },
    {
        "content": "<p>For the generic theorems. Because those can be applied transparently to both settings</p>",
        "id": 127068416,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527231741
    },
    {
        "content": "<p>I see no advantages</p>",
        "id": 127068418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527231746
    },
    {
        "content": "<p>it can't be applied transparently though</p>",
        "id": 127068425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527231762
    },
    {
        "content": "<p>I think they are just as easy to use (or easier, in the mixed setting).</p>",
        "id": 127068426,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527231765
    },
    {
        "content": "<p>it is as easy to apply a neutral theorem to an additive setting as it is to apply a multiplicative theorem in an additive setting</p>",
        "id": 127068433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527231800
    },
    {
        "content": "<p>If every <code>add_group</code> is an instance of <code>generic_group</code>, and I prove the five lemma for generic groups, then I can just apply it to additive groups, right?</p>",
        "id": 127068434,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527231807
    },
    {
        "content": "<p>Without any <code>multiplicative</code> stuff</p>",
        "id": 127068435,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527231824
    },
    {
        "content": "<p>You see, when I have my mathematician hat on I never think about whether my group is additive or multiplicative. I just use it. And I just use theorems. And it works.</p>",
        "id": 127068479,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527231884
    },
    {
        "content": "<p>I never had to deal with this in metamath either</p>",
        "id": 127068491,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527231912
    },
    {
        "content": "<p>So I don't want end users to have to figure out themselves where they need to use <code>multiplicative</code> to make some generic theorem work</p>",
        "id": 127068492,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527231913
    },
    {
        "content": "<blockquote>\n<p>You see, when I have my mathematician hat on I never think about whether my group is additive or multiplicative. I just use it. And I just use theorems. And it works.</p>\n</blockquote>\n<p>hear hear</p>",
        "id": 127068493,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527231918
    },
    {
        "content": "<p>it was all local notation</p>",
        "id": 127068496,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527231930
    },
    {
        "content": "<p>we do have an algebra hierarchy that mario doesn't use though</p>",
        "id": 127068497,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527231947
    },
    {
        "content": "<p>in that hierarchy this problem is avoided, I think</p>",
        "id": 127068498,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527231954
    },
    {
        "content": "<p>Leo has his own ideas about generic groups. Like I said, this issue has a long history</p>",
        "id": 127068537,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527231997
    },
    {
        "content": "<p>The core lean impl is unfinished though, maybe lean 4 will have something workable</p>",
        "id": 127068539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527232022
    },
    {
        "content": "<p>Honestly I have had more conversations on this topic than I would like, and things have not changed as a result</p>",
        "id": 127068588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527232093
    },
    {
        "content": "<p>I just want to prove theorems and use what's there</p>",
        "id": 127068601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527232109
    },
    {
        "content": "<p>Ok. Got that.</p>",
        "id": 127068613,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527232179
    },
    {
        "content": "<p>I really don't want to start any fights of course. I really love what you have done so far.</p>",
        "id": 127068617,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527232196
    },
    {
        "content": "<p>I don't mean to be short with you, but everyone has an idea and every solution has pros and cons</p>",
        "id": 127068660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527232235
    },
    {
        "content": "<p>I would suggest not entering the ring unless you have a large amount of testing to support your claims</p>",
        "id": 127068669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527232288
    },
    {
        "content": "<p>Yeah, that's good advice.</p>",
        "id": 127068765,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527232510
    },
    {
        "content": "<blockquote>\n<p>I don't see any reason to avoid some kind of primacy between the notations</p>\n</blockquote>\n<p>This is a concept alien to mathematicians, that's why Johan is talking about it. But, like division by zero, it's just something we have to learn.</p>",
        "id": 127104639,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527286709
    },
    {
        "content": "<p>They have different customs here.</p>",
        "id": 127104713,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527286857
    },
    {
        "content": "<p>Did we get anywhere with this additive group homs thread? <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> what is the definition you recommend in the end?</p>",
        "id": 129399170,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531212127
    }
]