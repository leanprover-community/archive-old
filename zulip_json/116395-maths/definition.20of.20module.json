[
    {
        "content": "<p>When Mario was formalising the definition of a module way back, we had all these out_params and complicated discussions between him and Sebastian about how difficult things were. Now we have</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">protect_proj</span><span class=\"o\">]</span> <span class=\"n\">class</span> <span class=\"n\">semimodule</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">distrib_mul_action</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">add_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">s</span> <span class=\"err\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">zero_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>and it looks beautiful. To me, the only thing that looks a bit weird about this definition now is that we have <code>(M)</code> before <code>[semiring R]</code>. Is that just irrelevant? Did all the out_param issues get completely resolved?</p>",
        "id": 203887267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594760239
    },
    {
        "content": "<p>I agree that changing the order of the argument would be okay. I think historically there was a preference to put all the type arguments together first, then all the typeclass arguments. I prefer the other style.</p>",
        "id": 203905845,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594773757
    },
    {
        "content": "<p>The benefit of this style is that you can write <code>@semimodule R M _ _</code> and you have to do less counting for how many <code>_</code> you need before you can plug in a type again. But that's the only benefit I see...</p>",
        "id": 203914866,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594785974
    },
    {
        "content": "<p>Oh, I guess that is nice.</p>",
        "id": 203915141,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594786349
    },
    {
        "content": "<p>I have occasionally wondered if we could have a version of<code>@</code> that tells the elaborator that we will fill in the explicit arguments but not the typeclass ones.</p>",
        "id": 203925208,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1594799368
    },
    {
        "content": "<p>isn't that just not-<code>@</code>?</p>",
        "id": 203951171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594817819
    },
    {
        "content": "<p>No, I think the question is to get a trick to convert <code>{}</code> into <code>()</code>, but leave <code>[]</code> implicit</p>",
        "id": 203951255,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594817860
    },
    {
        "content": "<p>So that you don't need 25 <code>_</code>s</p>",
        "id": 203951340,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594817887
    },
    {
        "content": "<p>I should have said “implicit” rather than “explicit”. Interpreting me literally, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is completely right, but yes, I intended to communicate what <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> has explained.</p>",
        "id": 203954196,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1594819386
    }
]