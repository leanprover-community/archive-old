[
    {
        "content": "<p>For teaching real numbers to my first-year undergraduates, I've written a class that contains the real number axioms and have used this to prove all the necessary basic results (<code>x*0 = 0</code>, no zero-divisors, uniqueness of supremum, the Archimedean property, etc.). I'd like to use this class for developing further facts (e.g. existence of square root of 2, results on convergence of sequences), but I can see this will be painful without <code>linarith</code>.</p>\n<p>What do I need to do to use <code>linarith</code> with my own class?</p>",
        "id": 217459182,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1605906656
    },
    {
        "content": "<p>You probably need an instance from your class to <code>comm_ring</code>.</p>",
        "id": 217460987,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1605907581
    },
    {
        "content": "<p>The <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#linarith\">tactic docs</a> seem to suggest you need a <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/ordered_ring.html#linear_ordered_comm_ring\"><code>linear_ordered_comm_ring</code></a> instance</p>",
        "id": 217461008,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1605907599
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n</code></pre></div>\n<p>works. I will grumpily comment that <code>linarith</code> doesn't work on <code>pnat</code>, as I discovered to my mild irritation at Xena yesterday :-)</p>",
        "id": 217461275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605907784
    },
    {
        "content": "<p>OK, I'll have a go at that but I'm not sure about proving the decidable instances.</p>",
        "id": 217461700,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1605908014
    },
    {
        "content": "<p>You can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.prop_decidable\">docs#classical.prop_decidable</a> for those.</p>",
        "id": 217461808,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1605908080
    },
    {
        "content": "<p>A nice way to do these things is to slowly build up from the basics.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">linear_ordered_comm_ring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">linear_ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">comm_monoid</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>so before you prove it's a <code>linear_ordered_comm_ring</code> you should prove it's a <code>linear_ordered_ring</code> and a <code>comm_monoid</code>, and keep working backwards like this until you find stuff which is true from the axioms you've assumed. The entire natural number game was built from me trying to find the most exotic structure which the naturals was (probably it's a linearly ordered semiring or whatever) and then just unravelling all the definitions of everything -- this approach informed which order I should be doing everything in.</p>",
        "id": 217462304,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605908392
    },
    {
        "content": "<p>I have everything working except trying to get an instance of <code>mul_pos</code>. Though I've written a lemma <code>mul_pos'</code> that I think does the right thing,  when I try to use this to get the instance, I receive an error message,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">field</span> <span class=\"bp\">'</span><span class=\"n\">mul_pos'</span>\n  <span class=\"n\">mul_pos'</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>I could post the code but it's about 700 lines up to this point. Any suggestions or pointers are appreciated!</p>",
        "id": 217470237,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1605913742
    },
    {
        "content": "<p>My guess is <code>mul_pos'</code> has an extra type class assumption, maybe unintended? <code>#check @mul_pos'</code> and show the state where you're trying to use it?</p>",
        "id": 217470597,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1605914041
    },
    {
        "content": "<p>Ah yes, I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">mul_pos'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 217470683,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1605914111
    },
    {
        "content": "<p>Oh no, that was a mathlib function. I've renamed mine to <code>bob</code> to avoid confusion. I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">bob</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">myordered_field</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 217470976,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1605914348
    },
    {
        "content": "<p>What's the context and goal when you try to apply <code>bob</code>?</p>",
        "id": 217471083,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1605914408
    },
    {
        "content": "<p>This isn't in a tactic state, it's when I'm trying to do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">comm_group'.add</span><span class=\"o\">,</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">comm_group'.add_assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">comm_group'.zero</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"n\">comm_group'.neg</span><span class=\"o\">,</span>\n  <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"n\">neg_add</span><span class=\"o\">,</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"n\">comm_group'.add_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">myfield.mul</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">myfield.mul_assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">myfield.one</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">myfield.mul_one</span><span class=\"o\">,</span>\n  <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"n\">myfield.mul_add</span><span class=\"o\">,</span>\n  <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">le</span><span class=\"o\">,</span>\n  <span class=\"n\">le_refl</span> <span class=\"o\">:=</span> <span class=\"n\">le_refl</span><span class=\"o\">,</span>\n  <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"n\">le_trans</span><span class=\"o\">,</span>\n  <span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"n\">anti_symm</span><span class=\"o\">,</span>\n  <span class=\"n\">add_le_add_left</span> <span class=\"o\">:=</span> <span class=\"n\">add_le_add_left</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_ne_one</span> <span class=\"o\">:=</span> <span class=\"n\">myfield.zero_ne_one</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_pos</span> <span class=\"o\">:=</span> <span class=\"n\">bob</span><span class=\"o\">,</span>\n  <span class=\"n\">le_total</span> <span class=\"o\">:=</span> <span class=\"n\">le_total</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_lt_one</span> <span class=\"o\">:=</span> <span class=\"n\">zero_lt_one</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"n\">myfield.mul_comm</span><span class=\"o\">,</span>\n\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 217471123,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1605914458
    },
    {
        "content": "<p><code>bob</code> works fine by itself.</p>",
        "id": 217471154,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1605914490
    },
    {
        "content": "<p>Oh, so it's working now?</p>",
        "id": 217471212,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1605914524
    },
    {
        "content": "<p>Well it doesn't work the sense that when I type the above code to try to show <code>R</code> is an instance of <code>linear_ordered_comm_ring</code>, I get the error message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">field</span> <span class=\"bp\">'</span><span class=\"n\">mul_pos'</span>\n  <span class=\"n\">bob</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 217471279,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1605914634
    },
    {
        "content": "<p>with <code>pp.all</code>?</p>",
        "id": 217471356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605914689
    },
    {
        "content": "<p>Okay, replace <code>mul_pos := bob,</code> with <code>mul_pos := _,</code> and show us the output. That's the context and goal at that point.</p>",
        "id": 217471379,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1605914713
    },
    {
        "content": "<p>Maybe <code>R</code> is <code>Type *</code> instead of <code>Type</code>?</p>",
        "id": 217471395,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1605914728
    },
    {
        "content": "<p>When I put in <code>mul_pos := _</code>, the only text in the Infoview window is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">field</span> <span class=\"bp\">'</span><span class=\"n\">mul_pos'</span>\n  <span class=\"n\">bob</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>I have <code>variables {R : Type} [myordered_field R]</code>.</p>",
        "id": 217471910,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1605915164
    },
    {
        "content": "<p>And with <code>pp.all</code>, it's:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">field</span> <span class=\"bp\">'</span><span class=\"n\">mul_pos'</span>\n  <span class=\"bp\">@</span><span class=\"n\">mth1001.myreal.bob</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">),</span>\n    <span class=\"bp\">@</span><span class=\"n\">has_lt.lt.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mth1001.myreal.has_lt</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mth1001.myreal.has_zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mth1001.myreal.myfield.to_comm_group'.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mth1001.myreal.myordered_field.to_myfield</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span><span class=\"o\">))))</span>\n      <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">→</span>\n    <span class=\"bp\">@</span><span class=\"n\">has_lt.lt.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mth1001.myreal.has_lt</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mth1001.myreal.has_zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mth1001.myreal.myfield.to_comm_group'.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mth1001.myreal.myordered_field.to_myfield</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span><span class=\"o\">))))</span>\n      <span class=\"n\">b</span> <span class=\"bp\">→</span>\n    <span class=\"bp\">@</span><span class=\"n\">has_lt.lt.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mth1001.myreal.has_lt</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mth1001.myreal.has_zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mth1001.myreal.myfield.to_comm_group'.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mth1001.myreal.myordered_field.to_myfield</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span><span class=\"o\">))))</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_mul.mul.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mth1001.myreal.has_mul</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mth1001.myreal.myordered_field.to_myfield</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span><span class=\"o\">))</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span>\n         <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span>\n    <span class=\"bp\">@</span><span class=\"n\">has_lt.lt.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">preorder.to_has_lt.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">partial_order.to_preorder.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_add_comm_group.to_partial_order.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_add_comm_group.mk.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mth1001.myreal.comm_group'.add.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mth1001.myreal.myfield.to_comm_group'.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n                        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mth1001.myreal.myordered_field.to_myfield</span> <span class=\"n\">R</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mth1001.myreal.comm_group'.add_assoc.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mth1001.myreal.myfield.to_comm_group'.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n                        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mth1001.myreal.myordered_field.to_myfield</span> <span class=\"n\">R</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mth1001.myreal.comm_group'.zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mth1001.myreal.myfield.to_comm_group'.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Plus many more lines -/</span>\n</code></pre></div>",
        "id": 217471991,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1605915236
    },
    {
        "content": "<p>That looks like you've put in <code>mul_pos := bob _</code>, not <code>mul_pos := _</code>.</p>",
        "id": 217472106,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1605915333
    },
    {
        "content": "<p>But now my guess is, you have two different <code>&lt;</code> instances.</p>",
        "id": 217472124,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1605915354
    },
    {
        "content": "<p>Maybe different <code>*</code> instances but <code>&lt;</code> seems more likely.</p>",
        "id": 217472178,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1605915385
    },
    {
        "content": "<p>Oh thanks! I misread what you wrote. The context and goal are:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">myordered_field</span> <span class=\"n\">R</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span>\n    <span class=\"n\">ordered_add_comm_group.lt</span> <span class=\"mi\">0</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">ordered_add_comm_group.lt</span> <span class=\"mi\">0</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">ordered_add_comm_group.lt</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 217472320,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1605915514
    },
    {
        "content": "<blockquote>\n<p><code>_inst_1 : myordered_field R</code></p>\n</blockquote>\n<p>this looks suspicious</p>",
        "id": 217472366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605915565
    },
    {
        "content": "<p>you are constructing a ring instance, why is a field instance already in the context?</p>",
        "id": 217472387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605915588
    },
    {
        "content": "<p>Perhaps I'm going about this entirely the wrong way, but I've created a hierarchy of classes, <code>comm_group'</code>, <code>myfield, </code>myordered_field<code>, </code>myreal_field<code>. I'm trying to show, given\n</code>variables {R : Type} [myordered_field R]<code> that </code>R<code> is an instance of </code>linear_ordered_comm_ring`.</p>",
        "id": 217472755,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1605915917
    },
    {
        "content": "<p>Ah, now I'm on board with Rob's idea too. I see <code>mth1001.myreal.has_lt</code> so apparently you have a <code>has_lt</code> instance, but you didn't supply it in the big structure instance (there is no <code>lt := (&lt;)</code> in the list)</p>",
        "id": 217472775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605915947
    },
    {
        "content": "<p>OK. I added <code>lt := lt'</code> to the list. This gives the error message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">exact</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">given</span> <span class=\"n\">expression</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">↔</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>Is this because my definition <code>lt'</code> is actually <code>λ {R : Type} [_inst_1 : myordered_field R] (x y : R), myordered_field.pos (y - x)</code>?</p>",
        "id": 217473240,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1605916354
    },
    {
        "content": "<p>You need to provide the field <code>lt_iff_le_not_le</code> now too</p>",
        "id": 217474060,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605917064
    },
    {
        "content": "<p>Thanks everyone for your help. This works now!</p>",
        "id": 217475015,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1605918089
    },
    {
        "content": "<p>Like I said, instead of trying to build it all at once, it's much easier to build all the instances from the very bottom :-)</p>",
        "id": 217475256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605918375
    },
    {
        "content": "<p>Then you can use the <code>..</code> trick.</p>",
        "id": 217475303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605918437
    },
    {
        "content": "<p>Oooh, what's the <code>..</code> trick?</p>",
        "id": 217475376,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1605918497
    },
    {
        "content": "<p>Basically, if you're constructing a structure of type <code>T</code> and <code>p : U</code> where <code>T extends U</code>, you can use <code>.. p</code> within the curly braces to fill in missing fields from <code>p</code>. There's a brief mention in TPiL <a href=\"https://leanprover.github.io/theorem_proving_in_lean/structures_and_records.html#objects\">here</a>.</p>",
        "id": 217477765,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1605921548
    }
]