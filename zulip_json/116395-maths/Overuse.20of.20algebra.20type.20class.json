[
    {
        "content": "<p>I think we might have taken the algebra type class a little far. I think it was originally motivated by the need to put an <code>R</code>-module structure on a ring <code>S</code> given a ring hom <code>R →+* S</code>, but now a lot of stuff is stated in terms of the algebra type class when it should just be stated in terms of a ring hom. The current approach seems to work okay when building up the theory because you can always assume <code>algebra R S</code> when the rings are just arbitrary rings but on more concrete examples the ring homs might not be canonical. An example came up the other day when dealing with transcendence bases. I wanted to prove that a ring is an algebraic extension of the subring generated by a transcendence basis. The statement was</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_transcendence_basis.is_algebraic</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span>  <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">is_transcendence_basis</span> <span class=\"n\">R</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_algebraic</span> <span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"n\">A</span>\n</code></pre></div>\n<p>I would actually prefer to state this theorem as  <code>is_algebraic (mv_polynomial ι R) A</code> - the rings <code>adjoin R (range v)</code> and <code>mv_polynomial ι R</code>,  are isomorphic, but the map  <code>mv_polynomial ι R -&gt; A</code> is given by <code>v</code>, so it is not an <code>algebra</code> instance. The <code>mv_polynomial</code> statement is preferable because I know a lot more about <code>mv_polynomial</code>.</p>\n<p>The current setup does seem to leave you in a world of pain if you're dealing with a ring hom that isn't canonical enough.</p>",
        "id": 253949169,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1632061978
    },
    {
        "content": "<p><code>algebra</code> is just \"ring hom but a typeclass\" and this point of view says that it should thus only be used when the ring hom is \"canonical\" (in the sense that you definitely won't be considering any more ring homs from R to A). [PS your lemma is missing something, you have <code>{v :  → A}</code> as I write]</p>",
        "id": 253951854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1632064788
    },
    {
        "content": "<p>Canonical has a stricter meaning here, namely <code>algebra_map R A r = r • 1</code> which leaves wriggle room only up to propositional equality; the choice of canonicity is usually already made by the <code>has_scalar</code> instance</p>",
        "id": 253954388,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632067628
    },
    {
        "content": "<p>Here's an evil thought I just had: can't we get the best of both worlds using an <code>auto_param</code> hack? Namely, state everything that currently uses <code>algebra R A</code> as a \"ring-hom-as-typeclass\" to take a parameter of the form <code>(f : R →+* A . `[apply algebra_map])</code> instead. Then the map can be left out when it is canonical, and supplied explicitly when it is not.</p>",
        "id": 254355476,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1632312319
    },
    {
        "content": "<p>That doesn't work for lemmas about algebras that use <code>•</code> because you no longer have the fact that it is compatible with the algebra_map</p>",
        "id": 254358268,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632313724
    },
    {
        "content": "<p>Honestly I think that we're going to have to do that a lot for that sort of thing in other classes. A lot of classes are used in places where the structure is not that canonical. There's only ever one ring structure on a type, but for other classes there isn't always one canonical instance. We've had the same problem with group actions, and there are a bunch of ways of making <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}[X]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span> module. In the long term, I think we need good notation to be able to explicitly provide a module structure or a group action or an algebra structure, whilst still being able to provide them implicitly most of the time.</p>",
        "id": 254358269,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1632313726
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Overuse.20of.20algebra.20type.20class/near/254358268\">said</a>:</p>\n<blockquote>\n<p>That doesn't work for lemmas about algebras that use <code>•</code> because you no longer have the fact that it is compatible with the algebra_map</p>\n</blockquote>\n<p>Ideally, my solution to this is to be able to have some nice notation for explicitly proving the module structure. It would be something like <code>•[a]</code> where <code>a</code> is some algebra structure being coerced to a module structure or something. It'll take quite a bit of thought to implement something like this nicely though.</p>",
        "id": 254358647,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1632313920
    }
]