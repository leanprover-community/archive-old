[
    {
        "content": "<p>How am I supposed to be doing this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.degree</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.noetherian</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- what a mathematician would call I</span>\n<span class=\"n\">submodule.restrict_scalars</span> <span class=\"n\">R</span> <span class=\"n\">I</span> <span class=\"c1\">-- type class error</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n\n<span class=\"cm\">failed to synthesize type class instance for</span>\n<span class=\"cm\">R : Type,</span>\n<span class=\"cm\">_inst_1 : comm_ring R,</span>\n<span class=\"cm\">I : ideal (polynomial R)</span>\n<span class=\"cm\">‚ä¢ is_scalar_tower R (polynomial R) (polynomial R)</span>\n\n<span class=\"cm\">-/</span>\n\n<span class=\"c1\">-- is this what I'm supposed to be doing?</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refine</span> <span class=\"n\">ring_hom.to_algebra</span> <span class=\"o\">(</span><span class=\"n\">polynomial.C</span><span class=\"o\">)</span>\n<span class=\"c1\">-- next line still fails</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span> <span class=\"c1\">-- still doesn't work</span>\n</code></pre></div>",
        "id": 261006122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636558240
    },
    {
        "content": "<p>You need to import <code>data.polynomial.algebra_map</code>, and then you have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.algebra_of_algebra\">docs#polynomial.algebra_of_algebra</a>, so <code>instance : algebra R (polynomial R)</code> will be there.</p>",
        "id": 261006744,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1636558502
    },
    {
        "content": "<p>As Riccardo said just before me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.algebra_map</span> <span class=\"c1\">-- missing import</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.noetherian</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- what a mathematician would call I</span>\n<span class=\"n\">submodule.restrict_scalars</span> <span class=\"n\">R</span> <span class=\"n\">I</span>\n</code></pre></div>",
        "id": 261006971,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1636558579
    },
    {
        "content": "<p>nice -- also works in my use case. Thanks!</p>",
        "id": 261007098,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636558644
    }
]