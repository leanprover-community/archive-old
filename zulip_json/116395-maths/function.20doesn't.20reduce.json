[
    {
        "content": "<p><code>#eval as_fib_sum 0</code> prints <code>{}</code>, but <code>refl</code> doesn't see that. What gives?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.fib.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">rep0</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∅</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">fib</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">as_fib_sum_aux</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">fib</span> <span class=\"n\">i.succ</span> <span class=\"bp\">→</span> <span class=\"o\">{</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">S.sum</span> <span class=\"n\">fib</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">∅</span><span class=\"o\">,</span> <span class=\"n\">rep0</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"mi\">1</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">∅</span><span class=\"o\">,</span> <span class=\"n\">rep0</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">Hcmp</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n    <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">fib</span> <span class=\"n\">i.succ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">as_fib_sum_aux</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">i</span> <span class=\"n\">h'</span> <span class=\"k\">in</span>\n    <span class=\"o\">⟨</span><span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">as_fib_sum_aux</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lt_of_not_ge'</span> <span class=\"n\">Hcmp</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">fib_between</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">fib</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">fib</span> <span class=\"n\">k.succ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">as_fib_sum</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">S.sum</span> <span class=\"n\">fib</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"n\">as_fib_sum_aux</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">nat.find</span> <span class=\"o\">(</span><span class=\"n\">fib_between</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">nat.find_spec</span> <span class=\"o\">(</span><span class=\"n\">fib_between</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">elim_right</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">as_fib_sum</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">nat</span>\n</code></pre></div>",
        "id": 275157824,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1647182630
    },
    {
        "content": "<p>Looks like the problem is with <code>nat.find</code>, which uses well-founded recursion. How do I force Lean to evaluate that?</p>",
        "id": 275166750,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1647194327
    },
    {
        "content": "<p>Do you need <code>rfl</code> to work?</p>",
        "id": 275208834,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647248889
    },
    {
        "content": "<p><del>Lean will have generated an equation lemma for you that proves that statement</del></p>",
        "id": 275208880,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647248919
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">find_fib_between_0</span> <span class=\"o\">:</span> <span class=\"n\">nat.find</span> <span class=\"o\">(</span><span class=\"n\">fib_between</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">nonpos_iff_eq_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat.find_min'</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">as_fib_sum</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">as_fib_sum</span> <span class=\"n\">as_fib_sum_aux</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">find_fib_between_0</span><span class=\"o\">],</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275210570,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647249882
    },
    {
        "content": "<p><code>#eval</code> isn't a predictor of what <code>refl</code> can do, since it's evaluating things by a completely different mechanism (the untrusted VM interpreter). Closer would be <code>#reduce as_fib_sum 0</code>, which gives a pretty big term full of things like <code>acc.rec</code>.</p>",
        "id": 275210846,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647250035
    },
    {
        "content": "<p>Would it be possible to modify <code>norm_num</code> or something to teach it how to compute <code>nat.find</code>? If so, any pointers on how to go about doing that?</p>",
        "id": 275220565,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1647255729
    },
    {
        "content": "<p>This might be enough:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">nat.find_true</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">nat.find</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hp</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">nat.find_false</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">nat.find</span> <span class=\"n\">h</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"n\">nat.find</span> <span class=\"o\">(</span><span class=\"kd\">begin</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">obtain</span> <span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">contradiction</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩,</span> <span class=\"kd\">end</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">find_comp_succ</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">hp</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">as_fib_sum</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">as_fib_sum</span><span class=\"o\">,</span> <span class=\"n\">as_fib_sum_aux</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 275223722,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647257838
    },
    {
        "content": "<p>It depends on <code>simp</code>/<code>norm_num</code> being able to evaluate the predicate, though.</p>",
        "id": 275223771,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647257877
    },
    {
        "content": "<p>It gets stuck at the next case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">as_fib_sum</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">as_fib_sum</span><span class=\"o\">,</span> <span class=\"n\">as_fib_sum_aux</span><span class=\"o\">],</span>\n  <span class=\"n\">generalize_proofs</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize_proofs</span> <span class=\"n\">at</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">a : ∃ (n : ℕ), fib (n + 1 + 1) ≤ 1 ∧ 1 &lt; fib (n + 1 + 1).succ,</span>\n<span class=\"cm\">b : 1 - fib (nat.find a + 2) &lt; fib (nat.find a).succ</span>\n<span class=\"cm\">⊢ ↑(dite (fib (nat.find a + 2) ≤ 1)</span>\n<span class=\"cm\">         (λ (Hcmp : fib (nat.find a + 2) ≤ 1),</span>\n<span class=\"cm\">            as_fib_sum_aux._match_1 1 (nat.find a) ((1 - fib (nat.find a + 2)).as_fib_sum_aux (nat.find a) b))</span>\n<span class=\"cm\">         (λ (Hcmp : ¬fib (nat.find a + 2) ≤ 1), 1.as_fib_sum_aux (nat.find a).succ _)) =</span>\n<span class=\"cm\">    s</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(The <code>s</code> is a trick to use <code>norm_num</code> when you don't know what it is supposed to equal.)</p>",
        "id": 275224306,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647258305
    }
]