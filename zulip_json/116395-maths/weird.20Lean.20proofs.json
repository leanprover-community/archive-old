[
    {
        "content": "<p>Lemma. If <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mo>:</mo><mo>(</mo><msub><mi>X</mi><mi>j</mi></msub><msub><mo>)</mo><mrow><mi>j</mi><mo>∈</mo><mi>J</mi></mrow></msub><mo>→</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">t : (X_j)_{j \\in J} \\to X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"base\"><span class=\"mord mathit\">t</span><span class=\"mrel\">:</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.328331em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathit mtight\" style=\"margin-right:0.09618em;\">J</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span><span class=\"mrel\">→</span><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span></span></span></span> is a colimit cocone in Set, then every element of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span></span></span></span> is in the image of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>X</mi><mi>j</mi></msub><mo>→</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X_j \\to X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span><span class=\"mrel\">→</span><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span></span></span></span> for some <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>j</mi><mo>∈</mo><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">j \\in J</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel\">∈</span><span class=\"mord mathit\" style=\"margin-right:0.09618em;\">J</span></span></span></span>.</p>\n<p>Proof. Let <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo>:</mo><mi>X</mi><mo>→</mo><mrow><mi mathvariant=\"monospace\">P</mi><mi mathvariant=\"monospace\">r</mi><mi mathvariant=\"monospace\">o</mi><mi mathvariant=\"monospace\">p</mi></mrow></mrow><annotation encoding=\"application/x-tex\">f : X \\to \\mathtt{Prop}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.9166599999999999em;vertical-align:-0.22222em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mrel\">:</span><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span><span class=\"mrel\">→</span><span class=\"mord\"><span class=\"mord mathtt\">P</span><span class=\"mord mathtt\">r</span><span class=\"mord mathtt\">o</span><span class=\"mord mathtt\">p</span></span></span></span></span> be the function sending <code>x</code> to <code>∃ j y, t.ι.app j y = x</code> and let <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span></span></span></span> be the constant function <code>true</code>. Then <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span></span></span></span> agree after precomposition with each <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>X</mi><mi>j</mi></msub><mo>→</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X_j \\to X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span><span class=\"mrel\">→</span><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span></span></span></span>, so they are equal.</p>",
        "id": 148758351,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543455412
    },
    {
        "content": "<p>you what</p>",
        "id": 148758376,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543455474
    },
    {
        "content": "<p>To a category theorist, on a scale of 1-10, how old is the \"I think it's actually called a 'ne'\" joke</p>",
        "id": 148758607,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543455822
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> \"lean will revolutionize mathematics\"</p>",
        "id": 148758684,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543455913
    },
    {
        "content": "<blockquote>\n<p>To a category theorist, on a scale of 1-10, how old is the \"I think it's actually called a 'ne'\" joke</p>\n</blockquote>\n<p>I think that joke turned 10 several years ago...</p>",
        "id": 148766496,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543469062
    },
    {
        "content": "<p>I don't see why this is a weird proof. Isn't this basically how you prove that epis are surjective in Set?</p>",
        "id": 148766630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543469361
    },
    {
        "content": "<p>We don't have Curry-Howard in mathematics, remember (-;</p>",
        "id": 148766707,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543469464
    },
    {
        "content": "<p>So you can't even write this proof down in \"mathematics\"</p>",
        "id": 148766713,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543469478
    },
    {
        "content": "<p>yes you can, just make <code>f</code> take values in <code>{0, 1}</code> or something, or do equality of sets instead (i.e. <code>f</code> denotes a subset of X)</p>",
        "id": 148766766,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543469532
    },
    {
        "content": "<p>Sure... But I agree with Reid that is just feels a lot different then when you build a map to <code>Prop</code>.</p>",
        "id": 148766902,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543469779
    },
    {
        "content": "<p>Anyway, it's probably just taste.</p>",
        "id": 148766909,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543469796
    },
    {
        "content": "<p>I think that this is one of the really interesting places where you get a truly nonconstructive exists without choice</p>",
        "id": 148766916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543469826
    },
    {
        "content": "<p>Can you prove the existence of a colimit cocone in Set without choice though?</p>",
        "id": 150791933,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1543863786
    },
    {
        "content": "<p>Yes (<a href=\"https://github.com/leanprover/mathlib/blob/master/category_theory/limits/types.lean#L49\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/category_theory/limits/types.lean#L49\">https://github.com/leanprover/mathlib/blob/master/category_theory/limits/types.lean#L49</a>), and what I would consider the \"normal\" proof of the original fact consists of writing down this formula (which one has presumably done already), noting that the fact is obvious in this case, and using essential uniqueness of the colimit</p>",
        "id": 150792172,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543863961
    },
    {
        "content": "<p>It might actually end up being easier in Lean than the one I outlined above, because I needed to do some juggling to get <code>Prop</code> into the correct universe to make that proof actually work</p>",
        "id": 150792703,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543864364
    },
    {
        "content": "<p>You might be thinking of the situation where you have a type X and some subsets whose union is all of X, and you want to prove that X is some kind of colimit of the subsets</p>",
        "id": 150792953,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543864586
    }
]