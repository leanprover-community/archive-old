[
    {
        "content": "<p>I just noticed to my mild surprise that in <a href=\"https://github.com/leanprover-community/mathlib/pull/7830\">#7830</a> <code>is_projective R M : Prop</code> was changed to <code>module.projective R M : Prop</code>, as part of turning it into a <code>class</code>. In my opinion the removal of <code>is_</code> is a step in the wrong direction.</p>\n<p>Here's an example of some variables in a project on my computer:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_dedekind_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_fraction_ring</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>This is really nice. It's absolutely clear what the data classes are and what the prop-valued classes are. A mathematician could read this, and could easily be trained to write it. The moment you start removing <code>is_</code> from Prop-valued classes you get bemused people wondering why <code>[dedekind_domain R]</code> doesn't imply <code>[ring R]</code>. Mathematicians don't want to know the ins and outs of what it means for a structure to extend another one, but they do need to know which classes are Props and the <code>is_</code> convention is a really good one for this. What are the arguments the other way?</p>",
        "id": 266509885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640965137
    },
    {
        "content": "<p>It's ever so slightly annoyingly longer. I want to use that convention but can't get myself to use it.</p>",
        "id": 266509986,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640965272
    },
    {
        "content": "<p>I agree, I think that's the only counterargument.</p>",
        "id": 266509994,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640965290
    },
    {
        "content": "<p><code>is_projective</code> is the same length as <code>projective</code> to all intents and purposes</p>",
        "id": 266510045,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640965326
    },
    {
        "content": "<p>... along with unclarity about the naming convention. Should lemma names keep the <code>is_</code> given that it's unambiguous without it?</p>",
        "id": 266510050,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640965336
    },
    {
        "content": "<p>Another thing is that it doesn't cover mixins. For example, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/locally_finite_order\">docs#locally_finite_order</a> doesn't imply <a href=\"https://leanprover-community.github.io/mathlib_docs/find/preorder\">docs#preorder</a> even though it's in the name, because it's a mixin.</p>",
        "id": 266510064,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640965364
    },
    {
        "content": "<p>But I agree that the data-prop distinction is worth something. Since mathlib is so bad at making that distinction clear in names currently, it creates an environment where we don't enforce the <code>is_</code> convention.<br>\nIf we sat down, and renamed everything to follow a clear <code>is_</code>-pattern, it would be a lot easier to keep it enforced for new stuff later on.</p>",
        "id": 266510076,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640965391
    },
    {
        "content": "<p>Another possible convention: Prop-valued things should be either <code>is_noun</code> or <code>adjective</code>.</p>",
        "id": 266510456,
        "sender_full_name": "Reid Barton",
        "timestamp": 1640965917
    },
    {
        "content": "<p><code>[comm_ring R] [domainy R]</code></p>",
        "id": 266510517,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1640965957
    },
    {
        "content": "<p>Right, <code>is_</code> prefixes can be interchanged for <code>ish</code> suffixes.</p>",
        "id": 266510712,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640966207
    },
    {
        "content": "<p>I think I made the change. If I remember correctly the only reason was to be coherent with <code>module.finite</code> and friends</p>",
        "id": 266511515,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640967133
    },
    {
        "content": "<p>What should smul_comm_class be renamed to in this new scheme? I like the adjective / is_noun scheme, and I think it's fairly close to current use</p>",
        "id": 266526140,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640988600
    }
]