[
    {
        "content": "<p>I want to formalize the following theorem:</p>\n<blockquote>\n<p>Given a finite open cover <code>Uᵢ</code> of a compact set <code>K</code>, there exists a compact sets <code>Kᵢ ⊆ Uᵢ</code> such that <code>K = ⋃ᵢ Kᵢ </code> (in a T2 space)</p>\n</blockquote>\n<p>I don't really know how to formulate it in the most convenient way. There are <em>many</em> ways we can formulate a finite collection of things:<br>\n(1) <code>U : ι → opens α</code> with <code>[fintype ι]</code><br>\n(2) <code>U : t → opens α</code> for <code>(t : finset ι)</code><br>\n(3) <code>U : fin n → opens α</code><br>\n(4) <code>U : finset (opens α)</code><br>\n(5) <code>U : multiset (opens α)</code><br>\n(6) <code>U : finsupp ι (opens α)</code><br>\n(7) <code>U : ι → opens α</code> and <code>(t : finset ι)</code> (ignoring all values outside <code>t</code>)<br>\namong others... (we can also use <code>set α</code> + <code>is_open</code> hypothesis, but I don't really care about that now)</p>\n<p>However, not all of them are equally convenient:</p>\n<ul>\n<li>I need to relate <code>K i</code> and <code>U i</code>. This is ugly with (4) and (5).</li>\n<li>I want to apply it in a situation where <code>U</code> might not be injective. This is not possible with (4).</li>\n<li>In the proof, I want to do induction on the number of sets. This is hard with (1), and (6) (for (6), there is finsupp.induction, but it's formulated only for monoids. I'm wondering about the boilerplate needed to use that <code>opens</code> are a monoid under unions)</li>\n<li>I want to talk about unions of <code>K i</code> and <code>U i</code>, and would like library support. This doesn't exist/is limited for I think (2), (3), (5) and (6) (with (2) the problem is that the function <code>U</code> depends on the hypothesis  <code>i ∈ t</code> in contrast to all <code>bUnion</code> lemmas)</li>\n<li>(7) is problematic, because <code>K i</code> is only nicely defined when <code>i ∈ t</code>, so <code>K</code> needs to have the type of (2) (resulting in the same problems). Or you define <code>K i</code> to be empty outside <code>t</code>, but I'm not sure if that is convenient.</li>\n</ul>\n<p>I have actually already proved it for (4), but it was not pretty. Furthermore, when I apply my lemma, I have a <code>U</code> as in situation (2), and it would require some extra reasoning in the (stupid) case that <code>U</code> is non-injective.</p>",
        "id": 200633659,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1591935518
    },
    {
        "content": "<p>Here is my code for (4):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">opens</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- The compact sets of a topological space. See also `nonempty_compacts`. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">compacts</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">compact</span> <span class=\"n\">s</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">compacts</span><span class=\"bp\">.</span><span class=\"n\">has_emptc</span> <span class=\"o\">:</span> <span class=\"n\">has_emptyc</span> <span class=\"o\">(</span><span class=\"n\">compacts</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨⟨</span><span class=\"err\">∅</span><span class=\"o\">,</span> <span class=\"n\">compact_empty</span><span class=\"bp\">⟩⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">compacts</span><span class=\"bp\">.</span><span class=\"n\">empty_val</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">∅</span> <span class=\"o\">:</span> <span class=\"n\">compacts</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">diff_inter_diff</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">\\</span> <span class=\"n\">t</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"err\">\\</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"err\">\\</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"err\">∪</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_inter_eq</span><span class=\"o\">,</span> <span class=\"n\">mem_union_eq</span><span class=\"o\">,</span> <span class=\"n\">mem_diff</span><span class=\"o\">],</span> <span class=\"n\">tauto</span> <span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- If a compact set is covered by two open sets, then we can cover it by two compact subsets. -/</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">compact</span><span class=\"bp\">.</span><span class=\"n\">binary_compact_cover</span> <span class=\"o\">[</span><span class=\"n\">t2_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hK</span> <span class=\"o\">:</span> <span class=\"n\">compact</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hU</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hV</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2K</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"err\">⊆</span> <span class=\"n\">U</span> <span class=\"err\">∪</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">K₁</span> <span class=\"n\">K₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">compact</span> <span class=\"n\">K₁</span> <span class=\"bp\">∧</span> <span class=\"n\">compact</span> <span class=\"n\">K₂</span> <span class=\"bp\">∧</span> <span class=\"n\">K₁</span> <span class=\"err\">⊆</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">K₂</span> <span class=\"err\">⊆</span> <span class=\"n\">V</span> <span class=\"bp\">∧</span> <span class=\"n\">K</span> <span class=\"bp\">=</span> <span class=\"n\">K₁</span> <span class=\"err\">∪</span> <span class=\"n\">K₂</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">compact_compact_separated</span> <span class=\"o\">(</span><span class=\"n\">compact_diff</span> <span class=\"n\">hK</span> <span class=\"n\">hU</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">compact_diff</span> <span class=\"n\">hK</span> <span class=\"n\">hV</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">diff_inter_diff</span><span class=\"o\">,</span> <span class=\"n\">diff_eq_empty</span><span class=\"o\">])</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">O₁</span><span class=\"o\">,</span> <span class=\"n\">O₂</span><span class=\"o\">,</span> <span class=\"n\">h1O₁</span><span class=\"o\">,</span> <span class=\"n\">h1O₂</span><span class=\"o\">,</span> <span class=\"n\">h2O₁</span><span class=\"o\">,</span> <span class=\"n\">h2O₂</span><span class=\"o\">,</span> <span class=\"n\">hO</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">compact_diff</span> <span class=\"n\">hK</span> <span class=\"n\">h1O₁</span><span class=\"o\">,</span> <span class=\"n\">compact_diff</span> <span class=\"n\">hK</span> <span class=\"n\">h1O₂</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">diff_subset_comm</span><span class=\"o\">],</span> <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">diff_subset_comm</span><span class=\"o\">],</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">diff_inter</span><span class=\"o\">,</span> <span class=\"n\">hO</span><span class=\"o\">,</span> <span class=\"n\">diff_empty</span><span class=\"o\">]</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- For every finite open cover `Uᵢ` of a compact set, there exists a compact cover `Kᵢ ⊆ Uᵢ`. -/</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">compact</span><span class=\"bp\">.</span><span class=\"n\">finite_compact_cover&#39;</span> <span class=\"o\">[</span><span class=\"n\">t2_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">compact</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">opens</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hsC</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">⊆</span> <span class=\"err\">⋃</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"err\">∈</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">//</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">C</span> <span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">compacts</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">U</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">⊆</span> <span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"err\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span> <span class=\"n\">revert</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"n\">hsC</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"bp\">⟨λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"err\">∅</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">empty_subset</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">subset_empty_iff</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">not_mem_empty</span><span class=\"o\">,</span> <span class=\"n\">Union_neg</span><span class=\"o\">,</span> <span class=\"n\">Union_empty</span><span class=\"o\">,</span> <span class=\"n\">not_false_iff</span><span class=\"o\">,</span>\n      <span class=\"n\">compacts</span><span class=\"bp\">.</span><span class=\"n\">empty_val</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">hsC</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">U</span> <span class=\"n\">C</span> <span class=\"n\">hU</span> <span class=\"n\">ih</span> <span class=\"n\">s</span> <span class=\"n\">hs</span> <span class=\"n\">hsC</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">bUnion_insert</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hsC</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hs</span><span class=\"bp\">.</span><span class=\"n\">binary_compact_cover</span> <span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">is_open_bUnion</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"err\">∈</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">hsC</span>\n      <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">K₁</span><span class=\"o\">,</span> <span class=\"n\">K₂</span><span class=\"o\">,</span> <span class=\"n\">h1K₁</span><span class=\"o\">,</span> <span class=\"n\">h1K₂</span><span class=\"o\">,</span> <span class=\"n\">h2K₁</span><span class=\"o\">,</span> <span class=\"n\">h2K₂</span><span class=\"o\">,</span> <span class=\"n\">hK</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">ih</span> <span class=\"n\">h1K₂</span> <span class=\"n\">h2K₂</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">h1K</span><span class=\"o\">,</span> <span class=\"n\">h2K</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">∈</span> <span class=\"n\">C</span> <span class=\"k\">then</span> <span class=\"n\">K</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"k\">else</span> <span class=\"bp\">⟨</span><span class=\"n\">K₁</span><span class=\"o\">,</span> <span class=\"n\">h1K₁</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">hV</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">],</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_insert</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hV</span><span class=\"o\">,</span> <span class=\"n\">rcases</span> <span class=\"n\">hV</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">h2V</span><span class=\"o\">,</span>\n      <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">dif_neg</span> <span class=\"n\">hU</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">h2K₁</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">dif_pos</span><span class=\"o\">,</span> <span class=\"n\">h2V</span><span class=\"o\">],</span> <span class=\"n\">apply</span> <span class=\"n\">h1K</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_Union</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">exists</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">,</span> <span class=\"n\">hK</span><span class=\"o\">],</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">hx</span><span class=\"bp\">|</span><span class=\"n\">hx</span><span class=\"o\">),</span>\n        <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">true_or</span><span class=\"o\">,</span> <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_insert</span><span class=\"o\">],</span>\n          <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">dif_neg</span> <span class=\"n\">hU</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">]</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h2K</span><span class=\"o\">,</span> <span class=\"n\">mem_Union</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">exists</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">rcases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">h1V</span><span class=\"o\">,</span> <span class=\"n\">h2V</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n        <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h1V</span><span class=\"o\">,</span> <span class=\"n\">or_true</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_insert</span><span class=\"o\">],</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n        <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h1V</span><span class=\"o\">,</span> <span class=\"n\">dif_pos</span><span class=\"o\">,</span> <span class=\"n\">h2V</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">h1V</span><span class=\"o\">,</span> <span class=\"n\">h2V</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_insert</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1V</span><span class=\"o\">,</span>\n        <span class=\"n\">rcases</span> <span class=\"n\">h1V</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">h3V</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">dif_neg</span> <span class=\"n\">hU</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h2V</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h2V</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">dif_pos</span> <span class=\"n\">h3V</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h2V</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h2K</span><span class=\"o\">,</span> <span class=\"n\">mem_Union</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">exists</span><span class=\"o\">,</span> <span class=\"n\">mem_union_eq</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"bp\">⟨</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">h3V</span><span class=\"o\">,</span> <span class=\"n\">h2V</span><span class=\"bp\">⟩</span> <span class=\"o\">}}}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200633665,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1591935539
    },
    {
        "content": "<p>Thinking about it again, (7) might be the most convenient way after all.</p>",
        "id": 200634062,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1591936100
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> I would guess (1) or (7).</p>",
        "id": 200634553,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591936842
    },
    {
        "content": "<p>There is already a small API to do induction in the setting of (1). I think we should just create <code>fintype.induction</code> and flesh it out a bit more.</p>",
        "id": 200634566,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591936886
    },
    {
        "content": "<p>I was about to say the same.</p>",
        "id": 200634569,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591936902
    },
    {
        "content": "<p>There are also already some theorems like this about compact sets IIRC</p>",
        "id": 200634571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591936910
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/compact.elim_finite_subcover/src\">src#compact.elim_finite_subcover</a></p>",
        "id": 200634639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591937012
    },
    {
        "content": "<p>I tried (7) now, and it's working a lot nicer than I thought. Setting <code>K i</code> empty outside <code>t</code> is not as much hassle as I thought.</p>\n<p>It would be nice to have induction for fintypes, but I'm not sure how to get that in a nice way (without univalence)</p>\n<p>Yes, I saw these properties Mario. I don't think there is anything similar to this statement though.</p>",
        "id": 200635041,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1591937739
    },
    {
        "content": "<p>true, your particular statement about T2 spaces is not proven</p>",
        "id": 200635106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591937822
    },
    {
        "content": "<p>It is worth noting that the linked statement uses <code>finset (set A)</code> with the assumption that all sets are open. Do we have <code>finset (opens A)</code> versions of these statements? Or should we stick to using <code>finset (set A)</code>?</p>",
        "id": 200635174,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591937905
    },
    {
        "content": "<p>I don't think there is a are versions of <code>compact.elim_finite_subcover</code> that use <code>opens</code>. <br>\nI could change my version to also the <code>set _</code> instead of <code>opens _</code>/<code>compacts _</code>. The glue between the two different versions is very minimal though.</p>",
        "id": 200635399,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1591938310
    },
    {
        "content": "<p>By the way, I think you should formalize this version of the statement instead: <a href=\"https://ncatlab.org/nlab/show/shrinking+lemma#ShrinkinglemmaForFiniteCovers\">https://ncatlab.org/nlab/show/shrinking+lemma#ShrinkinglemmaForFiniteCovers</a></p>",
        "id": 200658692,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591961209
    },
    {
        "content": "<p>Oh, I even wrote it down in <a href=\"https://github.com/leanprover-community/mathlib/blob/master/roadmap/topology/shrinking_lemma.lean\">https://github.com/leanprover-community/mathlib/blob/master/roadmap/topology/shrinking_lemma.lean</a></p>",
        "id": 200658710,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591961240
    },
    {
        "content": "<p>Roadmaps should be more widely used and more widely known.</p>",
        "id": 200658741,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591961278
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I think beginning to formalise a roadmap for sphere eversion would be very cool. I have been telling PhD students at Imperial \"oh, go formalise DVRs\". I think that a better approach would have been to start on a roadmap.</p>",
        "id": 200658866,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591961372
    },
    {
        "content": "<p>Scott started doing that for one lemma, and I certainly intend to do it much more. But I'd like to empty some of my PR backlog first before it gets too outdated.</p>",
        "id": 200661219,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591963351
    },
    {
        "content": "<p>Oops I didn't look closely enough at what I wrote earlier, and it is the general locally finite version. I really had in mind just generalizing the hypotheses of Floris's statement to a normal space with appropriate adjustments to the conclusion. But maybe what I said is true anyways.</p>",
        "id": 200662310,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591964091
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> that lemma also would be nice to have, but it's not what I need right now, since I don't want to assume more separatedness than T2.</p>",
        "id": 200721462,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1591994052
    },
    {
        "content": "<p>Compact Hausdorff spaces are also normal, but now maybe this is getting a bit awkward for your use case...</p>",
        "id": 200722096,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591994440
    }
]