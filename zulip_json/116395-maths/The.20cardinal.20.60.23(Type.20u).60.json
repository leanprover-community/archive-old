[
    {
        "content": "<p>I wanted to do a cardinality proof of the impossibility of <code>Type : Type</code> the other day, and so I would use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cardinal.univ\">docs#cardinal.univ</a> ; but this is defined to be <code>#cardinal.{u}</code> or <code>#ordinal.{u}</code>, and there are no theorems relating this to <code>#(Type u)</code>. But then I realized: I'm not even sure it is true that these cardinals are the same. What can we say about <code>#(Type u)</code> in lean's type theory? I think that <code>univ.{u} &lt;= #(Type u)</code>, since every cardinal has a type representing it and distinct cardinals yield distinct types; but beyond this I think there are very few restrictions. I'm not even sure that <code>#(Type u)</code> is monotonic in <code>u</code>, or upper bounded by <code>#cardinal.{u+37}</code>. I wonder if we can find some analogue of <a href=\"https://en.wikipedia.org/wiki/Easton%27s_theorem\">Easton's theorem</a> here.</p>",
        "id": 273258468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645810034
    },
    {
        "content": "<p>We can prove <code>#Prop = 2</code> though, constructivists be damned</p>",
        "id": 273258700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645810143
    },
    {
        "content": "<p>I think they are strictly monotone. Given <code>A : Type u</code> I can embed <code>A</code> into <code>ordinal.{u}</code> and I can embed <code>ordinal.{u}</code> into <code>Type u</code>. Since <code>Type u : Type (u+1)</code> I get <code>Type u ↪ Type (u+1)</code>.</p>",
        "id": 273261571,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1645811477
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.cardinal_ordinal</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">open</span> <span class=\"n\">cardinal</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">cardinal</span>\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">trans</span><span class=\"o\">]</span> <span class=\"n\">function.embedding.trans</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">refl</span><span class=\"o\">]</span> <span class=\"n\">function.embedding.refl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo1</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">↪</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">A</span> <span class=\"bp\">↪</span> <span class=\"n\">cardinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">classical.choice</span> <span class=\"n\">nonempty_embedding_to_cardinal</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">↪</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:</span>\n    <span class=\"o\">⟨</span><span class=\"n\">quotient.out</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">c₁</span> <span class=\"n\">c₂</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">mk_out</span> <span class=\"n\">c₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.trans</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">mk</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">$</span> <span class=\"n\">mk_out</span> <span class=\"n\">c₂</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo2</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">↪</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">foo1</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 273263629,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1645812353
    },
    {
        "content": "<p>strict monotonicity is basically <code>foo1 (set (Type u))</code>.</p>",
        "id": 273263766,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1645812416
    },
    {
        "content": "<p>(those should be <code>def</code>s)</p>",
        "id": 273263780,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645812426
    },
    {
        "content": "<p>I guess :-)</p>",
        "id": 273263818,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1645812448
    },
    {
        "content": "<p>There is this lemma: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/embedding_to_cardinal\">docs#embedding_to_cardinal</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">embedding_to_cardinal</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>   <span class=\"c1\">-- embedding_to_cardinal : Type u ↪ cardinal.{u+1}</span>\n</code></pre></div>\n<p>I think we should also have <code>cardinal.{u+1} ↪ Type u</code> somewhere.</p>",
        "id": 273263865,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645812472
    },
    {
        "content": "<p>I don't think <code>cardinal.{u+1} ↪ Type u</code> is provable...</p>",
        "id": 273264821,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1645812888
    },
    {
        "content": "<p>Indeed, this only gets me <code>#Type u ≤ #cardinal.{u+1} ≤ #Type (u+1)</code>.</p>",
        "id": 273264830,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645812895
    },
    {
        "content": "<p>Yes, that sounds right. I <em>expect</em> we cannot say much more</p>",
        "id": 273264925,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1645812942
    },
    {
        "content": "<p>seems the proof of <a href=\"https://leanprover-community.github.io/mathlib_docs/set_theory/ordinal.html#nonempty_embedding_to_cardinal\">https://leanprover-community.github.io/mathlib_docs/set_theory/ordinal.html#nonempty_embedding_to_cardinal</a> is by showing the reverse embedding couldn't exist</p>",
        "id": 273264953,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1645812959
    },
    {
        "content": "<p>Interesting observation, this gives us <code>#Type u &lt; #cardinal.{u+1} ≤ #Type (u+1)</code>.</p>",
        "id": 273266364,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645813650
    },
    {
        "content": "<p>And impossibility of <code>Type : Type</code> then follows, right?</p>",
        "id": 273267633,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645814272
    },
    {
        "content": "<p>Yes, if <code>Type u : Type u</code> then <code>#Type u &lt; #cardinal.{u} ≤ #Type u</code>.</p>",
        "id": 273268478,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1645814680
    },
    {
        "content": "<p>It seems impossible to express this in type theory though; <code>Type u : Type u</code> just won't typecheck. You could show given <code>A : Type u</code> we have <code>(Type u ↪ A) -&gt; false</code>  and trivially construct <code>Type u ↪Type u</code>, but you could by no means apply the former to <code>Type u</code>.</p>",
        "id": 273270797,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1645815747
    },
    {
        "content": "<p>There's this fairly direct proof of <code>Type u ne Type (u+1)</code> which has no ordinals or cardinals involved.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ulift.</span><span class=\"o\">{(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"n\">function.surjective</span> <span class=\"n\">f</span> <span class=\"o\">}</span> <span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">ulift.up</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">T.down</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">T</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">⟩⟩</span> <span class=\"o\">},</span>\n  <span class=\"k\">let</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sigma</span> <span class=\"n\">f.1</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">f.2</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">U</span> <span class=\"n\">hU</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">T</span> <span class=\"bp\">↪</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n    <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">cast</span> <span class=\"n\">hU.symm</span> <span class=\"n\">s</span><span class=\"o\">⟩,</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">function.cantor_injective</span> <span class=\"n\">g.1</span> <span class=\"n\">g.2</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 273274951,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1645817743
    },
    {
        "content": "<p>You could probably extract a proof from the above that if <code>A : Type u</code> then <code>A</code> does not surject into <code>Type u</code> which is an okay way to state it.</p>",
        "id": 273277442,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1645819147
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">sigma</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hf</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">U</span> <span class=\"n\">hU</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">T</span> <span class=\"bp\">↪</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n    <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">cast</span> <span class=\"n\">hU.symm</span> <span class=\"n\">s</span><span class=\"o\">⟩,</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">function.cantor_injective</span> <span class=\"n\">g.1</span> <span class=\"n\">g.2</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 273277875,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1645819324
    },
    {
        "content": "<p>Ooh, I like that last proof, it should go next to <code>cantor_injective</code></p>",
        "id": 273308679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645840119
    },
    {
        "content": "<p>Linked: <a href=\"https://proofassistants.stackexchange.com/questions/1605\">Cardinality of Type in a given universe\n</a></p>",
        "id": 290665857,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1658659671
    }
]