[
    {
        "content": "<p>We have two versions of Lp space in mathlib already, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi_Lp\">docs#pi_Lp</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.Lp\">docs#measure_theory.Lp</a>.  I propose to add a third version!  This would be sort of like the standard <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">ℓ</mi><mi>p</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\ell^p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord\">ℓ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span> but more general.  I'd like people to sanity-check that this is really necessary, and I'd like to decide on a naming scheme.  <span class=\"user-mention\" data-user-id=\"350992\">@Rémy Degenne</span> <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> </p>\n<p>Currently, <code>pi_Lp</code> puts the norm <code>(∑ a, ∥f a∥ ^ p) ^ (1 / p)</code> on <code>Π a : α, E a</code> for <code>α</code> finite, and <code>measure_theory.Lp</code> puts the norm <code>(∫ a, ∥f a∥ ^ p ∂μ) ^ (1 / p)</code> on the subgroup of <code>α →ₘ[μ] E</code> for which that norm is finite, for <code>α</code> a measure space.  My proposed new construction <code>ℓp</code> (see <a href=\"https://github.com/leanprover-community/mathlib/tree/hilbert-sum\">branch#hilbert-sum</a>, still with some sorries) would put the norm <code>(∑' a, ∥f a∥ ^ p) ^ (1 / p)</code> on the subgroup of <code>Π a : α, E a</code> for which that norm is finite.</p>\n<p>This is more general than <code>measure_theory.Lp</code> in that it allows the target space <code>E a</code> to vary with <code>a</code>.  It's less general than  <code>measure_theory.Lp</code> in that it permits only the counting measure on the domain <code>α</code>, not an arbitrary measure.  I don't think the constructions can be combined, because there's no notion of measurability for the space <code>Π a : α, E a</code>.</p>\n<p>The construction is more general than <code>pi_Lp</code> because <code>α</code> is permitted to be allowed to be infinite, but since the <code>pi_Lp</code> construction is more elementary I think that should continue to exist, too.</p>\n<p>So, do others agree to add this new version of Lp?  (My intended application is for the spectral theorem: I want to express a Hilbert space as the <code>ℓ2</code> (in this sense) of the eigenspaces of a compact operator on that space).  How should we name it, if so?</p>",
        "id": 265243122,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1639704119
    },
    {
        "content": "<p>For however much my opinion counts, I agree we should have the third version (I'm all for keeping the finite one unless it would mean lots of code duplication). For naming, there's <code>ell_p</code> although I really don't love that.</p>\n<p>One thing to note, it's more work (read: a long way off), but you can get the spectral theorem from the Borel functional calculus and for compact operators you can show the measure is purely atomic, which corresponds to a basis for diagonalization. It may make sense to just have both constructions eventually.</p>",
        "id": 265247643,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1639709058
    },
    {
        "content": "<p>We clearly need <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">ℓ</mi><mi>p</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\ell^p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord\">ℓ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span> so only the naming question really exists. I think Jireh's suggestion could be use, but <code>l_p</code> seems to be available as well.</p>",
        "id": 265262465,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639726946
    },
    {
        "content": "<p>One more reason to preserve <code>pi_Lp</code>: it has the same <code>uniform_space</code> structure as the usual pi type. This won't be true for the new space.</p>",
        "id": 265266293,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639729796
    },
    {
        "content": "<p>PR'd as <a href=\"https://github.com/leanprover-community/mathlib/pull/11015\">#11015</a>, leaving the naming question unresolved for now.</p>",
        "id": 265949128,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640289940
    },
    {
        "content": "<p>So the gap <a href=\"https://github.com/leanprover-community/mathlib/pull/11015\">#11015</a> fills is that it allows us to adorn an infinite dependent product with an L^p structure, since we can already do this for finite dependent products using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi_LP\">docs#pi_LP</a> and infinite non-dependent products using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.Lp\">docs#measure_theory.Lp</a> (with the counting measure). I agree this is worth having but I'd be curious to see an example.</p>",
        "id": 266382792,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1640815645
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> Given a self-adjoint compact operator <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> on a separable Hilbert space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span>, there is a unitary isomorphism from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> to the <code>lp 2</code> of the eigenspaces of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> ....</p>",
        "id": 266384055,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640816681
    },
    {
        "content": "<p>Oh right of course. Nice!</p>",
        "id": 266384089,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1640816716
    },
    {
        "content": "<p>Aaaaaand what will we do with the non-separable case ? <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 266384102,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1640816730
    },
    {
        "content": "<p>It's nearly the same, it's the direct sum of the kernel with the <code>lp 2</code> of the nonzero eigenspaces.</p>",
        "id": 266384169,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640816766
    },
    {
        "content": "<p>also ultraproducts</p>",
        "id": 266384175,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1640816774
    },
    {
        "content": "<p>That's not really a serious question! I'm busy trying to golf one of your proofs :-)</p>",
        "id": 266384182,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1640816790
    },
    {
        "content": "<p>Actually, maybe I don't need the case distinction there!</p>",
        "id": 266384199,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640816807
    }
]