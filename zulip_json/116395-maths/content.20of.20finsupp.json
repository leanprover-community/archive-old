[
    {
        "content": "<p>Do we have anyway of talking about the gcd of a <code>finsupp X int</code>?</p>",
        "id": 236493987,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619611284
    },
    {
        "content": "<p>a generator of the ideal generated by the image, you mean?</p>",
        "id": 236494464,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619611472
    },
    {
        "content": "<p>I don't know if literally that is the easiest way of dealing with this in Lean |-;</p>",
        "id": 236494542,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619611517
    },
    {
        "content": "<p>That's the same as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/free_comm_group\">docs#free_comm_group</a>, right?</p>",
        "id": 236498898,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619613482
    },
    {
        "content": "<p>Oh, that doesn't exist</p>",
        "id": 236498955,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619613498
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/free_abelian_group\">docs#free_abelian_group</a></p>",
        "id": 236499158,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619613602
    },
    {
        "content": "<p>Do you mean the gcd under <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.has_mul\">docs#finsupp.has_mul</a>?</p>",
        "id": 236499651,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619613807
    },
    {
        "content": "<p>No, a <code>finsupp X int</code> is basically just a list of integers (indexed by some finset in <code>X</code>) and I want the gcd of those integers.</p>",
        "id": 236499873,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619613910
    },
    {
        "content": "<p>So the gcd will be an <code>int</code>, not a <code>finsupp X int</code></p>",
        "id": 236499905,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619613922
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib_docs/data/finset/gcd.html\">https://leanprover-community.github.io/mathlib_docs/data/finset/gcd.html</a> help?</p>",
        "id": 236500439,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1619614118
    },
    {
        "content": "<p>Can gcd be spelt with <code>infi</code> somehow? If so, that sounds like <code>\\Inf (i : f.support), f i</code></p>",
        "id": 236500493,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619614142
    },
    {
        "content": "<p>So <code>(f.support.image f).gcd</code>?</p>",
        "id": 236500685,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619614210
    },
    {
        "content": "<p>Hmm, I guess that would work!</p>",
        "id": 236500828,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619614267
    },
    {
        "content": "<p>Hmm <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> now I need: <code>⊢ gcd_monoid ℤ</code></p>",
        "id": 236501208,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619614419
    },
    {
        "content": "<p>That should be in <code>src/ring_theory/int/basic.lean</code></p>",
        "id": 236501316,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1619614458
    },
    {
        "content": "<p>Great: this works: <code>let d : ℤ := (N.support.gcd N),</code></p>",
        "id": 236501585,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619614570
    }
]