[
    {
        "content": "<p>Just noting that I have mostly brought <a href=\"https://github.com/leanprover-community/mathlib/tree/sset\">branch#sset</a> up to date with mathlib master (a while back we PR'd some content across).</p>",
        "id": 230205547,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615688320
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span></p>",
        "id": 230205551,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615688327
    },
    {
        "content": "<p>It is not quite done: <code>adjunction.lean</code> runs aground on the shoals of universe polymorphism, and I'm out of enthusiasm for now.</p>",
        "id": 230205564,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615688359
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Thanks a lot for doing this!</p>",
        "id": 230299327,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615788602
    },
    {
        "content": "<p>Do you have any idea what might be the best way to work with augmented simplicial objects?</p>",
        "id": 230299371,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615788629
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/Simplicial.20sets/near/230205564\">said</a>:</p>\n<blockquote>\n<p>It is not quite done: <code>adjunction.lean</code> runs aground on the shoals of universe polymorphism, and I'm out of enthusiasm for now.</p>\n</blockquote>\n<p>Which file is this? I think I might have fun playing with the polymorphism here</p>",
        "id": 230373063,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1615824606
    },
    {
        "content": "<p>I just made the simplicial circle: <a href=\"https://github.com/leanprover-community/mathlib/blob/0347f5d2e29b37a7f9cc9d2702bc64f5f2ae7443/src/algebraic_topology/simplicial_set.lean#L98\">https://github.com/leanprover-community/mathlib/blob/0347f5d2e29b37a7f9cc9d2702bc64f5f2ae7443/src/algebraic_topology/simplicial_set.lean#L98</a></p>",
        "id": 230412210,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615839756
    },
    {
        "content": "<p>If we had an analogue of <code>parallel_walking_pair</code> with <code>n</code> morphisms instead of just <code>2</code>, then one can easily construct the simplicial sphere as well :)</p>",
        "id": 230413219,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615840173
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/116395-maths/topic/Simplicial.20sets/near/230373063\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/Simplicial.20sets/near/230205564\">said</a>:</p>\n<blockquote>\n<p>It is not quite done: <code>adjunction.lean</code> runs aground on the shoals of universe polymorphism, and I'm out of enthusiasm for now.</p>\n</blockquote>\n<p>Which file is this? I think I might have fun playing with the polymorphism here</p>\n</blockquote>\n<p>This is on <a href=\"https://github.com/leanprover-community/mathlib/tree/sset\">branch#sset</a>, in <code>topology.simplicial.adjunction</code>. (Note that in that branch the stuff that has already been PR'd to <code>master</code> is in the <code>algebraic_topology</code> folder. It would be fine to move the stuff in the branch over.</p>",
        "id": 230418476,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615842423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/Simplicial.20sets/near/230413219\">said</a>:</p>\n<blockquote>\n<p>If we had an analogue of <code>parallel_walking_pair</code> with <code>n</code> morphisms instead of just <code>2</code>, then one can easily construct the simplicial sphere as well :)</p>\n</blockquote>\n<p>In <a href=\"https://github.com/leanprover-community/mathlib/issues/4885\">#4885</a> I made this analogue and called it <code>walking_parallel_chunk</code>, I didn't think it'd be useful for anything though! Feel free to just copy that bit of code to save you a bit of time :)</p>",
        "id": 230554756,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1615915189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> Does that PR have a proof of the adjoint functor theorems?! Why is it not in mathlib! That sounds great!</p>",
        "id": 230555141,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615915311
    },
    {
        "content": "<p>It's a proof of the general adjoint functor theorem - I think the special aft should be doable now that we have subobjects though</p>",
        "id": 230555311,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1615915351
    },
    {
        "content": "<p>It's not in mathlib because I'm lazy and I didn't need it :P</p>",
        "id": 230555391,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1615915379
    },
    {
        "content": "<p>I didn't know there was a \"general\" and a \"special\" adjoint functor theorem</p>",
        "id": 230555526,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615915427
    },
    {
        "content": "<p>Perhaps those names aren't standard - I mean these names: <a href=\"https://ncatlab.org/nlab/show/adjoint+functor+theorem#statement\">https://ncatlab.org/nlab/show/adjoint+functor+theorem#statement</a></p>",
        "id": 230555840,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1615915533
    },
    {
        "content": "<p>Oh, I guess the \"general\" version is also called \"Freyd's ...\"</p>",
        "id": 230555845,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615915535
    },
    {
        "content": "<p>In my mind, the general version has extra conditions on the functor, and the special version has extra conditions on the categories</p>",
        "id": 230556119,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1615915612
    },
    {
        "content": "<p>Oh, that's a good way of remembering!</p>",
        "id": 230556194,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615915637
    }
]