[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> have you by any chance done or thought about formalizing bicategories?</p>",
        "id": 135502092,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539122417
    },
    {
        "content": "<p>I know you have monoidal categories somewhere which is in approximately the same direction</p>",
        "id": 135502151,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539122473
    },
    {
        "content": "<p>Yes, I'd like to, but have done nothing.</p>",
        "id": 135502652,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539123042
    },
    {
        "content": "<p>I've been meaning to rewrite the work on monoidal categories for a while now, as it's an excellent playground for my student Keeley Hoek's \"rewrite_search\" algorithms.</p>",
        "id": 135502667,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539123069
    },
    {
        "content": "<p>I think the lesson I eventually learnt there is that defining a monoidal category as a category <code>C</code> equipped with a functor <code>C x C to C</code> is actually a bad idea, mostly for syntactic reasons! I think it will work much better if you have have operations tensor_obj and tensor_hom, and laws for them, etc, then have a theorem that packages these as a functor when needed.</p>",
        "id": 135502740,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539123163
    },
    {
        "content": "<p>The basic problem is just that if you think of tensor as a functor out of C x C, then its argument is a pair, and you'd really really prefer the curried version of these for parsing, pattern matching, etc. Dealing with the pairs causes lots of pain.</p>",
        "id": 135502772,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539123233
    },
    {
        "content": "<p>Hmm, makes sense...</p>",
        "id": 135502818,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539123251
    },
    {
        "content": "<p>It is a bit sad though that this is a significant consideration.</p>",
        "id": 135502824,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539123284
    },
    {
        "content": "<p><a href=\"https://ncatlab.org/nlab/show/bicategory#detailedDefn\" target=\"_blank\" title=\"https://ncatlab.org/nlab/show/bicategory#detailedDefn\">https://ncatlab.org/nlab/show/bicategory#detailedDefn</a></p>",
        "id": 135502843,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539123308
    },
    {
        "content": "<blockquote>\n<p>The point is not that one would want to write out the definition in such elementary terms (although apparently I just did anyway) but rather that one can.</p>\n</blockquote>",
        "id": 135502904,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539123390
    },
    {
        "content": "<p>In a different direction, I would love to do (have someone do?) quasi-strict categories (according to Vicary), as a foundation for hooking up Lean and Globular.</p>",
        "id": 135502923,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539123444
    },
    {
        "content": "<p>Right, I think we talked about this briefly in Orsay</p>",
        "id": 135503213,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539123833
    },
    {
        "content": "<p>I suppose a possible alternative to <code>C x C -&gt; C</code> is a curried functor <code>C =&gt; (C =&gt; C)</code>, though I don't have a clear sense of the issues here yet</p>",
        "id": 135507318,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539128453
    },
    {
        "content": "<p>I suspect, although haven't actually checked, that this is just as bad. Because <code>F X</code> is handled via a coercion, rather than merely notation, I suspect we could never get <code>T X Y</code> to work for a curried functor.</p>",
        "id": 135508059,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539129369
    },
    {
        "content": "<p>I think the curried functor should work fine</p>",
        "id": 135510023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539132049
    },
    {
        "content": "<p>Why not use the dependently-typed definition of bicategory a la an enriched category?</p>",
        "id": 135520001,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1539149303
    },
    {
        "content": "<p>As in, something like <code>obj1:Obj obj2:Obj |- Hom_obj1_obj2 : Cat</code> and then apply whatever solution makes the monoidal case work, modulo adapting to multiple objects?</p>",
        "id": 135520083,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1539149478
    },
    {
        "content": "<p>I think the issue is that we don't have a nice solution for monoidal categories, that doesn't require a structure with ~30 fields</p>",
        "id": 135530891,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539165585
    }
]