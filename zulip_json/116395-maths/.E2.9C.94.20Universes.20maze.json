[
    {
        "content": "<p>I started to write a reasonable API for the rank of free modules, and I quickly lost myself with universes. Is the following true? It seems true to me...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.free_module.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.dimension</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">cardinal</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">strong_rank_condition</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.universes</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rank_finsupp</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">module.rank</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">#</span> <span class=\"n\">ι</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">basis.of_repr</span> <span class=\"o\">(</span><span class=\"n\">linear_equiv.refl</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">mk_eq_dim.symm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">cardinal.lift_id'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">cardinal.lift_mk</span><span class=\"o\">,</span> <span class=\"n\">cardinal.lift_mk</span><span class=\"o\">],</span>\n  <span class=\"c1\">-- The goal is # (ulift.{u v} ι) = # (ulift.{(max v u) v} ι)</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 257329705,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634113957
    },
    {
        "content": "<p>So I guess the real question is how to prove (if true) <code>(ulift.{u v} ι) = # (ulift.{(max v u) v} ι</code>, where <code>ι : Type v</code>.</p>",
        "id": 257329814,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634114029
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/cardinal.eq\">docs#cardinal.eq</a> + <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.ulift\">docs#equiv.ulift</a>?</p>",
        "id": 257331031,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1634114658
    },
    {
        "content": "<p>Let me try.</p>",
        "id": 257331272,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634114788
    },
    {
        "content": "<p><del>Un</del>tested:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.free_module.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.dimension</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">cardinal</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">strong_rank_condition</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.universes</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rank_finsupp</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">module.rank</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">#</span> <span class=\"n\">ι</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">basis.of_repr</span> <span class=\"o\">(</span><span class=\"n\">linear_equiv.refl</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">mk_eq_dim.symm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">cardinal.lift_id'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">cardinal.lift_mk</span><span class=\"o\">,</span> <span class=\"n\">cardinal.lift_mk</span><span class=\"o\">],</span>\n  <span class=\"c1\">-- The goal is # (ulift.{u v} ι) = # (ulift.{(max v u) v} ι)</span>\n  <span class=\"n\">exact</span> <span class=\"n\">cardinal.eq.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">equiv.ulift.trans</span> <span class=\"n\">equiv.ulift.symm</span><span class=\"o\">⟩</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 257331308,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1634114805
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 257331516,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634114919
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> has marked this topic as resolved.</p>",
        "id": 257331616,
        "sender_full_name": "Notification Bot",
        "timestamp": 1634114990
    }
]