[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132603\">@Calle Sönne</span> and <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>, when writing <a href=\"https://leanprover-community.github.io/mathlib_docs/topology/discrete_quotient.html\">discrete_quotient</a>, did you make a conscious choice to ignore <a href=\"https://leanprover-community.github.io/mathlib_docs/data/setoid/partition.html\">setoid.partition</a>? If no, do you think it's too late to reconcile those files?</p>",
        "id": 237379287,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620154307
    },
    {
        "content": "<p>TBH I didn't know that setoid/partition.lean existed. What in particular would you like to see reconciled <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> ?</p>",
        "id": 237380026,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620154638
    },
    {
        "content": "<p>Half of discrete_quotient.lean is proving trivial stuff on partitions, equivalence relations and quotient that have nothing to do with topology.</p>",
        "id": 237380277,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620154760
    },
    {
        "content": "<p>The whole point of the <code>discrete_quotient</code> type is to endow the quotient with the discrete topology and still retain continuity with respect to the quotient map. There are a couple of lemmas about the fibers of <code>discrete_quotient.proj</code> that can be generalized (or exist already for general quotients), but I don't see how half of this file can be done with arbitrary quotients.  (I actually asked a few days ago on zulip whether we had such lemmas about the equivalence classes associated to a setoid, but no one responded.)</p>",
        "id": 237382848,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620155772
    },
    {
        "content": "<p>I also didn't know about that file until I started to work on continuing the discrete quotient file.</p>",
        "id": 237383050,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620155869
    },
    {
        "content": "<p>It is not imported by any other file in mathlib.</p>",
        "id": 237383286,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620155981
    },
    {
        "content": "<p>A reasonable generalization is to define the type of all quotients of a type, then <code>discrete_quotient</code> can be a subtype, but I don't know whether such a thing would be actually useful (over just using the <code>quotient</code> API )</p>",
        "id": 237383405,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620156018
    },
    {
        "content": "<p>Thinking in terms of quotients is of course almost always better. But this story of profinite sets proves this is not always the case.</p>",
        "id": 237384141,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620156361
    },
    {
        "content": "<p>Maybe also worth mentioning that the code I originally had in LTE (and which was a modification of Calle's code) was in terms of partitions whose terms are clopen, and it turned out to be very cumbersome to work with in practice. Some lemmas which are proved essentially by <code>refl</code> with quotients required several lines when using partitions.</p>",
        "id": 237384624,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620156602
    },
    {
        "content": "<p>Perhaps a reasonable compromise is to construct a term of <code>discrete_quotient X</code> from a clopen partition?</p>",
        "id": 237384850,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620156705
    },
    {
        "content": "<p>Sure we need at least that.</p>",
        "id": 237385018,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620156784
    },
    {
        "content": "<p>But using <code>setoid</code> and <code>setoid.classes</code> in the definition of <code>discrete_quotient</code>  would be nice.</p>",
        "id": 237385841,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620157096
    },
    {
        "content": "<p>Especially since you ordered variables in a way that the discrete quotient of <code>X</code> associated to a locally constant <code>f : X → Y</code> is associated to the relation <code>x ∼ x'</code> if <code>f x' = f x</code> instead of <code>f x = f x'</code>.</p>",
        "id": 237385975,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620157158
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/5a91d05e3b457aac6f656f8b02acb893f96341fa/src/topology/discrete_quotient.lean#L55\">This line</a> should really be <code>(clopen : ∀ x, is_clopen { y | rel y x})</code></p>",
        "id": 237386128,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620157224
    },
    {
        "content": "<p>Of course this is equivalent since the relation is symmetric, but not defeq.</p>",
        "id": 237386192,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620157257
    },
    {
        "content": "<p>Yes, I agree. I wish I had known about <code>setoid.classes</code> before... Anyway, I can refactor once <a href=\"https://github.com/leanprover-community/mathlib/issues/7454\">#7454</a> is merged</p>",
        "id": 237386315,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620157318
    },
    {
        "content": "<p>Ah, I should handle that PR then.</p>",
        "id": 237387447,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620157782
    },
    {
        "content": "<p>I think the name <code>le_rel</code> is a bit obscure</p>",
        "id": 237387466,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620157793
    },
    {
        "content": "<p><code>le_rel</code> is supposed to be <code>le_relative_to</code></p>",
        "id": 237387763,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620157921
    },
    {
        "content": "<p>But the latter is mouthful</p>",
        "id": 237387840,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620157940
    },
    {
        "content": "<p>I see. What is confusing is there are <code>rel</code> that mean relation everywhere in the neighborhood</p>",
        "id": 237388014,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620158032
    },
    {
        "content": "<p>Maybe <code>le_comap</code> would be better?</p>",
        "id": 237388302,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620158157
    },
    {
        "content": "<p>Or <code>desc</code> since this condition says precisely that a continuous map descends to the quotients</p>",
        "id": 237388846,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620158378
    },
    {
        "content": "<p>You mean lifts, right? :-)</p>",
        "id": 237388996,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1620158421
    },
    {
        "content": "<p>Oh, but it's already waiting for bors</p>",
        "id": 237390781,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620159201
    },
    {
        "content": "<p>Is it too late to cancel bors? It made a commit already it seems</p>",
        "id": 237391059,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620159348
    },
    {
        "content": "<p>Actually the build was cancelled</p>",
        "id": 237391203,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620159408
    },
    {
        "content": "<p>so you could change that name</p>",
        "id": 237391215,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620159415
    },
    {
        "content": "<p>All this quotient and partition stuff is a deeper rabbit hole than what I expected...</p>",
        "id": 237391283,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620159448
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7454\">#7454</a> is still in \"Waiting to run\" status <a href=\"https://app.bors.tech/repositories/24316\">here</a>, so it should be safe to make changes without disrupting anything. (In fact, the current \"Running\" batch is likely to time out anyways, so canceling even that batch will be fairly harmless.)</p>",
        "id": 237391315,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1620159464
    },
    {
        "content": "<p>Renamed.</p>",
        "id": 237391949,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620159731
    }
]