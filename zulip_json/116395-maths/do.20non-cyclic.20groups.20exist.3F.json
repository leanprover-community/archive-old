[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">order_of_element</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">decidable_eq</span><span class=\"o\">]</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">PP</span> <span class=\"o\">:</span> <span class=\"n\">G</span>\n<span class=\"bp\">|</span> <span class=\"n\">PM</span> <span class=\"o\">:</span> <span class=\"n\">G</span>\n<span class=\"bp\">|</span> <span class=\"n\">MP</span> <span class=\"o\">:</span> <span class=\"n\">G</span>\n<span class=\"bp\">|</span> <span class=\"n\">MM</span> <span class=\"o\">:</span> <span class=\"n\">G</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">G</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">elems</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">PP</span><span class=\"o\">,</span><span class=\"n\">PM</span><span class=\"o\">,</span><span class=\"n\">MP</span><span class=\"o\">,</span><span class=\"n\">MM</span><span class=\"o\">},</span>\n  <span class=\"n\">complete</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">g</span><span class=\"bp\">;</span><span class=\"n\">simp</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span>\n<span class=\"bp\">|</span> <span class=\"n\">PP</span> <span class=\"n\">PP</span> <span class=\"o\">:=</span> <span class=\"n\">PP</span>\n<span class=\"bp\">|</span> <span class=\"n\">PP</span> <span class=\"n\">PM</span> <span class=\"o\">:=</span> <span class=\"n\">PM</span>\n<span class=\"bp\">|</span> <span class=\"n\">PP</span> <span class=\"n\">MP</span> <span class=\"o\">:=</span> <span class=\"n\">MP</span>\n<span class=\"bp\">|</span> <span class=\"n\">PP</span> <span class=\"n\">MM</span> <span class=\"o\">:=</span> <span class=\"n\">MM</span>\n<span class=\"bp\">|</span> <span class=\"n\">PM</span> <span class=\"n\">PP</span> <span class=\"o\">:=</span> <span class=\"n\">PM</span>\n<span class=\"bp\">|</span> <span class=\"n\">PM</span> <span class=\"n\">PM</span> <span class=\"o\">:=</span> <span class=\"n\">PP</span>\n<span class=\"bp\">|</span> <span class=\"n\">PM</span> <span class=\"n\">MP</span> <span class=\"o\">:=</span> <span class=\"n\">MM</span>\n<span class=\"bp\">|</span> <span class=\"n\">PM</span> <span class=\"n\">MM</span> <span class=\"o\">:=</span> <span class=\"n\">MP</span>\n<span class=\"bp\">|</span> <span class=\"n\">MP</span> <span class=\"n\">PP</span> <span class=\"o\">:=</span> <span class=\"n\">MP</span>\n<span class=\"bp\">|</span> <span class=\"n\">MP</span> <span class=\"n\">PM</span> <span class=\"o\">:=</span> <span class=\"n\">MM</span>\n<span class=\"bp\">|</span> <span class=\"n\">MP</span> <span class=\"n\">MP</span> <span class=\"o\">:=</span> <span class=\"n\">PP</span>\n<span class=\"bp\">|</span> <span class=\"n\">MP</span> <span class=\"n\">MM</span> <span class=\"o\">:=</span> <span class=\"n\">PM</span>\n<span class=\"bp\">|</span> <span class=\"n\">MM</span> <span class=\"n\">PP</span> <span class=\"o\">:=</span> <span class=\"n\">MM</span>\n<span class=\"bp\">|</span> <span class=\"n\">MM</span> <span class=\"n\">PM</span> <span class=\"o\">:=</span> <span class=\"n\">MP</span>\n<span class=\"bp\">|</span> <span class=\"n\">MM</span> <span class=\"n\">MP</span> <span class=\"o\">:=</span> <span class=\"n\">PM</span>\n<span class=\"bp\">|</span> <span class=\"n\">MM</span> <span class=\"n\">MM</span> <span class=\"o\">:=</span> <span class=\"n\">PP</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">mul</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">PP</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n<span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">is_cyclic</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">G</span>\n</pre></div>\n\n\n<p>This is my attempt to prove that non-cyclic groups exist in Lean. I had perhaps naively thought that I was going to get the whole way there with <code>dec_trivial</code>, but I've just realised that my claim that a group is not cyclic is not immediately decidable. For each element <code>g</code> I need to come up with an element <code>h</code> such that <code>h</code> is not in the cyclic group generated by <code>g</code>, which involves showing that for all integers <code>n</code>, <code>h</code> isn't <code>g^n</code>. This suddenly looks a bit more painful than I wanted it to be. Any ideas on how to proceed?</p>\n<p>This is motivated by a second year problem sheet question: \"True or false? If <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">G</span></span></span></span> is abelian then <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">G</span></span></span></span> is cyclic\". [<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">G</span></span></span></span> a group]</p>",
        "id": 146811479,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541440046
    },
    {
        "content": "<p>Why not use C_2^2?</p>",
        "id": 146811568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541440182
    },
    {
        "content": "<p>I did...</p>",
        "id": 146811605,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541440203
    },
    {
        "content": "<p>oh right, and then there (should) be some lemmas about orders of elements in product</p>",
        "id": 146811625,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541440208
    },
    {
        "content": "<p>The issue is that proving something isn't cyclic involves checking that infinitely many calculations don't work out</p>",
        "id": 146811629,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541440224
    },
    {
        "content": "<p>no, I mean <code>zmod 2 x zmod 2</code></p>",
        "id": 146811631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541440226
    },
    {
        "content": "<p>the problem is still there</p>",
        "id": 146811637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541440233
    },
    {
        "content": "<p>I mean the problem I highlight is still there</p>",
        "id": 146811641,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541440240
    },
    {
        "content": "<p>It's just that there's less set-up ;-)</p>",
        "id": 146811648,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541440249
    },
    {
        "content": "<p>if you want to do it by dec_trivial, maybe prove that it suffices to consider n &lt; |G| by Lagrange</p>",
        "id": 146811654,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541440253
    },
    {
        "content": "<p>or even <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn><mo>≤</mo><mi>n</mi><mo>&lt;</mo><mi mathvariant=\"normal\">∣</mi><mi>G</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">0\\leq n&lt;|G|</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathrm\">0</span><span class=\"mrel\">≤</span><span class=\"mord mathit\">n</span><span class=\"mrel\">&lt;</span><span class=\"mord mathrm\">∣</span><span class=\"mord mathit\">G</span><span class=\"mord mathrm\">∣</span></span></span></span>. Is this already in Lean?</p>",
        "id": 146811661,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541440279
    },
    {
        "content": "<p>You just check that for every element of the group there is a proper subgroup that contains it</p>",
        "id": 146811662,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541440279
    },
    {
        "content": "<p>or maybe you could even do some pigeonhole argument</p>",
        "id": 146811669,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541440290
    },
    {
        "content": "<p>or you could prove that <code>is_cyclic</code> is decidable and then decide it</p>",
        "id": 146811730,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541440335
    },
    {
        "content": "<p>If I do the Lagrange thing then it becomes <code>dec_trivial</code> again because <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> recently PR'd a decidability instance for <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn><mo>≤</mo><mi>n</mi><mo>&lt;</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">0\\leq n&lt;m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.64444em;\"></span><span class=\"strut bottom\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"base\"><span class=\"mord mathrm\">0</span><span class=\"mrel\">≤</span><span class=\"mord mathit\">n</span><span class=\"mrel\">&lt;</span><span class=\"mord mathit\">m</span></span></span></span> I believe</p>",
        "id": 146811737,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541440342
    },
    {
        "content": "<p>Is <code>is_cyclic</code> decidable?</p>",
        "id": 146811744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541440350
    },
    {
        "content": "<p>For infinite groups it sounds scary</p>",
        "id": 146811751,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541440363
    },
    {
        "content": "<p>for finite groups everything is decidable</p>",
        "id": 146811757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541440369
    },
    {
        "content": "<p>for finite groups I guess I believe you</p>",
        "id": 146811758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541440370
    },
    {
        "content": "<p>right</p>",
        "id": 146811759,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541440372
    },
    {
        "content": "<p>It's easy to write a program to calculate the order of an element in a finite group, maybe Chris has already done it</p>",
        "id": 146811789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541440433
    },
    {
        "content": "<p>so you just run that on everything and it comes up less than |G| each time</p>",
        "id": 146811829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541440449
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> what do you recommend -- I suspect you know well what is there.</p>",
        "id": 146811834,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541440461
    },
    {
        "content": "<p>Definition of <code>is_cyclic</code> is not \"there's an element of order equal to the order of the group\" as this would not work for Z</p>",
        "id": 146811846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541440481
    },
    {
        "content": "<p>I see. So for finite groups one wants \"is_cyclic iff exists element of order |G|\"</p>",
        "id": 146811858,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541440508
    },
    {
        "content": "<p>by the pigeonhole principle it works for finite groups though</p>",
        "id": 146811865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541440519
    },
    {
        "content": "<p>technically, it does work for Z since it is cyclic</p>",
        "id": 146811943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541440587
    },
    {
        "content": "<p>rofl</p>",
        "id": 146811947,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541440594
    },
    {
        "content": "<p>but it doesn't work for Z^2</p>",
        "id": 146811950,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541440595
    },
    {
        "content": "<p>indeed :-)</p>",
        "id": 146811953,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541440600
    },
    {
        "content": "<p>Wait</p>",
        "id": 146811957,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541440608
    },
    {
        "content": "<p>what is order of an element of infinite order?</p>",
        "id": 146811966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541440614
    },
    {
        "content": "<p>infinite</p>",
        "id": 146811969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541440619
    },
    {
        "content": "<p>I'm surprised it's not 37</p>",
        "id": 146811970,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541440619
    },
    {
        "content": "<p>oh Ok</p>",
        "id": 146811975,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541440624
    },
    {
        "content": "<p>oh you mean in lean</p>",
        "id": 146811981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541440633
    },
    {
        "content": "<p>right</p>",
        "id": 146811982,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541440636
    },
    {
        "content": "<p>maybe 0?</p>",
        "id": 146811987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541440641
    },
    {
        "content": "<p>exactly!</p>",
        "id": 146811994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541440645
    },
    {
        "content": "<p>That's what i said</p>",
        "id": 146812004,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541440652
    },
    {
        "content": "<p>no, like actually 0</p>",
        "id": 146812013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541440663
    },
    {
        "content": "<p>right</p>",
        "id": 146812016,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541440666
    },
    {
        "content": "<p>\"the canonical junk value\"</p>",
        "id": 146812019,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541440671
    },
    {
        "content": "<p>like characteristic 0</p>",
        "id": 146812022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541440680
    },
    {
        "content": "<p>like not junk 0</p>",
        "id": 146812072,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541440706
    },
    {
        "content": "<p>oh, you're right: there is an argument which says the order really is zero</p>",
        "id": 146812091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541440727
    },
    {
        "content": "<p>the order of an element should really be the ideal of Z consisting of n such that g^n=id</p>",
        "id": 146812111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541440747
    },
    {
        "content": "<p>exactly</p>",
        "id": 146812114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541440750
    },
    {
        "content": "<p>and if you really want a number, then choose the generator which is in nat</p>",
        "id": 146812120,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541440760
    },
    {
        "content": "<p>fortunately, the order of an infinite group in Lean is probably 0 ;-)</p>",
        "id": 146812131,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541440789
    },
    {
        "content": "<p>I guess there are two order functions, one for cardinals and one for finite cardinals</p>",
        "id": 146812186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541440819
    },
    {
        "content": "<p>so it's really not 0 here</p>",
        "id": 146812188,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541440824
    },
    {
        "content": "<p>I think you should stop worrying about infinite groups here</p>",
        "id": 146812332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541440953
    },
    {
        "content": "<p>:-) Yeah, especially given that I proved that G was a fintype</p>",
        "id": 146812346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541440973
    },
    {
        "content": "<p>Here's a challenge -- prove that permutations of a type are cyclic iff the type has at most 2 terms.</p>",
        "id": 146812370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541441032
    },
    {
        "content": "<p>i.e. S3 is not cyclic</p>",
        "id": 146812421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541441072
    },
    {
        "content": "<p>Could also say perms are abelian iff type has at most 2 terms.</p>",
        "id": 146812422,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541441074
    },
    {
        "content": "<p>Well, do we know that subgroups of a cyclic group are cyclic?</p>",
        "id": 146812428,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541441086
    },
    {
        "content": "<p>oh yeah, that's even easier</p>",
        "id": 146812432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541441099
    },
    {
        "content": "<p>and subgroups of an abelian group are abelian</p>",
        "id": 146812456,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541441118
    },
    {
        "content": "<p>If only my minions had started on group theory!</p>",
        "id": 146812459,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541441134
    },
    {
        "content": "<p>do we have the fundamental theorem of cyclic groups?</p>",
        "id": 146812469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541441149
    },
    {
        "content": "<p>is there really a fundamental theorem of cyclic groups?</p>",
        "id": 146812508,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541441165
    },
    {
        "content": "<p>Is there a fundamental theorem for an arbitrary subject?</p>",
        "id": 146812519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541441178
    },
    {
        "content": "<p>the classification of finite cyclic groups also sounds pretty cool</p>",
        "id": 146812525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541441194
    },
    {
        "content": "<p>I just had a rant in a lecture about how the fundamental theorem of algebra had a really terrible name</p>",
        "id": 146812527,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541441199
    },
    {
        "content": "<p>it was named when \"algebra\" meant the same as \"equations\", according to Wikipedia</p>",
        "id": 146812534,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541441214
    },
    {
        "content": "<p>or possibly \"polynomial equations\", my memory fails me</p>",
        "id": 146812555,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541441239
    },
    {
        "content": "<p>and now \"geometry\" means \"equations\"</p>",
        "id": 146812559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541441252
    },
    {
        "content": "<p>only algebraic geometry</p>",
        "id": 146812563,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541441260
    },
    {
        "content": "<p>what's the fundamental theorem of geometry?</p>",
        "id": 146812578,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541441274
    },
    {
        "content": "<p>What is the fundamental theorem of cyclic groups?</p>",
        "id": 146812621,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1541441286
    },
    {
        "content": "<p>Do we have that in Lean?</p>",
        "id": 146812625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541441290
    },
    {
        "content": "<p>I don't know what the FTCG is</p>",
        "id": 146812637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541441302
    },
    {
        "content": "<p>It will either be the classification</p>",
        "id": 146812644,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541441309
    },
    {
        "content": "<p>every cyclic group is isomorphic to Z/nZ for some n, or Z</p>",
        "id": 146812648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541441312
    },
    {
        "content": "<p>or the universal property</p>",
        "id": 146812649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541441312
    },
    {
        "content": "<p>apparently it's the classification</p>",
        "id": 146812667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541441334
    },
    {
        "content": "<p>what's the fundamental theorem of cyclic semimodules?</p>",
        "id": 146812685,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541441352
    },
    {
        "content": "<p>I'm pretty sure no one calls it a fundamental theorem except me</p>",
        "id": 146812695,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541441358
    },
    {
        "content": "<p>a semimodule is cyclic if it has a generator</p>",
        "id": 146812710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541441373
    },
    {
        "content": "<p>People certainly talk about cyclic modules, and the fundamental theorem for them is that a module is cyclic iff it's isomorphic to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mi mathvariant=\"normal\">/</mi><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">R/I</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span></span></span></span> for some ideal <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span></span></span></span> of the commutative ring <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span></span></span></span></p>",
        "id": 146812796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541441411
    },
    {
        "content": "<p>(and I guess there's an easy generalisation to the non-commutative case)</p>",
        "id": 146812813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541441443
    },
    {
        "content": "<p>but I don't know enough about semirings to know how this generalises</p>",
        "id": 146812841,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541441481
    },
    {
        "content": "<p>e.g I don't know the definition of a semiring</p>",
        "id": 146812849,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541441493
    },
    {
        "content": "<p>or any examples other than <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mi mathvariant=\"double-struck\">N</mi></mrow></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68889em;\"></span><span class=\"strut bottom\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span></p>",
        "id": 146812863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541441516
    },
    {
        "content": "<p>Can you have a semimodule for nat whose underlying set is {0,1,2,3} and if you keep adding 1 you get the sequence 0,1,2,3,2,3,2,3,2,3,...?</p>",
        "id": 146812937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541441585
    },
    {
        "content": "<p>Yes</p>",
        "id": 146812965,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541441628
    },
    {
        "content": "<p>so the fundamental theorem has to deal with both the \"tail\" and the \"loop\"</p>",
        "id": 146813012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541441649
    },
    {
        "content": "<p>eew and if the semiring is non-semiNoetherian then this might be pretty ghastly</p>",
        "id": 146813027,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541441679
    },
    {
        "content": "<p>I can see why they didn't catch on in the maths community</p>",
        "id": 146813031,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541441692
    },
    {
        "content": "<p>even if it's, like, <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi mathvariant=\"double-struck\">N</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">2</span></span></span></span></span></span></span></span></span></span></span> I think things will get complicated</p>",
        "id": 146813034,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541441696
    },
    {
        "content": "<p>Maybe the toric variety guys think about that case</p>",
        "id": 146813042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541441709
    },
    {
        "content": "<p>don't they do submonoids of N^2 etc?</p>",
        "id": 146813052,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541441736
    },
    {
        "content": "<p>For N^2 you can imagine a wildly complicated module where the two generators (\"up\" and \"right\") get you through some maze and if you deviate beyond some perimeter then you have to go back to the start</p>",
        "id": 146813140,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541441846
    },
    {
        "content": "<p>no it can't be that crazy</p>",
        "id": 146813150,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541441870
    },
    {
        "content": "<p>The difficulty is that a congruence (an equivalence relation \"~\" such that a ~ a' and b ~ b' implies a + a' ~ b + b') is no longer uniquely determined by the set of a for which a ~ 0</p>",
        "id": 146813152,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541441876
    },
    {
        "content": "<p>I would need some sort of free semiring for that sort of fun</p>",
        "id": 146813155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541441878
    },
    {
        "content": "<p>when forming the quotient of some algebraic object, you're really quotienting out by a congruence</p>",
        "id": 146813249,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541441979
    },
    {
        "content": "<p>it's just that the ability to subtract lets us identify congruences with (for example) submodules, so now submodules are also the things you can quotient by</p>",
        "id": 146813326,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541442026
    },
    {
        "content": "<p>wait -- I thought we were trying to prove that C_2 x C_2 wasn't cyclic</p>",
        "id": 146813330,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541442030
    },
    {
        "content": "<p>we seem to have wandered a bit</p>",
        "id": 146813334,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541442037
    },
    {
        "content": "<p>I still can't prove that Z/2 x Z/2 is not cyclic using dec_trivial. Here's an even easier instance of things failing:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">order_of_element</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">decidable_eq</span><span class=\"o\">]</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">G</span>\n<span class=\"bp\">|</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">G</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">G</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">elems</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">P</span><span class=\"o\">,</span><span class=\"n\">M</span><span class=\"o\">},</span>\n  <span class=\"n\">complete</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">g</span><span class=\"bp\">;</span><span class=\"n\">simp</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span>\n<span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"n\">P</span>\n<span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">M</span>\n<span class=\"bp\">|</span> <span class=\"n\">M</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"n\">M</span>\n<span class=\"bp\">|</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">P</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">mul</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n<span class=\"o\">}</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">to_bool</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"err\">∈</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"n\">pow</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">order_of</span> <span class=\"n\">P</span><span class=\"o\">)))</span>\n<span class=\"c1\">-- #reduce to_bool (M ∈ finset.image (pow P) (finset.range (order_of P))) -- deterministic timeout</span>\n\n<span class=\"c1\">-- #eval to_bool (M ∈ gpowers P) -- maximum class-instance resolution depth has been reached</span>\n\n<span class=\"c1\">-- example : ¬ (M ∈ gpowers P) := dec_trivial -- max class-instance res</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">G</span>\n</pre></div>",
        "id": 147329052,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541711008
    },
    {
        "content": "<p>Note also</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">decidable_gpowers</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">decidable_gpowers :</span>\n<span class=\"cm\">  Π {α : Type u_1} {a : α} [_inst_1 : group α] [_inst_2 : fintype α] [_inst_3 : decidable_eq α],</span>\n<span class=\"cm\">    decidable_pred (gpowers a)</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 147329238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541711175
    }
]