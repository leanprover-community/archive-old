[
    {
        "content": "<p>Currently the <code>ext</code> attribute for <code>monoid_hom</code> is assigned to the lemma that says maps are equal if they're equal after being applied everywhere, <code>funext</code> basically. This isn't the extensionality we always want to use though. Colimitty types have extensionality lemmas for homs out of the type. e.g. maps out of the free group are equal iff they're equal on the basis, maps out of the polynomial ring are equal iff they're equal on the base ring and X. These are usually more useful than proving the equality by funext. Can/should we set higher priority to these extensionality lemmas?</p>",
        "id": 204294771,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1595067663
    },
    {
        "content": "<p>Incidentally, I think these lemmas are quite powerful and a lot of the commutativity headaches will become easy with lots of these extensionality lemmas.</p>",
        "id": 204294793,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1595067722
    },
    {
        "content": "<p>This is a headache for polynomial ring I remember that becomes quite simple with the extensionality of homs. <code>p.eval₂ (g ∘ f) (f x) = g (p.eval₂ f x)</code></p>",
        "id": 204294870,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1595067844
    },
    {
        "content": "<p>I don't know about should (although my guess is yes), but as for \"can\" I think we can. This came up when I was experimenting with my LftCM subgroup talk:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span> <span class=\"kn\">structure</span> <span class=\"n\">submonoid</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_mem&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">one_mem&#39;</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">submonoid</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">ext</span> <span class=\"c1\">-- ∀ (x y : submonoid ?M_1), x.carrier = y.carrier → x = y</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">submonoid</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">g</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"err\">∈</span> <span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">submonoid</span> <span class=\"n\">G</span><span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">ext&#39;</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">J</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ x ∈ H.carrier ↔ x ∈ J.carrier</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- I have no idea what the default priorities are</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">ext</span> <span class=\"c1\">-- @[_ext_lemma_core] blah</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">ext&#39;</span> <span class=\"c1\">-- @[_ext_lemma_core, ext list.nil.{0} ext_param_type] blah</span>\n\n\n<span class=\"c1\">-- check that ext&#39; beats ext</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">submonoid</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">J</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"c1\">-- ⊢ x ∈ H ↔ x ∈ J</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">10</span><span class=\"o\">]</span> <span class=\"n\">ext&#39;</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">10000</span><span class=\"o\">]</span> <span class=\"n\">ext</span>\n\n<span class=\"c1\">-- check that ext beats ext&#39; now</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">test2</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">submonoid</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">J</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"c1\">-- x ∈ H.carrier ↔ x ∈ J.carrier</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">ext</span> <span class=\"c1\">-- @[_ext_lemma_core, priority 10000, ext list.nil.{0} ext_param_type, priority 10000] blah</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">ext&#39;</span> <span class=\"c1\">-- @[_ext_lemma_core, priority 10, ext list.nil.{0} ext_param_type, priority 10] blah</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">submonoid</span>\n</code></pre></div>",
        "id": 204295391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595068927
    },
    {
        "content": "<p>Randomly reprioritising attributes might break code so should presumably only be done at the point of definition.</p>",
        "id": 204295509,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595069209
    },
    {
        "content": "<p>Wait -- it's more subtle than I'd realised. I'll start a separate thread.</p>",
        "id": 204295655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595069493
    },
    {
        "content": "<p>I think this would be a great idea. <code>ext</code> works great for this throughout the limits library.</p>",
        "id": 204295750,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595069659
    },
    {
        "content": "<p>We have a few \"specialized\" <code>ext</code> lemmas, and I think that we should have more.</p>",
        "id": 204316088,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595103588
    },
    {
        "content": "<p>Note that, e.g., for quotient it's better to say <code>f.comp mk = g.comp mk</code> (don't remember the name of <code>mk : G → quotient H</code>), not <code>∀ x ∈ G, f (mk x) = g (mk x)</code>. Then for <code>G = free_group α</code>, <code>ext</code> will use <code>free_group.hom_ext</code> after this <code>ext</code>.</p>",
        "id": 204316154,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595103690
    },
    {
        "content": "<p>(again, I don't remember what is the current name of <code>free_group.hom_ext</code>).</p>",
        "id": 204316166,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595103715
    },
    {
        "content": "<p>This does break what I thought was the obvious wisdom that you always prove functions are equal by proving they're equal on all elements. Does it make sense to adopt the convention that we don't state commutativity assumption as an equality of assumptions from now on?</p>",
        "id": 204318002,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1595106621
    },
    {
        "content": "<p>If <code>G</code> has no specialized <code>ext</code> lemma, then <code>ext</code> will apply <code>monoid_hom.ext</code> next resulting in <code>∀ x ∈ G, f (mk x) = g (mk x)</code>.</p>",
        "id": 204318398,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595107265
    },
    {
        "content": "<p>What do you mean by \"we don't state commutativity assumption as an equality of assumptions\"?</p>",
        "id": 204318407,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595107312
    },
    {
        "content": "<p>I meant equality of elements.</p>",
        "id": 204319656,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1595109454
    },
    {
        "content": "<p>Bad typo.</p>",
        "id": 204319661,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1595109462
    },
    {
        "content": "<p>So we should have <code>(f.comp g = h.comp i)</code> as assumption to lemmas instead of <code>∀ x, f (g x) = h (i x)</code></p>",
        "id": 204319716,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1595109520
    }
]