[
    {
        "content": "<p>Is it bad to add an instance <code>inner_product_space ℝ (euclidean_space 𝕜 n) := inner_product_space.is_R_or_C_to_real</code>?</p>",
        "id": 230756908,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616011298
    },
    {
        "content": "<p>Or how can I test whether it's bad?</p>",
        "id": 230756953,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616011313
    },
    {
        "content": "<p>You mean, assuming <code>[is_R_or_C 𝕜]</code>? It shouldn't be bad a priori.</p>",
        "id": 230757054,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1616011345
    },
    {
        "content": "<p>Yes, assuming <code>[is_R_or_C 𝕜]</code></p>",
        "id": 230757101,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616011366
    },
    {
        "content": "<p>See notes#is_R_or_C instance</p>",
        "id": 230757179,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1616011393
    },
    {
        "content": "<p>I mean, <a href=\"https://leanprover-community.github.io/mathlib_docs/notes.html#is_R_or_C%20instance\">https://leanprover-community.github.io/mathlib_docs/notes.html#is_R_or_C%20instance</a></p>",
        "id": 230757200,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1616011405
    },
    {
        "content": "<p>Does <code>R^1</code> satisfy is_R_or_C?</p>",
        "id": 230757334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616011445
    },
    {
        "content": "<p>It's probably not even a field</p>",
        "id": 230757383,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616011463
    },
    {
        "content": "<p><code>is_R_or_C</code> is for fields. And it is <em>only</em> registered for straight <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span> and straight <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span></span></span></span></span>.</p>",
        "id": 230757440,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1616011486
    },
    {
        "content": "<p>i.e. is the class literally for <code>real</code> and <code>complex</code> or does it mean isomorphic to R or C</p>",
        "id": 230757454,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616011492
    },
    {
        "content": "<p>The latter</p>",
        "id": 230757695,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616011579
    },
    {
        "content": "<p>There's an algebraic closure of the reals called R-bar, which contains two square roots of -1 but nobody thought to say \"OK this one is the one with positive imaginary part\" yet, so it's just a set of size 2. As such it comes with an involution which swaps the elements around, and which would be complex conjugation if you identified the field with C. The reason it's sometimes better than C is that if you make stuff with R-bar then you are more acutely aware of how everything behaves with respect to complex conjugation. For example Langlands uses this principle when checking functoriality for real and complex groups and I've seen it used in other places in arithmetic. For some reason it seems to be of no real use to the analysts though, I guess they just keep track of the action of complex conjugation explicitly.</p>",
        "id": 230757967,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616011701
    },
    {
        "content": "<p>I'm going to define</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">to_euclidean</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">≃</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">euclidean_space</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"bp\">$</span> <span class=\"n\">finite_dimensional.findim</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">continuous_linear_equiv.of_findim_eq</span> <span class=\"n\">findim_euclidean_space_fin.symm</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">euclidean.dist</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">to_euclidean</span> <span class=\"bp\">𝕜</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">to_euclidean</span> <span class=\"bp\">𝕜</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and prove some lemmas around this notion to avoid explicitly using <code>to_euclidean</code> (or an equivalent construction) in the definition of a smooth bump function.</p>",
        "id": 230758161,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616011781
    },
    {
        "content": "<p>And the proof of <code>times_cont_diff.euclidean_dist</code> needs <code>euclidean_space</code> to be a real inner product space.</p>",
        "id": 230758268,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616011809
    },
    {
        "content": "<p>What's the proper way to make this definition?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.linear_isometry</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.inner_product</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.ring</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">norm_euclidean_space</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∥</span> <span class=\"n\">x</span> <span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"n\">real.sqrt</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"bp\">∥</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"bp\">∥</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pi_Lp.norm_eq</span><span class=\"o\">,</span> <span class=\"n\">real.sqrt_eq_rpow</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- a + bi -/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">iso_pos</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">≃ₗᵢ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">pair</span><span class=\"o\">,</span> <span class=\"n\">pair</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">pair</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">complex.I</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">ring</span> <span class=\"o\">},</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>  <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">ring</span> <span class=\"o\">},</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">[</span><span class=\"n\">z.re</span><span class=\"o\">,</span> <span class=\"n\">z.im</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"n\">i</span> <span class=\"n\">i.is_lt</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">fin_cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">norm_map'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">norm_fin</span> <span class=\"o\">[</span><span class=\"n\">complex.abs</span><span class=\"o\">,</span> <span class=\"n\">complex.norm_sq_apply</span><span class=\"o\">,</span> <span class=\"n\">fin.sum_univ_succ</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">pow_two</span><span class=\"o\">],</span>\n    <span class=\"n\">congr'</span> <span class=\"mi\">2</span><span class=\"bp\">;</span>\n    <span class=\"gr\">sorry</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 230766844,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616015278
    },
    {
        "content": "<p>Without addressing your sorry, I'd do the structural part as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.linear_isometry</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">iso_pos</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">≃ₗᵢ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">norm_map'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">complex.is_basis_one_I.equiv_fun</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 230770132,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1616016567
    },
    {
        "content": "<p>The norm for <code>(fin 2 → ℝ)</code> is the sup norm, so I don't think that will pan out.</p>",
        "id": 230771205,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616017050
    },
    {
        "content": "<p>Oh sorry, you need to use the type synonym <code>euclidean_space ℝ (fin 2)</code>.</p>",
        "id": 230771597,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1616017229
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.linear_isometry</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.inner_product</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">iso_pos</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">≃ₗᵢ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">norm_map'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">complex.is_basis_one_I.equiv_fun</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 230771743,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1616017304
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> By the way, something that should work but doesn't is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.inner_product</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">iso_pos</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">≃ₗᵢ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">complex.is_basis_one_I.isometry_euclidean_of_orthonormal</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">orthonormal_iff_ite</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">fin_cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span>\n  <span class=\"n\">intros</span> <span class=\"n\">j</span><span class=\"bp\">;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">j</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">real_inner_eq_re_inner</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 230780125,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1616020109
    },
    {
        "content": "<p>It seems to be getting stuck on some sort of diamond:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.inner_product</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">iso_pos</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">≃ₗᵢ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">is_basis.isometry_euclidean_of_orthonormal</span> <span class=\"n\">ℝ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">complex.I</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">complex.is_basis_one_I</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- stuck with ⊢ normed_space.to_semimodule = complex.semimodule</span>\n<span class=\"kd\">end</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">orthonormal_iff_ite</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">fin_cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span>\n  <span class=\"n\">intros</span> <span class=\"n\">j</span><span class=\"bp\">;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">j</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">real_inner_eq_re_inner</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 230780186,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1616020132
    },
    {
        "content": "<p>My attempt to solve the sorry is at this state:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.linear_isometry</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.inner_product</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">norm_euclidean_space</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∥</span> <span class=\"n\">x</span> <span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"n\">real.sqrt</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"bp\">∥</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"bp\">∥</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pi_Lp.norm_eq</span><span class=\"o\">,</span> <span class=\"n\">real.sqrt_eq_rpow</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">iso_pos</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">≃ₗᵢ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">norm_map'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fin.sum_univ_succ</span><span class=\"o\">,</span> <span class=\"n\">complex.abs</span><span class=\"o\">,</span> <span class=\"n\">complex.norm_sq_apply</span><span class=\"o\">],</span>\n  <span class=\"n\">extract_goal</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"bp\">..</span> <span class=\"n\">complex.is_basis_one_I.equiv_fun.symm</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">real.sqrt</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">_x</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">_x</span> <span class=\"o\">(</span><span class=\"n\">fin.succ</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">_x</span> <span class=\"o\">(</span><span class=\"n\">fin.succ</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">real.sqrt</span> <span class=\"o\">(</span><span class=\"bp\">∥</span><span class=\"n\">_x</span> <span class=\"mi\">0</span><span class=\"bp\">∥</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">∥</span><span class=\"n\">_x</span> <span class=\"o\">(</span><span class=\"n\">fin.succ</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">∥</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">admit</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>which will require something like a <code>rpow_bit0</code>.</p>",
        "id": 230780386,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616020222
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.linear_isometry</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.inner_product</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">norm_euclidean_space</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∥</span> <span class=\"n\">x</span> <span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"n\">real.sqrt</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"bp\">∥</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"bp\">∥</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">real.rpow</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">monoid.pow</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">pi_Lp.norm_eq</span><span class=\"o\">,</span> <span class=\"n\">real.sqrt_eq_rpow</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">real.rpow_eq_pow</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">iso_pos</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">≃ₗᵢ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">norm_map'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fin.sum_univ_succ</span><span class=\"o\">,</span> <span class=\"n\">complex.abs</span><span class=\"o\">,</span> <span class=\"n\">complex.norm_sq_apply</span><span class=\"o\">,</span>\n                                <span class=\"n\">pow_two</span><span class=\"o\">,</span> <span class=\"n\">real.norm_eq_abs</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"bp\">..</span> <span class=\"n\">complex.is_basis_one_I.equiv_fun.symm</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 230782532,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616021478
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6760\">#6760</a> to solve the diamond. I know this is not necessary for what you did, but having diamonds around is always bad.</p>",
        "id": 230936749,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1616101223
    },
    {
        "content": "<p>Oh good!  I was just testing this, it seems that the diamond was introduced by <a href=\"https://github.com/leanprover-community/mathlib/issues/6562\">#6562</a>.</p>",
        "id": 230936934,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1616101295
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib/tree/test-isometry-complex\">branch#test-isometry-complex</a>, based off the mathlib before that PR ... it compiles locally for me.</p>",
        "id": 230937071,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1616101339
    },
    {
        "content": "<p>Thanks, I was hoping to get to this after finishing the PR on simplifying nat/int powers over the reals. Now you've slain another smul diamond =)</p>",
        "id": 230938969,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616102118
    },
    {
        "content": "<p>Now that <a href=\"https://github.com/leanprover-community/mathlib/issues/6760\">#6760</a> is merged, I PR'd the isometry as <a href=\"https://github.com/leanprover-community/mathlib/issues/6877\">#6877</a>.</p>",
        "id": 231901729,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1616722198
    }
]