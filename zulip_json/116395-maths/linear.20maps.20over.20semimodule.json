[
    {
        "content": "<p>Right now, the identity does not make sense as a linear map from <code>ℕ</code> to <code>ℕ</code> as <code>ℕ</code> is not a ring, only a semiring. Would anyone object to defining linear maps on semimodules over semirings to allow \"linear algebra\" on <code>ℕ</code>-valued matrices? This shows up on <a href=\"https://github.com/leanprover-community/mathlib/issues/1883\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1883\">#1883</a>, where it is rightly argued that having the trace of an <code>ℕ</code>-valued matrix makes sense, and still I think it would be better to have the trace as a linear map.</p>",
        "id": 185809038,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1579176949
    },
    {
        "content": "<p>I don't think there's even a change to the axioms, so this definitely makes sense.</p>",
        "id": 185814391,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1579181467
    },
    {
        "content": "<p>I'm afraid that when I was making a push to get people to do commutative algebra in Lean, I had no idea what a semiring was ;-)</p>",
        "id": 185818425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579184497
    },
    {
        "content": "<p>I had a go at it, and I thought it would also be a good idea to let <code>module</code> be an abbreviation for <code>semimodule</code>. Everything compiles well, but some things become extremely slow, and I have not been able to adjust the instances (Yes, I want Lean 4 !! :)<br>\nMWE (with current mathlib):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">convex</span>\n\n<span class=\"c1\">-- attribute [instance, priority 200] add_comm_monoid.to_add_monoid</span>\n<span class=\"c1\">-- set_option trace.class_instances true</span>\n\n<span class=\"n\">class</span> <span class=\"n\">inner_product_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">semimodule</span> <span class=\"n\">ℝ</span> <span class=\"n\">α</span>\n</pre></div>\n\n\n<p>takes 30s on my laptop. With instances tracing on, it does not complete.</p>",
        "id": 185824677,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1579188463
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> Thanks for the attempt!</p>",
        "id": 185826662,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579189525
    },
    {
        "content": "<p>Too bad that it blows up</p>",
        "id": 185826677,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579189536
    },
    {
        "content": "<p>This reminds me a bit of <a href=\"https://github.com/leanprover-community/mathlib/commit/89ece147049fb463f9ff320b73433fcdd32370ce\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/commit/89ece147049fb463f9ff320b73433fcdd32370ce\">https://github.com/leanprover-community/mathlib/commit/89ece147049fb463f9ff320b73433fcdd32370ce</a></p>",
        "id": 185827891,
        "sender_full_name": "Reid Barton",
        "timestamp": 1579190230
    },
    {
        "content": "<p>Except that this time the compile time is multiplied by 30 instead of divided by 3</p>",
        "id": 185828108,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579190339
    },
    {
        "content": "<p>I am still hoping that <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>  will tell me that there is an instance trick solving this :-)</p>",
        "id": 185828396,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1579190454
    },
    {
        "content": "<p>Well who hasn't gotten a constant off by a factor of 90 before, am I right?</p>",
        "id": 185829140,
        "sender_full_name": "Reid Barton",
        "timestamp": 1579190841
    },
    {
        "content": "<p>If someone can minimize this then it will certainly interest Daniel (who is not reading this stream by the way).</p>",
        "id": 185831357,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1579191994
    },
    {
        "content": "<p>In the meantime, how about a non-minimized repro? Do I only need the snippet you posted above on top of current mathlib?</p>",
        "id": 185832005,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1579192345
    },
    {
        "content": "<p>Yes, the snippet is a minimal working example.</p>",
        "id": 185832213,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1579192463
    },
    {
        "content": "<p>Thanks. (I can't check this easily right now because I am currently building a modified mathlib for a different experiment)</p>",
        "id": 185832235,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1579192473
    },
    {
        "content": "<p>But I expect that you will tell me this problem is already solved by the algorithm you have developed for Lean 4. And I will be extremely happy about it, and extremely sad that I don't have Lean 4 yet :(</p>",
        "id": 185832374,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1579192539
    },
    {
        "content": "<p>Do you know about the community <code>cache-olean</code> tool? It would allow to clone <code>mathlib</code> and get a compiled version from a few hours ago in about 20 seconds.</p>",
        "id": 185832376,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1579192539
    },
    {
        "content": "<p>For my experiments I generally need to rebuild mathlib with a differently-instrumented Lean3 each time.</p>",
        "id": 185832517,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1579192616
    },
    {
        "content": "<p>Oh I see. Forget about reusing oleans then...</p>",
        "id": 185832579,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1579192646
    },
    {
        "content": "<p>(and I am reluctant to start having multiple mathlibs floating around at the same time)</p>",
        "id": 185832621,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1579192667
    },
    {
        "content": "<p>But don't hesitate to tell us if you have a patched Lean3 that already fixes things <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 185832696,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1579192687
    },
    {
        "content": "<blockquote>\n<p>Oh I see. Forget about reusing oleans then...</p>\n</blockquote>\n<p>To clarify: to diagnose the problem discussed in this thread, I can reuse oleans and only run a modified Lean3 on the new file.</p>",
        "id": 185832747,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1579192712
    },
    {
        "content": "<p>Who knew the trace of a matrix could be so controversial? Thank you all for the thoughts. I will have some time again at the weekend and will take this up again then.</p>",
        "id": 185869743,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1579214467
    },
    {
        "content": "<blockquote>\n<p>To clarify: to diagnose the problem discussed in this thread, I can reuse oleans and only run a modified Lean3 on the new file.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"230999\">@Daniel Selsam</span> ,  did you finally understand what is going wrong with this snippet?</p>",
        "id": 185900628,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1579254073
    },
    {
        "content": "<p>Not yet, I have been swamped with other things. It is on my list.</p>",
        "id": 185913850,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1579266503
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> Diamonds. It tries to prove <code>discrete_linear_ordered_field</code> 60,000 times.</p>",
        "id": 185945698,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1579287373
    },
    {
        "content": "<p>(so should be instantaneous in Lean4)</p>",
        "id": 185946135,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1579287704
    },
    {
        "content": "<p>Thanks a lot for your investigation. Can you see from this a reasonable priority tweak that would avoid this crazy search? (And do you understand why the situation is so much different with <code>semimodule</code> and with <code>module</code>?)</p>",
        "id": 185951274,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1579291413
    },
    {
        "content": "<p>One more reason to have linear maps on semimodules over semirings: I'd like to have <code>convex</code> for semimodules over <code>nnreal</code> to be able to say that the set of invariant measures of an endomorphism is convex.</p>",
        "id": 186356576,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579753660
    }
]