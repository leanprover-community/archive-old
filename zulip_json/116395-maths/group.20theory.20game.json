[
    {
        "content": "<p>Can someone explain what is going on with central_subgroup? It looks to me to be at the same time a definition (all its elements are central) and to be a theorem (the  center-or centre?- is a subgroup).</p>",
        "id": 197265279,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589285290
    },
    {
        "content": "<p>Ah yes, here is the right place</p>",
        "id": 197266643,
        "sender_full_name": "Jason KY.",
        "timestamp": 1589286065
    },
    {
        "content": "<p>Right, I made its carrier to be the center set, but to prove its indeed a subgroup I had to prove the axioms</p>",
        "id": 197266714,
        "sender_full_name": "Jason KY.",
        "timestamp": 1589286113
    },
    {
        "content": "<p>Can you explain a bit the syntax of the def central_subgroup? I guess I don't know what the \" carrier\" is. Because the first line of the def seems to me to be saying \"let H be any subset of G, then it is a subgroup\"</p>",
        "id": 197266869,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589286175
    },
    {
        "content": "<p>Right, that was a mistake, I've fixed it now, it should say <code>def central_subgroup (G : Type) [group G] : subgroup G :=</code></p>",
        "id": 197266923,
        "sender_full_name": "Jason KY.",
        "timestamp": 1589286209
    },
    {
        "content": "<p>But why do you want it to be a def? It seems to me that the centre has already been def'd (in the definition file in group folder)</p>",
        "id": 197267061,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589286268
    },
    {
        "content": "<p>So why don't you want a \"lemma\" (saying: the subset called centre/center there is in fact a sbgrp)?</p>",
        "id": 197267101,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589286295
    },
    {
        "content": "<p><a href=\"https://github.com/ImperialCollegeLondon/group-theory-game\">https://github.com/ImperialCollegeLondon/group-theory-game</a> is what we're talking about</p>",
        "id": 197267162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589286339
    },
    {
        "content": "<p>Right but I would like it to have type <code>subgroup G</code>.  The <code>center G</code> has type <code>set G</code> if I am not mistaken</p>",
        "id": 197267311,
        "sender_full_name": "Jason KY.",
        "timestamp": 1589286404
    },
    {
        "content": "<p><a href=\"https://github.com/ImperialCollegeLondon/group-theory-game/blob/c8f0330486b606a0013013cd3a7990ea23ce7d0f/src/group/definitions.lean#L51\">https://github.com/ImperialCollegeLondon/group-theory-game/blob/c8f0330486b606a0013013cd3a7990ea23ce7d0f/src/group/definitions.lean#L51</a></p>",
        "id": 197267366,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589286435
    },
    {
        "content": "<p>And if we make a lemma saying <code>is_subgroup (center G)</code> then we are no longer working with the bundled subgroups but the proposition <code>is_subgroup</code></p>",
        "id": 197267402,
        "sender_full_name": "Jason KY.",
        "timestamp": 1589286459
    },
    {
        "content": "<p>Yes, <code>center G</code> has type <code>set G</code>, the type of subsets of <code>G</code>. So <code>center G</code> is a subset, not a subgroup.</p>",
        "id": 197267404,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589286460
    },
    {
        "content": "<p>This <code>{g : G | ∀ k : G, k * g = g * k}</code> is notation for a constructor for <code>set G</code>.</p>",
        "id": 197267514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589286507
    },
    {
        "content": "<p>Ah, ok, I see. So the point is now to \"upgrade\" this subset to a subgroup, and this is what central_subgroup does. Is that right?</p>",
        "id": 197267606,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589286561
    },
    {
        "content": "<p>Yeah, tbh I don't think I needed to define center at all but instead just define the central subgroup as a subgroup with <code>{g : G | ∀ k : G, k * g = g * k}</code> as the carrier</p>",
        "id": 197267744,
        "sender_full_name": "Jason KY.",
        "timestamp": 1589286630
    },
    {
        "content": "<p>Maybe thats less confusing :)</p>",
        "id": 197267758,
        "sender_full_name": "Jason KY.",
        "timestamp": 1589286641
    },
    {
        "content": "<p>I am sorry, I am really a beginner; but the \"carrier\"  is the underlying subset (in old-fashioned terminology....)?</p>",
        "id": 197267928,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589286733
    },
    {
        "content": "<p>Yes, that's what it is</p>",
        "id": 197267985,
        "sender_full_name": "Jason KY.",
        "timestamp": 1589286760
    },
    {
        "content": "<p>But then this is the definition of the centre... I am perplexed. To me, a \"central subgroup\" is one which is contained in the centre, non necessarily the whole centre.</p>",
        "id": 197268046,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589286800
    },
    {
        "content": "<p>I agree that this is the standard usage. Jason is a 1st year maths undergraduate, he is just learning the theory himself right now (in fact he probably just took an exam on it!)</p>",
        "id": 197268140,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589286844
    },
    {
        "content": "<p>Oh, I am really sorry. I really did not mean to be rude in any way-Jason, all my apologies!</p>",
        "id": 197268190,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589286878
    },
    {
        "content": "<p>Ah, sorry. I should definitely  read more maths about this :)</p>",
        "id": 197268251,
        "sender_full_name": "Jason KY.",
        "timestamp": 1589286912
    },
    {
        "content": "<p>I am very novel to lean and I can't yet understand what you mean by<br>\nAnd if we make a lemma saying is_subgroup (center G) then we are no longer working with the bundled subgroups but the proposition is_subgroup<br>\nCould you please explain this a bit?</p>",
        "id": 197268310,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589286941
    },
    {
        "content": "<p>Sorry, I now understand the confusion :-) Yes, there are two things: firstly the centre as a subset and as a subgroup (the sort of thing which I try and explain <a href=\"https://xenaproject.wordpress.com/2020/04/30/the-invisible-map/\">here</a>, and secondly the standard usage of central subgroup.</p>",
        "id": 197268346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589286962
    },
    {
        "content": "<p>Yes, I thought that the \"invisible\" map was under the rug. But what I thought I understood from your blog was that Lean is able to apply this invisible map. But Jason seems to say that \"if we make a lemma saying is_subgroup (center G) then we are no longer working with the bundled subgroups but the proposition is_subgroup\", and unfortunately I am still unable to understand what it is meant by this.</p>",
        "id": 197268573,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589287082
    },
    {
        "content": "<p>My english might not be good enought. What does \"Can you then may be just speculate a bit about your comment\" mean?</p>",
        "id": 197268629,
        "sender_full_name": "Jason KY.",
        "timestamp": 1589287121
    },
    {
        "content": "<p>There are two ways that you can tell Lean \"this is a subgroup\". Firstly, you can define a type <code>subgroup G</code> such that a term of type <code>subgroup G</code> \"is\" a subgroup of G, in the sense that to make a term of this type is to give a subgroup of G in the sense that any mathematician would understand it.</p>",
        "id": 197268681,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589287157
    },
    {
        "content": "<p>i.e. you give a subset and the proof that it satisfies some axioms</p>",
        "id": 197268693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589287168
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243312\">Jason KY.</span> <a href=\"#narrow/stream/116395-maths/topic/group.20theory.20game/near/197268629\">said</a>:</p>\n<blockquote>\n<p>My english might not be good enought. What does \"Can you then may be just speculate a bit about your comment\" mean?</p>\n</blockquote>\n<p>Modified!</p>",
        "id": 197268792,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589287207
    },
    {
        "content": "<p>Secondly, you can define a function called <code>is_subgroup</code> from the type of subsets of G to the type of true/false statements, and given a subset X of G you could construct a proof of <code>is_subgroup X</code></p>",
        "id": 197268834,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589287231
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/group.20theory.20game/near/197268681\">said</a>:</p>\n<blockquote>\n<p>There are two ways that you can tell Lean \"this is a subgroup\". Firstly, you can define a type <code>subgroup G</code> such that a term of type <code>subgroup G</code> \"is\" a subgroup of G, in the sense that to make a term of this type is to give a subgroup of G in the sense that any mathematician would understand it.</p>\n</blockquote>\n<p>OK: and this is what Jason did in the def central_subgroup as it is now, right?</p>",
        "id": 197268860,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589287249
    },
    {
        "content": "<p>So here you have separated out the subset, namely X, and the proof that it's a subgroup, namely the proof of <code>is_subgroup X</code></p>",
        "id": 197268868,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589287256
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/116395-maths/topic/group.20theory.20game/near/197268860\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/group.20theory.20game/near/197268681\">said</a>:</p>\n<blockquote>\n<p>There are two ways that you can tell Lean \"this is a subgroup\". Firstly, you can define a type <code>subgroup G</code> such that a term of type <code>subgroup G</code> \"is\" a subgroup of G, in the sense that to make a term of this type is to give a subgroup of G in the sense that any mathematician would understand it.</p>\n</blockquote>\n<p>OK: and this is what Jason did in the def central_subgroup as it is now, right?</p>\n</blockquote>\n<p>Yes, <code>central_subgroup G</code> will have type <code>subgroup G</code></p>",
        "id": 197268954,
        "sender_full_name": "Jason KY.",
        "timestamp": 1589287312
    },
    {
        "content": "<p>The computer science terminology for the type <code>subgroup G</code> is \"bundled subgroups\" and the terminology for the function, which separates the data from the proofs, is \"unbundled subgroups\". Yes, this is what Jason was doing with the centre, he was bundling it.</p>",
        "id": 197268969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589287321
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/group.20theory.20game/near/197268868\">said</a>:</p>\n<blockquote>\n<p>So here you have separated out the subset, namely X, and the proof that it's a subgroup, namely the proof of <code>is_subgroup X</code></p>\n</blockquote>\n<p>Very well: this looks more like \"applying the invisible function but making it visible\"... but are the two approaches equivalent at the end of the day?</p>",
        "id": 197269023,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589287329
    },
    {
        "content": "<p>Whether subgroups should be bundled or unbundled is not a mathematical question.</p>",
        "id": 197269049,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589287343
    },
    {
        "content": "<p>As you rightly point out, to a mathematician they are equivalent. They are the same. They are equal!</p>",
        "id": 197269096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589287361
    },
    {
        "content": "<p>Bundled are cooler!</p>",
        "id": 197269118,
        "sender_full_name": "Jason KY.",
        "timestamp": 1589287371
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/group.20theory.20game/near/197269096\">said</a>:</p>\n<blockquote>\n<p>As you rightly point out, to a mathematician they are equivalent. They are the same. They are equal!</p>\n</blockquote>\n<p>That's great news! So, in particular, since the def of centre (as subset) was already given, wouldn't it have been more natural (no criticism here, of course!) to simply upgrade it to a subgroup rather than re-defining it?</p>",
        "id": 197269130,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589287377
    },
    {
        "content": "<p>To a computer scientist they are far from equal, because they are two different data types, and there are functions which map one data type to the other in a bijective way</p>",
        "id": 197269170,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589287403
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/group.20theory.20game/near/197269170\">said</a>:</p>\n<blockquote>\n<p><del>bijective</del> injective</p>\n</blockquote>",
        "id": 197269220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589287434
    },
    {
        "content": "<p>but if you want to make some algorithm which e.g. attempts to solve the word problem in a finitely-generated group, then you care a lot about exactly which data type you want to use</p>",
        "id": 197269271,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589287445
    },
    {
        "content": "<p>Mario I mean <code>subgroup G</code> bijects with <code>{X : subset G // is_subgroup X}</code></p>",
        "id": 197269300,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589287466
    },
    {
        "content": "<p>or <code>equiv</code>s with it, as you would say</p>",
        "id": 197269320,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589287483
    },
    {
        "content": "<p>ah, well that could even be an equality</p>",
        "id": 197269341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589287497
    },
    {
        "content": "<p>but you still have to deal with the injection from <code>subgroup G</code>, or <code>{X : subset G // is_subgroup X}</code>, to <code>subset G</code></p>",
        "id": 197269410,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589287538
    },
    {
        "content": "<p>So the question of how to set up subgroups is not at all mathematical, but actually a question about implementation issues, and people who understand these things far better than I have decided that if mathematicians want to talk about subgroups of <code>G</code>, Lean 3 would prefer that they talked about terms of type <code>subgroup G</code> rather than a pair consisting of a subset of G and a proof that it's a subgroup, even though to us they look like the same thing</p>",
        "id": 197269570,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589287615
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/116395-maths/topic/group.20theory.20game/near/197269130\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/group.20theory.20game/near/197269096\">said</a>:</p>\n<blockquote>\n<p>As you rightly point out, to a mathematician they are equivalent. They are the same. They are equal!</p>\n</blockquote>\n<p>That's great news! So, in particular, since the def of centre (as subset) was already given, wouldn't it have been more natural (no criticism here, of course!) to simply upgrade it to a subgroup rather than re-defining it?</p>\n</blockquote>\n<p>What does \"upgrade it to a subgroup\" mean in this context?</p>",
        "id": 197269638,
        "sender_full_name": "Jason KY.",
        "timestamp": 1589287659
    },
    {
        "content": "<p>Oh, great .This makes perfect sense to me and I am very happy to follow them, if they so advise us.</p>",
        "id": 197269660,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589287673
    },
    {
        "content": "<p>The only way this affects mathematicians is that they need to be informed of this when they are formalising mathematical statements; they should use the conventions which make Lean 3 happier.</p>",
        "id": 197269668,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589287682
    },
    {
        "content": "<p>OK, and I will certainly follow the rule. But then it seems to me that the def of centre given in the group/definitions file should not be there, only the other one should exist. No?</p>",
        "id": 197269788,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589287742
    },
    {
        "content": "<p>I agree that I should remove that definitely</p>",
        "id": 197269879,
        "sender_full_name": "Jason KY.",
        "timestamp": 1589287787
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243312\">Jason KY.</span> <a href=\"#narrow/stream/116395-maths/topic/group.20theory.20game/near/197269638\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/116395-maths/topic/group.20theory.20game/near/197269130\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/group.20theory.20game/near/197269096\">said</a>:</p>\n<blockquote>\n<p>As you rightly point out, to a mathematician they are equivalent. They are the same. They are equal!</p>\n</blockquote>\n<p>That's great news! So, in particular, since the def of centre (as subset) was already given, wouldn't it have been more natural (no criticism here, of course!) to simply upgrade it to a subgroup rather than re-defining it?</p>\n</blockquote>\n<p>What does \"upgrade it to a subgroup\" mean in this context?</p>\n</blockquote>\n<p>As far as I undestand from Kevin, some unbundling=some evil thing (a suggestion which I now retract, in light of Kevin's comments)</p>",
        "id": 197269898,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589287797
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243312\">Jason KY.</span> <a href=\"#narrow/stream/116395-maths/topic/group.20theory.20game/near/197269879\">said</a>:</p>\n<blockquote>\n<p>I agree that I should remove that definitely</p>\n</blockquote>\n<p>Ah, perfect. Then I undestand. And can I also suggest that we call the definition def centre rather than central_subgroup (for the reasons discussed with Kevin before, and that you'll soon learn about the existence of \"central subgroups\" more general than the centre itself)?</p>",
        "id": 197270063,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589287888
    },
    {
        "content": "<p>Yes, I will change it to</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">center</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span>  <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">},</span>\n  <span class=\"n\">one_mem&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_mem&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span><span class=\"o\">],</span>\n  <span class=\"n\">inv_mem&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">mul_left_cancel</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">iterate</span> <span class=\"mi\">2</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span><span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">mul_right_inv</span><span class=\"o\">,</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">mul_right_inv</span><span class=\"o\">],</span> <span class=\"n\">simp</span>\n  <span class=\"kn\">end</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>And make central subgroups something else (a subgroup of the center ?)</p>",
        "id": 197270251,
        "sender_full_name": "Jason KY.",
        "timestamp": 1589287980
    },
    {
        "content": "<p>I will come back to it once I learn it fully of course</p>",
        "id": 197270295,
        "sender_full_name": "Jason KY.",
        "timestamp": 1589288010
    },
    {
        "content": "<p>Exactly, central subgroups are subgroups of the centre (btw: do you prefer centre or center?) Great.</p>",
        "id": 197270403,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589288044
    },
    {
        "content": "<p>Also, am I correct in understanding that this is part of your work with Kevin about your studies? I don't want to jump into the project and destroy all its pedagogical aims... Kevin, what is your position?</p>",
        "id": 197270515,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589288115
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/116395-maths/topic/group.20theory.20game/near/197270403\">said</a>:</p>\n<blockquote>\n<p>Exactly, central subgroups are subgroups of the centre (btw: do you prefer centre or center?) Great.</p>\n</blockquote>\n<p>I don't personally have a preference but I normally use center :)</p>",
        "id": 197270725,
        "sender_full_name": "Jason KY.",
        "timestamp": 1589288210
    },
    {
        "content": "<p>I think that's a british spelling thing</p>",
        "id": 197270790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589288242
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243312\">Jason KY.</span> <a href=\"#narrow/stream/116395-maths/topic/group.20theory.20game/near/197270725\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/116395-maths/topic/group.20theory.20game/near/197270403\">said</a>:</p>\n<blockquote>\n<p>Exactly, central subgroups are subgroups of the centre (btw: do you prefer centre or center?) Great.</p>\n</blockquote>\n<p>I don't personally have a preference but I normally use center :)</p>\n</blockquote>\n<p>I believe centre is British Eng, center is American Eng.</p>",
        "id": 197270796,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589288245
    },
    {
        "content": "<p>So, for central subgroups, you have to choose again:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">subgroup</span> <span class=\"o\">(</span><span class=\"n\">center</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>or</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_central</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n<span class=\"c1\">-- where</span>\n<span class=\"n\">def</span> <span class=\"n\">is_central</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"err\">\\</span><span class=\"k\">forall</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"err\">\\</span><span class=\"k\">in</span> <span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">g</span>\n</code></pre></div>",
        "id": 197270844,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589288272
    },
    {
        "content": "<p>I prefer this first <code>subgroup (center G)</code></p>",
        "id": 197270981,
        "sender_full_name": "Jason KY.",
        "timestamp": 1589288320
    },
    {
        "content": "<p>If you want to prove something about structure on the \"set\" of all central subgroups, then the first approach would be best. But I guess we don't. So I actually prefer the second.</p>",
        "id": 197271002,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589288331
    },
    {
        "content": "<p>Because it will make it easier to view central subgroups as just ordinary subgroups satisfying an extra condition.</p>",
        "id": 197271049,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589288359
    },
    {
        "content": "<p>my preference would be to skip the definition <code>is_central H</code> and replace it with <code>H &lt;= center G</code></p>",
        "id": 197271185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589288414
    },
    {
        "content": "<p>Otherwise we'll get a lot of invisible maps, and I don't know if they help us with anything. For a <code>g : G</code> you want to be able to write <code>g \\in H</code> if <code>H</code> is a central subgroup. But with <code>H : subgroup (center G)</code> you will have to work harder to make this possible.</p>",
        "id": 197271196,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589288418
    },
    {
        "content": "<p>What Mario says is even better.</p>",
        "id": 197271230,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589288440
    },
    {
        "content": "<p>What is the notation <code>&lt;=</code> ?</p>",
        "id": 197271305,
        "sender_full_name": "Jason KY.",
        "timestamp": 1589288484
    },
    {
        "content": "<p>less-equal</p>",
        "id": 197271316,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589288489
    },
    {
        "content": "<p>Oh!</p>",
        "id": 197271350,
        "sender_full_name": "Jason KY.",
        "timestamp": 1589288498
    },
    {
        "content": "<p>not subset because <code>subgroup G</code> is a lattice</p>",
        "id": 197271369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589288504
    },
    {
        "content": "<p>That is definitely an elegant way of approaching this</p>",
        "id": 197271524,
        "sender_full_name": "Jason KY.",
        "timestamp": 1589288560
    },
    {
        "content": "<p>I see much better now. I still have the \"pedagogical\" question (what's the general approach here? Everybody does whatever they want, is there an  organiser of each project?) and would also like to understand how to use git: should I create a branch and commit, copy-paste in the online file? Something else?</p>",
        "id": 197272400,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589288975
    },
    {
        "content": "<p>There is a group of maintainers of mathlib, see the README. Beyond that, everyone just does random stuff (-;</p>",
        "id": 197272517,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589289014
    },
    {
        "content": "<p>To use git is a different thing (-; There are good tutorials online.</p>",
        "id": 197272579,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589289045
    },
    {
        "content": "<p>Once you have stuff that you would like to PR to mathlib, you need an account at github, and give us your username there. Then we can give you the right to create branches on the mathlib repo, and push to them.</p>",
        "id": 197272649,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589289086
    },
    {
        "content": "<p>The group theory game repository is just an experiment. It might turn into a game, like the natural number game, it might turn into teaching material for either groups or lean, it might turn into something else, it will definitely not go into mathlib because mathlib already has groups.</p>",
        "id": 197273372,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589289404
    },
    {
        "content": "<p>I formalised the definition of complex numbers in Lean, so that <a href=\"https://github.com/leanprover-community/mathlib/blob/295b87eced56371d9b4c120793ce6fa8c51bae0e/src/data/complex/basic.lean#L10-L11\">did go into mathlib</a>, but then a lot of people worked on the code and now the rest of the file looks nothing like what I originally wrote. I re-read it last week and wrote <a href=\"https://github.com/kbuzzard/xena/blob/master/Mathematics_In_Lean_ideas/complex.lean\">this</a> \"remix\" of it, which will probably turn into a section of <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">this pre-book</a> which is slowly turning into a book, but which you Filippo might find interesting. It makes a type (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span></span></span></span></span>) with a very simple definition, and then shows how you can prove it is a commutative ring by proving about 50 lemmas each with one-line proofs.</p>",
        "id": 197274448,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589289875
    },
    {
        "content": "<p>As you can see, this is pretty random, as Johan says. I'm interested in making random Lean things and then showing them beginners and trying to figure out what works. The natural number game came from <a href=\"https://xenaproject.wordpress.com/2017/10/31/building-the-non-negative-integers-from-scratch/\">this blog post</a> which got a very positive response from my undergraduates.</p>",
        "id": 197274629,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589289955
    },
    {
        "content": "<p>I encourage beginners to choose a theorem statement/proof/definition and just formalise it, and make a little repo containing what they did -- for example I link to some <a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/UROP2020.html\">here</a> (in section \"What?\"). Jason is formalising group theory as he learns it, and also learning about bundling structures. Although he now has a mathlib PR under his belt, bundling submonoids, so it's more accurate to say that he has learnt about bundling structures.</p>",
        "id": 197274981,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589290094
    },
    {
        "content": "<p>For example <span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> if you wanted to do a trickier group thing you could try formalising <a href=\"https://twitter.com/littmath/status/1260019505184423938\">some random piece of maths</a> yourself (and then tell Daniel that you formalised his proof :-) )</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/littmath/status/1260019505184423938\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/896909521603481607/FUx_nsGR_normal.jpg\"></a><p>Here’s a nice thread giving a very intense and non-constructive proof sketch of the following fact: if G is a finitely-presented group, then *any* set of generators require only finitely many relations. Here’s a simple proof 1/n <a href=\"https://t.co/4fl4lrn0Zz\">https://twitter.com/schala163/status/1259957142674604032</a></p><span>- Daniel Litt (@littmath)</span></div></div>",
        "id": 197275644,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589290385
    },
    {
        "content": "<p>Oh -- if you want to do the exercises in the complex number file, you could try <a href=\"http://tinyurl.com/thecomplexnumbergame\">the complex number game</a> but you'd be better off cutting and pasting into Lean running on your own machine.</p>",
        "id": 197275929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589290479
    },
    {
        "content": "<p>All clear. I will have a look at your implementation of \\mathbb{C} and then I will try to do something on my own. Are number fields (either as Q(\\alpha) or as splitting fields of irred. monic pol.'s in Z[x] already in mathlib?</p>",
        "id": 197283515,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589293530
    },
    {
        "content": "<p>Not as far as I know! I wrote some plan <a href=\"https://github.com/leanprover-community/mathlib/projects/3\">https://github.com/leanprover-community/mathlib/projects/3</a> but didn't start on it yet. I believe we have fractional ideals though.</p>",
        "id": 197283664,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589293592
    },
    {
        "content": "<p>Before we do number fields it might be best to prove that ideals factor into prime ideals in Dedekind domains, and then prove that the integers of a number field (we have integral closure) is an integral domain.</p>",
        "id": 197283730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589293631
    },
    {
        "content": "<p>I agree. But are you saying that we already have Dedekind domains or should we introduce dimension theory, noetherianity, int. closedness?</p>",
        "id": 197283870,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589293689
    },
    {
        "content": "<p>If they're there, I can try my luck.</p>",
        "id": 197283899,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589293706
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> We do have splitting fields</p>",
        "id": 197283959,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589293740
    },
    {
        "content": "<p>We have Noetherian rings and integral closure. I don't think we have dimension theory or Dedekind domains. You might want to check with <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span></p>",
        "id": 197283966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589293744
    },
    {
        "content": "<p>who just beat me to it</p>",
        "id": 197283993,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589293752
    },
    {
        "content": "<p>No Dedekind domains yet, no number fields. But this is really just waiting for someone to come along and do it.</p>",
        "id": 197284036,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589293771
    },
    {
        "content": "<p>Formalising the proof that ideals factor into prime ideals will be a real baptism of fire, I would definitely do the exercises at the end of the complex number game first :-)</p>",
        "id": 197284197,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589293830
    },
    {
        "content": "<p>Ah perfect. I might venture out in the forest.  So, the plan would be to define the ring of integers as the integral closure of Z in the splitting field and then prove every non-zero prime  is max'l?</p>",
        "id": 197284223,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589293838
    },
    {
        "content": "<p>I'll certainly go for that, but it is also nice to have a further (furtheeeeeer) goal in mind.</p>",
        "id": 197284317,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589293883
    },
    {
        "content": "<p>I would formalise the definition of a Dedekind domain first, and then prove that integers of a number field are a Dedekind domain. That would be a nice place to start.</p>",
        "id": 197284322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589293887
    },
    {
        "content": "<p>Re Fillipo: Well, I don't know if you want to do it in such a specific setup. But something like that.</p>",
        "id": 197284325,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589293888
    },
    {
        "content": "<p>Your goal is to prove that the class group of a global field is finite and the unit group is finitely-generated :-)</p>",
        "id": 197284363,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589293908
    },
    {
        "content": "<p>Through log-embeddings, though, I guess. Like introducing Minkowski convex-body?</p>",
        "id": 197284450,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589293935
    },
    {
        "content": "<p>That's what we prove in our UG course at Imperial and one mathlib plan is to get it to cover all the pure maths in a typical undergraduate degree.</p>",
        "id": 197284460,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589293940
    },
    {
        "content": "<p>Yes, via logs. We have logs :-)</p>",
        "id": 197284489,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589293952
    },
    {
        "content": "<p>Ah, that's cool. Do we also have a bit of integrals?</p>",
        "id": 197284554,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589293978
    },
    {
        "content": "<p>(for volumes, I mean)</p>",
        "id": 197284569,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589293986
    },
    {
        "content": "<p>emphasis on \"bit\"</p>",
        "id": 197284575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589293988
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  it's a nice project  !</p>",
        "id": 197301473,
        "sender_full_name": "orlando",
        "timestamp": 1589300713
    }
]