[
    {
        "content": "<p>Anyone here know the basics of combinatorial game theory? I don't understand why chess is not an impartial game. I want to consider chess as consisting of a normal chess board, along with a two-sided token, with sides black and white, which starts white side up. On each turn, a player moves a piece of the colour shown on the token (according to the usual rules of chess), and then flips the token over.</p>",
        "id": 162028295,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553849374
    },
    {
        "content": "<p>This interpretation of chess behaves differently under sum of games than \"normal chess\" does, but nevertheless, it still seems to be a perfectly reasonable description of chess as an impartial game...?</p>",
        "id": 162028377,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553849470
    },
    {
        "content": "<p>what is an impartial game?</p>",
        "id": 162028381,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553849503
    },
    {
        "content": "<p>Not sure what the best references are:</p>\n<ul>\n<li><a href=\"https://mathigon.org/world/resources/Game_Theory/Combinatoial_Game_Theory.pdf\" target=\"_blank\" title=\"https://mathigon.org/world/resources/Game_Theory/Combinatoial_Game_Theory.pdf\">https://mathigon.org/world/resources/Game_Theory/Combinatoial_Game_Theory.pdf</a></li>\n<li><a href=\"http://web.mit.edu/sp.268/www/nim.pdf\" target=\"_blank\" title=\"http://web.mit.edu/sp.268/www/nim.pdf\">http://web.mit.edu/sp.268/www/nim.pdf</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Impartial_game\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Impartial_game\">https://en.wikipedia.org/wiki/Impartial_game</a></li>\n</ul>",
        "id": 162028458,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553849617
    },
    {
        "content": "<p>It's not an impartial game because the winner of the game is \"the person controlling the black pieces\" or \"the person controlling the white pieces\", not \"the person who happens to have made a move corresponding to to black when black won the game\" or anything like that.</p>",
        "id": 162028810,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553850009
    },
    {
        "content": "<p>But in Scott's <code>Chess'</code> it is just the last player who could make a valid move that wins. You lose if you can't make a valid move.</p>",
        "id": 162028968,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553850187
    },
    {
        "content": "<p>I either don't understand your objection, Kevin, or agree that Johan's reply answers it.</p>",
        "id": 162029206,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553850455
    },
    {
        "content": "<p>Another example could be \"tic-tac-toe\" or \"noughts-and-crosses\" as an impartial game. Again there is a token (labelled \"noughts\" and \"crosses\" on the two sides) which is flipped after each move. On a players turn, if there is not already a line of three marks of the opposite symbol already on the board, they must add one mark of the current symbol to an unfilled square.</p>",
        "id": 162029315,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553850571
    },
    {
        "content": "<p>I think that is an impartial description of noughts and crosses. (Except that all draws are converted into 1st player wins, because whoever goes second in a drawn game will have no where to put their 5th mark.)</p>",
        "id": 162029377,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553850620
    },
    {
        "content": "<p>if you formalize impartial games and chess in Lean then maybe I can try to prove it :P</p>",
        "id": 162029404,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553850663
    },
    {
        "content": "<p>Notice that these games behave very differently under sum of games than the usual versions of chess and noughts and crosses do, which is I think why people don't usually say they are impartial.</p>",
        "id": 162029417,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553850683
    },
    {
        "content": "<p>I'd been thinking this was a great student project, but I've had this nagging worry I don't understand anything because of not understanding this \"chess is not impartial\" claim.</p>",
        "id": 162029505,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553850747
    },
    {
        "content": "<p>If you just regard a game like nim or noughts and crosses as a finite tree of possibilities (and make up some arbitrary rule as to who wins in the event of a tie in noughts and crosses) then of course you can evaluate every position, when considered a regular 2-player game, as a winning or a losing position, and then you can assign nimbers to every node on the tree and there you have it, nim theory applies. This would work for any game for which the game tree is finite. So in this weak sense every game is equivalent to an impartial game.</p>",
        "id": 162029850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553851194
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I think Scott is trying to use <em>transport of structure</em>. He has an equiv <code>X =~ Y</code>. Both sides are games, and the equiv seems to respect structure. One of them is impartial, so the other should also be impartial. That's our promise, our mathematician's honour code, right?</p>",
        "id": 162030054,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553851387
    },
    {
        "content": "<p>So somewhere this breaks down. But I don't see where.</p>",
        "id": 162030064,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553851402
    },
    {
        "content": "<p>Probably because I don't know what a game is.</p>",
        "id": 162030067,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553851411
    },
    {
        "content": "<p>So what is the stronger equivalence relation? I guess I'm failing to conceive of a definition of game that distinguishes <code>Chess</code> and <code>Chess'</code>.</p>",
        "id": 162030081,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553851425
    },
    {
        "content": "<p>Obviously they have different rule books.</p>",
        "id": 162030089,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553851436
    },
    {
        "content": "<p>But this is a step in the wrong direction, at least as far as combinatorial game theory goes. You can drop requirements about the normal play rule, you can consider games with \"scores\" such as dots and boxes, where the winner is not the player who moves last but the player with the biggest score -- all these games are just people wandering around a game tree, and every game tree can be made into an impartial game, but then I think you're throwing away the structure which Conway et al want to analyse.</p>",
        "id": 162030138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553851446
    },
    {
        "content": "<p>You should go back to writing <code>iso_induction</code>. Then Lean can tell you the answer to your question.</p>",
        "id": 162030147,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553851463
    },
    {
        "content": "<p>I think you are right Scott, but adding the token changes the game</p>",
        "id": 162030183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553851511
    },
    {
        "content": "<p>okay -- but on the \"score\" issue --- don't you just say that there is a second phase in dots and boxes, where we take turns \"counting\" our captured squares? (so whoever captured fewer loses once they don't have a next one to count?)</p>",
        "id": 162030206,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553851532
    },
    {
        "content": "<p>that is, it's not an isomorphism because it's not a bijection</p>",
        "id": 162030208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553851538
    },
    {
        "content": "<p>because two chess' positions become one chess position</p>",
        "id": 162030220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553851554
    },
    {
        "content": "<p>oh.</p>",
        "id": 162030285,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553851583
    },
    {
        "content": "<p>Another way to put it is, if we are playing chess, then stop and have lunch and come back, will we know who should continue?</p>",
        "id": 162030294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553851596
    },
    {
        "content": "<p>Depends on how much alcohol was consumed</p>",
        "id": 162030308,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553851616
    },
    {
        "content": "<p>(friends at Berkeley would sometimes just continue their game over lunch, as they apparently didn't need the board or the pieces, let alone the damn token)</p>",
        "id": 162030344,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553851655
    },
    {
        "content": "<p>I'm not exactly sure what \"two chess' positions become one chess position\" means. I haven't been thinking of a game as a \"set of positions\". I thought a game is just a list of games.</p>",
        "id": 162030460,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553851755
    },
    {
        "content": "<p>(i.e. when you make a move, you've entered a new game)</p>",
        "id": 162030467,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553851765
    },
    {
        "content": "<p>is there a coordinated dance move that, after performing, will not change the chess board but render the opposite player the one to play?</p>",
        "id": 162030473,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553851770
    },
    {
        "content": "<p>The way chess or dots and boxes are played normally does not conform with the impartial combinatorial game theory story, but there's nothing to stop you playing them that way. They just become different games, so combinatorial game theory applied in this way will tell you nothing about chess played the usual way</p>",
        "id": 162030475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553851780
    },
    {
        "content": "<p>:-( I'm still confused, sorry.</p>",
        "id": 162030565,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553851829
    },
    {
        "content": "<p>Combinatorial game theory is all about higher invariants beyond who is going to win</p>",
        "id": 162030579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553851848
    },
    {
        "content": "<p>So it can tell you things about chess which nobody cares about</p>",
        "id": 162030602,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553851871
    },
    {
        "content": "<p>ah :-)</p>",
        "id": 162030604,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553851880
    },
    {
        "content": "<p>Such as what happens if we change the motivation of the players</p>",
        "id": 162030611,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553851889
    },
    {
        "content": "<p>Noam Elkies wrote an article about combinatorial game theory applied to chess</p>",
        "id": 162030686,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553851948
    },
    {
        "content": "<p><a href=\"https://arxiv.org/abs/math/9905198\" target=\"_blank\" title=\"https://arxiv.org/abs/math/9905198\">https://arxiv.org/abs/math/9905198</a> ?</p>",
        "id": 162030697,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553851970
    },
    {
        "content": "<p>pretty sure people who play chess have no motivation to start with :P</p>",
        "id": 162030716,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553851985
    },
    {
        "content": "<p>Not considered as an impartial game, but this whole issue of \"how many moves ahead am I\"</p>",
        "id": 162030718,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553851986
    },
    {
        "content": "<p>or else they would be doing perfectoid spaces in Lean</p>",
        "id": 162030720,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553851994
    },
    {
        "content": "<p>Yes that's the one</p>",
        "id": 162030725,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553852012
    },
    {
        "content": "<p>The difference between Elkies' analysis and what Scott is suggesting is that Elkies is considering the game in the following form: if black chooses to play in another game then white can choose to play a move on the board with their white pieces, even if white played last. With Scott's modification the moves would be forced to alternate. In the unlikely event that a game of chess does split up into two completely independent subgames then it's Elkies' interpretation which would be the correct one.</p>",
        "id": 162031318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553852755
    },
    {
        "content": "<p>Ah, okay, I think I understand. This agrees with what I said above:</p>\n<blockquote>\n<p>Notice that these games behave very differently under sum of games than the usual versions of chess and noughts and crosses do</p>\n</blockquote>",
        "id": 162031414,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553852853
    },
    {
        "content": "<p>(Man, I am trying really hard not to write this grant review tonight...)</p>",
        "id": 162031421,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553852865
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>inductive game : Type\n| intro : Π L R : list game, game\n</pre></div>",
        "id": 162031425,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553852868
    },
    {
        "content": "<p>Did you look at ONAG? That's the place to read about how to formalise the theory</p>",
        "id": 162031483,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553852925
    },
    {
        "content": "<p>In <code>Chess</code>, the lists <code>L</code> are <code>R</code> are different. In <code>Chess'</code>, they are the same. The same player wins in either, but everything else is different.</p>",
        "id": 162031603,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553853057
    },
    {
        "content": "<p>Earlier I had just been missing that the definition of a game consisted of _two_ sets of moves, one for <code>L</code> and one for <code>R</code>.</p>",
        "id": 162031625,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553853089
    },
    {
        "content": "<p>By the way, Elkies' claim that combinatorial game theory has something to say about dots and boxes has not really stood the test of time. Many of the top players now know nothing at all about combinatorial game theory, they just know Euler's formula.</p>",
        "id": 162031629,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553853095
    },
    {
        "content": "<p>Oh, and that definition I gave is wrong, of course. It should be something like</p>\n<div class=\"codehilite\"><pre><span></span>import data.finset\n\ninductive game : Type\n| intro : Π L R : finset game, game\n</pre></div>\n\n\n<p>but that isn't allowed :-(</p>",
        "id": 162031706,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553853152
    },
    {
        "content": "<blockquote>\n<p>In <code>Chess</code>, the lists <code>L</code> are <code>R</code> are different. In <code>Chess'</code>, they are the same. The same player wins in either, but everything else is different.</p>\n</blockquote>\n<p>Aah, excellent! This is the correct answer: I was somehow edging towards it but this answer is much better. I should re-read ONAG now I know about Lean!</p>",
        "id": 162031767,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553853243
    },
    {
        "content": "<p>I guess we'll just have some equivalence relations later.</p>",
        "id": 162031785,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553853245
    },
    {
        "content": "<p>You have to be careful about the equivalence relation.</p>",
        "id": 162031794,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553853266
    },
    {
        "content": "<p>The same player wins in Chess and Chess'. But if that's your equivalence relation then there are only two games.</p>",
        "id": 162031809,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553853289
    },
    {
        "content": "<p>Apparently it is: <code>G</code> and <code>G'</code> are equivalent if <code>G+H</code> has the same outcome as <code>G'+H</code> for all impartial <code>H</code>.</p>",
        "id": 162031817,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553853300
    },
    {
        "content": "<p>It's a bit like bool and Prop ;-)</p>",
        "id": 162031823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553853303
    },
    {
        "content": "<blockquote>\n<p>Apparently it is: <code>G</code> and <code>G'</code> are equivalent if <code>G+H</code> has the same outcome as <code>G'+H</code> for all impartial <code>H</code>.</p>\n</blockquote>\n<p>Aah but then Chess and Chess' won't be equivalent at all.</p>",
        "id": 162031835,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553853322
    },
    {
        "content": "<p>(And impartial now has a clear meaning: <code>L  = R</code> (... perhaps up to a permutation))</p>",
        "id": 162031836,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553853328
    },
    {
        "content": "<p>exactly, same outcome, different combinatorial games</p>",
        "id": 162031842,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553853343
    },
    {
        "content": "<p>I am now slightly annoyed that I am not going to work today -- my copy of ONAG is sitting on my shelf in my office.</p>",
        "id": 162031904,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553853388
    },
    {
        "content": "<blockquote>\n<p>Oh, and that definition I gave is wrong, of course. It should be something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">game</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">L</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">game</span><span class=\"o\">,</span> <span class=\"n\">game</span>\n</pre></div>\n\n\n<p>but that isn't allowed :-(</p>\n</blockquote>\n<p>That's one thing that the QPF stuff should support!</p>",
        "id": 162031923,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553853430
    },
    {
        "content": "<p>Scott, this is exactly the sort of mathematics that people who like computer science are into. It would not surprise me if this stuff had all been formalised before in another prover.</p>",
        "id": 162031944,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553853480
    },
    {
        "content": "<p>QPF? Ah: <a href=\"https://lean-forward.github.io/lean-together/2019/slides/avigad.pdf\" target=\"_blank\" title=\"https://lean-forward.github.io/lean-together/2019/slides/avigad.pdf\">https://lean-forward.github.io/lean-together/2019/slides/avigad.pdf</a></p>",
        "id": 162031945,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553853480
    },
    {
        "content": "<p>Scott -- this might be a really good project for your students. I searched online and nothing immediately jumped out at me</p>",
        "id": 162032806,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553854249
    },
    {
        "content": "<p>How come list game is allowed but finset game is not?</p>",
        "id": 162032834,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553854287
    },
    {
        "content": "<p>(In the definition of game)</p>",
        "id": 162032857,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553854315
    },
    {
        "content": "<p>You could define a game_aux with lists and then put some equivalence relation on it and then make the constructor and eliminator that you want</p>",
        "id": 162032942,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553854395
    },
    {
        "content": "<p>I feel obligatory to note that the version with one node instead of two nodes is the hereditarily finite sets and should be in mathlib</p>",
        "id": 162032970,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553854432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> can you get Scott's definition to compile? The empty game is a game and all other games can be built using what Scott says. I think. Find a copy of Conway's \"On numbers and games\" to check the formal definition</p>",
        "id": 162033037,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553854472
    },
    {
        "content": "<p>it won't compile</p>",
        "id": 162033047,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553854483
    },
    {
        "content": "<p>this had been discussed before</p>",
        "id": 162033051,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553854486
    },
    {
        "content": "<p>But can you make it already? Wait -- I think all numbers are games too</p>",
        "id": 162033087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553854515
    },
    {
        "content": "<p>it is in mathlib, kenny</p>",
        "id": 162033093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553854525
    },
    {
        "content": "<p>Take a look at Conway's definition in the book</p>",
        "id": 162033096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553854529
    },
    {
        "content": "<p>that's what I mean</p>",
        "id": 162033115,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553854556
    },
    {
        "content": "<p>by \"should\"</p>",
        "id": 162033116,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553854558
    },
    {
        "content": "<p>I wish I could remember this stuff better, it's been a while</p>",
        "id": 162033131,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553854564
    },
    {
        "content": "<p>English is confusing</p>",
        "id": 162033172,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553854567
    },
    {
        "content": "<p>it is <code>set_theory.lists</code>, although it hasn't been developed much</p>",
        "id": 162033215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553854624
    },
    {
        "content": "<p>I wanted to make a setting for naive set theory like you might find in Kevin's problem sets</p>",
        "id": 162033230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553854646
    },
    {
        "content": "<p>for stuff like <code>{2, {3, 4}, {}}</code></p>",
        "id": 162033240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553854662
    },
    {
        "content": "<p>i.e. construct a model of ZFC-I</p>",
        "id": 162033242,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553854664
    },
    {
        "content": "<blockquote>\n<p>It seems to us, however, that mathematics has now reached the stage where<br>\nformalisation within some particular axiomatic set theory is irrelevant,<br>\neven for foundational studies. It should be possible to specify conditions on a<br>\nmathematical theory which would suffice for embeddability within ZF<br>\n(supplemented by additional axioms of infinity if necessary), but which do<br>\nnot otherwise restrict the possible constructions in that theory. Of course the<br>\nconditions would apply to ZF itself, and to other possible theories that have<br>\nbeen proposed as suitable foundations for mathematics (certain theories of<br>\ncategories, etc.), but would not restrict us to any particular theory. This<br>\nappendix is in fact a cry for a Mathematicians' Liberation Movement!<br>\nAmong the permissible kinds of construction we should have:<br>\n(i) Objects may be created from earlier objects in any reasonably con-<br>\nconstructive fashion.<br>\n(ii) Equality among the created objects can be any desired equivalence<br>\nrelation.</p>\n</blockquote>\n<p>From ONAG, appendix to part 0. (i) says he wants a calculus of inductive constructions. (ii) says he wants to be able to transport certain constructions along equivalence relations. That's what I want too.</p>",
        "id": 162034332,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553855683
    },
    {
        "content": "<p>ONAG := Conway, \"On numbers and games\".</p>",
        "id": 162034344,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553855701
    },
    {
        "content": "<p>Seems to me that </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">game</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">L</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">game</span><span class=\"o\">,</span> <span class=\"n\">game</span>\n</pre></div>",
        "id": 162034966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553856299
    },
    {
        "content": "<p>And so you can start by constructing the zero game by letting L and R be the empty set. Notation G = {L|R} for <code>game.intro L R</code></p>",
        "id": 162034996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553856334
    },
    {
        "content": "<p>But then there's an equivalence relation on these games</p>",
        "id": 162035002,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553856344
    },
    {
        "content": "<p>Two games G and H have the same _value_ if G - H = 0; G - H is defined to be G+(-H), -{L|R} is defined to be {R|L}, addition is defined recursively with {GL|GR}+{HL|LR}={{g+H : g in GL} union {G+h : h in HL}|{g+H : g in GR} union {G+h : h in HR}}, and G=0 is defined to mean that the game is a second player win.</p>",
        "id": 162035706,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553857014
    },
    {
        "content": "<p>The winner of a game is defined recursively. Why can't I implement this all in Lean? Is it too wacky to be an inductive type?</p>",
        "id": 162035880,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553857201
    },
    {
        "content": "<p>It seems pretty reasonable. Lean compiles the inductive type a bit strangely. Defining addition requires some work to prove well-foundedness, but doesn't seem impossible.</p>",
        "id": 162037774,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553858934
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>inductive game : Type\n| intro : Π L R : list game, game\n\ndef game.L : game → list game\n| (game.intro L R) := L\ndef game.R : game → list game\n| (game.intro L R) := R\n\ninstance : has_neg game :=\n{ neg := λ G, game.intro G.R G.L }\n\n-- fails with well-foundedness errors:\ndef add : game → game → game\n| G₁@(game.intro L₁ R₁) G₂@(game.intro L₂ R₂) :=\n  game.intro\n    (L₁.map(λ G, add G G₂) ++ L₂.map(λ G, add G₁ G))\n    (R₁.map(λ G, add G G₂) ++ R₂.map(λ G, add G₁ G))\n</pre></div>",
        "id": 162037798,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553858957
    },
    {
        "content": "<p>I think we'd want to define <code>list.map_mem</code>, to get the <code>sizeof</code> inequalities. Something like:</p>\n<div class=\"codehilite\"><pre><span></span>def list.map_mem {α β : Type} : Π (L : list α) (f : Π a : α, a ∈ L → β), list β\n| [] f := []\n| L@(h :: t) f := f h (by simp) :: (list.map_mem t (λ a h, f a (or.inr h)))\n\ndef add : game → game → game\n| G₁@(game.intro L₁ R₁) G₂@(game.intro L₂ R₂) :=\n  game.intro\n    (L₁.map_mem(λ G h, add G G₂) ++ L₂.map_mem(λ G h, add G₁ G))\n    (R₁.map_mem(λ G h, add G G₂) ++ R₂.map_mem(λ G h, add G₁ G))\n</pre></div>\n\n\n<p>so now at the recursive site we have <code>h : G ∈ L₁</code>, etc.</p>",
        "id": 162038136,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553859336
    },
    {
        "content": "<p>(This still doesn't work.)</p>",
        "id": 162038143,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553859347
    },
    {
        "content": "<p>Ages ago I was playing around with this and wrote this file. <a href=\"https://github.com/ChrisHughes24/leanstuff/blob/master/game.lean\" target=\"_blank\" title=\"https://github.com/ChrisHughes24/leanstuff/blob/master/game.lean\">https://github.com/ChrisHughes24/leanstuff/blob/master/game.lean</a> I did define what it means for a position to be winning, and there's an unfinished proof of the winning strategy for the game discussed in this video <a href=\"https://www.youtube.com/watch?v=9KABcmczPdg\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=9KABcmczPdg\">https://www.youtube.com/watch?v=9KABcmczPdg</a> I also started to define noughts and crosses.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"9KABcmczPdg\" href=\"https://www.youtube.com/watch?v=9KABcmczPdg\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=9KABcmczPdg\"><img src=\"https://i.ytimg.com/vi/9KABcmczPdg/default.jpg\"></a></div>",
        "id": 162038859,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1553860076
    },
    {
        "content": "<p>Here's where I got to: <a href=\"https://gist.github.com/semorrison/8d9d72be5b89bc57c02a7c0f1e32a5ed\" target=\"_blank\" title=\"https://gist.github.com/semorrison/8d9d72be5b89bc57c02a7c0f1e32a5ed\">https://gist.github.com/semorrison/8d9d72be5b89bc57c02a7c0f1e32a5ed</a></p>",
        "id": 162039415,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553860638
    },
    {
        "content": "<p>Awww, no syntax highlighting. I can't parse Lean without it <span aria-label=\"confounded\" class=\"emoji emoji-1f616\" role=\"img\" title=\"confounded\">:confounded:</span></p>",
        "id": 162039427,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553860674
    },
    {
        "content": "<p>I successfully defined addition of games using the definition above, and a very hackish tactic to proving monotonicity of the recursion.</p>",
        "id": 162039479,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553860685
    },
    {
        "content": "<p>Presumably a generic version of <code>lemma game.sizeof_mem (L : list game) (G : game) (h : G ∈ L) : game.sizeof G &lt; sizeof L :=</code> is already available somewhere?</p>",
        "id": 162039568,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553860775
    },
    {
        "content": "<blockquote>\n<p>Seems to me that </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">game</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">L</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">game</span><span class=\"o\">,</span> <span class=\"n\">game</span>\n</pre></div>\n\n\n</blockquote>\n<p>It's in theory possible to have this inductive with <code>finset</code>. With <code>set</code> it's inconsistent:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">logic</span><span class=\"bp\">.</span><span class=\"n\">function</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">game</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kn\">constant</span> <span class=\"n\">game</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">game</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">game</span> <span class=\"bp\">→</span> <span class=\"n\">game</span>\n<span class=\"kn\">constant</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">game</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">game</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">L</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">game</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">L</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">g</span>\n<span class=\"kn\">axiom</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">game</span><span class=\"bp\">.</span><span class=\"n\">rec_eq</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">game</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">L</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">game</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">L</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">game</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">game</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">L</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">H</span> <span class=\"n\">L</span> <span class=\"n\">R</span>\n\n<span class=\"n\">def</span> <span class=\"n\">game</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"o\">:</span> <span class=\"n\">game</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">game</span> <span class=\"o\">:=</span> <span class=\"n\">game</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">L</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">game</span><span class=\"bp\">.</span><span class=\"n\">right_eq</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">game</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">L</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"bp\">=</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">game</span><span class=\"bp\">.</span><span class=\"n\">rec_eq</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">cantor_injective</span> <span class=\"n\">game</span> <span class=\"o\">(</span><span class=\"n\">game</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"err\">∅</span><span class=\"o\">)</span> <span class=\"err\">$</span>\n<span class=\"bp\">λ</span> <span class=\"n\">R</span> <span class=\"n\">R&#39;</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">game</span><span class=\"bp\">.</span><span class=\"n\">right_eq</span> <span class=\"err\">∅</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"err\">$</span>\n  <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">game</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">game</span><span class=\"bp\">.</span><span class=\"n\">right_eq</span> <span class=\"err\">∅</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 162067308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553880963
    },
    {
        "content": "<p>Hmm. <code>game</code> is a proper class, so Cantor's diagonal argument does not apply.</p>",
        "id": 162068098,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553881499
    },
    {
        "content": "<p>Have you heard of the hypergame paradox? There is actually a contradiction lurking, and it has to do with thinking that there is only one type of all games. Saying it's a proper class doesn't save you, it only reinterprets what <code>set game</code> means</p>",
        "id": 162069993,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553882719
    },
    {
        "content": "<p>right -- I don't want to allow an arbitrary collection of games -- only collections \"small enough to be sets\".</p>",
        "id": 162070299,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553882890
    },
    {
        "content": "<p>I think you have to do some kind of <code>pSet</code> like construction to get that</p>",
        "id": 162070630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553883124
    },
    {
        "content": "<p>it seems pretty essentially set-theoretic</p>",
        "id": 162070658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553883153
    }
]