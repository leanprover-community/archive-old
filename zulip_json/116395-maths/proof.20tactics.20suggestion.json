[
    {
        "content": "<p>I'm trying to practice my theorem proving in lean, but I'm relatively new. Do any experts have lean-ic (read: pythonic) suggestions for ways to tackle this proof. I'd also like it to be readable. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">imo_1977_p6</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 277512688,
        "sender_full_name": "Mason McBride",
        "timestamp": 1648884278
    },
    {
        "content": "<p>The first thing is to figure out the math-proof. What's the strategy you want to take?</p>",
        "id": 277512805,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1648884463
    },
    {
        "content": "<p>I'm unsure of the direct path, by my strategy is to use induction and also prove f n &gt; n and f n &lt;= n to imply f n = n</p>",
        "id": 277512942,
        "sender_full_name": "Mason McBride",
        "timestamp": 1648884659
    },
    {
        "content": "<p>It's almost always easier to find the math-proof first, and then code it up in lean. But if you want to prove a subgoal by induction, the following format might be helpful:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n   <span class=\"k\">have</span> <span class=\"n\">first_goal</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">pnat.strong_induction_on</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 277513080,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1648884902
    },
    {
        "content": "<p>(Certainly don't try any IMO level problems without writing out an informal proof on paper first! Indeed, the lean-ic way to proceed would ideally be to write the module-doc first, containing the human readable informal proof. :-)</p>",
        "id": 277513644,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1648885734
    },
    {
        "content": "<p>thanks! I like this format. is there any reason it's intros h hk and not intros k hk?</p>",
        "id": 277513705,
        "sender_full_name": "Mason McBride",
        "timestamp": 1648885831
    },
    {
        "content": "<p>those are just the names of the local variables, you can name them as you wish (and <code>k</code> probably makes more sense than <code>h</code> here)</p>",
        "id": 277513808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648885976
    },
    {
        "content": "<p>does anyone know if I can get f(n) &lt; n + 1 from f(f(n)) &lt; f(n+1)?</p>",
        "id": 277545959,
        "sender_full_name": "Mason McBride",
        "timestamp": 1648926320
    },
    {
        "content": "<p>only if <code>f</code> is weakly increasing</p>",
        "id": 277546398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648926840
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/archive/imo/imo1977_q6.lean\">https://github.com/leanprover-community/mathlib/blob/master/archive/imo/imo1977_q6.lean</a></p>",
        "id": 277613793,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1648984308
    }
]