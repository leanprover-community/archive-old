[
    {
        "content": "<p>I've just noticed the new (<a href=\"https://github.com/leanprover-community/mathlib/commit/f5d73bdd1376304f9ac6b5c06cbe89d7162c22ba#diff-e5b26efbb6ead9f50b4cfd7c0b04a07f\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/commit/f5d73bdd1376304f9ac6b5c06cbe89d7162c22ba#diff-e5b26efbb6ead9f50b4cfd7c0b04a07f\">since December</a>) definitions that give variations on continuity.</p>\n<p>I was able to prove continuity of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">x</span></span></span></span> on <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">[0,1]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">[</span><span class=\"mord mathrm\">0</span><span class=\"mpunct\">,</span><span class=\"mord mathrm\">1</span><span class=\"mclose\">]</span></span></span></span> without much trouble.  Proving continuity of  <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">1/x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\">x</span></span></span></span> on <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">(0,1]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">(</span><span class=\"mord mathrm\">0</span><span class=\"mpunct\">,</span><span class=\"mord mathrm\">1</span><span class=\"mclose\">]</span></span></span></span> seems to require some more serious machinery and I'm stuck.  Could someone offer me some advice on the second unfinished proof below?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">intervals</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">exponential</span>\n<span class=\"kn\">open</span> <span class=\"n\">real</span> <span class=\"n\">set</span>\n\n<span class=\"c1\">-- Give a handle on the set [0,1] ⊂ ℝ</span>\n<span class=\"n\">def</span> <span class=\"n\">unit_interval</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Define an identity function on the subtype corresponding to this set</span>\n<span class=\"n\">def</span> <span class=\"n\">restricted_id</span> <span class=\"o\">:=</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">restrict</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">unit_interval</span>\n\n<span class=\"c1\">-- show that restricted_id is continuous</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">cont_restricted_id</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">restricted_id</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">continuous_subtype_val</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n<span class=\"c1\">-- main idea: &quot;getting the value of the subtype&quot; unifies with &quot;restricted_id&quot;</span>\n\n<span class=\"c1\">-- now show that the identity function (on ℝ) is continuous on the unit interval</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">continuous_on_unit_interval_id</span> <span class=\"o\">:</span> <span class=\"n\">continuous_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">unit_interval</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">continuous_on_iff_continuous_restrict</span><span class=\"o\">],</span>\n<span class=\"n\">exact</span> <span class=\"n\">cont_restricted_id</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- This breaks for 1/x, obviously.</span>\n<span class=\"c1\">-- First of all, we can&#39;t just use subtype.val, since that won&#39;t unify.</span>\n<span class=\"c1\">-- To get some hope that it will go through, let&#39;s start over with the interval (0,1].</span>\n<span class=\"n\">def</span> <span class=\"n\">ounit_interval</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Ioc</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">restricted_inv</span> <span class=\"o\">:=</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">restrict</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">ounit_interval</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">cont_restricted_inv</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">restricted_inv</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span><span class=\"o\">,</span>\n<span class=\"n\">unfold</span> <span class=\"n\">restricted_inv</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 162254805,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1554136160
    },
    {
        "content": "<p>I guess that one would not expect a general library function in the topological spaces library to help you out here. This is a specific question about real numbers. It would not surprise me if the answer to your question was somewhere in the real number library. I don't think the result follows from general topological principles.</p>",
        "id": 162255163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554136406
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/f5d73bdd1376304f9ac6b5c06cbe89d7162c22ba/src/topology/instances/real.lean#L148\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/f5d73bdd1376304f9ac6b5c06cbe89d7162c22ba/src/topology/instances/real.lean#L148\">https://github.com/leanprover-community/mathlib/blob/f5d73bdd1376304f9ac6b5c06cbe89d7162c22ba/src/topology/instances/real.lean#L148</a></p>",
        "id": 162255282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554136486
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">cont_restricted_inv</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">restricted_inv</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">restricted_inv</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">restrict</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_div_eq_inv</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">continuous_inv</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ne_of_lt</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"n\">continuous_subtype_val</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 162255343,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1554136543
    },
    {
        "content": "<p>The guts of it is I guess here: <code>real.uniform_continuous_inv</code></p>",
        "id": 162255351,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554136547
    },
    {
        "content": "<p><code>real.uniform_continuous_inv</code> won't help, because it isn't uniform continuous on that interval.</p>",
        "id": 162255485,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1554136641
    },
    {
        "content": "<p>Right. But you use <code>real.continuous_inv</code> and if you trace it back the proof of that uses <code>real.uniform_continuous_inv</code></p>",
        "id": 162255521,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554136672
    },
    {
        "content": "<p>via <code>tendsto_inv</code></p>",
        "id": 162255607,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554136702
    },
    {
        "content": "<p>This is why Joe will find it difficult proving this result just by thinking about topology.</p>",
        "id": 162255638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554136732
    },
    {
        "content": "<p>Thanks for the sample proof Chris. Kevin, thanks for the narrative as well, however I am now a bit baffled by the logic.</p>",
        "id": 162255987,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1554136965
    }
]