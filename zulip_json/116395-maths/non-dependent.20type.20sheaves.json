[
    {
        "content": "<p>I guess this is well-known but it's only just dawned on me. Rings are set up in a semi-bundled way in mathlib. So a sheaf of rings needs to involve a dependent type, because it's <code>F : opens X -&gt; Type</code> followed by <code>[hF : Pi (U : opens X), comm_ring (F U)]</code>. But if rings were completely bundled then we could just have <code>F : opens X -&gt; CommRing</code> and no dependent type is needed. Does this mean I should switch to Isabelle or are there dependent types under the hood in this setting?</p>",
        "id": 192499117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585731221
    },
    {
        "content": "<p><code>CommRing</code> is a dependent type</p>",
        "id": 192499523,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585731438
    },
    {
        "content": "<p>Disclaimer: I never tried Isabelle, and I don't know what it can (not) handle.</p>",
        "id": 192499555,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585731470
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/non-dependent.20type.20sheaves/near/192499523\" title=\"#narrow/stream/116395-maths/topic/non-dependent.20type.20sheaves/near/192499523\">said</a>:</p>\n<blockquote>\n<p><code>CommRing</code> is a dependent type</p>\n</blockquote>\n<p>I see. I thought it might well be something like this.</p>",
        "id": 192500974,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585732401
    },
    {
        "content": "<p>Another example: we have several <code>measurable_space</code> instances defined to be <code>top</code>.</p>",
        "id": 192504330,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585734481
    },
    {
        "content": "<p>I create this(<a href=\"https://gist.github.com/Jack-Pumpkinhead/cc72ecfc6f32587f0b7ac0ab39c3f074\" title=\"https://gist.github.com/Jack-Pumpkinhead/cc72ecfc6f32587f0b7ac0ab39c3f074\">cat.lean</a>) several days ago and have some initial thoughts. I think it might possible to create one completely bundled structure and then get all sorts of things (unbundled structure, like cat/cat'/cat'/... in the file, and proof of equivalence between them or something else) automatically.</p>",
        "id": 192644580,
        "sender_full_name": "Nick Chopper",
        "timestamp": 1585822125
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270203\">@Nick Chopper</span> Sorry, I'm a bit dense... what exactly is your proposal?</p>",
        "id": 192648631,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585824861
    },
    {
        "content": "<p>bundled categories</p>",
        "id": 192651822,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585827302
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> auto coe between bundled/unbundled structure (loop?), so as to use type class fill in unbundled one and then actually get a bundled one. I find it has been solved by <code>category_theory.bundled</code> in the case of one-parameter class, but I wonder if it is possible to generate code like inductive type (say, unbundled structure from bundled (don't know how to avoid name confliction (instead of adding <code>'</code>) yet))</p>",
        "id": 192655457,
        "sender_full_name": "Nick Chopper",
        "timestamp": 1585829520
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 192655498,
        "sender_full_name": "Nick Chopper",
        "timestamp": 1585829524
    },
    {
        "content": "<p>sorry for poor english</p>",
        "id": 192655518,
        "sender_full_name": "Nick Chopper",
        "timestamp": 1585829537
    }
]