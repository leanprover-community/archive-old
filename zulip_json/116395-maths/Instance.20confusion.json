[
    {
        "content": "<p>Here's where I'm at right now, and presumably this suggests something has been set up wrong, can anyone help?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">adjunction</span><span class=\"bp\">.</span><span class=\"n\">limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">closed</span><span class=\"bp\">.</span><span class=\"n\">cartesian</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u‚ÇÅ</span> <span class=\"n\">u‚ÇÇ</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category</span> <span class=\"n\">limits</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_finite_products</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">cartesian_closed</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÇ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_finite_products</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">cartesian_closed</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"err\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">cartesian_closed_functor</span> <span class=\"o\">[</span><span class=\"n\">preserves_limits_of_shape</span> <span class=\"o\">(</span><span class=\"n\">discrete</span> <span class=\"n\">walking_pair</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">comparison_iso</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">is_iso</span> <span class=\"o\">(</span><span class=\"n\">exp_comparison</span> <span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">))</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"err\">‚•§</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">frobenius_map</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">adj</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"err\">‚ä£</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"err\">‚®Ø</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">B</span> <span class=\"err\">‚®Ø</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"n\">prod_comparison</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">‚â´</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">adj</span><span class=\"bp\">.</span><span class=\"n\">counit</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">adj</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"err\">‚ä£</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">preserves_limits_of_shape</span> <span class=\"o\">(</span><span class=\"n\">discrete</span> <span class=\"n\">walking_pair</span><span class=\"o\">)</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">adjunction</span><span class=\"bp\">.</span><span class=\"n\">right_adjoint_preserves_limits</span> <span class=\"n\">adj</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">adj</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"err\">‚ä£</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">‚àÄ</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">is_iso</span> <span class=\"o\">(</span><span class=\"n\">frobenius_map</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">adj</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">cartesian_closed_functor</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202995466,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594045092
    },
    {
        "content": "<p>Actually I suppose the point here is that in maths the question of if a functor is cartesian closed first needs binary products to be preserved, and in my case it's a right adjoint so that's fine</p>",
        "id": 202996167,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594045424
    },
    {
        "content": "<p>But in lean this inference isn't immediate so it would be sensible to have preservation of binary prods as part of the definition of cartesian closed functor</p>",
        "id": 202996299,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594045478
    },
    {
        "content": "<p>What exactly is the problem? Do you get an error?</p>",
        "id": 202996300,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594045479
    },
    {
        "content": "<p>Also, should the <code>haveI</code> be a <code>letI</code>?</p>",
        "id": 202996316,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594045488
    },
    {
        "content": "<p>The instance at the bottom doesn't have a valid statement</p>",
        "id": 202996355,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594045503
    },
    {
        "content": "<p>Potentially, I'm not sure it makes a huge difference though since preserving limits is subsingleton</p>",
        "id": 202996527,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594045604
    },
    {
        "content": "<p>I've got to step away for a little - I'll continue trying later</p>",
        "id": 202996655,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594045679
    }
]