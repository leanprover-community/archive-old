[
    {
        "content": "<p>This is a maths question, where I'm hoping I'm missing an easier proof.</p>\n<p>Say I have a biproduct of two objects <code>X</code> and <code>Y</code>, with projection maps <code>biprod.fst : X ⊞ Y ⟶ X</code> and <code>biprod.snd : X ⊞ Y ⟶ Y</code>, and inclusion maps <code>biprod.inl</code> and <code>biprod.inr</code>, satisfying the usual identities.</p>\n<p>I want to say that the square formed by <code>biprod.fst</code>, <code>biprod.snd</code>, and the zero maps <code>0 : X ⟶ 0</code> and <code>0 : Y ⟶ 0</code> is a pushout square.</p>\n<p>I was sure it was going to be easy, but ... the best I can come up with is:</p>\n<blockquote>\n<p>The biproduct is also a coproduct, so we can compute <code>pushout biprod.fst biprod.snd</code> as <code>coequalizer (biprod.fst ≫ biprod.inl) (biprod.snd ≫ biprod.inr)</code>, and then by assuming our category is preadditive, this is <code>cokernel (biprod.fst ≫ biprod.inl - biprod.snd ≫ biprod.inr)</code>, but then that map is an involution (calculate!), so an isomorphism, so that cokernel is zero.</p>\n</blockquote>\n<p>Any suggestions? Even just a compilation of this argument to one that avoids talking about coequalizers and cokernels would probably help. (Is it true without assuming preadditivity?)</p>",
        "id": 282731009,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652840199
    },
    {
        "content": "<p>If you have a square diagram with say <code>Z</code> instead of <code>0</code>, then I think it suffices to show that the maps from <code>A</code> and <code>B</code> to <code>Z</code> are both zero. But by the commutativity of the diagram and properties of the biproduct, the map from <code>A</code> to <code>Z</code> should factor via the inclusion of <code>A</code> to the biproduct, followed by the projection to <code>B</code> then the map from <code>B</code> to <code>Z</code>, and this should be zero from the properties of the biproduct. I haven't written anything down, but I think(???) this works?</p>",
        "id": 282732513,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652842065
    },
    {
        "content": "<p>I don't see the \"should factor\" step in that argument.</p>",
        "id": 282733155,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652842821
    },
    {
        "content": "<p>That's because the incl of <code>A</code> into the biprod followed by the projection to<code>A</code> is the identity</p>",
        "id": 282733265,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652842946
    },
    {
        "content": "<p>So write the map from <code>A</code> to <code>Z</code> as the incl of <code>A</code> to the biprod, followed by proj to <code>A</code> followed by the map to <code>Z</code>, then use the commutativity of the square</p>",
        "id": 282733289,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652843014
    },
    {
        "content": "<p>(sorry for the bad typesetting... I'm on mobile)</p>",
        "id": 282733341,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652843054
    },
    {
        "content": "<p>Perfect, thank you. :-)</p>",
        "id": 282733344,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652843063
    },
    {
        "content": "<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.25em\" columnalign=\"center center center\" columnspacing=\"0.5em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><munderover><mo stretchy=\"true\" minsize=\"3.0em\">→</mo><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow></mrow></mpadded><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow></mrow></mpadded></munderover></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mi>A</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow><mstyle displaystyle=\"false\" scriptlevel=\"1\"><mpadded width=\"0\" lspace=\"-1width\" voffset=\"0.7em\"><mrow><mrow></mrow></mrow></mpadded></mstyle><mo fence=\"false\" stretchy=\"true\" minsize=\"1.8em\" maxsize=\"1.8em\">↓</mo><mstyle displaystyle=\"false\" scriptlevel=\"1\"><mpadded width=\"0\" voffset=\"0.7em\"><mrow><mrow></mrow></mrow></mpadded></mstyle></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow><mstyle displaystyle=\"false\" scriptlevel=\"1\"><mpadded width=\"0\" lspace=\"-1width\" voffset=\"0.7em\"><mrow><mrow></mrow></mrow></mpadded></mstyle><mo fence=\"false\" stretchy=\"true\" minsize=\"1.8em\" maxsize=\"1.8em\">↓</mo><mstyle displaystyle=\"false\" scriptlevel=\"1\"><mpadded width=\"0\" voffset=\"0.7em\"><mrow><mrow></mrow></mrow></mpadded></mstyle></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mi>B</mi></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><munderover><mo stretchy=\"true\" minsize=\"3.0em\">→</mo><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow></mrow></mpadded><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow></mrow></mpadded></munderover></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mi>A</mi><mo>⊕</mo><mi>B</mi></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><munderover><mo stretchy=\"true\" minsize=\"3.0em\">→</mo><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow></mrow></mpadded><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow></mrow></mpadded></munderover></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mi>B</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow><mstyle displaystyle=\"false\" scriptlevel=\"1\"><mpadded width=\"0\" lspace=\"-1width\" voffset=\"0.7em\"><mrow><mrow></mrow></mrow></mpadded></mstyle><mo fence=\"false\" stretchy=\"true\" minsize=\"1.8em\" maxsize=\"1.8em\">↓</mo><mstyle displaystyle=\"false\" scriptlevel=\"1\"><mpadded width=\"0\" voffset=\"0.7em\"><mrow><mrow></mrow></mrow></mpadded></mstyle></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow><mstyle displaystyle=\"false\" scriptlevel=\"1\"><mpadded width=\"0\" lspace=\"-1width\" voffset=\"0.7em\"><mrow><mrow></mrow></mrow></mpadded></mstyle><mo fence=\"false\" stretchy=\"true\" minsize=\"1.8em\" maxsize=\"1.8em\">↓</mo><mstyle displaystyle=\"false\" scriptlevel=\"1\"><mpadded width=\"0\" voffset=\"0.7em\"><mrow><mrow></mrow></mrow></mpadded></mstyle></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow><mstyle displaystyle=\"false\" scriptlevel=\"1\"><mpadded width=\"0\" lspace=\"-1width\" voffset=\"0.7em\"><mrow><mrow></mrow></mrow></mpadded></mstyle><mo fence=\"false\" stretchy=\"true\" minsize=\"1.8em\" maxsize=\"1.8em\">↓</mo><mstyle displaystyle=\"false\" scriptlevel=\"1\"><mpadded width=\"0\" voffset=\"0.7em\"><mrow><mrow></mrow></mrow></mpadded></mstyle></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><munderover><mo stretchy=\"true\" minsize=\"3.0em\">→</mo><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow></mrow></mpadded><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow></mrow></mpadded></munderover></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mi>A</mi></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><munderover><mo stretchy=\"true\" minsize=\"3.0em\">→</mo><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow></mrow></mpadded><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow></mrow></mpadded></munderover></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mn>0</mn></mstyle></mtd></mtr><mtr></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{CD}\n0 @&gt;&gt;&gt; A \\\\\n@VVV @VVV\\\\\nB @&gt;&gt;&gt; A \\oplus B @&gt;&gt;&gt; B \\\\\n@VVV @VVV @VVV\\\\\n0 @&gt;&gt;&gt; A @&gt;&gt;&gt; 0\n\\end{CD}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:8.981em;vertical-align:-3.444em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:5.537em;\"><span style=\"top:-7.7829em;\"><span class=\"pstrut\" style=\"height:3.151em;\"></span><span class=\"mord\">0</span></span><span style=\"top:-5.944em;\"><span class=\"pstrut\" style=\"height:3.151em;\"></span><span class=\"mord cd-vert-arrow\"><span class=\"sizing reset-size6 size3 mtight cd-label-left\" style=\"bottom:0.8em;\"><span class=\"mord mtight\"></span></span><span class=\"mord\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.151em;\"><span style=\"top:-1.966em;\"><span class=\"pstrut\" style=\"height:2.616em;\"></span><span class=\"delimsizinginner delim-size1\"><span>↓</span></span></span><span style=\"top:-2.558em;\"><span class=\"pstrut\" style=\"height:2.616em;\"></span><span style=\"height:0.616em;width:0.6667em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='0.6667em' height='0.616em' style='width:0.6667em' viewBox='0 0 666.67 616' preserveAspectRatio='xMinYMin'><path d='M312 0 H355 V616 H312z M312 0 H355 V616 H312z'/></svg></span></span><span style=\"top:-3.166em;\"><span class=\"pstrut\" style=\"height:2.616em;\"></span><span class=\"delimsizinginner delim-size1\"><span>⏐</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.65em;\"><span></span></span></span></span></span></span><span class=\"sizing reset-size6 size3 mtight cd-label-right\" style=\"bottom:0.8em;\"><span class=\"mord mtight\"></span></span></span></span><span style=\"top:-4.0889em;\"><span class=\"pstrut\" style=\"height:3.151em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.151em;\"></span><span class=\"mord cd-vert-arrow\"><span class=\"sizing reset-size6 size3 mtight cd-label-left\" style=\"bottom:0.8em;\"><span class=\"mord mtight\"></span></span><span class=\"mord\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.151em;\"><span style=\"top:-1.966em;\"><span class=\"pstrut\" style=\"height:2.616em;\"></span><span class=\"delimsizinginner delim-size1\"><span>↓</span></span></span><span style=\"top:-2.558em;\"><span class=\"pstrut\" style=\"height:2.616em;\"></span><span style=\"height:0.616em;width:0.6667em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='0.6667em' height='0.616em' style='width:0.6667em' viewBox='0 0 666.67 616' preserveAspectRatio='xMinYMin'><path d='M312 0 H355 V616 H312z M312 0 H355 V616 H312z'/></svg></span></span><span style=\"top:-3.166em;\"><span class=\"pstrut\" style=\"height:2.616em;\"></span><span class=\"delimsizinginner delim-size1\"><span>⏐</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.65em;\"><span></span></span></span></span></span></span><span class=\"sizing reset-size6 size3 mtight cd-label-right\" style=\"bottom:0.8em;\"><span class=\"mord mtight\"></span></span></span></span><span style=\"top:-0.3949em;\"><span class=\"pstrut\" style=\"height:3.151em;\"></span><span class=\"mord\">0</span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.444em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.25em;\"></span><span class=\"arraycolsep\" style=\"width:0.25em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:5.537em;\"><span style=\"top:-7.7829em;\"><span class=\"pstrut\" style=\"height:3.151em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.622em;\"><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.522em;\"></span><span class=\"sizing reset-size6 size3 mtight cd-arrow-pad\"><span class=\"mord mtight\"></span></span></span><span class=\"svg-align\" style=\"top:-2.511em;\"><span class=\"pstrut\" style=\"height:2.522em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:3em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span><span style=\"top:-2.4em;\"><span class=\"pstrut\" style=\"height:2.522em;\"></span><span class=\"sizing reset-size6 size3 mtight cd-arrow-pad\"><span class=\"mord mtight\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.122em;\"><span></span></span></span></span></span></span><span style=\"top:-5.944em;\"><span class=\"pstrut\" style=\"height:3.151em;\"></span></span><span style=\"top:-4.0889em;\"><span class=\"pstrut\" style=\"height:3.151em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.622em;\"><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.522em;\"></span><span class=\"sizing reset-size6 size3 mtight cd-arrow-pad\"><span class=\"mord mtight\"></span></span></span><span class=\"svg-align\" style=\"top:-2.511em;\"><span class=\"pstrut\" style=\"height:2.522em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:3em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span><span style=\"top:-2.4em;\"><span class=\"pstrut\" style=\"height:2.522em;\"></span><span class=\"sizing reset-size6 size3 mtight cd-arrow-pad\"><span class=\"mord mtight\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.122em;\"><span></span></span></span></span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.151em;\"></span></span><span style=\"top:-0.3949em;\"><span class=\"pstrut\" style=\"height:3.151em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.622em;\"><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.522em;\"></span><span class=\"sizing reset-size6 size3 mtight cd-arrow-pad\"><span class=\"mord mtight\"></span></span></span><span class=\"svg-align\" style=\"top:-2.511em;\"><span class=\"pstrut\" style=\"height:2.522em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:3em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span><span style=\"top:-2.4em;\"><span class=\"pstrut\" style=\"height:2.522em;\"></span><span class=\"sizing reset-size6 size3 mtight cd-arrow-pad\"><span class=\"mord mtight\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.122em;\"><span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.444em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.25em;\"></span><span class=\"arraycolsep\" style=\"width:0.25em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:5.537em;\"><span style=\"top:-7.7829em;\"><span class=\"pstrut\" style=\"height:3.151em;\"></span><span class=\"mord mathnormal\">A</span></span><span style=\"top:-5.944em;\"><span class=\"pstrut\" style=\"height:3.151em;\"></span><span class=\"mord cd-vert-arrow\"><span class=\"sizing reset-size6 size3 mtight cd-label-left\" style=\"bottom:0.8em;\"><span class=\"mord mtight\"></span></span><span class=\"mord\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.151em;\"><span style=\"top:-1.966em;\"><span class=\"pstrut\" style=\"height:2.616em;\"></span><span class=\"delimsizinginner delim-size1\"><span>↓</span></span></span><span style=\"top:-2.558em;\"><span class=\"pstrut\" style=\"height:2.616em;\"></span><span style=\"height:0.616em;width:0.6667em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='0.6667em' height='0.616em' style='width:0.6667em' viewBox='0 0 666.67 616' preserveAspectRatio='xMinYMin'><path d='M312 0 H355 V616 H312z M312 0 H355 V616 H312z'/></svg></span></span><span style=\"top:-3.166em;\"><span class=\"pstrut\" style=\"height:2.616em;\"></span><span class=\"delimsizinginner delim-size1\"><span>⏐</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.65em;\"><span></span></span></span></span></span></span><span class=\"sizing reset-size6 size3 mtight cd-label-right\" style=\"bottom:0.8em;\"><span class=\"mord mtight\"></span></span></span></span><span style=\"top:-4.0889em;\"><span class=\"pstrut\" style=\"height:3.151em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mbin\">⊕</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.151em;\"></span><span class=\"mord cd-vert-arrow\"><span class=\"sizing reset-size6 size3 mtight cd-label-left\" style=\"bottom:0.8em;\"><span class=\"mord mtight\"></span></span><span class=\"mord\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.151em;\"><span style=\"top:-1.966em;\"><span class=\"pstrut\" style=\"height:2.616em;\"></span><span class=\"delimsizinginner delim-size1\"><span>↓</span></span></span><span style=\"top:-2.558em;\"><span class=\"pstrut\" style=\"height:2.616em;\"></span><span style=\"height:0.616em;width:0.6667em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='0.6667em' height='0.616em' style='width:0.6667em' viewBox='0 0 666.67 616' preserveAspectRatio='xMinYMin'><path d='M312 0 H355 V616 H312z M312 0 H355 V616 H312z'/></svg></span></span><span style=\"top:-3.166em;\"><span class=\"pstrut\" style=\"height:2.616em;\"></span><span class=\"delimsizinginner delim-size1\"><span>⏐</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.65em;\"><span></span></span></span></span></span></span><span class=\"sizing reset-size6 size3 mtight cd-label-right\" style=\"bottom:0.8em;\"><span class=\"mord mtight\"></span></span></span></span><span style=\"top:-0.3949em;\"><span class=\"pstrut\" style=\"height:3.151em;\"></span><span class=\"mord mathnormal\">A</span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.444em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.25em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.843em;\"><span style=\"top:-4.0889em;\"><span class=\"pstrut\" style=\"height:3.151em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.622em;\"><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.522em;\"></span><span class=\"sizing reset-size6 size3 mtight cd-arrow-pad\"><span class=\"mord mtight\"></span></span></span><span class=\"svg-align\" style=\"top:-2.511em;\"><span class=\"pstrut\" style=\"height:2.522em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:3em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span><span style=\"top:-2.4em;\"><span class=\"pstrut\" style=\"height:2.522em;\"></span><span class=\"sizing reset-size6 size3 mtight cd-arrow-pad\"><span class=\"mord mtight\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.122em;\"><span></span></span></span></span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.151em;\"></span></span><span style=\"top:-0.3949em;\"><span class=\"pstrut\" style=\"height:3.151em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.622em;\"><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.522em;\"></span><span class=\"sizing reset-size6 size3 mtight cd-arrow-pad\"><span class=\"mord mtight\"></span></span></span><span class=\"svg-align\" style=\"top:-2.511em;\"><span class=\"pstrut\" style=\"height:2.522em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:3em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span><span style=\"top:-2.4em;\"><span class=\"pstrut\" style=\"height:2.522em;\"></span><span class=\"sizing reset-size6 size3 mtight cd-arrow-pad\"><span class=\"mord mtight\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.122em;\"><span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.444em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.843em;\"><span style=\"top:-4.0889em;\"><span class=\"pstrut\" style=\"height:3.151em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.151em;\"></span><span class=\"mord cd-vert-arrow\"><span class=\"sizing reset-size6 size3 mtight cd-label-left\" style=\"bottom:0.8em;\"><span class=\"mord mtight\"></span></span><span class=\"mord\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.151em;\"><span style=\"top:-1.966em;\"><span class=\"pstrut\" style=\"height:2.616em;\"></span><span class=\"delimsizinginner delim-size1\"><span>↓</span></span></span><span style=\"top:-2.558em;\"><span class=\"pstrut\" style=\"height:2.616em;\"></span><span style=\"height:0.616em;width:0.6667em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='0.6667em' height='0.616em' style='width:0.6667em' viewBox='0 0 666.67 616' preserveAspectRatio='xMinYMin'><path d='M312 0 H355 V616 H312z M312 0 H355 V616 H312z'/></svg></span></span><span style=\"top:-3.166em;\"><span class=\"pstrut\" style=\"height:2.616em;\"></span><span class=\"delimsizinginner delim-size1\"><span>⏐</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.65em;\"><span></span></span></span></span></span></span><span class=\"sizing reset-size6 size3 mtight cd-label-right\" style=\"bottom:0.8em;\"><span class=\"mord mtight\"></span></span></span></span><span style=\"top:-0.3949em;\"><span class=\"pstrut\" style=\"height:3.151em;\"></span><span class=\"mord\">0</span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.444em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>The top left square is a pushout by definition, and the two big rectangles are trivially pushouts, so by using pushout cancellation twice, so is the bottom right square.</p>",
        "id": 282744650,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652855323
    },
    {
        "content": "<p>Oh, now I want to formalise this one, precisely because our API for this style of argument is still missing.</p>",
        "id": 282744774,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652855431
    },
    {
        "content": "<p>Was some of this done in LTE?</p>",
        "id": 282744796,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652855467
    },
    {
        "content": "<p>I think Andrew set up this kind of API when doing pullbacks of schemes.</p>",
        "id": 282744902,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652855547
    },
    {
        "content": "<p>But I don't know if it was dualised to include pushouts.</p>",
        "id": 282744912,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652855558
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.right_square_is_pushout\">docs#category_theory.limits.right_square_is_pushout</a></p>",
        "id": 282745070,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652855696
    },
    {
        "content": "<p>I made some arguments like this one in lean-homotopy-theory, though it wasn't for the mathlib notion of pushout (which didn't yet exist). e.g. using <a href=\"https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.2/src/category_theory/pasting_pushouts.lean\">https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.2/src/category_theory/pasting_pushouts.lean</a> and <a href=\"https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.2/src/category_theory/colimit_lemmas.lean\">https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.2/src/category_theory/colimit_lemmas.lean</a></p>",
        "id": 282745129,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652855759
    },
    {
        "content": "<p>How would everyone feel about migrating Reid's <code>Is_pushout</code> to mathlib?</p>",
        "id": 282745213,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652855808
    },
    {
        "content": "<p>(i.e. a prop-valued thing parameterised by four morphisms)</p>",
        "id": 282745229,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652855827
    },
    {
        "content": "<p>Maybe call it <code>pushout_square</code> instead? (To avoid another <code>is_*</code>)</p>",
        "id": 282745247,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652855845
    },
    {
        "content": "<p>It becomes yet-another-way to talk about limits, and therefor some additional API cost for glue</p>",
        "id": 282745269,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652855867
    },
    {
        "content": "<p>But it would still let us state Andrew's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.right_square_is_pushout\">docs#category_theory.limits.right_square_is_pushout</a> much more succinctly.</p>",
        "id": 282745332,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652855903
    },
    {
        "content": "<p>I noticed that LTE/for_mathlib has a <code>is_biprod</code> structure.</p>",
        "id": 282745370,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652855944
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/14220\">#14220</a></p>",
        "id": 282780312,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652877475
    },
    {
        "content": "<p>Yeah I think this is an excellent idea - I either made a poor version of it in the topos project or thought about doing it! I think it would definitely make this sort of argument easier to formalise</p>",
        "id": 282822819,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1652895616
    },
    {
        "content": "<p>Should we call it <code>cartesian</code> rather than <code>pullback_square</code>? I think I prefer <code>pullback_square</code>, although then I don't know what to call <code>bicartesian</code>.</p>",
        "id": 282857834,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652913057
    },
    {
        "content": "<p><code>cartesian</code> is shorter, and doesn't contain a <code>_</code>. So I would vote for that.</p>",
        "id": 282882591,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652937579
    },
    {
        "content": "<p>And then <code>cocartesian</code> for <code>pushout_square</code>? I slightly prefer <code>pullback_square</code>: <code>cartesian</code> is overloaded plenty, but I'd be happy either way</p>",
        "id": 282926694,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1652966077
    },
    {
        "content": "<p>How about <code>commsq.pullback</code>?</p>",
        "id": 282926936,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652966207
    },
    {
        "content": "<p>In LTE I defined <code>commsq</code>. I think it's a useful shorthand, and it provides an anchor for dot-notation.</p>",
        "id": 282926988,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652966240
    },
    {
        "content": "<p>For <code>h : commsq a b c d</code> you get <code>h.w</code> and <code>h.w_assoc</code>, and of course <code>h.symm</code>.</p>",
        "id": 282927044,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652966272
    },
    {
        "content": "<p>That sounds sensible to me, although it kind of opens the door to <code>commtri</code>? (and its dual <code>commcotri</code>)! Also I suppose <code>comm_sq</code> would be better?</p>",
        "id": 282927245,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1652966356
    },
    {
        "content": "<p>There is also the option of stating being a pullback square for morphisms in the arrow category, though I'm not sure how ergonomic that would be</p>",
        "id": 282929084,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1652967303
    },
    {
        "content": "<p>I assume <code>commsq</code> is a bundled commutative square; then how do you state the pushout pasting lemma?</p>",
        "id": 282930388,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652967910
    },
    {
        "content": "<p>No, it isn't bundled. <code>a b c d</code> are 4 morphisms.</p>",
        "id": 282930606,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652968001
    },
    {
        "content": "<p>oh it's a Prop?</p>",
        "id": 282931607,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652968416
    },
    {
        "content": "<p>For technical reasons, no. But a <code>Prop</code>-version seems quite useful to me.</p>",
        "id": 282931711,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652968450
    },
    {
        "content": "<p>Where is the definition?</p>",
        "id": 282931746,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652968468
    },
    {
        "content": "<p>In the salamander lemma, you need to consider the direct sum of the two objects on the antidiagonal. So I bundled that into the defn.</p>",
        "id": 282931809,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652968500
    },
    {
        "content": "<p>That way you can get <code>commsq.op</code> and <code>commsq.symm</code> with nice defeqs.</p>",
        "id": 282931830,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652968514
    },
    {
        "content": "<p>OK, well normally two objects don't have a direct sum <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 282931853,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652968520
    },
    {
        "content": "<p>It also assumed an ab cat <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 282931887,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652968538
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/for_mathlib/commsq.lean\">https://github.com/leanprover-community/lean-liquid/blob/master/src/for_mathlib/commsq.lean</a></p>",
        "id": 282931919,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652968557
    },
    {
        "content": "<p>But I think simply a <code>Prop</code> version could already be useful, and have a nice API.</p>",
        "id": 282932012,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652968592
    },
    {
        "content": "<p>My crazy contraption can have a different name (-;</p>",
        "id": 282932035,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652968603
    },
    {
        "content": "<p>So the Prop version is just <code>(w : g₁₁ ≫ f₂₁ = f₁₁ ≫ g₁₂)</code>?</p>",
        "id": 282932048,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652968611
    },
    {
        "content": "<p>Yes</p>",
        "id": 282932072,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652968622
    },
    {
        "content": "<p>Se the <code>of_eq</code> constructor.</p>",
        "id": 282932095,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652968631
    },
    {
        "content": "<p>I think this could be useful, then <code>is_pushout</code> and <code>is_pullback</code> can extend it</p>",
        "id": 282932133,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652968646
    },
    {
        "content": "<p>Maybe assume it, instead of extending?</p>",
        "id": 282932180,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652968677
    },
    {
        "content": "<p>Then you can write <code>h.is_pushout</code></p>",
        "id": 282932237,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652968689
    },
    {
        "content": "<p>And <code>sq1.hcomp sq2</code> (idem for <code>.vcomp</code>). That way the pasting lemmas would become quite nice, I think.</p>",
        "id": 282932315,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652968722
    },
    {
        "content": "<p><code>h.op.is_pullback \\iff h.is_pushout</code> etc...</p>",
        "id": 282932363,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652968747
    },
    {
        "content": "<p>What do you mean \"assume\"?</p>",
        "id": 282932372,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652968750
    },
    {
        "content": "<p>As an explicit parameter</p>",
        "id": 282932399,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652968765
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">commsq.is_pullback</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">commsq</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">blabla</span>\n</code></pre></div>",
        "id": 282932449,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652968792
    },
    {
        "content": "<p>Oh I see, but somehow it feels a bit more awkward because it suggests you would have to prove the square commutes, before talking about whether it is a pushout</p>",
        "id": 282932612,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652968827
    },
    {
        "content": "<p>but I guess you have a style in mind where you don't actually do that</p>",
        "id": 282932642,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652968841
    },
    {
        "content": "<p>i.e. in l-h-t you can just write <code>Is_pushout f g h k</code>, rather than <code>\\&lt;show f &gt;&gt; g = h &gt;&gt; k, by assumption\\&gt;.is_pushout</code> or whatever</p>",
        "id": 282932870,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652968945
    },
    {
        "content": "<p>(ok if the proof is <code>by assumption</code> it's a bad example, but maybe it will be <code>by simp</code> etc)</p>",
        "id": 282932927,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652968970
    },
    {
        "content": "<p>Yeah, I see. I think both use cases are nice.</p>",
        "id": 282933430,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652969171
    },
    {
        "content": "<p>I have in mind statements like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">pasting</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">sq1.is_pushout</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">sq1.hcomp</span> <span class=\"n\">sq2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_pushout</span> <span class=\"bp\">\\</span><span class=\"n\">iff</span> <span class=\"n\">sq2.is_pushout</span>\n</code></pre></div>",
        "id": 282933790,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652969318
    },
    {
        "content": "<p>Maybe the base for the dot-notation should be a law-less (but type correct) square?</p>",
        "id": 282934015,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652969411
    },
    {
        "content": "<p>And then you have <code>sq.is_comm</code> and <code>sq.is_pullback</code> can extend that?</p>",
        "id": 282934086,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652969444
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/pushout.20of.20biprod.2Efst.20and.20biprod.2Esnd.20is.20zero/near/282934015\">said</a>:</p>\n<blockquote>\n<p>Maybe the base for the dot-notation should be a law-less (but type correct) square?</p>\n</blockquote>\n<p>So this is just the proposition <code>true</code>?</p>",
        "id": 282934181,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652969494
    },
    {
        "content": "<p>I think this might also be awkward in the goal view</p>",
        "id": 282934223,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652969514
    },
    {
        "content": "<p>Also I'm not sure how well this works with rewriting along equalities of morphisms</p>",
        "id": 282934419,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652969572
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 282934455,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652969590
    },
    {
        "content": "<p><code>.w</code> gives you back the actual equality condition</p>",
        "id": 282934507,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652969614
    },
    {
        "content": "<p>e.g. if my goal is <code>Is_pushout f g h k</code> and I have <code>H : f = f'</code> I know how to <code>rw H</code></p>",
        "id": 282934509,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652969614
    },
    {
        "content": "<p>if my goal is <code>(sq : anysq f g h k).is_pushout</code> then I don't think I can <code>rw H</code></p>",
        "id": 282934538,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652969629
    },
    {
        "content": "<p>Hmm, I see.</p>",
        "id": 282934569,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652969638
    },
    {
        "content": "<p>(and that's quite a common thing to do, e.g., you need to do it several times in the proof that started this discussion)</p>",
        "id": 282935019,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652969809
    },
    {
        "content": "<p>I've added <code>comm_sq</code>, renamed <code>pullback_square</code> to <code>is_pullback</code>, and have it extend <code>comm_sq</code>. I added <code>comm_sq.of_arrow</code>, but no further API relating <code>comm_sq</code> to the arrow category as yet. I think this PR (<a href=\"https://github.com/leanprover-community/mathlib/pull/14220\">#14220</a>) is ready for review for now.</p>",
        "id": 283273068,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1653283889
    },
    {
        "content": "<p>Why do you call the constructors <code>mk'</code> if you don't provide a <code>mk</code>? Or am I blind?</p>",
        "id": 283274427,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653285502
    },
    {
        "content": "<p>Not sure what happened there. Removed.</p>",
        "id": 283277093,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1653288114
    },
    {
        "content": "<p>I just realized that I would really like to have <code>functor.map_comm_sq</code> <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 283341097,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653322160
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/14351\">#14351</a></p>",
        "id": 283724203,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1653387903
    },
    {
        "content": "<p>(Also for <code>functor.map_is_pullback</code> etc)</p>",
        "id": 283724228,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1653387916
    },
    {
        "content": "<p>The rest of Reid's argument is in <a href=\"https://github.com/leanprover-community/mathlib/pull/14375\">#14375</a>.</p>",
        "id": 283836980,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1653454185
    },
    {
        "content": "<p>It would be nice to use this to refactor <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.is_kernel_pair\">docs#category_theory.is_kernel_pair</a></p>",
        "id": 284026614,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1653581909
    },
    {
        "content": "<p>in fact looking at that again, most of what I did in that file are (useful) special cases of comm_sq</p>",
        "id": 284026666,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1653581938
    },
    {
        "content": "<p>One difference is that in <code>is_pullback</code> I wrapped <code>is_limit</code> in <code>nonempty</code>, so we have <code>is_pullback : Prop</code>. Do you think it would be okay to change <code>kernel_pair</code> like that?</p>",
        "id": 284081180,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1653614137
    },
    {
        "content": "<p>Probably - it's subsingleton (not just up to iso) so I expect it should be fine</p>",
        "id": 284128566,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1653656254
    }
]