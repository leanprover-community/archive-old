[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> Did you prove Fermat's Little Theorem <a href=\"https://en.wikipedia.org/wiki/Fermat%27s_little_theorem\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Fermat%27s_little_theorem\">https://en.wikipedia.org/wiki/Fermat%27s_little_theorem</a> in Lean? I am interested in proving Euler's Criterion <a href=\"https://en.wikipedia.org/wiki/Euler%27s_criterion\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Euler%27s_criterion\">https://en.wikipedia.org/wiki/Euler%27s_criterion</a> and Gauss' Lemma <a href=\"https://en.wikipedia.org/wiki/Gauss%27s_lemma_(number_theory)\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Gauss%27s_lemma_(number_theory)\">https://en.wikipedia.org/wiki/Gauss%27s_lemma_(number_theory)</a> in Lean, with a view to proving when -1 and +-2 are squares mod p (this is related to quadratic reciprocity).</p>",
        "id": 125919765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525131270
    },
    {
        "content": "<p>Is anything like that there already? Do we know the integers mod p are a field?</p>",
        "id": 125919774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525131299
    },
    {
        "content": "<p>What are good mathlib files to look at?</p>",
        "id": 125919786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525131330
    },
    {
        "content": "<p>Oh I have it in Xena in M1F ;-)</p>",
        "id": 125920424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525132405
    },
    {
        "content": "<p>That's handy :-)</p>",
        "id": 125920427,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525132416
    },
    {
        "content": "<p>Are the finite rings Z/nZ in Lean? I thought a bit about how to define them and decided that constructing the quotient of Z by the equivalence relation of being congruent mod n would be a really painless way to do it because all the lemmas would probably already be there. I found many of them all for nat in <code>modeq</code> but to avoid kerfuffle with <code>neg</code> I thought that Z would be better. How much of this stuff is already done?</p>",
        "id": 125924429,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525139706
    },
    {
        "content": "<p>There is <code>data.int.modeq</code> now, too</p>",
        "id": 125925147,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525141319
    },
    {
        "content": "<p>Oh perfect! Many thanks.</p>",
        "id": 125926213,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525143661
    },
    {
        "content": "<p>I did get started on defining integers mod n. My effort is here. Some of the proofs are unfinished <a href=\"https://github.com/dorhinj/lean/blob/master/Zmod.lean\" target=\"_blank\" title=\"https://github.com/dorhinj/lean/blob/master/Zmod.lean\">https://github.com/dorhinj/lean/blob/master/Zmod.lean</a></p>",
        "id": 125932072,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525156422
    },
    {
        "content": "<p>I thought it would probably be better to define this stuff in a general ring / euclidean domain, not just integers, especially after I ran into a load of trouble converting xgcd from nats into ints.</p>",
        "id": 125932130,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525156533
    },
    {
        "content": "<p>You mean that you want to define \"ring mod ideal\" in general? Or just \"ring mod n\"?</p>",
        "id": 125933136,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525158832
    },
    {
        "content": "<blockquote>\n<p>You mean that you want to define \"ring mod ideal\" in general? Or just \"ring mod n\"?</p>\n</blockquote>\n<p>ring mod n doesn't make much sense in general, I think</p>",
        "id": 125933272,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525159117
    },
    {
        "content": "<p>Sure it does, (n) is an ideal</p>",
        "id": 125933274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525159136
    },
    {
        "content": "<p>but not a special one</p>",
        "id": 125933275,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525159142
    },
    {
        "content": "<p>n is as special as other elements in the ring</p>",
        "id": 125933281,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525159153
    },
    {
        "content": "<p>I've been thinking about how to unify this idea with my idea for Z/nZ as fin n with better operations. I think the best option is just to keep the developments separate (ish), with a provable isomorphism Z/nZ -&gt; Z mod (n) where (n) is the ideal generated by n</p>",
        "id": 125933324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525159226
    },
    {
        "content": "<p>Didn't you do it in a general ring Kenny?</p>",
        "id": 125933327,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525159249
    },
    {
        "content": "<p>indeed</p>",
        "id": 125933328,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525159258
    },
    {
        "content": "<p>Why not PR it?</p>",
        "id": 125933333,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525159273
    },
    {
        "content": "<p>reasons</p>",
        "id": 125933334,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525159278
    },
    {
        "content": "<p>For similar reasons to <code>rat</code>, I would not want Z/nZ to be a quotient when doing computations. This would make stuff like <code>a^k : Z/nZ</code> far too expensive</p>",
        "id": 125933335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525159297
    },
    {
        "content": "<p>(it will just be an interface of <code>linear_algebra.quotient_module</code> and <code>ring_theory.ideal</code>)</p>",
        "id": 125933336,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525159313
    },
    {
        "content": "<p>It's not completely trivial, you have to take a ring as a module over itself and then quotient by the ideal construed as a submodule</p>",
        "id": 125933375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525159380
    },
    {
        "content": "<p>and then convert back to a ring</p>",
        "id": 125933380,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525159389
    },
    {
        "content": "<p>right</p>",
        "id": 125933381,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525159401
    },
    {
        "content": "<p>The theorems are probably easy specializations of existing theorems, but I think the specialization is worthwhile</p>",
        "id": 125933383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525159426
    },
    {
        "content": "<p>so are you saying I should build the interface?</p>",
        "id": 125933422,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525159448
    },
    {
        "content": "<p>right</p>",
        "id": 125933423,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525159453
    },
    {
        "content": "<p>make it so users don't have to think about modules for ring theory</p>",
        "id": 125933424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525159467
    },
    {
        "content": "<p>:)</p>",
        "id": 125933426,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525159475
    },
    {
        "content": "<blockquote>\n<p>n is as special as other elements in the ring</p>\n</blockquote>\n<p>n is one of the elements you can guarantee is there in every ring, so it's special in some sense.</p>",
        "id": 125950166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525191060
    },
    {
        "content": "<p>ah, you're on about the universal ring business again</p>",
        "id": 125950172,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525191071
    }
]