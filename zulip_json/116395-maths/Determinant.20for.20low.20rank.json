[
    {
        "content": "<p>Dear <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span>,</p>\n<p>We've been using the determinant a bit (see  <a href=\"https://github.com/leanprover-community/mathlib/issues/8377\">#8377</a> and <a href=\"https://github.com/leanprover-community/mathlib/tree/modular3\">branch#modular3</a>), and we keep getting time out errors from proving things like det ((ab),(cd))=ad-bc. We noticed that in PR <a href=\"https://github.com/leanprover-community/mathlib/issues/6897\">#6897</a>, there seemed to be a conscious choice not to include a lemma such as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">matrix.det</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">]]</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">matrix.det_succ_row_zero</span><span class=\"o\">,</span> <span class=\"n\">fin.sum_univ_succ</span><span class=\"o\">],</span>\n  <span class=\"n\">ring</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But when this is needed inside a longer lemma, it very often gives deterministic timeout errors. What would you think of making, say, this and the 3x3 formulae proper lemmas?</p>\n<p>Best,<br>\nAlex and <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span></p>",
        "id": 246638635,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1626809921
    },
    {
        "content": "<p>I think adding them as lemmas is probably harmless, but it would also be worthwhile to work out how to make the simp approach faster</p>",
        "id": 246639932,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626810550
    },
    {
        "content": "<p>I'm not sure what you mean by a conscious choice to avoid them, but I think that the 2x2 and 3x3 versions should definitely be stated as lemmas, proved by <code>simp</code> if possible</p>",
        "id": 246640128,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626810626
    },
    {
        "content": "<p>if nothing else, the lemmas are a lot more approachable for readers than some simp-based metaprogram using lots of weird looking lemmas</p>",
        "id": 246640431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626810740
    },
    {
        "content": "<p>Ok great, so no objections to adding these to src/linear_algebra/determinant.lean...</p>",
        "id": 246640690,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1626810844
    },
    {
        "content": "<p>Thanks to <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> , simp is able to do this via the Laplace expansion.</p>",
        "id": 246641415,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626811172
    },
    {
        "content": "<p>Your example is taken from <code>test/matrix.lean</code>, correct?</p>",
        "id": 246641534,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626811214
    },
    {
        "content": "<p>Ah I see that you mentioned Anne =)</p>",
        "id": 246641677,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626811266
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Determinant.20for.20low.20rank/near/246639932\">said</a>:</p>\n<blockquote>\n<p>I think adding them as lemmas is probably harmless, but it would also be worthwhile to work out how to make the simp approach faster</p>\n</blockquote>\n<p>This was exactly what I was going to write, except I'd add that \"how to make the <code>simp</code> approach faster\" will probably turn out to be to switch to Lean 4 :)</p>",
        "id": 246641716,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1626811286
    },
    {
        "content": "<p>isn't cofactor expansion O(n!)? Seems obvious that the natural simp lemmas here are not going to yield efficient results for large examples</p>",
        "id": 246642505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626811660
    },
    {
        "content": "<p>It's perfectly fine for proving the 2x2 and 3x3 cases though</p>",
        "id": 246642593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626811693
    },
    {
        "content": "<p>Wouldn't having the 2x2 as a simp lemma make the 3x3 simp proof faster? If going through the minors</p>",
        "id": 246642635,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626811722
    },
    {
        "content": "<p>I would expect so, and similarly the 3x3 can help the 4x4</p>",
        "id": 246642705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626811770
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364484\">@Deniz Aydin</span> was talking on the Discord today about formalising Gaussian elimination (it's on the undergrad Todo list). Would this make things quicker?</p>",
        "id": 246642713,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626811778
    },
    {
        "content": "<p>proving all of the intermediate lemmas up to NxN is a lot less than O(n!)</p>",
        "id": 246642746,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626811800
    },
    {
        "content": "<p>I think my original hesitancy in adding these was mainly not being bothered to choose what order to put the terms in on the RHS</p>",
        "id": 246642853,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626811844
    },
    {
        "content": "<p>but I'm not sure about tossing all that into simp</p>",
        "id": 246642868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626811852
    },
    {
        "content": "<p>at a certain point you should probably just get a proper metaprogram</p>",
        "id": 246642887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626811865
    },
    {
        "content": "<p>is the metaprogram really worth it before lean4 though?</p>",
        "id": 246642931,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626811889
    },
    {
        "content": "<p>I don't know, depends on how much people need to take the determinant of large matrices</p>",
        "id": 246643045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626811926
    },
    {
        "content": "<p>regardless I stronly support 2x2 and 3x3 lemmata, but the rest not; 4x4 matrices are when I start loading up mathematica or numpy</p>",
        "id": 246643064,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626811940
    },
    {
        "content": "<p>I don't think lean 3 / 4 matters much here, it's just as much work either way</p>",
        "id": 246643074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626811945
    },
    {
        "content": "<p>I'm not sure how different things will be in Lean4; tactics will have to be compiled, right? so we'll want the metaprogram there to use the minimal possible number of lemmas</p>",
        "id": 246643119,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626811977
    },
    {
        "content": "<p>whilst in lean3 doesn't matter as much</p>",
        "id": 246643133,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626811985
    },
    {
        "content": "<p>Let's add 2x2 and 3x3 shortcut lemmas now, and whoever needs to deal with the 4x4 case gets to make their own PR for that case</p>",
        "id": 246643154,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1626811994
    },
    {
        "content": "<p>(or do I not understand how tactic compilation will work)</p>",
        "id": 246643155,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626811995
    },
    {
        "content": "<p>no it's the other way around - in lean 3 tactics are more expensive so you have to be more careful not to do unnecessary things</p>",
        "id": 246643181,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626812015
    },
    {
        "content": "<p>lean 4 will make brute force a more viable strategy than it is currently, which will open up more CAS-like possibilities. For now having explicit lemmas is better</p>",
        "id": 246643406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626812131
    },
    {
        "content": "<p>let me try and rephrase my misunderstanding; for some <code>eval_det</code> tactic, you'd need some lemma saying, e.g., a row switch matrix has det -1. however, this lemma would have to be available to the code writing <code>eval_det</code> before it can make it?</p>",
        "id": 246643614,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626812212
    },
    {
        "content": "<p>or is there some <code>Expr</code> hackyness that we use in that case instead?</p>",
        "id": 246643641,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626812223
    },
    {
        "content": "<p>I'm not sure I understand. If the tactic is creating a proof then it needs that lemma to be available because it will be referenced</p>",
        "id": 246643800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626812301
    },
    {
        "content": "<p>yes, so then we'd need all of <code>mathlib</code> up to determinants to be precompiled for this metaprogram to work</p>",
        "id": 246643863,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626812338
    },
    {
        "content": "<p>or am I missing something</p>",
        "id": 246643873,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626812346
    },
    {
        "content": "<p>I believe that is correct, except obviously we'll be using some build system that ensures the user doesn't have to care about this separate compilation</p>",
        "id": 246643944,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1626812391
    },
    {
        "content": "<p>it doesn't need the lemma, strictly speaking, it can do all the work to create the proof without the lemma actually in the environment, but the proof won't check. But this is fine if the tactic is written in the prelude and is being applied in an environment that contains the lemma in question</p>",
        "id": 246643949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626812395
    },
    {
        "content": "<p>(\"obviously we'll be\" is defined as \"this is a hard requirement for me personally, at least\")</p>",
        "id": 246644067,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1626812441
    },
    {
        "content": "<p>Ok, I added it to PR <a href=\"https://github.com/leanprover-community/mathlib/issues/8377\">#8377</a>.</p>",
        "id": 246644072,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1626812443
    },
    {
        "content": "<p>That is, <code>matrix.det_succ_row_zero</code> requires mathlib to typecheck, but <code> `matrix.det_succ_row_zero</code> doesn't</p>",
        "id": 246644087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626812451
    },
    {
        "content": "<p>oh, so there's no issue then! I didn't know that at all</p>",
        "id": 246644292,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1626812527
    },
    {
        "content": "<p>It's usually error prone to write tactics that reference nonexisting things though, but there are a number of techniques to ensure that the references make sense and \"activate\" the tactic after the fact</p>",
        "id": 246644410,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626812588
    },
    {
        "content": "<p><code>norm_num</code> handles this by having \"plugins\" that exist in separate files from the main tactic</p>",
        "id": 246644485,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626812631
    }
]