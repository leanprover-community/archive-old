[
    {
        "content": "<p>I have a proof of the following theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">function</span> <span class=\"n\">metric</span> <span class=\"n\">list</span> <span class=\"n\">filter</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span> <span class=\"n\">filter</span> <span class=\"n\">uniformity</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">lemma</span> <span class=\"n\">uniform_space.metrizable_uniformity</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">is_countably_generated</span> <span class=\"o\">(</span><span class=\"bp\">ùì§</span> <span class=\"n\">X</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÉ</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">pseudo_metric_space</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">I.to_uniform_space</span> <span class=\"bp\">=</span> <span class=\"o\">‚Äπ</span><span class=\"n\">_</span><span class=\"o\">‚Ä∫</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>It says that any <code>uniform_space</code> structure with countably generated uniformity filter is (pseudo)metrizable. I want to add an instance saying that a uniform space with countably generated uniformity filter is metrizable, then replace <code>[uniform_space X] [is_countably_generated (ùì§ X)]</code> with <code>[metrizable_space X]</code> here and there (namely, in all lemmas that don't use uniformity structure in their statements). However, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_space.metrizable_space\">docs#topological_space.metrizable_space</a> deals with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/metric_space\">docs#metric_space</a>, not <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pseudo_metric_space\">docs#pseudo_metric_space</a>.</p>\n<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> What do you think about replacing <code>metrizable_space</code> with <code>pseudo_metrizable_space</code> and adding <code>[t?_space]</code> assumption  (I guess, <code>t0_space</code> is enough) to lemmas that don't work in pseudo metric spaces?</p>",
        "id": 281689362,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652105186
    },
    {
        "content": "<p>I'd rather keep the <code>metrizable_space</code> typeclass as it shows up a lot in many statements on integration. But we can definitely add another <code>pseudo_metrizable_space</code> typeclass (and add an instance from the former to the latter).</p>",
        "id": 281704082,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1652111218
    },
    {
        "content": "<p>BTW, what is the verb for <code>metrizable</code>? I want to add a tactic similar to <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#borelize\">tactic#borelize</a> that adds a <code>(pseudo_)metric_space</code> instance that agrees with an existing <code>uniform_space</code> or <code>topological_space</code> structure.</p>",
        "id": 281728503,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652122086
    },
    {
        "content": "<p>I'm not sure <code>borelize</code> is a real word either. The opinion of a native speaker would be much more useful, but I'd probably go for <code>metrize</code>.</p>",
        "id": 281730027,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1652122755
    },
    {
        "content": "<p><code>metrize</code> or <code>metrify</code> or <code>metricify</code> would be my choices (I'm a native speaker)</p>",
        "id": 281730103,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652122789
    },
    {
        "content": "<p>I add a definition in <a href=\"https://github.com/leanprover-community/mathlib/pull/14053\">#14053</a></p>",
        "id": 281731914,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652123594
    },
    {
        "content": "<p><code>metrize</code> and <code>metrify</code> (but not <code>metricify</code>) sounded almost equally good to me (also a native speaker), so I did <a href=\"https://english.stackexchange.com/questions/189530/what-is-the-difference-between-the-suffixes-ize-and-ify\">some reading</a>. Turns out this is one of the rare cases where both suffixes are acceptable: \"you can do it either way with words stressed on the next-to-last syllable that end in unstressed /i/. But they're the only ones.\"</p>\n<p>I think I have a slight preference for <code>metrize</code> for the parallelism with <code>metrizable</code>.</p>",
        "id": 281753253,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1652134589
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> I'm running into the following problem with <code>metrizable</code>. I have a lemma in <a href=\"https://github.com/leanprover-community/mathlib/pull/14052\">#14052</a> saying that a <code>uniform_space</code> structure with a countably generated uniformity filter is pseudo-metrizable. It is natural to use this lemma to add instances <code>uniform_space X ‚Üí is_countably_generated (ùì§ X) ‚Üí pseudo_metrizable_space X</code> and <code>uniform_space X ‚Üí is_countably_generated (ùì§ X) ‚Üí t0_space X ‚Üí metrizable_space X</code> but the latter instance leads to a cycle.</p>",
        "id": 284321514,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1653883119
    },
    {
        "content": "<p>OTOH, if I drop <code>class metrizable_space</code>, then  Lean can't deduce <code>t2_space X</code> from <code>[pseudo_metrizable_space X] [t0_space X]</code>.</p>",
        "id": 284321602,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1653883214
    },
    {
        "content": "<p>So, we need to use <code>lemma</code>, not <code>instance</code> for one of the implications (at least till Lean 4). Which one?</p>",
        "id": 284321662,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1653883290
    },
    {
        "content": "<p>I'd drop the latter one.</p>",
        "id": 284326834,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1653890429
    },
    {
        "content": "<p><code>uniform_space X ‚Üí is_countably_generated (ùì§ X) ‚Üí t0_space X ‚Üí metrizable_space X</code>?</p>",
        "id": 284355242,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1653910076
    },
    {
        "content": "<p>Yes.</p>",
        "id": 284371780,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1653919529
    }
]