[
    {
        "content": "<p>Q1 part (i) on the 2nd year group theory sheet at Imperial (where <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">G</span></span></span></span> is a group throughout) is \"True or false : If we can find elements <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">h</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">h</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">G</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>g</mi><mi>h</mi><mo>=</mo><mi>h</mi><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">gh = hg</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathit\">h</span><span class=\"mrel\">=</span><span class=\"mord mathit\">h</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">G</span></span></span></span> is abelian.\"</p>\n<p>So this is false, and <span class=\"user-mention\" data-user-id=\"118107\">@Amelia Livingston</span> and I were thinking about this question at Xena today. I wanted to formalise the question as closely as possible to the example sheet, so I wanted to write something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">q1p1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">],</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">is_abelian</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>You have to put the negation at the front of everything, so <code>group J</code> is after the colon and Lean doesn't know what <code>*</code> is. So version 2, which typechecks, is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">q1p1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">],</span> <span class=\"k\">by</span> <span class=\"n\">exactI</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">is_abelian</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>But then we run into universe issues in the proof:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">q1p1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">],</span> <span class=\"k\">by</span> <span class=\"n\">exactI</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">is_abelian</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H</span>\n  <span class=\"n\">replace</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)),</span> <span class=\"c1\">-- fails</span>\n</pre></div>\n\n\n<p>The error is</p>\n<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  H (perm (fin 3))\nterm\n  perm (fin 3)\nhas type\n  Type : Type 1\nbut is expected to have type\n  Type u_1 : Type (u_1+1)\n</pre></div>\n\n\n<p>I guess I understand that we can't do much about the <code>by exactI</code> stuff, but why can't Lean resolve my universe metavariable? Am I accidentally claiming that there are counterexamples in every universe?</p>",
        "id": 148214352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542959973
    },
    {
        "content": "<p>Yes you are</p>",
        "id": 148214469,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542960076
    },
    {
        "content": "<p>Take <code>G : Type</code> instead of <code>Type*</code>. I think that will help</p>",
        "id": 148214477,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542960094
    },
    {
        "content": "<p>But isn't that cheating?</p>",
        "id": 148216373,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542963049
    },
    {
        "content": "<p>How do I formalise the statement that it is not true that for all groups in all universes, some stupid thing holds</p>",
        "id": 148216392,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542963114
    },
    {
        "content": "<p>I want the quantifier in the not</p>",
        "id": 148216435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542963129
    },
    {
        "content": "<p>The universe quantifier</p>",
        "id": 148216437,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542963136
    },
    {
        "content": "<p>impossible</p>",
        "id": 148217061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542964111
    },
    {
        "content": "<p>that's existential quantification over universes</p>",
        "id": 148217069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542964131
    },
    {
        "content": "<p>What you can do instead is show a counterexample in a particular universe, which of course implies the existential that you can't write</p>",
        "id": 148217081,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542964169
    },
    {
        "content": "<p>So do I have to use <code>ulift</code> to get <code>replace H := H (perm (fin 3))</code> working? I've never used <code>ulift</code> before.</p>",
        "id": 148217369,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542964579
    }
]