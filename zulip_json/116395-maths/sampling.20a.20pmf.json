[
    {
        "content": "<p>Hi everyone, is there a way to sample a value from a probability mass function without creating a new pmf?</p>\n<p>I'm using mathlib's pmf definition.  The one way I've found to sample is <a href=\"https://leanprover-community.github.io/mathlib_docs/probability/probability_mass_function/monad.html#pmf.bind\">pmf.bind</a>, which samples from a pmf, but also passes the sampled value into a function that creates a new pmf. I would like to sample a value without creating a new pmf, which means bind isn't exactly what I'm looking for.</p>\n<p>One solution I've found is to have bind sample a value, then construct the pmf which always returns that value (constructed by <a href=\"https://leanprover-community.github.io/mathlib_docs/probability/probability_mass_function/monad.html#pmf.pure\">pmf.pure</a>). However, I then would like to extract the value from that pmf, which I haven't found a way to do.</p>\n<p>Can this be done? If so, how?</p>\n<p>(also if this has been discussed or should be in a different stream, please redirect me there (I'm a new member please bear with me))</p>",
        "id": 312960457,
        "sender_full_name": "Ben Ryjikov",
        "timestamp": 1669765043
    },
    {
        "content": "<p>the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pmf.bind\">docs#pmf.bind</a> is the monadic bind. As is usual with monads, there is no way to \"extract\" the values, but you can \"extract\" them if you stay within the monad environment.</p>",
        "id": 312960802,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669765253
    },
    {
        "content": "<p>If you have a random number generator and some \"computable\" pmf on <code>X</code>, then in principle it is possible to \"sample\" from such a pmf, but the result would be something of type <code>io X</code>, not <code>X</code>. But I don't know if anything like this has been implemented.</p>",
        "id": 312961004,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669765366
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">probability.probability_mass_function.monad</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pmf</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"o\">{</span>\n  <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"c1\">-- \"sample\" from P</span>\n  <span class=\"n\">q</span> <span class=\"bp\">←</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"c1\">-- \"sample\" from Q</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"c1\">-- return the sum of the samples.</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 312961242,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669765483
    },
    {
        "content": "<p>I think even if you build your own pmf from scratch you'd still have a really hard time making it computable because the monad framework that enables <code>do</code> notation doesn't let you put constraints on your types.</p>",
        "id": 312963522,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669766768
    },
    {
        "content": "<p>Ah I see. Thanks for the feedback.</p>",
        "id": 312967642,
        "sender_full_name": "Ben Ryjikov",
        "timestamp": 1669769517
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/pmf/src\">src#pmf</a></p>",
        "id": 312969220,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669770504
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/sampling.20a.20pmf/near/312963522\">said</a>:</p>\n<blockquote>\n<p>I think even if you build your own pmf from scratch you'd still have a really hard time making it (edit: the monad instance) computable because the monad framework that enables <code>do</code> notation doesn't let you put constraints on your types.</p>\n</blockquote>\n<p>What constraints are you thinking of? I guess I don't quite get what you're saying here</p>",
        "id": 313064868,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1669816520
    },
    {
        "content": "<p>Here's some fun with Lean4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">PreGiry</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">uniform</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">PreGiry</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bind</span> <span class=\"o\">:</span> <span class=\"n\">PreGiry</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">PreGiry</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">PreGiry</span> <span class=\"n\">β</span>\n  <span class=\"bp\">|</span> <span class=\"n\">dirac</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">PreGiry</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">PreGiry</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"n\">PreGiry.dirac</span>\n  <span class=\"n\">bind</span> <span class=\"o\">:=</span> <span class=\"n\">PreGiry.bind</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">PreGiry.sample</span> <span class=\"o\">:</span> <span class=\"n\">PreGiry</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">IO</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">uniform</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.rand</span> <span class=\"n\">m</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bind</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">P.sample</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sample</span>\n  <span class=\"bp\">|</span> <span class=\"n\">dirac</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">x</span>\n\n<span class=\"c1\">-- TODO: Change 2000000 to some other value?</span>\n<span class=\"kd\">def</span> <span class=\"n\">Uniform</span> <span class=\"o\">:</span> <span class=\"n\">PreGiry</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">PreGiry.uniform</span> <span class=\"mi\">0</span> <span class=\"mi\">2000000</span>\n  <span class=\"n\">return</span> <span class=\"n\">p.toFloat</span> <span class=\"bp\">/</span> <span class=\"mi\">2000000</span>\n\n<span class=\"c1\">-- Probably good enough ;)</span>\n<span class=\"kd\">def</span> <span class=\"k\">Pi</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">141592653589793238462643383279502884</span>\n\n<span class=\"c1\">-- The Box-Muller transform</span>\n<span class=\"kd\">def</span> <span class=\"n\">Normal</span> <span class=\"o\">:</span> <span class=\"n\">PreGiry</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">u1</span> <span class=\"bp\">←</span> <span class=\"n\">Uniform</span>\n  <span class=\"k\">let</span> <span class=\"n\">u2</span> <span class=\"bp\">←</span> <span class=\"n\">Uniform</span>\n  <span class=\"n\">return</span> <span class=\"n\">Float.sqrt</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">Float.log</span> <span class=\"n\">u1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Float.cos</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"k\">Pi</span> <span class=\"bp\">*</span> <span class=\"n\">u2</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Normal.sample</span>\n</code></pre></div>",
        "id": 313088809,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669823129
    },
    {
        "content": "<p>Fun. Could you explain why you called it <code>PreGiry</code>?</p>",
        "id": 313118748,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669831040
    },
    {
        "content": "<blockquote>\n<p>What constraints are you thinking of? </p>\n</blockquote>\n<p>The example that comes to mind is making <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.bUnion\">docs#finset.bUnion</a> a <code>has_bind</code> instance. It's not possible because you can't say \"finset is a monad over types with decidable equality\". <a href=\"#narrow/stream/113488-general/topic/Changing.20the.20functor.20typeclasses/near/265813573\">This thread</a> has more details.</p>",
        "id": 313122393,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669831991
    },
    {
        "content": "<p>I named it <code>PreGiry</code> because there is a map of (possibly non-lawful) monads from this to the Giry monad. This map has a dense image (in some sense that I don't know how to make precise right now) and is (very) noninjective. Thus in some sense the Giry monad is some completion of some quotient of <code>PreGiry</code>. Making all this precise could be a fun (probably nontrivial) exercise!</p>",
        "id": 313135669,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669835846
    }
]