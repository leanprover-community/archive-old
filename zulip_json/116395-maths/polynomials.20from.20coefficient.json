[
    {
        "content": "<p>Suppose I have a bunch of coefficients <code>a 0, a 1, a 2, ..., a n</code>, probably implemented as <code>a : nat -&gt; R</code> for some ring <code>R</code>. What is the best way to turn this into the polynomial <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>i</mi><mo>&lt;</mo><mi>n</mi></mrow></msub><msub><mi>a</mi><mi>i</mi></msub><msup><mi>X</mi><mi>i</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\sum_{i &lt; n} a_i X^i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1517em;vertical-align:-0.3271em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.162em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">&lt;</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3271em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span>?<br>\nOne can simply write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But this has the disadvantage that is ins't very structured. For example, showing that the <code>i</code>-th coefficient is <code>a i</code> is not a 1-lemma application. Should we have a dedicated constructor for this? Or does something already exist?</p>",
        "id": 274384586,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646656528
    },
    {
        "content": "<p>You turn \"a\" into a finsupp, and use polynomial.of_finsupp</p>",
        "id": 274385868,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1646657241
    },
    {
        "content": "<p>Unfortunately I'm wrong and we don't have that constructor. Can you make an add_monoid_algebra from your \"a\"?</p>",
        "id": 274385970,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1646657291
    },
    {
        "content": "<p>Afaik, we really don't have a good constructor + API for this type of examples.</p>",
        "id": 274387117,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646657897
    },
    {
        "content": "<p>If <code>P : ℕ →₀ R</code> then <code>polynomial.of_finsupp P</code> should give the polynomial, doesn't it?</p>",
        "id": 274387751,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646658175
    },
    {
        "content": "<p>I just realized that your question is probably related to <a href=\"https://github.com/leanprover-community/mathlib/pull/12447\">#12447</a> <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 274415252,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646670097
    },
    {
        "content": "<p>There is no <code>polynomial.of_finsupp P</code> because what you want is simply <code>⟨P⟩</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">polynomial</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n    <span class=\"o\">(</span><span class=\"n\">to_finsupp</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid_algebra</span> <span class=\"n\">R</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"n\">add_monoid_algebra</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">→₀</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 274492745,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1646711339
    },
    {
        "content": "<p>One should rename the constructor <code>of_finsupp</code> using the <code>::</code> syntax</p>",
        "id": 274504090,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646723309
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial/src\">src#polynomial</a></p>",
        "id": 274505943,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646725159
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> went back in time and renamed it for you</p>",
        "id": 274506028,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646725210
    },
    {
        "content": "<p>Nice! I didn't know he could do that.</p>",
        "id": 274506042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646725222
    },
    {
        "content": "<p>So more accurate would be \"the docs do not list a <code>polynomial.of_finsupp</code> because it is a structure constructor like <code>sigma.mk</code>\"</p>",
        "id": 274506132,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646725305
    },
    {
        "content": "<p>So I wasn't insane thinking we had one in the first place...</p>",
        "id": 274538146,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1646745001
    },
    {
        "content": "<p>It depends if you thought it before Sebastien went back in time.</p>",
        "id": 274558846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646754428
    }
]