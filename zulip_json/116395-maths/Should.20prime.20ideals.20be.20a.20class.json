[
    {
        "content": "<p>Currently <code>is_prime</code> is a class on ideals. This is so that the instance that says that quotienting by a prime ideal is an integral domain can be an instance. However we could do this differently, either by bundling prime ideals, or by making a quotient_ring function whose type is something like <code>Π {α : Type*} (I : ideal α) (h : is_prime I), Type*</code>. Would either of these be better? Stuff like this might be overusing type class inference a little I think <a href=\"https://github.com/leanprover-community/mathlib/pull/768/files#diff-210de6c3e5a3b7cf7ed5f3fe5352c9a7R547\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/768/files#diff-210de6c3e5a3b7cf7ed5f3fe5352c9a7R547\">https://github.com/leanprover-community/mathlib/pull/768/files#diff-210de6c3e5a3b7cf7ed5f3fe5352c9a7R547</a></p>",
        "id": 167527868,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1559859220
    },
    {
        "content": "<p>Using classes for theorem-type stuff is awkward in my experience.<br>\nWhat about leaving it a class, but just not writing any instances?</p>",
        "id": 167528795,
        "sender_full_name": "Reid Barton",
        "timestamp": 1559859974
    },
    {
        "content": "<p>I don't think that example can actually work, since <code>is_primary</code> is not a typeclass arg</p>",
        "id": 167528814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559860011
    },
    {
        "content": "<p>I would prefer that these things are local instances</p>",
        "id": 167528939,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559860122
    },
    {
        "content": "<p>Is there a simple rule about that? Arguments of an instance to the left of a colon must be either inferrable from the result type or <code>[]</code> arguments?</p>",
        "id": 167528953,
        "sender_full_name": "Reid Barton",
        "timestamp": 1559860140
    },
    {
        "content": "<p>yes, it's just that</p>",
        "id": 167528970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559860156
    },
    {
        "content": "<p><code>is_primary</code> is a class</p>",
        "id": 167529774,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1559861061
    },
    {
        "content": "<p>but it's not in brackets in the instance</p>",
        "id": 167529836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559861137
    },
    {
        "content": "<p>What I would suggest:</p>\n<ul>\n<li>Leave <code>is_prime</code> a class</li>\n<li>Turn all the <code>instance</code>s in the file you linked to into <code>theorem</code>s</li>\n<li>Leave <code>instance (I : ideal α) [hI : I.is_prime] : integral_domain I.quotient</code> unchanged</li>\n<li>Expect the user to use <code>letI</code> or <code>local attribute [instance]</code> to connect the theorems about <code>is_prime</code> to <code>integral_domain I.quotient</code> as necessary</li>\n</ul>",
        "id": 167530116,
        "sender_full_name": "Reid Barton",
        "timestamp": 1559861470
    },
    {
        "content": "<p>and often it won't be necessary, e.g., if we just have an <code>I.is_prime</code> hypothesis floating around (to the \"left of the colon\")</p>",
        "id": 167530126,
        "sender_full_name": "Reid Barton",
        "timestamp": 1559861496
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> Of course you can bundle prime ideals... it's a very good idea (-; Call the type of bundled prime ideals <code>Spec R</code>. <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 167546056,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559881649
    }
]