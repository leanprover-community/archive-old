[
    {
        "content": "<p>What's the canonical way of stating and proving this? I got stuck on the division.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">continuous</span><span class=\"bp\">.</span><span class=\"n\">mul</span>\n  <span class=\"o\">(</span><span class=\"n\">continuous</span><span class=\"bp\">.</span><span class=\"n\">mul</span>\n    <span class=\"o\">(</span><span class=\"n\">continuous_fst</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">continuous_subtype_val</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">continuous_snd</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">continuous_subtype_val</span><span class=\"o\">))</span>\n  <span class=\"k\">begin</span>\n\n\n  <span class=\"kn\">end</span>\n</pre></div>",
        "id": 186378827,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1579778403
    },
    {
        "content": "<p>Do you really want to use a subtype, instead of <code>continuous_on</code>?</p>",
        "id": 186379339,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1579778955
    },
    {
        "content": "<p>Not particularly, I have no preference.</p>",
        "id": 186379602,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1579779188
    },
    {
        "content": "<p>maybe something like</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"k\">begin</span>\n    <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">//</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n      <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">continuous_subtype_mk</span> <span class=\"bp\">_</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">continuous</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">continuous_inv</span> <span class=\"n\">this</span><span class=\"o\">),</span>\n  <span class=\"kn\">end</span>\n</pre></div>",
        "id": 186379872,
        "sender_full_name": "Reid Barton",
        "timestamp": 1579779438
    },
    {
        "content": "<p><code>real.continuous.inv</code> seems to do the trick.</p>",
        "id": 186379963,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1579779541
    },
    {
        "content": "<p>But there should probably be a <code>real.continuous_on_inv</code> as well.</p>",
        "id": 186379979,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1579779564
    },
    {
        "content": "<p>One day a tactic will do this for me<br>\n<code>x₁ x₂ : ℝ,\nhx : (x₁, x₂) ≠ (0, 0)\n⊢ ¬x₁ ^ 2 + x₂ ^ 2 = 0</code></p>",
        "id": 186380183,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1579779806
    },
    {
        "content": "<p>That would be nice. A <code>real_field</code> tactic?</p>",
        "id": 186380459,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579780097
    },
    {
        "content": "<p>Or maybe <code>linear_ordered_field</code> or something like that.</p>",
        "id": 186380479,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579780126
    },
    {
        "content": "<p>What is the natural structure in which squares are positive?</p>",
        "id": 186380579,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579780234
    },
    {
        "content": "<p>The first order theory of real closed fields is decidable. I suppose a tactic that solved that theory could also prove some statements over a subset of a real closed field as well.</p>",
        "id": 186381546,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1579781085
    },
    {
        "content": "<p>Exactly. So maybe we can just call it <code>rcf</code></p>",
        "id": 186381588,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579781126
    },
    {
        "content": "<p>There was a talk about it by Wenda Li at Lean together.</p>",
        "id": 186381667,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1579781183
    },
    {
        "content": "<p>Ooh, nice</p>",
        "id": 186381671,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579781191
    }
]