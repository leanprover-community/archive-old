[
    {
        "content": "<p>I suggest to generalize left/right-invariant measures to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">def</span> <span class=\"n\">is_smul_invariant</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">measurable_set</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">μ</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">μ</span> <span class=\"n\">A</span>\n</code></pre></div>\n<p>Then <code>is_mul_left_invariant (μ : measure G) = is_smul_invariant G μ</code> and <code>is_mul_right_invariant (μ : measure G) = is_smul_invariant Gᵒᵖ μ</code>.</p>",
        "id": 259462875,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635461745
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> What do you think?</p>",
        "id": 259462977,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635461804
    },
    {
        "content": "<p>Also, I think about replacing <code>def</code> with a <code>class</code>.</p>",
        "id": 259463013,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635461830
    },
    {
        "content": "<p>I do this in <a href=\"https://github.com/leanprover-community/mathlib/pull/2819/files\">https://github.com/leanprover-community/mathlib/pull/2819/files</a> but it should probably be an independent PR first, so +1 from me <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 259463859,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1635462374
    },
    {
        "content": "<p>Yeah, that is probably a good idea.</p>",
        "id": 259464188,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1635462628
    },
    {
        "content": "<p>Looks good to me.</p>",
        "id": 259490672,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1635492287
    }
]