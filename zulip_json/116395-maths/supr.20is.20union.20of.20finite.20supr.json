[
    {
        "content": "<p>I want to know that a <code>supr</code> of <code>intermediate_field</code>s is the union of finite <code>supr</code>s. But this sort of result holds for other subobjects (e.g., subgroups), so I'm wondering if you order-theory folks know the right way to state/prove this sort of thing?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.adjoin</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">intermediate_field</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">⨆</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">intermediate_field</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">⋃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"bp\">⨆</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">intermediate_field</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">⨆</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">s.finite</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">⨆</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 289597198,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1657807991
    },
    {
        "content": "<p>This is a general fact about complete lattices, right? It's very easy to prove by antisymmetry.</p>",
        "id": 289598198,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657808424
    },
    {
        "content": "<p>does the second thing hold in complete lattices too?</p>",
        "id": 289598438,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657808538
    },
    {
        "content": "<p>But can you talk about unions or membership in complete lattices?</p>",
        "id": 289598694,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1657808653
    },
    {
        "content": "<p>It doesn't make sense as stated, because of the membership relation, but you can replace <code>x ∈ _</code> by <code>x ≤ _</code> for an atom <code>x</code> and then it should hold in complete atomic lattices.</p>",
        "id": 289598739,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657808675
    },
    {
        "content": "<p>The right hand side is in term of sets, so I would imagine it needs some more galois connection magic between the subobject lattice and the set lattice?</p>",
        "id": 289598811,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1657808708
    },
    {
        "content": "<p>(<code>x ∈ s ↔ {x} ≤ s</code> and <code>{x}</code> is an atom)</p>",
        "id": 289598831,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657808716
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/116395-maths/topic/supr.20is.20union.20of.20finite.20supr/near/289598811\">said</a>:</p>\n<blockquote>\n<p>The right hand side is in term of sets, so I would imagine it needs some more galois connection magic between the subobject lattice and the set lattice?</p>\n</blockquote>\n<p>Exactly</p>",
        "id": 289598850,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1657808727
    },
    {
        "content": "<p>And the whole point is that there is a <code>⋃</code>, which makes sense in sets, but not in arbitrary complete lattices.</p>",
        "id": 289599009,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1657808797
    },
    {
        "content": "<p>You can just eliminate the coercions.</p>",
        "id": 289599164,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657808873
    },
    {
        "content": "<p>how would you state these two in lattice terms, Yael?</p>",
        "id": 289599235,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657808891
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/supr_eq_supr_finset\">docs#supr_eq_supr_finset</a> looks close to what is written here, up to that union/supr difference</p>",
        "id": 289599242,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1657808895
    },
    {
        "content": "<p>But there's a <code>⋃</code>, which is not the same as <code>⨆</code></p>",
        "id": 289599247,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1657808896
    },
    {
        "content": "<p>Yeah okay</p>",
        "id": 289599262,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657808903
    },
    {
        "content": "<p>Then that's surely not a general fact about complete lattices after all.</p>",
        "id": 289599310,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657808932
    },
    {
        "content": "<p>Right. But maybe with some Galois connection magic?</p>",
        "id": 289599344,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1657808952
    },
    {
        "content": "<p>Here's a potential generalization:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">subobject</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">subobject</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">subobject</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coe_injective</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">subobject</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">closure</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">subobject</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"o\">(</span><span class=\"n\">subobject</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">partial_order.lift</span> <span class=\"n\">coe</span> <span class=\"n\">coe_injective</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">key_fact</span> <span class=\"o\">:</span> <span class=\"n\">galois_insertion</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">subobject</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">subobject</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">subobject</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">key_fact.lift_complete_lattice</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">subobject</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">⨆</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">subobject</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">⋃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"bp\">⨆</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">subobject</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">subobject</span>\n</code></pre></div>",
        "id": 289602476,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1657810434
    },
    {
        "content": "<p>So I guess I'm wondering:</p>\n<ul>\n<li>Is this last sorry true (perhaps with more assumptions?)</li>\n<li>Is there a better way to state the last example so that it would automatically apply to <code>subgroup</code>s, <code>subalgebra</code>s, <code>intermediate_field</code>s, etc...?</li>\n</ul>",
        "id": 289603320,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1657810761
    },
    {
        "content": "<p>It feels like the key property of <code>subgroup</code>s, <code>subalgebra</code>s, <code>intermediate_field</code>s, etc.. is that a direct limit of subobjects is a subobject (e.g., <a href=\"https://leanprover-community.github.io/mathlib_docs/find/field.direct_limit.field\">docs#field.direct_limit.field</a>). But it's not entirely clear how to best phrase this in order-theoretic language.</p>",
        "id": 289613575,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1657815359
    },
    {
        "content": "<p>I think you're looking for something related to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lower_adjoint\">docs#lower_adjoint</a></p>",
        "id": 289624901,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1657820624
    },
    {
        "content": "<p>If I parse everything correctly, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lower_adjoint.closure_Union_closure\">docs#lower_adjoint.closure_Union_closure</a> is the first step, but it looks like there is nothing related to finiteness...</p>",
        "id": 289625608,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1657820953
    },
    {
        "content": "<p>Let me observe that filters also satisfies a similar identity:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.filter.basic</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">sets_infi_eq_Union</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">filter</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⨅</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span> <span class=\"bp\">=</span> <span class=\"bp\">⋃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">⨅</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">set.mem_Union</span><span class=\"o\">,</span> <span class=\"n\">filter.mem_sets</span><span class=\"o\">],</span> <span class=\"n\">rw</span> <span class=\"n\">filter.mem_infi</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">hI</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩,</span> <span class=\"n\">use</span> <span class=\"n\">hI.to_finset</span><span class=\"o\">,</span> <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">hI.fintype</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">filter.mem_infi_of_fintype</span><span class=\"o\">,</span> <span class=\"n\">infi_subtype''</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">simp_rw</span> <span class=\"n\">hI.mem_to_finset</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hx</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩,</span> <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">I.finite_to_set</span><span class=\"o\">],</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">filter.mem_infi_of_fintype</span><span class=\"o\">,</span> <span class=\"n\">infi_subtype''</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_coe</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hx</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><code>⨆</code> is replaced <code>⨅</code> here because <code>filter.sets</code> is antitone/contravariant.</p>",
        "id": 289799168,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1657932392
    },
    {
        "content": "<p>And the filters almost satisfies the <a href=\"#narrow/stream/116395-maths/topic/subobject_like.20class.3F/near/289710596\">preserves_filtered_colimits condition</a>, except it requires an additional condition that <code>ι : set α</code> is nonempty! It's basically stated as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.infi_sets_eq\">docs#filter.infi_sets_eq</a>, and just a little maneuver is required to put it in the form of <code>preserves_filtered_colimits</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.filter.basic</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">filter_sets_preserves_filtered_colimits</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"n\">X</span><span class=\"o\">)}</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">directed_on</span> <span class=\"o\">(</span><span class=\"bp\">≥</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⨅</span> <span class=\"n\">U</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span> <span class=\"bp\">=</span> <span class=\"bp\">⨆</span> <span class=\"n\">U</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">filter.sets</span> <span class=\"n\">U</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">infi_subtype''</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">supr_subtype''</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">filter.infi_sets_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hs</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">⟩,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>When <code>s</code> is empty, the LHS is <code>(⊤ : filter X).sets</code>, which is the singleton <code>{set.univ} : set (set X)</code>, while the RHS is the empty set. Such peculiarity! Incidentally, the filter constructed in the proof of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.infi_sets_eq/src\">src#filter.infi_sets_eq</a> is very similar to <code>filter_of_directed</code> in my recent <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Filter.20on.20.28set.20X.29/near/289690942\">code snippet</a>, and requires similar conditions.</p>",
        "id": 289804559,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1657940602
    },
    {
        "content": "<p>Yes, the nonempty hypothesis is needed in basically every situation (an empty union of subobjects is almost never going to be a subobject).</p>",
        "id": 289817274,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1657960884
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"411579\">@Sam van G</span> Pointed out that mathlib has <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_compactly_generated\">docs#is_compactly_generated</a>. This might be the right way to phrase things. You first prove compactly generated instances for everything, and then you write one lemma stating that a <code>supr</code> is a union of finite <code>suprs</code> (assuming a function to sets or perhaps to something more general).</p>",
        "id": 289817355,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1657961018
    }
]