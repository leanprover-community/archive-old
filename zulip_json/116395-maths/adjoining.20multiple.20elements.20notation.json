[
    {
        "content": "<p>So currently the notation for adjoining multiple elements to a field is<br>\n<code>notation K`⟮`:std.prec.max_plus l:(foldr `, ` (h t, set.insert h t) ∅) `⟯` := adjoin K l</code><br>\n(from field_theory/adjoin.lean).<br>\nThis definition is causing us a few headaches since <code>F⟮α⟯</code> is not equal to <code>adjoin F {α}</code>, and <code>F⟮α,β⟯</code> is not equal to <code>adjoin F {α,β}</code> (and so on).<br>\nDoes anyone know how to change the definition of the notation to fix this problem?<br>\nI think that this requires treating the first element differently, so that we start off by applying set.insert to a singleton, rather than to the empty set.</p>",
        "id": 208889112,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599081411
    },
    {
        "content": "<p>Would something like this work?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">notation</span> <span class=\"n\">K</span><span class=\"bp\">`</span><span class=\"err\">⟮</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"n\">std</span><span class=\"bp\">.</span><span class=\"n\">prec</span><span class=\"bp\">.</span><span class=\"n\">max_plus</span> <span class=\"n\">l</span><span class=\"bp\">`</span><span class=\"err\">⟯</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">adjoin</span> <span class=\"n\">K</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">}</span>\n<span class=\"kn\">notation</span> <span class=\"n\">K</span><span class=\"bp\">`</span><span class=\"err\">⟮</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"n\">std</span><span class=\"bp\">.</span><span class=\"n\">prec</span><span class=\"bp\">.</span><span class=\"n\">max_plus</span> <span class=\"n\">α</span><span class=\"bp\">`</span><span class=\"o\">,</span><span class=\"bp\">`</span><span class=\"n\">l</span><span class=\"o\">:(</span><span class=\"n\">foldr</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">insert</span> <span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">})</span> <span class=\"bp\">`</span><span class=\"err\">⟯</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">adjoin</span> <span class=\"n\">K</span> <span class=\"n\">l</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">F</span><span class=\"err\">⟮</span><span class=\"n\">α</span><span class=\"err\">⟯</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">F</span><span class=\"err\">⟮</span><span class=\"n\">α</span><span class=\"o\">,</span><span class=\"n\">β</span><span class=\"err\">⟯</span>\n</code></pre></div>",
        "id": 208890175,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1599082066
    },
    {
        "content": "<p>that looks promising, although it seems to sometimes require casting that wasn't previously necessary:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">notation</span> <span class=\"n\">K</span><span class=\"bp\">`</span><span class=\"err\">⟮</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"n\">std</span><span class=\"bp\">.</span><span class=\"n\">prec</span><span class=\"bp\">.</span><span class=\"n\">max_plus</span> <span class=\"n\">l</span><span class=\"bp\">`</span><span class=\"err\">⟯</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">adjoin</span> <span class=\"n\">K</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">}</span>\n<span class=\"kn\">notation</span> <span class=\"n\">K</span><span class=\"bp\">`</span><span class=\"err\">⟮</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"n\">std</span><span class=\"bp\">.</span><span class=\"n\">prec</span><span class=\"bp\">.</span><span class=\"n\">max_plus</span> <span class=\"n\">α</span><span class=\"bp\">`</span><span class=\"o\">,</span><span class=\"bp\">`</span><span class=\"n\">l</span><span class=\"o\">:(</span><span class=\"n\">foldr</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">insert</span> <span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">})</span> <span class=\"bp\">`</span><span class=\"err\">⟯</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">adjoin</span> <span class=\"n\">K</span> <span class=\"n\">l</span>\n\n<span class=\"c1\">--this works</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">mem_adjoin_simple_self</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"err\">⟮</span><span class=\"n\">α</span><span class=\"err\">⟯</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"c1\">--but this worked with the old notation</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">mem_adjoin_simple_self</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">∈</span> <span class=\"n\">F</span><span class=\"err\">⟮</span><span class=\"n\">α</span><span class=\"err\">⟯</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 208891756,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599082997
    },
    {
        "content": "<p>I would wonder which notation is getting used there.</p>",
        "id": 208892065,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599083151
    },
    {
        "content": "<p>Oh wait, only one has a comma in it ...</p>",
        "id": 208892122,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599083165
    },
    {
        "content": "<p>er, rather only one <em>doesn't</em> have a comma</p>",
        "id": 208892134,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599083174
    },
    {
        "content": "<p>maybe you need <code>adjoin K (@singleton _ _ set.has_singleton l)</code> instead of <code>adjoin K {l}</code></p>",
        "id": 208892283,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599083271
    },
    {
        "content": "<p>I think it's the same issue we ran into before</p>",
        "id": 208892393,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599083311
    },
    {
        "content": "<p>where for some reason Lean gets confused about the type of <code>{l}</code></p>",
        "id": 208892426,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599083330
    },
    {
        "content": "<p>Ok, so it seems like this works:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">notation</span> <span class=\"n\">K</span><span class=\"bp\">`</span><span class=\"err\">⟮</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"n\">std</span><span class=\"bp\">.</span><span class=\"n\">prec</span><span class=\"bp\">.</span><span class=\"n\">max_plus</span> <span class=\"n\">l</span><span class=\"bp\">`</span><span class=\"err\">⟯</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">adjoin</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">singleton</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">has_singleton</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"kn\">notation</span> <span class=\"n\">K</span><span class=\"bp\">`</span><span class=\"err\">⟮</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"n\">std</span><span class=\"bp\">.</span><span class=\"n\">prec</span><span class=\"bp\">.</span><span class=\"n\">max_plus</span> <span class=\"n\">α</span><span class=\"bp\">`</span><span class=\"o\">,</span><span class=\"bp\">`</span><span class=\"n\">l</span><span class=\"o\">:(</span><span class=\"n\">foldr</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">insert</span> <span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">})</span> <span class=\"bp\">`</span><span class=\"err\">⟯</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">adjoin</span> <span class=\"n\">K</span> <span class=\"n\">l</span>\n</code></pre></div>\n\n\n<p>and I haven't noticed any problems yet</p>",
        "id": 208892538,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599083398
    },
    {
        "content": "<p>You might need to change whether whitespace is necessary between the commas</p>",
        "id": 208895430,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1599085069
    },
    {
        "content": "<p>here's an potential issue: it seems to be inserting the wrong way: <code>F⟮α,β⟯</code> equals <code>adjoin F {β, α}</code>, I think.</p>",
        "id": 208895903,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599085340
    },
    {
        "content": "<p>I think that was also a problem with the original notation</p>",
        "id": 208897767,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599086528
    },
    {
        "content": "<p>but it would be good to fix</p>",
        "id": 208897782,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599086540
    },
    {
        "content": "<p>maybe <code>foldl</code> instead of <code>foldr</code>?</p>",
        "id": 208897802,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599086555
    },
    {
        "content": "<p>No, that doesn't make any difference actually</p>",
        "id": 208897910,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599086633
    },
    {
        "content": "<p>the big problem seems to be that Yakov's code pick's off the first element and inserts into that singleton</p>",
        "id": 208899154,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599087589
    },
    {
        "content": "<p>I think that you would instead have to pick off the last element</p>",
        "id": 208899235,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599087605
    },
    {
        "content": "<p>Oh, good point</p>",
        "id": 208899297,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599087639
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/116395-maths/topic/adjoining.20multiple.20elements.20notation/near/208897802\">said</a>:</p>\n<blockquote>\n<p>maybe <code>foldl</code> instead of <code>foldr</code>?</p>\n</blockquote>\n<p>Oh, wait, this makes it worse. It means the entire list is flipped rather than just the first element being in the wrong place</p>",
        "id": 208899542,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599087814
    },
    {
        "content": "<p>Is there some way of reversing a list in Lean?</p>",
        "id": 208900142,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599088218
    },
    {
        "content": "<p>list.reverse?</p>",
        "id": 208900267,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599088321
    },
    {
        "content": "<p>we don't actually have a list though I guess</p>",
        "id": 208900335,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599088350
    },
    {
        "content": "<p>yeah, <code>l</code> is a set so you can't just add a reverse on the right hand side</p>",
        "id": 208900357,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599088372
    },
    {
        "content": "<p>maybe we could first form a list then reverse it then turn it into a set</p>",
        "id": 208900362,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599088376
    },
    {
        "content": "<p>might work</p>",
        "id": 208900392,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599088409
    },
    {
        "content": "<p>there might even be automatic coersion list -&gt; set</p>",
        "id": 208900401,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599088417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/116395-maths/topic/adjoining.20multiple.20elements.20notation/near/208900401\">said</a>:</p>\n<blockquote>\n<p>there might even be automatic coersion list -&gt; set</p>\n</blockquote>\n<p>although we want the set we get to be definitionally equal to <code>{a, b, c}</code></p>",
        "id": 208900477,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599088458
    },
    {
        "content": "<p>doesn't seem like there's automatic coersion</p>",
        "id": 208900521,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599088479
    },
    {
        "content": "<p>but there should be a way</p>",
        "id": 208900533,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599088483
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>\n</code></pre></div>",
        "id": 208900557,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599088490
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">notation</span> <span class=\"n\">K</span><span class=\"bp\">`</span><span class=\"err\">⟮</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"n\">std</span><span class=\"bp\">.</span><span class=\"n\">prec</span><span class=\"bp\">.</span><span class=\"n\">max_plus</span> <span class=\"n\">l</span><span class=\"bp\">`</span><span class=\"err\">⟯</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">adjoin</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">singleton</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">has_singleton</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"kn\">notation</span> <span class=\"n\">K</span><span class=\"bp\">`</span><span class=\"err\">⟮</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"n\">std</span><span class=\"bp\">.</span><span class=\"n\">prec</span><span class=\"bp\">.</span><span class=\"n\">max_plus</span> <span class=\"n\">α</span><span class=\"bp\">`</span><span class=\"o\">,</span><span class=\"bp\">`</span><span class=\"n\">l</span><span class=\"o\">:(</span><span class=\"n\">foldl</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">insert</span> <span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">})</span> <span class=\"bp\">`</span><span class=\"err\">⟯</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">adjoin</span> <span class=\"n\">K</span> <span class=\"o\">((</span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">reverse</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 208900586,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599088499
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/116395-maths/topic/adjoining.20multiple.20elements.20notation/near/208900362\">said</a>:</p>\n<blockquote>\n<p>maybe we could first form a list then reverse it then turn it into a set</p>\n</blockquote>\n<p>why can't I give emoji reacts to my own messages?</p>",
        "id": 208900587,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599088499
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253861\">Thomas Browning</span> <a href=\"#narrow/stream/116395-maths/topic/adjoining.20multiple.20elements.20notation/near/208900586\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">notation</span> <span class=\"n\">K</span><span class=\"bp\">`</span><span class=\"err\">⟮</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"n\">std</span><span class=\"bp\">.</span><span class=\"n\">prec</span><span class=\"bp\">.</span><span class=\"n\">max_plus</span> <span class=\"n\">l</span><span class=\"bp\">`</span><span class=\"err\">⟯</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">adjoin</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">singleton</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">has_singleton</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"kn\">notation</span> <span class=\"n\">K</span><span class=\"bp\">`</span><span class=\"err\">⟮</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"n\">std</span><span class=\"bp\">.</span><span class=\"n\">prec</span><span class=\"bp\">.</span><span class=\"n\">max_plus</span> <span class=\"n\">α</span><span class=\"bp\">`</span><span class=\"o\">,</span><span class=\"bp\">`</span><span class=\"n\">l</span><span class=\"o\">:(</span><span class=\"n\">foldl</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">insert</span> <span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">})</span> <span class=\"bp\">`</span><span class=\"err\">⟯</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">adjoin</span> <span class=\"n\">K</span> <span class=\"o\">((</span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">reverse</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>this seems to cause some problems</p>",
        "id": 208900728,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599088571
    },
    {
        "content": "<p>yeah, the coersion doesn't work</p>",
        "id": 208900760,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599088601
    },
    {
        "content": "<p>oh</p>",
        "id": 208900764,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599088607
    },
    {
        "content": "<p>why are the errors about <code>decidable_eq</code>?</p>",
        "id": 208900778,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599088619
    },
    {
        "content": "<p>no idea</p>",
        "id": 208900788,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599088625
    },
    {
        "content": "<p>if you add in a hypothesis about decidable_eq then it gives a coersion error</p>",
        "id": 208900801,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599088639
    },
    {
        "content": "<p>I guess it has something to do with the elements of a list being allowed to be different but not the elements of a set?</p>",
        "id": 208900807,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1599088642
    },
    {
        "content": "<p>Can you have a lemma that discusses adjoining a multiset?</p>",
        "id": 208901266,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1599088994
    },
    {
        "content": "<p>Then you can use a list</p>",
        "id": 208901269,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1599088999
    },
    {
        "content": "<p>This seems to work...</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">fancy_insert</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">priority</span> <span class=\"mi\">1000</span><span class=\"o\">]</span>\n<span class=\"kn\">instance</span> <span class=\"n\">fancy_insert_empty</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">fancy_insert</span> <span class=\"o\">(</span><span class=\"err\">∅</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">insert</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">singleton</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">has_singleton</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">priority</span> <span class=\"mi\">900</span><span class=\"o\">]</span>\n<span class=\"kn\">instance</span> <span class=\"n\">fancy_insert_nonempty</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fancy_insert</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">insert</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">insert</span> <span class=\"n\">x</span> <span class=\"n\">s</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">notation</span> <span class=\"n\">K</span><span class=\"bp\">`</span><span class=\"err\">⟮</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"n\">std</span><span class=\"bp\">.</span><span class=\"n\">prec</span><span class=\"bp\">.</span><span class=\"n\">max_plus</span> <span class=\"n\">l</span><span class=\"o\">:(</span><span class=\"n\">foldr</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">fancy_insert</span><span class=\"bp\">.</span><span class=\"n\">insert</span> <span class=\"n\">t</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"err\">∅</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"err\">⟯</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">adjoin</span> <span class=\"n\">K</span> <span class=\"n\">l</span>\n</code></pre></div>",
        "id": 208902906,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599090124
    },
    {
        "content": "<p>(assuming I'm following what you're trying to accomplish)</p>",
        "id": 208903084,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599090246
    },
    {
        "content": "<p>Lovely! I think that works.</p>",
        "id": 208903303,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1599090406
    }
]