[
    {
        "content": "<p>Currently convexity for functions is only defined for functions of type <code>E → ℝ</code>. Would anyone object if I were to generalize this to <code>E → β</code> with <code>[add_comm_monoid β] [preorder β] [semimodule ℝ β]</code>? The main drawback is that some multiplications would be replaced by <code>smul</code>s, but it turns out that it involves very few changes in the code.</p>",
        "id": 205986767,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1596600586
    },
    {
        "content": "<p>And the reason I wanted to do that is that I would like to introduce <code>concave_on</code> for concave functions, and it doesn't seem possible to use <code>order_dual</code> if ℝ is hardcoded.</p>",
        "id": 205986847,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1596600706
    },
    {
        "content": "<p>Is there any case other than <code>β = order_dual ℝ</code> that you have in mind? It seems a lot of work relative to just talking about the convexity of <code>-f</code>.</p>",
        "id": 205993822,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1596611041
    },
    {
        "content": "<p>Not in the short term, but there is the concept of \"operator convex\" functions that I've worked with quite a bit, where we say that A ≤ B for A and B Hermitian operators when B-A is positive semidefinite, and define convexity of functions based on that.</p>",
        "id": 206026165,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1596636558
    },
    {
        "content": "<p>I think it's OK to have <code>smul</code> instead of <code>mul</code>.</p>",
        "id": 206087728,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596668036
    },
    {
        "content": "<p>I know nothing about \"operator convex\" functions and their applications.</p>",
        "id": 206087788,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596668065
    },
    {
        "content": "<p>Could you please post some links?</p>",
        "id": 206087853,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596668125
    },
    {
        "content": "<p>I mean, I don't care too much about <code>smul</code> vs <code>mul</code> but it's good to know what are the advantages of the new definition.</p>",
        "id": 206087931,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596668178
    },
    {
        "content": "<p>The definitions are on Wikipedia here: <a href=\"https://en.wikipedia.org/wiki/Trace_inequality\">https://en.wikipedia.org/wiki/Trace_inequality</a></p>\n<p>This goes a bit more in depth, in section 5.3: <br>\n<a href=\"http://www-m5.ma.tum.de/foswiki/pub/M5/Allgemeines/MichaelWolf/QChannelLecture.pdf\">http://www-m5.ma.tum.de/foswiki/pub/M5/Allgemeines/MichaelWolf/QChannelLecture.pdf</a></p>\n<p>Otherwise, there's the book \"Matrix Analysis\" by Rajendra Bhatia:<br>\n<a href=\"https://www.springer.com/gp/book/9780387948461\">https://www.springer.com/gp/book/9780387948461</a></p>",
        "id": 206093283,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1596673577
    },
    {
        "content": "<p>As far as applications go, there are quite a few in quantum information theory, where positive semidefinite matrices can be interpreted as quantum states, and the theory built around operator convexity allows us to prove all kinds of results about quantum channels and information measures.</p>",
        "id": 206093497,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1596673849
    },
    {
        "content": "<p>I've thought about this some more, and I think the natural thing to do would be to define convexity for functions of type <code>E → β</code> with β being an ordered semimodule (in the sense of <a href=\"https://en.wikipedia.org/wiki/Ordered_vector_space\">https://en.wikipedia.org/wiki/Ordered_vector_space</a>), so that we would have<br>\n<code> x ≤ y → x + z ≤ y + z</code> and <code>y ≤ x → a • y ≤ a • x</code>.  Declaring <code>[ordered_add_comm_group β] [semimodule ℝ β]</code> gives me the first condition, but is there a typeclass that would give me the second one?</p>",
        "id": 206213275,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1596760183
    },
    {
        "content": "<p>Would it work to assume <code>[topological_module ℝ β] [order_topology β]</code>?  Here <code>order_topology</code> is the statement that the order-induced topology on <code>β</code> is the same as the lurking topology from the <code>topological_module</code> structure.</p>",
        "id": 206219385,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1596768454
    },
    {
        "content": "<p>You should have that scalar multiplication by nonzero <code>a</code> is both continuous and injective.  I haven't thought it through, but under appropriate hypotheses on the order (intermediate value theorem?) this might be enough to get that it is strictly monotone.</p>",
        "id": 206219623,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1596768798
    },
    {
        "content": "<p>Sounds plausible, but it feels like a bit of overkill to introduce a topology in the picture just for this...</p>",
        "id": 206221520,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1596771841
    },
    {
        "content": "<p>(and the proof would likely be more work than defining the class I want if it doesn't exist!)</p>",
        "id": 206221563,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1596771868
    },
    {
        "content": "<p>AFAIK, there is no such class yet.</p>",
        "id": 206224762,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596777159
    },
    {
        "content": "<p>I gave it a shot in this branch I just pushed:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/compare/generalized_convex_on\">https://github.com/leanprover-community/mathlib/compare/generalized_convex_on</a></p>\n<p>I introduced the class</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">ordered_semimodule</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ordered_add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">smul_lt_smul_of_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"err\">•</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"err\">•</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">lt_of_smul_lt_smul_of_nonneg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"err\">•</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"err\">•</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>and generalized most definitions about convexity of functions in <code>analysis/convex/basic.lean</code> to work on an <code>ordered_semimodule ℝ β</code>. It went through pretty smoothly I think -- hopefully I haven't made any basic mistake in defining the new class though!</p>",
        "id": 206317278,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1596840125
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span>, how far have you gone? I'm about to generalize <code>{E : Type*} [add_comm_group E] [module ℝ E]</code> to <code>(k : Type*) {E : Type*} [ordered_semiring k] [add_comm_group E] [module k E]</code> and I wanted to check your branch but it doesn't exist anymore.</p>",
        "id": 252163168,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630928462
    },
    {
        "content": "<p>Why is <code>convex_on</code> taking <code>convex s</code> as an hypothesis? It seems like the right thing here would be to make it total (or at least totaller) by allowing any set, even if that means the function isn't really convex on <code>s</code> anymore, but rather convex on <code>convex_hull s</code>.</p>",
        "id": 252164523,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630929289
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> I haven't worked any further in that direction since last year. You can go ahead with that change, I think it's a good idea!</p>",
        "id": 252192760,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1630942789
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Definition.20of.20convex_on/near/252164523\">said</a>:</p>\n<blockquote>\n<p>Why is <code>convex_on</code> taking <code>convex s</code> as an hypothesis? It seems like the right thing here would be to make it total (or at least totaller) by allowing any set, even if that means the function isn't really convex on <code>s</code> anymore, but rather convex on <code>convex_hull s</code>.</p>\n</blockquote>\n<p>That makes sense to me. The potential downside is that we would then have to include an extra <code>convex s</code> assumption in too many lemmas, but maybe it's still worth it.</p>",
        "id": 252193113,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1630942971
    }
]