[
    {
        "content": "<p>I find in <code>data/matrix/basic.lean</code> the definition <code>def add_monoid_hom.map_matrix</code> showing that a map as additive monoids between coefficients induces an additive map between matrices. I am unable to find the equivalent for multiplicative structures, in particular the fact that if <code>R,S</code> are <code>A</code>-algebras, every <code>A</code>-algebra morphism <code>f:R---&gt;S</code> induces a map of <code>A</code>-modules between the matrices. I am happy to <code>PR</code> all this, but I wonder if it is not already there.</p>",
        "id": 243502050,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624361152
    },
    {
        "content": "<p>Can you give the lean statement of what you're describing?</p>",
        "id": 243502650,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624361519
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_hom.map_matrix\">docs#add_monoid_hom.map_matrix</a> for reference)</p>",
        "id": 243503357,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624361937
    },
    {
        "content": "<p>Yes, one second</p>",
        "id": 243503386,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624361959
    },
    {
        "content": "<p>Do we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.map\">docs#matrix.map</a>?</p>",
        "id": 243503393,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624361968
    },
    {
        "content": "<p>I know there is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom.map_matrix\">docs#ring_hom.map_matrix</a>, I don't think there is something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/alg_hom.map_matrix\">docs#alg_hom.map_matrix</a>?</p>",
        "id": 243503547,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624362055
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">β</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">β</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"o\">[</span><span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"o\">[</span><span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 243503568,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624362069
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_action_hom\">docs#mul_action_hom</a> is extremely underdeveloped, so we almost certainly don't have that</p>",
        "id": 243503605,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624362110
    },
    {
        "content": "<p>There is a funny</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- TODO: there should be a way to avoid restating these for each `foo_hom`.</span>\n</code></pre></div>\n<p>which seems to point in that direction...</p>",
        "id": 243503708,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624362150
    },
    {
        "content": "<p>\"a map of A-modules\" is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map\">docs#linear_map</a>, not <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_action_hom\">docs#mul_action_hom</a>, right?</p>",
        "id": 243503709,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624362150
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>  You're right, but I don't know if it is better the way I proposed it, or if it is better to simply assume that <code>M, N</code> have a multiplicative action of  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>β</mi></mrow><annotation encoding=\"application/x-tex\">\\beta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span></span></span></span></p>",
        "id": 243503789,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624362228
    },
    {
        "content": "<p>After all, we can create matrices of sets, if we don't require to add them</p>",
        "id": 243503874,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624362273
    },
    {
        "content": "<p>In either case I agree with <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> that there does not seem to be anything in this direction.</p>",
        "id": 243503883,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624362279
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/116395-maths/topic/mul_action_hom.2Emap_matrix/near/243503789\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span>  You're right, but I don't know if it is better the way I proposed it, or if it is better to simply assume that <code>M, N</code> have a multiplicative action of  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>β</mi></mrow><annotation encoding=\"application/x-tex\">\\beta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span></span></span></span></p>\n</blockquote>\n<p>Why not add both? <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 243503898,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624362305
    },
    {
        "content": "<p>OK, I'll go for a <code>PR</code>!</p>",
        "id": 243503913,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624362316
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 243503932,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624362333
    },
    {
        "content": "<p>I'd probably lean towards adding this for <code>linear_map</code> and <code>alg_hom</code>, but leaving <code>mul_action_hom</code> missing</p>",
        "id": 243505818,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624363590
    },
    {
        "content": "<p>Ok, and why so? I mean, I suspect that you have a stronger reason that saving me 3 lines of code: consistency with other files, useless circular things, etc...?</p>",
        "id": 243507890,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624364861
    },
    {
        "content": "<p>I think there's little point developing <code>mul_action_hom</code> as it's basically unused. Ideally we'd generalize as many lemmas as possible away from linear_map down the heirarchy, and then use automation to copy them back up</p>",
        "id": 243511572,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624366733
    },
    {
        "content": "<p>But if you actually do need it, then you should add it!</p>",
        "id": 243511669,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624366790
    },
    {
        "content": "<p>Here it is: <a href=\"https://github.com/leanprover-community/mathlib/issues/8061\">#8061</a></p>",
        "id": 243704919,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1624478592
    }
]