[
    {
        "content": "<p>What's the best way to solve this goal?  y-x is a subtraction of natural numbers and I need to convince Lean that by h : x &lt; y, it coincides with the ring subtraction.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n\n<span class=\"n\">def</span> <span class=\"n\">ex1</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span>\n\n<span class=\"n\">def</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span>\n<span class=\"n\">def</span> <span class=\"n\">odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">even_or_odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">or</span> <span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">odd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">even_plus_even_is_even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">and</span> <span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">even_minus_even_is_even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n  <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">odd_minus_odd_is_even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">odd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">odd</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n  <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mul_cancel</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">halving_first</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">zero_lt_two</span> <span class=\"o\">:=</span> <span class=\"n\">lt_trans</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">xeo</span> <span class=\"o\">:=</span> <span class=\"n\">even_or_odd</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">yeo</span> <span class=\"o\">:=</span> <span class=\"n\">even_or_odd</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">xeo</span> <span class=\"k\">with</span> <span class=\"n\">x_even</span> <span class=\"n\">x_odd</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">yeo</span> <span class=\"k\">with</span> <span class=\"n\">y_even</span> <span class=\"n\">y_odd</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">sum_even</span> <span class=\"o\">:=</span> <span class=\"n\">even_plus_even_is_even</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"bp\">⟨</span><span class=\"n\">y_even</span><span class=\"o\">,</span> <span class=\"n\">x_even</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">diff_even</span> <span class=\"o\">:=</span> <span class=\"n\">even_minus_even_is_even</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"bp\">⟨</span><span class=\"n\">y_even</span><span class=\"o\">,</span> <span class=\"n\">x_even</span><span class=\"o\">,</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">even</span> <span class=\"n\">at</span> <span class=\"n\">sum_even</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">sum_even</span> <span class=\"k\">with</span> <span class=\"n\">sum&#39;</span> <span class=\"n\">sum_ev</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">even</span> <span class=\"n\">at</span> <span class=\"n\">diff_even</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">diff_even</span> <span class=\"k\">with</span> <span class=\"n\">diff&#39;</span> <span class=\"n\">diff_ev</span><span class=\"o\">,</span>\n<span class=\"n\">use</span> <span class=\"n\">sum&#39;</span><span class=\"o\">,</span>\n<span class=\"n\">use</span> <span class=\"n\">diff&#39;</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">claim</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">sum&#39;</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">diff&#39;</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n<span class=\"n\">rw</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">claim&#39;</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">sum&#39;</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"n\">diff&#39;</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">thing</span> <span class=\"o\">:</span> <span class=\"mi\">4</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">sum&#39;</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"n\">diff&#39;</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">sum&#39;</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">diff&#39;</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">thing</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">sum_ev</span><span class=\"o\">),</span>\n<span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">diff_ev</span><span class=\"o\">),</span>\n<span class=\"c1\">-- ring doesn&#39;t work due the subtraction of natural numbers.</span>\n<span class=\"c1\">--   (Which takes n - m to be zero if n &lt; m.)</span>\n<span class=\"c1\">-- How to convince Lean that y-x is ring subtraction as a consequence of h?</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 189231276,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582822055
    },
    {
        "content": "<p>Why not try to write a separate lemma which states exactly what you want to use at this point?</p>",
        "id": 189231684,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582822301
    },
    {
        "content": "<p>(Any Lean proof longer than 10 lines needs refactoring into smaller chunks. :-)</p>",
        "id": 189231718,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582822321
    },
    {
        "content": "<p>The <code>extract_goal</code> tactic is really useful for this.</p>",
        "id": 189232237,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582822584
    },
    {
        "content": "<p>I'm trying it to no avail...</p>",
        "id": 189235097,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582824504
    },
    {
        "content": "<p>See prelim below</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n\n<span class=\"n\">def</span> <span class=\"n\">ex1</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span>\n\n<span class=\"n\">def</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span>\n<span class=\"n\">def</span> <span class=\"n\">odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">even_or_odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">or</span> <span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">odd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">even_plus_even_is_even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">and</span> <span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">even_minus_even_is_even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n  <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">odd_minus_odd_is_even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">odd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">odd</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n  <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mul_cancel</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">prelim</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"err\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">lem</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">zero_le</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">thing</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_le_mul_left</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">thing&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_lt_mul_of_pos_right</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n<span class=\"n\">exact</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">thing</span> <span class=\"n\">thing&#39;</span><span class=\"o\">,</span>\n\n<span class=\"k\">have</span> <span class=\"n\">claim</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_two</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_two</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_two</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">thing</span> <span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">exact</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_add_cancel</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">lem</span><span class=\"o\">))</span>\n<span class=\"o\">},</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">thing</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n<span class=\"c1\">-- what the heck should I do next?</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 189235179,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582824556
    },
    {
        "content": "<p>You definitely want to take advantage of the fact that this would be trivial to prove if you were in <code>int</code> rather than <code>nat</code>: you could just use <code>ring</code>. So the strategy should be:</p>\n<ul>\n<li>Use injectivity of the map from <code>nat</code> to <code>int</code> to show that it suffices to prove this after coercing both sides to <code>int</code></li>\n<li>Push the coercion from <code>nat</code> to <code>int</code> inwards (hopefully <code>push_cast</code> will assist you here)</li>\n<li>Possibly have to do some explicit work using the hypothesis <code>h</code> to push the coercion over the subtraction (but ideally <code>push_cast</code> will help you even here)</li>\n<li>Call <code>ring</code> (or even better, state the result in <code>int</code> as a separate lemma, proved with <code>by ring</code>, and apply that lemma)</li>\n</ul>",
        "id": 189235807,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582824971
    },
    {
        "content": "<p>For the first step, I would type in:</p>\n<div class=\"codehilite\"><pre><span></span>import tactic.basic\n\nexample (x y : ℕ) (h : (x : ℤ) = (y : ℤ)) : x = y := by library_search\n</pre></div>",
        "id": 189236038,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582825131
    },
    {
        "content": "<p>to learn what the name of the lemma about injectivity is</p>",
        "id": 189236054,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582825144
    },
    {
        "content": "<p>it says: <code>int.of_nat.inj</code></p>",
        "id": 189236067,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582825157
    },
    {
        "content": "<p>Unfortunately <code>push_cast</code> does the wrong thing at the next step...</p>",
        "id": 189236198,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582825244
    },
    {
        "content": "<p>Here's another approach:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">prelim</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"err\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">exists_eq_add_of_lt</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">w</span> <span class=\"n\">hw</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hw</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">w</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">w</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">omega</span><span class=\"o\">),</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>but this is a dirty hack -- what Scott is suggesting is morally the correct thing to do I think.</p>",
        "id": 189236529,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582825425
    },
    {
        "content": "<p>I'm just observing that because the subtractions are not too bad, you can remove them without too much trouble (replace y with x+w+1) and then <code>ring</code> works anyway.</p>",
        "id": 189236613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582825466
    },
    {
        "content": "<p>It turns out <code>library_search</code> leads you down the wrong track here. It suggests <code>int.of_nat.inj</code>, but this introduces the explicit function <code>int.of_nat</code>, which then doesn't play well with <code>push_cast</code>. Using <code>suggest</code> instead of <code>library_search</code> identifies as the 3rd suggestion the lemma <code>int.coe_nat_inj</code>, which is better.</p>",
        "id": 189236730,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582825551
    },
    {
        "content": "<p>Then</p>\n<div class=\"codehilite\"><pre><span></span>example (x y : ℕ) (h : x &lt; y) :\n  2 * (x ^ 2 + y ^ 2) = (y + x) ^ 2 + (y - x) ^ 2 :=\nbegin\n  apply int.coe_nat_inj,\n  push_cast,\nend\n</pre></div>\n\n\n<p>gives us the goal</p>\n<div class=\"codehilite\"><pre><span></span>(↑0 + 1 + 1) * (↑(x ^ 2) + ↑(y ^ 2)) = ↑((y + x) ^ 2) + ↑((y - x) ^ 2)\n</pre></div>\n\n\n<p>which ... suggests that we haven't correctly tagged lemmas with <code>push_cast</code>! It's lame that <code>↑2</code> has been converted to <code>↑0 + 1 + 1</code>, and it's lame that <code>↑(x ^ 2)</code> hasn't been converted to <code>(↑x) ^ 2</code>.</p>",
        "id": 189236912,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582825658
    },
    {
        "content": "<p>To get the <code>norm_cast</code> approach to work I'd like to have <code>x &lt;= y -&gt; ↑y - ↑x = ↑(y - x)</code>. It should be all downhill from there.</p>",
        "id": 189236917,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582825661
    },
    {
        "content": "<p>Scott -- I've started with the int result and am trying to get back to the nat result with <code>norm_cast</code>. You're going the other way. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">prelim</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"err\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"err\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- this involves ↑y - ↑x which can&#39;t be normcasted down to ↑(y - x)</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 189237117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582825773
    },
    {
        "content": "<p>There's a big <code>norm_cast</code> PR in progress <a href=\"https://github.com/leanprover-community/mathlib/pull/1103\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1103\">here</a>.</p>",
        "id": 189237131,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1582825784
    },
    {
        "content": "<p>Where does one obtain a <code>has_pow ℤ ℕ</code> instance from??</p>",
        "id": 189237309,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582825901
    },
    {
        "content": "<p>algebra.group_power?</p>",
        "id": 189237328,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582825917
    },
    {
        "content": "<p>That's where I usually look...</p>",
        "id": 189237370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582825925
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span>, what's the state of that PR? Do you know if anyone is looking after it?</p>",
        "id": 189237395,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582825944
    },
    {
        "content": "<p>I would ask <span class=\"user-mention\" data-user-id=\"213273\">@Paul-Nicolas Madelaine</span> and <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span>.</p>",
        "id": 189237429,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1582825978
    },
    {
        "content": "<p>Still waiting on input from Paul-Nicolas.</p>",
        "id": 189237582,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1582826070
    },
    {
        "content": "<p>OK so doing it the other way works fine once you use <code>library_search</code> (thank you thank you thank you <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> ) to figure out that bit about y - x :-)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">prelim</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"err\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"err\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_sub</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 189237979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582826294
    },
    {
        "content": "<p>It's interesting that <code>norm_cast</code> worked really well and <code>push_cast</code> did all sorts of crazy things.</p>",
        "id": 189238048,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582826349
    },
    {
        "content": "<p>Here's my version, with the \"finding the right lemmas\" cruft at the top left in, for pedagogical purposes:</p>\n<div class=\"codehilite\"><pre><span></span>import tactic.norm_cast\nimport tactic.ring\nimport algebra.group_power\n\nexample (x y : ℕ) (h : (x : ℤ) = (y : ℤ)) : x = y := by suggest\n\nexample (x : ℕ) : ((x^2 : ℕ) : ℤ) = (x : ℤ)^2 := by library_search\n\n-- This attribute is missing, and should be added to mathlib\nattribute [push_cast] int.coe_nat_pow\n\nexample (x y : ℕ) : ((x - y : ℕ) : ℤ) = (x : ℤ) - (y : ℤ) := by suggest\n-- down the list we find `int.coe_nat_sub`\n\n#print int.coe_nat_sub\n\nexample (x y : ℕ) (h : x ≤ y) :\n  2 * (x ^ 2 + y ^ 2) = (y + x) ^ 2 + (y - x) ^ 2 :=\nbegin\n  apply int.coe_nat_inj,\n  push_cast,\n  rw int.coe_nat_sub h, -- it would be nice if `push_cast` managed this itself.\n  ring,                 -- the output is a bit wonky here\n  simp,\nend\n</pre></div>",
        "id": 189238438,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582826561
    },
    {
        "content": "<p>Oh so it does come out nice in the end.</p>",
        "id": 189238726,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582826725
    },
    {
        "content": "<p>Related: <code>library_search</code> suggested <code>int.coe_nat_sub.reversed</code> for me, which I was surprised by; you can <code>#check int.coe_nat_sub.reversed</code> to see what it says (and compare with <code>int.coe_nat_sub</code>). But if you right click and go to definition then something surprising happens!</p>",
        "id": 189238836,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582826775
    },
    {
        "content": "<p>Why use <code>suggest</code> when you can use <code>library_search</code>? Oh -- because your lemma isn't even true!</p>",
        "id": 189238925,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582826851
    },
    {
        "content": "<p>Thanks very much, Scott and Kevin.  I followed Scott's latest approach</p>",
        "id": 189239677,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582827276
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>, can you point me to an example of copying priorities? I want priorities on <code>move_cast</code> lemmas to to copied to the synthesised <code>push_cast</code> lemmas.</p>",
        "id": 189248088,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582831975
    },
    {
        "content": "<p>Scratch that.</p>",
        "id": 189248310,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582832104
    },
    {
        "content": "<p>I'm no expert but I did notice once that there seems to be a mixture of whether lemmas of the form <code>((0 : a) : b)  = 0</code> are marked as <code>squash_cast</code> or `elim_cast. Likewise with 1 instead of zero. Can that be problematic?</p>",
        "id": 189250798,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1582833585
    },
    {
        "content": "<p>All this will be obsolete when the new <code>norm_cast</code> will land.</p>",
        "id": 189251629,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582834169
    },
    {
        "content": "<p>Just a basic question, if a is an integer, and one is given the hypothesis 0 ≤ a, how do you get the natural number whose integer cast equals a?</p>",
        "id": 189281192,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582861139
    },
    {
        "content": "<p>There is a theorem <code>int.eq_coe_of_zero_le</code> that gives an existential, or you can use <code>int.to_nat</code> or <code>int.nat_abs</code></p>",
        "id": 189281357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582861398
    },
    {
        "content": "<p>Thanks</p>",
        "id": 189281837,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582862183
    },
    {
        "content": "<p>What's the best way to get from a &gt; 0 and b &lt; 0 to a*b &lt; 0 in the <em>integers</em>?  I looked in int\\basic.lean and found nothing that does anything like this</p>",
        "id": 189282060,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582862619
    },
    {
        "content": "<p>That's a general theorem about ordered rings</p>",
        "id": 189282102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582862645
    },
    {
        "content": "<p>Yeah, so is there a Lean command for it?</p>",
        "id": 189282106,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582862663
    },
    {
        "content": "<p>it looks like you want a <code>mul</code> to be <code>neg</code> given <code>pos</code> and <code>neg</code>. Let me look that up...</p>",
        "id": 189282122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582862697
    },
    {
        "content": "<p>oh hey <code>mul_neg_of_pos_of_neg</code> :)</p>",
        "id": 189282130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582862713
    },
    {
        "content": "<p>Mario's method is an excellent one, but there's also</p>\n<div class=\"codehilite\"><pre><span></span>example (a b : ℤ) (ha : 0 &lt; a) (hb : b &lt; 0) : a * b &lt; 0 := by library_search\n</pre></div>\n\n\n<p>(which reports the same answer)</p>",
        "id": 189282253,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582862906
    },
    {
        "content": "<p>Okay, I confess, I should try using \"by library_search\" more often</p>",
        "id": 189283440,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582864878
    },
    {
        "content": "<p>(Unfortunately you do need to have the right imports open, which sometimes is a deal-breaker if you really don't know yet what you're looking for. The advantage of Mario's method is that if you can guess at least a fragment of the name, you can search for it across all files in mathlib.)</p>",
        "id": 189283496,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582864972
    },
    {
        "content": "<p>By the way, it may not have been obvious, but my first comment \"that's a general theorem about ordered rings\" was actually a search clue. When looking for an algebraic lemma, you should ask yourself if it is a theorem about general algebraic structures of some kind like rings or fields, or if they are particular to the specific set you are working over (e.g. things about natural number subtraction). If they are general, they will usually be in the root namespace (and be in one of the <code>algebra/</code> files), and if they are specific then they will be in <code>data.int.basic</code> or <code>data.nat.basic</code> or similar and will be in that type's namespace.</p>",
        "id": 189284921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582867334
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"263857\">@Nicholas McConnell</span> It seems that you want to know about the <code>lift</code> tactic.</p>",
        "id": 189284945,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582867411
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md#lift\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md#lift\">https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md#lift</a></p>",
        "id": 189284995,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582867448
    },
    {
        "content": "<p>From the docs:</p>\n<blockquote>\n<p>If <code>n : ℤ</code> and <code>hn : n ≥ 0</code> then the tactic <code>lift n to ℕ using hn</code> creates a new constant of type <code>ℕ</code>, also named <code>n</code> and replaces all occurrences of the old variable <code>(n : ℤ)</code> with <code>↑n</code> (where <code>n</code> in the new variable). It will remove <code>n</code> and <code>hn</code> from the context. </p>\n</blockquote>",
        "id": 189285022,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582867504
    },
    {
        "content": "<p>&lt;_&lt; I would've thought this would be named descend since natural numbers are a subset of the integers</p>",
        "id": 189285610,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1582868513
    },
    {
        "content": "<p>I don't understand when a thing is a lift or when it is a descent, probably</p>",
        "id": 189285654,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1582868536
    },
    {
        "content": "<p>That's because there are two very much conflicting naming traditions</p>",
        "id": 189285664,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582868588
    },
    {
        "content": "<p>Does the lift tactic in fact let you go both ways? (my reading of the documentation is yes but I thought of typing this question before I thought of typing code into a lean interpreter)</p>",
        "id": 189286353,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1582869848
    },
    {
        "content": "<p>I don't think so, depending on what you mean by \"both ways\". The <code>lift</code> tactic allows you to take a variable from a \"superset\" and produce an element of the \"subset\" with the same name</p>",
        "id": 189286430,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582869966
    },
    {
        "content": "<p>I think you have correctly inferred what I meant by \"both ways\" and answered my question</p>",
        "id": 189286503,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1582870134
    },
    {
        "content": "<p>I guess the other way is just coercion</p>",
        "id": 189286520,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1582870168
    },
    {
        "content": "<p>If you have an element of the subset and want an element of the superset, you don't need the tactic, because you can just use the coe</p>",
        "id": 189286522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582870182
    }
]