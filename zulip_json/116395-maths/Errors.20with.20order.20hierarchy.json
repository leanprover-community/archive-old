[
    {
        "content": "<p>I contributed some theorems for conditionally complete linear orders (<a href=\"https://github.com/leanprover-community/mathlib/issues/3843\">#3843</a>), now I want to use them for real analysis.  How can I get the conditionally complete linear order property for an interval?  I want:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">conditionally_complete_linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_linear_order</span> <span class=\"o\">:</span>\n  <span class=\"n\">conditionally_complete_linear_order</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>Since mathlib already has <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype.linear_order\">docs#subtype.linear_order</a>, I had thought it might be enough to show the 4 new properties for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/conditionally_complete_linear_order\">docs#conditionally_complete_linear_order</a>, doing something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_linear_order</span> <span class=\"o\">:</span>\n  <span class=\"n\">conditionally_complete_linear_order</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le_cSup</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">cSup_le</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">cInf_le</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">le_cInf</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">linear_order</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>But this gives me no end of errors -- things like, \"invalid structure value { ... }, field 'sup' was not provided\".</p>",
        "id": 208396062,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1598649464
    },
    {
        "content": "<p>With some trial and error, I got this working as</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">conditionally_complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">Sup</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">le_cSup</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">cSup_le</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">Inf</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">cInf_le</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">le_cInf</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">distrib_lattice</span><span class=\"bp\">.</span><span class=\"n\">to_lattice</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>for suitable <code>_</code>.</p>",
        "id": 208415467,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1598673171
    },
    {
        "content": "<p>You know, I think this is true for any open subset of R</p>",
        "id": 208415529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598673275
    },
    {
        "content": "<p>You mean, without the <code>inhabited</code>?  Yes, I am playing with that at the moment.</p>",
        "id": 208415615,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1598673435
    },
    {
        "content": "<p>I use the <code>inhabited</code> in order to define</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Sup</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">Sup</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"bp\">⟨</span><span class=\"n\">Sup</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">ht</span><span class=\"bp\">⟩</span> <span class=\"k\">else</span> <span class=\"n\">default</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n</code></pre></div>\n\n\n<p>Hard to avoid this, but I could do a case analysis with a separate case for non-inhabited <code>α</code>.  Is there a typeclass for <code>empty α</code> or similar?  I haven't had to reason about them before.</p>",
        "id": 208415683,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1598673553
    },
    {
        "content": "<p>Oh -- maybe you mean any open subset, not just an interval.  That may well be true, but I think it fits less well in the library.  The statement about open intervals can live in <code>order.conditionally_complete_lattice</code>. The statement about open sets would have to be deferred to <code>topology.algebra.ordered</code>.</p>",
        "id": 208415912,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1598673959
    },
    {
        "content": "<p>I don't mean the instance should be registered, just that it is a mathematically more general theorem</p>",
        "id": 208416110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598674279
    },
    {
        "content": "<p>While I have your attention ( <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span>), how do I do this?</p>\n<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/Errors.20with.20order.20hierarchy/near/208415683\">said</a>:</p>\n<blockquote>\n<p>I could do a case analysis with a separate case for non-inhabited <code>α</code>.  Is there a typeclass for <code>empty α</code> or similar?  I haven't had to reason about them before.</p>\n</blockquote>",
        "id": 208416173,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1598674407
    },
    {
        "content": "<p>Do <code>by_cases h : nonempty A</code></p>",
        "id": 208416220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598674449
    },
    {
        "content": "<p>Thanks!!</p>",
        "id": 208416223,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1598674457
    },
    {
        "content": "<p>under the assumption that it is false, you can prove that A is empty</p>",
        "id": 208416228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598674471
    },
    {
        "content": "<p>we don't have any particular typeclass for this but generally whatever you are proving will become trivial under this assumption</p>",
        "id": 208416233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598674502
    },
    {
        "content": "<p>Do I need to enter tactic mode in my definition, then?  Is there a more idiomatic way?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_linear_order</span> <span class=\"o\">:</span>\n  <span class=\"n\">conditionally_complete_linear_order</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 208416301,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1598674621
    },
    {
        "content": "<p>Never mind -- the <code>inhabited</code> hypothesis is necessary. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_Sup_to_nonempty\">docs#has_Sup_to_nonempty</a></p>",
        "id": 208416798,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1598675621
    },
    {
        "content": "<p>It is not true for arbitrary nonempty open subsets of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span>. Consider for instance the union <code>A</code> of the open intervals centered at <code>1/n</code> of small enough radius <code>r_n</code> to make sure that these intervals are disjoint, and of <code>(-1, 0)</code>. Then the intersection of <code>A</code> with the positive half-line has no <code>Inf</code> in <code>A</code>, even though it is bounded below.</p>",
        "id": 208422974,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1598688496
    },
    {
        "content": "<p>Better example: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>∪</mo><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(-1, 0)  \\cup (0,1)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 208423004,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1598688585
    },
    {
        "content": "<p>Ah, nice!</p>",
        "id": 208433865,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1598707474
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3991\">#3991</a></p>",
        "id": 208519778,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1598848409
    }
]