[
    {
        "content": "<p>I have code (~ 300 lines) providing a proof of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">rat_approx_infinite_iff_irrational</span> <span class=\"o\">{</span><span class=\"n\">Œæ</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">|</span> <span class=\"bp\">|</span><span class=\"n\">Œæ</span> <span class=\"bp\">-</span> <span class=\"n\">q</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">q.denom</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">infinite</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">irrational</span> <span class=\"n\">Œæ</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>This came out of a project a student in my seminar is working on (existence of non-trivial solutions to Pell's equation; it is basically the first step towards the proof). I think this would make a good contribution to mathlib (with results on Pell equations to follow eventually). (There is also a relation to <a href=\"https://github.com/leanprover-community/mathlib/pull/18011\">#18011</a> <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> ; the result can be stated in terms of <code>add_well_approximable ùïä (Œª n, 1 / n ^ 2)</code> consisting exactly of the (images of) irrational numbers.)</p>\n<p>But before I PR this, I would like to find out if it would have a chance of being reviewed and merged within a reasonable time frame, given that most of the effort goes into porting mathlib these days. The file imports <code>data.real.irrational</code> and <code>combinatorics.pigeonhole</code>, so I imagine that it is quite a bit removed from the tide at this point.</p>",
        "id": 318002909,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1672086995
    },
    {
        "content": "<p>Why don't you get the student to PR it, then you review it and approve it, and because you're now a trusted member of the community a passing maintainer might merge it?</p>",
        "id": 318007585,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672090911
    },
    {
        "content": "<p>That would be cheating, since I have worked myself on the code quite a bit <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> to get it into a shape suitable for mathlib...</p>",
        "id": 318007825,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1672091106
    },
    {
        "content": "<p>Oh OK. Then I would suggest that you either explicitly approach people and ask for reviews, or just make an independent Pell's equation repo and autoport it to mathlib4 in a few months.</p>",
        "id": 318012310,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672094645
    },
    {
        "content": "<p>Oh wow, it's great to see some connections with <a href=\"https://github.com/leanprover-community/mathlib/pull/18011\">#18011</a>. I also note that Dirichlet's approximation theorem is on the Freek list. I suppose the statement here would be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">unit_add_circle.mem_add_approximable_real_iff</span> <span class=\"o\">{</span><span class=\"n\">Œæ</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚Üë</span><span class=\"n\">Œæ</span> <span class=\"bp\">‚àà</span> <span class=\"n\">add_well_approximable</span> <span class=\"n\">unit_add_circle</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">irrational</span> <span class=\"n\">Œæ</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 318070050,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1672137583
    },
    {
        "content": "<p>As to your question of whether to cook up a PR, I think this is up to you. There is the danger that the port consumes so much effort that such a PR might not make it into Mathlib3. I will commit review this PR but of course, not having seen the code yet, I cannot make any promises. If you're happy to carry out the work to PR this work subject to this risk then by all means, please do it.</p>",
        "id": 318071063,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1672137939
    },
    {
        "content": "<p>Also note that it's not unusual for a PR review to generalise some results it contains. Thus even if the current version of the code does not currently touch already-ported files, this could change during review. This would mean that merging such a PR could also require changes to Mathlib4.</p>",
        "id": 318071380,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1672138051
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/116395-maths/topic/Diophantine.20approximation/near/318070050\">said</a>:</p>\n<blockquote>\n<p>Oh wow, it's great to see some connections with <a href=\"https://github.com/leanprover-community/mathlib/pull/18011\">#18011</a>. I also note that Dirichlet's approximation theorem is on the Freek list.</p>\n</blockquote>\n<p>I don't think it is (there is no. 48, \"Dirichlet's Theorem\", but this refers to primes in arithmetic progression). But this is no reason not to include it <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 318072727,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1672138539
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/116395-maths/topic/Diophantine.20approximation/near/318070050\">said</a>:</p>\n<blockquote>\n<p>I suppose the statement here would be:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">unit_add_circle.mem_add_approximable_real_iff</span> <span class=\"o\">{</span><span class=\"n\">Œæ</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚Üë</span><span class=\"n\">Œæ</span> <span class=\"bp\">‚àà</span> <span class=\"n\">add_well_approximable</span> <span class=\"n\">unit_add_circle</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">irrational</span> <span class=\"n\">Œæ</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Yes.</p>",
        "id": 318072758,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1672138557
    },
    {
        "content": "<p>OK; I think I'll go forward with the PR and see what happens. So far it would just be adding one new file and not change anything that already exists.</p>",
        "id": 318072937,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1672138618
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/116395-maths/topic/Diophantine.20approximation/near/318072727\">said</a>:</p>\n<blockquote>\n<p>I don't think it is (there is no. 48, \"Dirichlet's Theorem\", but this refers to primes in arithmetic progression).</p>\n</blockquote>\n<p>Oops, yes; you're right.</p>",
        "id": 318073882,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1672138963
    },
    {
        "content": "<p>That said \"Pell's equation\" is on the list, and while mathlib has some aspects of this theory it could definitely do with a lot more in order to claim we've really ticked this off. So I applaud this work and the idea of PRing it! I'd also be happy to review when the time comes.</p>",
        "id": 318078503,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1672140816
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/18019\">#18019</a></p>",
        "id": 318124877,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1672158465
    },
    {
        "content": "<p>The student has already written (sorry-free) code that proves the existence of nontrivial solutions to the Pell equation (for general positive non-square <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span>), but this will need some overhaul to be fit for mathlib. This is only a matter of time, though.</p>",
        "id": 318125292,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1672158648
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/18019\">#18019</a> has now passed CI. Reviews are welcome!</p>",
        "id": 318142043,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1672166186
    },
    {
        "content": "<p>I was a bit slow but I finally got to this. I've left a long-ish comment on <a href=\"https://github.com/leanprover-community/mathlib/pull/18019\">#18019</a></p>",
        "id": 318329079,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1672263944
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> has suggsted to develop everythings in terms of <code>add_circle</code>, but I am not convinced that this is the best way at this point (but I'm open to a later refactor along these lines; the approach certainly has its merits). However, I have taken his suggestion as a prompt to obtain a better and shorter proof of the first main lemma by working with rationals instead of pairs of integers. A review would be welcome. <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> (after the holidays)?</p>",
        "id": 318640975,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1672427087
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span> I did see your comments on GH that you're not convinced to formalise the result in the language of <code>add_circle</code>. That's fine: it's a subjective point and can even be considered somewhat of an implementation detail.</p>\n<p>The only reason I haven't replied is that seasonal socialising left me no time for Lean today. Unfortunately I also have a very busy weekend but I hope to find some time for Lean tomorrow afternoon. Failing that I'll have lots of time on Monday.</p>",
        "id": 318648051,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1672430563
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> Take your time - no problem <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 318648143,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1672430633
    },
    {
        "content": "<p>Oh one point I can quickly mention is that I think it is worth sharpening the result from <code>|Œæ - q| &lt; 1 / (n * q.denom)</code> to <code>|Œæ - q| ‚â§ 1 / ((n + 1) * q.denom)</code></p>",
        "id": 318648321,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1672430736
    },
    {
        "content": "<p>If I do get time for Lean tomorrow I'm going to experiment with the following proof that I thought of while driving earlier (I hope this is correct!): consider the <code>n+1</code> closed balls of radius <code>Œ¥/2</code> where <code>Œ¥ := 1 / (n + 1)</code> in <code>unit_add_circle</code>, centred on the points <code>j ‚Ä¢ Œæ</code> <code>0 ‚â§ j ‚â§ n</code>. We need to prove these are not pairwise disjoint. Assume for contradiction that they are. Then the measure of their union is the sum of their measures which is <code>1</code>. Thus their union is almost equal to the whole space. However since the union is closed and the Haar measure satisfies <code>is_open_pos_measure</code>, any closed set that is almost equal to the whole space is the whole space. However this contradicts the connectedness of the circle.</p>",
        "id": 318650128,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1672431647
    },
    {
        "content": "<p>The non-circle proof is roughly as follows. We consider the fractional parts of <code>j * Œæ</code> for <code>0 ‚â§ j ‚â§ n</code> as before, but now we partition the unit interval into <code>n+1</code> equal parts. If the last interval is not hit, we can argue as before. Otherwise, say the fractional part of <code>k * Œæ</code> is in the last interval. Then <code>|k * Œæ - (‚åäk * Œæ‚åã + 1)| ‚â§ 1/(n+1)</code>.</p>",
        "id": 318656693,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1672435505
    },
    {
        "content": "<p>But perhaps the question is whether it is worth the effort to show the slightly stronger statement. Do you know of any result that relies on having <code>n+1</code> instead of <code>n</code>?</p>",
        "id": 318656786,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1672435561
    },
    {
        "content": "<p>Anyway, here is a proof (without circles <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">combinatorics.pigeonhole</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span> <span class=\"n\">int</span>\n\n<span class=\"sd\">/-- *Dirichlet's approximation theorem* -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">dirichlet_approx</span> <span class=\"o\">(</span><span class=\"n\">Œæ</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÉ</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">‚àß</span> <span class=\"n\">k</span> <span class=\"bp\">‚â§</span> <span class=\"n\">n</span> <span class=\"bp\">‚àß</span> <span class=\"bp\">|</span><span class=\"n\">Œæ</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"bp\">|</span> <span class=\"bp\">‚â§</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñ§</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">‚åä</span><span class=\"n\">fract</span> <span class=\"o\">(</span><span class=\"n\">Œæ</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">‚åã</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">nat.succ_pos</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hfu</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">,</span> <span class=\"n\">mul_lt_of_lt_one_left</span> <span class=\"n\">hn</span> <span class=\"bp\">$</span> <span class=\"n\">fract_lt_one</span> <span class=\"o\">(</span><span class=\"n\">Œæ</span> <span class=\"bp\">*</span> <span class=\"bp\">‚Üë</span><span class=\"n\">m</span><span class=\"o\">),</span>\n  <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"bp\">|</span> <span class=\"bp\">‚â§</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">le_div_iff</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">abs_of_pos</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">abs_mul</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"k\">let</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"n\">Icc</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">),</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">m</span> <span class=\"bp\">‚àà</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hf'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">‚â§</span> <span class=\"n\">fract</span> <span class=\"o\">(</span><span class=\"n\">Œæ</span> <span class=\"bp\">*</span> <span class=\"bp\">‚Üë</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">‚Üë</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"bp\">‚â§</span> <span class=\"n\">fract</span> <span class=\"o\">(</span><span class=\"n\">Œæ</span> <span class=\"bp\">*</span> <span class=\"bp\">‚Üë</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">‚Üë</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">floor_le</span> <span class=\"o\">(</span><span class=\"n\">fract</span> <span class=\"o\">(</span><span class=\"n\">Œæ</span> <span class=\"bp\">*</span> <span class=\"bp\">‚Üë</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">‚Üë</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n      <span class=\"n\">rw</span> <span class=\"n\">hf</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">exact_mod_cast</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">hm‚ÇÄ</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">hf‚ÇÄ</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">floor_eq_zero_iff</span><span class=\"o\">,</span> <span class=\"n\">algebra_map.coe_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">fract_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span>\n                   <span class=\"n\">set.left_mem_Ico</span><span class=\"o\">,</span> <span class=\"n\">zero_lt_one</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n      <span class=\"n\">refine</span> <span class=\"n\">ne.lt_of_le</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">n_pos.ne</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mem_Icc.mp</span> <span class=\"n\">hm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n      <span class=\"n\">exact_mod_cast</span> <span class=\"n\">hf‚ÇÄ.symm.trans</span> <span class=\"o\">(</span><span class=\"n\">h.symm</span> <span class=\"bp\">‚ñ∏</span> <span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n    <span class=\"n\">refine</span> <span class=\"o\">‚ü®</span><span class=\"bp\">‚åä</span><span class=\"n\">Œæ</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"bp\">‚åã</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hm‚ÇÄ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">mem_Icc.mp</span> <span class=\"n\">hm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">‚ü©,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">int.cast_add</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">sub_sub</span><span class=\"o\">,</span> <span class=\"n\">sub_mul</span><span class=\"o\">,</span> <span class=\"n\">int.cast_one</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">abs_le</span><span class=\"o\">],</span>\n    <span class=\"n\">refine</span> <span class=\"o\">‚ü®</span><span class=\"n\">le_sub_iff_add_le.mpr</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">sub_le_iff_le_add.mpr</span> <span class=\"bp\">$</span> <span class=\"n\">le_of_lt</span> <span class=\"bp\">$</span>\n             <span class=\"o\">(</span><span class=\"n\">hfu</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">$</span> <span class=\"n\">lt_one_add</span> <span class=\"n\">_</span><span class=\"o\">‚ü©,</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">neg_add_cancel_comm_assoc</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hf'</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">not_exists</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hD</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Ico</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">&lt;</span> <span class=\"n\">D.card</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">card_Icc</span><span class=\"o\">,</span> <span class=\"n\">card_Ico</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">lt_add_one</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">hfu'</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"bp\">‚â§</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">lt_add_one_iff.mp</span> <span class=\"o\">(</span><span class=\"n\">floor_lt.mpr</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">hfu</span> <span class=\"n\">m</span><span class=\"o\">)),</span>\n    <span class=\"k\">have</span> <span class=\"n\">hwd</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">‚àà</span> <span class=\"n\">D</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"bp\">‚àà</span> <span class=\"n\">Ico</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">mem_Ico.mpr</span> <span class=\"o\">‚ü®</span><span class=\"n\">floor_nonneg.mpr</span> <span class=\"o\">(</span><span class=\"n\">mul_nonneg</span> <span class=\"o\">(</span><span class=\"n\">fract_nonneg</span> <span class=\"o\">(</span><span class=\"n\">Œæ</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">hn.le</span><span class=\"o\">),</span>\n                           <span class=\"n\">ne.lt_of_le</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfu'</span> <span class=\"n\">x</span><span class=\"o\">)‚ü©,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">‚àà</span> <span class=\"n\">D</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">‚àß</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">x_ne_y</span><span class=\"o\">,</span> <span class=\"n\">hxy</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">exists_ne_map_eq_of_card_lt_of_maps_to</span> <span class=\"n\">hD</span> <span class=\"n\">hwd</span><span class=\"o\">,</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">lt_trichotomy</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">exacts</span> <span class=\"o\">[‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hxy</span><span class=\"o\">‚ü©,</span> <span class=\"n\">false.elim</span> <span class=\"o\">(</span><span class=\"n\">x_ne_y</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"o\">‚ü®</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hxy.symm</span><span class=\"o\">‚ü©],</span> <span class=\"o\">},</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">x_lt_y</span><span class=\"o\">,</span> <span class=\"n\">hxy</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">‚ü®</span><span class=\"bp\">‚åä</span><span class=\"n\">Œæ</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">‚åã</span> <span class=\"bp\">-</span> <span class=\"bp\">‚åä</span><span class=\"n\">Œæ</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">‚åã</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">sub_pos_of_lt</span> <span class=\"n\">x_lt_y</span><span class=\"o\">,</span>\n            <span class=\"n\">sub_le_iff_le_add.mpr</span> <span class=\"bp\">$</span> <span class=\"n\">le_add_of_le_of_nonneg</span> <span class=\"o\">(</span><span class=\"n\">mem_Icc.mp</span> <span class=\"n\">hy</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">mem_Icc.mp</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">‚ü©,</span>\n    <span class=\"n\">convert_to</span> <span class=\"bp\">|</span><span class=\"n\">fract</span> <span class=\"o\">(</span><span class=\"n\">Œæ</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">fract</span> <span class=\"o\">(</span><span class=\"n\">Œæ</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"bp\">‚â§</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">push_cast</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fract</span><span class=\"o\">],</span> <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">abs_sub_lt_one_of_floor_eq_floor</span> <span class=\"n\">hxy.symm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 318747042,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1672497430
    },
    {
        "content": "<p>Mathlib going that extra mile :-)</p>",
        "id": 318772410,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672512653
    },
    {
        "content": "<p>Should I add this? (and then, I guess, refactor the rest to use it...)</p>",
        "id": 318773341,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1672513292
    },
    {
        "content": "<p>OK; I have just done it.</p>",
        "id": 318777543,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1672516520
    },
    {
        "content": "<p>Can you prove one of the implications using existing code about continued fractions?</p>",
        "id": 318790256,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1672527333
    },
    {
        "content": "<p>(or do you already use it?)</p>",
        "id": 318790304,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1672527356
    },
    {
        "content": "<p>Continued fractions don't seem to be used in there, from import considerations.</p>",
        "id": 318790563,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1672527518
    },
    {
        "content": "<p>Do we have continued fractions? where?</p>",
        "id": 318793107,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1672529423
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/continued_fraction\">docs#continued_fraction</a></p>",
        "id": 318793179,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1672529488
    },
    {
        "content": "<p>I had been looking in the <code>number_theory</code> folder...</p>",
        "id": 318793194,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1672529510
    },
    {
        "content": "<p>I don't think there is anything in <code>algebra.continued_fraction.*</code> that says something on the standard continued fraction expansion of a real number and on the (speed of) convergence of the convergence to said number.</p>",
        "id": 318793655,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1672529816
    },
    {
        "content": "<p>I do have another proof using continued fractions (which I have been playing around with a bit using my own set-up, not being aware of the existing material), BTW. One can actually prove a slightly stronger result this way, so maybe I'll try to add that at some later point.</p>",
        "id": 318793974,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1672530052
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/116395-maths/topic/Diophantine.20approximation/near/318793194\">said</a>:</p>\n<blockquote>\n<p>I had been looking in the <code>number_theory</code> folder...</p>\n</blockquote>\n<p>Always, <em>always</em>, keep a tab with the mathlib docs open <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 318794237,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1672530263
    },
    {
        "content": "<p>That doesn't help if you are not even thinking cfs might be there if they are not under <code>number_theory</code>... <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 318794385,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1672530400
    },
    {
        "content": "<p>Whatever I am looking for, I give a try to the docs search box. In that case, you would have found <code>continued_fraction</code> right away.</p>",
        "id": 318794456,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1672530475
    },
    {
        "content": "<p>I'll try to remember that...</p>",
        "id": 318794604,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1672530592
    },
    {
        "content": "<p>I know it's easy after the fact to say \"I do X and doing X would have helped you\", but in that case I truly believe what I'm telling you and apply it to myself (in fact, I have one mathlib docs tab <em>per Chrome window</em>).</p>",
        "id": 318794755,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1672530714
    },
    {
        "content": "<p>It would be nice to have a proof of the following 2 facts:</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><msub><mi>p</mi><mi>n</mi></msub><msub><mi>q</mi><mi>n</mi></msub></mfrac><mo>‚â§</mo><mi>Œ±</mi><mo>‚â§</mo><mfrac><msub><mi>p</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><msub><mi>q</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{p_n}{q_n}\\le Œ±\\le \\frac{p_{n+1}}{q_{n+1}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2286em;vertical-align:-0.4811em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7475em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1645em;\"><span style=\"top:-2.357em;margin-left:-0.0359em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.4461em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1645em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4811em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">‚â§</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">Œ±</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">‚â§</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2399em;vertical-align:-0.4868em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7532em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:-0.0359em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2025em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.4518em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2025em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4868em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> (either for even or odd <code>n</code>);</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">‚à£</mi><msub><mi>p</mi><mi>n</mi></msub><msub><mi>q</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>‚àí</mo><msub><mi>p</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><msub><mi>q</mi><mi>n</mi></msub><mi mathvariant=\"normal\">‚à£</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">|p_nq_{n+1}-p_{n+1}q_n|=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">‚à£</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">‚àí</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">‚à£</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>.</li>\n</ul>\n<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> AFAIR, you reviewed the continued fractions PRs. Do we have either of these facts?</p>",
        "id": 318795148,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1672531084
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198376\">@Kevin Kappelmann</span>, you wrote this code. Do we have either of these theorems?</p>",
        "id": 318795217,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1672531135
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/116395-maths/topic/Diophantine.20approximation/near/318793655\">said</a>:</p>\n<blockquote>\n<p>I don't think there is anything in <code>algebra.continued_fraction.*</code> that says something on the standard continued fraction expansion of a real number and on the (speed of) convergence of the convergence to said number.</p>\n</blockquote>\n<p>There is something, e.g., <a href=\"https://leanprover-community.github.io/mathlib_docs/find/generalized_continued_fraction.abs_sub_convergents_le'\">docs#generalized_continued_fraction.abs_sub_convergents_le'</a>  and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/generalized_continued_fraction.terminates_iff_rat\">docs#generalized_continued_fraction.terminates_iff_rat</a>, from which one could construct a proof, I suppose.</p>",
        "id": 318795256,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1672531175
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Diophantine.20approximation/near/318795148\">said</a>:</p>\n<blockquote>\n<p>It would be nice to have a proof of the following 2 facts:</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><msub><mi>p</mi><mi>n</mi></msub><msub><mi>q</mi><mi>n</mi></msub></mfrac><mo>‚â§</mo><mi>Œ±</mi><mo>‚â§</mo><mfrac><msub><mi>p</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><msub><mi>q</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{p_n}{q_n}\\le Œ±\\le \\frac{p_{n+1}}{q_{n+1}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2286em;vertical-align:-0.4811em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7475em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1645em;\"><span style=\"top:-2.357em;margin-left:-0.0359em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.4461em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1645em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4811em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">‚â§</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">Œ±</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">‚â§</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2399em;vertical-align:-0.4868em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7532em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:-0.0359em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2025em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.4518em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2025em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4868em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> (either for even or odd <code>n</code>);</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">‚à£</mi><msub><mi>p</mi><mi>n</mi></msub><msub><mi>q</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>‚àí</mo><msub><mi>p</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><msub><mi>q</mi><mi>n</mi></msub><mi mathvariant=\"normal\">‚à£</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">|p_nq_{n+1}-p_{n+1}q_n|=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">‚à£</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">‚àí</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">‚à£</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>.</li>\n</ul>\n</blockquote>\n<p>The second one is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/generalized_continued_fraction.determinant\">docs#generalized_continued_fraction.determinant</a> (as an equality with the sign).</p>",
        "id": 318795400,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1672531262
    },
    {
        "content": "<p>The first can probably be deduced from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/generalized_continued_fraction.sub_convergents_eq\">docs#generalized_continued_fraction.sub_convergents_eq</a> .</p>",
        "id": 318795683,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1672531463
    },
    {
        "content": "<p>As far as I can see, continued fractions are not used anywhere outside of <code>algebra/continued_fractions/</code> in mathlib.<br>\nOne thing that seems to be missing is the statement that a continued fraction (with integral entries, all positive except possibly the head) converges to a real number and that this leads to a bijection between (infinite) continued fractions and irrational real numbers.</p>",
        "id": 318796295,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1672531943
    },
    {
        "content": "<p>Convergence immediately follows from the estimates (either  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/generalized_continued_fraction.abs_sub_convergents_le'\">docs#generalized_continued_fraction.abs_sub_convergents_le'</a> or  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/generalized_continued_fraction.abs_sub_convergents_le\">docs#generalized_continued_fraction.abs_sub_convergents_le</a>).</p>",
        "id": 318796858,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1672532416
    },
    {
        "content": "<p>Plus the fact that the denominators tend to infinity. Do we have this?</p>",
        "id": 318796884,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1672532433
    },
    {
        "content": "<p>We have <code>of_denom_mono</code> but not <code>of_denom_strict_mono</code> (yet)</p>",
        "id": 318796916,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1672532476
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/generalized_continued_fraction.of_convergence\">docs#generalized_continued_fraction.of_convergence</a></p>",
        "id": 318797087,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1672532618
    },
    {
        "content": "<p>It uses <code>local attribute [instance] preorder.topology</code>. Should be changed to <code>[topological_space K] [order_topology K]</code></p>",
        "id": 318797202,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1672532676
    },
    {
        "content": "<p>I have family duties. I'll look into this later tonight or tomorrow in the morning.</p>",
        "id": 318797544,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1672532920
    },
    {
        "content": "<p>In another direction, I think it's nice to regard Dirichlet's approximation as a special case of a result about compact, connected normed groups. I've only had brief fragments of time for the last few days but I've just managed to cobble together a sorry-free illustration.</p>",
        "id": 318845035,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1672572661
    },
    {
        "content": "<p>First a bunch of \"library code\" (which needs a lot of polish). Nothing specific to Dirichlet here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.group.add_circle</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">metric</span> <span class=\"n\">measure_theory</span> <span class=\"n\">measure_theory.measure</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">measurable_set.ae_eq_univ'</span>\n  <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">Œº</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_finite_measure</span> <span class=\"n\">Œº</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">measurable_set</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s</span> <span class=\"bp\">=·µê</span><span class=\"o\">[</span><span class=\"n\">Œº</span><span class=\"o\">]</span> <span class=\"n\">univ</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">Œº</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">Œº</span> <span class=\"n\">univ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ae_eq_univ</span><span class=\"o\">,</span> <span class=\"n\">measure_compl</span> <span class=\"n\">hs</span> <span class=\"o\">(</span><span class=\"n\">measure_ne_top</span> <span class=\"n\">Œº</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">tsub_eq_zero_iff_le</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"o\">‚ü®</span><span class=\"bp\">Œª</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">measure_mono</span> <span class=\"bp\">$</span> <span class=\"n\">subset_univ</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">Œª</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">‚ü©,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_refl</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- namespace measure_theory.measure.is_open_pos_measure</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">is_open_pos_measure</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Œº</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">is_open_pos_measure</span> <span class=\"n\">Œº</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">opens_measurable_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">closed_lt_measure_univ</span> <span class=\"o\">[</span><span class=\"n\">is_finite_measure</span> <span class=\"n\">Œº</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hF</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hF'</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">‚â†</span> <span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Œº</span> <span class=\"n\">F</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Œº</span> <span class=\"n\">univ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">Œº</span> <span class=\"n\">F</span><span class=\"bp\">·∂ú</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">measure_compl</span> <span class=\"n\">hF.measurable_set</span> <span class=\"o\">(</span><span class=\"n\">measure_ne_top</span> <span class=\"n\">Œº</span> <span class=\"n\">F</span><span class=\"o\">)]</span> <span class=\"n\">using</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">is_open_pos_measure.open_pos</span> <span class=\"n\">F</span><span class=\"bp\">·∂ú</span> <span class=\"n\">hF.is_open_compl</span> <span class=\"o\">(</span><span class=\"n\">nonempty_compl.mpr</span> <span class=\"n\">hF'</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">Œº</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eq_univ_of_ae_eq_univ</span> <span class=\"o\">[</span><span class=\"n\">is_finite_measure</span> <span class=\"n\">Œº</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hF</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hF'</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">=·µê</span><span class=\"o\">[</span><span class=\"n\">Œº</span><span class=\"o\">]</span> <span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">contra</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">contra</span> <span class=\"o\">:</span> <span class=\"n\">Œº</span> <span class=\"n\">F</span> <span class=\"bp\">‚â†</span> <span class=\"n\">Œº</span> <span class=\"n\">univ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">closed_lt_measure_univ</span> <span class=\"n\">F</span> <span class=\"n\">hF</span> <span class=\"n\">contra</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">contra</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hF.measurable_set.ae_eq_univ'</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hF'</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">is_open_pos_measure</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">card_le_one_of_closed_disjoint_Union_eq_univ</span>\n  <span class=\"o\">{</span><span class=\"n\">Œπ</span> <span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preconnected_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite</span> <span class=\"n\">Œπ</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h_nonempty</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_closed</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_closed</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h_disj</span> <span class=\"o\">:</span> <span class=\"n\">pairwise</span> <span class=\"o\">(</span><span class=\"n\">disjoint</span> <span class=\"n\">on</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h_Union</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">‚ãÉ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">nat.card</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚â§</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h_nonempty</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"bp\">‚â†</span> <span class=\"bp\">‚àÖ</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">nonempty_iff_ne_empty</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h_nonempty</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_clop</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_clopen</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">‚ü®</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h_closed</span> <span class=\"n\">i</span><span class=\"o\">‚ü©,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">is_closed_compl_iff</span><span class=\"o\">,</span> <span class=\"n\">compl_eq_univ_diff</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">h_Union</span><span class=\"o\">,</span> <span class=\"n\">Union_diff</span><span class=\"o\">],</span>\n    <span class=\"n\">refine</span> <span class=\"n\">is_closed_Union</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">h_ne</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">h_disj</span> <span class=\"n\">h_ne.symm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sdiff_eq_left</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h_closed</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h_card</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">Œπ</span> <span class=\"o\">:=</span> <span class=\"n\">fintype.of_finite</span> <span class=\"n\">Œπ</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">not_le</span><span class=\"o\">,</span> <span class=\"n\">nat.card_eq_fintype_card</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h_card</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"n\">h_ne</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">finset.one_lt_card.mp</span> <span class=\"n\">h_card</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h_ne</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"bp\">‚à©</span> <span class=\"n\">s</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"bp\">‚àÖ</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">eq_bot_iff</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">disjoint_iff_inf_le</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">h_disj</span> <span class=\"n\">h_ne</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">is_clopen_iff.mp</span> <span class=\"o\">(</span><span class=\"n\">h_clop</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">hi</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h_nonempty</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">univ_inter</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h_ne</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h_nonempty</span> <span class=\"n\">j</span> <span class=\"n\">h_ne</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">set.exists_ne_mem_inter_of_not_pairwise_disjoint</span>\n  <span class=\"o\">{</span><span class=\"n\">Œπ</span> <span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">¬¨</span> <span class=\"n\">pairwise</span> <span class=\"o\">(</span><span class=\"n\">disjoint</span> <span class=\"n\">on</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÉ</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">‚â†</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"bp\">‚à©</span> <span class=\"n\">s</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"bp\">¬¨</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">‚¶É</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">‚¶Ñ,</span> <span class=\"n\">i</span> <span class=\"bp\">‚â†</span> <span class=\"n\">j</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">‚¶É</span><span class=\"n\">t</span><span class=\"o\">‚¶Ñ,</span> <span class=\"n\">t</span> <span class=\"bp\">‚â§</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">t</span> <span class=\"bp\">‚â§</span> <span class=\"n\">s</span> <span class=\"n\">j</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">t</span> <span class=\"bp\">‚â§</span> <span class=\"bp\">‚ä•</span> <span class=\"n\">at</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_forall</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">h_ne</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">hj</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">t.nonempty</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">le_bot_iff</span><span class=\"o\">,</span> <span class=\"n\">bot_eq_empty</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">ne.def</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">nonempty_iff_ne_empty</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">‚ü®</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">h_ne</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hi</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hj</span> <span class=\"n\">hx</span><span class=\"o\">‚ü©,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">set.exists_ne_mem_inter_of_not_pairwise_disjoint'</span>\n  <span class=\"o\">{</span><span class=\"n\">Œπ</span> <span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">Œπ</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">¬¨</span> <span class=\"n\">pairwise</span> <span class=\"o\">(</span><span class=\"n\">disjoint</span> <span class=\"n\">on</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÉ</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"bp\">‚à©</span> <span class=\"n\">s</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">hne</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx‚ÇÅ</span><span class=\"o\">,</span> <span class=\"n\">hx‚ÇÇ</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">set.exists_ne_mem_inter_of_not_pairwise_disjoint</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">lt_or_lt_iff_ne.mpr</span> <span class=\"n\">hne</span> <span class=\"k\">with</span> <span class=\"n\">h_lt</span> <span class=\"n\">h_lt</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">‚ü®</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">h_lt</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx‚ÇÅ</span><span class=\"o\">,</span> <span class=\"n\">hx‚ÇÇ</span><span class=\"o\">‚ü©,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">‚ü®</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h_lt</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx‚ÇÇ</span><span class=\"o\">,</span> <span class=\"n\">hx‚ÇÅ</span><span class=\"o\">‚ü©,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[to_additive]</span> <span class=\"kd\">instance</span> <span class=\"n\">seminormed_group.measurable_space</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">seminormed_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"n\">borel</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">@[to_additive]</span> <span class=\"kd\">instance</span> <span class=\"n\">seminormed_group.borel_space</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">seminormed_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">borel_space</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">‚ü®</span><span class=\"n\">rfl</span><span class=\"o\">‚ü©</span>\n</code></pre></div>",
        "id": 318845165,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1672572737
    },
    {
        "content": "<p>However given the above we can prove:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- *Dirichlet's approximation theorem*.</span>\n\n<span class=\"sd\">TODO:</span>\n<span class=\"sd\"> * Drop the redundant hypothesis `hŒ¥'`,</span>\n<span class=\"sd\"> * `to_additive`-ize (currently missing additive version of `add_haar_closed_ball_center`). -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_norm_nsmul_le</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Œæ</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">connected_space</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">compact_space</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">Œº</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_add_haar_measure</span> <span class=\"n\">Œº</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Œ¥</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hŒ¥</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">Œº</span> <span class=\"o\">(</span><span class=\"n\">closed_ball</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Œ¥</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">Œº</span> <span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hŒ¥'</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">‚â§</span> <span class=\"n\">Œ¥</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">‚àà</span> <span class=\"n\">Ioc</span> <span class=\"mi\">0</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"bp\">‚Äñ</span><span class=\"n\">j</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">Œæ</span><span class=\"bp\">‚Äñ</span> <span class=\"bp\">‚â§</span> <span class=\"n\">Œ¥</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">is_finite_measure</span> <span class=\"n\">Œº</span> <span class=\"o\">:=</span> <span class=\"n\">compact_space.is_finite_measure</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Icc</span> <span class=\"mi\">0</span> <span class=\"n\">n</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">set</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">closed_ball</span> <span class=\"o\">((</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">Œæ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Œ¥</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">is_closed</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">is_closed_ball</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">¬¨</span> <span class=\"n\">pairwise</span> <span class=\"o\">(</span><span class=\"n\">disjoint</span> <span class=\"n\">on</span> <span class=\"n\">B</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">hij</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">set.exists_ne_mem_inter_of_not_pairwise_disjoint'</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">‚ü®</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">tsub_pos_iff_lt</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_lt_coe</span><span class=\"o\">],</span> <span class=\"n\">_</span><span class=\"o\">‚ü©,</span> <span class=\"n\">_</span><span class=\"o\">‚ü©,</span>\n      <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">tsub_le_iff_right</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">j.property.2.trans</span> <span class=\"n\">le_self_add</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_nsmul</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">subtype.coe_le_coe.mpr</span> <span class=\"n\">hij.le</span><span class=\"o\">),</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">dist_eq_norm</span><span class=\"o\">],</span>\n        <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">dist_triangle</span> <span class=\"o\">(</span><span class=\"bp\">‚Üë</span><span class=\"n\">j</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">Œæ</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">‚Üë</span><span class=\"n\">i</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">Œæ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n        <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">mem_closed_ball.mp</span> <span class=\"n\">hx.1</span><span class=\"o\">,</span> <span class=\"n\">mem_closed_ball'.mp</span> <span class=\"n\">hx.2</span><span class=\"o\">],</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">‚ãÉ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">is_open_pos_measure.eq_univ_of_ae_eq_univ</span> <span class=\"n\">Œº</span> <span class=\"o\">(</span><span class=\"n\">is_closed_Union</span> <span class=\"n\">hB</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h_meas</span> <span class=\"o\">:</span> <span class=\"n\">measurable_set</span> <span class=\"o\">(</span><span class=\"bp\">‚ãÉ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"n\">measurable_set.Union</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">is_closed_ball.measurable_set</span><span class=\"o\">),</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">h_meas.ae_eq_univ'</span><span class=\"o\">,</span> <span class=\"n\">measure_Union</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">measurable_set_closed_ball</span><span class=\"o\">),</span> <span class=\"n\">tsum_fintype</span><span class=\"o\">,</span>\n      <span class=\"n\">add_haar_closed_ball_center</span> <span class=\"n\">Œº</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_const</span><span class=\"o\">,</span> <span class=\"n\">finset.card_univ</span><span class=\"o\">,</span> <span class=\"n\">nat.card_fintype_Icc</span><span class=\"o\">,</span>\n      <span class=\"n\">tsub_zero</span><span class=\"o\">,</span> <span class=\"n\">hŒ¥</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h''</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">nonempty_closed_ball</span><span class=\"o\">,</span> <span class=\"n\">positivity</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">nat.card_eq_fintype_card</span><span class=\"o\">,</span> <span class=\"n\">nat.card_fintype_Icc</span><span class=\"o\">,</span> <span class=\"n\">hn.ne'</span><span class=\"o\">]</span> <span class=\"n\">using</span>\n    <span class=\"n\">card_le_one_of_closed_disjoint_Union_eq_univ</span> <span class=\"n\">h''</span> <span class=\"n\">hB</span> <span class=\"n\">h</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 318845206,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1672572761
    },
    {
        "content": "<p>Which I think is quite nice, partly because it's very conceptual and partly because it holds more generally. I admit I can't think of compact commutative normed groups other than tori, but still.</p>",
        "id": 318845306,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1672572842
    },
    {
        "content": "<p>I have now run out of fragments of time but I will review <a href=\"https://github.com/leanprover-community/mathlib/pull/18019\">#18019</a> tomorrow.</p>",
        "id": 318845382,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1672572875
    },
    {
        "content": "<p>Even if it applies only to tori (and products of such with finite abelian groups, I guess), this would be a good result to have, I think.</p>",
        "id": 318858787,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1672579924
    },
    {
        "content": "<p>Thanks, I am tempted to polish this result up and make a PR. (I'm happy to do this if a reviewer requests it.) However I think in good conscience I should stop contributing to Mathlib3 and start helping out with the port to Mathlib4.</p>",
        "id": 319092092,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1672691847
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> suggests moving the results in <a href=\"https://github.com/leanprover-community/mathlib/pull/18019\">#18019</a> into the <code>real</code> namespace (instead of <code>dioph_approx</code>, which is the namespace that is currently used). I'd lilke to have some more input on that before I change it.</p>",
        "id": 319370766,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1672832386
    },
    {
        "content": "<p>/poll Which namespace should the material of <a href=\"https://github.com/leanprover-community/mathlib/pull/18019\">#18019</a> be in?<br>\n<code>dioph_approx</code><br>\n<code>real</code></p>",
        "id": 319370953,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1672832448
    },
    {
        "content": "<p>Why not use continued fractions? This would make the proof <strong>much</strong> shorter.</p>",
        "id": 319487412,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1672872744
    },
    {
        "content": "<p><a href=\"https://math.stackexchange.com/a/4408290/12932\">This</a> looks like a nice summary of results about approximation by continued fraction.</p>",
        "id": 319504560,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1672884324
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Diophantine.20approximation/near/319487412\">said</a>:</p>\n<blockquote>\n<p>Why not use continued fractions? This would make the proof <strong>much</strong> shorter.</p>\n</blockquote>\n<p>Given Dirichlet's approximation theorem (which is good to have independently and which I don't see how to get using continued fractions), \"the proof\" (that there are infinitely many rational <code>q</code> s.t. <code>|Œæ - q| &lt; 1/q.denom^2</code>) is only lines 267-304 in the file. Most of the remaining code is about showing that for rational <code>Œæ</code>, there are only finitely many (which, I think, also cannot be done using continued fractions) and the equivalence between the pairs of integers version and the rational numbers version.</p>\n<p>But of course, you can prove somewhat stronger results regarding infinitely many \"good\" approximations with continued fractions (the best one being Hurwitz's theorem), so it would be nice if somebody did it. But I guess it will need more than about 40 lines of code to get there. It would also be nice to have what is called Legendre's theorem in the link proved by <span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span>.</p>",
        "id": 319585242,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1672925400
    },
    {
        "content": "<p>Following a suggestion by <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span>  and <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span>, I have now cut down <a href=\"https://github.com/leanprover-community/mathlib/pull/18019\">#18019</a> to the part that proves various versions of Dirichlet's approximation theorem and the part that deduces the infinitude of good rational approximations to irrational real numbers. I think it makes sense to also merge that last part (about 30 lines) now instead of waiting for someone to do it using continued fractions (which will require some more work, for which I don't have time right now).</p>",
        "id": 321399454,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1673723543
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/18193\">#18193</a> now adds the converse statement (rational numbers have only finitely many good rational approximations) and the \"iff\" version.</p>",
        "id": 321722075,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1673905539
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span>! I have made the suggested changes and pushed it on the merge queue.</p>",
        "id": 321841100,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1673965153
    },
    {
        "content": "<p>Thank you and Michael Gei√üer for doing this. It's a useful result!</p>",
        "id": 321843130,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1673965685
    }
]