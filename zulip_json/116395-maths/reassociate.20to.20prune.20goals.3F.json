[
    {
        "content": "<p>Is there a tactic for categories similar to <code>slice_lhs</code> which prunes away components of morphisms that already match up on both sides? I'd assume that's sometimes more efficient than just modifying small subterms until _everything_ matches up on both sides? /cc <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span></p>",
        "id": 248327165,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1628068813
    },
    {
        "content": "<p><code>congr</code> can sometimes do things like this. Personally I tend to avoid <code>slice_lhs</code> these days, usually you can find pure rewrite proofs which are much shorter without it. A particular trick which is super useful is to use <code>assoc</code> in the forward direction as much as you can, and then use reassociated versions of lemmas where needed</p>",
        "id": 248617855,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1628260067
    },
    {
        "content": "<p><code>congr</code> often misfires though. Reassociating and applying <code>whisker_eq</code> also does the trick, I noticed. Using reassociated lemmas is a good point, maybe I can use that to golf <a href=\"https://github.com/javra/mathlib/blob/002adeeda39f23dfbcbc81a1d439fa47595a374f/src/category_theory/monoidal/rigid.lean#L117-L146\">this monster</a> a bit...</p>",
        "id": 248620367,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1628261356
    },
    {
        "content": "<p>You can use <code>congr' 1</code> or variants to refine it better as well</p>",
        "id": 248623328,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1628262828
    }
]