[
    {
        "content": "<p>Hello, I'd like some tips for how to implement something. So given an injection <code>f : α → β</code> with <code>α</code> nonempty, classically one would not need the axiom of choice to prove that it has a retraction, i.e. a left inverse. This is because for any <code>y : β</code> that is in the image of <code>f</code>, we can map it onto its unique inverse image, and if <code>y</code> is not in the image we can just map it onto a witness of <code>α</code> being nonempty. This clearly relies on excluded middle, because it is not in general decidable wether <code>y</code> will be in the image of <code>f</code>, but to my mind it should not rely on the axiom of choice. How would I go about implementing this in Lean? I cannot produce data from the assertion that <code>∃ x,  f x = y</code>, but can I produce data from unique existence?</p>",
        "id": 286323247,
        "sender_full_name": "Roselyn Baxter",
        "timestamp": 1655369163
    },
    {
        "content": "<p>I'm pretty sure you need some classical axiom to produce data from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exists_unique\">docs#exists_unique</a>.</p>",
        "id": 286324009,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1655369622
    },
    {
        "content": "<p>If you want to find a retrect for an injective function, you can combine <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective.has_left_inverse\">docs#function.injective.has_left_inverse</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Exists.some\">docs#Exists.some</a>, so something like (untested):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">retract</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">hf.has_left_inverse.some</span>\n</code></pre></div>",
        "id": 286324565,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1655369935
    },
    {
        "content": "<p>Note that in dependent type theory, there are many formulations of choice principles, and some of the original set-theoretical formulations choice principles such as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.axiom_of_choice\">docs#classical.axiom_of_choice</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.pi_nonempty_iff\">docs#set.pi_nonempty_iff</a> follow from double negation elimination (more specifically, from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.choice\">docs#classical.choice</a>), while others are trivially true: if we translate \"for all x, there is a y such that P(x, y)\" to <code>h : Π x, Σ y, P x y</code>, then this obviously has a choice function, namely <code>λ x, sigma.fst (h x)</code>.</p>",
        "id": 286325974,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1655370667
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.choose\">docs#fintype.choose</a> for constructively extracting data from <code>exists_unique</code> via enumeration</p>",
        "id": 286328658,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655372286
    },
    {
        "content": "<p>I suppose it would work for all enumerable types <code>α</code> and decidable predicates <code>α → Prop</code>, right?</p>",
        "id": 286329238,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1655372761
    },
    {
        "content": "<p>Indeed: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/encodable.choose\">docs#encodable.choose</a></p>",
        "id": 286329345,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1655372824
    },
    {
        "content": "<p>yeah, I was going to point out <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.find\">docs#nat.find</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/enat.find\">docs#enat.find</a>, (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.find\">docs#int.find</a> ?) but that seems like the better general version</p>",
        "id": 286330039,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1655373285
    },
    {
        "content": "<p>There are three other \"axioms\" that are derived from <code>choice</code> in Lean:</p>\n<ul>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.em\">docs#classical.em</a></li>\n<li>unique choice</li>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.axiom_of_choice\">docs#classical.axiom_of_choice</a></li>\n</ul>\n<p>If you want to minimize axioms then you should pose them all as axioms separately.</p>",
        "id": 286330921,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655374018
    },
    {
        "content": "<p>For the original question, you would need to use the first two.</p>",
        "id": 286331760,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655374641
    },
    {
        "content": "<p>Ah, I hadn't realised classical.em was proved from classical.choice, I see. I won't be able to use much of anything in mathlib then, oh well.</p>",
        "id": 286331924,
        "sender_full_name": "Roselyn Baxter",
        "timestamp": 1655374763
    },
    {
        "content": "<p>Since <code>em</code> and <code>axiom_of_choice</code> are propositions, I would guess you could get pretty far by modifying the Lean core library to replace them by <code>axiom</code>s.</p>",
        "id": 286332159,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655374903
    },
    {
        "content": "<p>But indeed, mathlib is very much not designed for this kind of thing.</p>",
        "id": 286332173,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655374915
    }
]