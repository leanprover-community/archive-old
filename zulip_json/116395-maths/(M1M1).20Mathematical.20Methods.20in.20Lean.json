[
    {
        "content": "<p>The joint maths and computer science students at Imperial College London are doing four courses this term. One on Haskell, one on logic, my course M1F, and a course called M1M1, which is a mathematical methods course, where the derivative of sin is cos just like it was at school and nobody really bothers with why that's true.</p>",
        "id": 135729301,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539431666
    },
    {
        "content": "<p>On the other hand, one of the questions on the first sheet was \"define <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>=</mo><mn>1</mn><mo>+</mo><mi>x</mi><mo>+</mo><msup><mi>x</mi><mn>2</mn></msup><mi mathvariant=\"normal\">/</mi><mn>2</mn><mo>!</mo><mo>+</mo><msup><mi>x</mi><mn>3</mn></msup><mi mathvariant=\"normal\">/</mi><mn>3</mn><mo>!</mo><mo>+</mo><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\">f(x) = 1+x+x^2/2!+x^3/3!+\\cdots</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord mathrm\">1</span><span class=\"mbin\">+</span><span class=\"mord mathit\">x</span><span class=\"mbin\">+</span><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathrm\">/</span><span class=\"mord mathrm\">2</span><span class=\"mclose\">!</span><span class=\"mbin\">+</span><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">3</span></span></span></span></span></span></span></span><span class=\"mord mathrm\">/</span><span class=\"mord mathrm\">3</span><span class=\"mclose\">!</span><span class=\"mbin\">+</span><span class=\"minner\">⋯</span></span></span></span> and let's not worry about what it means to converge. By multiplying everything out and re-arranging without worrying about whether this is valid, prove <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo>(</mo><mi>x</mi><mo>+</mo><mi>y</mi><mo>)</mo><mo>=</mo><mi>f</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>×</mo><mi>f</mi><mo>(</mo><mi>y</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">f(x+y) = f(x) \\times f(y)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mbin\">+</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span><span class=\"mbin\">×</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span>\"</p>",
        "id": 135729358,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539431777
    },
    {
        "content": "<p>and I thought \" <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>  did that properly, took him ages\"</p>",
        "id": 135729361,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539431822
    },
    {
        "content": "<p>I wonder how far we'll be able to get on the M1M1 example sheets by the end of term :-)</p>",
        "id": 135729367,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539431851
    },
    {
        "content": "<p>One of the questions needed log and Chris did that a few weeks ago, so we're still just ahead</p>",
        "id": 135729407,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539431934
    },
    {
        "content": "<p>Are double angle formulae in Lean? Tricks about sin(theta) in terms of tan(theta/2)?</p>",
        "id": 135729413,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539431973
    },
    {
        "content": "<p>Stuff which is assumed in M1M1? Ability to define <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mo>∫</mo><mn>0</mn><mi mathvariant=\"normal\">∞</mi></msubsup><msup><mi>e</mi><mrow><mo>−</mo><msup><mi>x</mi><mn>2</mn></msup><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow></msup><mi>d</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\int_0^\\infty e^{-x^2/2} d x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.9869199999999998em;\"></span><span class=\"strut bottom\" style=\"height:1.3427399999999998em;vertical-align:-0.35582em;\"></span><span class=\"base\"><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8592920000000001em;\"><span style=\"top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">0</span></span></span><span style=\"top:-3.2579000000000002em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">∞</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35582em;\"></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathit\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9869199999999998em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\"><span class=\"mord mathit mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913142857142857em;\"><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathrm mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathrm mtight\">/</span><span class=\"mord mathrm mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mord mathit\">d</span><span class=\"mord mathit\">x</span></span></span></span>?</p>",
        "id": 135729471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539432032
    },
    {
        "content": "<p>It's not just methods that's like this. Try formally proving every permutation is the product of disjoint cycles.</p>",
        "id": 135729571,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539432262
    },
    {
        "content": "<p>you show us up for the charlatains we are!</p>",
        "id": 135729697,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539432563
    },
    {
        "content": "<p>But we're mathematicans. If your silly software cannot easily prove things which are intuitively obvious to us then the problem is surely with your software</p>",
        "id": 135729733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539432603
    },
    {
        "content": "<p>The proof is \"choose an element, keep hitting with the permutation, eventually you'll get back to where you start, done by induction\"</p>",
        "id": 135729750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539432666
    },
    {
        "content": "<p>(assuming we're talking about finite sets/types)</p>",
        "id": 135729794,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539432760
    },
    {
        "content": "<p>that's what I did</p>",
        "id": 135729898,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539432981
    },
    {
        "content": "<p>how many lines?</p>",
        "id": 135729986,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539433171
    },
    {
        "content": "<p>26 lines</p>",
        "id": 135730384,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539433929
    },
    {
        "content": "<p><a href=\"https://github.com/kckennylau/Lean/blob/master/Sym.lean#L645-L670\" target=\"_blank\" title=\"https://github.com/kckennylau/Lean/blob/master/Sym.lean#L645-L670\">https://github.com/kckennylau/Lean/blob/master/Sym.lean#L645-L670</a></p>",
        "id": 135730385,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539433937
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">list_step</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">Sym</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">step</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">refine</span> <span class=\"n\">well_founded</span><span class=\"bp\">.</span><span class=\"n\">fix</span> <span class=\"n\">list_step</span><span class=\"bp\">.</span><span class=\"n\">aux</span><span class=\"bp\">.</span><span class=\"n\">wf</span> <span class=\"bp\">_</span> <span class=\"n\">σ</span><span class=\"bp\">;</span> <span class=\"k\">from</span>\n<span class=\"bp\">λ</span> <span class=\"n\">σ</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"k\">then</span> <span class=\"o\">[]</span>\n  <span class=\"k\">else</span> <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">σ</span><span class=\"bp\">.</span><span class=\"n\">support_choice</span> <span class=\"n\">H</span> <span class=\"k\">in</span>\n    <span class=\"n\">step</span><span class=\"bp\">.</span><span class=\"n\">mk&#39;</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">support_def</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hi</span><span class=\"o\">)</span>\n    <span class=\"bp\">::</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">support_swap_mul</span> <span class=\"n\">hi</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">list_step_prod</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">Sym</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">σ</span><span class=\"bp\">.</span><span class=\"n\">list_step</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">step</span><span class=\"bp\">.</span><span class=\"kn\">eval</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"bp\">=</span> <span class=\"n\">σ</span> <span class=\"o\">:=</span>\n<span class=\"n\">well_founded</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"n\">list_step</span><span class=\"bp\">.</span><span class=\"n\">aux</span><span class=\"bp\">.</span><span class=\"n\">wf</span> <span class=\"n\">σ</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">σ</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">list_step</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">well_founded</span><span class=\"bp\">.</span><span class=\"n\">fix_eq</span><span class=\"o\">],</span>\n  <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">by_contra</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"err\">∅</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)),</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">cc</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">support_def</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">mt</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">H</span> <span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">support_choice</span> <span class=\"n\">σ</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">list_step</span><span class=\"bp\">._</span><span class=\"n\">match_1</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">ih</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">support_swap_mul</span> <span class=\"n\">hi</span><span class=\"o\">),</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">list_step</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">map_cons</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">prod_cons</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">step</span><span class=\"bp\">.</span><span class=\"n\">eval_mk&#39;</span><span class=\"o\">,</span> <span class=\"n\">swap_mul_self</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 135730387,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539433942
    },
    {
        "content": "<p>That sounds like a reasonable length to me.</p>",
        "id": 135730390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539433972
    },
    {
        "content": "<p>That's a proof of something different isn't it? It's a proof about products of swaps, not disjoint cycles.</p>",
        "id": 135730559,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539434301
    },
    {
        "content": "<p>ah, right</p>",
        "id": 135730680,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539434624
    },
    {
        "content": "<p>so the question remains</p>",
        "id": 135730742,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539434759
    },
    {
        "content": "<p>225 lines <a href=\"https://github.com/leanprover/mathlib/compare/master...dorhinj:cycles2?expand=1\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/compare/master...dorhinj:cycles2?expand=1\">https://github.com/leanprover/mathlib/compare/master...dorhinj:cycles2?expand=1</a></p>",
        "id": 135747465,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539465451
    },
    {
        "content": "<p>I like it, we're getting a lot of nice structure on <code>perm</code></p>",
        "id": 135752321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539474305
    },
    {
        "content": "<p>Any chance of defining stuff about the finitely supported permutations? (i.e. it's a subgroup, and has most of the properties you have put on finite permutation groups like the alternating group or separation into disjoint cycles)</p>",
        "id": 135752367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539474394
    },
    {
        "content": "<p>One would imagine that these are also situations where a mathematician would say \"it's obvious\" (like e.g. the fact that it's a subgroup).</p>",
        "id": 135771386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539511761
    },
    {
        "content": "<p>I think at this point we all know that it's pointless to keep saying that so and so is obvious to a mathematician.</p>",
        "id": 135771455,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539511833
    },
    {
        "content": "<p>I don't think it's pointless at all Kenny. I think that if we isolate many of the things that are \"obvious to a mathematician\" and make sure that they are <em>relatively easy for a mathematician do in Lean</em> (even though we all know that they are in truth difficult to do from the actual axioms of mathematics) then this is a step towards making Lean more intuitive for mathematicians to use.</p>",
        "id": 135771526,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539512007
    },
    {
        "content": "<blockquote>\n<p>Any chance of defining stuff about the finitely supported permutations? (i.e. it's a subgroup, and has most of the properties you have put on finite permutation groups like the alternating group or separation into disjoint cycles)</p>\n</blockquote>\n<p>What's the best approach for this. Are you happy to lose computability in favour of generality? My <code>cycle_of</code> function can certainly be extended to infinite permutations, but not computably, though it is outrageously slow anyway. For <code>sign</code> and stuff, is it best to just create a new definition of <code>sign</code> for finitely supported permutations of infinite types. I imagine this is better than making a partial function which is actually a total function on most of the stuff people want to use it for.</p>",
        "id": 135775656,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539520019
    },
    {
        "content": "<p><code>cycle_of</code> should be computable on infinite (finitely supported) permutations, assuming <code>decidable_eq</code> on the base set, although I would factor it into a <code>cycle_support</code> function that returns the list of iterates of the input</p>",
        "id": 135775778,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539520269
    },
    {
        "content": "<p>and then I guess there are also a bunch of noncomputable functions we might want in the truly infinite case, like <code>cycle_of</code> where the cycle is possibly isomorphic to Z</p>",
        "id": 135775883,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539520474
    },
    {
        "content": "<p>In fact it is still true that \"every permutation is a product of cycles\" in the truly infinite case, you just have to make sense of an infinite product of disjoint permutations</p>",
        "id": 135775946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539520575
    },
    {
        "content": "<blockquote>\n<p>I think at this point we all know that it's pointless to keep saying that so and so is obvious to a mathematician.</p>\n</blockquote>\n<p>Just adding to this thread that to a 1st year maths undergraduate it is \"obvious\" that the derivative of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>sin</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">\\sin(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mop\">sin</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>cos</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">\\cos(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mop\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span></span></span></span> (because they \"learnt it at school\") and I think that having this in Lean would be a very natural goal. It will be interesting to see if our new cohort of freshers were up to the task.</p>",
        "id": 135777622,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539523338
    }
]