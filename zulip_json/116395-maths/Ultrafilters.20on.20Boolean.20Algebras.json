[
    {
        "content": "<p>For model theory purposes, I'd like to use the construction of the Stone-Cech space of ultrafilters on a general boolean algebra.</p>",
        "id": 266193690,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1640629229
    },
    {
        "content": "<p>I recall that we have <code>pfilter</code> as an alternative to <code>filter</code> for more general lattices, but it seems not to have gone very far.</p>",
        "id": 266193734,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1640629278
    },
    {
        "content": "<p>Where can I begin my generalization without messing up too much API?</p>",
        "id": 266193761,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1640629308
    },
    {
        "content": "<p>Start by replacing the definition of <code>filter</code> with <code>pfilter</code> then, file by file, duplicate all lemmas that use <code>set</code>-specific operations, generalize the first duplicate to boolean algebras and prove the second one using the first.</p>",
        "id": 266196085,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640631449
    },
    {
        "content": "<p>This would maybe be my instinct, but the main conclusion of the discussion about <code>pfilter</code> was that basically any change to the definition or basic API of <code>filter</code> would be extremely difficult and ill-advised</p>",
        "id": 266197215,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1640632392
    },
    {
        "content": "<p>I disagree. The definition translates verbatim, which is the most important part.</p>",
        "id": 266197420,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640632603
    },
    {
        "content": "<p>It'll be a bunch of work, but if you stick to changing one file at a file, it should be pretty straightforward.</p>",
        "id": 266197457,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640632636
    },
    {
        "content": "<p>If you don't want to duplicate a bunch of the API, you could use <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">S</mi><mi mathvariant=\"normal\">p</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">c</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Spec}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Spec</span></span></span></span></span> :)</p>",
        "id": 266197706,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640632894
    },
    {
        "content": "<p>Do we really have Spec in that level of generality? Even if we do, what I'm looking for puts a slightly different topology on Spec.</p>",
        "id": 266199031,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1640633826
    },
    {
        "content": "<p>It's not the Zariski topology?</p>",
        "id": 266199138,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640633924
    },
    {
        "content": "<p>I'm talking about Spec of a commutative ring here... you can view any boolean algebra as a commutative ring.</p>",
        "id": 266199199,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640633980
    },
    {
        "content": "<p>Actually, I'm not sure if it's the Zariski topology, as I haven't thought about boolean rings much. I need varieties to be clopen rather than closed - perhaps this is true in boolean rings.</p>",
        "id": 266211132,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1640644860
    },
    {
        "content": "<p>I think it is</p>",
        "id": 266234546,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640672096
    },
    {
        "content": "<p>I also agree (with a minor doubt) that for boolean rings, the Zariski topology has the property that closed subsets are also open.  The minor doubt has to do with the fact that the ring need not be of finite type.</p>\n<p>After a lot of words, the key identity is the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring.boolean_ring</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">boolean_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>The <code>example</code> shows that the vanishing set of <code>a</code> coincides with the non-vanishing set of <code>1-a</code>.</p>\n<p>Thus, the Zariski topology admits a sub-basis of clopen sets.</p>\n<p>In fact, there is a (possibly) different topology that you can put on any scheme where you declare the quasi-compact opens and their complements to form a sub-basis for the topology.  This is sometimes called the <em>constructible topology</em>.  My small concern is exactly about the <em>quasi-compact</em> assumption that floats around.</p>",
        "id": 266239518,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1640678361
    },
    {
        "content": "<p>EDIT: resolved below by Yaël -- boolean algebras have <code>⊤</code> as identity under <code>⊓</code> as multiplication.</p>\n<p>On a slightly separate note, I found out that the module doc-string for <code>boolean_ring</code> says</p>\n<blockquote>\n<p>A Boolean ring is [...] equivalent to Boolean algebras.</p>\n</blockquote>\n<p>though it seems that there need not be a <code>1</code> in a boolean algebra.<br>\n(Of course, equivalent can be interpreted in multiple ways: does it make sense to specify that boolean rings are equivalent to boolean algebras <em>with an identity</em>?)</p>",
        "id": 266239745,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1640678533
    },
    {
        "content": "<p>In this context, <code>1</code> is top, right? In which case, yes, boolean algebras have a top, but not generalized boolean algebras.</p>",
        "id": 266239834,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640678651
    },
    {
        "content": "<p>Ah, I think that you are right!  I tried writing <code>1</code> and boolean algebra complains that there is no <code>has_one</code> instance.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">boolean_algebra</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">⊓</span> <span class=\"bp\">⊤</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>works!</p>",
        "id": 266239929,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1640678773
    },
    {
        "content": "<p>Note that having <code>1</code> as notation for <code>⊤</code> in all boolean algebras will conflict with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.has_one\">docs#set.has_one</a> (and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.has_one\">docs#finset.has_one</a> over a fintype), which is useful in the context of pointwise operations.</p>",
        "id": 266240122,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640679010
    },
    {
        "content": "<p>Ok, thanks for the explanation!  I was not going to suggest adding the instance, but I was wondering why it was not there.</p>",
        "id": 266240140,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1640679052
    },
    {
        "content": "<p>If there's interest in the boolean algebras / boolean rings equivalence, I'll try and come back to <a href=\"https://github.com/leanprover-community/mathlib/pull/6476\">#6476</a> within a few days.</p>",
        "id": 266262561,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1640700915
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> I never heard of generalized boolean algebras. Is there even a Stone duality for such gadgets?</p>",
        "id": 266270309,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640706982
    },
    {
        "content": "<p>I don't know what a generalized boolean algebra is either but if it's something like a \"boolean algebra without 1\", then it probably corresponds to something that looks locally like a Stone space and is still quasiseparated (= intersection of qc opens is qc)</p>",
        "id": 266271774,
        "sender_full_name": "Reid Barton",
        "timestamp": 1640708311
    },
    {
        "content": "<p>we just don't require the whole space to be qc</p>",
        "id": 266271783,
        "sender_full_name": "Reid Barton",
        "timestamp": 1640708318
    },
    {
        "content": "<p>A generalized boolean algebra is a boolean algebra without a top. We mostly use it in mathlib to have <code>\\</code> on <code>finset</code> (but also to generalize stuff like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/uv.compress\">docs#uv.compress</a>).</p>",
        "id": 266274957,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640711004
    },
    {
        "content": "<p>Ok, I now believe that using Spec could theoretically work.</p>",
        "id": 266363457,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1640799257
    },
    {
        "content": "<p>However, is this really the best way to go about things? I feel like I'd at least have to duplicate some of the API, at least when I prove that such a space is actually totally disconnected, and I do feel like Stone duality is important enough to find the right way to do it</p>",
        "id": 266363637,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1640799396
    },
    {
        "content": "<p>Check out <a href=\"https://ncatlab.org/nlab/show/Stone-duality\">nlab#Stone-duality</a> I think more or less everything there should be doable</p>",
        "id": 266366975,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640801942
    }
]