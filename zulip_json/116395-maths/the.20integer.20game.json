[
    {
        "content": "<p>One of the things that really surprised me about core Lean two years ago was that the integers were defined in this really mathematically ugly way, as the disjoint union of two copies of the naturals. As any mathematician knows, the integers are actually defined to be the equivalence classes of an equivalence relation on <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi mathvariant=\"double-struck\">N</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>. I probably asked this two years ago but was in no position to understand the response, so I'm asking again now: why are the integers defined in this way? If I never want to compute with an actual integer, but just want to prove theorems about them (e.g. that they're a ring), then am I actually better off defining them as equivalence classes?</p>",
        "id": 179073132,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572025893
    },
    {
        "content": "<p>I think that's likely</p>",
        "id": 179075452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572027397
    },
    {
        "content": "<p>As you've identified, the reason this is done is for computation</p>",
        "id": 179075491,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572027424
    },
    {
        "content": "<p>But natural numbers are disastrous computationally in the kernel, and integers are just GMP integers in the VM, ignoring the inductive def, so I still don't really get this.</p>",
        "id": 179079988,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1572030682
    },
    {
        "content": "<p>It still has the advantage that, for example, 2 - 1 is defeq to 1</p>",
        "id": 179080131,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572030806
    },
    {
        "content": "<p>I'm thinking about the sequel to the natural number game and I'm wondering if I'd be better off just going straight for the equivalence relation approach. I'm looking for potential disadvantages. It would be the same sort of thing -- just take a bunch of typeclasses which int has and try and prove them for myint from first principles.</p>",
        "id": 179080161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572030839
    },
    {
        "content": "<p>I don't care about defeq. Mathematicians don't understand this and I actively encourage them to <code>rw add_zero</code> in the natural number game</p>",
        "id": 179080252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572030890
    },
    {
        "content": "<p>Well, you did prove <code>two + two = four</code> by <code>refl</code></p>",
        "id": 179080292,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572030932
    },
    {
        "content": "<p>but I agree it's not that compelling a reason for the purpose of integer game</p>",
        "id": 179080298,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572030943
    },
    {
        "content": "<p>I think the integer game with a quotient construction should be about as hard as the complex number game</p>",
        "id": 179080377,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572031035
    },
    {
        "content": "<p>It also has the advantage that it introduces the quotient game mechanic</p>",
        "id": 179080415,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572031077
    },
    {
        "content": "<p>you get less defeq, but that's more representative of higher math anyway</p>",
        "id": 179080416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572031078
    },
    {
        "content": "<p>I prove 2+2=4 by refl in the article, but this is not done in the natural number game itself; no number higher than 1 appears in the natural number game and I tell them that to prove their first theorems about <code>1</code> they must <code>rw one_eq_succ_zero</code>. I did not want to get bogged down with the difference between definitional equality and equality-because-of-a-theorem.</p>",
        "id": 179084226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572033907
    },
    {
        "content": "<blockquote>\n<p>It also has the advantage that it introduces the quotient game mechanic</p>\n</blockquote>\n<p>Right. The natural number game introduces induction, and the integer game could introduce the universal property of quotients early on. I don't actually know how much one would have to use it to prove theorems, I'm a bit unclear about how the proofs look if you do it with quotients; I've only looked at core Lean and there everything is just a + / - case split because of the definition.</p>",
        "id": 179084482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572034070
    },
    {
        "content": "<p>Actually, most of the proofs about integer properties go via the quotient indirectly (or at least it did, while <code>transfer</code> was still in core; we may have reverted to the old proof)</p>",
        "id": 179088982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572037392
    },
    {
        "content": "<blockquote>\n<p>One of the things that really surprised me about core Lean two years ago was that the integers were defined in this really mathematically ugly way, as the disjoint union of two copies of the naturals. As any mathematician knows, the integers are actually defined to be the equivalence classes of an equivalence relation on <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi mathvariant=\"double-struck\">N</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>.</p>\n</blockquote>\n<p>In learning Lean I wanted to experiment with quotients. I looked up the definition of the integers, and, like <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, was a little surprised by the official definition. I also read his post <a href=\"https://xenaproject.wordpress.com/maths-in-lean-quotients-and-equivalence-classes/\" target=\"_blank\" title=\"https://xenaproject.wordpress.com/maths-in-lean-quotients-and-equivalence-classes/\">Maths in Lean : quotients and equivalence classes</a>. </p>\n<p>Are there any resources where simple examples of quotients are explored? The two examples that KB mentions in his post seem ideal to me (the integers as a quotient of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi mathvariant=\"double-struck\">N</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>; the integers mod <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> as a quotient of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span>)? <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> have you started writing anything down for the \"integer game\"? &mdash; I would be happy to be your guinea pig.</p>",
        "id": 180371409,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1573406103
    },
    {
        "content": "<p>I've spent many hours this weekend working on the natural number game, I don't really have time to think about the integer game at the minute. But I did once write this: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tutorial/Zmod37.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tutorial/Zmod37.lean\">https://github.com/leanprover-community/mathlib/blob/master/docs/tutorial/Zmod37.lean</a> which might help beginners to see how Lean uses quotients in practice.</p>",
        "id": 180371473,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573406261
    },
    {
        "content": "<p>Thanks! That seems to the kind of resource I was looking for.</p>",
        "id": 180371531,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1573406386
    }
]