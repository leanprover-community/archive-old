[
    {
        "content": "<p>Is there a tactic to show two finite sets (for simplicity, let's say sets of integers) are equal? That is, can I do the following in one line? Same question for showing two such sets are not equal.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">({</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ext_iff</span><span class=\"o\">,</span> <span class=\"c1\">-- Use the definition of set equality</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"c1\">-- Assume `x` is an integer.</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"c1\">-- It suffices to prove `x ∈ {5, 6, 7, 8} → x ∈ {5, 7, 5, 8, 6}` and the converse.</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span>  <span class=\"o\">(</span><span class=\"n\">h₈</span> <span class=\"bp\">|</span> <span class=\"n\">h₇</span> <span class=\"bp\">|</span> <span class=\"n\">h₆</span> <span class=\"bp\">|</span> <span class=\"n\">h₅</span> <span class=\"bp\">|</span> <span class=\"n\">k</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h₈</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h₇</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h₆</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h₅</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span> <span class=\"c1\">-- The case `x ∈ ∅`.</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">h₆</span> <span class=\"bp\">|</span> <span class=\"n\">h₈</span> <span class=\"bp\">|</span> <span class=\"n\">h₅</span> <span class=\"bp\">|</span> <span class=\"n\">h₇</span> <span class=\"bp\">|</span> <span class=\"n\">h₅</span> <span class=\"bp\">|</span> <span class=\"n\">k</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h₆</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h₈</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h₅</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h₇</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h₅</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">k</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 213644280,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1602928612
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">({</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">finish</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 213644552,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602929114
    },
    {
        "content": "<p>Thanks very much!</p>",
        "id": 213644608,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1602929207
    },
    {
        "content": "<p><code>simp</code> should work too</p>",
        "id": 213644686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602929321
    },
    {
        "content": "<p><code>by simp</code> reports: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">there</span> <span class=\"n\">are</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">{</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 213644702,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602929370
    },
    {
        "content": "<p>Worth noting perhaps that if you use <code>finset</code>s, <code>dec_trivial</code> works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">({</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>",
        "id": 213644784,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602929509
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">({</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.singleton_def</span><span class=\"o\">,</span> <span class=\"n\">set.insert_comm</span><span class=\"o\">,</span> <span class=\"n\">set.insert_eq_of_mem</span><span class=\"o\">,</span> <span class=\"n\">set.mem_insert</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 213644886,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602929657
    },
    {
        "content": "<p>I don't know how to prove an inequality easily though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">({</span><span class=\"mi\">15</span><span class=\"o\">,</span> <span class=\"mi\">15</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 213646247,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602931988
    },
    {
        "content": "<p>probably lift to finsets and use dec_trivial</p>",
        "id": 213646319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602932119
    },
    {
        "content": "<p>or observe that <code>15</code> is in one and not the other (which can be proven fairly automatically)</p>",
        "id": 213646333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602932160
    },
    {
        "content": "<p>Using your ideas, I can simplify a proof that two sets aren't equal, but am I missing a trick in the proof below? I understand that <code>dec_trivial</code> would work if these were <code>finset</code>s. And how might one do this with <code>simp only</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">({</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ext_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"mi\">7</span><span class=\"o\">,</span>\n  <span class=\"n\">finish</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 213646485,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1602932360
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span> <span class=\"n\">tactic.norm_num</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ne_of_mem_of_not_mem_right</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∉</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">≠</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h₂</span> <span class=\"bp\">$</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">h₁</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">({</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">ne_of_mem_of_not_mem_right</span> <span class=\"mi\">7</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 213646686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602932675
    },
    {
        "content": "<p>or without the lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">({</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">7</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"o\">({</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"bp\">$</span> <span class=\"n\">e</span> <span class=\"bp\">▸</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 213646790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602932837
    },
    {
        "content": "<p>Here's a proof going through <code>finset</code>s:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">({</span><span class=\"mi\">15</span><span class=\"o\">,</span> <span class=\"mi\">15</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">{</span><span class=\"mi\">15</span><span class=\"o\">,</span> <span class=\"mi\">15</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">finset.coe_inj.symm</span><span class=\"o\">,</span> <span class=\"n\">finset.coe_insert</span><span class=\"o\">,</span> <span class=\"n\">finset.coe_singleton</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 213647365,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602933719
    },
    {
        "content": "<p>Now that I see <code>norm_num</code> proves non-membership, here's an alternative. I needed an intermediate result, <code>foo</code>. Is this in mathlib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">prop_decidable</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">):</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">iff_def</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">not_and_distrib</span><span class=\"o\">,</span> <span class=\"n\">not_imp</span><span class=\"o\">,</span> <span class=\"n\">not_imp</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">({</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ext_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"mi\">7</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">foo</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 213647882,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1602934545
    },
    {
        "content": "<p>I don't know if <code>foo</code> is in that huge <code>logic.basic</code> file which has loads of this stuff, but just to remark that <code>tauto!</code> proves goals like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">):</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">tauto</span><span class=\"bp\">!</span>\n</code></pre></div>",
        "id": 213648087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602934909
    },
    {
        "content": "<p>Searching for things like this is harder than us mathematicians might think it should be, because sometimes the proofs in logic.basic have random decidable hypotheses which we wouldn't think to put in, because they're not true constructively, which can confuse <code>library_search</code> (and this certainly doesn't look true constructively: I don't think </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">pq</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">p</span>\n</code></pre></div>\n\n<p>is going anywhere because constructively the hypothesis is useless and you don't know whether to go left or right).</p>",
        "id": 213648139,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602934979
    },
    {
        "content": "<p>Yes, I think I'm teaching the first cohort of maths student at Exeter who really need to know the difference between classical and non-classical reasoning.</p>\n<p>I've had the question, 'Isn't negation introduction just the same as proof by contradiction?' Which it is to a classical mathematician. I hope my colleagues don't hate me.</p>",
        "id": 213648265,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1602935195
    },
    {
        "content": "<p>Yes, constructivists get super-hung up on the fact that the proof that there is no rational number whose square is 2 is constructive even though we say \"let's prove it by contradiction\". They seem less hung up on the fact that the intermediate value theorem is not valid constructively so they can't construct the square root function :-)</p>",
        "id": 213648343,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602935362
    },
    {
        "content": "<p>it's probably called <code>not_iff</code></p>",
        "id": 213648412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602935487
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/not_iff\">docs#not_iff</a>?</p>",
        "id": 213648416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602935500
    },
    {
        "content": "<p>Huh, congratulations on finding a hole in the library</p>",
        "id": 213648507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602935658
    },
    {
        "content": "<p>it's extra weird because we actually have a definition for the rhs, it is <code>xor</code>, but there are literally no theorems about it, not even the obvious <code>\\not (a \\iff b) &lt;-&gt; xor a b</code> which this would be equivalent to</p>",
        "id": 213648520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602935717
    },
    {
        "content": "<p>Well even though <code>not_iff</code> isn't the same as <code>foo</code>, it does the job in this case.</p>",
        "id": 213648568,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1602935784
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Showing.20equality.20of.20finite.20sets/near/213648139\">said</a>:</p>\n<blockquote>\n<p>Searching for things like this is harder than us mathematicians might think it should be, because sometimes the proofs in logic.basic have random decidable hypotheses which we wouldn't think to put in, because they're not true constructively, which can confuse <code>library_search</code> (and this certainly doesn't look true constructively: I don't think </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">pq</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">p</span>\n</code></pre></div>\n\n<p>is going anywhere because constructively the hypothesis is useless and you don't know whether to go left or right).</p>\n</blockquote>\n<p>Note that this is no longer the case, I reformed <code>logic.basic</code> to go classical a few months ago</p>",
        "id": 213648584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602935867
    },
    {
        "content": "<p>all the funny decidable hypothesis theorems are now in <code>decidable</code> namespace</p>",
        "id": 213648632,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602935909
    },
    {
        "content": "<p>Now, who wants to take all the useful lemmas from this thread and PR them before we forget?</p>",
        "id": 213649108,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602936741
    },
    {
        "content": "<p>Be my guest. I suppose <code>foo</code> is a terrible name :(</p>",
        "id": 213649236,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1602936998
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Showing.20equality.20of.20finite.20sets/near/213648343\">said</a>:</p>\n<blockquote>\n<p>They seem less hung up on the fact that the intermediate value theorem is not valid constructively so they can't construct the square root function :-)</p>\n</blockquote>\n<p>You actually can construct the square root function</p>",
        "id": 213652377,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602941959
    },
    {
        "content": "<p>just not by using the intermediate value theorem</p>",
        "id": 213652382,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602941971
    },
    {
        "content": "<p>oh of course, there's an algorithm.</p>",
        "id": 213664808,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602959849
    }
]