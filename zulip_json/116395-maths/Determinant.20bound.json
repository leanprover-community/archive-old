[
    {
        "content": "<p>Here's a result I almost proved this afternoon because I thought it would give me a short cut to something I want. I subsequently decided it was not the shortcut I had hoped but it's elementary and useful so maybe if I dump it here, it will magically get formalised:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.determinant</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.multilinear</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_comm_ring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">norm_one_class</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">nat</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">norm_det_le</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">ι</span> <span class=\"n\">ι</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∥</span><span class=\"n\">A.det</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">fintype.card</span> <span class=\"n\">ι</span><span class=\"o\">)</span><span class=\"bp\">!</span> <span class=\"bp\">*</span> <span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"bp\">∥</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span> <span class=\"c1\">-- induction + `matrix.det_succ_column_zero`</span>\n\n<span class=\"c1\">-- or even just</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">norm_det_le'</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∥</span><span class=\"n\">A.det</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"bp\">!</span> <span class=\"bp\">*</span> <span class=\"bp\">∏</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"bp\">∥</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 262727986,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637860423
    },
    {
        "content": "<p>I proved something like that for the class number, let me see what it is called...</p>",
        "id": 262728058,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637860459
    },
    {
        "content": "<p>No way!</p>",
        "id": 262728068,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637860465
    },
    {
        "content": "<p>That would be awesome.</p>",
        "id": 262728084,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637860482
    },
    {
        "content": "<p>Check out <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.det_le\">docs#matrix.det_le</a></p>",
        "id": 262728095,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637860494
    },
    {
        "content": "<p>Hmm, I think that's just slightly weaker than I need.</p>",
        "id": 262728159,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637860558
    },
    {
        "content": "<p>Yeah, I only have an element-wise upper bound and you need it column-wise :(</p>",
        "id": 262728216,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637860585
    },
    {
        "content": "<p>The application would be to apply <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multilinear_map.continuous_of_bound\">docs#multilinear_map.continuous_of_bound</a> to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.det_row_alternating\">docs#matrix.det_row_alternating</a></p>",
        "id": 262728230,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637860597
    },
    {
        "content": "<p>Maybe I could use multilinearity to rescale each column and deduce what I want from your result!</p>",
        "id": 262728363,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637860727
    },
    {
        "content": "<p>That should work actually!</p>",
        "id": 262728384,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637860754
    },
    {
        "content": "<p>I'm out of time for the day but for the record I think the rescaling approach will work nicely for matrices taking values in <code>ℝ</code> but seems to be awkward otherwise because we cannot scale an element by an absolute value or norm.</p>",
        "id": 262730766,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637862924
    }
]