[
    {
        "content": "<p>I have just noticed that some definitions around <code>char_zero</code> and <code>char_p</code> seem to assume that the base type is an appropriately decorated <code>ring</code>, while the definitions make sense for <code>[add_monoid R]</code> <code>[has_one R]</code>. </p>\n<p>Is there a reason for assuming multiplication?  I imagine that this might be some \"historical artifact\", arising from the fact that there was no action of the natural numbers on an <code>add_monoid_with 1</code>.</p>\n<p>If this is the case, then it might make sense to refactor and weaken the hypotheses.</p>\n<p>If there is a deeper reason for assuming more than strictly needed, then I would be curious to know!</p>\n<p>Thanks!</p>",
        "id": 230905415,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616088368
    },
    {
        "content": "<p>First monoids with zero and now this! I don't see any reason why it shouldn't be generalised to add_monoids with 1, I'm pretty sure there's a map from the naturals to such a thing. However I am not so convinced that there is a mathematically sensible notion of \"characteristic\", e.g. we have these monoids like Z/nZ where everything bigger than n-1 stays at n-1, and just knowing the kernel of the map from nat into this ring doesn't really tell you the whole truth. On the other hand all the basic stuff will go through for add_groups with 1 where...wait...this is just the theory of the order of an element, right? We have this already. Maybe the correct thing to do is to refactor characteristic to just be the order of 1 in the add_comm_group?</p>",
        "id": 230906193,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616088662
    },
    {
        "content": "<p>Yes, this is what I would have thought as well...  For me, the characteristic of a add_monoid with 1 is the order of 1...</p>",
        "id": 230906698,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616088833
    },
    {
        "content": "<p>I agree. One problem is that there is currently no add_order_of although this is on my list of possible future PRs since by now I'm reasonably familiar with the order_of API. If I understand correctly, though, many proofs will have to be ported manually as [to_additive] doesn't translate nicely between g^n and n*g.  Is that understanding correct?</p>",
        "id": 230908854,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1616089622
    },
    {
        "content": "<p>Aargh! Yes that's right, and it's simply because of the order of the inputs.</p>",
        "id": 230908925,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616089648
    },
    {
        "content": "<p>Maybe the order of inputs issue can be overcome by using that they are both modules for nat?  I am talking without having experience, so I may be saying something very silly!</p>",
        "id": 230911040,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616090404
    },
    {
        "content": "<p>I don't think a non-commutative group is a nat-module because it doesn't satisffy <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>g</mi><mi>n</mi></msup><msup><mi>h</mi><mi>n</mi></msup><mo>=</mo><mo stretchy=\"false\">(</mo><mi>g</mi><mi>h</mi><msup><mo stretchy=\"false\">)</mo><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">g^nh^n=(gh)^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 230911184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616090450
    },
    {
        "content": "<p>Indeed, the nat-module structure is called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_comm_monoid.nat_module\">docs#add_comm_monoid.nat_module</a></p>",
        "id": 230911833,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616090669
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"317890\">Julian Külshammer</span> <a href=\"#narrow/stream/116395-maths/topic/char_zero/near/230908854\">said</a>:</p>\n<blockquote>\n<p>I agree. One problem is that there is currently no add_order_of although this is on my list of possible future PRs since by now I'm reasonably familiar with the order_of API. If I understand correctly, though, many proofs will have to be ported manually as [to_additive] doesn't translate nicely between g^n and n*g.  Is that understanding correct?</p>\n</blockquote>\n<p>Maybe a meta programmer can comment on how hard it would be to hardcode special support into <code>to_additive</code> for this specific situation (i.e. <code>pow</code> vs <code>nsmul</code>).</p>",
        "id": 230911877,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616090686
    },
    {
        "content": "<p>I was wondering if we can get by by introducing an auxiliary <code>nsmul'</code> abbreviation with its arguments swapped</p>",
        "id": 230911944,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616090717
    },
    {
        "content": "<p>Ah, as usual, I was thinking of commutative additive/multiplicative groups, I did not think about the fact that this would have to be defined across all groups, commutative or not.   Too bad!</p>",
        "id": 230920864,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616094245
    },
    {
        "content": "<p>I started <code>add_order_of</code> manually in <a href=\"https://github.com/leanprover-community/mathlib/issues/6770\">#6770</a>. If someone wants to stop me because it can be done via automation, let me know. It feels close to automatic, but occasionally tricky because you have to switch from right to left and leave the 1s in nat  untouched.</p>",
        "id": 231026865,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1616162510
    },
    {
        "content": "<p>The automation suggestion was to beef up <code>to_additive</code> so it relates <code>monoid.pow</code> to some new function <code>add_monoid.nat_action_on_the-right</code> where the variables are in the right order (note : I wouldn't have a clue how to do this but others here will) and then define order using this right action.</p>",
        "id": 231027439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616162759
    },
    {
        "content": "<p>I am trying to get the definition of characteristic to assume less than it currently does in <a href=\"https://github.com/leanprover-community/mathlib/issues/6765\">#6765</a>.  After fixing a few easy timeouts, I am now stuck.</p>\n<p>The problem file is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">perfection.lean</span>\n</code></pre></div>\n<p>and specifically line 287, that no longer compiles. <br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/09dbf4321bd3792bd0676c91ac81706b45d7b192/src/ring_theory/perfection.lean#L287\">https://github.com/leanprover-community/mathlib/blob/09dbf4321bd3792bd0676c91ac81706b45d7b192/src/ring_theory/perfection.lean#L287</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Why is this slow?</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">map_eq_map</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">p</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">p</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">φ</span> <span class=\"bp\">=</span> <span class=\"n\">perfection.map</span> <span class=\"n\">p</span> <span class=\"n\">φ</span> <span class=\"o\">:=</span>\n<span class=\"n\">hom_ext</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">p</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_map</span><span class=\"o\">,</span> <span class=\"n\">perfection.coeff_map</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>The \"-- Why is this slow?\" comment was already there.</p>\n<p>Git thinks that this was added by <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> .  If anyone could give a suggestion of how to speed this up, I would be very happy!</p>\n<p>Thanks!</p>",
        "id": 231444165,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616492987
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6800\">#6800</a> might be related</p>",
        "id": 231444288,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1616493047
    },
    {
        "content": "<p>So, the suggestion is simply that if I wait enough time, then the timeout disappears?</p>",
        "id": 231444395,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616493121
    },
    {
        "content": "<p>the suggestion is that after <a href=\"https://github.com/leanprover-community/mathlib/issues/6800\">#6800</a> gets merged the timeout should disappear</p>",
        "id": 231444471,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1616493154
    },
    {
        "content": "<p>You could just merge <a href=\"https://github.com/leanprover-community/mathlib/issues/6800\">#6800</a> to your branch to find out!</p>",
        "id": 231444498,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616493175
    },
    {
        "content": "<p>Typing </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">merge</span> <span class=\"n\">eric</span><span class=\"bp\">-</span><span class=\"n\">wieser</span><span class=\"bp\">/</span><span class=\"n\">subalgebra</span><span class=\"bp\">-</span><span class=\"n\">coe</span>\n</code></pre></div>\n<p>is what you are suggesting?  I am not so good with git, so this is really a silly question that is not leading anywhere else!</p>",
        "id": 231444572,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616493231
    },
    {
        "content": "<p>Literally that does not work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"o\">(</span><span class=\"n\">adomani_weaken_chap_p</span><span class=\"o\">)</span><span class=\"bp\">$</span> <span class=\"n\">git</span> <span class=\"n\">merge</span> <span class=\"n\">eric</span><span class=\"bp\">-</span><span class=\"n\">wieser</span><span class=\"bp\">/</span><span class=\"n\">subalgebra</span><span class=\"bp\">-</span><span class=\"n\">coe</span>\n<span class=\"n\">merge</span><span class=\"o\">:</span> <span class=\"n\">eric</span><span class=\"bp\">-</span><span class=\"n\">wieser</span><span class=\"bp\">/</span><span class=\"n\">subalgebra</span><span class=\"bp\">-</span><span class=\"n\">coe</span> <span class=\"bp\">-</span> <span class=\"n\">not</span> <span class=\"n\">something</span> <span class=\"n\">we</span> <span class=\"n\">can</span> <span class=\"n\">merge</span>\n</code></pre></div>",
        "id": 231444806,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616493364
    },
    {
        "content": "<p>try <code>git fetch origin</code> first</p>",
        "id": 231444934,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1616493456
    },
    {
        "content": "<p>and then <code>git merge origin/eric-wieser/subalgebra-coe</code></p>",
        "id": 231445014,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1616493488
    },
    {
        "content": "<p>Kenny, thanks: The merging worked!</p>\n<p>Now to see if it fixes the timeout!</p>",
        "id": 231445082,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616493549
    },
    {
        "content": "<p><code>fetch</code> made my copy of <code>master</code> aware of another branch?  is this why this worked?</p>",
        "id": 231445291,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616493652
    },
    {
        "content": "<p>It made your local clone of the repository aware of the new branches. (I guess this is what you meant)</p>",
        "id": 231445748,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1616493887
    },
    {
        "content": "<p>Ruben, thanks!  you said more correctly what I had in a confused state in my mind!</p>",
        "id": 231445994,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616494012
    },
    {
        "content": "<p>Note that you might be able to speed up the rebuild on your local machine by running <code>leanproject get-cache --rev origin/eric-wieser/subalgebra-coe</code></p>",
        "id": 231450478,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616496449
    },
    {
        "content": "<p><code>leanproject</code> seems to not like <code>--rev</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"o\">(</span><span class=\"n\">adomani_weaken_chap_p</span><span class=\"o\">)</span><span class=\"bp\">$</span> <span class=\"n\">leanproject</span> <span class=\"n\">get</span><span class=\"bp\">-</span><span class=\"n\">cache</span> <span class=\"c1\">--rev origin/eric-wieser/subalgebra-coe</span>\n<span class=\"n\">Usage</span><span class=\"o\">:</span> <span class=\"n\">leanproject</span> <span class=\"n\">get</span><span class=\"bp\">-</span><span class=\"n\">cache</span> <span class=\"o\">[</span><span class=\"n\">OPTIONS</span><span class=\"o\">]</span>\n<span class=\"n\">Try</span> <span class=\"bp\">'</span><span class=\"n\">leanproject</span> <span class=\"n\">get</span><span class=\"bp\">-</span><span class=\"n\">cache</span> <span class=\"bp\">-</span><span class=\"n\">h'</span> <span class=\"n\">for</span> <span class=\"n\">help.</span>\n\n<span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">option</span><span class=\"o\">:</span> <span class=\"c1\">--rev</span>\n</code></pre></div>",
        "id": 231467436,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616505243
    },
    {
        "content": "<p>Do you have the latest version?</p>",
        "id": 231467558,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616505295
    },
    {
        "content": "<p>However, when I ask Lean to make the single file <code>ring_theory/perfection.lean</code>, it does it without problems.  However, when I open it with VSCode, it gives the timeout.</p>\n<p>I will wait to see what happens with CI...</p>",
        "id": 231467584,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616505303
    },
    {
        "content": "<p>which version of leanproject are you on? I've had no problems with --rev, I usually put <code>--rev HEAD~1</code> or something.</p>",
        "id": 231467591,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616505305
    },
    {
        "content": "<p>Johan, how do I find out which version of <code>leanproject</code> do I have?</p>",
        "id": 231467652,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616505329
    },
    {
        "content": "<p><code>leanproject --version</code></p>",
        "id": 231467685,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616505340
    },
    {
        "content": "<p><code>leanproject --help</code> tells you all the options</p>",
        "id": 231467744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616505362
    },
    {
        "content": "<p>(adomani_weaken_chap_p)$ leanproject --version<br>\nleanproject, version 0.0.9</p>",
        "id": 231467817,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616505375
    },
    {
        "content": "<p>you need to get the latest version. We're on 1.0.0 now and it works great.</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>$ leanproject get-cache --help\nUsage: leanproject get-cache [OPTIONS]\n\n  Restore cached olean files.\n\nOptions:\n  --force     Get cache even if the repository is dirty.\n  --rev TEXT  A git sha.\n  -h, --help  Show this message and exit.\nbuzzard@bob:~$\n</code></pre></div>",
        "id": 231467892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616505406
    },
    {
        "content": "<p>ok, I will try to upgrade, then</p>",
        "id": 231468000,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616505458
    },
    {
        "content": "<p>1.0.0 has been stable for a long time and has I think dealt with every issue which people threw at Patrick.</p>",
        "id": 231468093,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616505486
    },
    {
        "content": "<p>Is this what I should do?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">python3</span> <span class=\"bp\">-</span><span class=\"n\">m</span> <span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"c1\">--user pipx</span>\n<span class=\"n\">python3</span> <span class=\"bp\">-</span><span class=\"n\">m</span> <span class=\"n\">pipx</span> <span class=\"n\">ensurepath</span>\n<span class=\"n\">source</span> <span class=\"bp\">~/.</span><span class=\"n\">profile</span>\n<span class=\"n\">pipx</span> <span class=\"n\">install</span> <span class=\"n\">mathlibtools</span>\n</code></pre></div>",
        "id": 231469034,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616505869
    },
    {
        "content": "<p>(found here:<br>\n<a href=\"https://leanprover-community.github.io/install/linux.html\">https://leanprover-community.github.io/install/linux.html</a><br>\n)</p>",
        "id": 231469055,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616505879
    },
    {
        "content": "<p>You shouldn't need all of that. Probably <code>pipx upgrade mathlibtools</code> is all you need.</p>",
        "id": 231469627,
        "sender_full_name": "Julian Berman",
        "timestamp": 1616506105
    },
    {
        "content": "<p><code>pipx upgrade mathlibtools</code> works for me</p>",
        "id": 231469638,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1616506111
    },
    {
        "content": "<p>Julian and Riccardo: thank you both very much!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"o\">(</span><span class=\"n\">adomani_weaken_chap_p</span><span class=\"o\">)</span><span class=\"bp\">$</span> <span class=\"n\">pipx</span> <span class=\"n\">upgrade</span> <span class=\"n\">mathlibtools</span>\n<span class=\"n\">upgraded</span> <span class=\"n\">package</span> <span class=\"n\">mathlibtools</span> <span class=\"k\">from</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">9</span> <span class=\"n\">to</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">location</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">damiano</span><span class=\"bp\">/.</span><span class=\"kn\">local</span><span class=\"bp\">/</span><span class=\"n\">pipx</span><span class=\"bp\">/</span><span class=\"n\">venvs</span><span class=\"bp\">/</span><span class=\"n\">mathlibtools</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">adomani_weaken_chap_p</span><span class=\"o\">)</span><span class=\"bp\">$</span> <span class=\"n\">leanproject</span> <span class=\"c1\">--version</span>\n<span class=\"n\">leanproject</span><span class=\"o\">,</span> <span class=\"n\">version</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 231469786,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616506168
    },
    {
        "content": "<p>and now it learned <code>rev</code>!</p>",
        "id": 231469907,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616506214
    },
    {
        "content": "<p>Eric's PR is getting merged, but it looks like this may not speed up the processing of the lemma in <code>ring_theory/perfection</code> enough to prevent the timeout, unfortunately.</p>\n<p>I will wait until it is actually merged, but on my machine it still times out.</p>",
        "id": 231473532,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616507592
    },
    {
        "content": "<p>Adding <code>@</code> and filling in a few underscores speeds up the processing to a place where, on my machine, it no longer times out on this lemma!</p>\n<p>The result is not really pretty, especially since this happens on the <em>statement</em> of the lemma: if anyone has any alternative, I would be happy to hear about it!</p>\n<p>This now elaborates in 2.33s, instead of timing out (on my machine):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Why is this slow?</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">map_eq_map</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">map</span> <span class=\"n\">p</span> <span class=\"n\">_inst_1</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span> <span class=\"o\">(</span><span class=\"n\">ring.perfection</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">S</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">p</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">p</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">φ</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">@</span><span class=\"n\">perfection.map</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span> <span class=\"n\">p</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_3</span> <span class=\"n\">S</span> <span class=\"n\">_inst_7</span> <span class=\"n\">_inst_8</span> <span class=\"n\">φ</span> <span class=\"o\">:=</span>\n<span class=\"n\">hom_ext</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">p</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_map</span><span class=\"o\">,</span> <span class=\"n\">perfection.coeff_map</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>(for those who may take a look at this, the <code>S</code> lost in the sea of underscores in the lhs is what gave me the impression of the largest relative speedup.  This might have been an artifact of how I was filling in the underscores, though, not of anything actually having to do with the processing.)</p>",
        "id": 231480288,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616510144
    },
    {
        "content": "<p>Do you need to fill in the <code>_inst_n</code>s?</p>",
        "id": 231480450,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616510209
    },
    {
        "content": "<p>Because those are extremely brittle from a maintenance point of view. (Should we lint against them?)</p>",
        "id": 231480519,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616510237
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rg</span> <span class=\"s2\">\"_inst_\"</span> <span class=\"bp\">|</span> <span class=\"n\">wc</span> <span class=\"bp\">-</span><span class=\"n\">l</span>\n<span class=\"mi\">37</span>\n</code></pre></div>",
        "id": 231480591,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616510274
    },
    {
        "content": "<p>I think that we should try to keep the number there</p>",
        "id": 231480722,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616510315
    },
    {
        "content": "<p>I probably do not, in fact, I got it to avoid the time out without the <code>@</code> on the rhs, but it made it faster to add it there.</p>",
        "id": 231480731,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616510322
    },
    {
        "content": "<p>I will profile it with and without the <code>inst</code> and report!</p>",
        "id": 231480789,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616510345
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/char_zero/near/231480591\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rg</span> <span class=\"s2\">\"_inst_\"</span> <span class=\"bp\">|</span> <span class=\"n\">wc</span> <span class=\"bp\">-</span><span class=\"n\">l</span>\n<span class=\"mi\">37</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Many of them are in meta code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">e_inst_type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">expr.const</span> <span class=\"n\">class_nm</span> <span class=\"n\">raw_levels</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mk_app</span> <span class=\"n\">args</span>\n</code></pre></div>",
        "id": 231480887,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616510382
    },
    {
        "content": "<p>I count 14 explicit references.</p>",
        "id": 231481025,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616510424
    },
    {
        "content": "<p>without the <code>_inst_</code> it elaborates in 2.54s and, to be honest, this variation may not have anything to do with the search for instances: the profiler gives different results in different runs anyway.</p>\n<p>so, I should remove the <code>inst</code>s, right?</p>",
        "id": 231481146,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616510459
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rg</span> <span class=\"s2\">\"</span><span class=\"err\">\\</span><span class=\"s2\">b_inst_\"</span> <span class=\"bp\">|</span> <span class=\"n\">wc</span> <span class=\"bp\">-</span><span class=\"n\">l</span>\n<span class=\"mi\">19</span>\n</code></pre></div>\n<p>is maybe a more honest count</p>",
        "id": 231481294,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616510521
    },
    {
        "content": "<p>This is what the lemma looks like now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Why is this slow?</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">map_eq_map</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">map</span> <span class=\"n\">p</span> <span class=\"n\">_</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ring.perfection</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">S</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">p</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">p</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">φ</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">@</span><span class=\"n\">perfection.map</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">p</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">S</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">φ</span> <span class=\"o\">:=</span>\n<span class=\"n\">hom_ext</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">p</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_map</span><span class=\"o\">,</span> <span class=\"n\">perfection.coeff_map</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 231481337,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616510525
    },
    {
        "content": "<p>yeah, if that doesn't time out, I would leave it like that</p>",
        "id": 231481429,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616510554
    },
    {
        "content": "<p>ok, in any case, so far, timing out has been on my machine alone, but a lemma that processes in under 3s should not give CI problems... right?  <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 231481549,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616510601
    },
    {
        "content": "<p>and hopefully <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> will have another \"speed up mathlib\" marathon in the future, and figure out the real cause of why this is slow</p>",
        "id": 231481618,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616510623
    },
    {
        "content": "<p>my, very limited, experience is that Lean takes a lot of time to figure out implicit domains/codomains of implicit maps.  this was at least my rationale for getting the <code>S</code> in the right place in the code above.  for some mysterious reason, this actually worked...</p>",
        "id": 231482021,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616510768
    },
    {
        "content": "<p>and it seems that the statement that Kevin made chronologically just before mine on a different topic supports this!</p>",
        "id": 231482255,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616510863
    },
    {
        "content": "<p>Are there any underscores you can replace with type annotations?</p>",
        "id": 231486171,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616512154
    },
    {
        "content": "<p>I can try: is that preferred to having a simple underscore?</p>",
        "id": 231486803,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616512382
    },
    {
        "content": "<p>I'd say it's preferred to using <code>@</code></p>",
        "id": 231486874,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616512409
    },
    {
        "content": "<p>Ah, I think that the initial formulation had no underscores and filled in all the needed underscores.  I introduced the <code>@</code> and the underscores to be able to fill in arguments that were implicit before.</p>",
        "id": 231487306,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616512497
    },
    {
        "content": "<p>This was the statement of the lemma before it started timing out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">map_eq_map</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">p</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">p</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">φ</span> <span class=\"bp\">=</span> <span class=\"n\">perfection.map</span> <span class=\"n\">p</span> <span class=\"n\">φ</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 231487510,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616512545
    },
    {
        "content": "<p>Wait, so that version doesn't time out?</p>",
        "id": 231487674,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616512585
    },
    {
        "content": "<p>Or do you mean, \"which started timing out\"</p>",
        "id": 231487803,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616512634
    },
    {
        "content": "<p>The last one used to be slow, but not timing out, before I introduced the changes in a different file.  Now, to get mathlib to build, this one times out and hence I introduced the <code>@</code> and the partially filled in underscores.</p>",
        "id": 231487810,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616512636
    },
    {
        "content": "<p>I wonder if for instance you can get away with just putting a <code>@</code> on the LHS or RHS but not both</p>",
        "id": 231487870,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616512662
    },
    {
        "content": "<p>Yes, just one side should be possible, but it gets progressively faster if I do it on both sides.</p>",
        "id": 231487963,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616512688
    },
    {
        "content": "<p>since I wanted to make sure that it would not time out, I went for the fastest!  an intermediate stage might also work, but right now I am trying to get CI to work at least once.</p>",
        "id": 231488048,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616512718
    },
    {
        "content": "<p>CI seems to be making progress: it went past the stage of building mathlib and is now linting/testing!</p>",
        "id": 231488281,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616512804
    },
    {
        "content": "<p>profiling on my machine, suggests a similar processing time for the lemma below as for the more expanded one above:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">map_eq_map</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">map</span> <span class=\"n\">p</span> <span class=\"n\">_</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">S</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">p</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">p</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">φ</span> <span class=\"bp\">=</span>\n  <span class=\"n\">perfection.map</span> <span class=\"n\">p</span> <span class=\"n\">φ</span> <span class=\"o\">:=</span>\n<span class=\"n\">hom_ext</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">p</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_map</span><span class=\"o\">,</span> <span class=\"n\">perfection.coeff_map</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>(no <code>@</code> in the RHS, only <code>S</code> as previously implicit argument, now explicitly given.  If I replace <code>S</code> by an underscore, leaving the <code>@</code> and the other underscores, Lean still seems to make the processing work, but barely.)</p>\n<p>Removing the <code>@</code> in the LHS and keeping the one on the RHS times out.  Thus, the explicit <code>S</code> seems to be helpful, but simply putting an <code>@</code> seems to be already giving a good amount of hints to Lean.</p>",
        "id": 231490516,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616513568
    },
    {
        "content": "<p>The fully <code>@</code>-expanded version was accepted by CI, modulo the dependent <a href=\"https://github.com/leanprover-community/mathlib/issues/6800\">#6800</a>!  I am not sure whether <a href=\"https://github.com/leanprover-community/mathlib/issues/6800\">#6800</a> is actually needed for the speed up, but it is not so important.</p>\n<p>I will now try to push the \"minimally\" <code>@</code>-expanded version and see if CI still manages to work with it.</p>",
        "id": 231494494,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616514933
    },
    {
        "content": "<p>The shorter version with a single <code>@</code> works!</p>\n<p>I am also trying to remove the merged PR.</p>",
        "id": 231505667,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616518824
    },
    {
        "content": "<p>The unentangled version also builds!  So, once <a href=\"https://github.com/leanprover-community/mathlib/issues/6800\">#6800</a> merges, I might try to see if removing the <code>@</code> still gives a time out or not, but at the moment, PR <a href=\"https://github.com/leanprover-community/mathlib/issues/6765\">#6765</a> builds independently!</p>",
        "id": 231520724,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616524522
    },
    {
        "content": "<p>I'm getting a timeout in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/perfection_map.map_eq_map\">docs#perfection_map.map_eq_map</a>` again in <a href=\"https://github.com/leanprover-community/mathlib/issues/6786\">#6786</a>.</p>",
        "id": 238099978,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620632911
    },
    {
        "content": "<p>This is in <code>ring_theory.perfection</code>? I see timeouts earlier, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">pth_root_frobenius</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">pth_root</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"n\">_</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ring_hom.id</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n<span class=\"n\">ring_hom.ext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ring_hom.comp_apply</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ring_hom.id_apply</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">coeff_pth_root</span><span class=\"o\">,</span> <span class=\"c1\">-- all fast</span>\n  <span class=\"n\">convert</span> <span class=\"n\">coeff_frobenius</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"c1\">-- slow (several seconds), as is `rw coeff_frobenius` and `apply coeff_frobenius`</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 238100844,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620633447
    },
    {
        "content": "<p>Have you configured vs-code with a different timeout to CI?</p>",
        "id": 238100973,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620633521
    },
    {
        "content": "<p>(or are you on a diffferent commit / cache?)</p>",
        "id": 238100985,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620633536
    },
    {
        "content": "<p>almost certainly, because I don't normally think about this sort of thing</p>",
        "id": 238101018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620633558
    },
    {
        "content": "<p>I'm just saying \"stuff in this file is surprisingly slow, here's another example\"</p>",
        "id": 238101061,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620633583
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">pth_root_frobenius</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">pth_root</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"n\">_</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ring_hom.id</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n<span class=\"n\">ring_hom.ext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ring_hom.comp_apply</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ring_hom.id_apply</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">coeff_pth_root</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">coeff_frobenius</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"c1\">-- quick</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Unification is going down a rabbit-hole maybe. If you put pp.all on you can see the terms are huge. Removing the x takes elaboration up to 5.73 seconds from 273ms</p>",
        "id": 238101280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620633668
    },
    {
        "content": "<p><del>The fix there being that you told lean what <code>x</code> was I assume</del></p>",
        "id": 238101403,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620633742
    },
    {
        "content": "<p>If you look at where the orange bars get stuck you can see the slow lemmas. The next one is <code>frobenius_pth_root</code>, and then <code>of</code> and then <code>map_eq_map</code></p>",
        "id": 238101717,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620633916
    },
    {
        "content": "<p>Yeah, good find</p>",
        "id": 238101772,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620633950
    },
    {
        "content": "<p>Relatedly, <code>map</code> is a weird definition because it takes a <code>perfection_map X Y</code> argument which it ignores and uses only to infer X and Y</p>",
        "id": 238101883,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620634000
    },
    {
        "content": "<p>I'm afraid I have to clock off now -- marking :-/</p>",
        "id": 238102051,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620634104
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">frobenius_pth_root</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"n\">_</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">pth_root</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ring_hom.id</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- slow</span>\n</code></pre></div>",
        "id": 238102221,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620634203
    },
    {
        "content": "<p>Even this is slow. If even this is slow then you can see something's wrong.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">frobenius_pth_root</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"o\">(</span><span class=\"n\">ring.perfection</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">pth_root</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ring_hom.id</span> <span class=\"o\">(</span><span class=\"n\">ring.perfection</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 238102341,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620634284
    },
    {
        "content": "<p>I guess you're marking Kenny's old code then since you're still here?</p>",
        "id": 238102393,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620634322
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.class_instances</span> <span class=\"n\">true</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">frobenius_pth_root</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"o\">(</span><span class=\"n\">ring.perfection</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">pth_root</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ring_hom.id</span> <span class=\"o\">(</span><span class=\"n\">ring.perfection</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>generates 2749 lines of debugging output.</p>",
        "id": 238102523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620634398
    },
    {
        "content": "<p>Also, <code>set_option profiler true</code> doesn't seem to notice that its slow</p>",
        "id": 238102540,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620634418
    },
    {
        "content": "<p>It concedes that the longest step took 51ms</p>",
        "id": 238102647,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620634470
    },
    {
        "content": "<p><a href=\"https://gist.github.com/kbuzzard/226abffabe7ee22f464977128b9157ed\">https://gist.github.com/kbuzzard/226abffabe7ee22f464977128b9157ed</a></p>",
        "id": 238102688,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620634508
    },
    {
        "content": "<p>OK I really am going now.</p>",
        "id": 238102697,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620634515
    },
    {
        "content": "<p>The story of <code>nonempty nat</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_58</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">unit_interval.nonempty</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_58</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">affine_map.nonempty</span> <span class=\"bp\">?</span><span class=\"n\">x_66</span> <span class=\"bp\">?</span><span class=\"n\">x_67</span> <span class=\"bp\">?</span><span class=\"n\">x_68</span> <span class=\"bp\">?</span><span class=\"n\">x_69</span> <span class=\"bp\">?</span><span class=\"n\">x_70</span> <span class=\"bp\">?</span><span class=\"n\">x_71</span> <span class=\"bp\">?</span><span class=\"n\">x_72</span> <span class=\"bp\">?</span><span class=\"n\">x_73</span> <span class=\"bp\">?</span><span class=\"n\">x_74</span> <span class=\"bp\">?</span><span class=\"n\">x_75</span> <span class=\"bp\">?</span><span class=\"n\">x_76</span> <span class=\"bp\">?</span><span class=\"n\">x_77</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_58</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">quiver.rooted_connected.nonempty_path</span> <span class=\"bp\">?</span><span class=\"n\">x_78</span> <span class=\"bp\">?</span><span class=\"n\">x_79</span> <span class=\"bp\">?</span><span class=\"n\">x_80</span> <span class=\"bp\">?</span><span class=\"n\">x_81</span> <span class=\"bp\">?</span><span class=\"n\">x_82</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_58</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">x_84.nonempty_sets</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_58</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">finset.has_insert.insert.nonempty</span> <span class=\"bp\">?</span><span class=\"n\">x_85</span> <span class=\"bp\">?</span><span class=\"n\">x_86</span> <span class=\"bp\">?</span><span class=\"n\">x_87</span> <span class=\"bp\">?</span><span class=\"n\">x_88</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_58</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">set.nonempty_Iio_subtype</span> <span class=\"bp\">?</span><span class=\"n\">x_89</span> <span class=\"bp\">?</span><span class=\"n\">x_90</span> <span class=\"bp\">?</span><span class=\"n\">x_91</span> <span class=\"bp\">?</span><span class=\"n\">x_92</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_58</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">set.nonempty_Ioi_subtype</span> <span class=\"bp\">?</span><span class=\"n\">x_93</span> <span class=\"bp\">?</span><span class=\"n\">x_94</span> <span class=\"bp\">?</span><span class=\"n\">x_95</span> <span class=\"bp\">?</span><span class=\"n\">x_96</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_58</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">set.nonempty_Iic_subtype</span> <span class=\"bp\">?</span><span class=\"n\">x_97</span> <span class=\"bp\">?</span><span class=\"n\">x_98</span> <span class=\"bp\">?</span><span class=\"n\">x_99</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_58</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">set.nonempty_Ici_subtype</span> <span class=\"bp\">?</span><span class=\"n\">x_100</span> <span class=\"bp\">?</span><span class=\"n\">x_101</span> <span class=\"bp\">?</span><span class=\"n\">x_102</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_58</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">set.range.nonempty</span> <span class=\"bp\">?</span><span class=\"n\">x_103</span> <span class=\"bp\">?</span><span class=\"n\">x_104</span> <span class=\"bp\">?</span><span class=\"n\">x_105</span> <span class=\"bp\">?</span><span class=\"n\">x_106</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_58</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">set.image.nonempty</span> <span class=\"bp\">?</span><span class=\"n\">x_107</span> <span class=\"bp\">?</span><span class=\"n\">x_108</span> <span class=\"bp\">?</span><span class=\"n\">x_109</span> <span class=\"bp\">?</span><span class=\"n\">x_110</span> <span class=\"bp\">?</span><span class=\"n\">x_111</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_58</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">set.has_insert.insert.nonempty</span> <span class=\"bp\">?</span><span class=\"n\">x_112</span> <span class=\"bp\">?</span><span class=\"n\">x_113</span> <span class=\"bp\">?</span><span class=\"n\">x_114</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_58</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">set.univ.nonempty</span> <span class=\"bp\">?</span><span class=\"n\">x_115</span> <span class=\"bp\">?</span><span class=\"n\">x_116</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_58</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">nonempty_lt</span> <span class=\"bp\">?</span><span class=\"n\">x_117</span> <span class=\"bp\">?</span><span class=\"n\">x_118</span> <span class=\"bp\">?</span><span class=\"n\">x_119</span> <span class=\"bp\">?</span><span class=\"n\">x_120</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_58</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">nonempty_gt</span> <span class=\"bp\">?</span><span class=\"n\">x_121</span> <span class=\"bp\">?</span><span class=\"n\">x_122</span> <span class=\"bp\">?</span><span class=\"n\">x_123</span> <span class=\"bp\">?</span><span class=\"n\">x_124</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_58</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">order_dual.nonempty</span> <span class=\"bp\">?</span><span class=\"n\">x_125</span> <span class=\"bp\">?</span><span class=\"n\">x_126</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_58</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">prod.nonempty</span> <span class=\"bp\">?</span><span class=\"n\">x_127</span> <span class=\"bp\">?</span><span class=\"n\">x_128</span> <span class=\"bp\">?</span><span class=\"n\">x_129</span> <span class=\"bp\">?</span><span class=\"n\">x_130</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_58</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">add_torsor.nonempty</span> <span class=\"bp\">?</span><span class=\"n\">x_131</span> <span class=\"bp\">?</span><span class=\"n\">x_132</span> <span class=\"bp\">?</span><span class=\"n\">x_133</span> <span class=\"bp\">?</span><span class=\"n\">x_134</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_134</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">add_torsor</span> <span class=\"bp\">?</span><span class=\"n\">x_131</span> <span class=\"n\">ℕ</span> <span class=\"bp\">?</span><span class=\"n\">x_133</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">affine_map.add_torsor</span> <span class=\"bp\">?</span><span class=\"n\">x_135</span> <span class=\"bp\">?</span><span class=\"n\">x_136</span> <span class=\"bp\">?</span><span class=\"n\">x_137</span> <span class=\"bp\">?</span><span class=\"n\">x_138</span> <span class=\"bp\">?</span><span class=\"n\">x_139</span> <span class=\"bp\">?</span><span class=\"n\">x_140</span> <span class=\"bp\">?</span><span class=\"n\">x_141</span> <span class=\"bp\">?</span><span class=\"n\">x_142</span> <span class=\"bp\">?</span><span class=\"n\">x_143</span> <span class=\"bp\">?</span><span class=\"n\">x_144</span> <span class=\"bp\">?</span><span class=\"n\">x_145</span> <span class=\"bp\">?</span><span class=\"n\">x_146</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_134</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">add_torsor</span> <span class=\"bp\">?</span><span class=\"n\">x_131</span> <span class=\"n\">ℕ</span> <span class=\"bp\">?</span><span class=\"n\">x_133</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">pi.add_torsor</span> <span class=\"bp\">?</span><span class=\"n\">x_147</span> <span class=\"bp\">?</span><span class=\"n\">x_148</span> <span class=\"bp\">?</span><span class=\"n\">x_149</span> <span class=\"bp\">?</span><span class=\"n\">x_150</span> <span class=\"bp\">?</span><span class=\"n\">x_151</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_134</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">add_torsor</span> <span class=\"bp\">?</span><span class=\"n\">x_131</span> <span class=\"n\">ℕ</span> <span class=\"bp\">?</span><span class=\"n\">x_133</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">prod.add_torsor</span> <span class=\"bp\">?</span><span class=\"n\">x_152</span> <span class=\"bp\">?</span><span class=\"n\">x_153</span> <span class=\"bp\">?</span><span class=\"n\">x_154</span> <span class=\"bp\">?</span><span class=\"n\">x_155</span> <span class=\"bp\">?</span><span class=\"n\">x_156</span> <span class=\"bp\">?</span><span class=\"n\">x_157</span> <span class=\"bp\">?</span><span class=\"n\">x_158</span> <span class=\"bp\">?</span><span class=\"n\">x_159</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_134</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">add_torsor</span> <span class=\"bp\">?</span><span class=\"n\">x_131</span> <span class=\"n\">ℕ</span> <span class=\"bp\">?</span><span class=\"n\">x_133</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">add_group_is_add_torsor</span> <span class=\"bp\">?</span><span class=\"n\">x_160</span> <span class=\"bp\">?</span><span class=\"n\">x_161</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_161</span> <span class=\"o\">:</span> <span class=\"n\">add_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">power_series.add_group</span> <span class=\"bp\">?</span><span class=\"n\">x_162</span> <span class=\"bp\">?</span><span class=\"n\">x_163</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_161</span> <span class=\"o\">:</span> <span class=\"n\">add_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">mv_power_series.add_group</span> <span class=\"bp\">?</span><span class=\"n\">x_164</span> <span class=\"bp\">?</span><span class=\"n\">x_165</span> <span class=\"bp\">?</span><span class=\"n\">x_166</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_161</span> <span class=\"o\">:</span> <span class=\"n\">add_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">add_monoid_algebra.add_group</span> <span class=\"bp\">?</span><span class=\"n\">x_167</span> <span class=\"bp\">?</span><span class=\"n\">x_168</span> <span class=\"bp\">?</span><span class=\"n\">x_169</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_161</span> <span class=\"o\">:</span> <span class=\"n\">add_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">monoid_algebra.add_group</span> <span class=\"bp\">?</span><span class=\"n\">x_170</span> <span class=\"bp\">?</span><span class=\"n\">x_171</span> <span class=\"bp\">?</span><span class=\"n\">x_172</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_161</span> <span class=\"o\">:</span> <span class=\"n\">add_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">quotient_add_group.add_group</span> <span class=\"bp\">?</span><span class=\"n\">x_173</span> <span class=\"bp\">?</span><span class=\"n\">x_174</span> <span class=\"bp\">?</span><span class=\"n\">x_175</span> <span class=\"bp\">?</span><span class=\"n\">x_176</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_161</span> <span class=\"o\">:</span> <span class=\"n\">add_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">real.add_group</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_161</span> <span class=\"o\">:</span> <span class=\"n\">add_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">dfinsupp.add_group</span> <span class=\"bp\">?</span><span class=\"n\">x_177</span> <span class=\"bp\">?</span><span class=\"n\">x_178</span> <span class=\"bp\">?</span><span class=\"n\">x_179</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_161</span> <span class=\"o\">:</span> <span class=\"n\">add_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">finsupp.add_group</span> <span class=\"bp\">?</span><span class=\"n\">x_180</span> <span class=\"bp\">?</span><span class=\"n\">x_181</span> <span class=\"bp\">?</span><span class=\"n\">x_182</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_161</span> <span class=\"o\">:</span> <span class=\"n\">add_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">x_185.add_group</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_161</span> <span class=\"o\">:</span> <span class=\"n\">add_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">matrix.add_group</span> <span class=\"bp\">?</span><span class=\"n\">x_186</span> <span class=\"bp\">?</span><span class=\"n\">x_187</span> <span class=\"bp\">?</span><span class=\"n\">x_188</span> <span class=\"bp\">?</span><span class=\"n\">x_189</span> <span class=\"bp\">?</span><span class=\"n\">x_190</span> <span class=\"bp\">?</span><span class=\"n\">x_191</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_161</span> <span class=\"o\">:</span> <span class=\"n\">add_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">dmatrix.add_group</span> <span class=\"bp\">?</span><span class=\"n\">x_192</span> <span class=\"bp\">?</span><span class=\"n\">x_193</span> <span class=\"bp\">?</span><span class=\"n\">x_194</span> <span class=\"bp\">?</span><span class=\"n\">x_195</span> <span class=\"bp\">?</span><span class=\"n\">x_196</span> <span class=\"bp\">?</span><span class=\"n\">x_197</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_161</span> <span class=\"o\">:</span> <span class=\"n\">add_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">x_200.to_add_group</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_161</span> <span class=\"o\">:</span> <span class=\"n\">add_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">pi.add_group</span> <span class=\"bp\">?</span><span class=\"n\">x_201</span> <span class=\"bp\">?</span><span class=\"n\">x_202</span> <span class=\"bp\">?</span><span class=\"n\">x_203</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_161</span> <span class=\"o\">:</span> <span class=\"n\">add_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">rat.add_group</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_161</span> <span class=\"o\">:</span> <span class=\"n\">add_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">prod.add_group</span> <span class=\"bp\">?</span><span class=\"n\">x_204</span> <span class=\"bp\">?</span><span class=\"n\">x_205</span> <span class=\"bp\">?</span><span class=\"n\">x_206</span> <span class=\"bp\">?</span><span class=\"n\">x_207</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_161</span> <span class=\"o\">:</span> <span class=\"n\">add_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">opposite.add_group</span> <span class=\"bp\">?</span><span class=\"n\">x_208</span> <span class=\"bp\">?</span><span class=\"n\">x_209</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_161</span> <span class=\"o\">:</span> <span class=\"n\">add_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">additive.add_group</span> <span class=\"bp\">?</span><span class=\"n\">x_210</span> <span class=\"bp\">?</span><span class=\"n\">x_211</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_161</span> <span class=\"o\">:</span> <span class=\"n\">add_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">add_units.add_group</span> <span class=\"bp\">?</span><span class=\"n\">x_212</span> <span class=\"bp\">?</span><span class=\"n\">x_213</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_161</span> <span class=\"o\">:</span> <span class=\"n\">add_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group</span> <span class=\"bp\">?</span><span class=\"n\">x_214</span> <span class=\"bp\">?</span><span class=\"n\">x_215</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_215</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">real.angle.angle.add_comm_group</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_215</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">formal_multilinear_series.add_comm_group</span> <span class=\"bp\">?</span><span class=\"n\">x_216</span> <span class=\"bp\">?</span><span class=\"n\">x_217</span> <span class=\"bp\">?</span><span class=\"n\">x_218</span> <span class=\"bp\">?</span><span class=\"n\">x_219</span> <span class=\"bp\">?</span><span class=\"n\">x_220</span> <span class=\"bp\">?</span><span class=\"n\">x_221</span> <span class=\"bp\">?</span><span class=\"n\">x_222</span> <span class=\"bp\">?</span><span class=\"n\">x_223</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_215</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">power_series.add_comm_group</span> <span class=\"bp\">?</span><span class=\"n\">x_224</span> <span class=\"bp\">?</span><span class=\"n\">x_225</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_215</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">mv_power_series.add_comm_group</span> <span class=\"bp\">?</span><span class=\"n\">x_226</span> <span class=\"bp\">?</span><span class=\"n\">x_227</span> <span class=\"bp\">?</span><span class=\"n\">x_228</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_215</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">continuous_multilinear_map.add_comm_group</span> <span class=\"bp\">?</span><span class=\"n\">x_229</span> <span class=\"bp\">?</span><span class=\"n\">x_230</span> <span class=\"bp\">?</span><span class=\"n\">x_231</span> <span class=\"bp\">?</span><span class=\"n\">x_232</span> <span class=\"bp\">?</span><span class=\"n\">x_233</span> <span class=\"bp\">?</span><span class=\"n\">x_234</span> <span class=\"bp\">?</span><span class=\"n\">x_235</span> <span class=\"bp\">?</span><span class=\"n\">x_236</span> <span class=\"bp\">?</span><span class=\"n\">x_237</span> <span class=\"bp\">?</span><span class=\"n\">x_238</span> <span class=\"bp\">?</span><span class=\"n\">x_239</span>\n  <span class=\"bp\">?</span><span class=\"n\">x_240</span>\n  <span class=\"bp\">?</span><span class=\"n\">x_241</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_215</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">normed_group_hom.add_comm_group</span> <span class=\"bp\">?</span><span class=\"n\">x_242</span> <span class=\"bp\">?</span><span class=\"n\">x_243</span> <span class=\"bp\">?</span><span class=\"n\">x_244</span> <span class=\"bp\">?</span><span class=\"n\">x_245</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_215</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">affine_map.add_comm_group</span> <span class=\"bp\">?</span><span class=\"n\">x_246</span> <span class=\"bp\">?</span><span class=\"n\">x_247</span> <span class=\"bp\">?</span><span class=\"n\">x_248</span> <span class=\"bp\">?</span><span class=\"n\">x_249</span> <span class=\"bp\">?</span><span class=\"n\">x_250</span> <span class=\"bp\">?</span><span class=\"n\">x_251</span> <span class=\"bp\">?</span><span class=\"n\">x_252</span> <span class=\"bp\">?</span><span class=\"n\">x_253</span> <span class=\"bp\">?</span><span class=\"n\">x_254</span> <span class=\"bp\">?</span><span class=\"n\">x_255</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_215</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">module.dual.add_comm_group</span> <span class=\"bp\">?</span><span class=\"n\">x_256</span> <span class=\"bp\">?</span><span class=\"n\">x_257</span> <span class=\"bp\">?</span><span class=\"n\">x_258</span> <span class=\"bp\">?</span><span class=\"n\">x_259</span> <span class=\"bp\">?</span><span class=\"n\">x_260</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_215</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">alternating_map.add_comm_group</span> <span class=\"bp\">?</span><span class=\"n\">x_261</span> <span class=\"bp\">?</span><span class=\"n\">x_262</span> <span class=\"bp\">?</span><span class=\"n\">x_263</span> <span class=\"bp\">?</span><span class=\"n\">x_264</span> <span class=\"bp\">?</span><span class=\"n\">x_265</span> <span class=\"bp\">?</span><span class=\"n\">x_266</span> <span class=\"bp\">?</span><span class=\"n\">x_267</span> <span class=\"bp\">?</span><span class=\"n\">x_268</span> <span class=\"bp\">?</span><span class=\"n\">x_269</span> <span class=\"bp\">?</span><span class=\"n\">x_270</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_215</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">multilinear_map.add_comm_group</span> <span class=\"bp\">?</span><span class=\"n\">x_271</span> <span class=\"bp\">?</span><span class=\"n\">x_272</span> <span class=\"bp\">?</span><span class=\"n\">x_273</span> <span class=\"bp\">?</span><span class=\"n\">x_274</span> <span class=\"bp\">?</span><span class=\"n\">x_275</span> <span class=\"bp\">?</span><span class=\"n\">x_276</span> <span class=\"bp\">?</span><span class=\"n\">x_277</span> <span class=\"bp\">?</span><span class=\"n\">x_278</span> <span class=\"bp\">?</span><span class=\"n\">x_279</span> <span class=\"bp\">?</span><span class=\"n\">x_280</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_215</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">punit.add_comm_group</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_215</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">continuous_linear_map.add_comm_group</span> <span class=\"bp\">?</span><span class=\"n\">x_281</span> <span class=\"bp\">?</span><span class=\"n\">x_282</span> <span class=\"bp\">?</span><span class=\"n\">x_283</span> <span class=\"bp\">?</span><span class=\"n\">x_284</span> <span class=\"bp\">?</span><span class=\"n\">x_285</span> <span class=\"bp\">?</span><span class=\"n\">x_286</span> <span class=\"bp\">?</span><span class=\"n\">x_287</span> <span class=\"bp\">?</span><span class=\"n\">x_288</span> <span class=\"bp\">?</span><span class=\"n\">x_289</span> <span class=\"bp\">?</span><span class=\"n\">x_290</span> <span class=\"bp\">?</span><span class=\"n\">x_291</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_215</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">quotient_add_group.add_comm_group</span> <span class=\"bp\">?</span><span class=\"n\">x_292</span> <span class=\"bp\">?</span><span class=\"n\">x_293</span> <span class=\"bp\">?</span><span class=\"n\">x_294</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_215</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">real.add_comm_group</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_215</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">restrict_scalars.add_comm_group</span> <span class=\"bp\">?</span><span class=\"n\">x_295</span> <span class=\"bp\">?</span><span class=\"n\">x_296</span> <span class=\"bp\">?</span><span class=\"n\">x_297</span> <span class=\"bp\">?</span><span class=\"n\">x_298</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_215</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">tensor_product.add_comm_group</span> <span class=\"bp\">?</span><span class=\"n\">x_299</span> <span class=\"bp\">?</span><span class=\"n\">x_300</span> <span class=\"bp\">?</span><span class=\"n\">x_301</span> <span class=\"bp\">?</span><span class=\"n\">x_302</span> <span class=\"bp\">?</span><span class=\"n\">x_303</span> <span class=\"bp\">?</span><span class=\"n\">x_304</span> <span class=\"bp\">?</span><span class=\"n\">x_305</span> <span class=\"bp\">?</span><span class=\"n\">x_306</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_215</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">submodule.quotient.add_comm_group</span> <span class=\"bp\">?</span><span class=\"n\">x_307</span> <span class=\"bp\">?</span><span class=\"n\">x_308</span> <span class=\"bp\">?</span><span class=\"n\">x_309</span> <span class=\"bp\">?</span><span class=\"n\">x_310</span> <span class=\"bp\">?</span><span class=\"n\">x_311</span> <span class=\"bp\">?</span><span class=\"n\">x_312</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_215</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">linear_map.add_comm_group</span> <span class=\"bp\">?</span><span class=\"n\">x_313</span> <span class=\"bp\">?</span><span class=\"n\">x_314</span> <span class=\"bp\">?</span><span class=\"n\">x_315</span> <span class=\"bp\">?</span><span class=\"n\">x_316</span> <span class=\"bp\">?</span><span class=\"n\">x_317</span> <span class=\"bp\">?</span><span class=\"n\">x_318</span> <span class=\"bp\">?</span><span class=\"n\">x_319</span> <span class=\"bp\">?</span><span class=\"n\">x_320</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_215</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">dfinsupp.add_comm_group</span> <span class=\"bp\">?</span><span class=\"n\">x_321</span> <span class=\"bp\">?</span><span class=\"n\">x_322</span> <span class=\"bp\">?</span><span class=\"n\">x_323</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_215</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">finsupp.add_comm_group</span> <span class=\"bp\">?</span><span class=\"n\">x_324</span> <span class=\"bp\">?</span><span class=\"n\">x_325</span> <span class=\"bp\">?</span><span class=\"n\">x_326</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_215</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">x_332.add_comm_group</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_215</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">matrix.add_comm_group</span> <span class=\"bp\">?</span><span class=\"n\">x_333</span> <span class=\"bp\">?</span><span class=\"n\">x_334</span> <span class=\"bp\">?</span><span class=\"n\">x_335</span> <span class=\"bp\">?</span><span class=\"n\">x_336</span> <span class=\"bp\">?</span><span class=\"n\">x_337</span> <span class=\"bp\">?</span><span class=\"n\">x_338</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_215</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">dmatrix.add_comm_group</span> <span class=\"bp\">?</span><span class=\"n\">x_339</span> <span class=\"bp\">?</span><span class=\"n\">x_340</span> <span class=\"bp\">?</span><span class=\"n\">x_341</span> <span class=\"bp\">?</span><span class=\"n\">x_342</span> <span class=\"bp\">?</span><span class=\"n\">x_343</span> <span class=\"bp\">?</span><span class=\"n\">x_344</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_215</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">x_347.to_add_comm_group</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_215</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">pi.add_comm_group</span> <span class=\"bp\">?</span><span class=\"n\">x_348</span> <span class=\"bp\">?</span><span class=\"n\">x_349</span> <span class=\"bp\">?</span><span class=\"n\">x_350</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_215</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">fin.add_comm_group</span> <span class=\"bp\">?</span><span class=\"n\">x_351</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_215</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">rat.add_comm_group</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_215</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">add_monoid_hom.add_comm_group</span> <span class=\"bp\">?</span><span class=\"n\">x_352</span> <span class=\"bp\">?</span><span class=\"n\">x_353</span> <span class=\"bp\">?</span><span class=\"n\">x_354</span> <span class=\"bp\">?</span><span class=\"n\">x_355</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_215</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">prod.add_comm_group</span> <span class=\"bp\">?</span><span class=\"n\">x_356</span> <span class=\"bp\">?</span><span class=\"n\">x_357</span> <span class=\"bp\">?</span><span class=\"n\">x_358</span> <span class=\"bp\">?</span><span class=\"n\">x_359</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_215</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">opposite.add_comm_group</span> <span class=\"bp\">?</span><span class=\"n\">x_360</span> <span class=\"bp\">?</span><span class=\"n\">x_361</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_215</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">additive.add_comm_group</span> <span class=\"bp\">?</span><span class=\"n\">x_362</span> <span class=\"bp\">?</span><span class=\"n\">x_363</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_215</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">add_units.add_comm_group</span> <span class=\"bp\">?</span><span class=\"n\">x_364</span> <span class=\"bp\">?</span><span class=\"n\">x_365</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_215</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">normed_group.to_add_comm_group</span> <span class=\"bp\">?</span><span class=\"n\">x_366</span> <span class=\"bp\">?</span><span class=\"n\">x_367</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_367</span> <span class=\"o\">:</span> <span class=\"n\">normed_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">complex.normed_group</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_367</span> <span class=\"o\">:</span> <span class=\"n\">normed_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">continuous_multilinear_map.to_normed_group</span> <span class=\"bp\">?</span><span class=\"n\">x_368</span> <span class=\"bp\">?</span><span class=\"n\">x_369</span> <span class=\"bp\">?</span><span class=\"n\">x_370</span> <span class=\"bp\">?</span><span class=\"n\">x_371</span> <span class=\"bp\">?</span><span class=\"n\">x_372</span> <span class=\"bp\">?</span><span class=\"n\">x_373</span> <span class=\"bp\">?</span><span class=\"n\">x_374</span> <span class=\"bp\">?</span><span class=\"n\">x_375</span> <span class=\"bp\">?</span><span class=\"n\">x_376</span> <span class=\"bp\">?</span><span class=\"n\">x_377</span> <span class=\"bp\">?</span><span class=\"n\">x_378</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_367</span> <span class=\"o\">:</span> <span class=\"n\">normed_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">continuous_linear_map.to_normed_group</span> <span class=\"bp\">?</span><span class=\"n\">x_379</span> <span class=\"bp\">?</span><span class=\"n\">x_380</span> <span class=\"bp\">?</span><span class=\"n\">x_381</span> <span class=\"bp\">?</span><span class=\"n\">x_382</span> <span class=\"bp\">?</span><span class=\"n\">x_383</span> <span class=\"bp\">?</span><span class=\"n\">x_384</span> <span class=\"bp\">?</span><span class=\"n\">x_385</span> <span class=\"bp\">?</span><span class=\"n\">x_386</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_367</span> <span class=\"o\">:</span> <span class=\"n\">normed_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">normed_group_hom.to_normed_group</span> <span class=\"bp\">?</span><span class=\"n\">x_387</span> <span class=\"bp\">?</span><span class=\"n\">x_388</span> <span class=\"bp\">?</span><span class=\"n\">x_389</span> <span class=\"bp\">?</span><span class=\"n\">x_390</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_367</span> <span class=\"o\">:</span> <span class=\"n\">normed_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">restrict_scalars.normed_group</span> <span class=\"bp\">?</span><span class=\"n\">x_391</span> <span class=\"bp\">?</span><span class=\"n\">x_392</span> <span class=\"bp\">?</span><span class=\"n\">x_393</span> <span class=\"bp\">?</span><span class=\"n\">x_394</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_367</span> <span class=\"o\">:</span> <span class=\"n\">normed_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">pi.normed_group</span> <span class=\"bp\">?</span><span class=\"n\">x_395</span> <span class=\"bp\">?</span><span class=\"n\">x_396</span> <span class=\"bp\">?</span><span class=\"n\">x_397</span> <span class=\"bp\">?</span><span class=\"n\">x_398</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_367</span> <span class=\"o\">:</span> <span class=\"n\">normed_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">prod.normed_group</span> <span class=\"bp\">?</span><span class=\"n\">x_399</span> <span class=\"bp\">?</span><span class=\"n\">x_400</span> <span class=\"bp\">?</span><span class=\"n\">x_401</span> <span class=\"bp\">?</span><span class=\"n\">x_402</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_367</span> <span class=\"o\">:</span> <span class=\"n\">normed_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">x_408.normed_group</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_367</span> <span class=\"o\">:</span> <span class=\"n\">normed_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">x_411.normed_group</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_367</span> <span class=\"o\">:</span> <span class=\"n\">normed_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">real.normed_group</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_367</span> <span class=\"o\">:</span> <span class=\"n\">normed_group</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">normed_linear_ordered_group.to_normed_group</span> <span class=\"bp\">?</span><span class=\"n\">x_412</span> <span class=\"bp\">?</span><span class=\"n\">x_413</span>\n<span class=\"bp\">```</span> <span class=\"o\">(</span><span class=\"n\">Zulip</span> <span class=\"n\">max</span> <span class=\"n\">lines</span> <span class=\"n\">reached</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 238103102,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620634763
    },
    {
        "content": "<p>it's a much bigger story than that though</p>",
        "id": 238103136,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620634781
    },
    {
        "content": "<p>that's not the problem, it's just funny</p>",
        "id": 238103289,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620634816
    },
    {
        "content": "<p><del>docs#add_torsor.nonempty has the wrong priority</del></p>",
        "id": 238103777,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620634976
    },
    {
        "content": "<p><del>Or perhaps more scarily, it seems to be being ignored?</del></p>",
        "id": 238104013,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620635051
    },
    {
        "content": "<p>Let's see if <a href=\"https://github.com/leanprover-community/mathlib/issues/7563\">#7563</a> makes things better or worse</p>",
        "id": 238105987,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620636069
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> The discussion <a href=\"#narrow/stream/113488-general/topic/rw.20causes.20excessive.20memory.20consumption/near/238325048\">here</a> was my attempt to diagnose the timeouts, and it has led to Sebastien Gouezel's <a href=\"https://github.com/leanprover-community/mathlib/issues/7583\">#7583</a>. If you merge that into <a href=\"https://github.com/leanprover-community/mathlib/issues/6786\">#6786</a> does it help?</p>",
        "id": 238380523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620766473
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/char_zero/near/238380523\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> The discussion <a href=\"#narrow/stream/113488-general/topic/rw.20causes.20excessive.20memory.20consumption/near/238325048\">here</a> was my attempt to diagnose the timeouts, and it has led to Sebastien Gouezel's <a href=\"https://github.com/leanprover-community/mathlib/issues/7583\">#7583</a>. If you merge that into <a href=\"https://github.com/leanprover-community/mathlib/issues/6786\">#6786</a> does it help?</p>\n</blockquote>\n<p>Yes, it looks like it does. After mering <a href=\"https://github.com/leanprover-community/mathlib/tree/test_perfection\">branch#test_perfection</a>, <code>perfection_map.map_eq_map</code> goes from a timeout in VS Code (not at command line, I guess different limit) to basically instant.</p>",
        "id": 238386110,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1620769139
    },
    {
        "content": "<p>I could merge <a href=\"https://github.com/leanprover-community/mathlib/tree/test_perfection\">branch#test_perfection</a> into <a href=\"https://github.com/leanprover-community/mathlib/issues/6786\">#6786</a> but probably better to wait for <a href=\"https://github.com/leanprover-community/mathlib/issues/7583\">#7583</a> to hit master and then merge from there.</p>",
        "id": 238386311,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1620769260
    },
    {
        "content": "<p>Awesome work <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span></p>",
        "id": 238386350,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1620769286
    },
    {
        "content": "<p>(and all concerned in fact)</p>",
        "id": 238386359,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1620769295
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7583\">#7583</a> hit master yesterday, so I merged master into <a href=\"https://github.com/leanprover-community/mathlib/issues/6786\">#6786</a> and indeed it now builds successfully.</p>",
        "id": 238642063,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1620921829
    },
    {
        "content": "<p>Great! I'll update my dependent branch that updates subring tomorrow and check that still works too!</p>",
        "id": 238673148,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620936339
    }
]