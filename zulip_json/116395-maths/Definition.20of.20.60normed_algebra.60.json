[
    {
        "content": "<p>What do you think about changing the \"extra\" axiom of <code>normed_algebra k A</code> from <code>norm_algebra_map_eq</code> to <code>norm_smul_le</code> (which is equivalent to <code>norm_smul_eq</code> since we require <code>k</code> to be a normed filed)? My motivation is that we'll be able to reuse <code>normed_space</code> proofs in <code>normed_algebra</code> instances. As far as I understand, the current axiom is equivalent to <code>norm_smul_eq</code> + <code>norm_one</code>.</p>\n<p>AFAIR, <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> said some time ago that the definition with <code>norm_algebra_map</code> is bad in some cases, and <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> had to consider some \"trivial\" cases separately but I don't remember the details.</p>",
        "id": 255948668,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633264576
    },
    {
        "content": "<p>Surely <a href=\"https://leanprover-community.github.io/mathlib_docs/find/normed_algebra.to_normed_space\">docs#normed_algebra.to_normed_space</a> means the proofs can already be reused?</p>",
        "id": 255957143,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633273308
    },
    {
        "content": "<p>Unfortunately I can't remember my thoughts at the time. I remember one issue, which was that I wanted 0 to be a normed k-algebra but the map from k into this algebra isn't an isometry</p>",
        "id": 255959919,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633275966
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> We can't reuse the proof of “<code>A</code> is a normed space over <code>k</code>” in the proof of “<code>A</code> is a normed algebra over <code>k</code>”.</p>",
        "id": 255961250,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633277293
    },
    {
        "content": "<p>I remember one issue <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> encountered: continuous linear endomorphisms of the zero vector space do not form a normed algebra over the base field.</p>",
        "id": 255961291,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633277351
    },
    {
        "content": "<p>They do as far as I'm concerned. Are you just saying they don't in Lean?</p>",
        "id": 255966586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633282564
    },
    {
        "content": "<p>Yes, because the norm of one is zero.</p>",
        "id": 255966757,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633282723
    },
    {
        "content": "<p>I mean, yes, I was talking about \"do not form a normed algebra ... in the sense of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/normed_algebra\">docs#normed_algebra</a>\".</p>",
        "id": 255966784,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633282760
    },
    {
        "content": "<p>So this means for example that <a href=\"https://ncatlab.org/nlab/show/affinoid+algebra\">affinoid algebras</a> will not be normed algebras even though they're algebras with a norm, because the zero algebra is definitely an affinoid algebra (its valuation spectrum is the empty set).</p>",
        "id": 255968545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633284474
    },
    {
        "content": "<p>According to Bosch-Guentzer-Remmert, a normed ring has |1|&lt;=1 and |xy|&lt;=|x||y|, and this forces either |1|=1 or R=0</p>",
        "id": 255968773,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633284705
    },
    {
        "content": "<p>In short, I would be maximally in favour of removing the incorrect axiom and replacing it with the correct one.</p>",
        "id": 255969760,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633285687
    },
    {
        "content": "<p>If we change the definition of a normed algebra by relaxing the isometry condition to, say, <code>| algebra_map x | \\le | x |</code>, then <code>k</code> with the trivial norm would be a normed algebra over <code>k</code> with a nontrivial norm. Do we want thhis?</p>",
        "id": 255970394,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633286328
    },
    {
        "content": "<p>The trivial norm is an interesting one, isn't it? I think that people doing Berkovich geometry really like it</p>",
        "id": 255971367,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1633287221
    },
    {
        "content": "<p>I completely agree that it's an interesting norm, but I'm not completely convinced we want to generalize the <code>normed_algebra</code> class in this way.</p>",
        "id": 255974987,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633290547
    },
    {
        "content": "<p>I think that if a field has a nontrivial norm then there are elements of norm both less than and greater than one so I'm not convinced <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span></p>",
        "id": 255976021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633291498
    },
    {
        "content": "<p>Oh you're right Kevin, I'm thinking in terms of valuations</p>",
        "id": 255976177,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633291652
    },
    {
        "content": "<p>(the trivial valuation is coarser than any other valuation)</p>",
        "id": 255976198,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633291670
    },
    {
        "content": "<p>Ok, maybe we should actually change <code>=</code> in <code>normed_algebra</code> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo></mrow><annotation encoding=\"application/x-tex\">\\le</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span></span></span></span> :)</p>",
        "id": 255977008,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633292468
    },
    {
        "content": "<p>Why not just use <code>norm_smul_le</code>?</p>",
        "id": 255977748,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633293198
    },
    {
        "content": "<p>Sure. That works too</p>",
        "id": 255977899,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633293356
    },
    {
        "content": "<p>It seems that we do not require <code>norm_one_le_one</code> in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/normed_ring\">docs#normed_ring</a>. Should I add this axiom?</p>",
        "id": 255997889,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633314360
    },
    {
        "content": "<p>This will make things like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.norm_prod_le\">docs#list.norm_prod_le</a> work without <code>[norm_one_class]</code> assumption.</p>",
        "id": 255997958,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633314411
    },
    {
        "content": "<p>BTW, do we really need a <code>[normed_field]</code> for a <code>[normed_algebra]</code>?</p>",
        "id": 255999035,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633315552
    },
    {
        "content": "<p>I mean, what's wrong with normed algebras over normed rings?</p>",
        "id": 255999081,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633315566
    },
    {
        "content": "<p>(disclaimer: quite possibly I miss something trivial)</p>",
        "id": 255999097,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633315588
    },
    {
        "content": "<p>I think normed rings should be allowed as a base for normed algebras (well, the algebra class requires commutativity, so <code>normed_comm_ring</code>, is that a thing?)</p>",
        "id": 255999412,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633315928
    },
    {
        "content": "<p>Yes, we have this.</p>",
        "id": 255999657,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633316246
    },
    {
        "content": "<p>Also, I'm going to replace <a href=\"https://leanprover-community.github.io/mathlib_docs/find/norm_one_class\">docs#norm_one_class</a> with a lemma assuming <code>[normed_ring R] [nontrivial R]</code>.</p>",
        "id": 256002243,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633319059
    },
    {
        "content": "<p>Started <a href=\"https://github.com/leanprover-community/mathlib/tree/redefine-normed-algebra\">branch#redefine-normed-algebra</a>.</p>",
        "id": 256004215,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633321030
    },
    {
        "content": "<p>(with only a partial refactor, i.e. I still require <code>k</code> to be a normed field)</p>",
        "id": 256004243,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633321064
    },
    {
        "content": "<p>(and I'm removing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/semi_normed_space\">docs#semi_normed_space</a> in the same branch; we already had this situation with <code>semimodule</code> and <code>module</code>)</p>",
        "id": 256004458,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633321239
    },
    {
        "content": "<p>semi_normed_space and semimodule have completely different meanings of semi! One is about the metric being only a pseudometric, the other is about not having negatives.</p>",
        "id": 256005405,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633322259
    },
    {
        "content": "<p>But both situations (<code>semimodule</code> vs <code>module</code> and <code>semi_normed_space</code> vs <code>normed_space</code>) are very similar from Lean point of view.</p>",
        "id": 256005465,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633322304
    },
    {
        "content": "<p>Indeed, I see. :-)</p>",
        "id": 256005470,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633322314
    },
    {
        "content": "<p>I mean, <code>normed_space</code> has the same axioms but it takes stronger TC arguments.</p>",
        "id": 256005474,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633322323
    },
    {
        "content": "<p>I am maybe confused, by the situation for seminormed space seems a little different than with semimodule: a semimodule over a ring is automatically a module, but I don't see an analogue for seminormed space.</p>",
        "id": 256009500,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1633326501
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Definition.20of.20.60normed_algebra.60/near/255997889\">said</a>:</p>\n<blockquote>\n<p>It seems that we do not require <code>norm_one_le_one</code> in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/normed_ring\">docs#normed_ring</a>. Should I add this axiom?</p>\n</blockquote>\n<p>Definitely not: there are important examples of normed rings where the identity has norm larger than one (for instance <code>n x n</code> matrices with the Hilbert-Schmidt norm). That's the reason of the <code>norm_one_class</code>. We should probably add this in the docstring for normed rings.</p>",
        "id": 256009773,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1633326827
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/116395-maths/topic/Definition.20of.20.60normed_algebra.60/near/256009773\">said</a>:</p>\n<blockquote>\n<p>We should probably add this in the docstring for normed rings.</p>\n</blockquote>\n<p><span aria-label=\"this\" class=\"emoji emoji-1f446\" role=\"img\" title=\"this\">:this:</span></p>",
        "id": 256010282,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633327301
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> Thank you, I'll revert this part of the patch.</p>",
        "id": 256012344,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633329125
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> A seminormed space that is a normed group is automatically a normed space.</p>",
        "id": 256012363,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633329151
    },
    {
        "content": "<p>Sure. But then we will have <code>seminormed_group</code> and <code>normed_group</code> but only <code>normed_space</code>?<br>\nTo be clear: I don't have a strong opinion here, but we definitely want to be able to work with seminormed vector spaces.</p>",
        "id": 256012810,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1633329558
    },
    {
        "content": "<p>You just say <code>[seminormed_group E] [normed_space k E]</code>.</p>",
        "id": 256012903,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633329624
    },
    {
        "content": "<p>I tried to make that refactor already but ran into timeouts in <code>analysis/calculus/fderiv_symmetric.lean</code></p>",
        "id": 256017788,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633332998
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8218\">#8218</a></p>",
        "id": 256017827,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633333027
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/semi_normed_space.20vs.20normed_space/near/245089933\">The previous zulip thread</a></p>",
        "id": 256018118,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633333221
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> You mention non-existing <code>semi_normed_space.to_module'</code> in the docstring of <code>semi_normed_algebra.to_semi_normed_space'</code>. What is it?</p>",
        "id": 256049908,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633350560
    },
    {
        "content": "<p>My attempt at <a href=\"https://github.com/leanprover-community/mathlib/tree/drop-semi-normed-space\">branch#drop-semi-normed-space</a> fails in <code>analysis.normed_space.multilinear</code> with some strange TC errors.</p>",
        "id": 256050054,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633350618
    },
    {
        "content": "<p>(sorry, I've started my branch before reading your message about <a href=\"https://github.com/leanprover-community/mathlib/issues/8218\">#8218</a>)</p>",
        "id": 256050128,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633350657
    },
    {
        "content": "<p>It's the instance I add in the dependent PR, <a href=\"https://github.com/leanprover-community/mathlib/issues/8221\">#8221</a></p>",
        "id": 256051473,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633351243
    },
    {
        "content": "<p>Probably the docstring refers to the wrong thing after a clumsy rename</p>",
        "id": 256051614,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633351322
    },
    {
        "content": "<p>Are you talking about the PR or master? Can you give a line link?</p>",
        "id": 256052097,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633351530
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/semi_normed_algebra.to_semi_normed_space'\">docs#semi_normed_algebra.to_semi_normed_space'</a></p>",
        "id": 256053692,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633352207
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 256053987,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633352354
    },
    {
        "content": "<p>Ah, that was a bad merge</p>",
        "id": 256054190,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633352417
    },
    {
        "content": "<p>It is indeed the instance from <a href=\"https://github.com/leanprover-community/mathlib/issues/8221\">#8221</a> that didn't get added because it hit timeouts</p>",
        "id": 256054260,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633352441
    },
    {
        "content": "<p>I think we just need to speed up the proof in question</p>",
        "id": 256054320,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633352461
    },
    {
        "content": "<p>I'm going to merge master into <a href=\"https://github.com/leanprover-community/mathlib/issues/8221\">#8221</a> and try to fix the timeout.</p>",
        "id": 256054768,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633352622
    },
    {
        "content": "<p>Pushed a fix</p>",
        "id": 256064087,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633356232
    },
    {
        "content": "<p>Thanks, I'll have a go at the unification issue that it now trips on</p>",
        "id": 256088177,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633364939
    },
    {
        "content": "<p>I don't have enough memory either on my local machine or on gitpod to debug this...</p>",
        "id": 256091685,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633366116
    },
    {
        "content": "<p>The lemma in question (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_ftaylor_series_up_to_on_pi\">docs#has_ftaylor_series_up_to_on_pi</a>) was already fighting some nasty elaboration problems before this PR</p>",
        "id": 256091714,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633366130
    },
    {
        "content": "<p>Fixed compile of <a href=\"https://github.com/leanprover-community/mathlib/issues/9533\">#9533</a>. <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> , could you please have another look?</p>",
        "id": 256966767,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633883096
    },
    {
        "content": "<p>Done</p>",
        "id": 256967044,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633883399
    },
    {
        "content": "<p>Sorry, I don't want to golf 1-line proofs (unless they're slow).</p>",
        "id": 256967294,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633883615
    },
    {
        "content": "<p>Any idea what's going wrong in <a href=\"https://github.com/leanprover-community/mathlib/issues/8221\">#8221</a>?</p>",
        "id": 257185993,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634037630
    }
]