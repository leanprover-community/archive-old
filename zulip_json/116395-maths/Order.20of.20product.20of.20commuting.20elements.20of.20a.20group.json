[
    {
        "content": "<p>I just needed a version of the following lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.order_of_element</span>\n\n<span class=\"c1\">-- How generally is this true?</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">commute.order_of_mul_eq_of_order_of_sq_dvd</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h_comm</span> <span class=\"o\">:</span> <span class=\"n\">commute</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">is_of_fin_order</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_dvd</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">order_of</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">order_of</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">order_of</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">order_of</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I needed it when <code>G</code> was the <code>add_circle</code> (where it is definitely true). Can anyone less rusty on group theory comment on how generally this should be true?</p>",
        "id": 316843840,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1671489308
    },
    {
        "content": "<p>It's true when v_p(o(x)) &gt;= 1 implies v_p(o(x)) &lt; v_p(o(y)), i.e. \"if a prime goes into order_of x at least once, then it goes into order_of y more times than it goes into order_of x\". This is tight in the sense that if there exists a prime dividing o(x) at least once and o(y) the same number of times, then you can get cancellation at that prime.</p>",
        "id": 316855319,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671495260
    },
    {
        "content": "<p>The way I think about it is to consider the finite abelian group generated by x and y, and decompose it into a product of abelian p-groups; the order of an element is a product of the \"local orders\" which are prime powers. If we have the \"radical\" of a positive integer, i.e. the product of the primes dividing that integer, then you want (radical(o(x)))^2 divides o(y).</p>",
        "id": 316855544,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671495419
    },
    {
        "content": "<p>Do we have a definition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>a</mi><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">rad</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">d</span></span></span></span>, actually? It would also be useful for a few olympiad problems</p>",
        "id": 316901216,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671526437
    },
    {
        "content": "<p>Oh wait that radical^2 is wrong, it's o(x)*radical(o(x)) divides o(y)</p>",
        "id": 316914790,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671531238
    },
    {
        "content": "<p>ie \"each prime dividing o(x) also divides o(y)/o(x)\"</p>",
        "id": 316914989,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671531286
    },
    {
        "content": "<p>Thanks for this, exactly what I wanted. Now if only I could snipe someone into proving it for me ;-)</p>",
        "id": 316917839,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1671532326
    },
    {
        "content": "<p>I guess the statement would be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.order_of_element</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">commute.order_of_mul_eq_order_of_iff</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h_comm</span> <span class=\"o\">:</span> <span class=\"n\">commute</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">is_of_fin_order</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">order_of</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">order_of</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">p.prime</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">order_of</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">order_of</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"n\">order_of</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 316918743,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1671532694
    },
    {
        "content": "<p>I've written a proof but it's more painful than expected, and dealing with the ≠ 0 hypotheses is rather annoying; maybe we should switch the whole file data.nat.factorization.basic and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.lcm_ne_zero\">docs#nat.lcm_ne_zero</a> to use the <code>ne_zero</code> class. Notice I only proved one direction because the other isn't true: if <code>x = y = (1 : zmod 3)</code>, then <code>add_order_of (x + y) = 3</code> and <code>3 ∣ add_order_of x</code>, but <code>¬ 9 ∣ add_order_of y</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.order_of_element</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.factorization.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">dvd_of_forall_prime_mul_dvd</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hdvd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p.prime</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">ha</span> <span class=\"o\">:=</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">a</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">one_dvd</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">nat.exists_prime_and_dvd</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">dvd_mul_left</span> <span class=\"n\">a</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hdvd</span> <span class=\"n\">p</span> <span class=\"n\">hp.1</span> <span class=\"n\">hp.2</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nat.factorization_lcm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a.lcm</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorization</span> <span class=\"bp\">=</span> <span class=\"n\">a.factorization</span> <span class=\"bp\">⊔</span> <span class=\"n\">b.factorization</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">add_right_inj</span> <span class=\"o\">(</span><span class=\"n\">a.gcd</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorization</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">nat.factorization_mul</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">nat.gcd_eq_zero_iff.1</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ha</span> <span class=\"n\">h.1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat.lcm_ne_zero</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">),</span>\n    <span class=\"n\">nat.gcd_mul_lcm</span><span class=\"o\">,</span> <span class=\"n\">nat.factorization_gcd</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">nat.factorization_mul</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">],</span>\n  <span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">min_add_max</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nat.dvd_iff_factorization_prime_le</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p.prime</span> <span class=\"bp\">→</span> <span class=\"n\">a.factorization</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">b.factorization</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">nat.ord_proj_dvd_ord_proj_iff_dvd</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">forall_congr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">nat.pow_dvd_pow_iff_le_right</span> <span class=\"n\">hp.one_lt</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.prime</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">pow_dvd_pow</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp_rw</span> <span class=\"n\">nat.ord_proj_of_not_prime</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hp</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">commute.order_of_mul_eq_order_of</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h_comm</span> <span class=\"o\">:</span> <span class=\"n\">commute</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">is_of_fin_order</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hdvd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">p.prime</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">order_of</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">order_of</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"n\">order_of</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">order_of</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">order_of</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hxdy</span> <span class=\"o\">:=</span> <span class=\"n\">dvd_of_forall_prime_mul_dvd</span> <span class=\"n\">hdvd</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat.dvd_antisymm</span> <span class=\"o\">(</span><span class=\"n\">h_comm.order_of_mul_dvd_lcm.trans</span> <span class=\"bp\">$</span> <span class=\"n\">nat.lcm_dvd</span> <span class=\"n\">hxdy</span> <span class=\"n\">dvd_rfl</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">hoy</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">order_of_pos'</span> <span class=\"n\">hy</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne'</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hoxy</span> <span class=\"o\">:</span> <span class=\"n\">order_of</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hoxy</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">dvd_zero</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.dvd_iff_factorization_prime_le</span> <span class=\"n\">hoy</span> <span class=\"n\">hoxy</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contra'</span><span class=\"o\">,</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">commute.refl</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul_right</span> <span class=\"n\">h_comm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv_left.order_of_mul_dvd_lcm</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hox</span> <span class=\"o\">:=</span> <span class=\"n\">ne_zero_of_dvd_ne_zero</span> <span class=\"n\">hoy</span> <span class=\"n\">hxdy</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inv_mul_cancel_left</span><span class=\"o\">,</span> <span class=\"n\">order_of_inv</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span> <span class=\"n\">nat.factorization_le_iff_dvd</span> <span class=\"n\">hoy</span> <span class=\"o\">(</span><span class=\"n\">nat.lcm_ne_zero</span> <span class=\"n\">hox</span> <span class=\"n\">hoxy</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">not_lt</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.factorization_lcm</span> <span class=\"n\">hox</span> <span class=\"n\">hoxy</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">max_lt</span> <span class=\"n\">_</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">hdvd</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">hdvd</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">nat.dvd_of_factorization_pos</span> <span class=\"o\">((</span><span class=\"n\">pos_of_gt</span> <span class=\"n\">hl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans_le</span> <span class=\"n\">hdvd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne'</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">nat.factorization_le_iff_dvd</span> <span class=\"o\">(</span><span class=\"n\">mul_ne_zero</span> <span class=\"n\">hp.ne_zero</span> <span class=\"n\">hox</span><span class=\"o\">)</span> <span class=\"n\">hoy</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.factorization_mul</span> <span class=\"n\">hp.ne_zero</span> <span class=\"n\">hox</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">h</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">hdvd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">not_lt</span> <span class=\"o\">(</span><span class=\"n\">lt_add_of_pos_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hp.factorization_self</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">zero_lt_one</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 317091265,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1671604506
    },
    {
        "content": "<p>Nice, this proof is now short enough:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.order_of_element</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">dvd_of_forall_prime_mul_dvd</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hdvd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p.prime</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">ha</span> <span class=\"o\">:=</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">a</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">one_dvd</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">nat.exists_prime_and_dvd</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">dvd_mul_left</span> <span class=\"n\">a</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hdvd</span> <span class=\"n\">p</span> <span class=\"n\">hp.1</span> <span class=\"n\">hp.2</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">commute.order_of_mul_eq_order_of</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">commute</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">is_of_fin_order</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hdvd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">p.prime</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">order_of</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">order_of</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"n\">order_of</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">order_of</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">order_of</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hoy</span> <span class=\"o\">:=</span> <span class=\"n\">order_of_pos'</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hxy</span> <span class=\"o\">:=</span> <span class=\"n\">dvd_of_forall_prime_mul_dvd</span> <span class=\"n\">hdvd</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">order_of_eq_of_pow_and_pow_div_prime</span> <span class=\"n\">hoy</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">order_of_dvd_iff_pow_eq_one</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hc.order_of_mul_dvd_lcm.trans</span> <span class=\"o\">(</span><span class=\"n\">nat.lcm_dvd</span> <span class=\"n\">hxy</span> <span class=\"n\">dvd_rfl</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">intros</span> <span class=\"n\">p</span> <span class=\"n\">hp</span> <span class=\"n\">hpy</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">commute.refl</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul_right</span> <span class=\"n\">hc</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv_left.order_of_mul_dvd_lcm.trans</span> <span class=\"o\">(</span><span class=\"n\">nat.lcm_dvd</span> <span class=\"n\">_</span> <span class=\"n\">hd</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inv_mul_cancel_left</span><span class=\"o\">,</span> <span class=\"n\">nat.dvd_div_iff</span> <span class=\"n\">hpy</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hp.ne_one</span><span class=\"o\">,</span>\n    <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">nat.dvd_one</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_dvd_mul_iff_right</span> <span class=\"n\">hoy.ne'</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">order_of_inv</span><span class=\"o\">,</span> <span class=\"n\">nat.dvd_div_iff</span> <span class=\"n\">hpy</span><span class=\"o\">],</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">order_of</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">exacts</span> <span class=\"o\">[</span><span class=\"n\">hdvd</span> <span class=\"n\">p</span> <span class=\"n\">hp</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hp.coprime_iff_not_dvd.2</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul_dvd_of_dvd_of_dvd</span> <span class=\"n\">hpy</span> <span class=\"n\">hxy</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 317107464,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1671612094
    },
    {
        "content": "<p>Oh, wow I thought it was a 100:1 shot that someone would do this! Is there a PR?</p>",
        "id": 317122647,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1671617553
    },
    {
        "content": "<p>Thanks so much.</p>",
        "id": 317122683,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1671617568
    },
    {
        "content": "<p>I originally thought it straightforwardly follows from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/commute.order_of_mul_dvd_lcm\">docs#commute.order_of_mul_dvd_lcm</a>, but then I realized I need something about factorizations and the proof gets much longer than expected; fortunately <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_of_eq_of_pow_and_pow_div_prime\">docs#order_of_eq_of_pow_and_pow_div_prime</a> came to rescue in the end.</p>\n<p>I'll generalize to monoids and make a PR later today.</p>",
        "id": 317220203,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1671646740
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/17997\">#17997</a></p>",
        "id": 317288827,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1671684506
    }
]