[
    {
        "content": "<p>What's the canonical name for the coercion from <code>rat</code> to <code>real</code>? I had imagined <code>coe</code>, but</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_semiring_hom</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>\n\n\n<p>times out.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_semiring_hom</span> <span class=\"o\">(</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">cast</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>\n\n\n<p>works fine, but I need that it's injective and <code>rat.cast_injective</code> works with <code>coe</code>. Which one am I supposed to be using?</p>",
        "id": 186033091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579425741
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">set_theory</span><span class=\"bp\">.</span><span class=\"n\">schroeder_bernstein</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">countable</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">algebraic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">default</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">cardinality</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">linarith</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">fin_cases</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n</pre></div>\n\n\n<p>might be relevant here (this is work of a student)</p>",
        "id": 186033213,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579426037
    },
    {
        "content": "<p>In such an algebraic context I would say <code>rat.cast</code> is what you want. Here you are really using that <code>ℝ</code> is a division ring, not the fact that it contains <code>ℚ</code>.</p>",
        "id": 186033316,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1579426234
    },
    {
        "content": "<p><code>coe</code> is defeq to <code>rat.cast</code></p>",
        "id": 186033394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579426441
    },
    {
        "content": "<p>It is written using <code>coe</code>, but the lemmas have <code>rat.cast</code> based names</p>",
        "id": 186033441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579426481
    },
    {
        "content": "<p>I know they're defeq but I got that timeout. Is it a missing instance then?</p>",
        "id": 186033551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579426730
    },
    {
        "content": "<p>A student wants to pass from Q[X] to R[X] a lot</p>",
        "id": 186033605,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579426823
    },
    {
        "content": "<p>it's a missing instance</p>",
        "id": 186034513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579428807
    },
    {
        "content": "<p>Kinda related to this topic. I am failing to coerce a structure containing a rational number to a structure containing a <code>discrete_linear_ordered_field</code> (or a <code>division_ring</code> for that matter):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">continued_fractions</span><span class=\"bp\">.</span><span class=\"n\">computation</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">generalized_continued_fraction</span>\n<span class=\"kn\">open</span> <span class=\"n\">generalized_continued_fraction</span> <span class=\"n\">as</span> <span class=\"n\">gcf</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">discrete_linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- set_option pp.all true</span>\n<span class=\"c1\">-- #check rat.cast_coe</span>\n\n <span class=\"c1\">-- works</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">failed to synthesize type class instance for</span>\n<span class=\"cm\">...</span>\n<span class=\"cm\">has_lift_t (gcf.int_fract_pair ℚ) (gcf.int_fract_pair α)</span>\n<span class=\"cm\">-/</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">int_fract_pair</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int_fract_pair</span> <span class=\"n\">α</span>\n</code></pre></div>\n\n\n<p>In <code>algebra.continued_fractions.computation.basic</code>, I have</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">int_fract_pair</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fr</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_coe</span> <span class=\"n\">K</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- Coerce a pair by coercing the fractional component. -/</span>\n<span class=\"kn\">instance</span> <span class=\"n\">has_coe_to_int_fract_pair</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">int_fract_pair</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">int_fract_pair</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">fr</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fr</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">⟩⟩</span>\n</code></pre></div>\n\n\n<p>I thought the coercion should work via <code>rat.cast_coe</code> but it does not seem to get picked up. I also swear this worked ~half a year ago :')</p>",
        "id": 203563548,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1594419234
    },
    {
        "content": "<p>I did just change the imports in a way that may have affected some coercions. Try <code>import data.[nat|int|rat].cast</code> and see if one of those helps, or post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> and I'll have a look.</p>",
        "id": 203574702,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594432013
    },
    {
        "content": "<p>Changing the imports does not help. Here is a self-contained example with only a <code>data.rat.cast</code> import:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">cast</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">my_pair</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fr</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">my_pair</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">coe</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Fix another type `β` and assume `α` can be converted to `β`. -/</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_coe</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">has_coe_to_my_pair</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">my_pair</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">my_pair</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">fr</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fr</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">⟩⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">norm_cast</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">coe_to_my_pair</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">fr</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">my_pair</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">b</span> <span class=\"n\">fr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">my_pair</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">my_pair</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">fr</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">coe</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">[</span><span class=\"n\">discrete_linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">failed to synthesize type class instance for</span>\n<span class=\"cm\">...</span>\n<span class=\"cm\">has_lift_t (my_pair ℚ) (my_pair α)</span>\n<span class=\"cm\">-/</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">my_pair</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">my_pair</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n <span class=\"c1\">-- works</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">my_pair</span>\n</code></pre></div>",
        "id": 203587646,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1594457420
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">cast</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">my_pair</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fr</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">my_pair</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">coe</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Fix another type `β` and assume `K` can be converted to `β`. -/</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">has_coe</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">my_pair</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">my_pair</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">fr</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fr</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">⟩⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">has_coe_t</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_t</span> <span class=\"o\">(</span><span class=\"n\">my_pair</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">my_pair</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">fr</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fr</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">⟩⟩</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">coe</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">[</span><span class=\"n\">discrete_linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">cast_coe</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">((</span><span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">my_pair</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">my_pair</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n <span class=\"c1\">-- works</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">my_pair</span>\n</code></pre></div>",
        "id": 203587827,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594457781
    },
    {
        "content": "<p>the issue is that <code>rat.cast_coe</code> uses <code>has_coe_t</code> instead of <code>has_coe</code></p>",
        "id": 203587830,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594457790
    },
    {
        "content": "<p>Is this on purpose or should that be changed to <code>has_coe</code>?</p>",
        "id": 203587998,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1594458143
    },
    {
        "content": "<p>no idea</p>",
        "id": 203588001,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594458152
    },
    {
        "content": "<p>I asked about finset to set being coe_t not coe recently and got the same answer</p>",
        "id": 203588156,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594458496
    },
    {
        "content": "<p>In <code>data.nat.cast</code> there is a note:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Coercions</span> <span class=\"n\">such</span> <span class=\"n\">as</span> <span class=\"bp\">`</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_coe</span><span class=\"bp\">`</span> <span class=\"n\">that</span> <span class=\"n\">go</span> <span class=\"k\">from</span> <span class=\"n\">a</span> <span class=\"n\">concrete</span> <span class=\"kn\">structure</span> <span class=\"n\">such</span> <span class=\"n\">as</span>\n<span class=\"bp\">`ℕ`</span> <span class=\"n\">to</span> <span class=\"n\">an</span> <span class=\"n\">arbitrary</span> <span class=\"n\">ring</span> <span class=\"bp\">`</span><span class=\"n\">α</span><span class=\"bp\">`</span> <span class=\"n\">should</span> <span class=\"n\">be</span> <span class=\"n\">set</span> <span class=\"n\">up</span> <span class=\"n\">as</span> <span class=\"n\">follows</span><span class=\"o\">:</span>\n\n  <span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">priority</span> <span class=\"mi\">900</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_t</span> <span class=\"bp\">ℕ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨...⟩</span>\n\n<span class=\"n\">It</span> <span class=\"n\">needs</span> <span class=\"n\">to</span> <span class=\"n\">be</span> <span class=\"bp\">`</span><span class=\"n\">has_coe_t</span><span class=\"bp\">`</span> <span class=\"n\">instead</span> <span class=\"n\">of</span> <span class=\"bp\">`</span><span class=\"n\">has_coe</span><span class=\"bp\">`</span> <span class=\"n\">because</span> <span class=\"n\">otherwise</span> <span class=\"n\">type</span><span class=\"bp\">-</span><span class=\"n\">class</span>\n<span class=\"n\">inference</span> <span class=\"n\">would</span> <span class=\"n\">loop</span> <span class=\"n\">when</span> <span class=\"n\">constructing</span> <span class=\"n\">the</span> <span class=\"n\">transitive</span> <span class=\"kn\">coercion</span> <span class=\"bp\">`ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">...`.</span>\n<span class=\"n\">The</span> <span class=\"n\">reduced</span> <span class=\"n\">priority</span> <span class=\"n\">is</span> <span class=\"n\">necessary</span> <span class=\"n\">so</span> <span class=\"n\">that</span> <span class=\"n\">it</span> <span class=\"n\">doesn&#39;t</span> <span class=\"n\">conflict</span> <span class=\"k\">with</span> <span class=\"n\">instances</span>\n<span class=\"n\">such</span> <span class=\"n\">as</span> <span class=\"bp\">`</span><span class=\"n\">has_coe_t</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">`.</span>\n</code></pre></div>",
        "id": 203588158,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1594458522
    },
    {
        "content": "<p>aha!</p>",
        "id": 203588320,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594458850
    },
    {
        "content": "<p>algebra_tower should be algebra_t</p>",
        "id": 203588322,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594458860
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span></p>",
        "id": 203588324,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594458866
    },
    {
        "content": "<p>that's how you do transitive closures in Lean</p>",
        "id": 203588327,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594458875
    },
    {
        "content": "<p>Here's the commit that introduced this <a href=\"https://github.com/leanprover-community/mathlib/commit/06bae3e11245a3b0147709986ae7da7e9a5e35e6\">https://github.com/leanprover-community/mathlib/commit/06bae3e11245a3b0147709986ae7da7e9a5e35e6</a></p>",
        "id": 203588331,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1594458896
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> is the right solution in this case to then add both of the following instances?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">has_coe</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">my_pair</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">my_pair</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">fr</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fr</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">⟩⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">has_coe_t</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_t</span> <span class=\"o\">(</span><span class=\"n\">my_pair</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">my_pair</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">fr</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fr</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">⟩⟩</span>\n</code></pre></div>",
        "id": 203588397,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1594459062
    },
    {
        "content": "<p>I'm not a big fan of coercions in the first place, so my first reaction would be \"add neither\".</p>",
        "id": 203588494,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1594459210
    },
    {
        "content": "<p>And insert functions going from one type to another explicitly? This would give me big headaches in my case</p>",
        "id": 203588504,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1594459300
    },
    {
        "content": "<p>Rereading this thread.  At the very least I'd specialize it to coercions from rationals to rings.  I.e. don't add <code>has_coe*</code> instances that have <code>[has_coe*]</code> arguments.</p>",
        "id": 203588805,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1594459490
    },
    {
        "content": "<p>What's the issue with pushing the coercions through the structure? I supposed the instances will not be applicable/picked up by the elaborator anyway in case one is not talking about <code>my_pair</code>s, which will be the case most of the time.</p>",
        "id": 203589022,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1594460038
    },
    {
        "content": "<p>My distrust and dislike of coercions is based on spending too much time looking at <code>↑x</code> and wondering what the types are and what the coercion does.  The fewer coercion instances the better IMHO.</p>",
        "id": 203589132,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1594460266
    },
    {
        "content": "<p>You're living in the past Gabriel, we now have widgets which will tell you everything hidden by those funny up arrows!</p>",
        "id": 203589281,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594460554
    },
    {
        "content": "<p>This is currently the greatest applications of the new widgets IMO.</p>",
        "id": 203589286,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594460578
    }
]