[
    {
        "content": "<p>this is a simple question - but how does one prove that a natural number is &gt;= another natural. <br>\nfor example, even for something like 1 &gt; 0</p>",
        "id": 161917933,
        "sender_full_name": "bulut buyru",
        "timestamp": 1553740411
    },
    {
        "content": "<p>Well, <code>1&gt;0</code> follows from <a href=\"https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/library/init/data/nat/basic.lean#L13\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/library/init/data/nat/basic.lean#L13\">the way that <code>&gt;</code> is defined</a>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">less_than_or_equal</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"mi\">1</span>\n</pre></div>\n\n\n<p>There are also tons of already-proven lemmas that are helpful for working with inequalities: if you're using the VS Code extension you'll see a popup filled with suggestions if you start typing e.g. <code>nat.le</code> or <code>nat.lt</code>. Here are links to some relevant lemmas in <a href=\"https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/library/init/data/nat/lemmas.lean#L135\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/library/init/data/nat/lemmas.lean#L135\">lean core</a> and <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/nat/basic.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/nat/basic.lean\">mathlib</a>.</p>\n<p>However, the easiest way is probably to use mathlib's <a href=\"https://github.com/leanprover-community/mathlib/blob/d359aa892c1695c5393e2b24de471924b8227d90/src/tactic/norm_num.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/d359aa892c1695c5393e2b24de471924b8227d90/src/tactic/norm_num.lean\"><code>norm_num</code> tactic</a>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">173</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">34</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span>\n</pre></div>\n\n\n<p>It can handle lots of other arithmetic-related goals.  (It looks like norm_num is <a href=\"https://github.com/leanprover-community/mathlib/issues/450#issuecomment-466815460\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/450#issuecomment-466815460\">still not mentioned in the tactics doc</a>?)</p>",
        "id": 161920309,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1553743580
    },
    {
        "content": "<p>what do I need to import to use norm_num?</p>",
        "id": 161920396,
        "sender_full_name": "bulut buyru",
        "timestamp": 1553743701
    },
    {
        "content": "<p><code>import tactic.norm_num</code>, assuming you have <code>mathlib</code> installed.</p>",
        "id": 161920422,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553743749
    },
    {
        "content": "<p>Yeah, oops, forgot to put the import in!</p>",
        "id": 161920492,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1553743814
    },
    {
        "content": "<p>thanks !</p>",
        "id": 161921331,
        "sender_full_name": "bulut buyru",
        "timestamp": 1553744876
    }
]