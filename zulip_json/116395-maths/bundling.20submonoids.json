[
    {
        "content": "<p>I've embarked on a refactor changing <code>is_submonoid</code> to <code>submonoid</code>. Do people have opinions about whether we should have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_le</span> <span class=\"o\">(</span><span class=\"n\">submonoid</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">carrier</span> <span class=\"err\">⊆</span> <span class=\"n\">T</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>or</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_subset</span> <span class=\"o\">(</span><span class=\"n\">submonoid</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">carrier</span> <span class=\"err\">⊆</span> <span class=\"n\">T</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>or both?</p>",
        "id": 172494027,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565001232
    },
    {
        "content": "<p><code>le</code></p>",
        "id": 172494452,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1565001762
    },
    {
        "content": "<p>what have you become, Hughes?</p>",
        "id": 172494457,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565001779
    },
    {
        "content": "<p>Also, we shouldn't have <code>subset</code> for sets, just <code>le</code></p>",
        "id": 172494465,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1565001785
    },
    {
        "content": "<p>Oh wow!</p>",
        "id": 172494474,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565001802
    },
    {
        "content": "<p>Having learnt something about lattices, I am beginning to understand this point of view.</p>",
        "id": 172494481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565001827
    },
    {
        "content": "<p>One might wonder about a \"mathematician's interface\" to Lean though.</p>",
        "id": 172494525,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565001858
    },
    {
        "content": "<p>I think it's almost always easier to learn some slightly different notation, than to force Lean into doing something that doesn't work very well in Lean. It's really not that hard to use <code>le</code> instead of <code>subset</code>.</p>",
        "id": 172494706,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1565002092
    },
    {
        "content": "<p>I agree. But I am currently being an \"engineer\", editing mathlib. What about the undergraduate mathematician who doesn't care about the details but wants the interface that they expect?</p>",
        "id": 172494721,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565002143
    },
    {
        "content": "<p>Good docs.</p>",
        "id": 172495182,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1565002762
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">in_closure</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">basic</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">in_closure</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">in_closure</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">in_closure</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">in_closure</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">in_closure</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">submonoid</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"n\">in_closure</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mem&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_mem&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>There are two ways to do monoid closure of a subset. One is this inductive prop way, and the other is just taking the Inf of all the submonoids containing s. Should both be in mathlib? If not, which one?</p>",
        "id": 172507663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565014609
    },
    {
        "content": "<p>It doesn't matter so long as you prove they're equivalent. You definitely want to define the recursor if you use the Inf definition.</p>",
        "id": 172507972,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1565014843
    },
    {
        "content": "<p>Does it matter? The API should make sure that the user can not find out what the definition is (-;</p>",
        "id": 172507993,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565014860
    },
    {
        "content": "<p>I don't know if it matters. I just noted that for submonoids we had the inductive prop and for submodules we had the Inf</p>",
        "id": 172508024,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565014895
    },
    {
        "content": "<blockquote>\n<p>Does it matter? The API should make sure that the user can not find out what the definition is (-;</p>\n</blockquote>\n<p>Oh right! I'll go back and mark everything as irreducible :-)</p>",
        "id": 172508114,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565014939
    },
    {
        "content": "<p>I wouldn't mind if mathlib would experiment more with this (-;</p>",
        "id": 172508177,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565014991
    },
    {
        "content": "<p>Hi, what is the current progress with bundling submonoids?</p>",
        "id": 176840223,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1569702316
    },
    {
        "content": "<p>Let me tag <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span></p>",
        "id": 176841062,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1569703685
    },
    {
        "content": "<blockquote>\n<p>Hi, what is the current progress with bundling submonoids?</p>\n</blockquote>\n<p>Hi <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> and others; sorry for the delay as I haven't been doing much Lean since term started. But the branch bundled_submonoids_etc is ready to PR (I think; I want to check it through in the morning). Unbundled submonoids are still there but bundled ones are too. The only things in the library that can be refactored to depend on these before we've also bundled subgroups are some lemmas in <code>group_theory\\coset.lean</code>, <code>algebra\\commute.lean</code> and <code>ring_theory\\localization.lean</code>. I've done the first two but in this PR I haven't touched <code>localization</code>, because I've refactored that to PR a couple of PRs after this one.</p>\n<p>There are also a couple of lemmas that I needed for later stuff about congruence relations/localization/etc. </p>\n<p>I've started bundling subgroups, not on a branch, but I'm not prioritising it at the moment and I'm also unsure how to approach it. I extended bundled submonoids, and now I could just duplicate every lemma in <code>group_theory\\submonoid.lean</code> so that given a subgroup S you can write <code>S.list_prod_mem</code> instead of having to write <code>S.1.list_prod_mem</code> or <code>S.to_submonoid.list_prod_mem</code>, for example. Or the user could just be told in the docs to write S.1 instead of S for some lemmas. I don't know. (I've got the same question about the localization refactor; I've commented out tons of lemmas where you can essentially use the version for localizations of comm monoids, which is another file, but it might confuse users.)</p>",
        "id": 179152976,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1572147544
    },
    {
        "content": "<p>I don't know the answer to this question. Can <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> or <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> or <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> shed some light on how to deal with this? It sounds like bad design to duplicate the API. But <code>S.to_submonoid.foobar</code> isn't very nice either.</p>",
        "id": 179155734,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572153548
    },
    {
        "content": "<p>I think the easiest thing to do would be to just duplicate the api. The theorems should just be redirects, but note that the statements are actually different - things like <code>\\mem</code> will be finding a different typeclass instance so it's not exactly the same thing (it is defeq though so the proof should be trivial)</p>",
        "id": 179155834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572153733
    },
    {
        "content": "<p>We have a similar thing with <code>{mv_,}power_series</code> and <code>*_hom</code>. Are we approaching enough examples to try to automate this?</p>",
        "id": 179155938,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572153974
    },
    {
        "content": "<p>Because manually duplication will get out of sync <em>fast</em></p>",
        "id": 179155940,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572154007
    },
    {
        "content": "<p>Thanks Mario! I've realised I haven't refactored <code>algebra\\commute.lean</code> nearly as much as I could; I made a start and almost-duplicated whatever I needed to. This makes naming difficult though. Might just leave that file as it was last night for this PR. <br>\nBundling substructures does in general seem to lead to a lot of almost-duplication and convoluted names and I'm not familiar with that file, what's best for it, or how much depends on it. </p>\n<p>I'm gonna open a PR; I don't know how to use git so I branched off <code>bun_subs_with_new_toadditive</code> to make <code>bundled_submonoids_etc</code> and deleted the added files that I'm PR'ing after this, so it's gonna say I want to merge about 80 commits because of all the commits on <code>bun_subs_with_new_toadditive</code>. Does this matter if everything gets squashed in the end?</p>",
        "id": 179184792,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1572206770
    },
    {
        "content": "<p>I've seen plenty of PR's with a gazillion commits with names like \"oops\" and nobody seems to care.</p>",
        "id": 179187730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572211488
    },
    {
        "content": "<p>When you write a PR, the goal is to make the reviewers jobs easier. We don't want to squash the commits until we merge so that if we look several times at your PR, it's easier to identify what changed. As for meaningful commit messages, if you just fix a typo, no need for a long explanation. If you make a significant change, it's good to see where it happens and have a hint in the message as to what happened in there.</p>",
        "id": 179188155,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1572212267
    },
    {
        "content": "<p>Okay. Most of the commit messages are vaguely meaningful, but the majority are about files not in the PR.<br>\nI can note in the PR where most of the relevant commits are.</p>",
        "id": 179188540,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1572212994
    },
    {
        "content": "<p>I've always found in software projects that having a policy of doing at least a <code>rebase -i</code> before raising a PR helps with keeping the history of the master branch a lot cleaner.</p>",
        "id": 183961099,
        "sender_full_name": "James Weaver",
        "timestamp": 1576867155
    }
]