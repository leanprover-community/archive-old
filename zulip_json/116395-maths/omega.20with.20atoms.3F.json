[
    {
        "content": "<p>Should I expect <code>omega</code> to kill this goal:</p>\n<div class=\"codehilite\"><pre><span></span>1 goal\nn : ℕ,\nG_C G_L : list ℤ,\nhG : length G_C + length G_L = n + 1,\niv : ℕ,\nhi : iv &lt; length G_C\n⊢ iv + (length G_C - iv - 1) + length G_L = n\n</pre></div>\n\n\n<p>It doesn't seem to, I get the <code>clear tactic failed, target type depends on 'G_C'\n</code> error. Is this just a bug? If I do this</p>\n<div class=\"codehilite\"><pre><span></span>      <span class=\"n\">generalize</span> <span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">length</span> <span class=\"n\">G_C</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">hc</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n      <span class=\"n\">clear</span> <span class=\"n\">hc</span> <span class=\"n\">G_C</span><span class=\"o\">,</span>\n      <span class=\"n\">generalize</span> <span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">length</span> <span class=\"n\">G_L</span> <span class=\"bp\">=</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">hl</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n      <span class=\"n\">clear</span> <span class=\"n\">hl</span> <span class=\"n\">G_L</span><span class=\"o\">,</span>\n      <span class=\"n\">omega</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>then it works fine, i.e. I tell Lean that <code>length G_C</code> is just a constant natural. I also had to do the <code>clear</code>s or else I get other errors. Is this just the same bug in <code>omega</code>?</p>",
        "id": 181939518,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574786390
    },
    {
        "content": "<p>It's <code>omega</code> being overly sensitive about the context again. You can post it here. <a href=\"https://github.com/leanprover-community/mathlib/issues/1484\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1484\">https://github.com/leanprover-community/mathlib/issues/1484</a></p>",
        "id": 181939888,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1574786612
    },
    {
        "content": "<p>These things need <span class=\"user-mention\" data-user-id=\"116585\">@Seul Baek</span> 's attention though. I don't really want to start touching the <code>omega</code> internals myself.</p>",
        "id": 181939991,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1574786673
    },
    {
        "content": "<p>Sorry for taking a long time to fix with things. I pushed a bugfix which now makes <code>omega</code> treat any non-constant integer or natural number as a variable. I think it should now work with terms like <code>length l</code> or <code>fib n</code>.</p>",
        "id": 182137473,
        "sender_full_name": "Seul Baek",
        "timestamp": 1574977541
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"116585\">@Seul Baek</span> ! There's no hurry, it's an open source project and I'm sure you have other things to do, but I <em>really</em> appreciate it. I have an MSc student who is extensively using <code>omega</code>! If I remember correctly, you told me how it worked in Amsterdam :D</p>",
        "id": 182138637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574979457
    },
    {
        "content": "<p>Yes, thank you Seul! Just looking at the size of the PR, I'm very glad I didn't try this myself.</p>",
        "id": 182138933,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1574979859
    }
]