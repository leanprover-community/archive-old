[
    {
        "content": "<p>Can we define <a href=\"https://en.wikipedia.org/wiki/Convex_set#strictly_convex\">strict convexity</a> without a topology? The definition on wikipedia is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.convex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">strict_convex</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">open_segment</span> <span class=\"bp\">𝕜</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">⊆</span> <span class=\"n\">interior</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 255435389,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632934980
    },
    {
        "content": "<p>I'm thinking of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">strict_convex</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">is_extreme</span> <span class=\"bp\">𝕜</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">open_segment</span> <span class=\"bp\">𝕜</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 255436367,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632935309
    },
    {
        "content": "<p>which should be read as \"There's no plane on the surface of the set\"</p>",
        "id": 255436488,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632935359
    },
    {
        "content": "<p>Is that missing some parentheses?</p>",
        "id": 255440075,
        "sender_full_name": "Reid Barton",
        "timestamp": 1632936733
    },
    {
        "content": "<p>Hmm, no?</p>",
        "id": 255445093,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632938617
    },
    {
        "content": "<p>Here's a maybe cleaner way to write my proposed definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">strict_convex</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">is_extreme</span> <span class=\"bp\">𝕜</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">s.extreme_points</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 255446552,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632939021
    },
    {
        "content": "<p>That's the same as this definition, right?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">is_extreme</span> <span class=\"bp\">𝕜</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">\\</span> <span class=\"n\">s.extreme_points</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 255448518,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632939750
    },
    {
        "content": "<p>Yup, because of the elimination rule for <code>∃</code>.</p>",
        "id": 255460807,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632944205
    },
    {
        "content": "<p>Which I guess you could also write as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">is_extreme</span> <span class=\"bp\">𝕜</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">s.extreme_points</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 255463586,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632945290
    },
    {
        "content": "<p>is <code>x ∈ interior s</code> different from <code>∀ v, ∃ r &gt; 0, x + r • v ∈ s</code> at the intended level of generality?</p>",
        "id": 255469501,
        "sender_full_name": "David Wärn",
        "timestamp": 1632947640
    },
    {
        "content": "<p>Oh yeah. Take a union of infinitely many concentric spheres</p>",
        "id": 255469945,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632947798
    },
    {
        "content": "<p>My above proposed definitions don't imply <code>convex 𝕜 s</code>... Maybe we can just add <code>convex 𝕜 s ∧</code>?</p>",
        "id": 255470104,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632947866
    },
    {
        "content": "<p>I think I wanted to say <code>∀ v, ∃ r &gt; 0, ∀ t ∈ Icc 0 r, x + t • v ∈ s</code></p>",
        "id": 255473819,
        "sender_full_name": "David Wärn",
        "timestamp": 1632949319
    },
    {
        "content": "<p>Ahah! I think I got the idea.</p>",
        "id": 255735238,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633091300
    },
    {
        "content": "<p>What you want is to not have any <em>planar</em> bits on the boundary. So what you can ask for is that any nonzero linear functional reaches a single maximum.</p>",
        "id": 255735437,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633091407
    },
    {
        "content": "<p>which can be rewritten (thanks to someone's API <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span>) as <code>∀ t, is_exposed 𝕜 s t → ¬ s ⊆ t → t.subsingleton</code>.</p>",
        "id": 255735598,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633091499
    },
    {
        "content": "<p>The problem with the above definition is that it requires a normed space. I'm going to replace <code>is_exposed</code> with <code>is_extreme</code>.</p>",
        "id": 255873615,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633183493
    },
    {
        "content": "<p>Note that the difference between the usual definition will then be that \"flat\" sets can be strictly convex, because the topology doesn't see them.</p>",
        "id": 255873669,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633183556
    },
    {
        "content": "<p>Does anyone know whether that'll make a difference in applications?</p>",
        "id": 255873725,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633183588
    }
]