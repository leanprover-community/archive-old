[
    {
        "content": "<p>Currently the \"main\" integral in <code>measure_theory</code> is the integral (Lebesgue or Bochner) w.r.t. the canonical measure. There is a rudimentary interface for computing integrals w.r.t. non-canonical measures but it lags behind the \"main\" one, and one has to restate all theorems before using them.<br>\nI know quite a few theorems dealing with non-canonical measures or even with the space of measures. The simplest example is the substitution rule; actually it says something about push forward of a measure. There are many more advanced examples in dynamical systems, especially in ergodic theory.<br>\nI propose to refactor it so that all definitions/theorems take measure as an argument. It shouldn't be too hard to write <code>variables (m : measure α)</code> instead of <code>[measure_space α]</code>, then prefix each <code>apply</code> with <code>m.</code>. This way it will be easy to apply these theorems both to the canonical measure and non-canonical measures. E.g., we can leave current binder notation for integrals w.r.t. the canonical measure, and add some other notation for integrals w.r.t. any measure.<br>\nDo I miss something?</p>",
        "id": 186357042,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579754513
    },
    {
        "content": "<p>I would like common / important theorems to be restated with the notation, but I think it would be a good idea to do the main development in this context.</p>",
        "id": 186364387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579764428
    },
    {
        "content": "<p>I also think it is important to have all theorems and the main developments done with a typeclass measure. For instance, later on when you do probability theory, or ergodic theory with a fixed reference measure, you don't want to give explicitly the measure in all applications of lemmas. But I also agree that we will need versions taking the measure as an argument. Either by stating the most important lemmas in this context, or by crafting an attribute <code>@[with_explicit_measure]</code>...</p>",
        "id": 186367355,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1579768189
    },
    {
        "content": "<p>I like the idea of an attribute that creates a copy of the declaration in which the measure is explicit.</p>",
        "id": 186367554,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579768395
    },
    {
        "content": "<p>If we have a <code>notation </code>μ<code> := volume</code> then giving this parameter explicitly takes only 2 characters (space and <code>μ</code>).</p>",
        "id": 186386968,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579785569
    },
    {
        "content": "<p>You could even do local notation for those files.</p>",
        "id": 186387103,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1579785659
    },
    {
        "content": "<p>Yes, this could be a <code>localized notation</code>.</p>",
        "id": 186387128,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579785679
    },
    {
        "content": "<p>Then we won't need to have 2 versions of each theorem.</p>",
        "id": 186387143,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579785695
    },
    {
        "content": "<p>What I meant was that you could do local notation for <code>integral μ</code> or whatever.</p>",
        "id": 186387409,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1579785863
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> Which setup are you talking about: (1, current) stating theorems for the canonical measure, restating some of them for any measure; or (2) stating theorems for any measure, reusing for the canonical measure?</p>",
        "id": 186388520,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579786691
    },
    {
        "content": "<p>2</p>",
        "id": 186388589,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1579786773
    },
    {
        "content": "<p>Yes, I think that we should leave the current notation for integrals, and use a new one for integrals w.r.t. any measure.</p>",
        "id": 186389311,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579787082
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> In many cases (<code>simp</code>, <code>rw</code>, <code>apply</code>) you can just name the lemma, and let Lean figure out <code>m = volume</code> itself. In other cases I don't think that writing <code> μ</code> takes a lot of time.</p>",
        "id": 186389546,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579787238
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> To be sure: which context did you mean by \"this context\"?</p>",
        "id": 186389636,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579787289
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> So you suggest to make the measure explicit everywhere?</p>",
        "id": 186390258,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579787727
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Yes.</p>",
        "id": 186390283,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579787753
    },
    {
        "content": "<p>/me disappears for a few hours.</p>",
        "id": 186390343,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579787769
    },
    {
        "content": "<p><code>def μ := infer_instance</code> ??</p>",
        "id": 186390356,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579787782
    },
    {
        "content": "<p>More like notation mu = volume</p>",
        "id": 186397083,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579791917
    },
    {
        "content": "<p>I tried to do this several weeks ago. Here are some difficulties. I guess one challenge is how to write binder notations like <code>∫ a, f a</code> or <code>∀ₘ a, 0 ≤ f a</code>. If not using the binder notation, sometimes I just feel there are too many parameters and  I tend to mess up their orders.</p>",
        "id": 186404313,
        "sender_full_name": "Joe",
        "timestamp": 1579795964
    },
    {
        "content": "<p>A second thing is namespaces and theorem names. There are three versions of integrals : integral, integral on a subset, integral on an interval. Maybe there will be more in the future. Right now you can put the first integral (and its related theorems) in the namespace <code>measure_theory</code>, the second integral in the namespace <code>set</code>, the third integral in the namespace <code>real</code>, and call the corresponding theorems with the same name. I'm not sure what to do if everything has to be in the namespace <code>measure_theory.measure</code>.</p>",
        "id": 186404322,
        "sender_full_name": "Joe",
        "timestamp": 1579795972
    },
    {
        "content": "<p>A third thing is that you need to prefix everything with a measure even if you just want to use the default measure. For example, I only want to use the Lebesgue measure on the real line when proving the FTC.</p>",
        "id": 186404327,
        "sender_full_name": "Joe",
        "timestamp": 1579795975
    },
    {
        "content": "<p>By the way, with regard to the first point, I noticed that I defined <code>measurable_on</code> and <code>integrable_on</code> with variables in the order <code>integrable_on (s : set α) (f : α → β)</code>, which is the opposite of <code>continuous_on (f : α → β) (s : set α)</code>. I should align myself with the current convention. </p>\n<p>But are there any rules concerning the order of variables and the use of explicit and implicit variables? I often notice inconsistencies, which is sometimes annoying, because I have to guess how many underscores I should put down.</p>",
        "id": 186405590,
        "sender_full_name": "Joe",
        "timestamp": 1579796635
    },
    {
        "content": "<p>So I'm thinking why not just keep two copies?</p>",
        "id": 186411005,
        "sender_full_name": "Joe",
        "timestamp": 1579799463
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"127148\">@Joe</span> for detailed arguments. Now I have to go pick up kids but I'll try to read it carefully tonight or tomorrow.</p>",
        "id": 186429617,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579809883
    }
]