[
    {
        "content": "<p>I am writing an API for DVRs. I've just proved the following lemma about commutative rings:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">local_of_unique_nonzero_prime</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"err\">⊥</span> <span class=\"bp\">∧</span> <span class=\"n\">is_prime</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">local_ring</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"n\">local_of_unique_max_ideal</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">hPnonzero</span><span class=\"o\">,</span> <span class=\"n\">hPnot_top</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"n\">hPunique</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hPnot_top</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">maximal_of_no_maximal</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">M</span> <span class=\"n\">hPM</span> <span class=\"n\">hM</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ne_of_lt</span> <span class=\"n\">hPM</span><span class=\"o\">,</span>\n    <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hPunique</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">ne_bot_of_gt</span> <span class=\"n\">hPM</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">is_maximal</span><span class=\"bp\">.</span><span class=\"n\">is_prime</span> <span class=\"n\">hM</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">M</span> <span class=\"n\">hM</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hPunique</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">hM</span> <span class=\"k\">with</span> <span class=\"n\">hM1</span> <span class=\"n\">hM2</span><span class=\"o\">,</span>\n      <span class=\"n\">specialize</span> <span class=\"n\">hM2</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">bot_lt_iff_ne_bot</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hPnonzero</span><span class=\"o\">),</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hPnot_top</span> <span class=\"n\">hM2</span><span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">is_maximal</span><span class=\"bp\">.</span><span class=\"n\">is_prime</span> <span class=\"n\">hM</span><span class=\"o\">}}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>The proof is unremarkable: a unique non-zero prime ideal implies a unique maximal ideal by some fiddling. The proof looks to me like <code>tidy</code> could almost have done it. I use rcases, split, exact, apply, intros etc.</p>\n<p>I know that if Mario had written this proof he would then start golfing it and turning it into term mode. Johan has suggested that this sort of thing makes the proofs harder to maintain. What is the argument for termgolfing this proof? It will in future be a PR to mathlib I suspect. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ?</p>",
        "id": 202440073,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593526045
    },
    {
        "content": "<p>I think that golfing it into term mode doesn't really affect its maintainability in any particular direction</p>",
        "id": 202440262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593526133
    },
    {
        "content": "<p>but it does make it shorter</p>",
        "id": 202440279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593526139
    },
    {
        "content": "<p>there is a small compile time advantage for using less tactics, but it's more of a rounding error. Mostly I think it is just more tidy to get more done in less space</p>",
        "id": 202441015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593526495
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">local_of_unique_nonzero_prime&#39;</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"err\">⊥</span> <span class=\"bp\">∧</span> <span class=\"n\">is_prime</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">local_ring</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">hPnonzero</span><span class=\"o\">,</span> <span class=\"n\">hPnot_top</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"n\">hPunique</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"k\">in</span>\n<span class=\"n\">local_of_unique_max_ideal</span> <span class=\"bp\">⟨</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">hPnot_top</span><span class=\"o\">,</span>\n  <span class=\"n\">maximal_of_no_maximal</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">M</span> <span class=\"n\">hPM</span> <span class=\"n\">hM</span><span class=\"o\">,</span> <span class=\"n\">ne_of_lt</span> <span class=\"n\">hPM</span> <span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">hPunique</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">ne_bot_of_gt</span> <span class=\"n\">hPM</span><span class=\"o\">,</span> <span class=\"n\">is_maximal</span><span class=\"bp\">.</span><span class=\"n\">is_prime</span> <span class=\"n\">hM</span><span class=\"bp\">⟩</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">M</span> <span class=\"n\">hM</span><span class=\"o\">,</span> <span class=\"n\">hPunique</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">=</span> <span class=\"err\">⊥</span><span class=\"o\">),</span> <span class=\"n\">hPnot_top</span> <span class=\"err\">$</span> <span class=\"n\">hM</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">bot_lt_iff_ne_bot</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hPnonzero</span> <span class=\"o\">:</span> <span class=\"err\">⊥</span> <span class=\"bp\">&lt;</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">&lt;</span> <span class=\"n\">P</span><span class=\"o\">),</span> <span class=\"n\">is_maximal</span><span class=\"bp\">.</span><span class=\"n\">is_prime</span> <span class=\"n\">hM</span><span class=\"bp\">⟩⟩</span>\n</code></pre></div>\n\n\n<p>I did it (with Kenny helpnig me: <code>rintro rfl</code> -&gt; stupid triangle)</p>",
        "id": 202442704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593527268
    },
    {
        "content": "<p>I got this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">local_of_unique_nonzero_prime</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"err\">⊥</span> <span class=\"bp\">∧</span> <span class=\"n\">is_prime</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">local_ring</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"n\">local_of_unique_max_ideal</span> <span class=\"k\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">hPnonzero</span><span class=\"o\">,</span> <span class=\"n\">hPnot_top</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"n\">hPunique</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">hPnot_top</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">M</span> <span class=\"n\">hM</span><span class=\"o\">,</span> <span class=\"n\">hPunique</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">is_maximal</span><span class=\"bp\">.</span><span class=\"n\">is_prime</span> <span class=\"n\">hM</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">maximal_of_no_maximal</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">M</span> <span class=\"n\">hPM</span> <span class=\"n\">hM</span><span class=\"o\">,</span> <span class=\"n\">ne_of_lt</span> <span class=\"n\">hPM</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hPunique</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">ne_bot_of_gt</span> <span class=\"n\">hPM</span><span class=\"o\">,</span> <span class=\"n\">is_maximal</span><span class=\"bp\">.</span><span class=\"n\">is_prime</span> <span class=\"n\">hM</span><span class=\"bp\">⟩</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hPnot_top</span> <span class=\"o\">(</span><span class=\"n\">hM</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">bot_lt_iff_ne_bot</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hPnonzero</span><span class=\"o\">))</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202442715,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593527279
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/tactic.20or.20term.20mode.20proof.3F/near/202440262\">said</a>:</p>\n<blockquote>\n<p>I think that golfing it into term mode doesn't really affect its maintainability in any particular direction</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> do you agree with this?</p>",
        "id": 202442763,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593527286
    },
    {
        "content": "<p>notably it's not entirely term mode because <code>rcases</code> is great</p>",
        "id": 202442788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593527302
    },
    {
        "content": "<p><code>rintro rfl</code> is great too</p>",
        "id": 202442833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593527331
    },
    {
        "content": "<p>some of the best term mode techniques are in tactic mode</p>",
        "id": 202442869,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593527351
    },
    {
        "content": "<p>I think that <code>refine</code> is a nice middle ground here. You can chop a term mode proof into chunks where you have as much term mode proof as fits in one <code>refine</code> line</p>",
        "id": 202443084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593527443
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>elaboration of local_of_unique_nonzero_prime took 168ms\nelaboration of local_of_unique_nonzero_prime&#39; took 31.2ms\n</code></pre></div>",
        "id": 202443128,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593527465
    },
    {
        "content": "<p>I don't have an opinion...</p>",
        "id": 202443150,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593527472
    },
    {
        "content": "<p>Like I said: term mode is faster but they are both fast if you aren't using \"real\" tactics</p>",
        "id": 202443238,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593527517
    },
    {
        "content": "<p>You can of course write slow term mode proofs, but all other things being equal term mode proofs are faster</p>",
        "id": 202443335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593527545
    },
    {
        "content": "<p>This isn't Mario's proof, this is my original proof v my golfification</p>",
        "id": 202443391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593527571
    },
    {
        "content": "<p>I just golfed your proof</p>",
        "id": 202443431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593527588
    },
    {
        "content": "<p>Mario's proof doesn't compile because he had to guess what maximal_of_no_maximal was</p>",
        "id": 202443445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593527595
    },
    {
        "content": "<p>slow term mode proofs happen with unoptimal typeclass inference</p>",
        "id": 202443454,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593527599
    },
    {
        "content": "<p>I guessed what <code>maximal_of_no_maximal</code> was</p>",
        "id": 202443474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593527611
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- If P is not properly contained in any maximal ideal then it is not properly contained</span>\n<span class=\"cm\">  in any proper ideal -/</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">maximal_of_no_maximal</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hmax</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">is_maximal</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hPJ</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">&lt;</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">=</span> <span class=\"err\">⊤</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">by_contradiction</span> <span class=\"n\">hnonmax</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">exists_le_maximal</span> <span class=\"n\">J</span> <span class=\"n\">hnonmax</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">hM1</span><span class=\"o\">,</span> <span class=\"n\">hM2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hmax</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">hPJ</span> <span class=\"n\">hM2</span><span class=\"o\">)</span> <span class=\"n\">hM1</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202443477,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593527613
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">maximal_of_no_maximal</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"bp\">&lt;</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">is_maximal</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"bp\">&lt;</span> <span class=\"n\">J</span> <span class=\"bp\">→</span> <span class=\"n\">J</span> <span class=\"bp\">=</span> <span class=\"err\">⊤</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 202443500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593527631
    },
    {
        "content": "<p>Why are <code>R</code> and <code>P</code> explicit?</p>",
        "id": 202443551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593527643
    },
    {
        "content": "<p>because I wrote it 30 minutes ago and wasn't thinking</p>",
        "id": 202443579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593527656
    },
    {
        "content": "<p>same in this proof</p>",
        "id": 202443589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593527663
    },
    {
        "content": "<p>OK got it</p>",
        "id": 202443597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593527667
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">elaboration</span> <span class=\"n\">of</span> <span class=\"n\">local_of_unique_nonzero_prime&#39;&#39;</span> <span class=\"n\">took</span> <span class=\"mi\">80</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"n\">ms</span>\n</code></pre></div>",
        "id": 202443676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593527702
    },
    {
        "content": "<p>that's my proof?</p>",
        "id": 202443718,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593527719
    },
    {
        "content": "<p>Yes</p>",
        "id": 202443731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593527727
    },
    {
        "content": "<p>I guess rcases is the culprit</p>",
        "id": 202443759,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593527738
    },
    {
        "content": "<p>I think what you are seeing is that there is overhead per tactic parse and call</p>",
        "id": 202443802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593527757
    },
    {
        "content": "<p>we've seen some of this in kenny's X is slow tests</p>",
        "id": 202443868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593527770
    },
    {
        "content": "<p>I don't think that the timing here is worth sweating over</p>",
        "id": 202444022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593527872
    },
    {
        "content": "<p>but isn't tactic parse part of the \"parsing\" time?</p>",
        "id": 202444335,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593527996
    },
    {
        "content": "<p>Honestly I have no idea, profiling times are really inaccurate and hard to interpret</p>",
        "id": 202444458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593528034
    },
    {
        "content": "<p>And there's no simple way to find out how long something actually takes, right?</p>",
        "id": 202444537,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593528070
    },
    {
        "content": "<p>Anyway, which version goes in mathlib?</p>",
        "id": 202444569,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593528086
    },
    {
        "content": "<p>I'm obviously biased toward my own version. I think the full term mode version has a bit too many things going on at once; in particular the type ascriptions suggest that the proof does not really proceed in left to right textual order and needs some elaboration hints</p>",
        "id": 202444961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593528215
    },
    {
        "content": "<p>so that's where I would normally cut it up into multiple <code>refine</code> blocks</p>",
        "id": 202445009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593528237
    },
    {
        "content": "<p>your term mode proof doesn't compile for me, is <code>local_ring</code> a prop now?</p>",
        "id": 202445187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593528298
    },
    {
        "content": "<p>I guess the type ascriptions are there in this proof just to show that you can do <code>rw</code> using the funny arrow</p>",
        "id": 202445951,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593528589
    },
    {
        "content": "<p>I think if you have to go out of your way to do something in term mode it's not worth it. It is a space saver if you are only doing <code>apply</code>/<code>intro</code>/<code>split</code>/<code>exact</code> but for most other things it's not worth it</p>",
        "id": 202446150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593528666
    },
    {
        "content": "<p>In particular I think that <code>obtain</code>/<code>rcases</code> looks better than the term mode equivalent using <code>Exists.rec_on</code> or what have you. If you can do it with <code>let &lt;...&gt;</code> or <code>\\lam &lt;...&gt;</code> then that's fine, although <code>rcases</code> can do some things that destructuring let/lambda can't</p>",
        "id": 202446427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593528777
    },
    {
        "content": "<p>And <code>rw</code> has no real term mode equivalent (the funny arrow doesn't even come close)</p>",
        "id": 202446629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593528850
    },
    {
        "content": "<p>For the everyday fast compiling mathlib proof I recommend some combination of these tactics. If you venture into other tactics like <code>simp</code>, <code>ring</code>, <code>linarith</code>, or <code>tauto</code> then tactic compile time becomes a serious factor</p>",
        "id": 202446823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593528938
    }
]