[
    {
        "content": "<p>I've just noticed that <strong>any</strong> type that acts on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> automatically acts on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span>, thanks to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.has_scalar\">docs#complex.has_scalar</a>. Do we actually use it for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo mathvariant=\"normal\">≠</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">R \\ne\\mathbb R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>?</p>",
        "id": 264113810,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638941264
    },
    {
        "content": "<p>One day we might want to add the action of (a type synonym for) <code>multiplicative (zmod 2)</code> or <code>equiv.perm (fin 2)</code> on <code>is_R_or_C k</code> by <code>conj</code> (or should I say <code>star</code>?). Then we'll have a diamond.</p>",
        "id": 264116539,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638944642
    },
    {
        "content": "<p>Does that not create a problem with <code>nsmul</code> already?</p>",
        "id": 264118700,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638946931
    },
    {
        "content": "<p>Probably, it creates a non-defeq diamond for <code>nsmul</code>. The example above creates a diamond with no propositional equality.</p>",
        "id": 264119655,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638947957
    },
    {
        "content": "<p>Isn't it defeq by design for <code>nsmul</code>?</p>",
        "id": 264122324,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1638950291
    },
    {
        "content": "<p>It's useful for the action by nnreal I imagine</p>",
        "id": 264125356,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638952564
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/116395-maths/topic/complex.2Ehas_scalar/near/264122324\">said</a>:</p>\n<blockquote>\n<p>Isn't it defeq by design for <code>nsmul</code>?</p>\n</blockquote>\n<p>No, it is defeq by design for <code>has_scalar ℝ ℂ</code>. For <code>has_scalar ℕ ℂ</code>, one instance results in <code>1 • z = z + 0</code> while the other results in <code>(1 : ℝ) • z</code>.</p>",
        "id": 264128467,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638954443
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/complex.2Ehas_scalar/near/264125356\">said</a>:</p>\n<blockquote>\n<p>It's useful for the action by nnreal I imagine</p>\n</blockquote>\n<p>See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nnreal.mul_action\">docs#nnreal.mul_action</a></p>",
        "id": 264128576,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638954502
    },
    {
        "content": "<p>Are you sure your claim about nsmul is true? I assume <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.comm_ring/src\">src#complex.comm_ring</a> is where the implementation is</p>",
        "id": 264128763,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638954609
    },
    {
        "content": "<p>Indeed the implementation is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">nsmul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">z.re</span> <span class=\"bp\">-</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">z.im</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">z.im</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">z.re</span><span class=\"o\">⟩,</span>\n</code></pre></div>\n<p>Isn't that the same as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.has_scalar/src\">src#complex.has_scalar</a>?</p>",
        "id": 264128936,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638954721
    },
    {
        "content": "<p>You're right.</p>",
        "id": 264129042,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638954770
    },
    {
        "content": "<p>I think you end up with a diamond in general if you true to make a star action as you suggest though</p>",
        "id": 264129193,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638954872
    },
    {
        "content": "<p>Consider the action on complex matrices, where one path to the diamond transposes but the other doesn't</p>",
        "id": 264129233,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638954911
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> Do we ever need this transitive instance?</p>",
        "id": 264129268,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638954944
    },
    {
        "content": "<p>One way to solve this might be a <code>allow_transitive_smul</code> typeclass, which has to be present to enable transitivity; it would be skipped for the conj action you mention</p>",
        "id": 264129337,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638954974
    },
    {
        "content": "<p>I think I'm actually the one responsible for that transitive instance</p>",
        "id": 264129388,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638955006
    },
    {
        "content": "<p>I think that before discussing workarounds we should figure out whether we need it.</p>",
        "id": 264129589,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638955169
    },
    {
        "content": "<p>My point with my comment above is that the instance you're proposing causes problems elsewhere too, not just on the complex numbers. So I'd argue that <code>complex.has_scalar</code> is not really the problem, the problem is the new instance you propose.</p>",
        "id": 264129970,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638955393
    },
    {
        "content": "<p>Could you please elaborate? What action on matrices are you talking about?</p>",
        "id": 264130193,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638955523
    },
    {
        "content": "<p>The same one by <code>multiplicative (zmod 2)</code> as you mention, presumably where <code>of_add 1 • M</code> is <code>conj M</code>/ <code>star M</code> and <code>of_add 0 • M = M</code></p>",
        "id": 264130308,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638955578
    },
    {
        "content": "<p>(assuming I read your message correctly)</p>",
        "id": 264130422,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638955656
    },
    {
        "content": "<p>Which isn't to say I think your instance is a bad idea in isolation, but that <code>complex.has_scalar</code> forming a diamond with it is a symptom of a bigger problem with actions as a whole.</p>",
        "id": 264132397,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638956712
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/complex.2Ehas_scalar/near/264129268\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> Do we ever need this transitive instance?</p>\n</blockquote>\n<p>Personally I never needed it, no, and I agree I don't really see in which situation it would be useful.</p>",
        "id": 264135053,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1638958440
    },
    {
        "content": "<p>I think the case I was thinking of was cases when <code>R</code> is nothing concrete, and instead of requiring separate actions on R and C that agree (<code>[has_scalar R ℝ] [has_scalar R ℂ] [is_scalar_tower R ℝ ℂ]</code>), you can just assume <code>[has_scalar R ℝ]</code> and get the other action for free.</p>",
        "id": 264135591,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638958796
    },
    {
        "content": "<p>In the same way that instead of writing <code>[has_scalar R ℝ] [has_scalar R (ι → ℝ)] [is_scalar_tower R ℝ (ι → ℝ)]</code> we can currently write <code>[has_scalar R ℝ]</code> and get the <code>pi</code> action for free.</p>",
        "id": 264135694,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638958859
    },
    {
        "content": "<p>But is there a situation where it is useful to state or prove a genuine theorem? There are many actions that we could declare, but that we probably shouldn't declare globally if they are not useful enough. I am wondering if we are in this situation, or if there is a convincing example that it is a good idea to have it.</p>",
        "id": 264136840,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1638959579
    },
    {
        "content": "<p>And we possibly have a diamond because of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/rat.algebra_rat\">docs#rat.algebra_rat</a></p>",
        "id": 264138773,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638960769
    },
    {
        "content": "<p>That diamond is all over the place though, so I don't think is really relevant to this discussion</p>",
        "id": 264139039,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638960939
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/116395-maths/topic/complex.2Ehas_scalar/near/264136840\">said</a>:</p>\n<blockquote>\n<p>But is there a situation where it is useful to state or prove a genuine theorem? There are many actions that we could declare, but that we probably shouldn't declare globally if they are not useful enough. I am wondering if we are in this situation, or if there is a convincing example that it is a good idea to have it.</p>\n</blockquote>\n<p>I'm not really opposed to changing it to a <code>def</code> that's locally an instance for the few lemmas about it today; that way if we need it back again, it's easy to re-enable without rebuilding everything</p>",
        "id": 264139148,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638961007
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/complex.2Ehas_scalar/near/264139039\">said</a>:</p>\n<blockquote>\n<p>That diamond is all over the place though, so I don't think is really relevant to this discussion</p>\n</blockquote>\n<p>Is it? Do we have lots of instances that result in a different <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span>-action?</p>",
        "id": 264142207,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638962860
    },
    {
        "content": "<p>Hmm, maybe you're right. I guess there aren't many fields that are constructed directly out of smaller fields</p>",
        "id": 264143766,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638963946
    },
    {
        "content": "<p>Maybe the action on subfields also has such a diamond? I haven't checked.</p>",
        "id": 264143823,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638963968
    }
]