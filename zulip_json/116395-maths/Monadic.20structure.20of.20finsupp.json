[
    {
        "content": "<p>Working on proving the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/locally_finite_order\">docs#locally_finite_order</a> instance on <code>finsupp</code>, Bhavik noticed that <code>finset</code> is a monad in the category of types with a zero whose morphisms are given by <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp\">docs#finsupp</a>. But is it a <em>strong</em> monad? That is, can you fill in that <code>sorry</code> in a sensible fashion?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finsupp.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">pointwise</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">finsupp.map_finset</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 265540934,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639993692
    },
    {
        "content": "<p>Wouldn't <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.image\">docs#finset.image</a> work here?</p>",
        "id": 265541592,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1639994112
    },
    {
        "content": "<p>Ah of course not, since we want to get a finsupp out :P</p>",
        "id": 265541634,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1639994137
    },
    {
        "content": "<p>I think there's only one option that would be natural in <code>ι</code>: send everything to <code>0</code>.</p>",
        "id": 265541771,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1639994215
    },
    {
        "content": "<p>That's what I fear too.</p>",
        "id": 265541799,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639994230
    },
    {
        "content": "<p>Suppose <code>ι</code> is infinite and <code>map_finset</code> sends some <code>s ≠ ∅</code> to something nonzero. Then by naturality, all <code>s</code> of the same cardinality also map to something nonzero, but there are infinitely many of them.</p>",
        "id": 265542088,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1639994405
    },
    {
        "content": "<p>Okay, so what if <code>fintype ι</code>?</p>",
        "id": 265542179,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639994433
    },
    {
        "content": "<p>Note however that <code>0 = {0}</code>, not <code>∅</code>. See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.has_zero\">docs#finset.has_zero</a></p>",
        "id": 265542217,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639994462
    },
    {
        "content": "<p>It makes a lot of sense in that context!</p>",
        "id": 265542258,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639994489
    },
    {
        "content": "<p>Then <code>finset ι</code> is also finite and <code>finsupp</code> of something finite is equivalent to <code>→</code>. So you get exactly <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.image\">docs#finset.image</a> :P</p>",
        "id": 265542289,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1639994512
    },
    {
        "content": "<p>Oh yeah, boring</p>",
        "id": 265542357,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639994528
    },
    {
        "content": "<p>I guess there are two natural options: send everything to <code>0</code> or send everything to <code>0</code> except <code>∅</code> which is sent to <code>∅</code>.</p>",
        "id": 265542443,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1639994587
    },
    {
        "content": "<p>This definition of <code>0</code> is a godsend to me. For example, this definition makes sense:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Given a finitely supported function `f : ι →₀ finset α`, one can define the finset</span>\n<span class=\"sd\">`f.pi` of all finitely supported functions whose value at `i` is in `f i` for all `i`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">pi</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f.support.finsupp</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>(I also defined <code>finset.finsupp</code> earlier)</p>",
        "id": 265542448,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639994590
    },
    {
        "content": "<p>Hmm, <a href=\"https://hoogle.haskell.org/?hoogle=(i%20%2D%3E%20m%20a)%20%2D%3E%20m%20(i%20%2D%3E%20a)&amp;scope=set%3Astackage\">Hoogle</a> doesn't know an operation of that shape. I guess it's like an exponential object but not quite?</p>",
        "id": 265542668,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1639994751
    },
    {
        "content": "<p>It's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.pi\">docs#finset.pi</a> but with a better type and bundled as a <code>finsupp</code></p>",
        "id": 265542766,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639994808
    },
    {
        "content": "<p>I don't know enough about exponential objects to tell more.</p>",
        "id": 265543446,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639995249
    },
    {
        "content": "<p>Generally an expression of that form won't exist for a monad, but when it does (in a ccc) it can be used to show a (Haskell) applicative upgrades to a monad (of course assuming some naturality commutative diagrams)</p>",
        "id": 265553822,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1640001899
    },
    {
        "content": "<p>finsupp.pi is something like giving a commutator in one direction for the monad over the exponential, in other words a nat trans from (exp compose finset) to (finset compose exp) - it was actually the form of this type that made me notice the monad that Yaël mentions</p>",
        "id": 265554056,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1640002054
    }
]