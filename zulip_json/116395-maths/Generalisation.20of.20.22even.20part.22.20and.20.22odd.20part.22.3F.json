[
    {
        "content": "<p>If we have <code>n = 2^k * n'</code> where <code>n'</code> is odd, we might call <code>2^k</code> and <code>n'</code> the \"even part\" and \"odd part\" of <code>n</code> respectively.  Is there standard terminology for the generalisation of this to arbitrary prime <code>p</code> (when we have <code>n = p^k * n'</code> for <code>n'</code> not divisible by <code>p</code>)?</p>",
        "id": 290228980,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1658320768
    },
    {
        "content": "<p>The <code>k</code> is called the <code>p</code>-adic valuation of <code>n</code>.</p>",
        "id": 290229144,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1658320900
    },
    {
        "content": "<p>For context, I'm interested in proving generalisations of the lemmas at the beginning of <span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span> and <span class=\"user-mention\" data-user-id=\"479997\">@Sean Golinski</span>'s <a href=\"https://github.com/leanprover-community/mathlib/pull/12254\">#12254</a></p>",
        "id": 290229978,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1658321429
    },
    {
        "content": "<p>in some ways this is just <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.pow_factorization_dvd\">docs#nat.pow_factorization_dvd</a></p>",
        "id": 290231284,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1658322181
    },
    {
        "content": "<p>Indeed, the idea would be to re-phrase lemmas like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.pow_factorization_dvd\">docs#nat.pow_factorization_dvd</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.prime.pow_dvd_iff_dvd_pow_factorization\">docs#nat.prime.pow_dvd_iff_dvd_pow_factorization</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.not_dvd_div_pow_factorization\">docs#nat.not_dvd_div_pow_factorization</a>, and also to prove general versions of <code>mul_two_power_part</code> and <code>mul_odd_part</code> from <a href=\"https://github.com/leanprover-community/mathlib/pull/12254\">#12254</a>.  So it would be nice to have some more concise notation for <code>p ^ n.factorization p</code> and <code>n / p ^ n.factorization p</code>.</p>",
        "id": 290232280,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1658322749
    },
    {
        "content": "<p>I would use <code>nat.pow_vp</code> or <code>nat.inv_vp_norm</code> (<code>nat.inv_val_norm</code>?) for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>p</mi><mrow><msub><mi>v</mi><mi>p</mi></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">p^{v_p(n)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0824em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.888em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1645em;\"><span style=\"top:-2.357em;margin-left:-0.0359em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2819em;\"><span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span></span></span></span>, but I am not aware if there is a standard name for this object.</p>",
        "id": 290232883,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1658323063
    },
    {
        "content": "<p>I'm having a basic difficulty in getting this to work as I'd like.  A simplified <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.factorization.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">even_part</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n.factorization</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pow_factorization_dvd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">even_part</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">even_part</span><span class=\"o\">],</span>  <span class=\"c1\">-- if this is commented out, the next line fails</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">factors_count_eq</span><span class=\"o\">],</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I'd like to be able to write lemmas in terms of <code>even_part</code> (or, in reality, in terms of the generalisation to arbitrary <code>p</code>), but in a way that makes this name transparent to Lean.  I thought making the definition <code>reducible</code> would do this, but the above <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> shows that it doesn't: when the goal is <code>even_part n ∣ n </code>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.factors_count_eq\">docs#nat.factors_count_eq</a> can't find a match for <code>n.factorization p</code>.</p>\n<p>I've also tried changing the <code>@[reducible] def</code> to <code>abbreviation</code>, but that also doesn't work.  Is there any way to get what I want?</p>",
        "id": 290621821,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1658593859
    },
    {
        "content": "<p>Specifically, what I want is to be able to write <code>even_part n</code> in theorem statements etc. and for Lean to treat this as if I'd written <code>2 ^ n.factorization 2</code>.  But I don't want to have to explicitly unfold or rewrite <code>even_part</code>, or make a <code>simp</code> lemma that automatically rewrites it away, since that voids the purpose of having the notation.</p>",
        "id": 290621967,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1658594075
    },
    {
        "content": "<p>Can you use <code>notation</code>?</p>",
        "id": 290622152,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1658594349
    },
    {
        "content": "<p>Ah, yes, <code>notation `even_part` n := 2 ^ (nat.factorization n 2)</code> works!  Thanks!</p>",
        "id": 290622335,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1658594549
    },
    {
        "content": "<p>Oh, except that it immediately gets rewritten to <code>2 ^ (nat.factorization n 2)</code> in the goal of the lemma, which I was hoping to avoid.</p>",
        "id": 290622601,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1658594915
    },
    {
        "content": "<p>That's strange, normally notation is also used in the goal view.</p>",
        "id": 290622815,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1658595224
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.factorization.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">even_part</span><span class=\"bp\">`</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">nat.factorization</span> <span class=\"n\">n</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pow_factorization_dvd'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">even_part</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- At this point the goal is ` 2 ^ (n.factorization) 2 ∣ n`</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">factors_count_eq</span><span class=\"o\">],</span>  <span class=\"c1\">-- and hence this rewrite works</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 290622962,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1658595371
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.factorization\">docs#nat.factorization</a> gives a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp\">docs#finsupp</a>, so there's a <code>has_coe_to_fun</code> coercion in there. I've found that pretty printing notation that involves a coercion like that tends to be unreliable.</p>",
        "id": 290623895,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658596458
    },
    {
        "content": "<p>Not sure if it's relevant to what you're doing, but I did some work with the even and odd parts of factorisation over here: <a href=\"https://github.com/Ruben-VandeVelde/flt/blob/1c4d172fa4ab02ff70da13e384b11b019ad4b58a/src/odd_prime_or_four.lean\">https://github.com/Ruben-VandeVelde/flt/blob/1c4d172fa4ab02ff70da13e384b11b019ad4b58a/src/odd_prime_or_four.lean</a></p>",
        "id": 290624922,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1658597748
    },
    {
        "content": "<p>Ok, perhaps I might have to accept that any notation I define for this will be unfolded in the goal view.  But I guess it would still be useful to have it to simplify lemma statements.</p>",
        "id": 290626440,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1658600073
    },
    {
        "content": "<p>So how do I generalise from <code>even_part</code> to a function of two arguments?  If I write the following, I get a <code>λ</code> in the goal state which blocks the <code>rw</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.factorization.basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">padic_part</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">nat.factorization</span> <span class=\"n\">n</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pow_factorization_dvd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">padic_part</span> <span class=\"n\">n</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- The goal state here is `(λ (n p : ℕ), p ^ (n.factorization) p) n p ∣ n`</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">factors_count_eq</span><span class=\"o\">],</span>  <span class=\"c1\">-- and so this rewrite fails</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 290627407,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1658601550
    },
    {
        "content": "<p>(Sorry, I'm aware that these are very elementary questions, but I can't find answers in the various documentation I've searched through.)</p>",
        "id": 290627425,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1658601598
    },
    {
        "content": "<p>The p-adic valuation is also known as \"ord\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.factorization</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">ord</span><span class=\"o\">[</span><span class=\"bp\">`</span> <span class=\"n\">p</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">nat.factorization</span> <span class=\"n\">n</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pow_factorization_dvd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ord</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- The goal state here is `(λ (n p : ℕ), p ^ (n.factorization) p) n p ∣ n`</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">factors_count_eq</span><span class=\"o\">],</span>  <span class=\"c1\">-- rewrite succeeds</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 290629047,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658603964
    },
    {
        "content": "<p>The <code>max</code> precedence makes it so <code>ord[p]</code> is as if it were function application. One weakness of this notation is that it <em>must</em> be applied otherwise it's a parse error. But you can still write <code>λ n, ord[2] n</code>.</p>",
        "id": 290629208,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658604205
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"422543\">Stuart Presnell</span> <a href=\"#narrow/stream/116395-maths/topic/Generalisation.20of.20.22even.20part.22.20and.20.22odd.20part.22.3F/near/290626440\">said</a>:</p>\n<blockquote>\n<p>Ok, perhaps I might have to accept that any notation I define for this will be unfolded in the goal view.</p>\n</blockquote>\n<p>I hope it'll be fixed someday, so maybe it's fine if we pretend for now that it does work?</p>",
        "id": 290629348,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658604364
    },
    {
        "content": "<p>Fantastic, thanks, that works nicely</p>",
        "id": 290630472,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1658606052
    },
    {
        "content": "<p>One odd detail is that when I put the cursor over <code>ord</code> in the document, the popup is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">has_pow.pow</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">has_pow</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">],</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"c1\">-------</span>\n<span class=\"n\">n.factorization</span> <span class=\"n\">is</span> <span class=\"n\">the</span> <span class=\"n\">finitely</span> <span class=\"n\">supported</span> <span class=\"n\">function</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span> <span class=\"n\">mapping</span> <span class=\"n\">each</span> <span class=\"n\">prime</span> <span class=\"n\">factor</span> <span class=\"n\">of</span> <span class=\"n\">n</span> <span class=\"n\">to</span> <span class=\"n\">its</span> <span class=\"n\">multiplicity</span> <span class=\"k\">in</span> <span class=\"n\">n.</span>\n</code></pre></div>\n<p>Is this a bug?</p>",
        "id": 290630557,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1658606239
    },
    {
        "content": "<p>Also, can anyone suggest a suitable name for <code>n / ord[p] n</code>, the generalisation of \"odd part\"?   I've provisionally called it <code>coord[p] n</code>, but that's not a good name because of the clash with <em>coordinates</em>.</p>",
        "id": 290630936,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1658606834
    },
    {
        "content": "<p>(I'm open to the answer that this should just be spelled <code>n / ord[p] n</code> and not given its own notation.  But it might still be good to have a name for it for use in lemma names.)</p>",
        "id": 290630987,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1658606908
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"422543\">@Stuart Presnell</span> Sorry, I'm not sure what I was thinking, but <code>ord[p] n</code> should be <code>nat.factorization n p</code>.  Maybe <code>ord_proj[p] n</code> for the projection onto the <code>p</code> part and <code>ord_compl[p] n</code> for the projection onto the \"orthogonal complement\"?</p>",
        "id": 290685571,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658676176
    },
    {
        "content": "<p>Yes, I was wondering about that when I came back to look at it again this morning.  Thanks for the suggestions!</p>",
        "id": 290697904,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1658693886
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15589\">#15589</a><br>\nThanks to everyone for your help</p>",
        "id": 290795180,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1658771657
    },
    {
        "content": "<p>Just curious: is it not possible to reuse the code in src/number_theory/padics/padic_val.lean ?</p>",
        "id": 290934088,
        "sender_full_name": "David Ang",
        "timestamp": 1658859040
    },
    {
        "content": "<p>I see the p-adic valuation in there (which I think should be the same as <code>nat.factorization</code>, though the definition is different), but I'm not sure there's the p-part of a number</p>",
        "id": 290934909,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658859419
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.factorization\">docs#nat.factorization</a> is defined as <code>padic_val_nat p n</code> for <code>p.prime</code> (and zero otherwise), in the form of a finsupp <code>ℕ →₀ ℕ</code> to use the extensive finsupp API.</p>",
        "id": 290990662,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1658900324
    }
]