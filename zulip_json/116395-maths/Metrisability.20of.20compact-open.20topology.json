[
    {
        "content": "<p>Here's a basic fact that I believe we have yet to teach Mathlib.</p>\n<p>If <code>X</code> is a compact topological space and <code>Y</code> is a metric space then the compact-open topology on <code>C(X, Y)</code> is metrisable with distance function <code>dist f g = supr (Œª x, dist (f x) (g x))</code>.</p>",
        "id": 249912863,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629321338
    },
    {
        "content": "<p>We do have the compact-open topology <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_map.compact_open\">docs#continuous_map.compact_open</a>, (which arguably should be a <code>def</code> rather than an <code>instance</code>) and we do have the metric space structure <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_map.metric_space\">docs#continuous_map.metric_space</a>, but I believe we do not have this result.</p>",
        "id": 249912889,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629321355
    },
    {
        "content": "<p>I may want this result in the near future so I want to check I understand how to formalise it in such a way that the topology induced from the metric space structure is defeq to the compact-open topology. In other words, I'd like the following to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.continuous_function.compact</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.compact_open</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">compact_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">continuous_map.compact_open</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n          <span class=\"n\">metric_space.to_uniform_space'.to_topological_space</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- Fails</span>\n</code></pre></div>",
        "id": 249912983,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629321399
    },
    {
        "content": "<p>Looking at the definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pseudo_metric_space\">docs#pseudo_metric_space</a>, I see its constructor cleverly contains a redundant argument <code>to_uniform_space</code> which allows you to specify the topology manually and then I suppose <code>uniformity_dist</code> becomes the actual mathematical fact about metrisability. I think I recall watching a talk about this being invented to make the topology on the product of metrics spaces defeq to the product topology.</p>\n<p>Have I got that right?</p>",
        "id": 249913063,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629321443
    },
    {
        "content": "<p>(In fact the situation is slightly more complicated because of the fact that we define the metric space structure on <code>C(X, Y)</code> via the bounded continuous functions but this is an independent complication.)</p>",
        "id": 249913197,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629321486
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_map.metric_space\">docs#continuous_map.metric_space</a> assumes the target is a normed group</p>",
        "id": 249913702,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629321769
    },
    {
        "content": "<p>Otherwise you got the picture mostly right, except there are actually three layers, not two: metric, uniform structure, topology.</p>",
        "id": 249913919,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629321888
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/Metrisability.20of.20compact-open.20topology/near/249913702\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_map.metric_space\">docs#continuous_map.metric_space</a> assumes the target is a normed group</p>\n</blockquote>\n<p>Ha, I thought <a href=\"https://github.com/leanprover-community/mathlib/issues/8717\">#8717</a> would land before anyone read this.  I think we're minutes away from what I said being literally true.</p>",
        "id": 249914356,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629322128
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/Metrisability.20of.20compact-open.20topology/near/249913919\">said</a>:</p>\n<blockquote>\n<p>Otherwise you got the picture mostly right, except there are actually three layers, not two: metric, uniform structure, topology.</p>\n</blockquote>\n<p>Right, thanks. I am aware that there is a uniform structure sitting in between the topology and metric space structures and was ignoring it to simplify but of course, it does matter. Thanks for highlighting it.</p>",
        "id": 249914525,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629322232
    },
    {
        "content": "<p>It seems we don't really have a nice API to do that, but you can still wrestle through it to get to the crucial point (which is left as an exercise of course):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.continuous_function.compact</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.compact_open</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">continuous_map</span> <span class=\"n\">filter</span> <span class=\"n\">set</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">compact_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> the following function is extacted from `uniform_space_of_dist` -/</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">uniform_space.core_of_dist</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">dist_self</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">dist_comm</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">dist</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">dist_triangle</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">‚â§</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">dist</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">uniform_space.core</span> <span class=\"n\">Œ±</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">uniformity</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">‚®Ö</span> <span class=\"n\">Œµ</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">ùìü</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">Œ±</span><span class=\"bp\">√ó</span><span class=\"n\">Œ±</span> <span class=\"bp\">|</span> <span class=\"n\">dist</span> <span class=\"n\">p.1</span> <span class=\"n\">p.2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Œµ</span><span class=\"o\">}),</span>\n  <span class=\"n\">refl</span>       <span class=\"o\">:=</span> <span class=\"n\">le_infi</span> <span class=\"bp\">$</span> <span class=\"k\">assume</span> <span class=\"n\">Œµ</span><span class=\"o\">,</span> <span class=\"n\">le_infi</span> <span class=\"bp\">$</span>\n    <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">set.subset_def</span><span class=\"o\">,</span> <span class=\"n\">id_rel</span><span class=\"o\">,</span> <span class=\"n\">dist_self</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">&gt;</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">},</span>\n  <span class=\"n\">comp</span>       <span class=\"o\">:=</span> <span class=\"n\">le_infi</span> <span class=\"bp\">$</span> <span class=\"k\">assume</span> <span class=\"n\">Œµ</span><span class=\"o\">,</span> <span class=\"n\">le_infi</span> <span class=\"bp\">$</span> <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">lift'_le</span>\n    <span class=\"o\">(</span><span class=\"n\">mem_infi_of_mem</span> <span class=\"o\">(</span><span class=\"n\">Œµ</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"n\">mem_infi_of_mem</span> <span class=\"o\">(</span><span class=\"n\">div_pos</span> <span class=\"n\">h</span> <span class=\"n\">zero_lt_two</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subset.refl</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"bp\">$</span>\n    <span class=\"k\">have</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">),</span> <span class=\"n\">dist</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Œµ</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">dist</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Œµ</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">dist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Œµ</span><span class=\"o\">,</span>\n      <span class=\"k\">from</span> <span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">hac</span> <span class=\"n\">hcb</span><span class=\"o\">,</span>\n      <span class=\"k\">calc</span> <span class=\"n\">dist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">‚â§</span> <span class=\"n\">dist</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">dist</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">dist_triangle</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Œµ</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">Œµ</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">add_lt_add</span> <span class=\"n\">hac</span> <span class=\"n\">hcb</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">Œµ</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_add_div_same</span><span class=\"o\">,</span> <span class=\"n\">add_self_div_two</span><span class=\"o\">],</span>\n    <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">comp_rel</span><span class=\"o\">],</span>\n  <span class=\"n\">symm</span>       <span class=\"o\">:=</span> <span class=\"n\">tendsto_infi.2</span> <span class=\"bp\">$</span> <span class=\"k\">assume</span> <span class=\"n\">Œµ</span><span class=\"o\">,</span> <span class=\"n\">tendsto_infi.2</span> <span class=\"bp\">$</span> <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">tendsto_infi'</span> <span class=\"n\">Œµ</span> <span class=\"bp\">$</span> <span class=\"n\">tendsto_infi'</span> <span class=\"n\">h</span> <span class=\"bp\">$</span> <span class=\"n\">tendsto_principal_principal.2</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dist_comm</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">better_metric</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">,</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">dist</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">equiv_bounded_of_compact</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">equiv_bounded_of_compact</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n  <span class=\"n\">dist_self</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">dist_self</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">dist_comm</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">dist_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">dist_triangle</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">dist_triangle</span> <span class=\"n\">_</span> <span class=\"n\">_</span>  <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">edist</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">edist</span> <span class=\"o\">(</span><span class=\"n\">equiv_bounded_of_compact</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">equiv_bounded_of_compact</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n  <span class=\"n\">edist_dist</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">edist_dist</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">to_uniform_space</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">is_open_uniformity</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">uniform_space.core_of_dist</span><span class=\"o\">],</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"bp\">..</span><span class=\"n\">uniform_space.core_of_dist</span> <span class=\"n\">dist</span> <span class=\"n\">dist_self</span> <span class=\"n\">dist_comm</span> <span class=\"n\">dist_triangle</span><span class=\"o\">},</span>\n  <span class=\"n\">uniformity_dist</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">eq_of_dist_eq_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">equiv_bounded_of_compact</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">eq_of_dist_eq_zero</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">continuous_map.compact_open</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">metric_space.to_uniform_space'</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">better_metric</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_pseudo_metric_space</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_topological_space</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 249955349,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629361010
    },
    {
        "content": "<p>Note the <code>@</code> in the example is only there because mathlib currently has the wrong metric space instance. Once you'll have replace this wrong instance with the better one you'll be able to state the example as you originally did.</p>",
        "id": 249955519,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629361084
    },
    {
        "content": "<p>Thank you so much for this!</p>",
        "id": 249955591,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629361130
    },
    {
        "content": "<p>My secret reason for originally wanting this was to eliminate <a href=\"https://github.com/leanprover-community/mathlib/blob/8b0db1a748bac6d8dab74e4a38be1acdbf7143ce/src/number_theory/L_functions.lean#L48\">this lemma</a> because of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_map.continuous_const'\">docs#continuous_map.continuous_const'</a></p>",
        "id": 249956214,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629361415
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span>  I felt guilty for leaving you in such a mess so I came back and wrote an API:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.continuous_function.compact</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.compact_open</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">continuous_map</span> <span class=\"n\">filter</span> <span class=\"n\">set</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">compact_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> the following function is extacted from `uniform_space_of_dist` -/</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">uniform_space.core_of_dist</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">dist_self</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">dist_comm</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">dist</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">dist_triangle</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">‚â§</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">dist</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">uniform_space.core</span> <span class=\"n\">Œ±</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">uniformity</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">‚®Ö</span> <span class=\"n\">Œµ</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">ùìü</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">Œ±</span><span class=\"bp\">√ó</span><span class=\"n\">Œ±</span> <span class=\"bp\">|</span> <span class=\"n\">dist</span> <span class=\"n\">p.1</span> <span class=\"n\">p.2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Œµ</span><span class=\"o\">}),</span>\n  <span class=\"n\">refl</span>       <span class=\"o\">:=</span> <span class=\"n\">le_infi</span> <span class=\"bp\">$</span> <span class=\"k\">assume</span> <span class=\"n\">Œµ</span><span class=\"o\">,</span> <span class=\"n\">le_infi</span> <span class=\"bp\">$</span>\n    <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">set.subset_def</span><span class=\"o\">,</span> <span class=\"n\">id_rel</span><span class=\"o\">,</span> <span class=\"n\">dist_self</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">&gt;</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">},</span>\n  <span class=\"n\">comp</span>       <span class=\"o\">:=</span> <span class=\"n\">le_infi</span> <span class=\"bp\">$</span> <span class=\"k\">assume</span> <span class=\"n\">Œµ</span><span class=\"o\">,</span> <span class=\"n\">le_infi</span> <span class=\"bp\">$</span> <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">lift'_le</span>\n    <span class=\"o\">(</span><span class=\"n\">mem_infi_of_mem</span> <span class=\"o\">(</span><span class=\"n\">Œµ</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"n\">mem_infi_of_mem</span> <span class=\"o\">(</span><span class=\"n\">div_pos</span> <span class=\"n\">h</span> <span class=\"n\">zero_lt_two</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subset.refl</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"bp\">$</span>\n    <span class=\"k\">have</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">),</span> <span class=\"n\">dist</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Œµ</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">dist</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Œµ</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">dist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Œµ</span><span class=\"o\">,</span>\n      <span class=\"k\">from</span> <span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">hac</span> <span class=\"n\">hcb</span><span class=\"o\">,</span>\n      <span class=\"k\">calc</span> <span class=\"n\">dist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">‚â§</span> <span class=\"n\">dist</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">dist</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">dist_triangle</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Œµ</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">Œµ</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">add_lt_add</span> <span class=\"n\">hac</span> <span class=\"n\">hcb</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">Œµ</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_add_div_same</span><span class=\"o\">,</span> <span class=\"n\">add_self_div_two</span><span class=\"o\">],</span>\n    <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">comp_rel</span><span class=\"o\">],</span>\n  <span class=\"n\">symm</span>       <span class=\"o\">:=</span> <span class=\"n\">tendsto_infi.2</span> <span class=\"bp\">$</span> <span class=\"k\">assume</span> <span class=\"n\">Œµ</span><span class=\"o\">,</span> <span class=\"n\">tendsto_infi.2</span> <span class=\"bp\">$</span> <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">tendsto_infi'</span> <span class=\"n\">Œµ</span> <span class=\"bp\">$</span> <span class=\"n\">tendsto_infi'</span> <span class=\"n\">h</span> <span class=\"bp\">$</span> <span class=\"n\">tendsto_principal_principal.2</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dist_comm</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pseudo_metric_space.of_metrizable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">dist_self</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">dist_comm</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">dist</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">dist_triangle</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">‚â§</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">dist</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"n\">s</span> <span class=\"bp\">‚Üî</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">Œµ</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Œµ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">y</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">pseudo_metric_space</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">dist</span> <span class=\"o\">:=</span> <span class=\"n\">dist</span><span class=\"o\">,</span>\n  <span class=\"n\">dist_self</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">dist_self</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">dist_comm</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">dist_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">dist_triangle</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">dist_triangle</span> <span class=\"n\">_</span> <span class=\"n\">_</span>  <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">to_uniform_space</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">is_open_uniformity</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">uniform_space.core_of_dist</span><span class=\"o\">],</span>\n    <span class=\"n\">intros</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"n\">is_open</span> <span class=\"n\">s</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">H</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">forall_congr</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">forall_congr</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">x_in</span><span class=\"o\">,</span>\n    <span class=\"n\">erw</span> <span class=\"o\">(</span><span class=\"n\">has_basis_binfi_principal</span> <span class=\"n\">_</span> <span class=\"n\">nonempty_Ioi</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mem_iff</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">exists_congr</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">Œµ</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">exists_congr</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">Œµ_pos</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">prod.forall</span><span class=\"o\">,</span> <span class=\"n\">set_of_subset_set_of</span><span class=\"o\">],</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">y</span> <span class=\"n\">H</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">y</span> <span class=\"n\">H</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">y</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hxy</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">Œª</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"o\">‚ü®</span><span class=\"n\">min</span> <span class=\"n\">r</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">lt_min</span> <span class=\"n\">hr</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n        <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">dist</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">hx</span> <span class=\"o\">(</span><span class=\"n\">min_le_left</span> <span class=\"n\">r</span> <span class=\"n\">p</span><span class=\"o\">),</span>\n        <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">dist</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">hx</span> <span class=\"o\">(</span><span class=\"n\">min_le_right</span> <span class=\"n\">r</span> <span class=\"n\">p</span><span class=\"o\">)‚ü©</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"bp\">..</span><span class=\"n\">uniform_space.core_of_dist</span> <span class=\"n\">dist</span> <span class=\"n\">dist_self</span> <span class=\"n\">dist_comm</span> <span class=\"n\">dist_triangle</span> <span class=\"o\">},</span>\n  <span class=\"n\">uniformity_dist</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">better_metric</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">,</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">eq_of_dist_eq_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">equiv_bounded_of_compact</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">eq_of_dist_eq_zero</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">pseudo_metric_space.of_metrizable</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">equiv_bounded_of_compact</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">equiv_bounded_of_compact</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">dist_self</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">dist_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">dist_triangle</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">begin</span>\n\n      <span class=\"gr\">sorry</span>\n    <span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">continuous_map.compact_open</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">metric_space.to_uniform_space'</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">better_metric</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_pseudo_metric_space</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_topological_space</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 249963388,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629366442
    },
    {
        "content": "<p>Note that the actual content about the compact open topology is still <code>sorry</code> but the goal is no longer a big mess.</p>",
        "id": 249963426,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629366482
    },
    {
        "content": "<p>Yes I see that. This is marvellous!</p>",
        "id": 249963484,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629366500
    },
    {
        "content": "<p>Now it's independent from the internals of our implementation of uniform and metric spaces.</p>",
        "id": 249963535,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629366542
    },
    {
        "content": "<p>Right.</p>",
        "id": 249963586,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629366599
    },
    {
        "content": "<p>From a quick scan it looks like <code>uniform_space.core_of_dist</code> and <code>pseudo_metric_space.of_metrizable</code> deserve to be PR'd on their own, right?</p>",
        "id": 249963646,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629366616
    },
    {
        "content": "<p>Sure. The first one needs to be put right above <a href=\"https://leanprover-community.github.io/mathlib_docs/find/uniform_space_of_dist\">docs#uniform_space_of_dist</a> and used there</p>",
        "id": 249963741,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629366693
    },
    {
        "content": "<p>I'll PR that right away</p>",
        "id": 249963924,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629366820
    },
    {
        "content": "<p>Excellent! I'll resume learning about convexity for now :-)</p>",
        "id": 249964010,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629366858
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8759\">#8759</a></p>",
        "id": 249964919,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629367492
    },
    {
        "content": "<p>I returned to this yesterday. Despite the fact that you made it easy to establish the metrisability while ignoring the uniform space structure, I decided I wanted to prove the uniform structure was also compatible (and keep everything defeq).</p>",
        "id": 251696336,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1630579795
    },
    {
        "content": "<p>I started like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.compact_open</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">filter</span> <span class=\"n\">uniformity</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">uniform_space</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">uniformity</span> <span class=\"o\">:=</span> <span class=\"bp\">‚®Ö</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hK</span> <span class=\"o\">:</span> <span class=\"n\">is_compact</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùì§</span> <span class=\"n\">Œ≤</span><span class=\"o\">),</span>\n                  <span class=\"bp\">ùìü</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">p.1</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p.2</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">‚àà</span> <span class=\"n\">V</span> <span class=\"o\">},</span>\n  <span class=\"n\">refl</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- trivial</span>\n  <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- trivial</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- trivial</span>\n  <span class=\"n\">is_open_uniformity</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"c\">/-</span><span class=\"cm\"> some work needed -/</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>(which hopefully is correct) and then decided the key to <code>is_open_uniformity</code> was a corollary of the Lebesgue number lemma so I've created <a href=\"https://github.com/leanprover-community/mathlib/issues/8963\">#8963</a> .</p>",
        "id": 251696483,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1630579885
    },
    {
        "content": "<p>I only wanted to give this a day at most so I'm going to pause again and resume in a week or so.</p>",
        "id": 251696524,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1630579916
    },
    {
        "content": "<p>Can this uniform space structure be expressed as the Sup or Inf (I'm not sure which way the order goes) of a family of uniform space structures, one for each compact set <code>K</code> in <code>Œ±</code>, which are respectively the pullbacks to <code>C(Œ±, Œ≤)</code> from <code>Œ± ‚Üí Œ≤</code> of a uniform space structure on <code>Œ± ‚Üí Œ≤</code>? Maybe the pi-type uniform structure,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">uniform_convergence_on</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">uniform_space</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">uniform_space.of_core</span> <span class=\"o\">(</span><span class=\"bp\">‚®Ö</span> <span class=\"n\">a</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">uniform_space.comap</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">_i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_core</span>\n</code></pre></div>\n<p>(edit: or on second thoughts maybe some other uniform structure, but the point remains)</p>",
        "id": 252100790,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1630874701
    },
    {
        "content": "<p>By definition if one takes <code>K = set.univ</code> this is really the pi uniform space structure.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">uniform_convergence_on</span> <span class=\"n\">set.univ</span> <span class=\"o\">:</span> <span class=\"n\">uniform_space</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">uniform_space</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 252100982,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1630874927
    },
    {
        "content": "<p>Also, is there a theorem somewhere in mathlib relating the compact-open topology to <code>tendsto_locally_uniformly</code>?  Something like this, though maybe I'm missing some conditions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.uniform_space.uniform_convergence</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.compact_open</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Œπ</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">Œ≤</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">Œ≤</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œπ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto_locally_uniformly</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">filter.tendsto</span> <span class=\"n\">F</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 252101385,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1630875402
    },
    {
        "content": "<p>[just a comment on the ordering: to turn a poset into a category one turns <code>a&lt;=b</code> into a map <code>a -&gt; b</code> and this is the \"philosophy\" in general; by which I mean that for two uniform structures U1 and U2 on a type X, it's set up so that U1 &lt;= U2 iff id : (X, U1) -&gt; (X,U2) is continuous. I think this is the logic; it's how I remember the ordering for topological spaces.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.uniform_space.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">u‚ÇÅ</span> <span class=\"n\">u‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">uniform_space</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">u‚ÇÅ</span> <span class=\"bp\">‚â§</span> <span class=\"n\">u‚ÇÇ</span> <span class=\"bp\">‚Üî</span> <span class=\"bp\">@</span><span class=\"n\">uniform_continuous</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ±</span> <span class=\"n\">u‚ÇÅ</span> <span class=\"n\">u‚ÇÇ</span> <span class=\"n\">id</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">uniform_continuous_iff</span><span class=\"o\">,</span> <span class=\"n\">uniform_space_comap_id</span><span class=\"o\">],</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>]</p>",
        "id": 252101965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630876052
    },
    {
        "content": "<p>To reframe my main question more succinctly:</p>\n<ul>\n<li>is there a family of topologies <code>uniform_convergence_on K</code> on <code>C(Œ±, Œ≤)</code>, parametrized by the compact sets <code>K</code> of <code>Œ±</code>, such that the compact-open topology is the infimum of these topologies?</li>\n<li>if so, and if moreover <code>Œ≤</code> is a uniform space, does the topology <code>uniform_convergence_on K</code> come from some natural uniform structure?</li>\n</ul>",
        "id": 252104390,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1630878955
    },
    {
        "content": "<p>Dumb questions: does the functor from uniform spaces to topological spaces preserve Infs or Sups? I'm assuming the compact open topology isn't in general coming from a compact open uniformity</p>",
        "id": 252106690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630881527
    },
    {
        "content": "<p>I have no idea, thinking about uniform spaces makes my head hurt, but I thought that this</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Metrisability.20of.20compact-open.20topology/near/252106690\">said</a>:</p>\n<blockquote>\n<p>the compact open topology ... coming from a compact open uniformity</p>\n</blockquote>\n<p>is what Oliver was doing <a href=\"#narrow/stream/116395-maths/topic/Metrisability.20of.20compact-open.20topology/near/251696483\">here</a>.</p>",
        "id": 252106826,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1630881683
    },
    {
        "content": "<p>Aah -- so we are assuming that the target is a uniform space and not just a topological space?</p>",
        "id": 252108064,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630883130
    },
    {
        "content": "<p>I am more interested in the uniform-space-target case.  But maybe this part</p>\n<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/Metrisability.20of.20compact-open.20topology/near/252104390\">said</a>:</p>\n<blockquote>\n<ul>\n<li>is there a family of topologies <code>uniform_convergence_on K</code> on <code>C(Œ±, Œ≤)</code>, parametrized by the compact sets <code>K</code> of <code>Œ±</code>, such that the compact-open topology is the infimum of these topologies?</li>\n</ul>\n</blockquote>\n<p>is true even if the target is just a topological space?</p>",
        "id": 252108153,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1630883237
    },
    {
        "content": "<p>[Another irrelevant point: my understanding is that for general topological spaces the compact open topology isn't quite as nice as one would help, i.e. it doesn't give a good \"internal hom\" structure on the category of topological spaces (in contrast to the category of abelian groups, where Hom(A,B) is naturally an abelian group and this abelian structure plays well with everything) and this was perhaps one of the things which motivates the study of condensed sets instead.]</p>",
        "id": 252108626,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630883791
    },
    {
        "content": "<p>[now back at Lean] <a href=\"https://leanprover-community.github.io/mathlib_docs/find/to_topological_space_Inf\">docs#to_topological_space_Inf</a> says that Infs for uniform spaces and topological spaces agree.</p>",
        "id": 252108723,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630883886
    },
    {
        "content": "<p>I think it is formally true (i.e. true by definition, at least by Wikipedia's definition) that for K compact in X, if T(K) is the coarsest topology on C(X,Y) such that for all U in Y open, the set of f in C(X,Y) such that f(K) \\subseteq U is open, then the compact open topology on C(X,Y) is the topology generated by all of the T(K) as K varies, i.e. the Inf of these topologies in the mathlib sense. The reason is simply that the compact open topology on C(X,Y) is, if my understanding is correct, the coarsest topology (fewest open sets) such that V(K,U) is open for all K compact and U open, where V(K,U) is the f such that f(K) \\subseteq U.</p>",
        "id": 252109477,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630884810
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/Metrisability.20of.20compact-open.20topology/near/252101385\">said</a>:</p>\n<blockquote>\n<p>Also, is there a theorem somewhere in mathlib relating the compact-open topology to <code>tendsto_locally_uniformly</code>?  Something like this, though maybe I'm missing some conditions:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.uniform_space.uniform_convergence</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.compact_open</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Œπ</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">Œ≤</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">Œ≤</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œπ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto_locally_uniformly</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">filter.tendsto</span> <span class=\"n\">F</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This seems to be pretty much the content of the second paragraph of <a href=\"https://en.wikipedia.org/wiki/Compact-open_topology\">the Wikipedia page on the compact open topology</a> (and there's also the implicit claim that if beta is not assumed to be a uniform space then this is false -- edit: actually I guess if beta isn't a uniform space the claim doesn't even make sense).</p>",
        "id": 252109860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630885225
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Metrisability.20of.20compact-open.20topology/near/252109860\">said</a>:</p>\n<blockquote>\n<p>This seems to be pretty much the content of the second paragraph of <a href=\"https://en.wikipedia.org/wiki/Compact-open_topology\">the Wikipedia page on the compact open topology</a> (and there's also the implicit claim that if beta is not assumed to be a uniform space then this is false -- edit: actually I guess if beta isn't a uniform space the claim doesn't even make sense).</p>\n</blockquote>\n<p>But it's not in mathlib -- is that right?</p>",
        "id": 252118373,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1630895005
    },
    {
        "content": "<p>Correct, this is not in Mathlib. Indeed a regex search for <code>import.*compact_open</code> shows nothing imports <code>topology/compact_open.lean</code> so the only things Mathlib knows about the CO topology are in this file.</p>",
        "id": 252146710,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1630918770
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/Metrisability.20of.20compact-open.20topology/near/252108153\">said</a>:</p>\n<blockquote>\n<p>I am more interested in the uniform-space-target case.  But maybe this part</p>\n<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/Metrisability.20of.20compact-open.20topology/near/252104390\">said</a>:</p>\n<blockquote>\n<ul>\n<li>is there a family of topologies <code>uniform_convergence_on K</code> on <code>C(Œ±, Œ≤)</code>, parametrized by the compact sets <code>K</code> of <code>Œ±</code>, such that the compact-open topology is the infimum of these topologies?</li>\n</ul>\n</blockquote>\n<p>is true even if the target is just a topological space?</p>\n</blockquote>\n<p>I think I must be parsing this paragraph incorrectly because I cannot make sense of <code>uniform_convergence_on K</code> without assuming <code>Œ≤</code> carries a uniform space structure: haven't you defined<code>uniform_convergence_on</code> using <code>uniform_space.comap</code>?</p>",
        "id": 252146993,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1630918884
    },
    {
        "content": "<p>In any case I can well imagine that once we start developing the CO topology / uniform space structure further, we will find it useful provide these characterisations of them (e.g., the coarsest structure such that property X holds). For now I just want to actually get the definition of the uniform structure on <code>C(Œ±, Œ≤)</code> in place (when <code>Œ≤</code> is uniform).</p>",
        "id": 252147758,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1630919289
    },
    {
        "content": "<p>With regard to the connection with Pi types, the compact open topology can be defined on the space of all maps <code>Œ± ‚Üí Œ≤</code> and then CO topology on <code>C(Œ±, Œ≤)</code> arises as the subspace topology. Mathematically it seems a bit ridiculous to topologise <code>Œ± ‚Üí Œ≤</code> but I can imagine it __might__ be useful to define the compact open topology on <code>C(Œ±, Œ≤)</code> this way because it might allow a bit more flexibility when formalising. (E.g., if we have a subset of maps <code>Œ± ‚Üí Œ≤</code> that are continuous but not definitionally a subset of <code>C(Œ±, Œ≤)</code>.)</p>",
        "id": 252148360,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1630919625
    },
    {
        "content": "<p>Anyway, none of the above answers your interesting questions but I claim the first thing to do is to fill in the proof of <code>is_open_uniformity</code> <a href=\"#narrow/stream/116395-maths/topic/Metrisability.20of.20compact-open.20topology/near/251696483\">here</a> and I claim the first thing to do for that is to merge <a href=\"https://github.com/leanprover-community/mathlib/issues/8963\">#8963</a></p>",
        "id": 252148535,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1630919708
    },
    {
        "content": "<p>Depending on how much progress I make with my primary goal this week, I'll try to return to this toward the end of the week.</p>",
        "id": 252149060,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1630920002
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/116395-maths/topic/Metrisability.20of.20compact-open.20topology/near/252148360\">said</a>:</p>\n<blockquote>\n<p>Mathematically it seems a bit ridiculous to topologise <code>Œ± ‚Üí Œ≤</code></p>\n</blockquote>\n<p>In fact, it already bears a topology, right?  The topology of pointwise convergence, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Pi.topological_space\">docs#Pi.topological_space</a>.  I was fighting against this before in a couple of experiments.</p>",
        "id": 252195278,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1630944183
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/116395-maths/topic/Metrisability.20of.20compact-open.20topology/near/252146993\">said</a>:</p>\n<blockquote>\n<p>I think I must be parsing this paragraph incorrectly because I cannot make sense of <code>uniform_convergence_on K</code> without assuming <code>Œ≤</code> carries a uniform space structure: haven't you defined<code>uniform_convergence_on</code> using <code>uniform_space.comap</code>?</p>\n</blockquote>\n<p>Indeed I had a second idea here, different from the <code>comap</code> stuff, which I didn't write out explicitly.  I was wondering if, by analogy with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/compact_open/src\">src#compact_open</a>, we could define a family of topologies which I will temporarily call <code>uniform_convergence_on K</code> (but this is a bad name since it doesn't require a uniform structure):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">uniform_convergence_on</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">topological_space.generate_from</span>\n  <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"bp\">|</span> <span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">u</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">compact_open.gen</span> <span class=\"n\">s</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 252195570,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1630944378
    },
    {
        "content": "<p>And if, then, it would be true that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">continuous_map.compact_open</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">Œ≤</span><span class=\"o\">))</span>\n  <span class=\"bp\">=</span> <span class=\"bp\">‚®Ö</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_compact</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">uniform_convergence_on</span> <span class=\"n\">Œ≤</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 252195633,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1630944429
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Metrisability.20of.20compact-open.20topology/near/252109477\">said</a>:</p>\n<blockquote>\n<p>I think it is formally true (i.e. true by definition, at least by Wikipedia's definition) that for K compact in X, if T(K) is the coarsest topology on C(X,Y) such that for all U in Y open, the set of f in C(X,Y) such that f(K) \\subseteq U is open, then the compact open topology on C(X,Y) is the topology generated by all of the T(K) as K varies, i.e. the Inf of these topologies in the mathlib sense</p>\n</blockquote>\n<p>This is effectively defining <code>uniform_convergence_on K</code> as the topology <code>T(K)</code> described here by Kevin.</p>",
        "id": 252195710,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1630944482
    },
    {
        "content": "<p>Then, instead of uniformizing <code>compact_open</code> directly, it would suffice for you to uniformize each of the individual topologies <code>uniform_convergence_on K</code>.</p>",
        "id": 252195815,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1630944559
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/Metrisability.20of.20compact-open.20topology/near/252195633\">said</a>:</p>\n<blockquote>\n<p>And if, then, it would be true that</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">continuous_map.compact_open</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">Œ≤</span><span class=\"o\">))</span>\n  <span class=\"bp\">=</span> <span class=\"bp\">‚®Ö</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_compact</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">uniform_convergence_on</span> <span class=\"n\">Œ≤</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Right I understand now. Yes, I agree that will probably be useful quite soon once one starts proving things with the compact-open topology.</p>",
        "id": 252196147,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1630944785
    },
    {
        "content": "<p>For me, the motivation is that I would like to relate the topology <code>compact_open</code> to the family of pseudo-metric space structures</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sup_metric_on</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_dist</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">‚ü®</span><span class=\"bp\">Œª</span><span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">Inf</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">‚â§</span> <span class=\"n\">C</span> <span class=\"bp\">‚àß</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">‚â§</span> <span class=\"n\">C</span><span class=\"o\">}‚ü©</span>\n</code></pre></div>\n<p>(pseudo-metric because functions which agree on <code>s</code> are at distance 0 from each other).  I was hoping that it would be true that <code>compact_open</code> is the Inf over all compact <code>K</code> of the topologies associated to <code>sup_metric_on</code>.</p>",
        "id": 252196282,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1630944858
    },
    {
        "content": "<p>If I manage to get to this later in the week, I'll consider this approach.</p>",
        "id": 252196289,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1630944862
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/Metrisability.20of.20compact-open.20topology/near/252196282\">said</a>:</p>\n<blockquote>\n<p>For me, the motivation is that I would like to relate the topology <code>compact_open</code> to the family of pseudo-metric space structures</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sup_metric_on</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_dist</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">‚ü®</span><span class=\"bp\">Œª</span><span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">Inf</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">‚â§</span> <span class=\"n\">C</span> <span class=\"bp\">‚àß</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">‚â§</span> <span class=\"n\">C</span><span class=\"o\">}‚ü©</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Do you want <code>Œ±</code> (or <code>s</code>) to be compact here? Don't you also have the problem that functions which are unboundedly far away from each other will be distance 0 with this definition?</p>",
        "id": 252196676,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1630945121
    },
    {
        "content": "<p>You're right, I was thinking <code>s</code> should be compact.</p>",
        "id": 252196769,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1630945175
    },
    {
        "content": "<p>OK so in that case you essentially want the exact thing that caused me to start this thread, except that you also want the <code>_on</code> version because you have <code>s</code>.</p>",
        "id": 252196886,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1630945233
    },
    {
        "content": "<p>I mean we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_map.metric_space\">docs#continuous_map.metric_space</a> already and it's metric is (indirectly) what you have defined because it comes from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bounded_continuous_function.has_dist\">docs#bounded_continuous_function.has_dist</a></p>",
        "id": 252196974,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1630945306
    },
    {
        "content": "<p>Yes! Although I don't care about putting a literal (somewhat arbitrary) metric compatible with the compact-open topology for a general (not necessarily compact) domain, instead I care about connecting it (maybe as the Inf) to a certain family of canonical pseudo-metrics.</p>",
        "id": 252197090,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1630945361
    },
    {
        "content": "<p>And indeed, if this all works out, we probably want to refactor <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_map.metric_space\">docs#continuous_map.metric_space</a>  to be a special case of this construction, the case when the whole space <code>Œ±</code> is compact.</p>",
        "id": 252197188,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1630945431
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/Metrisability.20of.20compact-open.20topology/near/252197188\">said</a>:</p>\n<blockquote>\n<p>And indeed, if this all works out, we probably want to refactor <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_map.metric_space\">docs#continuous_map.metric_space</a>  to be a special case of this construction, the case when the whole space <code>Œ±</code> is compact.</p>\n</blockquote>\n<p>I plan to do this. I don't think it would be hard; it's just prioritised behind a bunch of other stuff. Maybe you'll get there before me ;-)</p>",
        "id": 252197323,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1630945516
    },
    {
        "content": "<p>This is all in the service of outlining what should replace <span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span>'s version of the Weierstrass M-test ... maybe I got a bit distracted :)</p>",
        "id": 252197532,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1630945656
    },
    {
        "content": "<p>Likewise I was lead here from a distant land. I think I understand your point of view now. I think it's totally achievable and just requires a couple of solid days.</p>",
        "id": 252197666,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1630945753
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/Metrisability.20of.20compact-open.20topology/near/252197532\">said</a>:</p>\n<blockquote>\n<p>This is all in the service of outlining what should replace <span class=\"user-mention silent\" data-user-id=\"389019\">Chris Birkbeck</span>'s version of the Weierstrass M-test ... maybe I got a bit distracted :)</p>\n</blockquote>\n<p>Hmm yes, maybe it's best I wait a bit  :)</p>",
        "id": 252198603,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1630946354
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> I've made <a href=\"https://github.com/leanprover-community/mathlib/issues/9046\">#9046</a>, expressing the compact-open topology as an Inf of topologies.  The statement looks like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The compact-open topology is equal to the infimum, as `s` varies over the compact subsets of</span>\n<span class=\"sd\">`Œ±`, of the topologies of uniform convergence on `s`. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">compact_open_eq_Inf_uniform_on</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous_map.compact_open</span> <span class=\"bp\">=</span> <span class=\"bp\">‚®Ö</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_compact</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">uniform_on</span> <span class=\"n\">Œ≤</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>Let me solicit opinions on two points:</p>\n<ul>\n<li>a better name for what I have called <code>uniform on Œ≤ s</code>, i.e. a certain family of topologies on <code>C(Œ±, Œ≤)</code>, parametrized by <code>s : set Œ±</code> ... if <code>Œ≤</code> is a uniform space and <code>s</code> is compact then this topology should be the topology of uniform convergence on <code>s</code>, but <code>uniform_on</code> seems like a bad name because it doesn't require a uniform structure on <code>Œ≤</code></li>\n<li>should I actually redefine <code>compact_open</code> to this <code>Inf</code> definition, or keep the old definition?</li>\n</ul>",
        "id": 252235641,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1630974145
    },
    {
        "content": "<p>Maybe <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> is the right person to ask.</p>",
        "id": 252235821,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1630974332
    },
    {
        "content": "<p>Oh wow, thanks <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> , really nice work. I'll comment on the PR and thanks!</p>",
        "id": 252260005,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1630997947
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> I finally came back to the problem of proving that the topology of compact convergence (when the target is a uniform space) is the same as the compact-open topology.</p>",
        "id": 259114305,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1635262146
    },
    {
        "content": "<p>Don't celebrate too soon because I'm not done yet but I did get this far:</p>",
        "id": 259114366,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1635262171
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.compact_open</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.uniform_space.basic</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u‚ÇÅ</span> <span class=\"n\">u‚ÇÇ</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">filter</span> <span class=\"n\">uniformity</span> <span class=\"n\">topological_space</span>\n<span class=\"kn\">open</span> <span class=\"n\">uniform_space</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÇ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">Œ≤</span> <span class=\"bp\">√ó</span> <span class=\"n\">Œ≤</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">Œ≤</span><span class=\"o\">))</span>\n\n<span class=\"sd\">/-- A subbase for the topology of compact convergence. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">uniform_gen</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"bp\">|</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">‚àà</span> <span class=\"n\">V</span> <span class=\"o\">}</span>\n\n<span class=\"sd\">/-- The topology of compact convergence. I claim this topology is induced by a uniform structure,</span>\n<span class=\"sd\">defined below. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">compact_convergence_topology</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">topological_space.generate_from</span>\n  <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"bp\">|</span> <span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hK</span> <span class=\"o\">:</span> <span class=\"n\">is_compact</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùì§</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">Œ≤</span><span class=\"o\">)),</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">uniform_gen</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mem_uniform_gen_self</span> <span class=\"o\">(</span><span class=\"n\">hV</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùì§</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">‚àà</span> <span class=\"n\">uniform_gen</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">refl_mem_uniformity</span> <span class=\"n\">hV</span>\n\n<span class=\"sd\">/-- This should be sufficient to show we actually have a neighbourhood basis. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">uniform_gen_nhd_basis</span> <span class=\"o\">{</span><span class=\"n\">g‚ÇÅ</span> <span class=\"n\">g‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">Œ≤</span><span class=\"o\">)}</span>\n  <span class=\"o\">(</span><span class=\"n\">h‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"n\">g‚ÇÅ</span> <span class=\"bp\">‚àà</span> <span class=\"n\">uniform_gen</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">g‚ÇÇ</span> <span class=\"bp\">‚àà</span> <span class=\"n\">uniform_gen</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"n\">g‚ÇÅ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">g‚ÇÇ</span> <span class=\"bp\">‚àà</span> <span class=\"n\">uniform_gen</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">‚óã</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">g‚ÇÅ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h‚ÇÅ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">h‚ÇÇ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">‚ü©</span>\n\n<span class=\"sd\">/-- Any point of `compact_open.gen K U` is also an interior point wrt the topology of compact</span>\n<span class=\"sd\">convergence.</span>\n\n<span class=\"sd\">The topology of compact convergence is thus at least as fine as the compact-open topology. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">uniform_gen_subset_compact_open</span> <span class=\"o\">(</span><span class=\"n\">hK</span> <span class=\"o\">:</span> <span class=\"n\">is_compact</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hU</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">‚àà</span> <span class=\"n\">continuous_map.compact_open.gen</span> <span class=\"n\">K</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùì§</span> <span class=\"n\">Œ≤</span><span class=\"o\">),</span> <span class=\"n\">uniform_gen</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"n\">f</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">continuous_map.compact_open.gen</span> <span class=\"n\">K</span> <span class=\"n\">U</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">hV‚ÇÅ</span><span class=\"o\">,</span> <span class=\"n\">hV‚ÇÇ</span><span class=\"o\">,</span> <span class=\"n\">hV‚ÇÉ</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">lebesgue_number_of_compact_open</span> <span class=\"o\">(</span><span class=\"n\">hK.image</span> <span class=\"n\">f.continuous</span><span class=\"o\">)</span> <span class=\"n\">hU</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">‚ü®</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">hV‚ÇÅ</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">‚ü©,</span>\n  <span class=\"n\">rintros</span> <span class=\"n\">g</span> <span class=\"n\">hg</span> <span class=\"bp\">-</span> <span class=\"o\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">‚ü©,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hV‚ÇÉ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">‚ü©</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/-- The point `f` in `uniform_gen K V f` is also an interior point wrt the compact-open topology.</span>\n\n<span class=\"sd\">From this it should follow that the compact-open topology is at least as fine as the topology of</span>\n<span class=\"sd\">compact convergence. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Inter_compact_open_gen_subset_uniform_gen</span> <span class=\"o\">(</span><span class=\"n\">hK</span> <span class=\"o\">:</span> <span class=\"n\">is_compact</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hV</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùì§</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">Œπ</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">u‚ÇÅ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">Œπ</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hC</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_compact</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">set</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hU</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">)),</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">‚ãÇ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">continuous_map.compact_open.gen</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">‚àß</span>\n  <span class=\"o\">(</span><span class=\"bp\">‚ãÇ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">continuous_map.compact_open.gen</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">uniform_gen</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- Below needs https://github.com/leanprover-community/mathlib/pull/9981</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">hW‚ÇÅ</span><span class=\"o\">,</span> <span class=\"n\">hW‚ÇÑ</span><span class=\"o\">,</span> <span class=\"n\">hW‚ÇÇ</span><span class=\"o\">,</span> <span class=\"n\">hW‚ÇÉ</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">comp_open_symm_mem_uniformity_sets</span> <span class=\"n\">hV</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">Z</span><span class=\"o\">,</span> <span class=\"n\">hZ‚ÇÅ</span><span class=\"o\">,</span> <span class=\"n\">hZ‚ÇÑ</span><span class=\"o\">,</span> <span class=\"n\">hZ‚ÇÇ</span><span class=\"o\">,</span> <span class=\"n\">hZ‚ÇÉ</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">comp_open_symm_mem_uniformity_sets</span> <span class=\"n\">hW‚ÇÅ</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">‚Åª¬π'</span> <span class=\"o\">(</span><span class=\"n\">ball</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">Z</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">hU</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f.continuous.is_open_preimage</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">is_open_ball</span> <span class=\"n\">_</span> <span class=\"n\">hZ‚ÇÑ</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">hUK</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">‚äÜ</span> <span class=\"bp\">‚ãÉ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">exists_prop</span><span class=\"o\">,</span> <span class=\"n\">mem_Union</span><span class=\"o\">,</span> <span class=\"n\">Union_coe_set</span><span class=\"o\">,</span> <span class=\"n\">mem_preimage</span><span class=\"o\">],</span>\n    <span class=\"n\">use</span> <span class=\"o\">(‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">‚ü©</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">mem_ball_self</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">hZ‚ÇÅ</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">hK.elim_finite_subcover</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">hU</span> <span class=\"n\">x.val</span><span class=\"o\">)</span> <span class=\"n\">hUK</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">K</span> <span class=\"bp\">‚à©</span> <span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)),</span>\n  <span class=\"k\">have</span> <span class=\"n\">hC</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">‚äÜ</span> <span class=\"bp\">‚ãÉ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">K.inter_Union</span><span class=\"o\">,</span> <span class=\"n\">subset_inter_iff</span><span class=\"o\">],</span>\n    <span class=\"n\">refine</span> <span class=\"o\">‚ü®</span><span class=\"n\">rfl.subset</span><span class=\"o\">,</span> <span class=\"n\">ht.trans</span> <span class=\"n\">_</span><span class=\"o\">‚ü©,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set_coe.forall</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_mk</span><span class=\"o\">,</span> <span class=\"n\">Union_subset_iff</span><span class=\"o\">],</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx‚ÇÅ</span> <span class=\"n\">hx‚ÇÇ</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">subset_subset_Union</span> <span class=\"o\">(‚ü®</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hx‚ÇÇ</span><span class=\"o\">‚ü©</span> <span class=\"o\">:</span> <span class=\"n\">t</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">subset_closure</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hfC</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">C</span> <span class=\"n\">i</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">ball</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">))</span> <span class=\"n\">W</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">‚ü®‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx‚ÇÅ</span><span class=\"o\">‚ü©,</span> <span class=\"n\">hx‚ÇÇ</span><span class=\"o\">‚ü©,</span>\n    <span class=\"k\">calc</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"bp\">‚à©</span> <span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n          <span class=\"bp\">‚äÜ</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">mono</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">inter_subset_right</span><span class=\"o\">],</span> <span class=\"o\">}</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">continuous_on.image_closure</span> <span class=\"n\">f.continuous.continuous_on</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">ball</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">mono</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">ball</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n                                <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hz‚ÇÅ</span><span class=\"o\">,</span><span class=\"n\">hz‚ÇÇ</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">uniform_space.mem_closure_iff_ball.mp</span> <span class=\"n\">hy</span> <span class=\"n\">hZ‚ÇÅ</span><span class=\"o\">,</span>\n                                <span class=\"n\">rw</span> <span class=\"n\">mem_ball_symmetry</span> <span class=\"n\">hZ‚ÇÇ</span> <span class=\"n\">at</span> <span class=\"n\">hz‚ÇÅ</span><span class=\"o\">,</span>\n                                <span class=\"n\">exact</span> <span class=\"n\">ball_mono</span> <span class=\"n\">hZ‚ÇÉ</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">mem_ball_comp</span> <span class=\"n\">hz‚ÇÇ</span> <span class=\"n\">hz‚ÇÅ</span><span class=\"o\">),</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"o\">‚ü®</span><span class=\"n\">t</span><span class=\"o\">,</span>\n          <span class=\"n\">t.fintype_coe_sort</span><span class=\"o\">,</span>\n          <span class=\"n\">C</span><span class=\"o\">,</span>\n          <span class=\"bp\">Œª</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hK.inter_right</span> <span class=\"n\">is_closed_closure</span><span class=\"o\">,</span>\n          <span class=\"bp\">Œª</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ball</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">))</span> <span class=\"n\">W</span><span class=\"o\">,</span>\n          <span class=\"bp\">Œª</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_open_ball</span> <span class=\"n\">_</span> <span class=\"n\">hW‚ÇÑ</span><span class=\"o\">,</span>\n          <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">continuous_map.compact_open.gen</span><span class=\"o\">,</span> <span class=\"n\">hfC</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">image_subset_iff</span><span class=\"o\">],</span>\n          <span class=\"n\">_</span><span class=\"o\">‚ü©,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">g</span> <span class=\"n\">hg</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hW‚ÇÉ</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hx</span> <span class=\"o\">:=</span> <span class=\"n\">mem_Union.mp</span> <span class=\"o\">(</span><span class=\"n\">hC</span> <span class=\"n\">hx</span><span class=\"o\">),</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_comp_rel</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_Inter</span><span class=\"o\">,</span> <span class=\"n\">continuous_map.compact_open.gen</span><span class=\"o\">,</span> <span class=\"n\">mem_set_of_eq</span><span class=\"o\">,</span> <span class=\"n\">image_subset_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">‚ü®</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mem_preimage.mp</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">)‚ü©,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">image_subset_iff</span><span class=\"o\">,</span> <span class=\"n\">mem_preimage</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hfC</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">hfC</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ball_eq_of_symmetry</span> <span class=\"n\">hW‚ÇÇ</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hfC</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hfC</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/-- This should follow from the various lemmas above. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">compact_open_eq_uniform</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">compact_convergence_topology</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">Œ≤</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">continuous_map.compact_open</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"sd\">/-- I believe the topology this induces is `compact_convergence_topology`. -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">uniform_space</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">uniformity</span> <span class=\"o\">:=</span> <span class=\"bp\">‚®Ö</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hK</span> <span class=\"o\">:</span> <span class=\"n\">is_compact</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùì§</span> <span class=\"n\">Œ≤</span><span class=\"o\">),</span>\n                  <span class=\"bp\">ùìü</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">p.1</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p.2</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">‚àà</span> <span class=\"n\">V</span> <span class=\"o\">},</span>\n  <span class=\"n\">refl</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- trivial</span>\n  <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- trivial</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- trivial</span>\n  <span class=\"n\">is_open_uniformity</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"c\">/-</span><span class=\"cm\"> Should be easily reduced to `compact_open_eq_uniform` -/</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 259114393,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1635262182
    },
    {
        "content": "<p>I really want to switch back to sort out another lemma in the Sphere Eversion project now but I think the above takes care of the mathematical content of what we need.</p>",
        "id": 259114662,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1635262273
    },
    {
        "content": "<p>I'll push this through to the end in a week or two.</p>",
        "id": 259114699,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1635262286
    },
    {
        "content": "<p>This is more than you initially planned, right?  You were initially going to do just the fact that if <code>Œ±</code> is compact then compact-open is the uniform topology.</p>",
        "id": 259114757,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1635262303
    },
    {
        "content": "<p>I always planned to do it for any topological space <code>Œ±</code> (not just compact).</p>",
        "id": 259114884,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1635262337
    },
    {
        "content": "<p>Though I may well have communicated my intentions poorly!</p>",
        "id": 259114912,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1635262353
    },
    {
        "content": "<p>Does it, in the end, route through the theorem <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_map.exists_tendsto_compact_open_iff_forall\">docs#continuous_map.exists_tendsto_compact_open_iff_forall</a> which I had proved?  Or is this theorem now a corollary of your bigger result?</p>",
        "id": 259115208,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1635262454
    },
    {
        "content": "<p>(I need to hop on the subway but I'll think more about this later.  Thanks for working on this!)</p>",
        "id": 259115307,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1635262498
    },
    {
        "content": "<p>It does not actually use that result.</p>",
        "id": 259115529,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1635262569
    },
    {
        "content": "<p>I'm not sure if it would be better if it did but either way I'm glad we have that result.</p>",
        "id": 259115682,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1635262632
    },
    {
        "content": "<p>Hello, I just wanted to follow up on the status of this. If I remember correctly, Heather mentioned that using some of the things here one could show that \"on a compact space , the compact-open topology is the same as the topology induced by the sup-norm\".  </p>\n<p>Do we have this result now?</p>",
        "id": 262314889,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1637585907
    },
    {
        "content": "<p>We don't but we're close. I have it on one of my lists to get back to this but it would be great if someone else took up the baton.</p>",
        "id": 262315453,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637586196
    },
    {
        "content": "<p>Part of the reason it is a bit of work is that we want to factor it through the result that when the codomain is a uniform space, the compact open topology is the same as the topology of compact convergence.</p>",
        "id": 262315602,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637586283
    },
    {
        "content": "<p>I basically proved this here <a href=\"#narrow/stream/116395-maths/topic/Metrisability.20of.20compact-open.20topology/near/259114393\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Metrisability.20of.20compact-open.20topology/near/259114393</a> but some details still need to be filled in.</p>",
        "id": 262315703,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637586348
    },
    {
        "content": "<p>Ah ok, well I'm happy to try and help removing some sorries. Where can I find the repo for this?</p>",
        "id": 262317225,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1637587237
    },
    {
        "content": "<p>Great! There's no repo or branch, just the snippet above.</p>",
        "id": 262317498,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637587417
    },
    {
        "content": "<p>It's a MWE if you open it against master in Mathlib.</p>",
        "id": 262317526,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637587434
    },
    {
        "content": "<p>I do actually have proofs of the <code>sorry</code>s marked <code>trivial</code> but my proofs are so disgusting I didn't censored them.</p>",
        "id": 262317584,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637587450
    },
    {
        "content": "<p>Ah ok cool. Let me play around with it a bit and see what I can do. I'll need to think about how one goes from this to the <code>sup-norm</code> statement, I expect its easy, but I need to parse all the different things here first :)</p>",
        "id": 262317965,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1637587625
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"389019\">Chris Birkbeck</span> <a href=\"#narrow/stream/116395-maths/topic/Metrisability.20of.20compact-open.20topology/near/262317965\">said</a>:</p>\n<blockquote>\n<p>I'll need to think about how one goes from this to the <code>sup-norm</code> statement</p>\n</blockquote>\n<p>Putting aside the issue that the distance is the norm of the difference, this should come down to proving <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pseudo_metric_space.uniformity_dist\">docs#pseudo_metric_space.uniformity_dist</a></p>",
        "id": 262318263,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637587799
    },
    {
        "content": "<p>The setup is all very clever but if you're seeing it for the first time, it might be a bit opaque.</p>",
        "id": 262318345,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637587838
    },
    {
        "content": "<p>Hmm yeah I've not really been that exposed to this part of the mathlib, so I need to spend some time getting up to speed :)</p>",
        "id": 262319199,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1637588316
    },
    {
        "content": "<p>So I made a start on this and made a draft PR here: <a href=\"https://github.com/leanprover-community/mathlib/issues/10439\">#10439</a>. Haven't really got that far yet.</p>",
        "id": 262504522,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1637697017
    },
    {
        "content": "<p>Thanks for doing this <span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span> What you have so far looks like a good start!</p>",
        "id": 262580128,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637756098
    },
    {
        "content": "<p>I finally returned to this earlier this week and have removed all <code>sorry</code>s from <a href=\"https://github.com/leanprover-community/mathlib/pull/10439\">#10439</a></p>",
        "id": 265344634,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1639768035
    },
    {
        "content": "<p>The code needs about a day's work till I have something that I can put out for review but I am at least confident that the definitions are correct in view of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">correct_entourages</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">Œ≤</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n  <span class=\"n\">X</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùì§</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"bp\">‚Üî</span> <span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">Œ≤</span> <span class=\"bp\">√ó</span> <span class=\"n\">Œ≤</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hK</span> <span class=\"o\">:</span> <span class=\"n\">is_compact</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hV</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùì§</span> <span class=\"n\">Œ≤</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">fg</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">K</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">fg.1</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">fg.2</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">‚àà</span> <span class=\"n\">V</span> <span class=\"o\">}</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"n\">mem_compact_convergence_uniformity</span> <span class=\"n\">X</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">correct_topology_even_defeq</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">uniform_space.to_topological_space</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">continuous_map.compact_open</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>\n<p>(here <code>Œ±</code> is a <code>topological_space</code> and <code>Œ≤</code> is a <code>uniform_space</code>).</p>",
        "id": 265344889,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1639768158
    },
    {
        "content": "<p>In summary when <code>Œ±</code> is a <code>topological_space</code> and <code>Œ≤</code> is a <code>uniform_space</code>, we'll be able to speak of uniform convergence in the space of continuous maps <code>C(Œ±, Œ≤)</code> and furthermore, we'll know that the underlying topology is the compact-open topology.</p>",
        "id": 265345344,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1639768380
    },
    {
        "content": "<p>Fantastic!</p>",
        "id": 265356153,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1639772828
    },
    {
        "content": "<p>Awesome!</p>",
        "id": 265417450,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1639832649
    },
    {
        "content": "<p>I finally have a version of this work ready for review: <a href=\"https://github.com/leanprover-community/mathlib/pull/10967\">#10967</a></p>",
        "id": 265812713,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1640184469
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span> I accidentally dropped you as a co-author when creating the tidied-up PR. I've just added you back!</p>",
        "id": 265813153,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1640184715
    },
    {
        "content": "<p>Oh don't worry, I really don't think I did much! You did all the work really</p>",
        "id": 265813276,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1640184773
    },
    {
        "content": "<p>Incidentally the Bourbaki proof of the main result in this PR uses some non-trivial results so that they can say:<br>\n<a href=\"/user_uploads/3121/mHKvLRFconRrmbrsM8gHYrba/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/mHKvLRFconRrmbrsM8gHYrba/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/mHKvLRFconRrmbrsM8gHYrba/image.png\"></a></div>",
        "id": 265813408,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1640184847
    },
    {
        "content": "<p>and I could never see where they use these assumptions in what follows. Now that I've formalised this, I don't think they do use them.</p>",
        "id": 265813490,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1640184906
    },
    {
        "content": "<p>It was to make the arguments fit in their head better</p>",
        "id": 265813575,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640184957
    },
    {
        "content": "<p>In the end, is there a lemma where you can say: this is exactly lemma X from Bourbaki except that we removed assumption Y?</p>",
        "id": 265815414,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640186043
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/Metrisability.20of.20compact-open.20topology/near/265815414\">said</a>:</p>\n<blockquote>\n<p>In the end, is there a lemma where you can say: this is exactly lemma X from Bourbaki except that we removed assumption Y?</p>\n</blockquote>\n<p>Oh dear, I seem to have given the wrong impression; I love beating Bourbaki but that's not what happened here. Bourbaki establish their result in full generality but they do so by reducing to the case where they're looking at maps from a compact space to a Hausdorff space. What I meant  in my remark above was that if you look at the proof they then give for the case to which they reduce, I couldn't see where they used the assumptions of compactness and Hausdorffness.</p>",
        "id": 265819319,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1640188170
    },
    {
        "content": "<p>It's hardly worth all these words but to be precise, I wondered:<br>\n (a) am I missing something and they really do need the assumptions of compactness and Hausdorffness?<br>\n (b) is it necessary to set things up this way or can one just prove the result directly?</p>\n<p>I'm still not sure about (a) because I didn't chase down the precise generality in which they proved the various lemmata that they invoke but I am now absolutely sure about (b) because I have convinced Lean using a direct argument.</p>",
        "id": 265819628,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1640188333
    },
    {
        "content": "<p>I played a bit with the code in this PR. I feel bad because I'm responsible for some of the mess here. We have a nice API around <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.has_basis\">docs#filter.has_basis</a>, some connection with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter_basis\">docs#filter_basis</a> but not connection with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_space.is_topological_basis\">docs#topological_space.is_topological_basis</a>. The main issue is probably that we need a parametrized version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_space.is_topological_basis\">docs#topological_space.is_topological_basis</a> (ie an API for talking about maps whose image is a topological basis, probably using also a predicate on the source type as in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.has_basis\">docs#filter.has_basis</a>). And then we would need a lot of stupid small lemmas. Anyway, I pushed some <a href=\"https://github.com/leanprover-community/mathlib/compare/ocfnash/compact_convergence...has_basis_compact_cvg\">new branch</a>  hinting at how we could use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.has_basis\">docs#filter.has_basis</a> in that file. I'm not sure it's worth pursuing and I exhausted my time budget. The current state is somehow stuck between two worlds hence features extremely nasty unpacking and packing as in <code>has_basis_nhds_compact_open</code> (note for expert tactic writers: this is really the kind of proof that is driving me crazy).</p>",
        "id": 265907576,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1640258348
    },
    {
        "content": "<p>Don't feel bad! The very few rough corners around <code>is_topological_basis</code> were more than compensated for by the awesomeness of what is in place. I'll take a look at your branch this afternoon and see if I can easily incorporate its ideas.</p>",
        "id": 265908618,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1640259316
    },
    {
        "content": "<p>In the end, I didn't get a chance to look at this today but I expect to have time for it tomorrow morning.</p>",
        "id": 265952178,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1640292546
    }
]