[
    {
        "content": "<p>Is there any representation theory in Mathlib? I can't seem to find any. If there isn't, how would I go about defining a representation, characters, and stating/proving things like Schur's Lemma? I've been fuddling around and need a little guidance.</p>",
        "id": 180789069,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1573775529
    },
    {
        "content": "<p>I think someone asked the same question a month back, you should be able to find the thread by searching zulip for representation theory</p>",
        "id": 180789478,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1573775975
    },
    {
        "content": "<p>When I searched for this topic beforehand, this is all I found:</p>\n<div class=\"codehilite\"><pre><span></span>class representation (G R M : Type) [monoid G] [ring R] [add_comm_group M] [module R M]\n  extends group_module G M :=\n(smul_comm : ∀ (g : G) (r : R) (m : M), g • (r • m) = r • (g • m))\n\nnamespace representation\nopen mul_action linear_map\nvariables {G R M : Type}\nvariables [group G] [ring R] [add_comm_group M] [module R M] [representation G R M]\n\n-- set_option trace.class_instances true\n\n-- lemma smul_mem_fixed_points (r : R) (m : M) (hm : m ∈ fixed_points G M) :\n--   r • m ∈ fixed_points G M :=\n-- begin\n--   simp only [mem_fixed_points] at *,\n--   intro g,\n--   rw [smul_comm, hm],\n-- end\nend representation\n</pre></div>\n\n\n<p>I read through that thread, and didn't exactly see a lot of development, just attempts at explaining the code, so it's not exactly what I'm looking for.</p>",
        "id": 180790074,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1573776604
    },
    {
        "content": "<p>Right, I think the result of that thread is that no, there isn't any! But lots of people would be interested in seeing some.</p>",
        "id": 180795040,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1573782116
    }
]