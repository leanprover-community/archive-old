[
    {
        "content": "<p>How do you debug code (guess what I want to define in HoTT) producing the following error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">pred_to_sset</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ü•</span><span class=\"n\">T</span><span class=\"o\">),</span> <span class=\"n\">exists_elem</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ü•ùí´</span> <span class=\"n\">T</span><span class=\"o\">),</span> <span class=\"n\">B</span><span class=\"bp\">‚àà</span><span class=\"n\">S</span> <span class=\"n\">and</span> <span class=\"n\">t</span><span class=\"bp\">‚àà</span><span class=\"n\">B</span><span class=\"o\">)))</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">pred_to_sset</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ü•</span><span class=\"n\">T</span><span class=\"o\">),</span> <span class=\"n\">exists_elem</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ü•ùí´</span> <span class=\"n\">T</span><span class=\"o\">),</span> <span class=\"n\">B</span><span class=\"bp\">‚àà</span><span class=\"n\">S</span> <span class=\"n\">and</span> <span class=\"n\">t</span><span class=\"bp\">‚àà</span><span class=\"n\">B</span><span class=\"o\">))</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">hott.subset.Subset.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">l_3</span> <span class=\"o\">((</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">)}</span>\n    <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span>\n        <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">)</span>\n        <span class=\"o\">((</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">l_3</span> <span class=\"o\">((</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">hott.subset.Subset.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">)}</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">((</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It seems that only the universe levels but not the type themselves don't coincide. But first of all I don't understand why several universe levels are attached  to types. Where do they come from? How are they resolved? So second, what has gone wrong? <br>\nI am looking for general strategies, and maybe documentation for the universe handling.</p>",
        "id": 215637676,
        "sender_full_name": "Thomas Eckl",
        "timestamp": 1604522072
    },
    {
        "content": "<p>First I would check whether what I think I'm doing actually makes sense, and whether existing definitions have the universe levels I expect</p>",
        "id": 215637952,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604522222
    },
    {
        "content": "<p>here it looks like one of these will uncover a problem, since the universe levels you have are not just not the same but in fact definitely different</p>",
        "id": 215638073,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604522283
    },
    {
        "content": "<p>because you have <code>(max ?l_1 ?l_2)</code> appearing in the expected type, but something that's at least <code>(max ?l_1 ?l_2)+1</code> in the actual type.</p>",
        "id": 215638174,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604522335
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"126734\">Thomas Eckl</span> <a href=\"#narrow/stream/116395-maths/topic/Two.20universe.20levels/near/215637676\">said</a>:</p>\n<blockquote>\n<p>Where do they come from? How are they resolved? So second, what has gone wrong?</p>\n</blockquote>\n<p>They come from things like <code>{X : Type*}</code> or <code>universe u</code>, <code>X : Type u</code>. They're resolved by unification or by being specified explicitly using the <code>foo.{u v}</code> notation that appears in the error message. Hard to guess what specifically is wrong without seeing the code. </p>\n<blockquote>\n<p>I am looking for general strategies, and maybe documentation for the universe handling.</p>\n</blockquote>\n<p>This doesn't really qualify as a strategy, but <code>set_option pp.universes true</code> together with <code>#check</code>ing the definitions involved is a good start.</p>",
        "id": 215639646,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604523081
    },
    {
        "content": "<blockquote>\n<p><code>B : ‚Ü•ùí´ T</code></p>\n</blockquote>\n<p>I'm guessing this means <code>B : T -&gt; hProp</code> and that <code>hProp</code> also has a universe parameter, and it's not clear to me who is choosing it or what the correct choice is. I would start by trying to figure out the universe levels of everything by hand.</p>",
        "id": 215639875,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604523219
    },
    {
        "content": "<p>But to be clear, the problem here has nothing to do with the universes. To first order you can just ignore all universe arithmetic and focus on the types, which don't match in this error message</p>",
        "id": 215640060,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604523318
    },
    {
        "content": "<p>Aren't they both <code>Subset T</code>?</p>",
        "id": 215640228,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604523400
    },
    {
        "content": "<p>Oh, so they are</p>",
        "id": 215640291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604523433
    },
    {
        "content": "<p>I thought the first one was just <code>T</code>, ignore me</p>",
        "id": 215640322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604523449
    },
    {
        "content": "<p>It seems that <code>Subset T</code> has a free universe parameter, which is usually the source of the problem</p>",
        "id": 215640371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604523473
    },
    {
        "content": "<p>What is the definition of <code>Subset</code>?</p>",
        "id": 215640387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604523480
    },
    {
        "content": "<p>I'm guessing it's a bundled subset, the first universe level argument is the universe of <code>T</code> and the second is the universe of the <code>hProp</code> that cuts out the subset</p>",
        "id": 215640464,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604523509
    },
    {
        "content": "<p><code>pred_to_sset</code> is the constructor for a bundled subset, <code>T</code> is a bundled topological space</p>",
        "id": 215640568,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604523579
    },
    {
        "content": "<p>and I think there is potentially some kind of predicativity issue with the definition of the subset</p>",
        "id": 215640607,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604523595
    },
    {
        "content": "<p>The pervasive appearance of <code>max ?l_1 ?l_2</code> is also worrisome, it probably means that a definition has an unnecessary universe argument</p>",
        "id": 215640682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604523616
    },
    {
        "content": "<p>yeah, my guess is <code>?l_1</code> is the universe level of the underlying type of <code>T</code> and <code>?l_2</code> is the level of the <code>hProp</code> in <code>is_open</code></p>",
        "id": 215640741,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604523652
    },
    {
        "content": "<p>I have no idea whether it's correct to have one or two universe levels in the definition of a topological space... universe sizes for propositions hurts my head a bit</p>",
        "id": 215640823,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604523689
    },
    {
        "content": "<p>I don't think so, after all <code>Subset</code>'s first argument is <code>max ?l_1 ?l_2</code></p>",
        "id": 215640847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604523705
    },
    {
        "content": "<p>oh good point</p>",
        "id": 215640865,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604523716
    },
    {
        "content": "<p>Maybe something earlier is indeed wrong then</p>",
        "id": 215640934,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604523730
    },
    {
        "content": "<p>Anyways, that <code>+1</code> has me worried</p>",
        "id": 215641033,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604523781
    },
    {
        "content": "<p>I think the definition of this subset has to quantify over (what I assume is the basis) <code>S</code> and not over all subsets of <code>T</code></p>",
        "id": 215641076,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604523810
    },
    {
        "content": "<p>I don't actually know the context here</p>",
        "id": 215641109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604523833
    },
    {
        "content": "<p>You are too fast for me ... There is a reason why I didn't want to describe the underlying code - it's rather involved.  <code>Subset T</code> is actually a structure, consisiting of a (HoTT) <code>Set</code>, a map from this set to <code>T</code>, and a certificate that this map is injective (which is a (HoTT) <code>Prop</code> in the end. And indeed, <code>Set</code> and <code>Prop</code> have a free universe parameter for the underlying type.</p>",
        "id": 215641246,
        "sender_full_name": "Thomas Eckl",
        "timestamp": 1604523915
    },
    {
        "content": "<p>Anything you can post is better than nothing</p>",
        "id": 215641265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604523944
    },
    {
        "content": "<p>staring at an error message without knowing the signature of the definition or the surroundings is harder than you might think</p>",
        "id": 215641330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604523974
    },
    {
        "content": "<p>in any case I'm not about to go get the hott repo so I'm not to bothered about making it compile</p>",
        "id": 215641391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604524021
    },
    {
        "content": "<p>in particular, I would like to see the complete <code>def</code> that sourced this error</p>",
        "id": 215641465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604524071
    },
    {
        "content": "<p>Anyway these error messages will be much clearer if you put in actual universe parameters instead of unification variables. Then lean will be able to simplify things like <code>(max (max ?l_1 ?l_2) ((max ?l_1 ?l_2)+1)</code> to just <code>u+1</code>, and the problem may actually go away entirely</p>",
        "id": 215642017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604524379
    },
    {
        "content": "<p>What are the types of <code>T</code> and <code>S</code>, with universe parameters included?</p>",
        "id": 215642349,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604524562
    },
    {
        "content": "<p>OK, I finally managed to wrestle enough time from teaching to figure this out: </p>\n<p>The problem is as described in the HoTT book, 3.5 and 10.1.3/4: If <code>A : Type u</code> is a type in the universe <code>u</code> then the type of predicates <code>A -&gt; Prop.{u}</code>, feeding elements of <code>A</code> into propositions in the universe <code>u</code>, is in the universe <code>u+1</code>. If you interpret this type of predicates as the power set of <code>A</code> (assuming that <code>A</code> is a HoTT set) and build predicates on this power set, you will end up in universe <code>u+2</code>.</p>",
        "id": 217422648,
        "sender_full_name": "Thomas Eckl",
        "timestamp": 1605889118
    },
    {
        "content": "<p>The problem can be resolved by propositional resizing, see the <a href=\"https://homotopytypetheory.org/book/\">HoTT book</a>, 3.5. This is good news for me because propositional resizing <code>Prop.{u+1} -&gt; Prop.{u}</code> can be constructed from the Law of the Excluded Middle in the universe <code>u+1</code> (HoTT book, Ex.3.10) and ultimately from the Axiom of Choice, using Diaconescu's Theorem (HoTT book, Thm.10.1.14). And I have no qualms to assume these axioms ...</p>",
        "id": 217423529,
        "sender_full_name": "Thomas Eckl",
        "timestamp": 1605889489
    },
    {
        "content": "<p>As an aside to HoTT 3 - savvy people: I am actually not able to type <code>Prop.{u+1}</code> but always need to use <code>trunctype.{u} -1</code> - annoying. <code>Set.{u}</code> works however - strange.</p>",
        "id": 217423842,
        "sender_full_name": "Thomas Eckl",
        "timestamp": 1605889635
    }
]