[
    {
        "content": "<p>Can someone explain what's going on here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.tensor_algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.category.Algebra.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- WORKS</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">free_of_module</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"bp\">⥤</span> <span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n    <span class=\"n\">is_ring</span> <span class=\"o\">:=</span> <span class=\"n\">algebra.semiring_to_ring</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n    <span class=\"n\">is_algebra</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">},</span> <span class=\"c1\">-- FAILS</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_id'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_comp'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 213566642,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602858274
    },
    {
        "content": "<p>Note that <code>algebra.semiring_to_ring</code> also requires the algebra instance, so the fact that the <code>is_ring</code> field works adds to the strangeness...</p>",
        "id": 213566741,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602858318
    },
    {
        "content": "<p>Possibly related to <a href=\"#narrow/stream/113488-general/topic/algebra.2Esemiring_to_ring.20breaks.20semimodule.20typeclass.20lookup/near/212584556\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/algebra.2Esemiring_to_ring.20breaks.20semimodule.20typeclass.20lookup/near/212584556</a></p>",
        "id": 213567452,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602858604
    },
    {
        "content": "<p>Okay, if I cheat and use <code>local attribute [reducible] tensor_algebra</code> then lean is indeed happy.</p>",
        "id": 213567654,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602858678
    },
    {
        "content": "<p>The algebra instance for the tensor algebra is obtained by a <code>derive</code> declaration. Is it possible there's some conflict with the fact that it's also tagged <code>irreducible</code>?</p>",
        "id": 213567791,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602858732
    },
    {
        "content": "<p>Did that conversation ever lead to a satisfactory conclusion <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> ?</p>",
        "id": 213568459,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602858969
    },
    {
        "content": "<p>nope, still a mystery</p>",
        "id": 213568531,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602859008
    },
    {
        "content": "<p>I'll just cheat with reducibility for now then.</p>",
        "id": 213568607,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602859039
    },
    {
        "content": "<p>Okay, I have the algebra/module adjunction here:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/compare/tensor_algebra_adjunction\">https://github.com/leanprover-community/mathlib/compare/tensor_algebra_adjunction</a><br>\nBut this involves cheating with semireducibility :(</p>",
        "id": 213572784,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602860940
    }
]