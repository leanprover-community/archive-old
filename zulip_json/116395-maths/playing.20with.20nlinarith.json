[
    {
        "content": "<p>Fully expecting the answer \"no\": is it easy to make these work? They both naively look in scope to me, but I am quite naive.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">nlinarith</span>\n</code></pre></div>",
        "id": 201777063,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592943590
    },
    {
        "content": "<p>The first one: <code>linarith</code> doesn't do neq in hypotheses, since it leads to exponential blowups. (2^n <code>linarith</code> runs for <code>n</code> neq hypotheses.) It should solve the contrapositive.</p>",
        "id": 201778340,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1592944153
    },
    {
        "content": "<p>The second one should work when the refactor PR lands.</p>",
        "id": 201778364,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1592944165
    },
    {
        "content": "<p>Is anyone working on reviewing the PR? It's beyond my abilities, unfortunately.</p>",
        "id": 201778869,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592944397
    },
    {
        "content": "<p>On the same subject, here's something I wanted to do yesterday:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span>\n</code></pre></div>\n\n\n<p>Will this also be in range after the refactor?</p>",
        "id": 201785555,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1592947537
    },
    {
        "content": "<p>If you rewrite le_iff_lt_or_eq at h1 then this might be in scope for other tactics like simp</p>",
        "id": 201792137,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592951402
    },
    {
        "content": "<p>I have proved it, don't worry :)</p>",
        "id": 201792449,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1592951617
    },
    {
        "content": "<p>We are just dreaming of the \"it's obvious\" tactic but apparently writing this is harder than it looks...</p>",
        "id": 201792823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592951736
    },
    {
        "content": "<p>Also, to be clear, I am not demanding a <code>supernlinarith</code> which solves this particular problem!  Just, like Kevin, curious about exactly what the new algorithm will do.</p>",
        "id": 201792830,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1592951744
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/playing.20with.20nlinarith/near/201792823\">said</a>:</p>\n<blockquote>\n<p>We are just dreaming of the \"it's obvious\" tactic but apparently writing this is harder than it looks...</p>\n</blockquote>\n<p>My father would say \"by classical argument, it's obvious\"</p>",
        "id": 201792921,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1592951801
    },
    {
        "content": "<p>I think that maybe sledgehammers can solve this sort of goal? It might take longer than a human though...</p>",
        "id": 201792972,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592951839
    },
    {
        "content": "<p>Sorry Heather, I didn't mean to imply that you couldn't prove it :-) I've spent all day trying to prove things like this using only tactics and not rewriting any lemmas from the library, or as few as possible. I've been jumping through hoops with <code>by_contradiction</code> and <code>push_neg</code> on the basis that it's easier to teach them than to teach the entire contents of the library :-/</p>",
        "id": 201793501,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592952192
    },
    {
        "content": "<p>That's interesting; who is your target audience?  Is the idea that breaking facts down into <code>library_search</code>-able pieces is too intimidating?</p>",
        "id": 201793966,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1592952496
    },
    {
        "content": "<p>I am playing with the real number game. You want to get onto interesting maths ASAP but conversely you don't want to have to teach the user 100 mathlib lemmas just so they can do trivial things. This leaves you with real problems sometimes because they have a-b=c and they want a=b+c but have no idea about sub_eq_iff_add_left or whatever the lemma will be called. Teaching all these lemma names doesn't scale for one off apps like this and there's the added problem that sometimes working forwards is the natural way to go whereas most tactics operate on the goal</p>",
        "id": 201814674,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592979696
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/playing.20with.20nlinarith/near/201785555\">said</a>:</p>\n<blockquote>\n<p>On the same subject, here's something I wanted to do yesterday:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span>\n</code></pre></div>\n\n\n<p>Will this also be in range after the refactor?</p>\n</blockquote>\n<p>No, this is out of scope (for <code>nra</code> too).</p>",
        "id": 201819255,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1592984564
    },
    {
        "content": "<p><code>nlinarith</code> is a tiny bit of preprocessing on top of <code>linarith</code>. The party line is, don't expect it to do anything and be excited if it works. If it fails and <code>nra</code> solves the equivalent goal in Coq, we can investigate.</p>",
        "id": 201819452,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1592984741
    }
]