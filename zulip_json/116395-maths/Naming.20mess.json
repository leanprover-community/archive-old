[
    {
        "content": "<p>We really need to work on naming consistency with products. Given <span class=\"tex-error\">$$f \\co X \\to Y$$</span> and <span class=\"tex-error\">$$g \\co X \\to Z$$</span> there are two maps that could be called the product of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span>, one going from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi><mo>×</mo><mi>Z</mi></mrow><annotation encoding=\"application/x-tex\">Y \\times Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span></span></span></span> and the other one from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>×</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X \\times X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi><mo>×</mo><mi>Z</mi></mrow><annotation encoding=\"application/x-tex\">Y \\times Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span></span></span></span>. I already pointed out the inconsistency between <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map.prod_map\">docs#continuous_linear_map.prod_map</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_equiv.prod\">docs#continuous_linear_equiv.prod</a>. I just discovered  (or rediscovered) that we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous.prod_mk\">docs#continuous.prod_mk</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_on.prod\">docs#continuous_on.prod</a>.</p>",
        "id": 277730740,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1649078993
    },
    {
        "content": "<p>I think that <code>prod_mk</code> and <code>prod_map</code> are unambiguous, and <code>prod</code> can mean one or the other, switching even for very very closely related notions.</p>",
        "id": 277730869,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1649079043
    },
    {
        "content": "<p>/poll What should we normalize to?</p>\n<ul>\n<li><code>prod</code> and <code>prod_map</code></li>\n<li><code>prod_mk</code> and <code>prod_map</code></li>\n<li><code>prod_mk</code> and <code>prod</code></li>\n</ul>",
        "id": 277731056,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1649079134
    },
    {
        "content": "<p>I have a slight preference for <code>prod f g : X → Y × Z</code> to match <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.prod\">docs#monoid_hom.prod</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.prod\">docs#linear_map.prod</a>.</p>",
        "id": 277731517,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1649079374
    },
    {
        "content": "<p>This is awkward in ordinary math too</p>",
        "id": 277731748,
        "sender_full_name": "Reid Barton",
        "timestamp": 1649079495
    },
    {
        "content": "<p>I always feel a bit guilty about calling the map <code>X -&gt; Y x Z</code> the \"product\", while I obviously don't feel guilty about talking about the product <code>X x X -&gt; Y x Z</code> (or <code>W x X -&gt; Y x Z</code>).</p>",
        "id": 277733256,
        "sender_full_name": "Reid Barton",
        "timestamp": 1649080193
    },
    {
        "content": "<p>Clearly the one that feels fonctorial is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>↦</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mtext>  </mtext><mi>x</mi><mo separator=\"true\">,</mo><mi>g</mi><mtext>  </mtext><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x, y) \\mapsto (f\\; x, g\\; y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span>, and the other one is obtained by precomposing with the diagonal embedding.</p>",
        "id": 277733992,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1649080533
    },
    {
        "content": "<p>The issue is that the map itself cannot be called <code>prod</code> because this is already used. And indeed it is called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/prod.map\">docs#prod.map</a></p>",
        "id": 277734152,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1649080596
    },
    {
        "content": "<p>Maybe putting a <code>_diag</code> somewhere would help disambiguate too?</p>",
        "id": 277734941,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649080919
    },
    {
        "content": "<p>Does it happen that some bundled maps <code>X → Y × Z</code> can't be composed from <code>diag : X → X × X</code> (with the correct decoration) and some map <code>X × X → Y × Z</code>?</p>",
        "id": 277735365,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649081093
    },
    {
        "content": "<p><code>X → Y × Z</code> is also the thing that comes from the universal property of the product, which is exactly the role of <code>prod.mk</code>.</p>",
        "id": 277735616,
        "sender_full_name": "Reid Barton",
        "timestamp": 1649081199
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/116395-maths/topic/Naming.20mess/near/277731517\">said</a>:</p>\n<blockquote>\n<p>I have a slight preference for <code>prod f g : X → Y × Z</code> to match <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.prod\">docs#monoid_hom.prod</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.prod\">docs#linear_map.prod</a>.</p>\n</blockquote>\n<p>I'd be happy to have those renamed to whatever we decide</p>",
        "id": 277781489,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649100295
    },
    {
        "content": "<p>I have another candidate: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.ae_eq_fun.pair\">docs#measure_theory.ae_eq_fun.pair</a> exists so that could have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">pair</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"bp\">×</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(or alternatively, rename <code>measure_theory.ae_eq_fun.pair</code> to something involving <code>prod</code> in the name). At least <code>pair</code> is not ambiguous, as it would feel to make no sense to use the name for the <code>X × X → Y × Z</code> version.</p>",
        "id": 278127501,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1649317367
    },
    {
        "content": "<p>Pair seems weird to me, if we were going to use that word at all I'd argue we should have just called the type <code>prod</code> that (like C++)</p>",
        "id": 278129794,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649318806
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pair\">docs#pair</a> reveal many other declarations using that naming?</p>",
        "id": 278129834,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649318835
    },
    {
        "content": "<p>Essentially none except for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Set.pair\">docs#Set.pair</a> and a few things involving <code>{a,b}</code></p>",
        "id": 278130317,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1649319159
    },
    {
        "content": "<p>but not <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.card_doubleton\">docs#finset.card_doubleton</a></p>",
        "id": 278130413,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649319242
    },
    {
        "content": "<p>I think <code>pair</code> as a canonical spelling for <code>insert a (singleton b)</code> (aka <code>{a, b}</code>) is a nicer choice than <code>doubleton</code></p>",
        "id": 278135937,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649322552
    }
]