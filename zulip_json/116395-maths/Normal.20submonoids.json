[
    {
        "content": "<p>Are these a thing? The natural definition of normal subgroup extends to the monoid case as <code>a + b \\in S -&gt; b + a \\in S</code></p>",
        "id": 131229964,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533897784
    },
    {
        "content": "<p>Do we need them anywhere?</p>",
        "id": 131229974,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533897803
    },
    {
        "content": "<p>not particularly</p>",
        "id": 131229977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533897816
    },
    {
        "content": "<p>Do we need normal subgroups?</p>",
        "id": 131230045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533897913
    },
    {
        "content": "<p>I guess the answer is about the same</p>",
        "id": 131230056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533897922
    },
    {
        "content": "<p>Well... I think the will be used quite a lot.</p>",
        "id": 131230120,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533897976
    },
    {
        "content": "<p>Isn't Kevin already using them?</p>",
        "id": 131230124,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533897986
    },
    {
        "content": "<p>I'm working on porting the add_subgroup stuff now... I don't really get why we care about noncommutative additive groups</p>",
        "id": 131230139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533898051
    },
    {
        "content": "<p>We don't care about those.</p>",
        "id": 131230230,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533898169
    },
    {
        "content": "<p>We just want the additive subgroups, so that we can have subrings.</p>",
        "id": 131230284,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533898214
    },
    {
        "content": "<p>subrings not</p>",
        "id": 131230305,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533898285
    },
    {
        "content": "<p>And this seemed like a very straightforward translation exercise, which I performed without thinking about whether some lines could be removed...</p>",
        "id": 131230317,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533898307
    },
    {
        "content": "<p>Normal subgroups are used all over the place in maths, they're exactly the kernels of morphisms in the category of groups. I thought a bit recently about why we would care about noncommutative additive groups, and the only half-decent answer I could come up with is that there is at least one example in maths where people use addition as a standard notation and it's not commutative, namely addition of ordinals (not that anyone outside of logic ever uses ordinals anyway). These do not form a group though. In number theory there is an implicit assumption that addition is commutative.</p>\n<p>I am only using normal subgroups in the additive case and only in the situation where addition is commutative, so they're the same as subgroups. My only use case was that I need some lemmas about quotient rings, and I thought that the \"correct\" way to prove that a map R -&gt; S whose kernel contains I induced a map R/I -&gt; S would be to first construct the map using some universal property of quotient abelian groups and then to show it's a ring homomorphism. But I don't know whether I'm fussing over nothing and should just prove it directly. </p>\n<p>Didn't Chris make a quotient group PR recently? I was going to make one and then Chris told me he'd made one so I shouldn't PR because of potential conflicts.</p>\n<p><a href=\"https://github.com/leanprover/mathlib/pull/212\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/212\">https://github.com/leanprover/mathlib/pull/212</a></p>",
        "id": 131234329,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533904214
    },
    {
        "content": "<p>oops</p>",
        "id": 131234411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533904338
    },
    {
        "content": "<p>I did some basic subring and subfield stuff here <a href=\"https://github.com/ImperialCollegeLondon/xena-UROP-2018/blob/master/src/inner_product_spaces/subrings_subfields.lean\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/xena-UROP-2018/blob/master/src/inner_product_spaces/subrings_subfields.lean\">https://github.com/ImperialCollegeLondon/xena-UROP-2018/blob/master/src/inner_product_spaces/subrings_subfields.lean</a>. Is this useful at all, or should it be linked to existing stuff in mathlib?</p>",
        "id": 131842627,
        "sender_full_name": "Andreas Swerdlow",
        "timestamp": 1533930168
    },
    {
        "content": "<blockquote>\n<p>Normal subgroups are used all over the place in maths, they're exactly the kernels of morphisms in the category of groups.</p>\n</blockquote>\n<p>And groups are special because the equivalence relation induced by a surjection (<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo>∼</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\sim y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">x</span><span class=\"mrel\">∼</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span></span></span></span> if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>=</mo><mi>f</mi><mo>(</mo><mi>y</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">f(x) = f(y)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span>) is determined by the equivalence class of 0, i.e., the kernel. For general monoids, knowing the kernel of a map doesn't tell you about the behavior of the map away from 0 (consider the quotient of <code>nat</code> which identifies all the numbers greater than or equal to 3).<br>\nSo, I don't think normal submonoids are of much interest.</p>",
        "id": 131849326,
        "sender_full_name": "Reid Barton",
        "timestamp": 1533938892
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120943\">@Andreas Swerdlow</span>, looks useful to me. How about you PR it?</p>",
        "id": 131852250,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533943640
    },
    {
        "content": "<p>It might be worth doing a little renaming to get the functions as close as possible to following the pattern in <code>mathlib/group_theory/subgroup.lean</code>.</p>",
        "id": 131852257,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533943670
    },
    {
        "content": "<p>I'm not entirely certainly where to put what you've written. My suggestion would be to be ambitious, and split it into two parts, putting them in <code>ring_theory/subring.lean</code> and <code>field_theory/subfield.lean</code>, parallel to the group situation: eventually we're going to need a fair bit of other stuff in both those directories. (Although <code>field_theory</code> sounds very wrong...)</p>",
        "id": 131852369,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533943806
    },
    {
        "content": "<p>Probably it's best to create a new branch at &lt;<a href=\"https://github.com/leanprover-community/mathlib\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib\">https://github.com/leanprover-community/mathlib</a>&gt;, so others can look at it first (announce here you want help?) and then once it's been tweaked a bit we can PR it to the official mathlib.</p>",
        "id": 131852441,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533943942
    },
    {
        "content": "<p>(If you don't have commit access at leanprover-community, either ask here for it, or just do the work in your own fork of mathlib and send a PR to leanprover-community, and announce here and somewhere will merge it to a branch.)</p>",
        "id": 131852498,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1533944063
    },
    {
        "content": "<blockquote>\n<p>I did some basic subring and subfield stuff here <a href=\"https://github.com/ImperialCollegeLondon/xena-UROP-2018/blob/master/src/inner_product_spaces/subrings_subfields.lean\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/xena-UROP-2018/blob/master/src/inner_product_spaces/subrings_subfields.lean\">https://github.com/ImperialCollegeLondon/xena-UROP-2018/blob/master/src/inner_product_spaces/subrings_subfields.lean</a>. Is this useful at all, or should it be linked to existing stuff in mathlib?</p>\n</blockquote>\n<p>Hi <span class=\"user-mention\" data-user-id=\"120943\">@Andreas Swerdlow</span> Additive subgroups have just been put into mathlib: <a href=\"https://github.com/leanprover/mathlib/blob/0f42b279865753eb3c79f3504783c7dbd81dfc7e/group_theory/subgroup.lean#L25\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/0f42b279865753eb3c79f3504783c7dbd81dfc7e/group_theory/subgroup.lean#L25\">https://github.com/leanprover/mathlib/blob/0f42b279865753eb3c79f3504783c7dbd81dfc7e/group_theory/subgroup.lean#L25</a>. I think that it is useful if Lean knows that every subring is also an additive subgroup. Some time ago I wrote <a href=\"https://github.com/kbuzzard/lean-perfectoid-spaces/blob/master/src/for_mathlib/subring.lean#L13\" target=\"_blank\" title=\"https://github.com/kbuzzard/lean-perfectoid-spaces/blob/master/src/for_mathlib/subring.lean#L13\">https://github.com/kbuzzard/lean-perfectoid-spaces/blob/master/src/for_mathlib/subring.lean#L13</a>, but there is nothing about fields in that file. I think a merge of your and my approach would be best.</p>",
        "id": 131937828,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533962478
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  thanks for the help. I've rewritten the subfield part, so that it builds off of what Johan wrote for subrings, and created a fork of leanprover-community/mathlib with both Johan's subring file in ring_theory/subring.lean and the subfield stuff in field_theory/subfield.lean. The fork is here: <a href=\"https://github.com/amswerdlow/mathlib\" target=\"_blank\" title=\"https://github.com/amswerdlow/mathlib\">https://github.com/amswerdlow/mathlib</a>. Any suggestions are welcome before I PR</p>",
        "id": 132038273,
        "sender_full_name": "Andreas Swerdlow",
        "timestamp": 1534157216
    }
]