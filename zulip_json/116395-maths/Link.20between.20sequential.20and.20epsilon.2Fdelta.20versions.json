[
    {
        "content": "<p>In real analysis, we often encounter sequential version of usual epsilon/delta definitions.</p>\n<p>For example, sequential continuity, sequential uniform continuity, accumulation point of a set/sequence, inf/sup.</p>\n<p>I have multiple questions Lean and non-Lean ones:</p>\n<p>(1) It looks like we can often write a dual sequential version of many epsilon/delta definitions, is there a name for this? Is there a concept? Can we give a \"normal form\" to those definitions?<br>\n(2) It looks like that the equivalence theorem between a sequential version and an epsilon/delta one is also independent of the concept and relies more on the form of the definition rather than on its contents, so, we should be able to produce the equivalence theorem given just a general version of such definitions, right? (under some assumption of choice for sequential → epsilon/delta).<br>\n(3) Is this something I could formalize in Lean? Would it be better to go for a type class in such cases?</p>\n<p>Maybe, this question is not very relevant because it's impossible to have a general form of sequential version of definitions or things like that.</p>\n<p>To give precise examples, here are definitions:</p>\n<p>Accumulation point <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span> of a sequence <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span>:</p>\n<p>Epsilon/Delta: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>ε</mi><mo>&gt;</mo><mn>0</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∀</mi><mi>n</mi><mo>≥</mo><mn>0</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∃</mi><mi>N</mi><mo>≥</mo><mi>n</mi><mo separator=\"true\">,</mo><mo stretchy=\"false\">∣</mo><msub><mi>x</mi><mi>n</mi></msub><mo>−</mo><mi>a</mi><mo stretchy=\"false\">∣</mo><mo>&lt;</mo><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\forall \\varepsilon &gt; 0, \\forall n \\geq 0, \\exists N \\geq n, \\lvert x_n - a\\rvert &lt; \\varepsilon</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathdefault\">ε</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∃</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">∣</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mclose\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">ε</span></span></span></span><br>\nSequence form: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∃</mi><mi>y</mi><mo>∈</mo><mi>x</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">N</mi><msup><mo stretchy=\"false\">)</mo><mi mathvariant=\"double-struck\">N</mi></msup><mo separator=\"true\">,</mo><msub><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mo>+</mo><mi mathvariant=\"normal\">∞</mi></mrow></msub><msub><mi>y</mi><mi>n</mi></msub><mo>=</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">\\exists y \\in x(\\mathbb{N})^{\\mathbb{N}}, \\lim_{n \\to +\\infty} y_n = a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">∃</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0952229999999998em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845223em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbb mtight\">N</span></span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop\">lim</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.25833100000000003em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mrel mtight\">→</span><span class=\"mord mtight\">+</span><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span></p>\n<p>Sup:<br>\nWe say that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><mi>sup</mi><mo>⁡</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">a = \\sup A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mop\">sup</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span> if:</p>\n<p>Epsilon/Delta: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>ε</mi><mo>&gt;</mo><mn>0</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∃</mi><mi>x</mi><mo>∈</mo><mi>A</mi><mo separator=\"true\">,</mo><mi>a</mi><mo>−</mo><mi>ε</mi><mo>&lt;</mo><mi>x</mi><mo>≤</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">\\forall \\varepsilon &gt; 0, \\exists x \\in A, a - \\varepsilon &lt; x \\leq a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathdefault\">ε</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∃</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">ε</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span><br>\nSequence form: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∃</mi><mi>y</mi><mo>∈</mo><msup><mi>A</mi><mi mathvariant=\"double-struck\">N</mi></msup><mo separator=\"true\">,</mo><msub><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mo>+</mo><mi mathvariant=\"normal\">∞</mi></mrow></msub><msub><mi>y</mi><mi>n</mi></msub><mo>=</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">\\exists y \\in A^{\\mathbb{N}}, \\lim_{n \\to +\\infty} y_n = a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">∃</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0535539999999999em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845223em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbb mtight\">N</span></span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop\">lim</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.25833100000000003em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mrel mtight\">→</span><span class=\"mord mtight\">+</span><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span></p>\n<p>Continuity:<br>\nWe say that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>A</mi><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">f : A \\to B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span> is continuous at <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">x \\in A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span> if:</p>\n<p>Epsilon/delta: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>ε</mi><mo>&gt;</mo><mn>0</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∃</mi><mi>δ</mi><mo>&gt;</mo><mn>0</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∀</mi><mi>y</mi><mo>∈</mo><mi>A</mi><mo separator=\"true\">,</mo><mo stretchy=\"false\">∣</mo><mi>x</mi><mo>−</mo><mi>y</mi><mo stretchy=\"false\">∣</mo><mo>≤</mo><mi>δ</mi><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mo stretchy=\"false\">∣</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">∣</mo><mo>≤</mo><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\forall \\varepsilon &gt; 0, \\exists \\delta &gt; 0, \\forall y \\in A, \\lvert x - y \\rvert \\leq \\delta \\implies \\lvert f(x) - f(y) \\rvert \\leq \\varepsilon</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathdefault\">ε</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∃</span><span class=\"mord mathdefault\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">∣</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.71844em;vertical-align:-0.024em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">∣</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mclose\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">ε</span></span></span></span><br>\nSequence form: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>x</mi><mo>∈</mo><msup><mi>A</mi><mi mathvariant=\"double-struck\">N</mi></msup><mo separator=\"true\">,</mo><mrow><mo fence=\"true\">(</mo><msub><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mo>+</mo><mi mathvariant=\"normal\">∞</mi></mrow></msub><msub><mi>x</mi><mi>n</mi></msub><mo>=</mo><mi>x</mi><mo fence=\"true\">)</mo></mrow><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mrow><mo fence=\"true\">(</mo><msub><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mo>+</mo><mi mathvariant=\"normal\">∞</mi></mrow></msub><mi>f</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo fence=\"true\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\forall x \\in A^{\\mathbb{N}}, \\left(\\lim_{n \\to +\\infty} x_n = x\\right) \\implies \\left(\\lim_{n \\to +\\infty} f(x_n) = f(x)\\right)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0952229999999998em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845223em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbb mtight\">N</span></span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mop\"><span class=\"mop\">lim</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.25833100000000003em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mrel mtight\">→</span><span class=\"mord mtight\">+</span><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mop\"><span class=\"mop\">lim</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.25833100000000003em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mrel mtight\">→</span><span class=\"mord mtight\">+</span><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span></span></span></span></p>",
        "id": 192850334,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585940651
    },
    {
        "content": "<p>Filters are the unifying abstraction here</p>",
        "id": 192853914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585942524
    },
    {
        "content": "<p>In general topological spaces, sequential versions of many concepts exist and are different from the usual ones</p>",
        "id": 192854134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585942659
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192853914\" title=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192853914\">said</a>:</p>\n<blockquote>\n<p>Filters are the unifying abstraction here</p>\n</blockquote>\n<p>I wanted to avoid those :D… But I guess this is it</p>",
        "id": 192854147,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585942670
    },
    {
        "content": "<p>Given a sequence there is a filter defined by \"containing cofinitely many of the points of the sequence\", and a limit of the filter is the same as a limit of the sequence</p>",
        "id": 192854319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585942751
    },
    {
        "content": "<blockquote>\n<p>(1) It looks like we can often write a dual sequential version of many epsilon/delta definitions, is there a name for this? Is there a concept? Can we give a \"normal form\" to those definitions?</p>\n</blockquote>\n<p>Actually, the logical manipulation you are doing to the definitions to get this is well known elsewhere as \"skolemization\", the interchanging of <code>\\all x, \\exists y, P x y</code> with <code>\\ex f, \\forall x, P x (f x)</code></p>",
        "id": 192854705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585942955
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192854705\" title=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192854705\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>(1) It looks like we can often write a dual sequential version of many epsilon/delta definitions, is there a name for this? Is there a concept? Can we give a \"normal form\" to those definitions?</p>\n</blockquote>\n<p>Actually, the logical manipulation you are doing to the definitions to get this is well known elsewhere as \"skolemization\", the interchanging of <code>\\all x, \\exists y, P x y</code> with <code>\\ex f, \\forall x, P x (f x)</code></p>\n</blockquote>\n<p>Okay, I was remembering something in terms of \"skolemization\" and logic, but could not find what I needed. Thank you so much!</p>",
        "id": 192854752,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585942993
    },
    {
        "content": "<p>although in order to make them sequences there is an additional step where you weaken the real number epsilon quantifier to an equivalent natural number quantifier</p>",
        "id": 192854885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585943062
    },
    {
        "content": "<p>(which is where the difference is in general, non first countable topological spaces)</p>",
        "id": 192854922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585943082
    },
    {
        "content": "<p>Okay, it makes a lot of sense now, thank you!</p>",
        "id": 192855130,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585943213
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192854705\" title=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192854705\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>(1) It looks like we can often write a dual sequential version of many epsilon/delta definitions, is there a name for this? Is there a concept? Can we give a \"normal form\" to those definitions?</p>\n</blockquote>\n<p>Actually, the logical manipulation you are doing to the definitions to get this is well known elsewhere as \"skolemization\", the interchanging of <code>\\all x, \\exists y, P x y</code> with <code>\\ex f, \\forall x, P x (f x)</code></p>\n</blockquote>\n<p>BTW, is there any skolemization lemma in Lean?</p>",
        "id": 192855940,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585943648
    },
    {
        "content": "<p><code>classical.skolem</code> in core lean?</p>",
        "id": 192856726,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1585944023
    },
    {
        "content": "<p>If you're formalising analysis in tactic mode you might never need to use terms such as this though</p>",
        "id": 192857201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585944280
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192857201\" title=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192857201\">said</a>:</p>\n<blockquote>\n<p>If you're formalising analysis in tactic mode you might never need to use terms such as this though</p>\n</blockquote>\n<p>Why?</p>",
        "id": 192857651,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585944524
    },
    {
        "content": "<p>My problem is I often run into those dual definitions when I'm attempting to proof stuff.</p>\n<p>And, when let's say I have a proof of having an accumulation point in an epsilon/delta-style, I'm not sure how to convert it into a sequence-style proof easily without writing a lot of machinery (?).</p>",
        "id": 192857770,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585944594
    },
    {
        "content": "<p>You shouldn't be afraid of filters. They are much nicer than epsiloneries.</p>",
        "id": 192858916,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585945262
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192858916\" title=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192858916\">said</a>:</p>\n<blockquote>\n<p>You shouldn't be afraid of filters. They are much nicer than epsiloneries.</p>\n</blockquote>\n<p>All the contrary, I love them; but I am not allowed to use them because of most students (and maybe non-topologists teachers) which do not understand them very well</p>\n<p>But at the same time, I'm frustrated with repeating the same boring &amp; technical proofs…</p>",
        "id": 192859263,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585945458
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> <a href=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192857651\" title=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192857651\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192857201\" title=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192857201\">said</a>:</p>\n<blockquote>\n<p>If you're formalising analysis in tactic mode you might never need to use terms such as this though</p>\n</blockquote>\n<p>Why?</p>\n</blockquote>\n<p>Because we have tactics like <code>choose</code>.</p>",
        "id": 192862249,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585947108
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192862249\" title=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192862249\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> <a href=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192857651\" title=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192857651\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192857201\" title=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192857201\">said</a>:</p>\n<blockquote>\n<p>If you're formalising analysis in tactic mode you might never need to use terms such as this though</p>\n</blockquote>\n<p>Why?</p>\n</blockquote>\n<p>Because we have tactics like <code>choose</code>.</p>\n</blockquote>\n<p>Wow. That's awesome!</p>",
        "id": 192862576,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585947268
    },
    {
        "content": "<p>Though, I come back with an MWE because I didn't succeed to make <code>choose</code> work well.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"n\">class</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">d_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">presep</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sep</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span>  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sym</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">triangle</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">metric_space</span>\n\n<span class=\"n\">def</span> <span class=\"n\">converge</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">d</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">))</span>  <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">sup_is_a_cv_seq</span> <span class=\"o\">[</span><span class=\"n\">conditionally_complete_linear_order</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">):</span>\n  <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"bp\">→</span> <span class=\"n\">bdd_above</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">converge</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">hnn</span> <span class=\"n\">hbdd</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Let's say I want to prove that <code>sup_is_a_cv_seq</code>, so ideally, I should be able to reuse some parts of <code>mathlib</code>, namely <code>cSup_intro</code> I imagine and taking <code>ϵ = 1/n</code> for all n ≥ 0, this way, I should be able to have this lemma easily w/o rewriting a lot of stuff, right?</p>",
        "id": 192868387,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585950821
    },
    {
        "content": "<p>Specifically, if I try to do this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"n\">class</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">d_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">presep</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sep</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span>  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sym</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">triangle</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">metric_space</span>\n\n<span class=\"n\">def</span> <span class=\"n\">converge</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">d</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">))</span>  <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">sup_is_a_cv_seq</span> <span class=\"o\">[</span><span class=\"n\">conditionally_complete_linear_order</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">):</span>\n  <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"bp\">→</span> <span class=\"n\">bdd_above</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">converge</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">hnn</span> <span class=\"n\">hbdd</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n\n  <span class=\"n\">choose</span> <span class=\"n\">x</span> <span class=\"n\">hrange</span> <span class=\"n\">h</span> <span class=\"kn\">using</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">hN</span> <span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">hN</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hrange</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- 1/(N + 1) ≤ eps</span>\n  <span class=\"c1\">-- 1/eps ≤ N + 1</span>\n  <span class=\"c1\">-- 1/eps - 1 ≤ N</span>\n  <span class=\"c1\">-- use (floor(1/eps - 1) + 1)</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">floor</span><span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">ϵ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n\n\n  <span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>The <code>use</code> won't work.</p>",
        "id": 192869848,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585951756
    },
    {
        "content": "<p>Because floor is in Z and I have to prove that the total value is in N, I guess.</p>",
        "id": 192869892,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585951789
    },
    {
        "content": "<p>Huh, no, the code provided uses a ϵ and the ε is not the same…</p>",
        "id": 192870132,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585951925
    },
    {
        "content": "<p>Wonder if it is my CPU or something, but:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"n\">class</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">d_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">presep</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sep</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span>  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sym</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">triangle</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">metric_space</span>\n\n<span class=\"n\">def</span> <span class=\"n\">converge</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">d</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">))</span>  <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">sup_is_a_cv_seq</span> <span class=\"o\">[</span><span class=\"n\">conditionally_complete_linear_order</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">):</span>\n  <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"bp\">→</span> <span class=\"n\">bdd_above</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">converge</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">hnn</span> <span class=\"n\">hbdd</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">choose</span> <span class=\"n\">x</span> <span class=\"n\">hrange</span> <span class=\"n\">h</span> <span class=\"kn\">using</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">hN</span> <span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">hN</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hrange</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- 1/(N + 1) ≤ eps</span>\n  <span class=\"c1\">-- 1/eps ≤ N + 1</span>\n  <span class=\"c1\">-- 1/eps - 1 ≤ N</span>\n  <span class=\"c1\">-- use (floor(1/eps - 1) + 1)</span>\n  <span class=\"n\">set</span> <span class=\"n\">N₀</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">floor</span><span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">N0_pos</span><span class=\"o\">:</span> <span class=\"n\">N₀</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- lift N₀ to ℕ using N0_pos,</span>\n  <span class=\"n\">use</span> <span class=\"n\">N₀</span><span class=\"o\">,</span>\n\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>is taking a lot of time to compute.</p>",
        "id": 192870437,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585952178
    },
    {
        "content": "<p><code>presep</code> could be less clunkily expressed as <code>forall x, d x x = 0</code>, and <code>d_pos</code> follows from <code>triangle</code> and <code>sym</code> and <code>presep</code></p>",
        "id": 192871535,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585952950
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192871535\" title=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192871535\">said</a>:</p>\n<blockquote>\n<p><code>presep</code> could be less clunkily expressed as <code>forall x, d x x = 0</code>, and <code>d_pos</code> follows from <code>triangle</code> and <code>sym</code> and <code>presep</code></p>\n</blockquote>\n<p>Thank you!</p>",
        "id": 192871649,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585953029
    },
    {
        "content": "<p>I am concerned about your first <code>sorry</code></p>",
        "id": 192871702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585953069
    },
    {
        "content": "<p>at the risk of pointing out the obvious, mathlib already has a definition of metric spaces</p>",
        "id": 192871708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585953075
    },
    {
        "content": "<p>But what about a metric space which is also a conditionally complete linear order?</p>",
        "id": 192871731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585953101
    },
    {
        "content": "<p>Because I am concerned that these two structures, the way you have set things up, are completely unrelated.</p>",
        "id": 192871761,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585953118
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192871708\" title=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192871708\">said</a>:</p>\n<blockquote>\n<p>at the risk of pointing out the obvious, mathlib already has a definition of metric spaces</p>\n</blockquote>\n<p>I know, this is rather to have another metric space definition which does not use filters, but only standard sequences.</p>",
        "id": 192871813,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585953139
    },
    {
        "content": "<p>but the definition doesn't say anything about sequences</p>",
        "id": 192871840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585953165
    },
    {
        "content": "<p>For example I don't see any reason why <code>Sup S</code> (which is defined using the complete linear order structure) should have anything to do with <code>converge</code> (which is defined using he metric space)</p>",
        "id": 192871853,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585953174
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192871761\" title=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192871761\">said</a>:</p>\n<blockquote>\n<p>Because I am concerned that these two structures, the way you have set things up, are completely unrelated.</p>\n</blockquote>\n<p>Yes, I definitely feel super wrong about this too. But in order to talk about Sup, I need some structure where bounded above gives me a sup.</p>",
        "id": 192871858,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585953178
    },
    {
        "content": "<p>Sure, but you haven't glued your two choices of structure together</p>",
        "id": 192871879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585953199
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192871853\" title=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192871853\">said</a>:</p>\n<blockquote>\n<p>For example I don't see any reason why <code>Sup S</code> (which is defined using the complete linear order structure) should have anything to do with <code>converge</code> (which is defined using he metric space)</p>\n</blockquote>\n<p>Wouldn't cSup_intro give me the first sorry?</p>",
        "id": 192871898,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585953213
    },
    {
        "content": "<p>You can't prove any theorem relating sups to distances here</p>",
        "id": 192871906,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585953218
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192871840\" title=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192871840\">said</a>:</p>\n<blockquote>\n<p>but the definition doesn't say anything about sequences</p>\n</blockquote>\n<p>Of metric spaces?</p>",
        "id": 192871922,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585953228
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192871906\" title=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192871906\">said</a>:</p>\n<blockquote>\n<p>You can't prove any theorem relating sups to distances here</p>\n</blockquote>\n<p>I see what you mean, right.</p>",
        "id": 192871929,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585953235
    },
    {
        "content": "<p>I think you want to know that the topology is <code>orderable</code></p>",
        "id": 192871990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585953250
    },
    {
        "content": "<p>You have currently written \"Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> be a metric space. Assume also that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> has a total order, which is completely unrelated to the metric space structure. Then...\"</p>",
        "id": 192872018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585953270
    },
    {
        "content": "<p>but that requires the topology of the metric space, so at that point you are better off using the mathlib definition</p>",
        "id": 192872045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585953289
    },
    {
        "content": "<p>You can probably recast it in terms of compatibility directly, something like \"intervals contain open balls and vice versa\"</p>",
        "id": 192872101,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585953354
    },
    {
        "content": "<p>Let's assume I want to prove this only for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span> right now, so the first sorry is not a problem anymore, right? I can just remove the total orderable condition.</p>",
        "id": 192872360,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585953595
    },
    {
        "content": "<p>Okay, I see now why the first sorry was not feasible, indeed.</p>",
        "id": 192872492,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585953707
    },
    {
        "content": "<p>If you don't want to work with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span> directly you need to come up with some structure where the ideas you want to formalise are still true, and it sounds to me like you want the topology induced by the metric to equal the topology induced by the order.</p>",
        "id": 192873171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585954310
    },
    {
        "content": "<p>So either you formalise what the topology induced by your metric is, or you use mathlib metric spaces where it's already there.</p>",
        "id": 192873231,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585954339
    },
    {
        "content": "<p>I'll directly work with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span> right now because I won't use this lemma for something else than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span>.<br>\nAfter I succeed, I'll revisit it to improve it with the topology order condition rather.</p>",
        "id": 192873297,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585954405
    },
    {
        "content": "<p>My whole code becomes now:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"n\">class</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">d_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">presep</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sep</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span>  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sym</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">triangle</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">metric_space</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">d</span>                  <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n  <span class=\"n\">d_pos</span>              <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">abs_nonneg</span><span class=\"o\">],</span>\n  <span class=\"n\">presep</span>             <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">sub_eq_zero_of_eq</span> <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">sep</span>                <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">eq_of_sub_eq_zero</span> <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">sym</span>                <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">abs_sub</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">triangle</span>           <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">abs_sub_le</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">dist_eq</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">dist_0_eq_abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">dist_eq</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">converge</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">d</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">))</span>  <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">sup_is_a_cv_seq</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">):</span>\n  <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"bp\">→</span> <span class=\"n\">bdd_above</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">converge</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">hnn</span> <span class=\"n\">hbdd</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">Sup</span> <span class=\"n\">S</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hs_lt</span> <span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">this</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">dist_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">abs_lt_of_lt_of_neg_lt</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hs_lt</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- by definition of sup.</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">choose</span> <span class=\"n\">x</span> <span class=\"n\">hrange</span> <span class=\"n\">h</span> <span class=\"kn\">using</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">hN</span> <span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">hN</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hrange</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- 1/(N + 1) ≤ eps</span>\n  <span class=\"c1\">-- 1/eps ≤ N + 1</span>\n  <span class=\"c1\">-- 1/eps - 1 ≤ N</span>\n  <span class=\"n\">lift</span> <span class=\"n\">floor</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"bp\">ℕ</span> <span class=\"k\">with</span> <span class=\"n\">N₀</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">N₀</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">transitivity</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span>\n</pre></div>",
        "id": 192873326,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585954438
    },
    {
        "content": "<p>I can't find <code>orderable</code> in mathlib by the way</p>",
        "id": 192873378,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585954458
    },
    {
        "content": "<p>Do you have a question or are you now OK to keep going?</p>",
        "id": 192873416,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585954499
    },
    {
        "content": "<p>I think I can now finish the proof by myself —but feel free if you see stupid things (except the fact I'm writing my own metric_space def which is only for the sake of exercise.)</p>",
        "id": 192873454,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585954546
    },
    {
        "content": "<p>Your proof looks just like the kind of proofs I was writing when I was learning.</p>",
        "id": 192873522,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585954577
    },
    {
        "content": "<p>I definitely abuse of <code>have</code> because I'm trying to see how it works, but I clean up afterwards to have something more natural</p>",
        "id": 192873681,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585954712
    },
    {
        "content": "<p>Other than this, I think I might be using <code>obtain</code> in a suboptimal way sometimes, and I'm not sure by what I should replace it</p>",
        "id": 192873703,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585954741
    },
    {
        "content": "<p><code>transitivity</code> is cool because it expresses 1:1 how I think, but those meta variables are not good I guess ; also, it does not work when I want to do: a ≤ b &lt; c — I don't know what good replacement there would be for this? (I could chain the right lemmas given enough time, but it's somewhat annoying)</p>",
        "id": 192873841,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585954812
    },
    {
        "content": "<p><code>lt_of_le_of_lt</code></p>",
        "id": 192873882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585954851
    },
    {
        "content": "<p>I should try to have the confidence to write those directly as they're so natural…</p>",
        "id": 192873945,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585954898
    },
    {
        "content": "<p>it's actually <code>order_topology</code></p>",
        "id": 192874528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585955395
    },
    {
        "content": "<p>I think the names changed at some point; there is <code>order_topology</code> and <code>order_closed_topology</code> now</p>",
        "id": 192874653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585955506
    },
    {
        "content": "<p>I also distinctly remember something about <code>orderable</code></p>",
        "id": 192874797,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585955597
    },
    {
        "content": "<p>You can also use <code>calc</code> blocks instead of <code>transitivity</code>, or having the confidence to write <code>lt_of_le_of_lt</code>.</p>",
        "id": 192884878,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585967264
    },
    {
        "content": "<p><code>calc</code> blocks also have the advantage of readability (as long as the proof terms on each line stay succinct).</p>",
        "id": 192884925,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585967286
    },
    {
        "content": "<p>Ryan, do you know that transitivity can take an argument instantiating the meta-variable you complain about?</p>",
        "id": 192898541,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585991683
    },
    {
        "content": "<p>I still agree with Scott that you should probably be using more calc blocks. <code>linarith</code> can also get rid of all this as long as you state the relevant fact before, or pass them to linarith.</p>",
        "id": 192898556,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585991736
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I didn't know and I should have tried, I assumed that <code>transitivity</code> didn't take any argument, thanks.</p>",
        "id": 192898559,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585991762
    },
    {
        "content": "<p>Your lemma <code>sup_is_a_cv_seq</code> was the end goal of my Lean L1 course last year.</p>",
        "id": 192898600,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585991789
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192898556\" title=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192898556\">said</a>:</p>\n<blockquote>\n<p>I still agree with Scott that you should probably be using more calc blocks. <code>linarith</code> can also get rid of all this as long as you state the relevant fact before, or pass them to linarith.</p>\n</blockquote>\n<p>I'll give a try to <code>calc</code> blocks, they look like more natural to me.</p>",
        "id": 192898604,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585991805
    },
    {
        "content": "<p>But you are not approaching it in the right Lean mindset. You need to write the proof on paper, and collect all the « obvious facts » used in the proof. Them write lemmas about those obvious facts.</p>",
        "id": 192898611,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585991845
    },
    {
        "content": "<p>I don't like <code>(set.range x) ⊆ S</code> because it is harder to prove and use than <code>\\forall n, x n \\in S</code></p>",
        "id": 192898612,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585991846
    },
    {
        "content": "<p>Yes, I wanted to write this also.</p>",
        "id": 192898615,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585991860
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192898600\" title=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192898600\">said</a>:</p>\n<blockquote>\n<p>Your lemma <code>sup_is_a_cv_seq</code> was the end goal of my Lean L1 course last year.</p>\n</blockquote>\n<p>Oh wow, ideally, I'd like to generalize it to orderable topologies, like I'd been advised by <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> (behind this, I'm proving the classical Bolzano-Weierstrass)</p>",
        "id": 192898662,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585991914
    },
    {
        "content": "<p><code>set.range</code> and <code>set.image</code> are evil. They look nice on paper because you automatically do the required bureaucracy in your head without noticing.</p>",
        "id": 192898665,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585991918
    },
    {
        "content": "<p>Sorry, I meant \"of the exam of my Lean L1 course\".</p>",
        "id": 192898681,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585991960
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192898665\" title=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192898665\">said</a>:</p>\n<blockquote>\n<p><code>set.range</code> and <code>set.image</code> are evil. They look nice on paper because you automatically do the required bureaucracy in your head without noticing.</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192898612\" title=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192898612\">said</a>:</p>\n<blockquote>\n<p>I don't like <code>(set.range x) ⊆ S</code> because it is harder to prove and use than <code>\\forall n, x n \\in S</code></p>\n</blockquote>\n<p>Alright, but stating <code>\\forall n, x n \\in S</code> looks like a bit weird when in reality what I want to express is that the image of the sequence is a subset of S</p>",
        "id": 192898682,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585991962
    },
    {
        "content": "<p>I forgot part of the sentence.</p>",
        "id": 192898683,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585991968
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192898683\" title=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192898683\">said</a>:</p>\n<blockquote>\n<p>I forgot part of the sentence.</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192898681\" title=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192898681\">said</a>:</p>\n<blockquote>\n<p>Sorry, I meant \"of the exam of my Lean L1 course\".</p>\n</blockquote>\n<p>Ah! Is it available somewhere? I'm quite interested into this!</p>",
        "id": 192898687,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585991987
    },
    {
        "content": "<p>No, you want to express that the sequence takes values in S.</p>",
        "id": 192898688,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585991987
    },
    {
        "content": "<p>You would never say \"the image of the sequence is a subset of S\".</p>",
        "id": 192898731,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585992023
    },
    {
        "content": "<p>Indeed, I agree</p>",
        "id": 192898749,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585992042
    },
    {
        "content": "<p>But I'd just write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>n</mi></msub><msub><mo stretchy=\"false\">)</mo><mi>n</mi></msub><mo>∈</mo><msup><mi>S</mi><mi mathvariant=\"double-struck\">N</mi></msup></mrow><annotation encoding=\"application/x-tex\">(x_n)_n \\in S^{\\mathbb{N}}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.845223em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845223em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbb mtight\">N</span></span></span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 192898758,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585992061
    },
    {
        "content": "<p>but whenever you prove / use this sentence you always prove that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>n</mi></msub><mo>∈</mo><mi>S</mi><mi mathvariant=\"normal\">∀</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">x_n \\in S \\forall n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6891em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\">∀</span><span class=\"mord mathdefault\">n</span></span></span></span></p>",
        "id": 192898808,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585992140
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> <a href=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192898758\" title=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192898758\">said</a>:</p>\n<blockquote>\n<p>But I'd just write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>n</mi></msub><msub><mo stretchy=\"false\">)</mo><mi>n</mi></msub><mo>∈</mo><msup><mi>S</mi><mi mathvariant=\"double-struck\">N</mi></msup></mrow><annotation encoding=\"application/x-tex\">(x_n)_n \\in S^{\\mathbb{N}}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.845223em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845223em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbb mtight\">N</span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n</blockquote>\n<p>You shouldn't. Really.</p>",
        "id": 192898818,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585992221
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192898818\" title=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192898818\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> <a href=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192898758\" title=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192898758\">said</a>:</p>\n<blockquote>\n<p>But I'd just write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>n</mi></msub><msub><mo stretchy=\"false\">)</mo><mi>n</mi></msub><mo>∈</mo><msup><mi>S</mi><mi mathvariant=\"double-struck\">N</mi></msup></mrow><annotation encoding=\"application/x-tex\">(x_n)_n \\in S^{\\mathbb{N}}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.845223em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845223em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbb mtight\">N</span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n</blockquote>\n<p>You shouldn't. Really.</p>\n</blockquote>\n<p>What would you advise to write?</p>",
        "id": 192898860,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585992272
    },
    {
        "content": "<p>Anyway, you should have lemma saying <code>∀ ε &gt; 0, ∃ x ∈ S, Sup S - ε &lt; x</code> outside from your main proof. And then the same with 1/(N+1) instead of ε.</p>",
        "id": 192898919,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585992390
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192898919\" title=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192898919\">said</a>:</p>\n<blockquote>\n<p>Anyway, you should have lemma saying <code>∀ ε &gt; 0, ∃ x ∈ S, Sup S - ε &lt; x</code> outside from your main proof. And then the same with 1/(N+1) instead of ε.</p>\n</blockquote>\n<p>Yes, I was planning to extract those as they're looking like lemmas on themselves.</p>",
        "id": 192898970,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585992488
    },
    {
        "content": "<p>And a lemma saying that if for all n, <code>d (x n) l &lt; 1/(N+1)</code> then <code>x</code> converges to <code>l</code>.</p>",
        "id": 192898971,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585992500
    },
    {
        "content": "<p>Because these all lemmas that are \"obvious\" when you have already reached the point where you want to prove this Sup thing.</p>",
        "id": 192898978,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585992543
    },
    {
        "content": "<p>So you don't want to be proving them in the middle of this proof.</p>",
        "id": 192898981,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585992557
    },
    {
        "content": "<p>You wouldn't do that on paper and you wouldn't do that in Lean.</p>",
        "id": 192898984,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585992571
    },
    {
        "content": "<p>And of course a lemma saying that 1/(N+1) is less than any epsilon for N large enough</p>",
        "id": 192899034,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585992608
    },
    {
        "content": "<p>Definitely.</p>",
        "id": 192899137,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585992806
    },
    {
        "content": "<p>Would <code>one_div_lt_epsilon</code> be a right name for the last lemma?</p>",
        "id": 192899140,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585992834
    },
    {
        "content": "<p>For <code>forall n, d (x n) l &lt; 1/(N + 1) → converge x l</code>, I'm not sure how to call it except <code>convergence_aux_1</code></p>",
        "id": 192899189,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585992888
    },
    {
        "content": "<p><code>converge_of_dist_lt_one_div_succ</code>?</p>",
        "id": 192899218,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585992954
    },
    {
        "content": "<p><code>converge_of_d_lt</code></p>",
        "id": 192899219,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585992955
    },
    {
        "content": "<p>I tried to take into account most of your advice and came back with this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"n\">class</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">d_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">presep</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sep</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span>  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sym</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">triangle</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">metric_space</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">d</span>                  <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n  <span class=\"n\">d_pos</span>              <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">abs_nonneg</span><span class=\"o\">],</span>\n  <span class=\"n\">presep</span>             <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">sub_eq_zero_of_eq</span> <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">sep</span>                <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">eq_of_sub_eq_zero</span> <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">sym</span>                <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">abs_sub</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">triangle</span>           <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">abs_sub_le</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">dist_eq</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">dist_0_eq_abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">dist_eq</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">converge</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">d</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">))</span>  <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sup_sub_lt_eps</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">}:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">Sup</span> <span class=\"n\">S</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sup_dist_lt_eps</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">}:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hs_lt</span> <span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sup_sub_lt_eps</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">dist_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">abs_lt_of_lt_of_neg_lt</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hs_lt</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">converge_of_dist_lt_one_div_succ</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">converge</span> <span class=\"n\">x</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n<span class=\"k\">obtain</span> <span class=\"bp\">⟨</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">hN</span> <span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_nat_one_div_lt</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n<span class=\"n\">use</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n<span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n<span class=\"k\">calc</span> <span class=\"n\">d</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"n\">n</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">one_div_le_one_div</span> <span class=\"n\">hn</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">hN</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">sup_is_a_cv_seq</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">):</span>\n  <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"bp\">→</span> <span class=\"n\">bdd_above</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">converge</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">hnn</span> <span class=\"n\">hbdd</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sup_dist_lt_eps</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">one_div_pos_of_nat</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">choose</span> <span class=\"n\">x</span> <span class=\"n\">hrange</span> <span class=\"n\">h</span> <span class=\"kn\">using</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hrange</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">converge_of_dist_lt_one_div_succ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- this line should work (?)</span>\n  <span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>But, I have some issue regarding the types, here is the state at the last step:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">converge_of_dist_lt_one_div_succ</span> <span class=\"n\">h</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">h</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">hnn</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n<span class=\"n\">hbdd</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">hrange</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"n\">N</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"err\">⊢</span> <span class=\"n\">converge</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I'm not sure what is actually different except some typeclasses, I tried to print those with <code>set_option pp.all true</code> but got lost as there were a huge amount of those.</p>",
        "id": 192908341,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586008038
    },
    {
        "content": "<p>You have a &lt; in one and a &lt;=in the other</p>",
        "id": 192908427,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586008181
    },
    {
        "content": "<p>Thanks…</p>",
        "id": 192908435,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586008194
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Is there a way to apply <code>le_of_lt</code> in this part:</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_of_lt</span><span class=\"o\">,</span> <span class=\"c1\">-- won&#39;t work because of exists</span>\n  <span class=\"n\">apply</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sup_dist_lt_eps</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">one_div_pos_of_nat</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>?</p>",
        "id": 192908501,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586008297
    },
    {
        "content": "<p>Instead of <code>apply</code> use <code>convert</code> maybe. What is the type of real.sup_dist_lt_pos?</p>",
        "id": 192908754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586008566
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192908754\" title=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192908754\">said</a>:</p>\n<blockquote>\n<p>Instead of <code>apply</code> use <code>convert</code> maybe. What is the type of real.sup_dist_lt_pos?</p>\n</blockquote>\n<p><code>lemma real.sup_dist_lt_eps {S: set ℝ}: ∀ ε &gt; 0, ∃ x ∈ S, d (Sup S) x &lt; ε := begin</code></p>",
        "id": 192908767,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586008610
    },
    {
        "content": "<p>Make a term which starts with an exists from that term and convert it</p>",
        "id": 192908780,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586008649
    },
    {
        "content": "<p>Ie supply the correct epsilon</p>",
        "id": 192908838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586008690
    },
    {
        "content": "<p>Hmm this still won't work</p>",
        "id": 192908851,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586008723
    },
    {
        "content": "<p>right, it won't work because <code>le_of_lt</code> is not an equality</p>",
        "id": 192908854,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586008732
    },
    {
        "content": "<p>I tried this: <code>convert real.sup_dist_lt_eps (1 / (N + 1)) (nat.one_div_pos_of_nat),</code></p>",
        "id": 192908861,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586008751
    },
    {
        "content": "<p>Well just do cases on the term to get to an epsilon</p>",
        "id": 192908862,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586008751
    },
    {
        "content": "<p>Convert won't work</p>",
        "id": 192908866,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586008762
    },
    {
        "content": "<p>You need to know if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>Q</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P(x) \\implies Q(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span> for all x, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">∃</mi><mi>x</mi><mo separator=\"true\">,</mo><mi>P</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">∃</mi><mi>x</mi><mo separator=\"true\">,</mo><mi>Q</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\exists x, P(x)) \\implies (\\exists x, Q(x))</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">∃</span><span class=\"mord mathdefault\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">∃</span><span class=\"mord mathdefault\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span> and we don't have a general framework for that</p>",
        "id": 192908868,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586008766
    },
    {
        "content": "<p>If it was <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span></span></span></span> and not <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext></mrow><annotation encoding=\"application/x-tex\">\\implies</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.549em;vertical-align:-0.024em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span></span></span> then you could use convert or conv or whatever.</p>",
        "id": 192908877,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586008789
    },
    {
        "content": "<p>Do cases on the term you make with the exists and use that x</p>",
        "id": 192908936,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586008828
    },
    {
        "content": "<p>Or just apply the logic lemma. Presumably it's in logic.basic?</p>",
        "id": 192909006,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586008959
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192908862\" title=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192908862\">said</a>:</p>\n<blockquote>\n<p>Well just do cases on the term to get to an epsilon</p>\n</blockquote>\n<p>Is this something like this: <code>cases (real.sup_dist_lt_eps (1 / (N + 1)) (nat.one_div_pos_of_nat)) with x hx,</code> often?</p>",
        "id": 192909007,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586008961
    },
    {
        "content": "<p>If you got an x and an hx that looks good then yes. You might be better off with rcases though</p>",
        "id": 192909032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586009019
    },
    {
        "content": "<p>Because you want to extract x in S and not just x</p>",
        "id": 192909071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586009043
    },
    {
        "content": "<p>Is there a preference between rcases and obtain?</p>",
        "id": 192909073,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586009045
    },
    {
        "content": "<p>Because I often use obtain to extract arbitrary complex constructors</p>",
        "id": 192909079,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586009052
    },
    {
        "content": "<p>Obtain is best</p>",
        "id": 192909112,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586009103
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hrange</span><span class=\"o\">,</span> <span class=\"n\">hsup</span> <span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sup_dist_lt_eps</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">one_div_pos_of_nat</span><span class=\"o\">)),</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hrange</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_of_lt</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hsup</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>anyway</p>",
        "id": 192909114,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586009109
    },
    {
        "content": "<p>I always forget about it because it's relatively new</p>",
        "id": 192909117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586009114
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 192909130,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586009128
    },
    {
        "content": "<p>Now can you write it in pure term mode?</p>",
        "id": 192909191,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586009184
    },
    {
        "content": "<p>lambda instead of intro etc?</p>",
        "id": 192909195,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586009206
    },
    {
        "content": "<p>There are no serious tactics in your code so you don't need tactic mode at all</p>",
        "id": 192909208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586009224
    },
    {
        "content": "<p>Obtain becomes let ... in</p>",
        "id": 192909217,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586009248
    },
    {
        "content": "<p>Split is pointy brackets</p>",
        "id": 192909221,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586009260
    },
    {
        "content": "<p>And exact can be removed completely</p>",
        "id": 192909227,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586009271
    },
    {
        "content": "<p>I started like this: <code>λ N,\n  let ⟨ x, hrange, hsup ⟩ in (real.sup_dist_lt_eps S (1 / (N + 1)) (nat.one_div_pos_of_nat)),</code></p>",
        "id": 192909280,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586009315
    },
    {
        "content": "<p>But it is complaining about the syntax — I guess I'm doing something wrong</p>",
        "id": 192909289,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586009327
    },
    {
        "content": "<p>Huh, yes <code>let x := t in s</code></p>",
        "id": 192909308,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586009369
    },
    {
        "content": "<p>Your use of <code>obtain</code> make it completely equivalent to <code>rcases</code>. This is fine, but you should know the added value of <code>obtain</code> is you can write the expected type upfront.</p>",
        "id": 192909313,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586009382
    },
    {
        "content": "<p>In your case that would be purely for readability purposes.</p>",
        "id": 192909376,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586009423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192909313\" title=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192909313\">said</a>:</p>\n<blockquote>\n<p>Your use of <code>obtain</code> make it completely equivalent to <code>rcases</code>. This is fine, but you should know the added value of <code>obtain</code> is you can write the expected type upfront.</p>\n</blockquote>\n<p>I see, I can do <code>obtain &lt;pattern&gt;: type := …</code> and I can omit <code>&lt;pattern&gt;</code> ?</p>",
        "id": 192909405,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586009502
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I'm not sure how to replace the <code>use x;</code> (also is there any docs for the commands for the pointy brackets, etc. ?)</p>",
        "id": 192909458,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586009548
    },
    {
        "content": "<p>You can do a lot of things:</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">long</span> <span class=\"k\">proof</span><span class=\"bp\">...</span> <span class=\"o\">},</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">proof_term</span><span class=\"o\">,</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">proof_term</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 192909481,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586009620
    },
    {
        "content": "<p>Only the first case really needs obtain rather than rcases. But all are more readable than rcases</p>",
        "id": 192909534,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586009660
    },
    {
        "content": "<p>And of course you can get the same with <code>have</code> + <code>rcases</code> but you'd get tired of this pretty quickly.</p>",
        "id": 192909565,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586009697
    },
    {
        "content": "<p>Makes sense, is there any docs to write tactics? I'm understanding more and more how to compose all of this and I'm interested in how it works</p>",
        "id": 192909642,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586009792
    },
    {
        "content": "<p>Beginning tactic writing is covered in a doc which Patrick wrote in the docs directory of mathlib</p>",
        "id": 192909918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586010212
    },
    {
        "content": "<p>Now I'm this far: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"bp\">⟨</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb</span> <span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sup_dist_lt_eps</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">one_div_pos_of_nat</span><span class=\"o\">))</span>\n  <span class=\"k\">in</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"o\">),</span>\n</pre></div>\n\n\n<p>Is it expected that Lean VSCode cannot print the current state in term mode?</p>",
        "id": 192910133,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586010498
    },
    {
        "content": "<p>Use X is just &lt;X,_&gt; with the right brackets</p>",
        "id": 192910167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586010569
    },
    {
        "content": "<p>By the way, can we make VSCode highlight obtain (and set) the same way as have (and let)?</p>",
        "id": 192910169,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1586010578
    },
    {
        "content": "<p>Use <code>_</code> where you have <code>(...)</code>, and then hover over it, or something (I use emacs, but I assume vscode can do this too)</p>",
        "id": 192910222,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586010626
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> Feel free to PR a change to this file: <a href=\"https://github.com/leanprover/vscode-lean/blob/9a4400a1f3db57d0a25c1944812b0c2dc9ff2141/syntaxes/lean.json#L35\" title=\"https://github.com/leanprover/vscode-lean/blob/9a4400a1f3db57d0a25c1944812b0c2dc9ff2141/syntaxes/lean.json#L35\">https://github.com/leanprover/vscode-lean/blob/9a4400a1f3db57d0a25c1944812b0c2dc9ff2141/syntaxes/lean.json#L35</a>  But I wouldn't highlight <code>set</code>: this occurs often as a non-tactic, e.g. in <code>set α</code>.</p>",
        "id": 192910244,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586010665
    },
    {
        "content": "<p>Indeed, it works when I use <code>_</code>, now I have this state:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">context</span><span class=\"o\">:</span>\n<span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">hnn</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n<span class=\"n\">hbdd</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n<span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">let_match</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n<span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>But the <code>exists</code> in front of this is strange? I'm not sure how I can combine ha/hb to finish</p>",
        "id": 192910249,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586010691
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192910244\" title=\"#narrow/stream/116395-maths/topic/Link.20between.20sequential.20and.20epsilon.2Fdelta.20versions/near/192910244\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> Feel free to PR a change to this file: <a href=\"https://github.com/leanprover/vscode-lean/blob/9a4400a1f3db57d0a25c1944812b0c2dc9ff2141/syntaxes/lean.json#L35\" title=\"https://github.com/leanprover/vscode-lean/blob/9a4400a1f3db57d0a25c1944812b0c2dc9ff2141/syntaxes/lean.json#L35\">https://github.com/leanprover/vscode-lean/blob/9a4400a1f3db57d0a25c1944812b0c2dc9ff2141/syntaxes/lean.json#L35</a>  But I wouldn't highlight <code>set</code>: this occurs often as a non-tactic, e.g. in <code>set α</code>.</p>\n</blockquote>\n<p>Thanks! Ah yeah good point</p>",
        "id": 192910298,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1586010723
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"bp\">⟨</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb</span> <span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sup_dist_lt_eps</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">one_div_pos_of_nat</span><span class=\"o\">))</span>\n  <span class=\"k\">in</span> <span class=\"bp\">⟨</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">hb</span> <span class=\"bp\">⟩</span> <span class=\"bp\">⟩</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>This seems to work!</p>",
        "id": 192910328,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586010778
    },
    {
        "content": "<p>Thank you for the tip! I have seen symbols like <code>▸ </code>, what does that mean? I see it in <code>mathlib</code> sometimes, but I didn't find any docs on it</p>",
        "id": 192910410,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586010859
    },
    {
        "content": "<p>ah, the dreaded \"stupid triangle\"</p>",
        "id": 192910418,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586010884
    },
    {
        "content": "<p>also known by its full name as the dreaded \"I'm-sorry-but-I-don't-know-the-expected-type triangle\".</p>",
        "id": 192910526,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586011019
    },
    {
        "content": "<p>if <code>p : P a</code> and <code>e : a = b</code> then <code>e ▸ p : P b</code>, except it basically never manages to work out what <code>P</code> should be</p>",
        "id": 192910533,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586011029
    },
    {
        "content": "<p>it's like a term-mode version of <code>rw</code> that rarely works</p>",
        "id": 192910547,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586011065
    },
    {
        "content": "<p>Oh okay</p>",
        "id": 192910555,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586011078
    },
    {
        "content": "<p>You get extra credit when you manage to use it in a proof.</p>",
        "id": 192910595,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586011089
    },
    {
        "content": "<p>Hahahaha</p>",
        "id": 192910611,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586011117
    },
    {
        "content": "<p>Good job for getting the term!</p>",
        "id": 192910883,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586011486
    },
    {
        "content": "<p>One thing to remember about the stupid triangle is that in contrast to tactic mode it has to be told all inputs , ie rw add_comm works but with the triangle you might have to put add_comm a b</p>",
        "id": 192910967,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586011578
    }
]