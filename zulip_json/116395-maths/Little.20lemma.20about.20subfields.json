[
    {
        "content": "<p>Is the following lemma in mathlib already in some form? If not, should I make a PR to add it?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory</span><span class=\"bp\">.</span><span class=\"n\">subfield</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_with_zero_power</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">is_subfield</span><span class=\"bp\">.</span><span class=\"n\">pow_mem</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_subfield</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>   <span class=\"n\">lift</span> <span class=\"n\">n</span> <span class=\"n\">to</span> <span class=\"bp\">ℕ</span> <span class=\"kn\">using</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">is_submonoid</span><span class=\"bp\">.</span><span class=\"n\">pow_mem</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span>   <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"k\">show</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">ring</span><span class=\"o\">),</span> <span class=\"n\">fpow_mul</span><span class=\"o\">,</span> <span class=\"n\">fpow_neg</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">fpow_one</span><span class=\"o\">],</span>\n        <span class=\"n\">lift</span> <span class=\"bp\">-</span><span class=\"n\">n</span> <span class=\"n\">to</span> <span class=\"bp\">ℕ</span> <span class=\"kn\">using</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"bp\">-</span><span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>\n        <span class=\"n\">exact</span> <span class=\"n\">is_submonoid</span><span class=\"bp\">.</span><span class=\"n\">pow_mem</span> <span class=\"o\">(</span><span class=\"n\">is_subfield</span><span class=\"bp\">.</span><span class=\"n\">inv_mem</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207377556,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597821965
    },
    {
        "content": "<p>Also is this the right stream in which to ask this kind of question?</p>",
        "id": 207377630,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597822054
    },
    {
        "content": "<p>I think we should bundle <code>is_subfield</code></p>",
        "id": 207377651,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597822079
    },
    {
        "content": "<p>also, we use 2 spaces for indent</p>",
        "id": 207377699,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597822093
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/116395-maths/topic/Little.20lemma.20about.20subfields/near/207377699\">said</a>:</p>\n<blockquote>\n<p>also, we use 2 spaces for indent</p>\n</blockquote>\n<p>Yeah, I know, but I'm too lazy to change it for zulip.</p>",
        "id": 207377752,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597822160
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/116395-maths/topic/Little.20lemma.20about.20subfields/near/207377651\">said</a>:</p>\n<blockquote>\n<p>I think we should bundle <code>is_subfield</code></p>\n</blockquote>\n<p>Yeah, Kevin Buzzard mentioned this in the Berkeley stream. But I want to have something like this in mathlib because we used it in proving the primitive element theorem and I don't want to wait to see if <code>is_subfield</code> gets bundled</p>",
        "id": 207377860,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597822242
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> Small remark about the name, this should be <code>fpow_mem</code></p>",
        "id": 207377970,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597822326
    },
    {
        "content": "<p>Also, it's true for <code>subgroup_with_zero</code>, but I'm scared of thinking that such an object will be brought into existence <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 207378020,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597822383
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span> <a href=\"#narrow/stream/116395-maths/topic/Little.20lemma.20about.20subfields/near/207377752\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/116395-maths/topic/Little.20lemma.20about.20subfields/near/207377699\">said</a>:</p>\n<blockquote>\n<p>also, we use 2 spaces for indent</p>\n</blockquote>\n<p>Yeah, I know, but I'm too lazy to change it for zulip.</p>\n</blockquote>\n<p>you can edit the default setting</p>",
        "id": 207378868,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597823151
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> is the default setting 4 spaces for indent? if so, could you change it to 2 spaces?</p>",
        "id": 207378885,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597823162
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/.vscode/settings.json#L3\">https://github.com/leanprover-community/mathlib/blob/master/.vscode/settings.json#L3</a></p>",
        "id": 207378994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597823259
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> then why do I still see people typing with 4 spaces?</p>",
        "id": 207379087,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597823328
    },
    {
        "content": "<p>maybe they're not on vscode...?</p>",
        "id": 207379098,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597823345
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/116395-maths/topic/Little.20lemma.20about.20subfields/near/207379098\">said</a>:</p>\n<blockquote>\n<p>maybe they're not on vscode...?</p>\n</blockquote>\n<p>For reference I am using vscode and as far as I know I have never changed the indentation settings</p>",
        "id": 207379146,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597823400
    },
    {
        "content": "<p>what are your indentation settings, according to vscode?</p>",
        "id": 207379205,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597823429
    },
    {
        "content": "<p>ctrl-comma, type \"indent\" and see what is set for \"user\" and \"workspace\"</p>",
        "id": 207379220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597823455
    },
    {
        "content": "<p>the indentation setting is also visible in the bottom right on the status bar</p>",
        "id": 207379310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597823527
    },
    {
        "content": "<p>Default tab size is 4 and detect indentation is also on</p>",
        "id": 207379322,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597823535
    },
    {
        "content": "<p>Maybe they're working on another project?</p>",
        "id": 207379327,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597823539
    },
    {
        "content": "<p>Are you editing mathlib, or something that depends on mathlib?</p>",
        "id": 207379341,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597823550
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/Little.20lemma.20about.20subfields/near/207379327\">said</a>:</p>\n<blockquote>\n<p>Maybe they're working on another project?</p>\n</blockquote>\n<p>Yeah, I'm not on a branch of mathlib</p>",
        "id": 207379347,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597823555
    },
    {
        "content": "<p>if it detects your indentation style, then that's a self fulfilling prophecy</p>",
        "id": 207379358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597823577
    },
    {
        "content": "<p>lol</p>",
        "id": 207379367,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597823590
    },
    {
        "content": "<p>It's also a project with some other people at Berkeley so I'm not sure whether the indentation in this particular file originated with me or someone else</p>",
        "id": 207379396,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597823619
    },
    {
        "content": "<p>I suggest you copy that file that Mario linked to</p>",
        "id": 207379460,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597823656
    },
    {
        "content": "<p>you should set the indent to 2 space in \"workspace\" and put the file in your project</p>",
        "id": 207379466,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597823660
    },
    {
        "content": "<p>It will encourage everyone to follow mathlib's style</p>",
        "id": 207379477,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597823670
    },
    {
        "content": "<p>which is equivalent to johan's suggestion</p>",
        "id": 207379478,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597823671
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/Little.20lemma.20about.20subfields/near/207378020\">said</a>:</p>\n<blockquote>\n<p>Also, it's true for <code>subgroup_with_zero</code>, but I'm scared of thinking that such an object will be brought into existence <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>\n</blockquote>\n<p>Should I make a PR with this version?</p>",
        "id": 207379482,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597823679
    },
    {
        "content": "<p>I really don't know if we should start thinking about bundled subgroups with zero</p>",
        "id": 207379504,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597823714
    },
    {
        "content": "<p>It sounds \"off-topic\"...</p>",
        "id": 207379529,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597823735
    },
    {
        "content": "<p>And because of bundling, subfields will not be subgroup_with_zero automatically</p>",
        "id": 207379562,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597823759
    },
    {
        "content": "<p>So should I make a PR with the original version? Or wait for <code>is_subfield</code> to be bundled? Or something else?</p>",
        "id": 207379673,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1597823822
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> I think you have a better feeling for how you want to proceed with field theory</p>",
        "id": 207380414,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597824448
    },
    {
        "content": "<p>as of now, <code>is_subfield</code> is only used in 5 files, so I don't really know what we should do</p>",
        "id": 207380481,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597824488
    },
    {
        "content": "<p>Sure, but we haven't started doing Galois theory <em>in mathlib</em> yet...</p>",
        "id": 207382108,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597825917
    },
    {
        "content": "<p>I guess that once we have Galois groups, we'll want to start using <code>fixed_field</code> quite a bit.</p>",
        "id": 207382173,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597825963
    },
    {
        "content": "<p>And if it is just a type, instead of a subfield, then <code>fpow_mem</code> will be painful</p>",
        "id": 207382204,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597825996
    },
    {
        "content": "<p>So there is a case for using substructures</p>",
        "id": 207382213,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597826009
    },
    {
        "content": "<p>Maybe we can do a typeclass predicate on bundled subrings? I guess that is very evil mixing of design choices.</p>",
        "id": 207382284,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597826049
    },
    {
        "content": "<p>Bundled subrings are essentially done in the bundled-subrings branch by the way, thanks to <span class=\"user-mention\" data-user-id=\"250372\">@Ashvni Narayanan</span>  There's just one non-mathlib-looking proof in there right now.</p>",
        "id": 207383116,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597826785
    },
    {
        "content": "<p>Yeah, I am working on converting it into a term mode proof.</p>",
        "id": 207422480,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1597850781
    },
    {
        "content": "<p>Why do you insist on having a proof term instead of a tactic proof?</p>",
        "id": 207423252,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597851140
    },
    {
        "content": "<p>I am very happy to provide a tactic mode proof, if it is accepted.</p>",
        "id": 207423835,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1597851418
    },
    {
        "content": "<p>Why wouldn't it be accepted? mathlib is full of tactics!</p>",
        "id": 207424766,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597851872
    },
    {
        "content": "<p>The proof is quite long and winding. I thought term mode might be a more efficient way of doing it. However, I am finding it quite non-trivial to transform my proof.</p>",
        "id": 207427185,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1597853005
    }
]