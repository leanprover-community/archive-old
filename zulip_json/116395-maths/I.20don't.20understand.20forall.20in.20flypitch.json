[
    {
        "content": "<p>I'm reading flypitch, and in the definition of <a href=\"https://github.com/flypitch/flypitch/blob/aea5800db1f4cce53fc4a113711454b27388ecf8/src/fol.lean#L515\"><code>preformula</code></a>, we have:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">preformula</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">...</span>\n<span class=\"bp\">|</span> <span class=\"n\">all</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">preformula</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">preformula</span> <span class=\"mi\">0</span>\n</code></pre></div>\n\n\n<p>I must be missing something -- don't we need to specify which variable we're quantifying over? How do we distinguish <code>forall x, x &lt; y</code> from <code>forall y, x &lt; y</code>?</p>",
        "id": 205323935,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1596006084
    },
    {
        "content": "<p>I guess it uses de Bruijn indices, and so <code>f</code> contains the info</p>",
        "id": 205324120,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1596006261
    },
    {
        "content": "<p>I see, so the <code>x &lt; y</code> in <code>forall x, x &lt; y</code> is <em>different</em> from the <code>x &lt; y</code> in <code>forall y, x &lt; y</code>.</p>",
        "id": 205324399,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1596006586
    },
    {
        "content": "<p>Yup (that's my guess)</p>",
        "id": 205324451,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1596006604
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> preterm L l is a partially applied term. if applied to n terms, it becomes a term.</span>\n<span class=\"cm\">* Every element of preterm L 0 is a well-formed term.</span>\n<span class=\"cm\">* We use this encoding to avoid mutual or nested inductive types, since those are not too convenient to work with in Lean. -/</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">preterm</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">preterm</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">func</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">functions</span> <span class=\"n\">l</span><span class=\"o\">),</span> <span class=\"n\">preterm</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">preterm</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">preterm</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">preterm</span> <span class=\"n\">l</span>\n<span class=\"kn\">export</span> <span class=\"n\">preterm</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"n\">preterm</span> <span class=\"n\">L</span> <span class=\"mi\">0</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> preformula l is a partially applied formula. if applied to n terms, it becomes a formula.</span>\n<span class=\"cm\">  * We only have implication as binary connective. Since we use classical logic, we can define</span>\n<span class=\"cm\">    the other connectives from implication and falsum.</span>\n<span class=\"cm\">  * Similarly, universal quantification is our only quantifier.</span>\n<span class=\"cm\">  * We could make `falsum` and `equal` into elements of rel. However, if we do that, then we cannot make the interpretation of them in a model definitionally what we want.</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">preformula</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">falsum</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">preformula</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">equal</span> <span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">preformula</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">rel</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">relations</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">preformula</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"n\">apprel</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">preformula</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">preformula</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"n\">imp</span> <span class=\"o\">(</span><span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">preformula</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">preformula</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">all</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">preformula</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">preformula</span> <span class=\"mi\">0</span>\n<span class=\"kn\">export</span> <span class=\"n\">preformula</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">formula</span> <span class=\"o\">:=</span> <span class=\"n\">preformula</span> <span class=\"n\">L</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 205325023,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596007190
    },
    {
        "content": "<p>so presumably <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>x</mi><mo separator=\"true\">,</mo><mi>x</mi><mo>&lt;</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">\\forall x, x &lt; y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> is <code>all (apprel (apprel (rel ()) (var 0)) (var 1))</code> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>y</mi><mo separator=\"true\">,</mo><mi>x</mi><mo>&lt;</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">\\forall y, x &lt; y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> is with <code>0</code> and <code>1</code> swapped</p>",
        "id": 205325141,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596007277
    },
    {
        "content": "<p>more evidence is:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> subst_term t s n substitutes s for (&amp;n) and reduces the level of all variables above n by 1 -/</span>\n<span class=\"n\">def</span> <span class=\"n\">subst_term</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">},</span> <span class=\"n\">preterm</span> <span class=\"n\">L</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">preterm</span> <span class=\"n\">L</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">&amp;</span><span class=\"n\">k</span>          <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">subst_realize</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"err\">↑</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"n\">k</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">func</span> <span class=\"n\">f</span><span class=\"o\">)</span>    <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">func</span> <span class=\"n\">f</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">subst_term</span> <span class=\"n\">t₁</span> <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subst_term</span> <span class=\"n\">t₂</span> <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">subst_formula</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">},</span> <span class=\"n\">preformula</span> <span class=\"n\">L</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">preformula</span> <span class=\"n\">L</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"n\">falsum</span>       <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">falsum</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"err\">≃</span> <span class=\"n\">t₂</span><span class=\"o\">)</span>    <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">subst_term</span> <span class=\"n\">t₁</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"err\">≃</span> <span class=\"n\">subst_term</span> <span class=\"n\">t₂</span> <span class=\"n\">s</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"n\">R</span><span class=\"o\">)</span>      <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rel</span> <span class=\"n\">R</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">apprel</span> <span class=\"n\">f</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">apprel</span> <span class=\"o\">(</span><span class=\"n\">subst_formula</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subst_term</span> <span class=\"n\">t</span> <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">f₁</span> <span class=\"err\">⟹</span> <span class=\"n\">f₂</span><span class=\"o\">)</span>   <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">subst_formula</span> <span class=\"n\">f₁</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"err\">⟹</span> <span class=\"n\">subst_formula</span> <span class=\"n\">f₂</span> <span class=\"n\">s</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"err\">&#39;</span> <span class=\"n\">f</span><span class=\"o\">)</span>       <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span><span class=\"err\">&#39;</span> <span class=\"n\">subst_formula</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 205325279,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596007375
    },
    {
        "content": "<p>Right -- so we always quantify over <code>var 0</code>. </p>\n<p>So if we want to say <code>forall z, x &lt; y</code>, we'd write the same thing with <code>0</code> and <code>1</code> replaced with <code>1</code> and <code>2</code>, etc.</p>",
        "id": 205325890,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1596007895
    },
    {
        "content": "<p>you would actually need to look at how a formula is interpreted, but the file is too big and causes performance issues for my humble chrome browser so I'm afraid I can't help you with that</p>",
        "id": 205325981,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596007975
    },
    {
        "content": "<p>ok, thanks</p>",
        "id": 205326023,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1596008029
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130500\">@Abhimanyu Pallavi Sudhir</span> The answer to your question is yes</p>",
        "id": 205327340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596009171
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> I don't think formula interpretation comes into it? He's just talking about writing formulae</p>",
        "id": 205327387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596009219
    },
    {
        "content": "<p>well to know what formula a term of <code>pre_formula 0</code> represents, one needs to look at the code where they define interpretation of a <code>pre_formula 0</code></p>",
        "id": 205327457,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596009261
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> realization of formulas -/</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">realize_formula</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Structure</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">preformula</span> <span class=\"n\">L</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">dvector</span> <span class=\"n\">S</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"n\">v</span> <span class=\"n\">falsum</span>       <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"err\">≃</span> <span class=\"n\">t₂</span><span class=\"o\">)</span>    <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"n\">realize_term</span> <span class=\"n\">v</span> <span class=\"n\">t₁</span> <span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"n\">realize_term</span> <span class=\"n\">v</span> <span class=\"n\">t₂</span> <span class=\"n\">xs</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"n\">R</span><span class=\"o\">)</span>      <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">rel_map</span> <span class=\"n\">R</span> <span class=\"n\">xs</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">apprel</span> <span class=\"n\">f</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"n\">realize_formula</span> <span class=\"n\">v</span> <span class=\"n\">f</span> <span class=\"err\">$</span> <span class=\"n\">realize_term</span> <span class=\"n\">v</span> <span class=\"n\">t</span> <span class=\"o\">([])</span><span class=\"bp\">::</span><span class=\"n\">xs</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">f₁</span> <span class=\"err\">⟹</span> <span class=\"n\">f₂</span><span class=\"o\">)</span>   <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"n\">realize_formula</span> <span class=\"n\">v</span> <span class=\"n\">f₁</span> <span class=\"n\">xs</span> <span class=\"bp\">→</span> <span class=\"n\">realize_formula</span> <span class=\"n\">v</span> <span class=\"n\">f₂</span> <span class=\"n\">xs</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"err\">&#39;</span> <span class=\"n\">f</span><span class=\"o\">)</span>       <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">realize_formula</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span><span class=\"o\">])</span> <span class=\"n\">f</span> <span class=\"n\">xs</span>\n</code></pre></div>",
        "id": 205327486,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596009295
    }
]