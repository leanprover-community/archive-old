[
    {
        "content": "<p>Do we have the trivial group? Or should I just make one myself? What is the underlying type?</p>",
        "id": 166984704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559297765
    },
    {
        "content": "<p>unit</p>",
        "id": 166984723,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559297798
    },
    {
        "content": "<p>I vaguely remember Kenny doing this.</p>",
        "id": 166984753,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1559297826
    },
    {
        "content": "<p>I thought there were instances for it</p>",
        "id": 166984759,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559297831
    },
    {
        "content": "<p>We're looking for the trivial additive group</p>",
        "id": 166984765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559297846
    },
    {
        "content": "<p>It's not hard to make, I just don't want to duplicate stuff in mathlib</p>",
        "id": 166984776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559297869
    },
    {
        "content": "<p>it's not in mathlib</p>",
        "id": 166984847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559297939
    },
    {
        "content": "<p>maybe the PR stalled?</p>",
        "id": 166984865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559297952
    },
    {
        "content": "<p>I think we should have lots of structures on <code>unit</code> in <code>algebra/pi_instances.lean</code></p>",
        "id": 166984960,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1559298033
    },
    {
        "content": "<p>that was where I expected to find it</p>",
        "id": 166984967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559298046
    },
    {
        "content": "<p>and it was done, and it's somewhere, but I'm not sure where</p>",
        "id": 166984975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559298060
    },
    {
        "content": "<p>There is no mention of unit in <code>algebra/pi_instances</code>?</p>",
        "id": 166985079,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559298163
    },
    {
        "content": "<p>Oh I see -- we <em>should</em> have it there!</p>",
        "id": 166985087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559298175
    },
    {
        "content": "<p>like I said, it's not in mathlib</p>",
        "id": 166985088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559298178
    },
    {
        "content": "<p>it's in a PR or something</p>",
        "id": 166985108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559298213
    },
    {
        "content": "<p>or maybe just on Zulip in a code block</p>",
        "id": 166985116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559298224
    },
    {
        "content": "<p>OK I don't want to get this wrong.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">zero_add_comm_group</span> <span class=\"o\">:=</span> <span class=\"n\">unit</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">zero_add_comm_group</span>\n\n<span class=\"n\">def</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">zero_add_comm_group</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">zero_add_comm_group</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">zero_add_comm_group</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">punit</span><span class=\"bp\">.</span><span class=\"n\">star</span>\n</pre></div>\n\n\n<p>Is it something like that?</p>",
        "id": 166985172,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559298259
    },
    {
        "content": "<p>Should <code>punit.star</code> get another name?</p>",
        "id": 166985182,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559298269
    },
    {
        "content": "<p>I think it was just <code>instance : add_group unit := { add := \\lam _ _, (), ... }</code></p>",
        "id": 166985209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559298305
    },
    {
        "content": "<p>Aah, <code>()</code> is  better than <code>punit.star</code>?</p>",
        "id": 166985228,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559298328
    },
    {
        "content": "<p>no type renames</p>",
        "id": 166985233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559298343
    },
    {
        "content": "<p>Aah, we really want the zero module for an arbitrary group</p>",
        "id": 166985235,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559298347
    },
    {
        "content": "<p>so we need to rename a type</p>",
        "id": 166985236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559298352
    },
    {
        "content": "<p>We want <code>zero_module G</code> for G a group</p>",
        "id": 166985242,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559298362
    },
    {
        "content": "<p>?</p>",
        "id": 166985291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559298375
    },
    {
        "content": "<p>that's just <code>module unit G</code></p>",
        "id": 166985297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559298381
    },
    {
        "content": "<p>OK I see</p>",
        "id": 166985301,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559298393
    },
    {
        "content": "<p>I'm glad I asked!</p>",
        "id": 166985304,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559298400
    },
    {
        "content": "<p>this puts a bunch of structure on unit so now we can write <code>() + ()</code> and <code>37 : unit</code> and so on but I don't think this is a big problem</p>",
        "id": 166985327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559298439
    },
    {
        "content": "<p>Wouldn't <code>zero_module G</code> require <code>G</code> to be an add_comm_group?</p>",
        "id": 166985536,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559298689
    },
    {
        "content": "<p>wait, wouldn't <code>module unit G</code> require <code>G</code> to be the trivial group?</p>",
        "id": 166985632,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559298796
    },
    {
        "content": "<p>no</p>",
        "id": 166985637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559298807
    },
    {
        "content": "<p>like unit can be a vector space over any field</p>",
        "id": 166985639,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559298815
    },
    {
        "content": "<p>because <code>0 * g = 0</code> and <code>1 * g = g</code></p>",
        "id": 166985640,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559298815
    },
    {
        "content": "<p>G is agroup</p>",
        "id": 166985645,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559298822
    },
    {
        "content": "<p>is this something other than <code>module</code> then?</p>",
        "id": 166985699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559298845
    },
    {
        "content": "<p><code>module</code> needs a ring and an add_comm_group</p>",
        "id": 166985706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559298860
    },
    {
        "content": "<p>and <code>unit</code> is a ring, but it will force the add_comm_group to be trivial</p>",
        "id": 166985713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559298878
    },
    {
        "content": "<p>We're doing G-modules, it's something else</p>",
        "id": 166985748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559298938
    },
    {
        "content": "<p>t's not modules</p>",
        "id": 166985755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559298948
    },
    {
        "content": "<p>oh, well if you put a G in front...</p>",
        "id": 166985762,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559298960
    },
    {
        "content": "<p>that's not overloaded notation at all</p>",
        "id": 166985813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559298971
    },
    {
        "content": "<p>carry on then</p>",
        "id": 166985848,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559299014
    },
    {
        "content": "<p>actually, is there any representation theory in mathlib?</p>",
        "id": 166985871,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1559299038
    },
    {
        "content": "<p>Not yet.</p>",
        "id": 166985883,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559299057
    },
    {
        "content": "<p>It will be really interesting to do</p>",
        "id": 166985894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559299070
    },
    {
        "content": "<p>I am currently sitting with an UG doing G-modules</p>",
        "id": 166985948,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559299091
    },
    {
        "content": "<blockquote>\n<p>Aah, we really want the zero module for an arbitrary group</p>\n</blockquote>\n<p>Obviously I meant the zero G-module ;-)</p>",
        "id": 166985975,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559299127
    },
    {
        "content": "<p>That sounds fun</p>",
        "id": 166986118,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1559299236
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> There is a file <code>algebra/punit_instances</code></p>",
        "id": 166986578,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559299727
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220718\">@Ben McDonnell</span> Is doing some representation theory</p>",
        "id": 166986594,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559299746
    },
    {
        "content": "<p>He just proved Schur's lemma yesterday (-;</p>",
        "id": 166986599,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559299756
    },
    {
        "content": "<p>But there is nothing in mathlib</p>",
        "id": 166986602,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559299760
    },
    {
        "content": "<p>We're doing G-modules, so it's something else</p>",
        "id": 166986676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559299822
    },
    {
        "content": "<p>Sure, we'll sort out the overlap later</p>",
        "id": 166986697,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559299847
    },
    {
        "content": "<p>Schur's lemma is the second best lemma</p>",
        "id": 166986703,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1559299857
    }
]