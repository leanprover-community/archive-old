[
    {
        "content": "<p>OK so <span class=\"user-mention\" data-user-id=\"118107\">@Amelia Livingston</span> just pointed out to me that in <code>algebra/ring.lean</code> we have <a href=\"https://github.com/leanprover-community/mathlib/blob/88ad3cf59d905f8796f3fc954e1af9c8db14274a/src/algebra/ring.lean#L57\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/88ad3cf59d905f8796f3fc954e1af9c8db14274a/src/algebra/ring.lean#L57\">the following insanity</a>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"o\">(</span><span class=\"n\">with_zero</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</pre></div>\n\n\n<p><code>semiring</code> extends <code>add_comm_monoid</code> so a semiring already has a zero. Adding another zero is something which is I guess logically possible, but at the same time is surely \"always a mistake\". Should this instance be removed though?</p>",
        "id": 172588803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565098740
    },
    {
        "content": "<p>but it really is a semiring...?</p>",
        "id": 172589934,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1565099409
    },
    {
        "content": "<p>Yes!</p>",
        "id": 172589947,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565099417
    },
    {
        "content": "<p>If you have an add_semigroup and you add a zero, you get an add_monoid</p>",
        "id": 172589980,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565099439
    },
    {
        "content": "<p>Now apply when the add_semigroup was already an add_monoid</p>",
        "id": 172589990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565099452
    },
    {
        "content": "<p>it's the (co)unit</p>",
        "id": 172590800,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1565099931
    },
    {
        "content": "<p>Mathlib still compiles if the instance is deleted. Why would we ever want this instance?</p>",
        "id": 172593650,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565101800
    },
    {
        "content": "<p>Yes, I think we want to get rid of an instance like that.</p>",
        "id": 172594183,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1565102114
    },
    {
        "content": "<p>Why would we want to remove it? It's the same as the situation with monoidifying a semigroup that happens to already be a monoid</p>",
        "id": 172597026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565103920
    },
    {
        "content": "<p>Because every instance makes life a bit slower, and this instance will never be used so cannot do good and might do harm</p>",
        "id": 172597101,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565103962
    },
    {
        "content": "<p>We could have a more accurate instance there but we would need a class for \"semiring without zero\"</p>",
        "id": 172597165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565104009
    },
    {
        "content": "<p>but I disagree with the claim that the instance is \"wrong\"</p>",
        "id": 172597234,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565104055
    },
    {
        "content": "<p>if you actually have a with_zero and it actually has a semiring structure, I don't see how it could be anything but this one</p>",
        "id": 172597330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565104099
    },
    {
        "content": "<p>I guess I'm arguing that it's \"wrong\" in the sense that if something has a zero then it's very hard to imagine a good reason for adding another one. With the semigroup to monoid example the semiring might have a 1 but it might not. Here the semiring is guaranteed to already have a zero, and you are adding another one.</p>",
        "id": 172599135,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565105312
    },
    {
        "content": "<p>The fact that the instance is not used in mathlib is evidence that the instance is useless</p>",
        "id": 172599165,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565105332
    },
    {
        "content": "<p>The instance isn't used because no one cares about the theory of semirings</p>",
        "id": 172608841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565112057
    },
    {
        "content": "<p>But could it be the case that it leads type class inference the wrong way sometimes? If so then it should go</p>",
        "id": 172608900,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565112084
    },
    {
        "content": "<blockquote>\n<p>The instance isn't used because no one cares about the theory of semirings</p>\n</blockquote>\n<p>I think this is too weak. People care about the theory of rings, and a semiring is a ring, but the instance isn't used anyway. The point is that people don't care about adding 0 to something which already has a 0.</p>",
        "id": 172609003,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565112128
    },
    {
        "content": "<p>I don't disagree with this line of argument though. It shouldn't affect too much, unless you are inferring things on with_zero a lot - most types are not of the form <code>with_zero A</code> so it shouldn't lead typeclass significantly astray</p>",
        "id": 172609044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565112159
    },
    {
        "content": "<p>It would be difficult and probably inadvisable to define a type operator that only adds a zero if there isn't already one there</p>",
        "id": 172609156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565112221
    },
    {
        "content": "<p>That is not the case for this instance though!</p>",
        "id": 172609181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565112239
    },
    {
        "content": "<p>It would be very easy to modify this instance so that it only added a zero if there isn't one already there.</p>",
        "id": 172609239,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565112253
    },
    {
        "content": "<p>it's easier to reason about an operator that always adds exactly one new element</p>",
        "id": 172609246,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565112256
    },
    {
        "content": "<p>By deleting it.</p>",
        "id": 172609251,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565112259
    },
    {
        "content": "<p>The reason this instance exists is because it's completing the cartesian product of all concepts in mathlib interacting with all others</p>",
        "id": 172609335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565112310
    },
    {
        "content": "<p>We think <code>with_zero A</code> is a useful operator, hence it exists, hence we need all applicable instances because users shouldn't need to define those themselves</p>",
        "id": 172609381,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565112353
    },
    {
        "content": "<p>That would be the case if we were dealing with an object which was an add_comm_semigroup and a monoid, but that's not what a semiring is.</p>",
        "id": 172609434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565112363
    },
    {
        "content": "<p>What could concievably be useful is adding a zero to pnat, but I don't know what kind of an object pnat is. It's not a semiring :-/</p>",
        "id": 172609502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565112408
    },
    {
        "content": "<p>Actually you need a distrib add_comm_semigroup monoid</p>",
        "id": 172609510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565112413
    },
    {
        "content": "<p>Like pnat!</p>",
        "id": 172609536,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565112432
    },
    {
        "content": "<p><code>demisemiring</code>?</p>",
        "id": 172609549,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565112442
    },
    {
        "content": "<p>semirig?</p>",
        "id": 172609573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565112454
    },
    {
        "content": "<p>you can't spell ring without z</p>",
        "id": 172609597,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565112477
    }
]