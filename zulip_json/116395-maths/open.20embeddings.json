[
    {
        "content": "<p>We bumped mathlib in the perfectoid project and got <a href=\"https://github.com/leanprover-community/mathlib/commit/10cb0d125d1d02d0ea68e478456c522bd1920d29\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/commit/10cb0d125d1d02d0ea68e478456c522bd1920d29\">https://github.com/leanprover-community/mathlib/commit/10cb0d125d1d02d0ea68e478456c522bd1920d29</a> which conflicts with our own implementation of <code>open_embedding</code> <a href=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/for_mathlib/open_embeddings.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/for_mathlib/open_embeddings.lean\">https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/for_mathlib/open_embeddings.lean</a>. We should decide whether we adapt our code to use mathlib open embeddings or PR something. <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  there are a couple of things to decide here. First we put <code>open_embedding</code> in the <code>topological_space</code> namespace whereas you put it in root. I think we are clearly right, what will we do when the algebraic geometry gang will claim we have the wrong definition?</p>\n<p>With slightly more mathematical content, we have a definition which looks stronger but is equivalent. We ask that an open embedding is an embedding which is open. You only ask is has open range. Also we use a structure, in order to have meaningful names for each condition, <code>h.is_open_map</code> and <code>h.embedding</code> rather that <code>h.1</code> and <code>h.2</code>. Do you have any a priori objection to merge our efforts using our definition (and namespace)?</p>",
        "id": 175804347,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1568634270
    },
    {
        "content": "<p>I noticed that <code>embedding</code> changed to a structure so it makes sense for <code>open_embedding</code> to change to one as well. I just ask you make corresponding changes to <code>closed_embedding</code> too</p>",
        "id": 175804586,
        "sender_full_name": "Reid Barton",
        "timestamp": 1568634548
    },
    {
        "content": "<p>What about putting the (seemingly) stronger condition in the definition,  are you ok with that?</p>",
        "id": 175805375,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1568635381
    },
    {
        "content": "<p>For propositions the exact definition usually doesn't matter much. Normally I think we try to make the definition something easy to check, since the constructor has special support. You can emulate extracting the <code>is_open_map</code> field by defining a function <code>open_embedding.is_open_map</code>.</p>",
        "id": 175805598,
        "sender_full_name": "Reid Barton",
        "timestamp": 1568635593
    },
    {
        "content": "<p>Normally it should be easier to check that the range is open than that the image of an open set is open (maybe not in <code>open_embedding.comp</code> though)</p>",
        "id": 175805649,
        "sender_full_name": "Reid Barton",
        "timestamp": 1568635679
    },
    {
        "content": "<p>I guess we also want mathematicians not to be surprised by the definition. But maybe this case is unclear</p>",
        "id": 175805732,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1568635757
    },
    {
        "content": "<p><code>logic.embedding</code> has the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">embedding</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inj</span>    <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 175995880,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568807008
    },
    {
        "content": "<p>Do we want topological embeddings to extend those?</p>",
        "id": 175995897,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568807017
    },
    {
        "content": "<p>In other words, should topological embeddings be bundled maps, or a predicate on a function?</p>",
        "id": 175995937,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568807042
    },
    {
        "content": "<p>I settled for a minimal change, simply making <code>open_embedding</code> and <code>closed_embedding</code> structures extending <code>embedding</code>: <a href=\"https://github.com/leanprover-community/mathlib/pull/1459\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1459\">https://github.com/leanprover-community/mathlib/pull/1459</a></p>",
        "id": 176009060,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1568816312
    }
]