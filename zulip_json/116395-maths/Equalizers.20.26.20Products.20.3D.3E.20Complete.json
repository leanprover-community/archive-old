[
    {
        "content": "<p>Is this proven in the category theory lib anywhere? I'm having trouble finding it</p>",
        "id": 174846283,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1567564017
    },
    {
        "content": "<p>Nevermind, looks like this is in a later version of mathlib than I have</p>",
        "id": 174846360,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1567564146
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"231775\">@Brendan Seamas Murphy</span>, it just arrived two days ago! I'm curious what you're wanting it for.</p>",
        "id": 174847159,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567565623
    },
    {
        "content": "<p>I was curious about formulating basic group theory in terms of short exact sequences, and was looking for a good way to state a version of the second isomorphism theorem, that for A, B normal in G, AB/B is iso to A/(A \\cap B)</p>",
        "id": 174847285,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1567565844
    },
    {
        "content": "<p>But instead of working with subgroups I have </p>\n<div class=\"codehilite\"><pre><span></span>structure SES (A B C : Group) :=\n(f : A ⟶ B) (g : B ⟶ C)\n(f_inj : function.injective f)\n(g_surj : function.surjective g)\n(im_f_eq_ker_g : set.range f = is_group_hom.ker g)\n</pre></div>",
        "id": 174847291,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1567565872
    },
    {
        "content": "<p>Given <code>S : SES A G K</code> and <code>S' : SES B G K'</code>, I can get an injective map <code>pullback S.f S'.f -&gt; G</code>, which is easier to work with than the intersection of the images of <code>S.f</code> and <code>S'.f</code></p>",
        "id": 174847355,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1567565999
    },
    {
        "content": "<p>I could just construct the pullback manually but I figured I might check if Lean had them already, and then I was wondering if I could avoid doing pullbacks and instead do products and equalizers</p>",
        "id": 174847432,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1567566060
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228602\">@Sian Carey</span> proved the correspondence theorem using bundled subgroups and group homs.</p>",
        "id": 174848937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567568684
    },
    {
        "content": "<p>Do you know where it is?</p>",
        "id": 174849060,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567568937
    },
    {
        "content": "<p>I believe it's currently private. I'll email her.</p>",
        "id": 174849068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567568965
    },
    {
        "content": "<p>Also, more generally, I think it's best when constructing (co)limits in algebraic examples to just do the most general construction that works in that setting, and then let typeclass inference provide you with special shapes (pullbacks, equalizers, etc).</p>",
        "id": 174849075,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567568996
    },
    {
        "content": "<p>We don't have arbitrary limits set up in <code>Grp</code> yet (or indeed the definition of <code>Grp</code>), but it should be an easy exercise copying what is in the file <code>algebra/CommRing/limits.lean</code>.</p>",
        "id": 174849127,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567569066
    },
    {
        "content": "<p>I have been holding off providing all these <code>has_limits</code> constructions in all the different algebraic examples, in the hope of doing them uniformly with the help of some tactics, but maybe it's best to just make them all, and we can refactor them later.</p>",
        "id": 174849136,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567569118
    },
    {
        "content": "<p><a href=\"https://github.com/ImperialCollegeLondon/lean-groups\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/lean-groups\">https://github.com/ImperialCollegeLondon/lean-groups</a></p>",
        "id": 175312613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568100100
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 175312753,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568100248
    }
]