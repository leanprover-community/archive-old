[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"329754\">@Antoine Labelle</span> Just for practice I decided to take a crack at showing <code>monoidal_closed (Rep k G)</code> by following <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Module.category_theory.monoidal_closed\">docs#Module.category_theory.monoidal_closed</a>. I got as far as constructing <code>rep_coyoneda (...) : (Rep k G)ᵒᵖ ⥤ (Rep k G) ⥤ Rep k G</code>, similar to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.linear_coyoneda\">docs#category_theory.linear_coyoneda</a>, but I'm getting a bit stuck at proving the equivalent of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Module.monoidal_closed_hom_equiv\">docs#Module.monoidal_closed_hom_equiv</a>. Specifically, the Module version uses <code>linear_map.compr₂</code>, which we don't have for representation hom. Is there any category theory gadgetry that'll help bridge this final step?</p>",
        "id": 289800687,
        "sender_full_name": "Winston Yin",
        "timestamp": 1657934664
    },
    {
        "content": "<p>That's great! How did you define <code>rep_coyoneda</code> exactly?</p>",
        "id": 289801593,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1657936201
    },
    {
        "content": "<p>By the way, it's fine if you want to stick to <code>Rep k G</code> but I think the way I would approach this is to prove that more generally that <code>Action G C</code> is monoidal closed whenever the category <code>C</code> is monoidal closed (or maybe even the functor category <code>D ⥤ C</code>?), which shouldn't really be harder.</p>",
        "id": 289802222,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1657937151
    },
    {
        "content": "<p>I was just sticking to <code>Rep k G</code> for practice. Happy to generalise once I get the hang of it</p>",
        "id": 289802299,
        "sender_full_name": "Winston Yin",
        "timestamp": 1657937264
    },
    {
        "content": "<p>For <code>Action G C</code>, I think the internal hom between objects <code>(V, ρ)</code> and <code>(V', ρ')</code> in <code>Action G C</code> would be <code>ihom V V'</code> with the action given by <code>g ↦ (ρ' g) ∘ - ∘ (ρ g)</code>, where the composition here should be understood in the sense of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.monoidal_closed.pre\">docs#category_theory.monoidal_closed.pre</a>. Now I realize that we don't seem to have a post-compostion version of <code>category_theory.monoidal_closed.pre</code>, so we would need that first.</p>",
        "id": 289802598,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1657937650
    },
    {
        "content": "<p>For <code>rep_coyoneda</code>, the objects are mapped by <code>(Rep k G)ᵒᵖ → (Rep k G) → Rep k G := λ Y X, Rep.of (representation.lin_hom (unop Y).ρ X.ρ)</code>. Then the functors are constructed using <code>linear.right_comp</code> and <code>linear.left_comp</code></p>",
        "id": 289802699,
        "sender_full_name": "Winston Yin",
        "timestamp": 1657937778
    },
    {
        "content": "<p>Perhaps it's not ideal that it uses <code>lin_hom</code> here?</p>",
        "id": 289802830,
        "sender_full_name": "Winston Yin",
        "timestamp": 1657937987
    },
    {
        "content": "<p>I see. I guess that can work for <code>Rep k G</code>, but the point of the category theory approach is to avoid using things like <code>representation.lin_hom</code>. My feeling for working with the category library so far is that we want to avoid as much as possible the mix of categorical and noncategorical definitions, since it is quite annoying to translate between the two.</p>",
        "id": 289803054,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1657938258
    },
    {
        "content": "<p>I agree. Still trying to gain some intuition about this approach. I found that Lean really struggles to type check when we liberally go back and forth between <code>⟶</code> and the particular implementation such as <code>→ₗ[k]</code></p>",
        "id": 289803103,
        "sender_full_name": "Winston Yin",
        "timestamp": 1657938354
    },
    {
        "content": "<p>Yes, it's best this avoid this back and forth as much as possible I'd say.</p>",
        "id": 289803161,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1657938421
    },
    {
        "content": "<p>And if you stick to using just the categorical language (so no <code>→ₗ[k]</code>) then it shouldn't be harder to do it for <code>Action V C</code> than <code>Rep k G</code>, the proof should basically be the same.</p>",
        "id": 289803246,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1657938534
    },
    {
        "content": "<p>Yep. The category theory stuff for <code>Module</code> currently relies on <code>→ₗ[k]</code> a lot, so maybe that's not the best place to learn</p>",
        "id": 289803319,
        "sender_full_name": "Winston Yin",
        "timestamp": 1657938615
    },
    {
        "content": "<p>I'll take another shot at it</p>",
        "id": 289803326,
        "sender_full_name": "Winston Yin",
        "timestamp": 1657938630
    },
    {
        "content": "<p>Unfortunately there's not a lot of other instances of <code>monoidal_closed</code> which you can take inspiration from, but feel free to ask more questions.</p>",
        "id": 289803346,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1657938699
    },
    {
        "content": "<p>Actually I realized we do have postcomposition by external morphisms on <code>ihom</code>: it is simply <code>internal_hom.flip.map</code>.</p>",
        "id": 289808220,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1657946541
    },
    {
        "content": "<p><code>internal_hom</code> needs <code>limits.has_finite_products</code>. Is that necessary for post composition?</p>",
        "id": 289817198,
        "sender_full_name": "Winston Yin",
        "timestamp": 1657960791
    },
    {
        "content": "<p>Oh sorry, I'm talking about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.monoidal_closed.internal_hom\">docs#category_theory.monoidal_closed.internal_hom</a>, not <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.internal_hom\">docs#category_theory.internal_hom</a>.</p>",
        "id": 289829901,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1657980386
    },
    {
        "content": "<blockquote>\n<p>For <code>Action G C</code>, I think the internal hom between objects <code>(V, ρ)</code> and <code>(V', ρ')</code> in <code>Action G C</code> would be <code>ihom V V'</code> with the action given by <code>g ↦ (ρ' g) ∘ - ∘ (ρ g)</code></p>\n</blockquote>\n<p>How do I reconcile this with the fact that when <code>G</code> is a group, the action is given by <code>g ↦ (ρ' g) ∘ - ∘ (ρ g⁻¹)</code>? I managed to built pre- and post-composition using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoidal_closed.internal_hom\">docs#monoidal_closed.internal_hom</a>, together with nice composition properties. It remains to construct the part <code>- ∘ (ρ g⁻¹)</code> to compose oppositely to the multiplication on <code>G</code></p>",
        "id": 289916592,
        "sender_full_name": "Winston Yin",
        "timestamp": 1658111497
    },
    {
        "content": "<p>Oh sorry I did mean rho of g inverse and not rho of g on the right. Is that what your question is about?</p>",
        "id": 289917136,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1658112330
    },
    {
        "content": "<p>Yes that clears it up. Then G has to be a group. I guess that’s no surprise</p>",
        "id": 289919422,
        "sender_full_name": "Winston Yin",
        "timestamp": 1658115683
    },
    {
        "content": "<p>Yes it only works for groups (or more generally for functors from a groupoid to a monoidal closed category).</p>",
        "id": 289958674,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1658147587
    },
    {
        "content": "<p>So far I've managed to define <code>(Action V G)ᵒᵖ ⥤ Action V G ⥤ Action V G</code> using <code>g ↦ (ρ' g) ∘ - ∘ (ρ g⁻¹)</code>. Now I'd like to construct the equiv between <code>(X ⊗ Y) ⟶ Z</code> and <code>Y ⟶ [X, Z]</code>, which should be provided by curry/uncurry in <code>V</code>. The issue I'm getting stuck on is showing that the (un)curried <code>V</code>-homs commute with the <code>G</code>-action on <code>Y</code> and <code>[X, Z]</code>. The <code>G</code>-action on <code>[X, Z]</code> refers to <code>g⁻¹</code>, while the action on <code>X ⊗ Y</code> doesn't. It's not totally clear to me how to show this even on paper yet</p>",
        "id": 290046368,
        "sender_full_name": "Winston Yin",
        "timestamp": 1658197544
    },
    {
        "content": "<p><code>φ : Y ⟶ [X, Z]</code> commuting with <code>G</code>-action is equivalent to <code>φ (g • y) x = g • φ y (g⁻¹ • x)</code> for all <code>x : X</code>, <code>g : G</code>, which is equivalent to <code>φ (g • y) (g • x) = g • φ y x</code> for all <code>x : X</code>, <code>g : G</code>, because <code>λ x, g⁻¹ • x</code> is bijective.</p>",
        "id": 290047012,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658198164
    },
    {
        "content": "<p>Ah thanks. I reckon <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Action\">docs#Action</a>.ρ_Aut, etc should come in handy</p>",
        "id": 290047294,
        "sender_full_name": "Winston Yin",
        "timestamp": 1658198494
    },
    {
        "content": "<p>I've completed the construction of the <code>monoidal_closed (Action V G)</code> instance in PR <a href=\"https://github.com/leanprover-community/mathlib/pull/15579\">#15579</a>. The proof is complete and sorry-free, but some parts are quite long, and some stylistic improvements are probably a good idea.</p>",
        "id": 290313736,
        "sender_full_name": "Winston Yin",
        "timestamp": 1658359920
    }
]