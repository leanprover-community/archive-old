[
    {
        "content": "<p>I just reached a milestone:</p>",
        "id": 126963591,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527058891
    },
    {
        "content": "<p><code>noncomputable definition scheme_of_affine_scheme (R : Type u) [comm_ring R] : scheme := [definition which typechecks]</code></p>",
        "id": 126963592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527058901
    },
    {
        "content": "<p>This was a very surprising process.</p>",
        "id": 126963595,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527058922
    },
    {
        "content": "<p>Several times over the last few months I have confidently felt that I was \"just a few hours' work away\" from this result</p>",
        "id": 126963635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527058943
    },
    {
        "content": "<p>and then I would run into a \"trivial to a mathematician, not so trivial in dependent type theory\" type issue</p>",
        "id": 126963640,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527058976
    },
    {
        "content": "<p>The most recent was last night, where I had to write down a map <code>F U -&gt; F (id '' U)</code> (here <code>U : set X</code>)</p>",
        "id": 126963649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527059026
    },
    {
        "content": "<p>and I foolishly rewrote <code>id '' U</code> to <code>U</code> and used the identity map and ran into all sorts of problems</p>",
        "id": 126963689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527059051
    },
    {
        "content": "<p>but this time I was ready for it -- I changed it to a more general construction which gave a map <code>F U -&gt; F V</code> for any <code>V \\sub U</code> and applied it in this case.</p>",
        "id": 126963722,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527059116
    },
    {
        "content": "<p>There is a subtlety happening here which I am not entirely sure I 100% understand.</p>",
        "id": 126963728,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527059130
    },
    {
        "content": "<p>I think it might be to do with an equivalence of categories</p>",
        "id": 126963731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527059150
    },
    {
        "content": "<p>A mathematician takes a topological space X and then defines a presheaf of abelian groups on X to be, for every open set U in X an abelian group F U</p>",
        "id": 126963780,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527059199
    },
    {
        "content": "<p>and for every pair of opens V in U, a restriction map F U -&gt; F V</p>",
        "id": 126963790,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527059242
    },
    {
        "content": "<p>[the model is that F U is the set of \"functions on U\", so this restriction map is restriction of functions]</p>",
        "id": 126963798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527059268
    },
    {
        "content": "<p>and this pair F,res has to satisfy two axioms: res : F U -&gt; F U is the identity</p>",
        "id": 126963846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527059308
    },
    {
        "content": "<p>and if W in V in U the two maps F U -&gt; F W (res, and res circ res) are the same</p>",
        "id": 126963850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527059334
    },
    {
        "content": "<p>And then an algebraic geometry textbook might then say \"here's a cool way of looking at this: let's make the set of open subsets of X into a category -- the objects are the opens and there's one morphism from U to V iff V is a subset of U, and then the axioms for a presheaf are just the statement that F is a functor\"</p>",
        "id": 126963909,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527059418
    },
    {
        "content": "<p>but somehow this is just a language, this particular fact that something is a functor is never really used in any deep way</p>",
        "id": 126963914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527059463
    },
    {
        "content": "<p>there are plenty of functors around like global sections functors which really do play a role, with derived functors etc etc, but this is not one of them.</p>",
        "id": 126963926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527059496
    },
    {
        "content": "<p>In dependent type theory, I think there is something deeper going on.</p>",
        "id": 126963929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527059519
    },
    {
        "content": "<p>The \"category of open sets\" is somehow replaced by a much more complex category, the category of terms each of which can be proved to be an open set</p>",
        "id": 126963972,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527059547
    },
    {
        "content": "<p>but there is only countably many terms!</p>",
        "id": 126963975,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527059570
    },
    {
        "content": "<p>and there's a morphism t1 -&gt; t2 precisely when there's a proof that the open set corresponding to t2 is a subset of the open set corresponding to t1</p>",
        "id": 126963983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527059592
    },
    {
        "content": "<p>I don't care</p>",
        "id": 126963989,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527059603
    },
    {
        "content": "<p>I don't think I care</p>",
        "id": 126963990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527059606
    },
    {
        "content": "<p>Maybe I haven't got the language right</p>",
        "id": 126963995,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527059622
    },
    {
        "content": "<p>I am happy that if I have a term and a proof that it is an open set then it's in</p>",
        "id": 126964038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527059645
    },
    {
        "content": "<p>and the term might be U and the proof might be sorry</p>",
        "id": 126964042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527059653
    },
    {
        "content": "<p>and that pretty much covers everything</p>",
        "id": 126964046,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527059661
    },
    {
        "content": "<p>So in some sense I did not even realise when I defined a presheaf that I was defining it on this much bigger category</p>",
        "id": 126964050,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527059687
    },
    {
        "content": "<p>but because the two categories are equivalent it doesn't matter mathematically</p>",
        "id": 126964053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527059701
    },
    {
        "content": "<p>but a consequence of this incorrect mindset was that I often wanted to identify things like F ((U cap V) cap W) and F(U cap (V cap W)) as _equal_</p>",
        "id": 126964063,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527059745
    },
    {
        "content": "<p>because to a mathematician they are equal</p>",
        "id": 126964064,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527059753
    },
    {
        "content": "<p>but in dependent type theory they are just canonically isomorphic</p>",
        "id": 126964104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527059770
    },
    {
        "content": "<p>Isn't this another instance of \"we really need transport of structure\"?</p>",
        "id": 126964106,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527059785
    },
    {
        "content": "<p>No they're equal?</p>",
        "id": 126964107,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527059788
    },
    {
        "content": "<p>and the correct way to move between them is via the restriction map associated to the proof that the sets are equal</p>",
        "id": 126964109,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527059796
    },
    {
        "content": "<p>Chris, perhaps they really are equal, but by equal here I think I mean defeq</p>",
        "id": 126964113,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527059824
    },
    {
        "content": "<p>Johan -- in this case I am suggesting another approach</p>",
        "id": 126964118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527059849
    },
    {
        "content": "<p>I know, but it means that you are becoming more of a CS guy...</p>",
        "id": 126964122,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527059873
    },
    {
        "content": "<p>Here you actually have transport of structure, because <code>eq.rec</code> asserts that everything you can express commutes with equality</p>",
        "id": 126964124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527059875
    },
    {
        "content": "<p>\"transport of structure\" in this situation seems to be some sort of brute force collapsing of the bigger category into the equivalent smaller one</p>",
        "id": 126964125,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527059879
    },
    {
        "content": "<p>That brute force is exactly what we need, if we ever hope to get up to speed with formalising maths</p>",
        "id": 126964170,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527059908
    },
    {
        "content": "<p>The <code>eq.rec</code> remark is true, <em>however</em></p>",
        "id": 126964171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527059913
    },
    {
        "content": "<p>but that doesn't mean the transport is easy to use without a lot of lemmas</p>",
        "id": 126964172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527059914
    },
    {
        "content": "<p>in practice, because I was dealing with complicated things on top of all this</p>",
        "id": 126964174,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527059934
    },
    {
        "content": "<p>eq.rec did not suffice to solve all my problems.</p>",
        "id": 126964180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527059946
    },
    {
        "content": "<p>If I had some complex term with <code>id '' U</code> in</p>",
        "id": 126964185,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527059955
    },
    {
        "content": "<p>and all of a sudden I thought \"crap, my life would be much easier if that term was just U`</p>",
        "id": 126964187,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527059967
    },
    {
        "content": "<p>then sometimes I would try and rewrite and the rewrite would fail</p>",
        "id": 126964191,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527059976
    },
    {
        "content": "<p>or it would be a PITA to formulate</p>",
        "id": 126964193,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527059981
    },
    {
        "content": "<p>because the naively written rewrite was not type correct</p>",
        "id": 126964198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527059998
    },
    {
        "content": "<p>because H used to be proof of V subset (id '' U) and that needed rewriting as swell</p>",
        "id": 126964242,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527060021
    },
    {
        "content": "<p>and congr was not good enough at this sort of thing</p>",
        "id": 126964245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527060031
    },
    {
        "content": "<p>and subst was not either</p>",
        "id": 126964248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527060035
    },
    {
        "content": "<p>sorry, subst, not congr</p>",
        "id": 126964251,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527060039
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> have you pushed?</p>",
        "id": 126964262,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527060067
    },
    {
        "content": "<p>the <code>eq.rec</code> term itself acts as a function <code>F U -&gt; F (id '' U)</code>, and then you need to know this is functorial for later stuff</p>",
        "id": 126964263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527060073
    },
    {
        "content": "<p>In this particular case all my problems went away when I started thinking about the equivalent category</p>",
        "id": 126964268,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527060116
    },
    {
        "content": "<p>Kenny, I just pushed</p>",
        "id": 126964269,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527060121
    },
    {
        "content": "<p>and this is true, but more complicated to prove; and you may need <em>that</em> proof to be functorial and it gets yet more complicated...</p>",
        "id": 126964304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527060123
    },
    {
        "content": "<p>this is what HoTT people deal with</p>",
        "id": 126964309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527060140
    },
    {
        "content": "<p>Mario -- I'm sure you're right</p>",
        "id": 126964310,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527060146
    },
    {
        "content": "<p>This certainly sounds like the sort of issue which we have to deal with here</p>",
        "id": 126964311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527060160
    },
    {
        "content": "<p>And to be quite frank I did feel like I had dodged a bullet</p>",
        "id": 126964312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527060173
    },
    {
        "content": "<p>When I realised I couldn't use id, I knew things might be bad</p>",
        "id": 126964317,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527060188
    },
    {
        "content": "<p>At the same time, you have already a robust language of restriction maps that you already know are functorial, because they are the object of study</p>",
        "id": 126964318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527060189
    },
    {
        "content": "<p>when I realised I could use res, I had some hope</p>",
        "id": 126964320,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527060200
    },
    {
        "content": "<p>the choice is obvious</p>",
        "id": 126964321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527060203
    },
    {
        "content": "<p>and then when gigantic one-page-long goals started yielding to refl I realised I'd had the right insight</p>",
        "id": 126964323,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527060219
    },
    {
        "content": "<blockquote>\n<p>the choice is obvious</p>\n</blockquote>\n<p>To you</p>",
        "id": 126964327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527060239
    },
    {
        "content": "<p>I would argue that the choice is not at all obvious to a practicing algebraic geometer trained in ZFC</p>",
        "id": 126964367,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527060268
    },
    {
        "content": "<p>and in some sense this is a problem</p>",
        "id": 126964368,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527060273
    },
    {
        "content": "<p>because it means that we are teaching people in slightly the wrong way</p>",
        "id": 126964369,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527060288
    },
    {
        "content": "<p>The important part is to recognize the issue itself</p>",
        "id": 126964370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527060292
    },
    {
        "content": "<p>As is so often the case (I have seen this time and time again in mathematics)</p>",
        "id": 126964376,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527060307
    },
    {
        "content": "<p>the insight came to me ten minutes after I'd spent an hour being stuck and whining here about how stupid Lean was, and then turned off my laptop and thought about something else</p>",
        "id": 126964382,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527060332
    },
    {
        "content": "<p>but I could _envisage_ situations where that bullet cannot be dodged and you have to take the hit and transport your structures</p>",
        "id": 126964432,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527060404
    },
    {
        "content": "<p>Did you get any insights with the ALEXANDRIA / Peter Koepke lecture person today?</p>",
        "id": 126964433,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527060412
    },
    {
        "content": "<p>I reached another milestone:</p>",
        "id": 126967797,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527066706
    },
    {
        "content": "<p><code>definition scheme_of_affine_scheme (R : Type u) [comm_ring R] : scheme := [definition which typechecks]</code></p>",
        "id": 126967803,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527066717
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 126967862,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527066783
    },
    {
        "content": "<p>So an affine scheme is one that is isomorphic to Spec(A) for some ring A</p>",
        "id": 126968834,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527068273
    },
    {
        "content": "<p>my question is: how important is that ring A?</p>",
        "id": 126968835,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527068278
    },
    {
        "content": "<p>What do you mean? Whether you should carry A around?</p>",
        "id": 126969006,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527068535
    },
    {
        "content": "<p>In <em>maths</em> it is not important at all. Only the fact that it exists</p>",
        "id": 126969021,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527068556
    },
    {
        "content": "<p>I see</p>",
        "id": 126969044,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527068594
    },
    {
        "content": "<p>I don't understand that question. You can recover A from its affine scheme, is that what you want to know?</p>",
        "id": 126969051,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527068611
    },
    {
        "content": "<p>oh really</p>",
        "id": 126969054,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527068626
    },
    {
        "content": "<p>is it just the global section?</p>",
        "id": 126969056,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527068638
    },
    {
        "content": "<p>now a scheme is covered by affine schemes. Are the affine schemes important?</p>",
        "id": 126969119,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527068736
    },
    {
        "content": "<p>Nope</p>",
        "id": 126969162,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527068767
    },
    {
        "content": "<p>Only the existence</p>",
        "id": 126969165,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527068771
    },
    {
        "content": "<p>interesting</p>",
        "id": 126969166,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527068773
    },
    {
        "content": "<blockquote>\n<p>is it just the global section?</p>\n</blockquote>\n<p>Yes, up to isomorphism</p>",
        "id": 126969168,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527068792
    },
    {
        "content": "<p>Sure, global sections of the structure sheaf gives you back A</p>",
        "id": 126969169,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527068797
    },
    {
        "content": "<p>Too late</p>",
        "id": 126969172,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527068808
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> This what the Gamma-Spec adjunction is all about</p>",
        "id": 126969184,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527068845
    },
    {
        "content": "<p>So, if you feel like writing an interface for schemes (-;</p>",
        "id": 126969190,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527068858
    },
    {
        "content": "<p>That is what would be the first challenge</p>",
        "id": 126969196,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527068876
    },
    {
        "content": "<p><a href=\"https://stacks.math.columbia.edu/tag/01I2\" target=\"_blank\" title=\"https://stacks.math.columbia.edu/tag/01I2\">https://stacks.math.columbia.edu/tag/01I2</a></p>",
        "id": 126969247,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527068932
    },
    {
        "content": "<p>Oh! The new Stacks project website went live!</p>",
        "id": 126969260,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527068966
    },
    {
        "content": "<p>indeed</p>",
        "id": 126969396,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527069200
    },
    {
        "content": "<p>Kevin, will you come to <a href=\"http://www.ihes.fr/~abbes/Gabber/gabber60-programme.html\" target=\"_blank\" title=\"http://www.ihes.fr/~abbes/Gabber/gabber60-programme.html\">http://www.ihes.fr/~abbes/Gabber/gabber60-programme.html</a>?</p>",
        "id": 126969798,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527069870
    },
    {
        "content": "<p>I wasn't planning on it. I just have too much on at the minute.</p>",
        "id": 126969927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527070067
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> why are you using the broken definition of <code>basis</code> in <code>009I</code>?</p>",
        "id": 127201413,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527506686
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">presheaf_on_basis_stalk</span><span class=\"bp\">.</span><span class=\"n\">setoid</span>  <span class=\"o\">:</span>\n   <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">presheaf_on_basis_stalk</span><span class=\"bp\">.</span><span class=\"n\">aux</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">Us</span> <span class=\"n\">Vt</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">BW</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HWU</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"err\">⊆</span> <span class=\"n\">Us</span><span class=\"bp\">.</span><span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HWV</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"err\">⊆</span> <span class=\"n\">Vt</span><span class=\"bp\">.</span><span class=\"n\">U</span><span class=\"o\">),</span>\n   <span class=\"n\">FPTB</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">Us</span><span class=\"bp\">.</span><span class=\"n\">BU</span> <span class=\"n\">BW</span> <span class=\"n\">HWU</span> <span class=\"n\">Us</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">FPTB</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">Vt</span><span class=\"bp\">.</span><span class=\"n\">BU</span> <span class=\"n\">BW</span> <span class=\"n\">HWV</span> <span class=\"n\">Vt</span><span class=\"bp\">.</span><span class=\"n\">s</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 127201813,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527507304
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> do you think we can change this definition to saying that they agree in the intersection?</p>",
        "id": 127201818,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527507317
    },
    {
        "content": "<p>oh no, we can't</p>",
        "id": 127201822,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527507327
    },
    {
        "content": "<p>It was a real annoyance that the intersection of two basis elements was not a basis element</p>",
        "id": 127202622,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527508612
    },
    {
        "content": "<p>I proved several results under two additional hypotheses:</p>",
        "id": 127202625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527508621
    },
    {
        "content": "<p>1) intersection of two basis elements was a basis element</p>",
        "id": 127202632,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527508629
    },
    {
        "content": "<p>2) intersection of no basis elemnts was a basis element</p>",
        "id": 127202633,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527508637
    },
    {
        "content": "<p>Both of these are true for the D_f basis of Spec(R)</p>",
        "id": 127202636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527508648
    },
    {
        "content": "<p>So in some cases I actually cut corners</p>",
        "id": 127202638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527508655
    },
    {
        "content": "<p>Kenny if you are sufficiently fanatical to go through those proofs and actually prove the correct statements then feel free</p>",
        "id": 127202689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527508684
    },
    {
        "content": "<p>Even the definition of a sheaf got so much more complicated when working with a basis not closed under intersection</p>",
        "id": 127202702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527508703
    },
    {
        "content": "<p>You have to check that the two functions are equal on the intersection by covering each intersection with new basis elements and checking that the res's coincide</p>",
        "id": 127202719,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527508738
    },
    {
        "content": "<p>I just couldn't be bothered</p>",
        "id": 127202726,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527508755
    },
    {
        "content": "<p>cf <a href=\"https://stacks.math.columbia.edu/tag/009L\" target=\"_blank\" title=\"https://stacks.math.columbia.edu/tag/009L\">https://stacks.math.columbia.edu/tag/009L</a></p>",
        "id": 127202851,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527509036
    },
    {
        "content": "<p>That's the tag I did</p>",
        "id": 127202852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527509040
    },
    {
        "content": "<p>not the one before</p>",
        "id": 127202880,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527509043
    }
]