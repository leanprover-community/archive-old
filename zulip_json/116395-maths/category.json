[
    {
        "content": "<p>Hello, I'm training on category and i have a problem   <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">comma</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">shapes</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">yoneda</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">category</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"err\">𝒞</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_binary_products</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">][</span><span class=\"n\">has_terminal</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>   <span class=\"c1\">---</span>\n<span class=\"n\">include</span> <span class=\"err\">𝒞</span>                        <span class=\"c1\">---- what is ? include ?</span>\n\n\n<span class=\"bp\">/</span>\n<span class=\"n\">The</span> <span class=\"n\">goal</span> <span class=\"n\">is</span> <span class=\"n\">define</span> <span class=\"n\">group</span> <span class=\"n\">obj</span> <span class=\"k\">in</span> <span class=\"n\">a</span> <span class=\"n\">category</span><span class=\"bp\">.</span>\n          <span class=\"n\">reference</span> <span class=\"o\">:</span> <span class=\"n\">Douady</span> <span class=\"o\">:</span> <span class=\"n\">Algebre</span> <span class=\"n\">et</span> <span class=\"n\">th</span><span class=\"err\">é</span><span class=\"n\">ories</span> <span class=\"n\">galoisiennes</span> <span class=\"n\">page</span> <span class=\"mi\">45</span>\n          <span class=\"n\">exemple</span> <span class=\"o\">:</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">category</span> <span class=\"n\">of</span> <span class=\"n\">presheaf</span><span class=\"bp\">.</span>\n          <span class=\"k\">in</span> <span class=\"n\">Ring</span> <span class=\"err\">?</span> <span class=\"n\">Idem</span>  <span class=\"n\">Agl</span>  <span class=\"n\">etc</span>\n        <span class=\"kn\">context</span>  <span class=\"o\">:</span> <span class=\"err\">𝒞</span> <span class=\"n\">terminal</span> <span class=\"bp\">+</span> <span class=\"n\">finite</span> <span class=\"n\">product</span> <span class=\"bp\">!</span>\n<span class=\"bp\">-/</span>\n<span class=\"kn\">notation</span> <span class=\"n\">f</span> <span class=\"bp\">`</span> <span class=\"err\">⊗</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">20</span> <span class=\"n\">g</span> <span class=\"o\">:</span><span class=\"mi\">20</span> <span class=\"o\">:=</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n<span class=\"kn\">notation</span>  <span class=\"bp\">`</span><span class=\"n\">T</span><span class=\"bp\">`</span><span class=\"n\">C</span> <span class=\"o\">:</span><span class=\"mi\">20</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">terminal</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"kn\">notation</span>   <span class=\"bp\">`</span><span class=\"n\">T</span><span class=\"bp\">`</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"mi\">20</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">terminal</span><span class=\"bp\">.</span><span class=\"k\">from</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"kn\">notation</span> <span class=\"n\">f</span> <span class=\"bp\">`</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">20</span> <span class=\"n\">g</span> <span class=\"o\">:</span><span class=\"mi\">20</span> <span class=\"o\">:=</span>  <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n<span class=\"kn\">structure</span> <span class=\"n\">group_obj</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}[</span><span class=\"err\">𝒞</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">][</span><span class=\"n\">has_binary_products</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">][</span><span class=\"n\">has_terminal</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:=</span>  <span class=\"c1\">-- I don&#39;t understand if i have to write here   {C : Type u}[𝒞 : category.{v} C][has_binary_products.{v} C][has_terminal.{v} C]  ?</span>\n<span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⨯</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span>  <span class=\"n\">T</span> <span class=\"n\">C</span> <span class=\"err\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hyp_one_mul</span>  <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"mi\">𝟙</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"err\">⊗</span> <span class=\"mi\">𝟙</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"err\">≫</span>  <span class=\"n\">μ</span>  <span class=\"bp\">=</span> <span class=\"mi\">𝟙</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hyp_mul_one</span>  <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">T</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"o\">(</span> <span class=\"mi\">𝟙</span> <span class=\"n\">X</span> <span class=\"err\">⊗</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"n\">μ</span>  <span class=\"bp\">=</span> <span class=\"mi\">𝟙</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hyp_mul_inv</span>  <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">inv</span><span class=\"o\">)</span> <span class=\"err\">≫</span>  <span class=\"n\">μ</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"n\">ε</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hyp_assoc</span>    <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"err\">⊗</span> <span class=\"mi\">𝟙</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"o\">(</span><span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">associator</span> <span class=\"n\">X</span> <span class=\"n\">X</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"err\">≫</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">X</span> <span class=\"err\">⊗</span> <span class=\"n\">μ</span><span class=\"o\">)</span>  <span class=\"err\">≫</span> <span class=\"n\">μ</span> <span class=\"o\">)</span>   <span class=\"c1\">-- (a *b) * c = (a * (b * c))</span>\n\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">group_obj</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"c1\">--- ?    I cant  have i variables of type G : group_obj on C ?</span>\n<span class=\"c1\">--  (G : group_obj 𝒞)(Y : C) :      ?    what is the syntax ?  In fact i don&#39;t understand variables with { } [] or () i thinck it&#39;s the -- problem ?</span>\n</pre></div>",
        "id": 193656389,
        "sender_full_name": "orlando",
        "timestamp": 1586605823
    },
    {
        "content": "<p>the problem is i cant write <code> G :  group_obj </code> or <code> G :  group_obj  C </code> or <code> G :  group_obj 𝒞)</code> the three possibility give me an error :D</p>",
        "id": 193656418,
        "sender_full_name": "orlando",
        "timestamp": 1586605891
    },
    {
        "content": "<p>You've made the <code>C</code> argument of <code>group_obj</code> implicit, by putting it in curly braces.</p>",
        "id": 193656505,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586605988
    },
    {
        "content": "<p>You declared all variables as implicit in <code>group_obj</code>, but lean can't infer <code>C</code></p>",
        "id": 193656506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586605997
    },
    {
        "content": "<p>You want <code>structure group_obj (C : Type u)[𝒞 : category.{v} C]</code></p>",
        "id": 193656511,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586606008
    },
    {
        "content": "<p>also, since you've <code>include</code>d 𝒞 above, you're going to end up with two copies of the category argument</p>",
        "id": 193656517,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586606029
    },
    {
        "content": "<p>Have you read <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tutorial/category_theory/intro.lean\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tutorial/category_theory/intro.lean\">https://github.com/leanprover-community/mathlib/blob/master/docs/tutorial/category_theory/intro.lean</a> ?</p>",
        "id": 193656559,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586606084
    },
    {
        "content": "<p>It will explain how and why we use <code>include</code> here.</p>",
        "id": 193656564,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586606091
    },
    {
        "content": "<p>Also, a more general note --- really you want to define a group object in any monoidal category</p>",
        "id": 193656573,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586606112
    },
    {
        "content": "<p>not just in a category equipped with the monoidal structure coming from binary products.</p>",
        "id": 193656575,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586606128
    },
    {
        "content": "<p>I don't promise, but it may actually be _easier_ there.</p>",
        "id": 193656584,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586606142
    },
    {
        "content": "<p>(for one, you won't need to define the notation <code>⊗</code>, because it will be there for you already!)</p>",
        "id": 193656631,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586606175
    },
    {
        "content": "<p>Here's what <code>include</code> does:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">include</span> <span class=\"n\">X</span>\n\n<span class=\"n\">def</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">omit</span> <span class=\"n\">X</span>\n\n<span class=\"n\">def</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">f</span> <span class=\"c1\">-- f : ℕ → ℕ</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">g</span> <span class=\"c1\">-- g : Type → ℕ → ℕ</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">h</span> <span class=\"c1\">-- h : ℕ → ℕ</span>\n</pre></div>",
        "id": 193656652,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586606193
    },
    {
        "content": "<p>(and generally, since the API surface area is smaller for monoidal categories than for monoidal-categories-built-in-this-way, there are fewer ways you can do wrong things :-)</p>",
        "id": 193656658,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586606214
    },
    {
        "content": "<p>All your definitions after the <code>include</code> and before the <code>omit</code>  will include <code>(X : Type)</code>. So if you include <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{C}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span></span></span></span></span> you shouldn't mention it explicitly in your definition.</p>",
        "id": 193656680,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586606274
    },
    {
        "content": "<p>My impression is that when defining new structures you should not rely on variables or <code>include</code> at all, and just spell everything out. It is often the case that for new structures you want the brackets to be different anyway; for example when defining group homs you would want <code>def group_hom (G : Type) [group G] (H : Type) [group H] := ...</code> but then the moment you start proving lemmas about group homs you will want <code>(f : group_hom G H)</code> but <code>{G : Type} {H : Type}</code>.</p>",
        "id": 193656856,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586606498
    },
    {
        "content": "<p>It's also really confusing for anyone reading your definition.</p>",
        "id": 193656866,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586606517
    },
    {
        "content": "<p>Variables are great once you're off and running and proving a million lemmas.</p>",
        "id": 193656906,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586606528
    },
    {
        "content": "<p>But for defining new structures and new types, please put the hypotheses inline!</p>",
        "id": 193656910,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586606541
    },
    {
        "content": "<p>Finally note that in</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"err\">𝒞</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>the last <code>variables</code> doesn't do anything. This just means \"change the default brackets for variable <code>C</code> to <code>{}</code>\" -- but they were already <code>{}</code>.</p>",
        "id": 193656920,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586606558
    },
    {
        "content": "<p>thx, Kevin Mario and Scott, i read Slowly ! (i use google traductor to understand <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> )</p>",
        "id": 193657005,
        "sender_full_name": "orlando",
        "timestamp": 1586606672
    },
    {
        "content": "<p>Scott: Ah, I didn't know the concept of a monoidal category! I just looked at the lean file! Thx !</p>",
        "id": 193657956,
        "sender_full_name": "orlando",
        "timestamp": 1586608121
    },
    {
        "content": "<p>I thinck i understand : </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">comma</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">shapes</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">yoneda</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">category</span>\n\n\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">The goal is define group obj in a category.</span>\n<span class=\"cm\">          reference : Douady : Algebre et théories galoisiennes page 45</span>\n<span class=\"cm\">          exemple : in the category of presheaf.</span>\n<span class=\"cm\">          in Ring ? Idem ?</span>\n<span class=\"cm\">     contexte : 𝒞 a un objet final et a les produit finis !</span>\n<span class=\"cm\">Pour coder μ X × X ⟶ X  We see that has X ⟶ T cospan f f)</span>\n\n<span class=\"cm\">-/</span>\n<span class=\"kn\">notation</span> <span class=\"n\">f</span> <span class=\"bp\">`</span> <span class=\"err\">⊗</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">20</span> <span class=\"n\">g</span> <span class=\"o\">:</span><span class=\"mi\">20</span> <span class=\"o\">:=</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n<span class=\"kn\">notation</span>  <span class=\"bp\">`</span><span class=\"n\">T</span><span class=\"bp\">`</span><span class=\"n\">C</span> <span class=\"o\">:</span><span class=\"mi\">20</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">terminal</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"kn\">notation</span>   <span class=\"bp\">`</span><span class=\"n\">T</span><span class=\"bp\">`</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"mi\">20</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">terminal</span><span class=\"bp\">.</span><span class=\"k\">from</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"kn\">notation</span> <span class=\"n\">f</span> <span class=\"bp\">`</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">20</span> <span class=\"n\">g</span> <span class=\"o\">:</span><span class=\"mi\">20</span> <span class=\"o\">:=</span>  <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n<span class=\"kn\">structure</span> <span class=\"n\">group_obj</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)[</span><span class=\"err\">𝒞</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">][</span><span class=\"n\">has_binary_products</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">][</span><span class=\"n\">has_terminal</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⨯</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span>  <span class=\"n\">T</span> <span class=\"n\">C</span> <span class=\"err\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hyp_one_mul</span>  <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"mi\">𝟙</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"err\">⊗</span> <span class=\"mi\">𝟙</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"err\">≫</span>  <span class=\"n\">μ</span>  <span class=\"bp\">=</span> <span class=\"mi\">𝟙</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hyp_mul_one</span>  <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">T</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"o\">(</span> <span class=\"mi\">𝟙</span> <span class=\"n\">X</span> <span class=\"err\">⊗</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"n\">μ</span>  <span class=\"bp\">=</span> <span class=\"mi\">𝟙</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hyp_mul_inv</span>  <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">inv</span><span class=\"o\">)</span> <span class=\"err\">≫</span>  <span class=\"n\">μ</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"n\">ε</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hyp_assoc</span>    <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"err\">⊗</span> <span class=\"mi\">𝟙</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"o\">(</span><span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">associator</span> <span class=\"n\">X</span> <span class=\"n\">X</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"err\">≫</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">X</span> <span class=\"err\">⊗</span> <span class=\"n\">μ</span><span class=\"o\">)</span>  <span class=\"err\">≫</span> <span class=\"n\">μ</span> <span class=\"o\">)</span>   <span class=\"c1\">-- (a *b) * c = (a * (b * c))</span>\n\n<span class=\"c1\">-- question 1.</span>\n<span class=\"c1\">-- Let X : C</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"err\">𝒞</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span>  <span class=\"o\">[</span><span class=\"n\">has_binary_products</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">][</span><span class=\"n\">has_terminal</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"err\">𝒞</span>\n<span class=\"kn\">instance</span> <span class=\"n\">coee</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">group_obj</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">X</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">group_obj</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"n\">include</span> <span class=\"n\">G</span>\n<span class=\"n\">def</span> <span class=\"n\">Test_1</span>  <span class=\"o\">:=</span> <span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">Test_1</span>\n<span class=\"n\">omit</span> <span class=\"n\">G</span>\n<span class=\"n\">def</span> <span class=\"n\">Test_2</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">group_obj</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">Test_2</span>\n<span class=\"kn\">theorem</span>  <span class=\"n\">one_eq_two</span>  <span class=\"o\">:</span>  <span class=\"n\">Test_1</span>  <span class=\"bp\">=</span> <span class=\"n\">Test_2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>  <span class=\"bp\">!</span>\n</pre></div>",
        "id": 193657993,
        "sender_full_name": "orlando",
        "timestamp": 1586608193
    },
    {
        "content": "<p>The exercice is too difficult for the moment  ! It was, to show that  for all group objet G et for all  <code> X : C </code> the set <code>(Yoneda.obj G).obj X) </code> is a group ! </p>\n<p>A question :  is it complicated to show that Yoneda preserve product  ?   <br>\n<span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span>  </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">comma</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">shapes</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">yoneda</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">opposites</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">types</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">shapes</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">types</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">category</span>\n<span class=\"kn\">open</span> <span class=\"n\">opposite</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">TEST</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"err\">𝒞</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span>  <span class=\"o\">[</span><span class=\"n\">has_binary_products</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">][</span><span class=\"n\">has_terminal</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"err\">𝒞</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">Yoneda_preserve_product</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n     <span class=\"o\">(</span><span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">⨯</span> <span class=\"n\">B</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span><span class=\"o\">(</span> <span class=\"n\">op</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"err\">≅</span>  <span class=\"o\">(</span><span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span><span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">Y</span><span class=\"o\">)</span>  <span class=\"err\">⨯</span> <span class=\"o\">(</span><span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n     <span class=\"k\">begin</span>\n          <span class=\"c1\">-- Use unicity of limits ?</span>\n          <span class=\"c1\">-- cone_point_unique_up_to_iso ?</span>\n          <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">--- i thinck !</span>\n     <span class=\"kn\">end</span>\n<span class=\"kn\">end</span> <span class=\"n\">TEST</span>\n</pre></div>",
        "id": 193667565,
        "sender_full_name": "orlando",
        "timestamp": 1586621932
    },
    {
        "content": "<p>Try one of Scott's category theory tactics?</p>",
        "id": 193668542,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586623299
    },
    {
        "content": "<p>Tidy?</p>",
        "id": 193668544,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586623303
    },
    {
        "content": "<p>Obviously?</p>",
        "id": 193668547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586623308
    },
    {
        "content": "<p>Maybe you have to define the map?</p>",
        "id": 193668601,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586623360
    },
    {
        "content": "<p>Tidy give me : </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"mi\">3</span> <span class=\"n\">goals</span>\n<span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"err\">𝒞</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">has_binary_products</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">has_terminal</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"n\">B</span> <span class=\"n\">A</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span> <span class=\"err\">⨯</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n<span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">discrete</span> <span class=\"n\">walking_pair</span>\n<span class=\"err\">⊢</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">j</span>\n\n<span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"err\">𝒞</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">has_binary_products</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">has_terminal</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"n\">Y</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span> <span class=\"err\">⨯</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n<span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">discrete</span> <span class=\"n\">walking_pair</span>\n<span class=\"err\">⊢</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"n\">Y</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">⟨λ</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">discrete</span> <span class=\"n\">walking_pair</span><span class=\"o\">),</span> <span class=\"err\">?</span><span class=\"n\">m_2</span><span class=\"o\">[</span><span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">],</span> <span class=\"bp\">_⟩</span> <span class=\"err\">≫</span> <span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">π</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"n\">j</span> <span class=\"bp\">=</span>\n    <span class=\"n\">x</span> <span class=\"err\">≫</span> <span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">π</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"n\">j</span>\n\n<span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"err\">𝒞</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">has_binary_products</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">has_terminal</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"n\">Y</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"n\">x_val</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">discrete</span> <span class=\"n\">walking_pair</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n<span class=\"n\">x_property</span> <span class=\"o\">:</span> <span class=\"n\">x_val</span> <span class=\"err\">∈</span> <span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">sections</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)),</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">discrete</span> <span class=\"n\">walking_pair</span>\n<span class=\"err\">⊢</span> <span class=\"err\">?</span><span class=\"n\">m_2</span><span class=\"o\">[</span><span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"n\">Y</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">⟨</span><span class=\"n\">x_val</span><span class=\"o\">,</span> <span class=\"n\">x_property</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">x_val</span> <span class=\"n\">x</span>\n</pre></div>",
        "id": 193668692,
        "sender_full_name": "orlando",
        "timestamp": 1586623468
    },
    {
        "content": "<p>I have no idea what these tactics do but maybe they are just for proofs. This is data.</p>",
        "id": 193668816,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586623645
    },
    {
        "content": "<p>Your <code>lemma</code> is not a lemma, I think?</p>",
        "id": 193668868,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586623692
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Yoneda_preserve_product</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n     <span class=\"o\">(</span><span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">⨯</span> <span class=\"n\">B</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span><span class=\"o\">(</span> <span class=\"n\">op</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"err\">≅</span>  <span class=\"o\">(</span><span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span><span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">Y</span><span class=\"o\">)</span>  <span class=\"err\">⨯</span> <span class=\"o\">(</span><span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"bp\">!</span> <span class=\"bp\">!</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 193668889,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586623737
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  i made a mistake ?</p>",
        "id": 193668890,
        "sender_full_name": "orlando",
        "timestamp": 1586623738
    },
    {
        "content": "<p>It is in Type, not in Prop</p>",
        "id": 193668899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586623749
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Yoneda_preserve_product</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n     <span class=\"o\">(</span><span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">⨯</span> <span class=\"n\">B</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span><span class=\"o\">(</span> <span class=\"n\">op</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"err\">≅</span>  <span class=\"o\">(</span><span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span><span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">Y</span><span class=\"o\">)</span>  <span class=\"err\">⨯</span> <span class=\"o\">(</span><span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">hom_inv_id&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_hom_id&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 193669057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586624005
    },
    {
        "content": "<p>hum !!! i try <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 193669307,
        "sender_full_name": "orlando",
        "timestamp": 1586624303
    },
    {
        "content": "<p><code>example (A B Y : C) : (yoneda.obj (A ⨯ B)).obj (op Y) = (Y ⟶ A ⨯ B) := rfl</code></p>",
        "id": 193669419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586624472
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span> <span class=\"err\">⨯</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"err\">⟶</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span> <span class=\"err\">⨯</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"err\">⟶</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)),</span>\n</pre></div>\n\n\n<p>Writing category theory Lean for me is about as slow as writing normal Lean was for me in 2017 :-)</p>",
        "id": 193669545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586624645
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">),</span>\n</pre></div>",
        "id": 193669552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586624670
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">),</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"err\">⨯</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">sorry</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">⨯</span> <span class=\"n\">B</span><span class=\"o\">)),</span>\n  <span class=\"n\">hom_inv_id&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_hom_id&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 193669844,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586625047
    },
    {
        "content": "<p>Kevin, i make the same with my notation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∣</mo></mrow><annotation encoding=\"application/x-tex\"> \\mid </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mrel\">∣</span></span></span></span>  </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">exact</span>  <span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">φ</span><span class=\"o\">,((</span><span class=\"n\">φ</span> <span class=\"err\">≫</span> <span class=\"o\">(</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">))</span> <span class=\"bp\">|</span>  <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"err\">≫</span> <span class=\"o\">(</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)),</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">hom_inv_id&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_hom_id&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 193670138,
        "sender_full_name": "orlando",
        "timestamp": 1586625459
    },
    {
        "content": "<p>hum ! not the same !</p>",
        "id": 193670180,
        "sender_full_name": "orlando",
        "timestamp": 1586625490
    },
    {
        "content": "<p>normaly it's an obvious thing this  Yoneda  preserve product <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 193670203,
        "sender_full_name": "orlando",
        "timestamp": 1586625584
    },
    {
        "content": "<p>in 2017 I thought it was obvious that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msqrt><mn>2</mn></msqrt><mo>∉</mo><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\sqrt{2}\\not\\in\\mathbb{Q}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.10166em;vertical-align:-0.19444em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.90722em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.86722em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg height=\"1.08em\" preserveAspectRatio=\"xMinYMin slice\" viewBox=\"0 0 400000 1080\" width=\"400em\"><path d=\"M95,702 c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14 c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54 c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10 s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429 c69,-144,104.5,-217.7,106.5,-221 l0 -0 c5.3,-9.3,12,-14,20,-14 H400000v40H845.2724 s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7 c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.13278em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85556em;vertical-align:-0.16667em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span></span></span></span> <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 193670278,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586625710
    },
    {
        "content": "<p>I am looking forward to proving the snake lemma <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 193670406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586625860
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"err\">⨯</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"err\">⟶</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"err\">⨯</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fail :-(</span>\n</pre></div>",
        "id": 193670678,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586626275
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mi>o</mi><mi>m</mi><mo stretchy=\"false\">(</mo><mi>Y</mi><mo separator=\"true\">,</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Hom(Y,A)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">m</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mclose\">)</span></span></span></span> has type <code>Type*</code>, right?</p>",
        "id": 193670694,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586626310
    },
    {
        "content": "<p>I have <code>f : (Y ⟶ A) ⨯ (Y ⟶ B)</code> and I want to apply <code>category_theory.limits.prod.fst</code> to get <code>g : Y ⟶ A</code> but I can't figure out how to do it :-(</p>",
        "id": 193670781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586626397
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">Yoneda_preserve_produc</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n     <span class=\"o\">(</span><span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">⨯</span> <span class=\"n\">B</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span><span class=\"o\">(</span> <span class=\"n\">op</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"err\">≅</span>  <span class=\"o\">(</span><span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span><span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">Y</span><span class=\"o\">)</span>  <span class=\"err\">⨯</span> <span class=\"o\">(</span><span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">let</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"n\">A</span><span class=\"err\">⨯</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span><span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">Y</span><span class=\"o\">)</span>  <span class=\"err\">⨯</span> <span class=\"o\">(</span><span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">Y</span><span class=\"o\">),</span>\n<span class=\"n\">exact</span>  <span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">φ</span><span class=\"o\">,</span> <span class=\"n\">φ</span> <span class=\"err\">≫</span> <span class=\"o\">(</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">))</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">φ</span><span class=\"o\">,(</span><span class=\"n\">φ</span> <span class=\"err\">≫</span> <span class=\"o\">(</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">))),</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"o\">,</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"o\">(</span> <span class=\"n\">f</span><span class=\"err\">≫</span>  <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"err\">≫</span>  <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">),</span>\n  <span class=\"n\">hom_inv_id&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_hom_id&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193670789,
        "sender_full_name": "orlando",
        "timestamp": 1586626408
    },
    {
        "content": "<p>Nice!</p>",
        "id": 193670797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586626427
    },
    {
        "content": "<p>i no ! there is ia mistake</p>",
        "id": 193670839,
        "sender_full_name": "orlando",
        "timestamp": 1586626448
    },
    {
        "content": "<p>In <code>category_theory.types</code> there is this: <code>@[simp] lemma types_hom {α β : Type u} : (α ⟶ β) = (α → β) := rfl</code></p>",
        "id": 193670916,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586626567
    },
    {
        "content": "<p>So I am a bit surprised that my <code>rfl</code> above is failing</p>",
        "id": 193670925,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586626583
    },
    {
        "content": "<p>Oh it is a stupid issue with brackets :-/</p>",
        "id": 193670947,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586626632
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"err\">⨯</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"err\">⟶</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(((</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"err\">⨯</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- succeeds</span>\n</pre></div>",
        "id": 193670983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586626661
    },
    {
        "content": "<p>I still don't have the confidence with category theory. With Lean in general, when something doesn't work I usually know why. With category theory I am still not sure.</p>",
        "id": 193671033,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586626700
    },
    {
        "content": "<p>OK now I can do it with <code>@</code> and filling in implicit arguments</p>",
        "id": 193671141,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586626879
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>    <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift</span>\n      <span class=\"o\">((</span><span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"err\">⨯</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n      <span class=\"o\">((</span><span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"err\">⨯</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)),</span>\n</pre></div>",
        "id": 193671187,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586626938
    },
    {
        "content": "<p>49 minutes so far :-)</p>",
        "id": 193671193,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586626955
    },
    {
        "content": "<p>gaaargh <code>by obviously</code> doesn't work for the proofs :-/</p>",
        "id": 193671218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586627008
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">hom_inv_id&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">ext</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n    <span class=\"n\">obviously</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 193671451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586627361
    },
    {
        "content": "<p><code>obviously</code> just killed two goals at once!</p>",
        "id": 193671454,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586627370
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Yoneda_preserve_product</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n     <span class=\"o\">(</span><span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">⨯</span> <span class=\"n\">B</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"err\">≅</span> <span class=\"o\">(</span><span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"err\">⨯</span> <span class=\"o\">(</span><span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">),</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"err\">⨯</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift</span>\n      <span class=\"o\">((</span><span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"err\">⨯</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n      <span class=\"o\">((</span><span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"err\">⨯</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)),</span>\n  <span class=\"n\">hom_inv_id&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">ext</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">}</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_hom_id&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">ext</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">sorry</span><span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">sorry</span><span class=\"o\">}</span>\n  <span class=\"kn\">end</span>\n<span class=\"o\">}</span>\n</pre></div>",
        "id": 193671640,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586627674
    },
    {
        "content": "<p>I think there might be some way of training <code>tidy</code> to solve the first proof.</p>",
        "id": 193671700,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586627798
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/category/near/193671454\" title=\"#narrow/stream/116395-maths/topic/category/near/193671454\">said</a>:</p>\n<blockquote>\n<p><code>obviously</code> just killed two goals at once!</p>\n</blockquote>\n<p>killing two goals with one tactic</p>",
        "id": 193671724,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586627855
    },
    {
        "content": "<p>it's toooooo complicated <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span></p>",
        "id": 193671833,
        "sender_full_name": "orlando",
        "timestamp": 1586628002
    },
    {
        "content": "<p>The category theory library is complicated <em>precisely</em> because not enough people use it, and so <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> doesn't have enough data about how to make it better. But it will be better one day.</p>",
        "id": 193671895,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586628062
    },
    {
        "content": "<p>But we need to make abelian categories, so we can do homological algebra, so people (e.g. me) are going to have to learn how to use it.</p>",
        "id": 193672051,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586628308
    },
    {
        "content": "<p>for hom </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">Yoneda_preserve_produc</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n     <span class=\"o\">(</span><span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">⨯</span> <span class=\"n\">B</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span><span class=\"o\">(</span> <span class=\"n\">op</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"err\">≅</span>  <span class=\"o\">(</span><span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span><span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">Y</span><span class=\"o\">)</span>  <span class=\"err\">⨯</span> <span class=\"o\">(</span><span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">exact</span>  <span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift</span>\n                    <span class=\"o\">((</span><span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">Y</span><span class=\"o\">))</span>   <span class=\"c1\">--- app cause it&#39;s natural transformation !</span>\n                    <span class=\"o\">((</span><span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">Y</span><span class=\"o\">)),</span>\n</pre></div>",
        "id": 193672948,
        "sender_full_name": "orlando",
        "timestamp": 1586629613
    },
    {
        "content": "<p>This is probably better, because the proof I can't do involves using the universal property of limit</p>",
        "id": 193673459,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586630354
    },
    {
        "content": "<p>So I can't do it. My goal is</p>\n<div class=\"codehilite\"><pre><span></span>1 goal\nC : Type u,\n𝒞 : category C,\n_inst_1 : has_binary_products C,\n_inst_2 : has_terminal C,\nY A B : C,\nx : (yoneda.obj A).obj (op Y) ⨯ (yoneda.obj B).obj (op Y)\n⊢ prod.lift (λ (f : (yoneda.obj (A ⨯ B)).obj (op Y)), f ≫ prod.fst)\n      (λ (f : (yoneda.obj (A ⨯ B)).obj (op Y)), f ≫ prod.snd)\n      (prod.lift (prod.fst x) (prod.snd x)) =\n    x\n</pre></div>\n\n\n<p>and the <code>x</code> is <code>\\crossproduct</code> i.e. categorical product, and the <code>prod.lift</code> is the category theory one as well. However these products are occurring in the category <code>Type v</code> so one can check them on components. This is what I don't know how to do using category theory. <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> ?</p>",
        "id": 193675247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586632914
    },
    {
        "content": "<p><code>(yoneda.obj A).obj (op Y)</code> is just <code>Y \\h A</code></p>",
        "id": 193675292,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586632940
    },
    {
        "content": "<p>Is the categorical product in <code>Type v</code> the ordinary product? What happens if you do <code>cases x</code>?</p>",
        "id": 193675450,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586633181
    },
    {
        "content": "<p>It looks like it must be otherwise I can't make sense out of this goal</p>",
        "id": 193675455,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586633192
    },
    {
        "content": "<p>annoyingly, it does something really annoying.</p>",
        "id": 193675480,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586633204
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>x_val : Π (j : discrete walking_pair), (pair ((yoneda.obj A).obj (op Y)) ((yoneda.obj B).obj (op Y))).obj j,\nx_property : x_val ∈ functor.sections (pair ((yoneda.obj A).obj (op Y)) ((yoneda.obj B).obj (op Y)))\n</pre></div>",
        "id": 193675493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586633228
    },
    {
        "content": "<p>oh</p>",
        "id": 193675495,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586633232
    },
    {
        "content": "<p>how did you obtain <code>x</code>?</p>",
        "id": 193675496,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586633235
    },
    {
        "content": "<p>The goal was this:</p>\n<div class=\"codehilite\"><pre><span></span>⊢ (prod.lift (λ (f : (yoneda.obj (A ⨯ B)).obj (op Y)), f ≫ prod.fst)\n         (λ (f : (yoneda.obj (A ⨯ B)).obj (op Y)), f ≫ prod.snd) ∘\n       λ (f : (Y ⟶ A) ⨯ (Y ⟶ B)), prod.lift (prod.fst f) (prod.snd f)) =\n    id\n</pre></div>\n\n\n<p>and I went for <code>funext x</code></p>",
        "id": 193675502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586633262
    },
    {
        "content": "<p>I'm trying to prove that some natural map Hom(Y,A) x Hom(Y,B) -&gt; Hom(Y,A) x Hom(Y,B) is id</p>",
        "id": 193675548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586633300
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/category/near/193675548\" title=\"#narrow/stream/116395-maths/topic/category/near/193675548\">said</a>:</p>\n<blockquote>\n<p>I'm trying to prove that some natural map Hom(Y,A) x Hom(Y,B) -&gt; Hom(Y,A) x Hom(Y,B) is id</p>\n</blockquote>\n<p>If you want to prove that two maps into a category-theory product are equal then you should probably use the API for that</p>",
        "id": 193675559,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586633341
    },
    {
        "content": "<p>The map is this: first use the universal property to get Hom(Y,A) x Hom(Y,B) -&gt; Hom(Y,A x B) and then use composition with pr1 and pr2 to get a map the other way. Yes, the products other than A x B are in Type v.</p>",
        "id": 193675562,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586633343
    },
    {
        "content": "<p>because that's ultimately the only thing that the API gives you</p>",
        "id": 193675587,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586633362
    },
    {
        "content": "<p>I thought that was <code>obviously</code></p>",
        "id": 193675588,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586633364
    },
    {
        "content": "<p><code>obviously</code> is not the API</p>",
        "id": 193675600,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586633387
    },
    {
        "content": "<p>Rotten luck.</p>",
        "id": 193675601,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586633396
    },
    {
        "content": "<p>I tried to chase the definition of prod back but it was just defined as a limit.</p>",
        "id": 193675651,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586633423
    },
    {
        "content": "<p>Hmm does the API for this not actually exist...?</p>",
        "id": 193675682,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586633484
    },
    {
        "content": "<p>I just mean the uniqueness part of the universal property. Two maps into X x Y agree if their compositions with X x Y -&gt; X and X x Y -&gt; Y both agree. I haven't used the mathlib products ever, I think.</p>",
        "id": 193675738,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586633549
    },
    {
        "content": "<p>Right.</p>",
        "id": 193675741,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586633558
    },
    {
        "content": "<p>Would that represent progress in your proof?</p>",
        "id": 193675743,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586633561
    },
    {
        "content": "<p>I'm hoping it's exactly what I need to finish the proof.</p>",
        "id": 193675753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586633582
    },
    {
        "content": "<p>It's presumably explicitly there for limits</p>",
        "id": 193675766,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586633603
    },
    {
        "content": "<p>You built the map using the universal property, so yeah you know when you compose with the map to Hom(Y, A) that it recovers the map you put in, which is (id composed with) the projection.</p>",
        "id": 193675772,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586633612
    },
    {
        "content": "<p>I was trying to formalise the math argument involving checking on components, which is OK because everything is in Type so the category product is actually the product. But I'm now not at all sure how equal these things are.</p>",
        "id": 193675824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586633659
    },
    {
        "content": "<p>And if they're just isomorphic then I will never get anywhere without the universal property.</p>",
        "id": 193675846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586633675
    },
    {
        "content": "<p>Ried i don't see the result you mention  : \" two maps into X x Y agree if their compositions with X x Y -&gt; X and X x Y -&gt; Y both agree. \"</p>",
        "id": 193675864,
        "sender_full_name": "orlando",
        "timestamp": 1586633703
    },
    {
        "content": "<p>So I guess you want to apply <code>limit.hom_ext</code> and then use <code>cases</code> on the objects of <code>walking_pair</code>.</p>",
        "id": 193675873,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586633726
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"270476\">orlando</span> <a href=\"#narrow/stream/116395-maths/topic/category/near/193675864\" title=\"#narrow/stream/116395-maths/topic/category/near/193675864\">said</a>:</p>\n<blockquote>\n<p>Ried i don't see the result you mention  : \" two maps into X x Y agree if their compositions with X x Y -&gt; X and X x Y -&gt; Y both agree. \"</p>\n</blockquote>\n<p>I agree it seems to be missing</p>",
        "id": 193675885,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586633735
    },
    {
        "content": "<p>Obviously the library should already provide this for you</p>",
        "id": 193675891,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586633744
    },
    {
        "content": "<p><a href=\"https://github.com/b-mehta/topos/blob/master/src/binary_products.lean#L29\" title=\"https://github.com/b-mehta/topos/blob/master/src/binary_products.lean#L29\">https://github.com/b-mehta/topos/blob/master/src/binary_products.lean#L29</a><br>\nfrom the topos project</p>",
        "id": 193675932,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586633767
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270476\">@orlando</span> you found a hole :-)</p>",
        "id": 193675933,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586633767
    },
    {
        "content": "<p>Good spot Reid :-)</p>",
        "id": 193675966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586633823
    },
    {
        "content": "<p>I even gave the correct proof <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 193676143,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586634067
    },
    {
        "content": "<p>Ah yeah this is a super useful result! It is pretty much the same thing as <code>apply limit.hom_ext, cases j</code> but it's nice to have a name for it like we did</p>",
        "id": 193682041,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1586642799
    },
    {
        "content": "<p>PR!</p>",
        "id": 193682134,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586642917
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/category/near/193668868\" title=\"#narrow/stream/116395-maths/topic/category/near/193668868\">said</a>:</p>\n<blockquote>\n<p>Your <code>lemma</code> is not a lemma, I think?</p>\n</blockquote>\n<p>Ok <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  I just understood now your remark <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> 12 hours later ! I really slow !!!</p>",
        "id": 193701965,
        "sender_full_name": "orlando",
        "timestamp": 1586681372
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift_fst</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"err\">≫</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">lift_π</span> <span class=\"o\">(</span><span class=\"n\">binary_fan</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift_snd</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"err\">≫</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">lift_π</span> <span class=\"o\">(</span><span class=\"n\">binary_fan</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 193705052,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586686696
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">comma</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">shapes</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">yoneda</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">opposites</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">types</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">shapes</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">types</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">category</span>\n<span class=\"kn\">open</span> <span class=\"n\">opposite</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">TEST</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"err\">𝒞</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span>  <span class=\"o\">[</span><span class=\"n\">has_binary_products</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">][</span><span class=\"n\">has_terminal</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"err\">𝒞</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">hom_ext</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span> <span class=\"err\">⨯</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">≫</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"err\">≫</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">≫</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"err\">≫</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">hom_ext</span><span class=\"o\">,</span>\n  <span class=\"n\">rintros</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"bp\">|</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">simpa</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift_fst</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"err\">≫</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">lift_π</span> <span class=\"o\">(</span><span class=\"n\">binary_fan</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift_snd</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"err\">≫</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">lift_π</span> <span class=\"o\">(</span><span class=\"n\">binary_fan</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">_</span>\n\n<span class=\"n\">def</span> <span class=\"n\">Yoneda_preserve_product</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n     <span class=\"o\">(</span><span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">⨯</span> <span class=\"n\">B</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"err\">≅</span> <span class=\"o\">(</span><span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"err\">⨯</span> <span class=\"o\">(</span><span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">),</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"err\">⨯</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift</span>\n      <span class=\"o\">((</span><span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"err\">⨯</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n      <span class=\"o\">((</span><span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"err\">⨯</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)),</span>\n  <span class=\"n\">hom_inv_id&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">ext</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">}</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_hom_id&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">hom_ext</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">assoc</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift_fst</span><span class=\"o\">,</span> <span class=\"n\">obviously</span><span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">assoc</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift_snd</span><span class=\"o\">,</span> <span class=\"n\">obviously</span><span class=\"o\">}</span>\n  <span class=\"kn\">end</span>\n<span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">TEST</span>\n</pre></div>\n\n\n<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 193705212,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586686986
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  :  your lemmas is exactly what i need !!!! I was asking me where is the lemma : </p>\n<div class=\"codehilite\"><pre><span></span> <span class=\"kn\">lemma</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">first</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)(</span><span class=\"n\">f</span> <span class=\"o\">:</span><span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"n\">f</span> <span class=\"n\">g</span>  <span class=\"err\">≫</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n     <span class=\"n\">obviously</span><span class=\"o\">,</span>\n     <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>If think it's good  !</p>",
        "id": 193705285,
        "sender_full_name": "orlando",
        "timestamp": 1586687158
    },
    {
        "content": "<p><code>prod.hom_ext</code> and <code>prod.lift_fst</code> and <code>prod.lift_snd</code> were all missing from the API, although no doubt the experts will say not to put in <code>prod.lift_fst</code> because \"it is in there already\" (as <code>limit.lift_π</code>). I am not so sure though. First, I needed to rewrite with it (which I can't do with limit.lift_\\pi) and secondly it might require the user of <code>prod</code> to know about <code>binary_fan.mk</code> which I feel is not something which an end user needs to know about.</p>",
        "id": 193705325,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586687178
    },
    {
        "content": "<p><code>erw limit.lift_π</code> would most likely have worked</p>",
        "id": 193705499,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1586687517
    },
    {
        "content": "<p>But I agree that these lemmas would be a nice addition</p>",
        "id": 193705544,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1586687555
    },
    {
        "content": "<p><code>prod</code> and <code>prod.fst</code> etc are all defined as <code>abbreviation</code>s. It says that <code>erewrite</code> unfolds semireducible definitions. It also unfolds abbreviations?</p>",
        "id": 193705618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586687721
    },
    {
        "content": "<p>! even <code>rw</code> works!</p>",
        "id": 193705625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586687748
    },
    {
        "content": "<p>In fact, in your code above, you can leave out the <code>rw prod.lift_fst</code> entirely and obviously will still handle it</p>",
        "id": 193705690,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1586687876
    },
    {
        "content": "<p>You don't need the <code>rw assoc</code> either</p>",
        "id": 193705733,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1586687918
    },
    {
        "content": "<p>as long as you have about 5 minutes to spare! You're right!</p>",
        "id": 193705815,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586688099
    },
    {
        "content": "<p>I think we should add all those lemmas!</p>",
        "id": 193707735,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586688563
    },
    {
        "content": "<p>I'm making a PR. You want all three?</p>",
        "id": 193707786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586688608
    },
    {
        "content": "<p>Also, we should add more specific instances for <code>has_products</code> and <code>has_binary_products</code> for all the concrete categories (including <code>Type</code>), which give you want you would definitionally expect.</p>",
        "id": 193707787,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586688610
    },
    {
        "content": "<p>Yes please!</p>",
        "id": 193707788,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586688615
    },
    {
        "content": "<p>We should check the other special shapes, too.</p>",
        "id": 193707792,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586688634
    },
    {
        "content": "<p>I never figured out how to convince Lean that X \\crossproduct Y was X \\times Y if X Y : Type.</p>",
        "id": 193707795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586688647
    },
    {
        "content": "<p>But if however far you get with the initial PR, we can look for those later.</p>",
        "id": 193707797,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586688648
    },
    {
        "content": "<p>Well, at the moment it isn't, definitionally.</p>",
        "id": 193707802,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586688663
    },
    {
        "content": "<p>Indeed, I half-suspect it's not true, or hard, or whatever</p>",
        "id": 193707812,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586688667
    },
    {
        "content": "<p>Or rather, it only is up to an <code>equiv</code> at the moment.</p>",
        "id": 193707820,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586688676
    },
    {
        "content": "<p>But we can make it definitional.</p>",
        "id": 193707822,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586688680
    },
    {
        "content": "<p>(Note that in some ways this is dangerous --- it allows/encourages people to break through the API. :-)</p>",
        "id": 193707826,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586688701
    },
    {
        "content": "<p>I'm out of my depth here, but it did make me go on a wild goose chase with the question.</p>",
        "id": 193707827,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586688706
    },
    {
        "content": "<p>I assumed I'd need it; I hadn't realised I could prove what I wanted in a purely arrow-theoretic way</p>",
        "id": 193707865,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586688724
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/category/near/193707792\" title=\"#narrow/stream/116395-maths/topic/category/near/193707792\">said</a>:</p>\n<blockquote>\n<p>We should check the other special shapes, too.</p>\n</blockquote>\n<p>The biproducts PR also does not have these lemmas</p>",
        "id": 193707868,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1586688748
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>feat(category_theory/limits/shapes/binary_products):\n</pre></div>\n\n\n<p>\"2 CHARACTERS OVER 50 IN CURRENT LINE\"</p>\n<p>:-/</p>",
        "id": 193708568,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586690036
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2396\" title=\"https://github.com/leanprover-community/mathlib/issues/2396\">#2396</a></p>",
        "id": 193708771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586690324
    },
    {
        "content": "<p>hum i don't know if it's somewhere but we have : </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift_comp</span><span class=\"o\">{</span><span class=\"n\">Z&#39;</span> <span class=\"n\">Z</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Z&#39;</span> <span class=\"err\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"err\">≫</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">|</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">h</span> <span class=\"err\">≫</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"err\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n     <span class=\"n\">apply</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">hom_ext</span><span class=\"o\">,</span>\n     <span class=\"n\">rw</span> <span class=\"n\">assoc</span><span class=\"o\">,</span>\n     <span class=\"n\">rw</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift_fst</span><span class=\"o\">,</span>\n     <span class=\"n\">rw</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift_fst</span><span class=\"o\">,</span>\n     <span class=\"n\">rw</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift_snd</span><span class=\"o\">,</span>\n     <span class=\"n\">rw</span> <span class=\"n\">assoc</span><span class=\"o\">,</span>\n     <span class=\"n\">rw</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift_snd</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193716195,
        "sender_full_name": "orlando",
        "timestamp": 1586703201
    },
    {
        "content": "<p>This isn't there, I think it should be! (and similar on the other side)</p>",
        "id": 193716875,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1586704212
    },
    {
        "content": "<p>I can add this to the PR. The <code>|</code> notation is orlando's I think; it might be worth getting Scott's input on this.</p>",
        "id": 193717891,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586705993
    },
    {
        "content": "<p>I would find some sort of notation for prod.lift useful, no strong preference on what it is</p>",
        "id": 193724320,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1586716284
    },
    {
        "content": "<p>Hello, i make a tatic for product but i have a problem it's seem to bug when there is a <code> rw ← </code> The code is a little long  ! </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">shapes</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">yoneda</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">opposites</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">types</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">types</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">mk_simp_attr</span> <span class=\"bp\">`</span><span class=\"n\">PRODUCT</span>    <span class=\"c1\">-----  BOF BOF</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">PRODUCT_CAT</span>  <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span>  <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"k\">with</span> <span class=\"n\">PRODUCT</span><span class=\"o\">}]</span>\n<span class=\"n\">run_cmd</span> <span class=\"n\">add_interactive</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">PRODUCT_CAT</span><span class=\"o\">]</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">category</span>\n<span class=\"kn\">open</span> <span class=\"n\">opposite</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">lem</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"err\">𝒞</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span>  <span class=\"o\">[</span><span class=\"n\">has_binary_products</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">][</span><span class=\"n\">has_terminal</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"err\">𝒞</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">PRODUCT</span><span class=\"o\">]</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">assoc</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">id_comp</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">comp_id</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">PRODUCT</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">prod_left_def</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">π</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">walking_pair</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"bp\">=</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">PRODUCT</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">prod_right_def</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">π</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">walking_pair</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"bp\">=</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">hom_ext</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">⟶</span> <span class=\"n\">X</span> <span class=\"err\">⨯</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">≫</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"err\">≫</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">≫</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"err\">≫</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">hom_ext</span><span class=\"o\">,</span>\n  <span class=\"n\">rintros</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"bp\">|</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">prod_left_def</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">prod_right_def</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">PRODUCT</span><span class=\"o\">]</span><span class=\"kn\">lemma</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift_fst</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"err\">≫</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">lift_π</span> <span class=\"o\">(</span><span class=\"n\">binary_fan</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">_</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">PRODUCT</span><span class=\"o\">]</span><span class=\"kn\">lemma</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift_snd</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"err\">≫</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">lift_π</span> <span class=\"o\">(</span><span class=\"n\">binary_fan</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">_</span>\n<span class=\"kn\">end</span> <span class=\"n\">lem</span>\n\n<span class=\"kn\">notation</span> <span class=\"n\">f</span> <span class=\"bp\">`</span> <span class=\"err\">⊗</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">20</span> <span class=\"n\">g</span> <span class=\"o\">:</span><span class=\"mi\">20</span> <span class=\"o\">:=</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">g</span>  <span class=\"c1\">---- 20</span>\n<span class=\"kn\">notation</span>  <span class=\"bp\">`</span><span class=\"n\">T</span><span class=\"bp\">`</span><span class=\"n\">C</span> <span class=\"o\">:</span><span class=\"mi\">20</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">terminal</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"kn\">notation</span>   <span class=\"bp\">`</span><span class=\"n\">T</span><span class=\"bp\">`</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"mi\">20</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">terminal</span><span class=\"bp\">.</span><span class=\"k\">from</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"kn\">notation</span> <span class=\"n\">f</span> <span class=\"bp\">`</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">20</span> <span class=\"n\">g</span> <span class=\"o\">:</span><span class=\"mi\">20</span> <span class=\"o\">:=</span>  <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">π1</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">π2</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span>\n\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"err\">𝒞</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">has_binary_products</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">][</span><span class=\"n\">has_terminal</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"err\">𝒞</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span><span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">lem</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">     π notation for projection</span>\n<span class=\"cm\">-/</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">PRODUCT</span><span class=\"o\">]</span><span class=\"kn\">lemma</span> <span class=\"n\">ex_1</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span> <span class=\"n\">f</span> <span class=\"bp\">|</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"n\">π1</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>  <span class=\"o\">:=</span>   <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift_fst</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">     we can type π : A ⨯ B ⟶ B if we need</span>\n<span class=\"cm\">-/</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">PRODUCT</span><span class=\"o\">]</span><span class=\"kn\">lemma</span> <span class=\"n\">ex_2</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span> <span class=\"n\">f</span> <span class=\"bp\">|</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"o\">(</span><span class=\"n\">π2</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">⨯</span> <span class=\"n\">B</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift_snd</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">PRODUCT</span><span class=\"o\">]</span><span class=\"kn\">lemma</span> <span class=\"n\">ex_3</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">⟶</span> <span class=\"n\">X</span> <span class=\"err\">⨯</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">≫</span> <span class=\"n\">π1</span>  <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"err\">≫</span> <span class=\"n\">π1</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">≫</span> <span class=\"n\">π2</span>  <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"err\">≫</span> <span class=\"n\">π2</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>  <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">hom_ext</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">PRODUCT</span><span class=\"o\">]</span><span class=\"kn\">lemma</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">left_composition</span><span class=\"o\">{</span><span class=\"n\">Z&#39;</span> <span class=\"n\">Z</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Z&#39;</span> <span class=\"err\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span>  <span class=\"o\">:</span>\n               <span class=\"n\">h</span> <span class=\"err\">≫</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">|</span> <span class=\"n\">g</span><span class=\"o\">)</span>  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"err\">≫</span> <span class=\"n\">f</span> <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"err\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n     <span class=\"n\">apply</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">hom_ext</span><span class=\"o\">,</span>   <span class=\"c1\">--- Le right member is of the form ( | )  composition π1 π2</span>\n     <span class=\"n\">PRODUCT_CAT</span><span class=\"o\">,</span>  <span class=\"n\">PRODUCT_CAT</span><span class=\"o\">,</span>  <span class=\"c1\">--- here assoc</span>\n     <span class=\"c1\">-- rw assoc,</span>\n     <span class=\"c1\">-- rw prod.lift_fst,</span>\n     <span class=\"c1\">-- rw prod.lift_fst,</span>\n     <span class=\"c1\">-- rw prod.lift_snd,</span>\n     <span class=\"c1\">-- rw assoc,</span>\n     <span class=\"c1\">-- rw prod.lift_snd,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">PRODUCT</span><span class=\"o\">]</span><span class=\"kn\">lemma</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map_first</span><span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}(</span><span class=\"n\">f</span>  <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)(</span><span class=\"n\">g</span>  <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"err\">⟶</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">⊗</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"o\">(</span><span class=\"n\">π1</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⨯</span> <span class=\"n\">W</span> <span class=\"err\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">π1</span>  <span class=\"err\">≫</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>  <span class=\"k\">begin</span>\n     <span class=\"n\">exact</span> <span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">map_π</span> <span class=\"o\">(</span><span class=\"n\">map_pair</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">walking_pair</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">PRODUCT</span><span class=\"o\">]</span><span class=\"kn\">lemma</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map_second</span><span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}(</span><span class=\"n\">f</span>  <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)(</span><span class=\"n\">g</span>  <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"err\">⟶</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">⊗</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"n\">π2</span> <span class=\"bp\">=</span> <span class=\"n\">π2</span> <span class=\"err\">≫</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>  <span class=\"k\">begin</span>\n     <span class=\"n\">exact</span> <span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">map_π</span> <span class=\"o\">(</span><span class=\"n\">map_pair</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">walking_pair</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">PRODUCT</span><span class=\"o\">]</span><span class=\"kn\">lemma</span>  <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">otimes_is_prod</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}(</span><span class=\"n\">f</span>  <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)(</span><span class=\"n\">g</span>  <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"err\">⟶</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">⊗</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span> <span class=\"n\">π1</span>  <span class=\"err\">≫</span> <span class=\"n\">f</span> <span class=\"bp\">|</span> <span class=\"n\">π2</span> <span class=\"err\">≫</span> <span class=\"n\">g</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n     <span class=\"n\">apply</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">hom_ext</span><span class=\"o\">,</span>\n     <span class=\"n\">PRODUCT_CAT</span><span class=\"o\">,</span> <span class=\"n\">PRODUCT_CAT</span><span class=\"o\">,</span>\n     <span class=\"c1\">-- rw prod.lift_fst,</span>\n     <span class=\"c1\">-- rw prod.map_first,</span>\n     <span class=\"c1\">-- rw prod.lift_snd,</span>\n     <span class=\"c1\">-- rw prod.map_second,</span>\n<span class=\"kn\">end</span>\n<span class=\"c1\">-- notation π1`(`X `x` Y`)` := (limits.prod.fst : X⨯Y ⟶ X)</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">PRODUCT</span><span class=\"o\">]</span><span class=\"kn\">lemma</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map_ext</span><span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}(</span><span class=\"n\">f1</span> <span class=\"n\">f2</span>  <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)(</span><span class=\"n\">g1</span> <span class=\"n\">g2</span>  <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"err\">⟶</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">f1</span> <span class=\"err\">⊗</span> <span class=\"n\">g1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f2</span> <span class=\"err\">⊗</span> <span class=\"n\">g2</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n<span class=\"o\">(</span><span class=\"n\">π1</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⨯</span> <span class=\"n\">Z</span> <span class=\"err\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"n\">f1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">π1</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⨯</span> <span class=\"n\">Z</span> <span class=\"err\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span>  <span class=\"err\">≫</span> <span class=\"n\">f2</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">certif</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n     <span class=\"n\">iterate</span> <span class=\"mi\">2</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">otimes_is_prod</span> <span class=\"n\">at</span> <span class=\"n\">certif</span><span class=\"o\">},</span>\n     <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map_first</span> <span class=\"o\">(</span> <span class=\"n\">f1</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">g1</span><span class=\"o\">),</span>\n     <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map_first</span> <span class=\"o\">(</span> <span class=\"n\">f2</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">g2</span><span class=\"o\">),</span>\n     <span class=\"n\">iterate</span> <span class=\"mi\">2</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">otimes_is_prod</span><span class=\"o\">},</span>\n     <span class=\"n\">rw</span> <span class=\"n\">certif</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">PRODUCT</span><span class=\"o\">]</span><span class=\"kn\">lemma</span> <span class=\"n\">destruction</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span>  <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">Z</span> <span class=\"o\">)</span> <span class=\"o\">:</span>\n     <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">|</span> <span class=\"mi\">𝟙</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">⊗</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">Y</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">|</span> <span class=\"mi\">𝟙</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n     <span class=\"n\">apply</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">hom_ext</span><span class=\"o\">,</span>\n     <span class=\"c1\">-- PRODUCT_CAT,PRODUCT_CAT,     ---------------------- PROBLEME With the tatict HEEEEEEERRRRRRE</span>\n     <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift_fst</span><span class=\"o\">],</span>\n     <span class=\"n\">rw</span>  <span class=\"n\">assoc</span><span class=\"o\">,</span>\n     <span class=\"n\">rw</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map_first</span><span class=\"o\">,</span>\n     <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">assoc</span><span class=\"o\">,</span>               <span class=\"c1\">----- ← assoc here  Problem ?</span>\n     <span class=\"n\">rw</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift_fst</span><span class=\"o\">,</span>\n     <span class=\"n\">tidy</span><span class=\"o\">,</span> <span class=\"c1\">-- super - power tidy</span>\n<span class=\"kn\">end</span>\n\n\n\n\n<span class=\"n\">def</span> <span class=\"n\">Y</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)(</span><span class=\"n\">A</span> <span class=\"o\">:</span><span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">Y_</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">φ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"err\">⟶</span> <span class=\"n\">Y</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Good notation for yoneda stuff :</span>\n<span class=\"c1\">-- We fix V : C and we denote by</span>\n<span class=\"c1\">-- R[X] := yoneda.obj X).obj (op R) and φ : A  ⟶ B (in C) R ⟦  φ ⟧   : R[A] → R[B]  in type v</span>\n<span class=\"kn\">notation</span> <span class=\"n\">R</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">A</span><span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">20</span> <span class=\"o\">:=</span> <span class=\"n\">Y</span> <span class=\"n\">R</span> <span class=\"n\">A</span>  <span class=\"c1\">-- notation ??</span>\n<span class=\"kn\">notation</span> <span class=\"n\">R</span><span class=\"bp\">`&lt;`</span><span class=\"n\">φ</span><span class=\"bp\">`&gt;`</span> <span class=\"o\">:</span><span class=\"mi\">20</span>   <span class=\"o\">:=</span> <span class=\"n\">Y_</span> <span class=\"n\">R</span> <span class=\"n\">φ</span>  <span class=\"c1\">--</span>\n<span class=\"n\">def</span> <span class=\"n\">Yoneda_preserve_product</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n     <span class=\"n\">Y</span><span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"err\">⨯</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"err\">≅</span> <span class=\"n\">Y</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"err\">⨯</span> <span class=\"n\">Y</span><span class=\"o\">[</span><span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">π1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">π2</span><span class=\"o\">),</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"err\">⨯</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift</span>\n      <span class=\"o\">((</span><span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"err\">⨯</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n      <span class=\"o\">((</span><span class=\"bp\">@</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"err\">⨯</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)),</span>\n  <span class=\"n\">hom_inv_id&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">ext</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">}</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_hom_id&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">lem</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">hom_ext</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">assoc</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">lem</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift_fst</span><span class=\"o\">,</span> <span class=\"n\">obviously</span><span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">assoc</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">lem</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift_snd</span><span class=\"o\">,</span> <span class=\"n\">obviously</span><span class=\"o\">}</span>\n  <span class=\"kn\">end</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">--- Here it just sugar</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">PRODUCT</span><span class=\"o\">]</span><span class=\"kn\">lemma</span> <span class=\"n\">yoneda_sugar</span><span class=\"bp\">.</span><span class=\"n\">composition</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">&gt;</span> <span class=\"bp\">=</span><span class=\"o\">(</span> <span class=\"n\">R</span><span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"bp\">&gt;</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span> <span class=\"bp\">&gt;</span><span class=\"o\">)</span>\n <span class=\"o\">:=</span>  <span class=\"k\">begin</span>\n     <span class=\"n\">unfold</span> <span class=\"n\">Y_</span><span class=\"o\">,</span>\n     <span class=\"n\">simp</span><span class=\"o\">,</span>\n <span class=\"kn\">end</span>\n<span class=\"n\">def</span> <span class=\"n\">yoneda_sugar</span><span class=\"bp\">.</span><span class=\"n\">conv</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">g</span>\n<span class=\"n\">def</span> <span class=\"n\">yoneda_sugar</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"err\">⨯</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"err\">≅</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"err\">⨯</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n     <span class=\"n\">exact</span> <span class=\"n\">Yoneda_preserve_product</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">PRODUCT</span><span class=\"o\">]</span><span class=\"kn\">lemma</span> <span class=\"n\">yoneda_sugar</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n     <span class=\"o\">(</span><span class=\"n\">yoneda_sugar</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">=</span>  <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">⨯</span> <span class=\"n\">B</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"bp\">|</span> <span class=\"n\">R</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">⨯</span> <span class=\"n\">B</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">&gt;</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">PRODUCT</span><span class=\"o\">]</span><span class=\"kn\">lemma</span> <span class=\"n\">yoneda_sugar</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">first</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n <span class=\"o\">(</span><span class=\"n\">yoneda_sugar</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"err\">≫</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">&lt;</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">&gt;</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n <span class=\"k\">begin</span>\n     <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n <span class=\"kn\">end</span>\n <span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">PRODUCT</span><span class=\"o\">]</span><span class=\"kn\">lemma</span> <span class=\"n\">yoneda_sugar</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">hom_inv</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n     <span class=\"o\">(</span><span class=\"n\">yoneda_sugar</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"err\">≫</span> <span class=\"o\">(</span><span class=\"n\">yoneda_sugar</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"bp\">=</span> <span class=\"mi\">𝟙</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">[</span> <span class=\"n\">A</span> <span class=\"err\">⨯</span> <span class=\"n\">B</span><span class=\"o\">])</span> <span class=\"o\">:=</span>\n     <span class=\"o\">(</span><span class=\"n\">Yoneda_preserve_product</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom_inv_id&#39;</span>\n <span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">PRODUCT</span><span class=\"o\">]</span><span class=\"kn\">lemma</span> <span class=\"n\">yoneda_sugar</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">inv_hom</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n     <span class=\"o\">(</span><span class=\"n\">yoneda_sugar</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"err\">≫</span> <span class=\"o\">(</span><span class=\"n\">yoneda_sugar</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">=</span> <span class=\"mi\">𝟙</span> <span class=\"o\">(</span> <span class=\"n\">R</span> <span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span>  <span class=\"err\">⨯</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">B</span><span class=\"o\">])</span> <span class=\"o\">:=</span>\n     <span class=\"o\">(</span><span class=\"n\">Yoneda_preserve_product</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv_hom_id&#39;</span>\n <span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">PRODUCT</span><span class=\"o\">]</span><span class=\"kn\">lemma</span> <span class=\"n\">yoneda_sugar</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">second</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">yoneda_sugar</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"err\">≫</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">&lt;</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">&gt;</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">PRODUCT</span><span class=\"o\">]</span><span class=\"kn\">lemma</span> <span class=\"n\">yoneda_sugar</span><span class=\"bp\">.</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">𝟙</span> <span class=\"n\">A</span> <span class=\"bp\">&gt;</span> <span class=\"bp\">=</span> <span class=\"mi\">𝟙</span> <span class=\"o\">(</span> <span class=\"n\">R</span> <span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n     <span class=\"n\">funext</span><span class=\"o\">,</span>\n     <span class=\"n\">exact</span> <span class=\"n\">comp_id</span> <span class=\"n\">C</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n     <span class=\"c1\">-- have T : ((yoneda.map (𝟙 A)).app (op R)) g = (g ≫ (𝟙 A)),</span>\n<span class=\"kn\">end</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">yoneda_sugar_prod</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)(</span><span class=\"n\">X</span> <span class=\"o\">:</span><span class=\"n\">C</span><span class=\"o\">)(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"n\">R</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">|</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"err\">≫</span> <span class=\"o\">(</span><span class=\"n\">yoneda_sugar</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span>  <span class=\"bp\">=</span>  <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"bp\">&gt;</span> <span class=\"bp\">|</span> <span class=\"n\">R</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span> <span class=\"bp\">&gt;</span> <span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"c1\">-- the  ≫  is  :/</span>\n     <span class=\"k\">begin</span>\n          <span class=\"n\">PRODUCT_CAT</span><span class=\"o\">,</span>\n          <span class=\"c1\">-- rw  yoneda_sugar.prod.hom R A B,</span>\n          <span class=\"c1\">-- rw prod.left_composition,</span>\n          <span class=\"n\">iterate</span> <span class=\"mi\">2</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">yoneda_sugar</span><span class=\"bp\">.</span><span class=\"n\">composition</span><span class=\"o\">},</span>   <span class=\"c1\">-- rw ← is the problem ?</span>\n          <span class=\"n\">rw</span> <span class=\"n\">lem</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift_fst</span><span class=\"o\">,</span>\n          <span class=\"n\">rw</span> <span class=\"n\">lem</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift_snd</span><span class=\"o\">,</span>\n     <span class=\"kn\">end</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">PRODUCT</span><span class=\"o\">]</span><span class=\"kn\">lemma</span> <span class=\"n\">yoneda_sugar_prod_inv</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)(</span><span class=\"n\">X</span> <span class=\"o\">:</span><span class=\"n\">C</span><span class=\"o\">)(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n     <span class=\"n\">R</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">|</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span>   <span class=\"bp\">=</span>  <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"bp\">&gt;</span> <span class=\"bp\">|</span> <span class=\"n\">R</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span> <span class=\"bp\">&gt;</span> <span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"o\">(</span><span class=\"n\">yoneda_sugar</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"o\">:=</span>\n     <span class=\"k\">begin</span>\n          <span class=\"n\">PRODUCT_CAT</span><span class=\"o\">,</span>  <span class=\"c1\">-- noting   HERE PROBLEM the tatic do nothing</span>\n          <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">yoneda_sugar_prod</span><span class=\"o\">,</span>\n          <span class=\"n\">rw</span> <span class=\"n\">assoc</span><span class=\"o\">,</span>\n          <span class=\"n\">rw</span> <span class=\"n\">yoneda_sugar</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">hom_inv</span><span class=\"o\">,</span>\n          <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n     <span class=\"kn\">end</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">PRODUCT</span><span class=\"o\">]</span><span class=\"kn\">lemma</span>  <span class=\"n\">yoneda_sugar</span><span class=\"bp\">.</span><span class=\"n\">otimes</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">){</span><span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">K</span> <span class=\"o\">:</span><span class=\"n\">C</span><span class=\"o\">}(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">Y</span> <span class=\"o\">)(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"err\">⟶</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n <span class=\"o\">(</span> <span class=\"n\">R</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">⊗</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">yoneda_sugar</span><span class=\"bp\">.</span><span class=\"n\">prod</span>  <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"err\">≫</span> <span class=\"o\">((</span><span class=\"n\">R</span><span class=\"bp\">&lt;</span><span class=\"n\">f</span><span class=\"bp\">&gt;</span><span class=\"o\">)</span> <span class=\"err\">⊗</span> <span class=\"n\">R</span><span class=\"bp\">&lt;</span><span class=\"n\">g</span><span class=\"bp\">&gt;</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"o\">(</span><span class=\"n\">yoneda_sugar</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n     <span class=\"n\">PRODUCT_CAT</span><span class=\"o\">,</span>\n     <span class=\"c1\">-- iterate 2 {rw prod.otimes_is_prod},</span>\n     <span class=\"c1\">-- rw  yoneda_sugar.prod.hom,</span>\n     <span class=\"c1\">-- iterate 1 {rw yoneda_sugar_prod_inv},</span>\n     <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">assoc</span><span class=\"o\">,</span>\n     <span class=\"n\">rw</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">left_composition</span><span class=\"o\">,</span>\n     <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">assoc</span><span class=\"o\">,</span>\n     <span class=\"n\">rw</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift_fst</span><span class=\"o\">,</span>\n     <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">assoc</span><span class=\"o\">,</span>\n     <span class=\"n\">rw</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift_snd</span><span class=\"o\">,</span>\n     <span class=\"c1\">-- rw yoneda_sugar.composition,</span>\n     <span class=\"c1\">-- rw yoneda_sugar.composition,</span>\n<span class=\"kn\">end</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">PRODUCT</span><span class=\"o\">]</span><span class=\"kn\">lemma</span> <span class=\"n\">yonega_sugar</span><span class=\"bp\">.</span><span class=\"n\">one_otimes</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span><span class=\"n\">C</span><span class=\"o\">)(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n <span class=\"o\">(((</span><span class=\"n\">yoneda_sugar</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">R</span> <span class=\"n\">Z</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">&lt;</span><span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">Z</span> <span class=\"err\">⊗</span> <span class=\"n\">f</span> <span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"o\">(</span><span class=\"n\">yoneda_sugar</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">R</span> <span class=\"n\">Z</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">Z</span><span class=\"o\">])</span> <span class=\"err\">⊗</span> <span class=\"n\">R</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"bp\">&gt;</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n     <span class=\"n\">rw</span> <span class=\"n\">yoneda_sugar</span><span class=\"bp\">.</span><span class=\"n\">otimes</span><span class=\"o\">,</span>\n     <span class=\"n\">iterate</span> <span class=\"mi\">3</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">assoc</span><span class=\"o\">},</span>\n     <span class=\"n\">rw</span> <span class=\"n\">yoneda_sugar</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">inv_hom</span><span class=\"o\">,</span>\n     <span class=\"n\">rw</span> <span class=\"n\">id_comp</span><span class=\"o\">,</span>\n     <span class=\"n\">rw</span> <span class=\"n\">assoc</span><span class=\"o\">,</span>\n     <span class=\"n\">rw</span> <span class=\"n\">yoneda_sugar</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">inv_hom</span><span class=\"o\">,</span>\n     <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">yoneda_sugar</span><span class=\"bp\">.</span><span class=\"n\">id</span><span class=\"o\">,</span>\n     <span class=\"n\">simp</span><span class=\"o\">,</span>\n <span class=\"kn\">end</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">yonega_sugar</span><span class=\"bp\">.</span><span class=\"n\">one_otimes&#39;</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span><span class=\"n\">C</span><span class=\"o\">)(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n <span class=\"o\">(</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">&lt;</span><span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">Z</span> <span class=\"err\">⊗</span> <span class=\"n\">f</span> <span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"o\">(</span><span class=\"n\">yoneda_sugar</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">R</span> <span class=\"n\">Z</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">yoneda_sugar</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">R</span> <span class=\"n\">Z</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">Z</span><span class=\"o\">])</span> <span class=\"err\">⊗</span> <span class=\"n\">R</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"bp\">&gt;</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n     <span class=\"n\">iterate</span> <span class=\"mi\">2</span><span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">yoneda_sugar</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">hom</span><span class=\"o\">},</span>\n     <span class=\"n\">rw</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">left_composition</span><span class=\"o\">,</span>\n     <span class=\"n\">iterate</span> <span class=\"mi\">2</span><span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">yoneda_sugar</span><span class=\"bp\">.</span><span class=\"n\">composition</span><span class=\"o\">},</span>\n     <span class=\"n\">rw</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map_first</span><span class=\"o\">,</span>\n     <span class=\"n\">rw</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map_second</span><span class=\"o\">,</span>\n     <span class=\"n\">rw</span> <span class=\"n\">comp_id</span><span class=\"o\">,</span>\n     <span class=\"n\">rw</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">otimes_is_prod</span><span class=\"o\">,</span><span class=\"n\">rw</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">left_composition</span><span class=\"o\">,</span><span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">assoc</span><span class=\"o\">,</span>\n     <span class=\"n\">rw</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift_fst</span><span class=\"o\">,</span><span class=\"n\">rw</span> <span class=\"err\">←</span>  <span class=\"n\">assoc</span><span class=\"o\">,</span><span class=\"n\">rw</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift_snd</span><span class=\"o\">,</span><span class=\"n\">rw</span> <span class=\"n\">comp_id</span><span class=\"o\">,</span>\n     <span class=\"n\">rw</span> <span class=\"n\">yoneda_sugar</span><span class=\"bp\">.</span><span class=\"n\">composition</span><span class=\"o\">,</span>\n <span class=\"kn\">end</span>\n</pre></div>",
        "id": 193767463,
        "sender_full_name": "orlando",
        "timestamp": 1586781244
    },
    {
        "content": "<p>I think you're right about <code>\\l assoc</code>. If you run your tactic then the goal turns into precisely the step where you want to rewrite associativity backwards. I think <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> will have some ideas. The problem is that you cannot just tell <code>simp</code> to try <code>rw assoc</code> and <code>rw \\l assoc</code> because then it will loop. Maybe this is something to do with his <code>rewrite_search</code> tactic? I think that this is not quite finished, but I don't know if he has already written enough stuff to make it possible to do what you want to do.</p>",
        "id": 193767959,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586781757
    },
    {
        "content": "<p>I understand  <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  : if we tell <code> rw assoc </code> and <code>rw  \\l assoc </code> i saw the problem !!! lean don't unterstand i what direction to go !</p>",
        "id": 193768277,
        "sender_full_name": "orlando",
        "timestamp": 1586781997
    },
    {
        "content": "<p>tidy work for some lemma !</p>",
        "id": 193768316,
        "sender_full_name": "orlando",
        "timestamp": 1586782033
    },
    {
        "content": "<p>In fact the tatic i need is something like  : ' rewrite up to assoc ' !</p>",
        "id": 193768427,
        "sender_full_name": "orlando",
        "timestamp": 1586782106
    },
    {
        "content": "<p>This is why I tagged Scott -- he will know the state of the art.</p>",
        "id": 193768567,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586782210
    },
    {
        "content": "<p>Maybe the <code>reassoc</code> attribute is already enough. See <a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/reassoc_axiom.html\" title=\"https://leanprover-community.github.io/mathlib_docs/tactic/reassoc_axiom.html\">here</a>. There is also a <code>reassoc_of</code> tactic for use together with <code>rw</code> but I don't know how well it works. I don't think it is actually used anywhere in mathlib.</p>",
        "id": 193769854,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1586783105
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270476\">@orlando</span> here is how <code>simp</code> proves (a+b)+(c+d)=d+((c+b)+a): first it applies associativity as many times as possible, to get a+(b+(c+d))=d+(c+(b+a)), and then it wants to swap around variables. Clearly you can swap c and d in a+(b+(c+d)) using <code>add_comm</code>. But how to swap <code>a</code> and <code>b</code>? The trick is a lemma called <code>add_left_comm</code> which says <code>a+(b+c)=b+(a+c)</code>. You can prove a+(b+(c+d))=d+(c+(b+a)) using just add_left_comm and add_comm, because these will let you swap any two adjacent variables, so you can run some kind of sorting function.</p>",
        "id": 193770387,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586783514
    },
    {
        "content": "<p><code>reassoc</code> is the same kind of trick. It gives you a lemma which you can apply without having to use \\l assoc.</p>",
        "id": 193770484,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586783573
    },
    {
        "content": "<p>Maybe you should look through the category theory library and see what kind of lemmas Scott and others are tagging with <code>reassoc</code>.</p>",
        "id": 193770602,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586783643
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">simplify</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span> <span class=\"n\">true</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">+</span><span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"o\">((</span><span class=\"n\">c</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">add_left_comm</span><span class=\"o\">]</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">0. [simplify.rewrite] [add_left_comm]: a + b + (c + d) ==&gt; c + (a + b + d)</span>\n<span class=\"cm\">0. [simplify.rewrite] [add_comm]: a + b + d ==&gt; d + (a + b)</span>\n<span class=\"cm\">0. [simplify.rewrite] [add_left_comm]: d + (a + b) ==&gt; a + (d + b)</span>\n<span class=\"cm\">0. [simplify.rewrite] [add_comm]: d + b ==&gt; b + d</span>\n<span class=\"cm\">0. [simplify.rewrite] [add_left_comm]: c + (a + (b + d)) ==&gt; a + (c + (b + d))</span>\n<span class=\"cm\">0. [simplify.rewrite] [add_left_comm]: c + (b + d) ==&gt; b + (c + d)</span>\n<span class=\"cm\">0. [simplify.rewrite] [add_comm]: c + b ==&gt; b + c</span>\n<span class=\"cm\">0. [simplify.rewrite] [add_comm]: b + c + a ==&gt; a + (b + c)</span>\n<span class=\"cm\">0. [simplify.rewrite] [add_left_comm]: d + (a + (b + c)) ==&gt; a + (d + (b + c))</span>\n<span class=\"cm\">0. [simplify.rewrite] [add_left_comm]: d + (b + c) ==&gt; b + (d + c)</span>\n<span class=\"cm\">0. [simplify.rewrite] [add_comm]: d + c ==&gt; c + d</span>\n<span class=\"cm\">0. [simplify.rewrite] [eq_self_iff_true]: a + (b + (c + d)) = a + (b + (c + d)) ==&gt; true</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 193770626,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586783673
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">simplify</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span> <span class=\"n\">true</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">+</span><span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"o\">((</span><span class=\"n\">c</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">add_left_comm</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">0. [simplify.rewrite] [add_assoc]: a + b + (c + d) ==&gt; a + (b + (c + d))</span>\n<span class=\"cm\">0. [simplify.rewrite] [add_comm]: c + b ==&gt; b + c</span>\n<span class=\"cm\">0. [simplify.rewrite] [add_assoc]: b + c + a ==&gt; b + (c + a)</span>\n<span class=\"cm\">0. [simplify.rewrite] [add_comm]: c + a ==&gt; a + c</span>\n<span class=\"cm\">0. [simplify.rewrite] [add_left_comm]: b + (a + c) ==&gt; a + (b + c)</span>\n<span class=\"cm\">0. [simplify.rewrite] [add_left_comm]: d + (a + (b + c)) ==&gt; a + (d + (b + c))</span>\n<span class=\"cm\">0. [simplify.rewrite] [add_left_comm]: d + (b + c) ==&gt; b + (d + c)</span>\n<span class=\"cm\">0. [simplify.rewrite] [add_comm]: d + c ==&gt; c + d</span>\n<span class=\"cm\">0. [simplify.rewrite] [eq_self_iff_true]: a + (b + (c + d)) = a + (b + (c + d)) ==&gt; true</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 193770735,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586783768
    },
    {
        "content": "<p>In fact orlando, we see from <a href=\"https://github.com/leanprover-community/mathlib/pull/2396\" title=\"https://github.com/leanprover-community/mathlib/pull/2396\">my PR</a> that Scott tagged <code>prod.lift_fst</code> with <code>reassoc</code> and it this creates <em>precisely</em> the corresponding lemma which would finish your proof without the \\l assoc.</p>",
        "id": 193770959,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586783994
    },
    {
        "content": "<p>Ohhhh  <code> set_option trace.simplify.rewrite true </code> is very Gooooood !</p>",
        "id": 193771016,
        "sender_full_name": "orlando",
        "timestamp": 1586784024
    },
    {
        "content": "<p>Hey, I got it working :-)</p>",
        "id": 193771138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586784134
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">PRODUCT</span><span class=\"o\">,</span> <span class=\"n\">reassoc</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift_fst</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"err\">≫</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">lift_π</span> <span class=\"o\">(</span><span class=\"n\">binary_fan</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">_</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">PRODUCT</span><span class=\"o\">]</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift_fst_assoc</span>\n</pre></div>",
        "id": 193771144,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586784140
    },
    {
        "content": "<p><code>reassoc</code> creates a new lemma <code>prod.lift_fst_assoc</code> and then I also tag it with <code>PRODUCT</code></p>",
        "id": 193771158,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586784164
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">PRODUCT</span><span class=\"o\">]</span><span class=\"kn\">lemma</span> <span class=\"n\">destruction</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span>  <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">Z</span> <span class=\"o\">)</span> <span class=\"o\">:</span>\n     <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">|</span> <span class=\"mi\">𝟙</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">⊗</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">Y</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">|</span> <span class=\"mi\">𝟙</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n     <span class=\"n\">apply</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">hom_ext</span><span class=\"o\">,</span>\n       <span class=\"n\">PRODUCT_CAT</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>closes the first goal!</p>",
        "id": 193771198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586784200
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">PRODUCT</span><span class=\"o\">]</span><span class=\"kn\">lemma</span> <span class=\"n\">destruction</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span>  <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">Z</span> <span class=\"o\">)</span> <span class=\"o\">:</span>\n     <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">|</span> <span class=\"mi\">𝟙</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">⊗</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">Y</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">|</span> <span class=\"mi\">𝟙</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n     <span class=\"n\">apply</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">hom_ext</span><span class=\"bp\">;</span><span class=\"n\">PRODUCT_CAT</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193771307,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586784273
    },
    {
        "content": "<p><code>;</code> means \"apply the next tactic to all of the goals\"</p>",
        "id": 193771324,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586784288
    },
    {
        "content": "<p>ohhh that nice <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 193771562,
        "sender_full_name": "orlando",
        "timestamp": 1586784460
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"270476\">orlando</span> <a href=\"#narrow/stream/116395-maths/topic/category/near/193771016\" title=\"#narrow/stream/116395-maths/topic/category/near/193771016\">said</a>:</p>\n<blockquote>\n<p>Ohhhh  <code> set_option trace.simplify.rewrite true </code> is very Gooooood !</p>\n</blockquote>\n<p>This messages suggests you should read <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/simp.md\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/simp.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/extras/simp.md</a> If you still want to learn more about simp then you can read the relevant sections in <a href=\"https://lean-forward.github.io/mathlib-maintenance/paper.pdf\" title=\"https://lean-forward.github.io/mathlib-maintenance/paper.pdf\">https://lean-forward.github.io/mathlib-maintenance/paper.pdf</a></p>",
        "id": 193772273,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586785028
    },
    {
        "content": "<p>You might also like to use Scott's <code>slice_lhs</code> or <code>slice_rhs</code> tactics</p>",
        "id": 193780597,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1586790178
    },
    {
        "content": "<p>hum a question : what is this error ? </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">excessive</span> <span class=\"n\">memory</span> <span class=\"n\">consumption</span> <span class=\"n\">detected</span> <span class=\"n\">at</span> <span class=\"err\">&#39;</span><span class=\"n\">parse_notation&#39;</span> <span class=\"o\">(</span><span class=\"n\">potential</span> <span class=\"n\">solution</span><span class=\"o\">:</span> <span class=\"n\">increase</span> <span class=\"n\">memory</span> <span class=\"n\">consumption</span> <span class=\"n\">threshold</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 193789155,
        "sender_full_name": "orlando",
        "timestamp": 1586794751
    },
    {
        "content": "<p>It means you made a typo but instead of telling you the true problem, Lean just got confused.</p>",
        "id": 193789324,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586794836
    },
    {
        "content": "<p>I have  just import the previous file in a other file.</p>",
        "id": 193789333,
        "sender_full_name": "orlando",
        "timestamp": 1586794840
    },
    {
        "content": "<p>hmm</p>",
        "id": 193789875,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586795179
    },
    {
        "content": "<p>Make a little project and push it to github?</p>",
        "id": 193789889,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586795192
    },
    {
        "content": "<p>i don't know how use github <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 193790492,
        "sender_full_name": "orlando",
        "timestamp": 1586795545
    },
    {
        "content": "<p>but i thinck it's because i save my previous file in the directory of mathlib, sorry, my question is not well asked</p>",
        "id": 193790670,
        "sender_full_name": "orlando",
        "timestamp": 1586795638
    },
    {
        "content": "<p>Hum i try with <a href=\"https://github.com/Or7ando/lean/tree/master/.github/workflows\" title=\"https://github.com/Or7ando/lean/tree/master/.github/workflows\">here</a> it's ok ?</p>",
        "id": 193794260,
        "sender_full_name": "orlando",
        "timestamp": 1586797687
    },
    {
        "content": "<p>in the file <code> G </code> i import the file <code> groupk </code>  and the error is excessive memory ... perhaps something stupid <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 193794561,
        "sender_full_name": "orlando",
        "timestamp": 1586797857
    },
    {
        "content": "<p>The problem is not the import. Put <code>#exit</code> just before <code>namespace GROUP_OBJ</code> and everything is OK.</p>",
        "id": 193794770,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586797969
    },
    {
        "content": "<p>The problem is the <code>group_obj</code> structure</p>",
        "id": 193794861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586798010
    },
    {
        "content": "<p>My guess is that the issue is maybe with the notation <code>[ ... ]</code> which you define in <code>groupk</code>. Lean doesn't seem to like the definition of group_obj. The notation <code>[...]</code> is already used to mean something else. I think Lean thinks <code>[𝒞 : category.{v} C]</code> is <code>R</code> and <code>has_binary_products.{v} C</code> is <code>A</code>.</p>",
        "id": 193795674,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586798400
    },
    {
        "content": "<p>Not a good idea this notation <span aria-label=\"skull and crossbones\" class=\"emoji emoji-2620\" role=\"img\" title=\"skull and crossbones\">:skull_and_crossbones:</span></p>",
        "id": 193796389,
        "sender_full_name": "orlando",
        "timestamp": 1586798687
    },
    {
        "content": "<p>Well, they use <code>[R]</code> in the definition of module homomorphism: <a href=\"https://github.com/leanprover-community/mathlib/blob/51f7319b52be84cae60473156666a022cf60043b/src/algebra/module.lean#L213\" title=\"https://github.com/leanprover-community/mathlib/blob/51f7319b52be84cae60473156666a022cf60043b/src/algebra/module.lean#L213\">see here</a></p>",
        "id": 193798047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586799503
    },
    {
        "content": "<p>But somehow they are more careful. I don't know anything about parsing.</p>",
        "id": 193798067,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586799521
    },
    {
        "content": "<p>Maybe the point is that they have something before the <code>[</code></p>",
        "id": 193798129,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586799564
    },
    {
        "content": "<p>Okay Kevin, so it's very dangerous to play with notation !</p>",
        "id": 193798454,
        "sender_full_name": "orlando",
        "timestamp": 1586799748
    },
    {
        "content": "<p>thx !</p>",
        "id": 193798543,
        "sender_full_name": "orlando",
        "timestamp": 1586799796
    },
    {
        "content": "<p>In Lean 4 notation will be several orders of magnitude more powerful</p>",
        "id": 193798573,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586799825
    },
    {
        "content": "<p>this is really beautiful  ! quasi automatic proof : i'm really impress ! i</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">map_eq</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}(</span><span class=\"n\">f1</span> <span class=\"n\">f2</span>  <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)(</span><span class=\"n\">g1</span> <span class=\"n\">g2</span>  <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"err\">⟶</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n <span class=\"o\">((</span><span class=\"n\">π1</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⨯</span> <span class=\"n\">Z</span> <span class=\"err\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"n\">f1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">π1</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⨯</span> <span class=\"n\">Z</span> <span class=\"err\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span>  <span class=\"err\">≫</span> <span class=\"n\">f2</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n <span class=\"o\">((</span><span class=\"n\">π2</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⨯</span> <span class=\"n\">Z</span> <span class=\"err\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"n\">g1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">π2</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⨯</span> <span class=\"n\">Z</span> <span class=\"err\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span>  <span class=\"err\">≫</span> <span class=\"n\">g2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">f1</span> <span class=\"err\">⊗</span> <span class=\"n\">g1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f2</span> <span class=\"err\">⊗</span> <span class=\"n\">g2</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">certif1</span> <span class=\"n\">certif2</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n    <span class=\"n\">PRODUCT_CAT</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">certif1</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">certif2</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193805652,
        "sender_full_name": "orlando",
        "timestamp": 1586803593
    },
    {
        "content": "<p>i love this Game <span aria-label=\"yum\" class=\"emoji emoji-1f60b\" role=\"img\" title=\"yum\">:yum:</span></p>",
        "id": 193805727,
        "sender_full_name": "orlando",
        "timestamp": 1586803636
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/116395-maths/topic/category/near/193780597\" title=\"#narrow/stream/116395-maths/topic/category/near/193780597\">said</a>:</p>\n<blockquote>\n<p>You might also like to use Scott's <code>slice_lhs</code> or <code>slice_rhs</code> tactics</p>\n</blockquote>\n<p>Do you have an exemple of what the tatic do  ?</p>",
        "id": 193806743,
        "sender_full_name": "orlando",
        "timestamp": 1586804087
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/slice.html#tactic.interactive.slice_lhs\" title=\"https://leanprover-community.github.io/mathlib_docs/tactic/slice.html#tactic.interactive.slice_lhs\">https://leanprover-community.github.io/mathlib_docs/tactic/slice.html#tactic.interactive.slice_lhs</a></p>",
        "id": 193852541,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586843249
    },
    {
        "content": "<p>(They've been observed to have some bugs: please report them if you find some!)</p>",
        "id": 193852548,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586843265
    },
    {
        "content": "<p>Essentially, <code>slice_lhs 2 4 { ... }</code> will reassociate as necessary, and show you just the 2nd, 3rd, and 4th morphisms in a long composite. You can then rewrite or simplifying just those, and when you exit the <code>{ ... }</code> it will put everything back together again.</p>",
        "id": 193852603,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586843313
    },
    {
        "content": "<p>This, in combination with the <code>@[reassoc]</code> tags on all your simp lemmas, takes away a fair chunk of the pain of working with associativity in categories.</p>",
        "id": 193852622,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586843356
    },
    {
        "content": "<p>I didn't know those existed – we should add them to the main tactic docs and <code>tactic.default</code>.</p>",
        "id": 193852839,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586843650
    },
    {
        "content": "<p>Ideally they would work with any associative structure, not just a category! :-) But they don't.</p>",
        "id": 193853818,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586844887
    },
    {
        "content": "<p>Hello <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  : <br>\nI see the lemma like <code> prod.lift_fst </code> are in the library, thx <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n<p>A question :  is it normal that you force to mention the category for the product ? </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span>  <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span> <span class=\"n\">f</span> <span class=\"bp\">|</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"n\">π1</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>  <span class=\"o\">:=</span>  <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift_fst</span> <span class=\"n\">C</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n</pre></div>\n\n\n<p>I can't just write <code> prod.lift_fst f g </code>  : if i understand <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span></span></span></span> know <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span> know <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span></span></span></span> so it's ok for implicit parameter ?</p>",
        "id": 193996336,
        "sender_full_name": "orlando",
        "timestamp": 1586937875
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/commit/ff4122249759c72222db47ae529d68eac1017089\" title=\"https://github.com/leanprover-community/mathlib/commit/ff4122249759c72222db47ae529d68eac1017089\">I have already fixed this</a> and it will probably land in mathlib soon.</p>",
        "id": 193996973,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1586938268
    },
    {
        "content": "<p>Sorry orlando, that was probably my fault. I made the PR when we were talking about this the other day</p>",
        "id": 193997237,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586938419
    },
    {
        "content": "<p>Kevin it's cool because I'm starting to understand a little bit about how lean works <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 193997587,
        "sender_full_name": "orlando",
        "timestamp": 1586938635
    },
    {
        "content": "<p>Scott : The slice tatics is verrrrrrry cooooooool   <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 193997675,
        "sender_full_name": "orlando",
        "timestamp": 1586938688
    }
]