[
    {
        "content": "<p>I'm trying to define a dependent type inductively, but I'm running into some universe issues.<br>\nHere is a minimal example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">bar</span> <span class=\"n\">n</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">universe level of type_of(arg #3) of &#39;bar.const&#39; is too big for the corresponding inductive datatype</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n\n\n<p>Is there another way to accomplish this?</p>",
        "id": 203408910,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1594312407
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">bar</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 203416968,
        "sender_full_name": "Chris B",
        "timestamp": 1594316569
    },
    {
        "content": "<p>Why does one work and not the other?</p>",
        "id": 203417323,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1594316769
    },
    {
        "content": "<p><code>def foo := nat -&gt; Type u</code> is a term with a value of <code>nat -&gt; Type u</code>, so the type is something quantifying over <code>Type u</code>, therefore it needs to be greater than <code>Type u</code>. When you put <code>(L : nat -&gt; Type u)</code> as a type parameter, you're saying \"an element IN <code>nat -&gt; Type u</code>\".</p>\n<p>I think the short answer that gets to what you probably meant to do is that <code>def foo := nat -&gt; Type u</code> is not a type alias.</p>",
        "id": 203418036,
        "sender_full_name": "Chris B",
        "timestamp": 1594317177
    },
    {
        "content": "<p>The issue is really that the <code>u</code> is not the same. <code>inductive bar (L : foo.{u})</code> works.</p>",
        "id": 203420563,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594318521
    },
    {
        "content": "<p>Ah! That makes more sense. Thank you!</p>",
        "id": 203420612,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1594318561
    },
    {
        "content": "<p>So if I understand correctly it wasn't a type alias vs. def issue, but rather that when we write <code>bar (L : ℕ → Type u) : ℕ → Type u</code> the <code>u</code> is defined to be the same, so that's why <code>inductive bar (L : foo.{u})</code> works (since we're explicitly setting the universe for foo to be <code>u</code>). Is that right?</p>",
        "id": 203421127,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1594318859
    },
    {
        "content": "<p>I think lean could try to be smarter here. But I guess it's not very high priority on the list of things that can be improved.</p>",
        "id": 203421563,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594319090
    },
    {
        "content": "<p>It also \"works\" (with a different meaning) with <code>foo.{0}</code> so I don't think it really makes sense to guess</p>",
        "id": 203422056,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594319350
    },
    {
        "content": "<p>Oh, good point.</p>",
        "id": 203422222,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594319416
    },
    {
        "content": "<p>Presumably lean could still figure out that a contraint that the  universe of foo needs to be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">\\leq u</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">u</span></span></span></span> (I know this doesn't really make sense in lean though).</p>",
        "id": 203422433,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1594319538
    }
]