[
    {
        "content": "<p>I am afraid I am still not 100% certain of how to port a file like <code>subring.lean</code> to Lean 4 manually. The mathematically elegant definition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">subring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">subsemiring</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">add_subgroup</span> <span class=\"n\">R</span>\n<span class=\"c1\">-- that's it</span>\n</code></pre></div>\n<p>is, to my understanding, going to be replaced in Lean 4 either by</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">subring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">subsemiring</span> <span class=\"n\">R</span>\n<span class=\"c1\">-- list all axioms of an add_subgroup which aren't mentioned in subsemiring</span>\n</code></pre></div>\n<p>or by</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">subring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">add_subgroup</span> <span class=\"n\">R</span>\n<span class=\"c1\">--- list all axioms of a subsemiring which aren't mentioned in add_subgroup</span>\n</code></pre></div>\n<p>or perhaps by something even more complex coming from a \"spanning tree in the algebra hierarchy\" which lots of people seem to understand but which I still don't? <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> you're good at communicating with me, can you explain to me what's going on?</p>",
        "id": 244409581,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625053083
    },
    {
        "content": "<p>The choice between your two options is only really one of performance / elaborator happiness (how likely you are to have to insert type ascriptions), as far as I know</p>",
        "id": 244409733,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625053193
    },
    {
        "content": "<p>I just want someone to tell me the answer</p>",
        "id": 244409889,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625053298
    },
    {
        "content": "<p>The easy answer is just to always pick the first base class, since the choice doesn't really matter for the sake of experimental porting. If you write a bunch of theory one way, you can then swap the definition and see if anything breaks.</p>",
        "id": 244410051,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625053420
    },
    {
        "content": "<p>More precisely I would like someone to suggest Lean 4 definitions of <code>subsemiring</code>, <code>subring</code>, <code>add_subgroup</code>, <code>submonoid</code> and whatever else the CS people need. <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> and I played this game for rings already, and the results are in the mathlib4 sandbox (in master). Do you have an opinion on this Sebastien?</p>",
        "id": 244410144,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625053465
    },
    {
        "content": "<p>Intuitively, I would guess that the definition of <code>sub_X</code> closely follows the definition of <code>X</code>. So if <code>ring</code> extends <code>semiring</code>, then copy that choice, but if <code>ring</code> extends <code>add_group</code>, then follow that path.</p>",
        "id": 244410622,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625053810
    },
    {
        "content": "<p>Right but my understanding is that Eric is proposing that <code>subring</code> just be almost syntax sugar for <code>is_subring</code>, ditching the structure choice completely and preserving dot notation, is my understanding of it.</p>",
        "id": 244411199,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625054254
    },
    {
        "content": "<p>we do it all in the subtype monad</p>",
        "id": 244411358,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625054356
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/topic/busywork/near/244409897\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/busywork/near/244409897</a></p>",
        "id": 244411466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625054409
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/the.20future.20of.20.60subring.60/near/244411199\">said</a>:</p>\n<blockquote>\n<p>Right but my understanding is that Eric is proposing that <code>subring</code> just be almost syntax sugar for <code>is_subring</code>, ditching the structure choice completely and preserving dot notation, is my understanding of it.</p>\n</blockquote>\n<p>Then apply my remark to <code>is_sub_X</code> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 244411604,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625054494
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> in Lean 3 right now we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">is_subring</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">is_add_subgroup</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">is_submonoid</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"bp\">.</span>\n</code></pre></div>\n<p>This doesn't seem to be an old structure command? Would you envisage this structure being defined in a similar way in Lean 4?</p>",
        "id": 244411951,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625054692
    },
    {
        "content": "<p>Aah -- these really seem to be disjoint</p>",
        "id": 244412074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625054758
    },
    {
        "content": "<p>Aah, <code>is_sub_X</code> is a prop, so diamonds are not an issue. I agree that using subtype is nice. It allows us to draw a very clear distinction between the data and the props.</p>",
        "id": 244412125,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625054766
    },
    {
        "content": "<p>Hmm, diamonds would still be annoying. In the sense that you would have to prove things twice.</p>",
        "id": 244412181,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625054801
    },
    {
        "content": "<p>So yes, the actual reason is that they are disjoint.</p>",
        "id": 244412220,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625054823
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/the.20future.20of.20.60subring.60/near/244410622\">said</a>:</p>\n<blockquote>\n<p>Intuitively, I would guess that the definition of <code>sub_X</code> closely follows the definition of <code>X</code>. So if <code>ring</code> extends <code>semiring</code>, then copy that choice, but if <code>ring</code> extends <code>add_group</code>, then follow that path.</p>\n</blockquote>\n<p>Should we then be surprised that currently in Lean 3 <code>is_subring R extends is_add_subgroup R, is_submonoid R</code> but <code>subring R</code> extends <code>subsemiring R</code> and <code>add_subgroup R</code>?</p>",
        "id": 244412401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625054906
    },
    {
        "content": "<p>Yes, that does seem slightly inconsistent.</p>",
        "id": 244412474,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625054949
    },
    {
        "content": "<p>as opposed to 0=1 inconsistent?</p>",
        "id": 244412498,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625054962
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/the.20future.20of.20.60subring.60/near/244412181\">said</a>:</p>\n<blockquote>\n<p>Hmm, diamonds would still be annoying. In the sense that you would have to prove things twice.</p>\n</blockquote>\n<p>What type of thing are you thinking of?</p>",
        "id": 244412592,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625055004
    },
    {
        "content": "<p>If <code>is_subring</code> extended <code>is_subsemiring</code> and <code>is_add_subgroup</code> then you make something a subring from a submonoid add_subgroup by first making it a subsemiring.</p>",
        "id": 244412725,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625055097
    },
    {
        "content": "<p>but do we really care? Can't we just prove is_submonoid + is_add_subgroup implies is_subring  and who cares about the definition?</p>",
        "id": 244412865,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625055158
    },
    {
        "content": "<p>What's wrong with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_subring</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">is_add_subgroup</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">is_submonoid</span> <span class=\"n\">S</span>\n</code></pre></div>\n<p>? Why are we using structures?</p>",
        "id": 244412994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625055240
    },
    {
        "content": "<blockquote>\n<p>Why are we using structures?</p>\n</blockquote>\n<p>because it's nice to be able to write <code>h.add_mem</code> given <code>h : is_subring S</code> instead of  <code>h.1.add_mem</code></p>",
        "id": 244413240,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625055345
    },
    {
        "content": "<p>With new style structures, lean translates <code>h.add_mem</code> (as notation!) to <code>h.to_is_add_subgroup.to_is_add_submonoid.add_mem</code> automatically, without making the user write any boilerplate</p>",
        "id": 244413361,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625055401
    },
    {
        "content": "<p>At least, in lean 3 it does, anyway:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">bar</span> <span class=\"kd\">extends</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">baz</span> <span class=\"kd\">extends</span> <span class=\"n\">bar</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">baz</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b.x</span> <span class=\"bp\">=</span> <span class=\"n\">b.x</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span> <span class=\"c1\">-- goal state says `b.to_bar.to_foo.x = b.to_bar.to_foo.x`</span>\n</code></pre></div>",
        "id": 244413498,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625055474
    },
    {
        "content": "<p>Perhaps a better argument for structures is that it's nice to be able to write <code>{add_mem := ..., mul_mem := ...}</code> and not have to remember the order of the conjunction</p>",
        "id": 244413693,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625055574
    },
    {
        "content": "<p>I guess <code>and</code> is a structure, but the problem is that it would have to represent too many things</p>",
        "id": 244414778,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625056119
    },
    {
        "content": "<p>you are somehow saying that inductive props are better than logical props because they store data in a more flexible way</p>",
        "id": 244414851,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625056160
    },
    {
        "content": "<p>Yes, although I'm also trying to make the reverse claim for data, which is perhaps inconsistent...</p>",
        "id": 244426931,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625061364
    }
]