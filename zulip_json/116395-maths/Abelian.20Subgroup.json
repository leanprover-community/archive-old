[
    {
        "content": "<p>In mathlib, what's the best way to say \"H is an abelian subgroup of G\"? I don't think that <code>{G : Type*} [group G] {H : subgroup G} [comm_group H]</code> works, since the <code>comm_group H</code> instance won't match the <code>group H</code> instance.</p>",
        "id": 242371758,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1623429941
    },
    {
        "content": "<p>You may have to write out the commutativity condition, unfortunately</p>",
        "id": 242372228,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623430154
    },
    {
        "content": "<p>I do want a <code>comm_group H</code> instance eventually, so would I then have to manually produce it?</p>",
        "id": 242372515,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1623430274
    },
    {
        "content": "<p>I guess we need a predicate <code>subgroup.is_comm</code> (maybe a <code>def</code>, maybe a <code>class</code>). And then we can have a <code>def/instance</code> of <code>comm_group H</code> under that assumption.</p>",
        "id": 242372679,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623430354
    },
    {
        "content": "<p>Commutativity should probably just be a mixin anyway</p>",
        "id": 242373353,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623430674
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subgroup.normal\">docs#subgroup.normal</a> mean commutative?</p>",
        "id": 242375116,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623431450
    },
    {
        "content": "<p>Nope</p>",
        "id": 242375178,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623431491
    },
    {
        "content": "<p>Every subgroup of a commutative group is normal, but not every normal subgroup is commutative.</p>",
        "id": 242375202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623431510
    },
    {
        "content": "<p>Example: A_n is a normal subgroup of S_n since it is the kernel of the sign map S_n -&gt; Z/2 that maps a permutation to it's sign. But for n &gt; 3, the subgroup A_n is not commutative.</p>",
        "id": 242375340,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623431569
    },
    {
        "content": "<p>You could probably add a new <code>instance [group G] (S : subgroup G) [h : is_commutative S (*)] : comm_group S := { mul_comm := h.comm, ..S.to_group }</code> instance</p>",
        "id": 242375892,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623431844
    },
    {
        "content": "<p>Then your lemma would assume <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_commutative\">docs#is_commutative</a> instead of <code>comm_group S</code>.</p>",
        "id": 242375928,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623431867
    },
    {
        "content": "<p>Which could be a special case of a <code>def [group G] [is_commutative G (*)] : comm_group G :=</code></p>",
        "id": 242376146,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623431979
    },
    {
        "content": "<p>But that one shouldn't be an instance because of loops. For <code>S : subgroup G</code> it's not a problem.</p>",
        "id": 242376255,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623432010
    },
    {
        "content": "<p>I'm not sure the def is useful since it's basically just one line to implement, and you have to remember to make it reducible if it's a def</p>",
        "id": 242376421,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623432099
    },
    {
        "content": "<p>Actually any group is normal to itself, but clearly not all groups are abelian.</p>",
        "id": 242397983,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1623442829
    },
    {
        "content": "<p>ooh lol, that's a lot simpler</p>",
        "id": 242398022,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623442863
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Abelian.20Subgroup/near/242375892\">said</a>:</p>\n<blockquote>\n<p>You could probably add a new <code>instance [group G] (S : subgroup G) [h : is_commutative S (*)] : comm_group S := { mul_comm := h.comm, ..S.to_group }</code> instance</p>\n</blockquote>\n<p>This forms a loop, don't do this!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- deep recursion was detected at 'expression equality test'</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">comm_group</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 243447876,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624312158
    }
]