[
    {
        "content": "<p>If I have a constructive proof of a <code>∃!</code>, can I extract a witness and use it to define a function? It seems that the answer is no, since it's in Prop, and you can't eliminate out of Prop.  Is there a constructive variant of <code>∃!</code>, then?</p>",
        "id": 274123924,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646398667
    },
    {
        "content": "<p>No, once something is in <code>Prop</code> you can't get it back out into <code>Type</code> (unless the codomain is a (syntactic) subsingleton, in which case there is not much to get out anyway). A good constructive equivalent for <code>∃!</code> might be <code>unique { x // p x }</code>, like <code>subtype</code> is the equivalent of <code>∃</code>.</p>",
        "id": 274124288,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1646398811
    },
    {
        "content": "<p>I assume the context of this is <a href=\"https://github.com/leanprover-community/mathlib/pull/12443\">#12443</a>, where I suggested that instead of <code>∃! (S : finset ℕ), is_zeckendorf_rep S ∧ S.sum fib = n</code> you define something like <code>ℕ ≃ {f : finset ℕ // is_zeckendorf_rep f}</code> where the forward direction of the equiv is <code>finset.sum S fib</code> (or at least, I suggested <a href=\"https://github.com/leanprover-community/mathlib/pull/12443/files#r819425071\">something analogous</a>)</p>",
        "id": 274124633,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646398905
    },
    {
        "content": "<p>yeah, though <code>ℕ ≃ {f : finset ℕ // is_zeckendorf_rep f}</code> doesn't really look induction-friendly</p>",
        "id": 274125434,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646399314
    },
    {
        "content": "<p>If we want to make it computable, though, we might as well make it efficient, though. Does Lean support code extraction, BTW? That's where algorithmic complexity of  such a construction would be most important, I think</p>",
        "id": 274125858,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646399540
    },
    {
        "content": "<p>Lean4 transpiles to C code, lean3 only \"extracts\" code to the VM. There are advantages to constructive approaches even if the construction isn't efficient, as often they make things easier to prove</p>",
        "id": 274126111,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646399673
    },
    {
        "content": "<p>For instance, it likely makes it easier to prove that the largest fibonacci number smaller than <code>n</code> is in the set, as its likely true by definition</p>",
        "id": 274126199,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646399727
    },
    {
        "content": "<p>well you don't need to prove that for the solution you pick, you need to prove it for an arbitrary solution to prove uniqueness</p>",
        "id": 274126370,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646399808
    },
    {
        "content": "<p>You get uniqueness for free by proving <code>zeckendorf_rep (l.map fib).sum = l</code> and <code>((zeckendorf_rep n).map fib).sum = n</code>, although perhaps the fist is harder to prove than proving uniqueness first (the second is easy)</p>",
        "id": 274128022,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646400613
    }
]