[
    {
        "content": "<p>Since everybody is doing universal properties and fight reluctant universes and type class inference, let me try to get help. Remember I'm working with Hausdorff completions of uniform space. I have a nice proof of their universal properties and I'd like to run the usual stuff on it. Especially today I need uniqueness for this construction. So I forget about my explicit construction and try to run abstract arguments. See <a href=\"https://gist.github.com/PatrickMassot/beb3b40bec8888b3061d9c410c229467\" target=\"_blank\" title=\"https://gist.github.com/PatrickMassot/beb3b40bec8888b3061d9c410c229467\">https://gist.github.com/PatrickMassot/beb3b40bec8888b3061d9c410c229467</a> First trouble: I had to setup explicit universe level in order to get Lean to accept <code>compare</code>. Then the instances buried in the structure are hard to get out. I guess I'm on a completely wrong track here.</p>",
        "id": 129954498,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532032189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I'm afraid you were busy typing some advertisement when that thread started (and stopped).</p>",
        "id": 129955775,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532033507
    },
    {
        "content": "<p>Do you have any hint for me?</p>",
        "id": 129955820,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532033525
    },
    {
        "content": "<p>What explicit universe?</p>",
        "id": 129956129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532033852
    },
    {
        "content": "<p>u</p>",
        "id": 129956140,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532033861
    },
    {
        "content": "<p>Oh yes that is true</p>",
        "id": 129956197,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532033884
    },
    {
        "content": "<p>If I put <code>Type*</code> everywhere you see <code>Type u</code> I can shadowing errors</p>",
        "id": 129956205,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532033889
    },
    {
        "content": "<p>Same if I try <code>Type v</code> for all beta variables</p>",
        "id": 129956216,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532033904
    },
    {
        "content": "<p>That's the same thing I was talking about with Kevin</p>",
        "id": 129956224,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532033912
    },
    {
        "content": "<p>the <code>u</code> in <code>space : Type u</code> is an internal universe variable</p>",
        "id": 129956242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532033932
    },
    {
        "content": "<p>so if you make it <code>v</code> instead then you will have a bad day</p>",
        "id": 129956258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532033948
    },
    {
        "content": "<p>so that means you have to explicitly make them the same, which means you need to name the variable</p>",
        "id": 129956295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532033982
    },
    {
        "content": "<p>same as who?</p>",
        "id": 129956363,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532034014
    },
    {
        "content": "<p>same as <code>α : Type u</code></p>",
        "id": 129956389,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532034029
    },
    {
        "content": "<p>I'm having a bad day even with named u</p>",
        "id": 129956393,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532034032
    },
    {
        "content": "<p>At least I don't see <code>.{u}</code> anywhere in your file</p>",
        "id": 129956414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532034062
    },
    {
        "content": "<p>I get an error in <code>uniform_continuous_compare</code>?</p>",
        "id": 129956427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532034071
    },
    {
        "content": "<p>I'm fine with α and its completion living in the same universe. That sounds nice and is actually true for my explicit construction (I think)</p>",
        "id": 129956433,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532034078
    },
    {
        "content": "<p>about synthesized instance different from inferred</p>",
        "id": 129956443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532034092
    },
    {
        "content": "<p>exactly, that's the heart of my question</p>",
        "id": 129956453,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532034106
    },
    {
        "content": "<p>But why beta has to be in the same universe?</p>",
        "id": 129956514,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532034134
    },
    {
        "content": "<p>That's easy enough to fix, use <code>letI</code> instead of  <code>haveI</code></p>",
        "id": 129956515,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532034135
    },
    {
        "content": "<p>Better yet, add this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span>\n  <span class=\"n\">completion_package</span><span class=\"bp\">.</span><span class=\"n\">uniform_structure</span>\n  <span class=\"n\">completion_package</span><span class=\"bp\">.</span><span class=\"n\">completeness</span>\n  <span class=\"n\">completion_package</span><span class=\"bp\">.</span><span class=\"n\">separation</span>\n</pre></div>\n\n\n<p>and it won't be necessary</p>",
        "id": 129956544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532034166
    },
    {
        "content": "<p>beta is also an internal universe variable</p>",
        "id": 129956587,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532034213
    },
    {
        "content": "<p>I'm sure I've seen this trick in the sheaf discussion, but I forgot. Thanks a lot</p>",
        "id": 129956661,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532034267
    },
    {
        "content": "<p>it doesn't <em>have</em> to be in the sense that you can define it with a different variable, but this will make your life harder and furthermore it doesn't mean what you think it means</p>",
        "id": 129956668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532034274
    },
    {
        "content": "<p>It is impossible to define a field which quantifies over multiple universe levels</p>",
        "id": 129956712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532034312
    },
    {
        "content": "<p>I was worried I would have a lot of trouble with these instances but this trick seems to fix everything (including removing <code>@uniform_continuous</code> ugliness in the definition of <code>compare</code>)</p>",
        "id": 129956728,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532034329
    },
    {
        "content": "<p>that is, something like this doesn't work: <code>(lift : ∀ {u} {β : Type u} (f : α → β), space → β)</code></p>",
        "id": 129956744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532034345
    },
    {
        "content": "<p>where <code>u</code> is somehow quantified inside the structure</p>",
        "id": 129956756,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532034361
    },
    {
        "content": "<p>What do you think I thought it meant and what would it actually mean? (Grammar clearly tell us we are in the middle of a tricky discussion involving multiple universes)</p>",
        "id": 129956821,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532034388
    },
    {
        "content": "<p>Oh, <code>(lift : ∀ {u} {β : Type u} (f : α → β), space → β)</code> is what I would have liked to mean</p>",
        "id": 129956836,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532034413
    },
    {
        "content": "<p>But I don't mind, really</p>",
        "id": 129956846,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532034422
    },
    {
        "content": "<p>Luckily, in the vast majority of cases, having a lift in universe u implies a lift in higher universes too</p>",
        "id": 129956877,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532034454
    },
    {
        "content": "<p>usually this is due to some zfc style size considerations</p>",
        "id": 129956890,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532034473
    },
    {
        "content": "<p>I certainly don't want to run into zfc size considerations. Actually I mostly want to prove that the completion of a product is nicely isomorphic to the product of the completions, taking the opportunity to try abstract non-sense in Lean</p>",
        "id": 129957005,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532034554
    },
    {
        "content": "<p>I think you should just stick to universe u</p>",
        "id": 129957143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532034675
    },
    {
        "content": "<p>it's not quite as strong a theorem as you could state, but all the constructions will go through without any added headache</p>",
        "id": 129957223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532034736
    },
    {
        "content": "<p>Great, I like that</p>",
        "id": 129957318,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532034842
    },
    {
        "content": "<p>I'll try to move on. Thanks!</p>",
        "id": 129957364,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532034896
    }
]