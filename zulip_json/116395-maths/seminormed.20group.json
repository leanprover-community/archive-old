[
    {
        "content": "<p>I recently introduced in mathlib <code>pseudo_emetric_space</code> and <code>pseudo_metric_space</code>, with the basic API (essentially I kept what worked out of the box for metric spaces). The next step we need for the LTE is <code>semi_normed_group</code>  and I started working on it. (I know, pseudometric but seminormed... this seems the standard terminology).</p>\n<p>The natural definition is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">semi_normed_group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_norm</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">pseudo_metric_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">dist_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">norm</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Just replace <code>metric_space</code> with <code>pseudo_metric_space</code> in the current definition. But how to define <code>normed_group</code>? One possibility is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">normed_group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">semi_normed_group</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">norm_eq_zero_if</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and then putting an instance of a <code>metric_space</code> on a <code>normed_group</code>. I started with this approach but then I realized I had to modify by hand several construction about <code>normed_group</code>. For example for subgroups we currently have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">add_subgroup.normed_group</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">add_subgroup</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">normed_group</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">norm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">norm</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">),</span>\n  <span class=\"n\">dist_eq</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">dist_eq_norm</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>and it becomes something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">add_subgroup.normed_group</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">add_subgroup</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">normed_group</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">norm_eq_zero_if</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">coe_norm_subgroup</span><span class=\"o\">,</span> <span class=\"n\">norm_eq_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">subtype.eq</span> <span class=\"n\">h</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">add_subgroup.semi_normed_group</span> <span class=\"n\">s</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>The proof is not hard, but is really different (because we are not proving the same thing...). If I have to do this for the bunch of proof in <code>analysis/normed_space/basic</code> no problem, but I am wondering if this is the good approach.</p>",
        "id": 230753439,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1616009709
    },
    {
        "content": "<p>I am asking  because for <code>pseudo_metric</code> this didn't happen, the definition of a metric space is clearly a pseudometric space such that <code>d(x,y)=  0 → x = y</code>, and this becomes literally the previous definition</p>",
        "id": 230753700,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1616009847
    },
    {
        "content": "<p>Does it work to say,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">normed_group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">semi_normed_group</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">metric_space</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 230754450,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1616010198
    },
    {
        "content": "<p>I ask because this is how linear maps (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map\">docs#linear_map</a>) are done, just combining several existing structures with no new fields:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">linear_map</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M₂</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">add_hom</span> <span class=\"n\">M</span> <span class=\"n\">M₂</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₂</span>\n</code></pre></div>",
        "id": 230754531,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1616010230
    },
    {
        "content": "<p>I would hope that Heather's suggestion works.</p>",
        "id": 230754675,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616010300
    },
    {
        "content": "<p>You will need <code>set_option old_structure_cmd true</code> for that.</p>",
        "id": 230754696,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616010312
    },
    {
        "content": "<p>It says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"bp\">'</span><span class=\"kd\">structure</span><span class=\"bp\">'</span> <span class=\"n\">header</span><span class=\"o\">,</span> <span class=\"n\">field</span> <span class=\"bp\">'</span><span class=\"n\">to_pseudo_metric_space'</span> <span class=\"k\">from</span> <span class=\"bp\">'</span><span class=\"n\">metric_space'</span> <span class=\"n\">has</span> <span class=\"n\">already</span> <span class=\"n\">been</span> <span class=\"n\">declared</span>\n</code></pre></div>",
        "id": 230754748,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1616010338
    },
    {
        "content": "<p>that's exactly why you need to put that set_option thing before you try it</p>",
        "id": 230754832,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616010363
    },
    {
        "content": "<p>Ops, I answered before seeing Johan's answer</p>",
        "id": 230754904,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1616010398
    },
    {
        "content": "<p>But it only works if <code>semi_normed_group</code> is also an old structure</p>",
        "id": 230754910,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616010403
    },
    {
        "content": "<p>and some of these things aren't, and my instinctive fix (just make them old structures) is...a bad idea? Or just something we can fix with automation when we all finally move to the new structure command?</p>",
        "id": 230755009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616010463
    },
    {
        "content": "<p>The definition gives no error, but the first result for <code>normed_group</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Construct a normed group from a translation invariant distance -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">normed_group.of_add_dist</span> <span class=\"o\">[</span><span class=\"n\">has_norm</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">normed_group</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">dist_eq</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">add_right_neg</span> <span class=\"n\">y</span><span class=\"o\">],</span> <span class=\"n\">apply</span> <span class=\"n\">H2</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">H2</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">sub_add_cancel</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span> <span class=\"o\">}</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>and Lean says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"kd\">structure</span> <span class=\"n\">value</span> <span class=\"o\">{</span><span class=\"bp\">...</span><span class=\"o\">},</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">known</span><span class=\"o\">,</span> <span class=\"n\">but</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"kd\">structure</span>\n  <span class=\"n\">normed_group</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 230755467,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1616010668
    },
    {
        "content": "<p>I don't know if this is possible, but I am trying to minimize the amount of code to be rewritten (and no problem if it is quite a lot, I just want to be sure I am doing this in the correct way)</p>",
        "id": 230755720,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1616010799
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> what does <code>#print normed_group</code> look like? Before and after your change.</p>",
        "id": 230755841,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616010846
    },
    {
        "content": "<p>Ideally, it would look the same (up to permutation of the fields)</p>",
        "id": 230755875,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616010863
    },
    {
        "content": "<p>In current mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[class]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">normed_group</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_5</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u_5</span>\n<span class=\"n\">fields</span><span class=\"o\">:</span>\n<span class=\"n\">normed_group.to_has_norm</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_5</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">normed_group</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">has_norm</span> <span class=\"n\">α</span>\n<span class=\"n\">normed_group.to_add_comm_group</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_5</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">normed_group</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">α</span>\n<span class=\"n\">normed_group.to_metric_space</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_5</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">normed_group</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">metric_space</span> <span class=\"n\">α</span>\n<span class=\"n\">normed_group.dist_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_5</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">normed_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"bp\">∥</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"bp\">∥</span>\n</code></pre></div>",
        "id": 230756037,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1616010952
    },
    {
        "content": "<p>You can also keep the current mathlib definition, and register by hand an instance from <code>normed_group</code> to <code>semi_normed_group</code>.</p>",
        "id": 230756191,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1616011021
    },
    {
        "content": "<p>Using  Heather's idea</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">normed_group</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_5</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u_5</span>\n<span class=\"n\">constructors</span><span class=\"o\">:</span>\n<span class=\"n\">normed_group.mk</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_5</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_to_has_norm</span> <span class=\"o\">:</span> <span class=\"n\">has_norm</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_to_add_comm_group</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">_to_pseudo_metric_space</span> <span class=\"o\">:</span> <span class=\"n\">pseudo_metric_space</span> <span class=\"n\">α</span><span class=\"o\">],</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"bp\">∥</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"bp\">∥</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">normed_group</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 230756252,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1616011057
    },
    {
        "content": "<p>Hmm... not at all the same thing</p>",
        "id": 230756270,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1616011066
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> is seminormed group, I allow the norm to vanish on a nonzero element (but the algebraic structure is still a group)</p>",
        "id": 230756400,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1616011111
    },
    {
        "content": "<p>Yes, so a normed group is in particular a seminormed_group, so there is an instance in this direction.</p>",
        "id": 230756480,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1616011151
    },
    {
        "content": "<p>It can be automatic if <code>normed_group</code> is defined by extending <code>semi_normed_group</code>, or registered manually otherwise.</p>",
        "id": 230756594,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1616011202
    },
    {
        "content": "<p>Probably that is the best thing to do</p>",
        "id": 230756680,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616011219
    },
    {
        "content": "<p>Yes, this what I did at the beginning</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">normed_group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">semi_normed_group</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">norm_eq_zero_if</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 230756707,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1616011231
    },
    {
        "content": "<p>No, that's not what Sebastien means</p>",
        "id": 230756761,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616011246
    },
    {
        "content": "<p>He means that you don't change the definition at all.</p>",
        "id": 230756796,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616011256
    },
    {
        "content": "<p>Ah, I see!</p>",
        "id": 230756852,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1616011277
    },
    {
        "content": "<p>But directly after it, you write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">semi_normed_group</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 230756866,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616011284
    },
    {
        "content": "<p>OK, I have to see if this really works with all the various result, but it seems what I was looking for</p>",
        "id": 230757494,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1616011512
    },
    {
        "content": "<p>It seems to work better! But I think I am missing something regarding the product. Currently I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- seminormed group instance on the product of two seminormed groups, using the sup norm. -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">prod.semi_normed_group</span> <span class=\"o\">:</span> <span class=\"n\">semi_normed_group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">norm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"bp\">∥</span><span class=\"n\">x.1</span><span class=\"bp\">∥</span> <span class=\"bp\">∥</span><span class=\"n\">x.2</span><span class=\"bp\">∥</span><span class=\"o\">,</span>\n  <span class=\"n\">dist_eq</span> <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">),</span>\n    <span class=\"k\">show</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">x.1</span> <span class=\"n\">y.1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">x.2</span> <span class=\"n\">y.2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">∥</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">∥</span> <span class=\"bp\">∥</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">∥</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dist_eq_norm</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">prod.norm_def</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">∥</span><span class=\"n\">x.1</span><span class=\"bp\">∥</span> <span class=\"bp\">∥</span><span class=\"n\">x.2</span><span class=\"bp\">∥</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">prod.nnnorm_def</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nnnorm</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">nnnorm</span> <span class=\"n\">x.1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nnnorm</span> <span class=\"n\">x.2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">x.norm_def</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">coe_nnnorm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">this</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">norm_fst_le</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∥</span><span class=\"n\">x.1</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"o\">:=</span>\n<span class=\"n\">le_max_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">norm_snd_le</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∥</span><span class=\"n\">x.2</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"o\">:=</span>\n<span class=\"n\">le_max_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">norm_prod_le_iff</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"bp\">∥</span><span class=\"n\">x.1</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"bp\">∥</span><span class=\"n\">x.2</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"n\">max_le_iff</span>\n</code></pre></div>\n<p>for the product of <code>semi_normed_group</code> and then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- normed group instance on the product of two normed groups, using the sup norm. -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">prod.normed_group</span> <span class=\"o\">:</span> <span class=\"n\">normed_group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">norm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"bp\">∥</span><span class=\"n\">x.1</span><span class=\"bp\">∥</span> <span class=\"bp\">∥</span><span class=\"n\">x.2</span><span class=\"bp\">∥</span><span class=\"o\">,</span>\n  <span class=\"n\">dist_eq</span> <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">),</span>\n    <span class=\"k\">show</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">x.1</span> <span class=\"n\">y.1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">x.2</span> <span class=\"n\">y.2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">∥</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">∥</span> <span class=\"bp\">∥</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">∥</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dist_eq_norm</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>for the product of  <code>normed_group</code>. So for example on the product of two normed group there are now two instances of seminormed group (coming from the normed groups product and from the product of the induced semigroups)... is this a problem?</p>\n<p>I tried to compile and I have small but strange errors, for example in <code>analysis/normed_space/add_torsor.lean</code> now</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">uniform_continuous_vadd</span> <span class=\"o\">:</span> <span class=\"n\">uniform_continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">x.1</span> <span class=\"bp\">+ᵥ</span> <span class=\"n\">x.2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">lipschitz_with.prod_fst.vadd</span> <span class=\"n\">lipschitz_with.prod_snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">uniform_continuous</span>\n</code></pre></div>\n<p>doesn't work, it says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">lipschitz_with.prod_fst.vadd</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">lipschitz_with.prod_fst</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">lipschitz_with</span> <span class=\"mi\">1</span> <span class=\"n\">prod.fst</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">lipschitz_with</span> <span class=\"bp\">?</span><span class=\"n\">m_5</span> <span class=\"bp\">?</span><span class=\"n\">m_6</span>\n</code></pre></div>\n<p>But </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">uniform_continuous_vadd</span> <span class=\"o\">:</span> <span class=\"n\">uniform_continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">x.1</span> <span class=\"bp\">+ᵥ</span> <span class=\"n\">x.2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">((</span><span class=\"bp\">@</span><span class=\"n\">lipschitz_with.prod_fst</span> <span class=\"n\">V</span> <span class=\"n\">P</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">vadd</span> <span class=\"n\">lipschitz_with.prod_snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">uniform_continuous</span>\n</code></pre></div>\n<p>works</p>",
        "id": 230773491,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1616018083
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> if the two instances are defeq, it's not a problem</p>",
        "id": 230773898,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616018270
    },
    {
        "content": "<p>You can check this by</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">seminormed_group.prod</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_group.to_seminormed_group_</span><span class=\"o\">)</span> <span class=\"n\">etc</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">normed_group.to_seminormed_group</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">\\</span><span class=\"n\">times</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 230774041,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616018336
    },
    {
        "content": "<p>This works... I have to investigate a little what is going on...</p>",
        "id": 230776746,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1616019017
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6746\">#6746</a>  if someone is insterested</p>",
        "id": 230788371,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1616025236
    },
    {
        "content": "<p>Does someone have an idea why in <a href=\"https://github.com/leanprover-community/mathlib/issues/6746\">#6746</a>  I got some weird problems related to products? In <code>analysis/normed_space/basic</code> I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- seminormed group instance on the product of two seminormed groups, using the sup norm. -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">prod.semi_normed_group</span> <span class=\"o\">:</span> <span class=\"n\">semi_normed_group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">norm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"bp\">∥</span><span class=\"n\">x.1</span><span class=\"bp\">∥</span> <span class=\"bp\">∥</span><span class=\"n\">x.2</span><span class=\"bp\">∥</span><span class=\"o\">,</span>\n  <span class=\"n\">dist_eq</span> <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">),</span>\n    <span class=\"k\">show</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">x.1</span> <span class=\"n\">y.1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">x.2</span> <span class=\"n\">y.2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">∥</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">∥</span> <span class=\"bp\">∥</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">∥</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dist_eq_norm</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- normed group instance on the product of two normed groups, using the sup norm. -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">prod.normed_group</span> <span class=\"o\">:</span> <span class=\"n\">normed_group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"bp\">..</span><span class=\"n\">prod.semi_normed_group</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Everything works in that file, but for example in <code>analysis/calculus/fderiv</code> suddenly</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">has_strict_fderiv_at_fst</span> <span class=\"o\">:</span> <span class=\"n\">has_strict_fderiv_at</span> <span class=\"n\">prod.fst</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>doesn't work anymore, while</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">has_strict_fderiv_at_fst</span> <span class=\"o\">:</span> <span class=\"n\">has_strict_fderiv_at</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>is OK. This is not a big deal, but while working of the continuation of the PR (introducing <code>semi_normed_group_hom</code> and similar things) I see this weird behavior several times, so I think I did something wrong.</p>",
        "id": 231246717,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1616367269
    },
    {
        "content": "<p>The definition of <code>semi_normed_group</code> and of <code>normed_group</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A seminormed group is an additive group endowed with a norm for which `dist x y = ∥x - y∥`</span>\n<span class=\"sd\">defines a pseudometric space structure. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">semi_normed_group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_norm</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">pseudo_metric_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">dist_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">norm</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n\n<span class=\"sd\">/-- A normed group is an additive group endowed with a norm for which `dist x y = ∥x - y∥` defines</span>\n<span class=\"sd\">a metric space structure. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">normed_group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_norm</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">metric_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">dist_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">norm</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n\n<span class=\"sd\">/-- A normed group is a seminormed group. -/</span>\n<span class=\"kd\">@[priority 100]</span> <span class=\"c1\">-- see Note [lower instance priority]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">semi_normed_group_of_normed_group</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">semi_normed_group</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">dist_eq</span> <span class=\"o\">:=</span> <span class=\"n\">normed_group.dist_eq</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 231246825,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1616367384
    },
    {
        "content": "<p>Eh! I just read the <a href=\"https://leanprover-community.github.io/blog/posts/contributions-to-mathlib-from-lte-about-normed-groups/\">blogpost</a> and the first thing I thought is that we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/seminorm\">docs#seminorm</a>. Should we link <a href=\"https://leanprover-community.github.io/mathlib_docs/find/semi_normed_group\">docs#semi_normed_group</a> and <code>seminorm</code> somehow?</p>",
        "id": 260027388,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635873065
    },
    {
        "content": "<p>Probably doesn't hurt. There can also be glue with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/valuation\">docs#valuation</a> I guess?</p>",
        "id": 260028000,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635873367
    },
    {
        "content": "<p>Ah, I didn't know that! Was it already there? <code>normed_group</code> uses <code>has_norm</code>, that has no assumption.</p>",
        "id": 260033562,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635875653
    },
    {
        "content": "<p>Yeah, <span class=\"user-mention silent\" data-user-id=\"132889\">Jean Lo</span> did that back in 2019. To be fair though, this is more of a convex analysis thing.</p>",
        "id": 260034077,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635875869
    },
    {
        "content": "<p>Maybe there's a way to generalize both approaches?</p>",
        "id": 260034323,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635875967
    },
    {
        "content": "<p>Note that I'm adding <em>a lot</em> to <code>analysis.seminorm</code> in <a href=\"https://github.com/leanprover-community/mathlib/issues/9097\">#9097</a></p>",
        "id": 260034380,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635875995
    },
    {
        "content": "<p>I think the main difference is that <code>semi_normed_group</code> is about a group with a fixed seminorm, while <code>seminorm</code> is more to manipulate several seminorms on a given <del>group</del> module.</p>",
        "id": 260034705,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635876122
    },
    {
        "content": "<p>Ah OK, it's not exactly the same. It surely doesn't hurt to link the two notion, but I think that <code>semi_normed_group</code> will not be used a lot.</p>",
        "id": 260036531,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635877032
    }
]