[
    {
        "content": "<p>So I really enjoy taking care to prove results using only precisely the axioms needed for the result to hold, and I've eliminated the need for any axioms in a certain theorem except <code>quot.sound</code>, which seems to come from <code>equiv.surjective</code>. That one in turn is defined as <code>equiv_like.surjective</code>, which is given as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kn\">protected</span> <span class=\"kd\">lemma</span> <span class=\"n\">surjective</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">function.surjective</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">right_inv</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">surjective</span>\n</code></pre></div>\n<p>However, <code>right_inverse.surjective</code> and <code>equiv_like.right_inv</code> both list 'no axioms'  when I call <code>#print axioms</code>, so why does <code>equiv_like.surjective</code> list <code>quot.sound</code>?</p>",
        "id": 286199375,
        "sender_full_name": "Roselyn Baxter",
        "timestamp": 1655293120
    },
    {
        "content": "<p>I would guess it comes from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.equiv_like\">docs#equiv.equiv_like</a></p>",
        "id": 286203168,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655295401
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Appearance.20of.20quot.2Esound.20in.20equiv_like.2Esurjective/near/286203168\">said</a>:</p>\n<blockquote>\n<p>I would guess it comes from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.equiv_like\">docs#equiv.equiv_like</a></p>\n</blockquote>\n<p>Calling <code>#print axioms equiv.equiv_like</code> also list 'no axioms', is that what you meant?</p>",
        "id": 286204198,
        "sender_full_name": "Roselyn Baxter",
        "timestamp": 1655296030
    },
    {
        "content": "<p>Also, <code>quot.sound</code> is present in <code>equiv_like.surjective</code> which should have nothing to do with <code>equiv</code>, right?</p>",
        "id": 286204466,
        "sender_full_name": "Roselyn Baxter",
        "timestamp": 1655296177
    },
    {
        "content": "<p>It wouldn't be so surprising either, because <code>quot.sound</code> is used to prove function extensionality in Lean.</p>",
        "id": 286204641,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655296265
    },
    {
        "content": "<p>I'm not so much surprised that it's there, but I am curious why it's so hard to see when specifically it's invoked.</p>",
        "id": 286204857,
        "sender_full_name": "Roselyn Baxter",
        "timestamp": 1655296371
    },
    {
        "content": "<p>the reason is stupid: in the statement of <code>equiv_like.surjective</code> there is a coercion to functions. This coercion uses the instance <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv_like.to_embedding_like\">docs#equiv_like.to_embedding_like</a>, which uses function extensionality, hence <code>quot.sound</code>.</p>",
        "id": 286205352,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1655296657
    },
    {
        "content": "<p>Ah! Thank you very much :)</p>",
        "id": 286206410,
        "sender_full_name": "Roselyn Baxter",
        "timestamp": 1655297187
    },
    {
        "content": "<p>Guess I'm rewriting my own then haha</p>",
        "id": 286206461,
        "sender_full_name": "Roselyn Baxter",
        "timestamp": 1655297219
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> `equiv.surjective` relies on `quot.sound` because `equiv_like.surjective` coerces the equivalence to</span>\n<span class=\"cm\">a function, which calls `equiv_like.to_embedding_like`, which uses function extensionality to prove</span>\n<span class=\"cm\">injectivity. In other words, entirely unnecessary to prove this lemma. -/</span>\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">equiv.surjective_nofunext</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"n\">e.to_fun</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">e.inv_fun</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">e.right_inv</span> <span class=\"n\">y</span><span class=\"o\">⟩</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">equiv_exists_surj</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">≃</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">surjective</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"n\">surjf</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">e₁.to_fun</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">e₂.inv_fun</span><span class=\"o\">),</span>\n    <span class=\"n\">apply</span> <span class=\"n\">surjective.comp</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">equiv.surjective_nofunext</span> <span class=\"n\">e₁</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">surjective.comp</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">surjf</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">equiv.surjective_nofunext</span> <span class=\"n\">e₂.symm</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">e₁.inv_fun</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">e₂.to_fun</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">surjective.comp</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">equiv.surjective_nofunext</span> <span class=\"n\">e₁.symm</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">surjective.comp</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">surjf</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">equiv.surjective_nofunext</span> <span class=\"n\">e₂</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">equiv_exists_surj</span> <span class=\"c1\">-- no axioms</span>\n</code></pre></div>\n<p>Beautiful.</p>",
        "id": 286209924,
        "sender_full_name": "Roselyn Baxter",
        "timestamp": 1655299007
    },
    {
        "content": "<p>Where's function extensionality being used? Is it in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.left_inverse.eq_right_inverse\">docs#function.left_inverse.eq_right_inverse</a>?</p>",
        "id": 286227225,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655306229
    },
    {
        "content": "<p>yeah, <code>comp_eq_id</code> is literally <code>funext</code></p>",
        "id": 286231085,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1655307791
    }
]