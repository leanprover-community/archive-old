[
    {
        "content": "<p>I have a need for some lemmas about <code>list.zip_with</code> and they all basically follow the same exact proof. The common aspect is, <code>zip_with</code> distributes a permutation of the resulting list onto the input lists, if the inputs are of the same length, or a subset of the list ... ditto. What's the better generalized way to prove the following lemmas:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">zip_with_distrib_take</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">zip_with</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"n\">l'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">take</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">zip_with</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">l.take</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l'.take</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">zip_with_distrib_drop</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">zip_with</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"n\">l'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">drop</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">zip_with</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">l.drop</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l'.drop</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">zip_with_distrib_tail</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">zip_with</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"n\">l'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">tail</span> <span class=\"bp\">=</span> <span class=\"n\">zip_with</span> <span class=\"n\">f</span> <span class=\"n\">l.tail</span> <span class=\"n\">l'.tail</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">zip_with_append</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">la</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l'</span> <span class=\"n\">lb</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l.length</span> <span class=\"bp\">=</span> <span class=\"n\">l'.length</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">zip_with</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"n\">la</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l'</span> <span class=\"bp\">++</span> <span class=\"n\">lb</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">zip_with</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"bp\">++</span> <span class=\"n\">zip_with</span> <span class=\"n\">f</span> <span class=\"n\">la</span> <span class=\"n\">lb</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">zip_with_distrib_reverse</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l.length</span> <span class=\"bp\">=</span> <span class=\"n\">l'.length</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">zip_with</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"n\">l'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">reverse</span> <span class=\"bp\">=</span> <span class=\"n\">zip_with</span> <span class=\"n\">f</span> <span class=\"n\">l.reverse</span> <span class=\"n\">l'.reverse</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">zip_with_rotate_distrib</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l.length</span> <span class=\"bp\">=</span> <span class=\"n\">l'.length</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">zip_with</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"n\">l'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">rotate</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">zip_with</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">l.rotate</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l'.rotate</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>instead of repeating proofs that basically look like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span> <span class=\"n\">hl</span> <span class=\"n\">generalizing</span> <span class=\"n\">l'</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">l'</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hl</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 233205228,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617644939
    },
    {
        "content": "<p>Tidy?</p>",
        "id": 233218085,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617651071
    },
    {
        "content": "<p>If tidy doesn't work by itself, you can add the tidy attribute to the appropriate tactics locally</p>",
        "id": 233219931,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1617652011
    },
    {
        "content": "<p>I guess it would be more correct to say the \"applicative nature\" instead of \"functoriality\"</p>",
        "id": 233222855,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617653454
    },
    {
        "content": "<p>For something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">zip_with_distrib_drop'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l'</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">zip_with</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"n\">l'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">drop</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">zip_with</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">l.drop</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l'.drop</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">tidy</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>tidy chugs chugs chugs but doesn't prove it</p>",
        "id": 233223031,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617653560
    },
    {
        "content": "<p>Your suggested induction proof doesn't seem to work for that lemma - are there some lemmas you have locally that fill in the gaps?</p>",
        "id": 233233312,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617657751
    },
    {
        "content": "<p>Ah, import! <code>import data.list</code></p>",
        "id": 233233380,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617657796
    },
    {
        "content": "<p>I fall at the very first hurdle at attempting to generalize that; <code>drop</code> is universe-polymorphic, so can't be replaced with a function argument to the lemma</p>",
        "id": 233233552,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617657897
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/116395-maths/topic/functoriality.20of.20lists.20and.20zip_with/near/233222855\">said</a>:</p>\n<blockquote>\n<p>I guess it would be more correct to say the \"applicative nature\" instead of \"functoriality\"</p>\n</blockquote>\n<p>Yeah I'm inclined to say this is expressing that <code>drop n</code> is an applicative transformation, possibly with the zipping applicative on lists rather than the usual monadic one</p>",
        "id": 233236388,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1617659502
    },
    {
        "content": "<p>Here's the property of such functions, to first pass:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">distrib_over_zip_with</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">},</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l'</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">zip_with</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"n\">l'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">zip_with</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">l'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ex_drop</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">distrib_over_zip_with</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">drop</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">l</span> <span class=\"n\">l'</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">zip_with_distrib_drop</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 233242382,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617663355
    }
]