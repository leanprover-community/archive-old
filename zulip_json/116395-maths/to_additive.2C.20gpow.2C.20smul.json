[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/pull/4334#discussion_r498104897\">this comment</a> Sébastien naturally asks about deducing a lemma in additive group theory from the corresponding one for multiplicative groups. The reason we didn't do that is that <code>to_additive</code> currently doesn't handle translation of <code>gpow</code> which allows to write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>g</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">g^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.858832em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span> in a multiplicative group and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> is an integer into the additive version <code>gsmul</code> allowing to write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">ng</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span> now belongs to an additive group. The definition is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">gsmul</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">gpow</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"n\">n</span>\n</code></pre></div>\n\n<p>I guess this has been discussed before. Is it hopelessly out of scope for <code>to_additive</code>? Is there a reason not to want <code>to_addtive</code> to handle this? Or is it only that someone needs to go and add <code>to_additive</code> everywhere?</p>",
        "id": 211930417,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601567020
    },
    {
        "content": "<p>The issue is that the order of the variables changes</p>",
        "id": 211943894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601572746
    },
    {
        "content": "<p>and right now that isn't supported</p>",
        "id": 211943918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601572756
    },
    {
        "content": "<p>Maybe we could have <code>[reducible] gsmul_aux a n := gsmul n a</code> and then get it all working for aux and then just live with the corresponding reducible annoyance which presumably be like in the <code>ge</code> days</p>",
        "id": 211944195,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601572855
    },
    {
        "content": "<p>I don't know if <code>to_additive</code> could eat an abbreviation but maybe if it could then that would work better</p>",
        "id": 211944327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601572916
    },
    {
        "content": "<p>The lemma names also tend to have a corresponding permutation applied to their components, which might be tough for <code>to_additive</code> to replicate</p>",
        "id": 211944822,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601573147
    },
    {
        "content": "<p>And lemma arguments often come in different order.</p>",
        "id": 211948617,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601574878
    },
    {
        "content": "<p>Currently the standard way to get from <code>pow</code>/<code>gpow</code> to <code>nsmul</code>/<code>gsmul</code> is to apply the original lemma to <code>@multiplicative α</code>.</p>",
        "id": 211948713,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601574925
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243312\">@Jason KY.</span> I made you an unwitting recipient of an experiment with this. When we were setting up group theory from first principles I defined <code>{{n}}^g</code> to mean <code>g^n</code> because I wanted to see if anything felt more natural that way around. But I think it just ended up annoying you, right?</p>",
        "id": 211949613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601575306
    },
    {
        "content": "<p>We could make Zsmul a right action?</p>",
        "id": 211949638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601575319
    },
    {
        "content": "<p>It's not the same as smul, after all</p>",
        "id": 211949702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601575333
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> do you agree this all mean we should merge the subgroup PR without trying to fix this <code>to_additive</code> issue?</p>",
        "id": 211955626,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601577836
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/to_additive.2C.20gpow.2C.20smul/near/211949613\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"243312\">Jason KY.</span> I made you an unwitting recipient of an experiment with this. When we were setting up group theory from first principles I defined <code>{{n}}^g</code> to mean <code>g^n</code> because I wanted to see if anything felt more natural that way around. But I think it just ended up annoying you, right?</p>\n</blockquote>\n<p>I didn't find the direction of the g and n to be annoying but the fact that I had to write the squiggly brackets every time!</p>",
        "id": 211964721,
        "sender_full_name": "Jason KY.",
        "timestamp": 1601581824
    },
    {
        "content": "<p>Yes, sure!</p>",
        "id": 211967016,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1601582871
    }
]