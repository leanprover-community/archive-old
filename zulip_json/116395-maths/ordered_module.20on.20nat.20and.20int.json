[
    {
        "content": "<p>Is this true? We don't have the instance for it if so.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ordered_module</span> <span class=\"n\">ℕ</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>, you might have some insight here.</p>",
        "id": 244604868,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625162515
    },
    {
        "content": "<p>I have not played yet with <code>ordered_modules</code>, so I am not able to help, sorry...</p>",
        "id": 244620266,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625170258
    },
    {
        "content": "<p>It looks true to me but I ran into this when I tried:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.ordered</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ordered_module</span> <span class=\"n\">ℕ</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul_lt_smul_of_pos</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">hab</span> <span class=\"n\">hcpos</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">hcpos</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">hcpos</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">one_nsmul</span><span class=\"o\">,</span> <span class=\"n\">one_nsmul</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">succ_nsmul</span><span class=\"o\">,</span> <span class=\"n\">succ_nsmul</span> <span class=\"n\">b</span><span class=\"o\">],</span>\n      <span class=\"n\">apply</span> <span class=\"n\">add_lt_add</span><span class=\"o\">,</span>\n      <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">      invalid apply tactic, failed to synthesize type class instance for</span>\n<span class=\"cm\">      covariant_class M M has_add.add has_lt.lt</span>\n<span class=\"cm\">      state:</span>\n<span class=\"cm\">      case nat.succ</span>\n<span class=\"cm\">      M : Type ?,</span>\n<span class=\"cm\">      _inst_1 : ordered_add_comm_monoid M,</span>\n<span class=\"cm\">     -/</span>\n      <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">lt_of_smul_lt_smul_of_pos</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Am I doing something wrong? I want a&lt;b and c&lt;d implies a+c&lt;b+d in an ordered_add_comm_monoid.</p>",
        "id": 244665082,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625208688
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_lt_add\">docs#add_lt_add</a> doesn't give any clues</p>",
        "id": 244666716,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625209918
    },
    {
        "content": "<p>Does <code>refine</code> fare any better</p>",
        "id": 244666861,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625210015
    },
    {
        "content": "<p>Isnt {0,1} with the idempotent addition and 0&lt;1 an additive commutative ordered monoid?</p>",
        "id": 244697176,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625230193
    },
    {
        "content": "<p>Adam, I was not able to get your example to work, but a slight modification seems to work: in <code>{0,1,at_least_two}</code> with addition defined by setting everything bigger than 1 equal to <code>at_least_two</code>, the inequality <code>1 &lt; at_least_two</code> does not imply the inequality <code>1+1 &lt; at_least_two + at_least_two = at_least_two</code>, since the two sides are equal.  This in particular explains why Lean does not find the <code>covariant_class</code> instance that is stopping Kevin's proof: if that instance were there, then <code>add_lt_add</code> would hold.</p>",
        "id": 244715079,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625238084
    },
    {
        "content": "<p>I forgot to mention: of course, also <code>1 &lt; at_least_two</code> does not imply <code>2 • 1 &lt; 2 • at_least_two</code>, again since the two sides are equal.  This should contradict the <code>smul_lt_smul_of_pos</code> field of <code>ordered_module</code>.</p>",
        "id": 244716053,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625238486
    },
    {
        "content": "<p>Oh yeah, of course. But yes, this is essentially the counterexample I had in mind.</p>",
        "id": 244716147,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625238526
    },
    {
        "content": "<p>Anyway, it seems to me that these examples are sufficiently natural that they should fit into the framework. Perhaps the axioms should be relaxed a bit?</p>",
        "id": 244716416,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625238653
    },
    {
        "content": "<p>Yes, I agree and this is partly why I embarked in the <code>order</code> refactor.</p>",
        "id": 244716493,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625238690
    },
    {
        "content": "<p>I am not sure that eventually the definition of <code>ordered_[...]</code> will change, but it will be easy to assume what you want of your <code>ordered_[...]</code> and have access to the correct lemmas.</p>",
        "id": 244716644,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625238739
    },
    {
        "content": "<p><code>covariant_class</code> and <code>contravariant_class</code> simply mean some monotonicity of some operation and you have complete freedom of which operation, on which side you act and on whether the inequality is strict or not.</p>",
        "id": 244716776,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625238806
    },
    {
        "content": "<p>Wouldn't all these issues disappear if we enforce only non-strict inequalities?</p>",
        "id": 244716930,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625238866
    },
    {
        "content": "<p>They probably would, but the strict inequality holds (and is useful) in other cases, for instance for linear ordered groups.  It is convenient to get these assumptions by typeclasses</p>",
        "id": 244717100,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625238954
    },
    {
        "content": "<p>(For instance, it would be awkward to state <code>add_lt_add</code>, but that is a lemma that you definitely want to use sometimes.)</p>",
        "id": 244717332,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625239073
    },
    {
        "content": "<p>That would work in an ordered additive monoid with cancellative addition, so we could use the typeclass system for this as well</p>",
        "id": 244717486,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625239140
    },
    {
        "content": "<p>True, but with <code>covariant_class</code> you assume even less than <code>cancellative_...</code>.</p>",
        "id": 244717611,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625239196
    },
    {
        "content": "<p>I think it's more reasonable to impose these conditions involving <code>&lt;</code> only when we are in the totally ordered case.<br>\nI found <a href=\"https://www.math.lsu.edu/~madden/tomonoids.pdf\">https://www.math.lsu.edu/~madden/tomonoids.pdf</a> which seems relevant, see the paragraph on page 5 containing the equation (TI). There, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> is a commutative monoid.</p>",
        "id": 244717871,
        "sender_full_name": "Reid Barton",
        "timestamp": 1625239305
    },
    {
        "content": "<p>In fact, the final reason why I started the refactor was that getting lemmas to work for <code>nnreal</code> was always a bit tricky.</p>",
        "id": 244717895,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625239315
    },
    {
        "content": "<p>Oh, what I'm suggesting is for <code>add_lt_add</code> to use the following classes:<br>\n<code>[covariant_class A A has_add.add has_le.le]</code> and <code>[cancellative A]</code> (I don't know if <code>[cancellative]</code> is  thing)</p>",
        "id": 244717989,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625239338
    },
    {
        "content": "<p>In general, a partially ordered whatever should only have conditions saying that the whatever structure preserves <code>&lt;=</code> in a reasonable sense</p>",
        "id": 244717999,
        "sender_full_name": "Reid Barton",
        "timestamp": 1625239342
    },
    {
        "content": "<p>Adam, Reid, I think that the origin of the strict inequalities in Lean for <code>ordered</code> arises from <del>negating</del>contraposing the implication <code>a \\le b -&gt; a*c \\le b*c</code> and then formally replacing the <code>\\not \\le</code> with <code>&lt;</code> and assuming that instead.  So, yes, for linear orders, they are \"correct\".  Otherwise, they are weird.</p>",
        "id": 244718184,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625239439
    },
    {
        "content": "<p>Also, Adam, <code>add_lt_add</code> holds with the assumptions</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">has_add.add</span> <span class=\"n\">has_lt.lt</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">function.swap</span> <span class=\"n\">has_add.add</span><span class=\"o\">)</span> <span class=\"n\">has_le.le</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>and the two covariant assumptions are there, just because there is no need to assume commutativity of addition: they are equivalent under the commutativity assumption.</p>",
        "id": 244718601,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625239658
    }
]