[
    {
        "content": "<p>I'm trying to lift a finite set to a finset using some hypothesis of finiteness.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">prop_decidable</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">app_builder</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">finite_set_has_greatest_element</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">):</span>\n  <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">finite</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">is_greatest</span> <span class=\"n\">S</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">Hf</span><span class=\"o\">,</span>\n  <span class=\"n\">lift</span> <span class=\"n\">S</span> <span class=\"n\">to</span> <span class=\"n\">finset</span> <span class=\"kn\">using</span> <span class=\"n\">Hf</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>But this is failing with:</p>\n<div class=\"codehilite\"><pre><span></span>[app_builder] failed to create an &#39;can_lift&#39;-application, failed to solve unification constraint for #2 argument (Type ? =?= Type ? → Type ?)\napp_builder_exception, more information can be obtained using command `set_option trace.app_builder true`\n</pre></div>\n\n\n<p>But, I'm not sure I understand why <a href=\"https://leanprover-community.github.io/mathlib_docs/data/set/finite.html#set.can_lift\" title=\"https://leanprover-community.github.io/mathlib_docs/data/set/finite.html#set.can_lift\">https://leanprover-community.github.io/mathlib_docs/data/set/finite.html#set.can_lift</a> does not get picked up by Lean.</p>",
        "id": 192581120,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585769539
    },
    {
        "content": "<p><code>finset X</code> not <code>finset</code></p>",
        "id": 192581765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585769874
    },
    {
        "content": "<p>… Thanks, sorry for the stupid question!</p>",
        "id": 192581880,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585769917
    },
    {
        "content": "<p>Thanks for that question! I had no idea about that whole machinery. I remember noticing that some trick to go from int to nat landed in Lean but I'd not realised it was so powerful.</p>",
        "id": 192581910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585769936
    },
    {
        "content": "<p>I just learnt about how far it all went from your question.</p>",
        "id": 192581938,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585769951
    },
    {
        "content": "<p>Happy to make this very cool API more attention then, because it sounds really useful for heavy coercions :)</p>",
        "id": 192581993,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585769986
    },
    {
        "content": "<p>I guessed that <code>lift S to finset using Hf</code> could guess that <code>finset</code> has some holes and fill them itself by reusing the fact that <code>S: set α</code> and then trying to make some <code>finset α</code> too, but it's not obvious I guess</p>",
        "id": 192582116,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585770031
    },
    {
        "content": "<p>Putting a hole, i.e. <code>lift S to (finset _) using Hf</code> makes the error a lot more user friendly.</p>",
        "id": 192582166,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585770062
    }
]