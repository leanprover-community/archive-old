[
    {
        "content": "<p>Hello, it is not a question but a  I suggest a little exercise to learn a little category theory, if somebody want to play <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">functor_category</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">category</span>\n<span class=\"n\">universes</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"err\">𝒞</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"err\">𝒟</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v₂</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"err\">𝒞</span> <span class=\"err\">𝒟</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"err\">⟶</span> <span class=\"n\">U</span><span class=\"o\">)(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">G</span>  <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"err\">⥤</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"err\">⟶</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The diagram coming from g and α</span>\n<span class=\"cm\">    F(f)        F(h)       F(g)</span>\n<span class=\"cm\">F X ---&gt; F Y  ---&gt;  F V   ----&gt; F U</span>\n<span class=\"cm\"> |        |           |          |</span>\n<span class=\"cm\"> |α(X)    |α(Y)       | α (v)    |  α (U)</span>\n<span class=\"cm\"> v        v           v          v</span>\n<span class=\"cm\">G X ---&gt; G Y ----&gt;    G(V) ---- G(U)</span>\n<span class=\"cm\">    G(f)       G(h)         G(g)</span>\n<span class=\"cm\">commutes.</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"err\">≫</span>  <span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">Y</span> <span class=\"err\">≫</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">h</span> <span class=\"err\">≫</span>  <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span>   <span class=\"bp\">=</span>  <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">h</span> <span class=\"err\">≫</span> <span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">V</span>  <span class=\"err\">≫</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"kn\">end</span>  <span class=\"c1\">--- :)</span>\n</pre></div>",
        "id": 191121982,
        "sender_full_name": "orlando",
        "timestamp": 1584628672
    },
    {
        "content": "<p>Does <code>simp</code> work for you?</p>",
        "id": 191123006,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584629052
    },
    {
        "content": "<p>no !!!</p>",
        "id": 191123149,
        "sender_full_name": "orlando",
        "timestamp": 1584629122
    },
    {
        "content": "<p>Did you see the <a href=\"https://observablehq.com/@bryangingechen/github-lean-file-viewer?url=%22https%3A%2F%2Fgithub.com%2Fleanprover-community%2Fmathlib%2Fblob%2Fmaster%2Fdocs%2Ftutorial%2Fcategory_theory%2Fintro.lean%22#docs\" target=\"_blank\" title=\"https://observablehq.com/@bryangingechen/github-lean-file-viewer?url=%22https%3A%2F%2Fgithub.com%2Fleanprover-community%2Fmathlib%2Fblob%2Fmaster%2Fdocs%2Ftutorial%2Fcategory_theory%2Fintro.lean%22#docs\">intro</a> file for category theory? Maybe a bunch of rewrites does it</p>",
        "id": 191123459,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584629243
    },
    {
        "content": "<p>I need to do some step ! </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"err\">≫</span>  <span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">Y</span> <span class=\"err\">≫</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">h</span> <span class=\"err\">≫</span>  <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span>   <span class=\"bp\">=</span>  <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">h</span> <span class=\"err\">≫</span> <span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">V</span>  <span class=\"err\">≫</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>  <span class=\"k\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">map_comp</span> <span class=\"n\">h</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">naturality</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"err\">≫</span> <span class=\"n\">g</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 191123638,
        "sender_full_name": "orlando",
        "timestamp": 1584629291
    },
    {
        "content": "<p>We don't have these naturality squares as simp lemmas because it's not clear in which direction you want to rewrite.</p>",
        "id": 191123841,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584629390
    },
    {
        "content": "<p>Kevin,  Yes i read the intro (it's good text !!!) , and i make this exercice to manipulate i little !</p>",
        "id": 191123981,
        "sender_full_name": "orlando",
        "timestamp": 1584629431
    },
    {
        "content": "<p>It might be better to just pick a direction (arbitrarily?) as the simp-direction though</p>",
        "id": 191123999,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584629442
    },
    {
        "content": "<p>but any schoolkid could prove this by rewriting</p>",
        "id": 191124013,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584629455
    },
    {
        "content": "<p>so where's the tactic?</p>",
        "id": 191124040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584629465
    },
    {
        "content": "<p><code>rewrite_search</code>?</p>",
        "id": 191124179,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584629507
    },
    {
        "content": "<p>unknown identifier? :-(</p>",
        "id": 191124266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584629539
    },
    {
        "content": "<p>I don't know, I've thought about having some robust tactic for this kind of equational reasoning in category theory, like a <code>ring</code> for categories, but it hasn't been a pressing concern</p>",
        "id": 191124296,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584629550
    },
    {
        "content": "<p>same !</p>",
        "id": 191124321,
        "sender_full_name": "orlando",
        "timestamp": 1584629557
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270476\">@orlando</span> the tactic which should solve this goal is still being written</p>",
        "id": 191124343,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584629562
    },
    {
        "content": "<p>I don't know to what extent it exists yet</p>",
        "id": 191124424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584629589
    },
    {
        "content": "<p>myaybe it half-exists?</p>",
        "id": 191124446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584629600
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"err\">≫</span>  <span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">Y</span> <span class=\"err\">≫</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">h</span> <span class=\"err\">≫</span>  <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span>   <span class=\"bp\">=</span>  <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">h</span> <span class=\"err\">≫</span> <span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">V</span>  <span class=\"err\">≫</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">nat_trans</span><span class=\"bp\">.</span><span class=\"n\">naturality</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 191125010,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584629830
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"err\">≫</span>  <span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">Y</span> <span class=\"err\">≫</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">h</span> <span class=\"err\">≫</span>  <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span>   <span class=\"bp\">=</span>  <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">h</span> <span class=\"err\">≫</span> <span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">V</span>  <span class=\"err\">≫</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">congr_arg</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">congr_fun</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">nat_trans</span><span class=\"bp\">.</span><span class=\"n\">naturality</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 191125094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584629874
    },
    {
        "content": "<p>oh nice : congr' 1,</p>",
        "id": 191125394,
        "sender_full_name": "orlando",
        "timestamp": 1584629979
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/d2d8cf2e62629ad3f7eb1e15d3ba7ae2e770c7a3/src/algebra/category/Module/monoidal.lean#L212\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/d2d8cf2e62629ad3f7eb1e15d3ba7ae2e770c7a3/src/algebra/category/Module/monoidal.lean#L212\">here</a> is the sorry I'm working on, I'm also trying to learn category theory</p>",
        "id": 191126824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584630561
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270476\">@orlando</span> when I get to a computer again I'll write your tactic :-)</p>",
        "id": 191133293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584633256
    },
    {
        "content": "<p>the proof was <code>rfl</code> by the way :-)</p>",
        "id": 191141791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584636709
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  : I try to read your file : i have a determinist timeout with \" tidy \" i don't know tidy, what is it ?</p>",
        "id": 191142015,
        "sender_full_name": "orlando",
        "timestamp": 1584636795
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> wrote it, I don't understand it -- for me it is just like all the other tactics which sometimes solve a goal and sometimes don't.</p>",
        "id": 191142117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584636836
    },
    {
        "content": "<p>I only just learnt what <code>rewrite_search</code> did today after Reid's comment above.</p>",
        "id": 191142222,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584636867
    },
    {
        "content": "<p><code>tidy</code>, more or less, attempts to solve goals by \"decomposing into pieces\" and then using simp lemma. When it does work, you can ask it to report what it did by writing <code>tidy?</code></p>",
        "id": 191142309,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584636900
    },
    {
        "content": "<p>Often it is a some sequence of <code>intros</code>, <code>ext</code>, <code>dsimp</code>, and <code>simp</code>, but sometimes manages some more exotic steps.</p>",
        "id": 191142358,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584636922
    },
    {
        "content": "<p>It essentially contains a list of tactics to try, and it keeps trying tactics from that list until nothing makes further progress.</p>",
        "id": 191142403,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584636947
    },
    {
        "content": "<p>In particular, it has potentially unbounded run time. And sometimes it does very dumb things.</p>",
        "id": 191142480,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584636966
    },
    {
        "content": "<p>(But once you get the hang of when it does work, it works great.)</p>",
        "id": 191142519,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584636983
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Category.20exercice/near/191142222\" title=\"#narrow/stream/116395-maths/topic/Category.20exercice/near/191142222\">said</a>:</p>\n<blockquote>\n<p>I only just learnt what <code>rewrite_search</code> did today after Reid's comment above.</p>\n</blockquote>\n<p>Note that <code>rewrite_search</code> doesn't exist in mathlib... We started attempting to PR it, but got bogged down.</p>",
        "id": 191142631,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584637033
    },
    {
        "content": "<p>It is awesome. :-)</p>",
        "id": 191142648,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584637040
    },
    {
        "content": "<p>And the notion of : Module.of ? I thinck it's a tool to \"categorify \" ?</p>",
        "id": 191142891,
        "sender_full_name": "orlando",
        "timestamp": 1584637096
    },
    {
        "content": "<p>It's a tool to \"bundle\" the underlying type of a module together with the module structure.</p>",
        "id": 191144014,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584637592
    },
    {
        "content": "<p>As a side effect, it becomes an object of the category of modules.</p>",
        "id": 191144065,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584637613
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270476\">@orlando</span>  you already know that the usual way to do rings in Lean is <code>variables (R : Type) [comm_ring R]</code>. But there is also a category of rings, where you just put <code>R : Ring</code>. These are two different ways of storing the same data in the computer, and this <code>of</code> thing moves from one to the other.</p>",
        "id": 191144319,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584637703
    },
    {
        "content": "<p>It is an implementation issue which is not interesting to mathematicians but becomes important if you want to do this stuff seriously.</p>",
        "id": 191144614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584637827
    },
    {
        "content": "<p>There is something wrong with my tactic :-(</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">functor_category</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">category</span>\n<span class=\"n\">universes</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"err\">𝒞</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"err\">𝒟</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v₂</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"err\">𝒞</span> <span class=\"err\">𝒟</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"err\">⟶</span> <span class=\"n\">U</span><span class=\"o\">)(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">G</span>  <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"err\">⥤</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"err\">⟶</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The diagram coming from g and α</span>\n<span class=\"cm\">    F(f)        F(h)       F(g)</span>\n<span class=\"cm\">F X ---&gt; F Y  ---&gt;  F V   ----&gt; F U</span>\n<span class=\"cm\"> |        |           |          |</span>\n<span class=\"cm\"> |α(X)    |α(Y)       | α (v)    |  α (U)</span>\n<span class=\"cm\"> v        v           v          v</span>\n<span class=\"cm\">G X ---&gt; G Y ----&gt;    G(V) ---- G(U)</span>\n<span class=\"cm\">    G(f)       G(h)         G(g)</span>\n<span class=\"cm\">commutes.</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">poor_mans_rewrite_search</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">iterate</span> <span class=\"mi\">5</span>\n    <span class=\"o\">{</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">assoc</span><span class=\"o\">},</span>\n      <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">nat_trans</span><span class=\"bp\">.</span><span class=\"n\">naturality</span><span class=\"o\">},</span>\n      <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">},</span>\n      <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">assoc</span><span class=\"o\">},</span>\n      <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">nat_trans</span><span class=\"bp\">.</span><span class=\"n\">naturality</span><span class=\"o\">},</span>\n      <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">}</span>\n    <span class=\"o\">}]</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span>\n  <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"err\">≫</span>  <span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">Y</span> <span class=\"err\">≫</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">h</span> <span class=\"err\">≫</span>  <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span> <span class=\"bp\">=</span>\n    <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">h</span> <span class=\"err\">≫</span> <span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">V</span>  <span class=\"err\">≫</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">poor_mans_rewrite_search</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 191158743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584643708
    },
    {
        "content": "<p>this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span>\n  <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"err\">≫</span>  <span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">Y</span> <span class=\"err\">≫</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">h</span> <span class=\"err\">≫</span>  <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span> <span class=\"bp\">=</span>\n    <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">h</span> <span class=\"err\">≫</span> <span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">V</span>  <span class=\"err\">≫</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">iterate</span> <span class=\"mi\">5</span>\n    <span class=\"o\">{</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">assoc</span><span class=\"o\">},</span>\n      <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">nat_trans</span><span class=\"bp\">.</span><span class=\"n\">naturality</span><span class=\"o\">},</span>\n      <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">},</span>\n      <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">assoc</span><span class=\"o\">},</span>\n      <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">nat_trans</span><span class=\"bp\">.</span><span class=\"n\">naturality</span><span class=\"o\">},</span>\n      <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>works fine (and the same tactic should solve other goals of this nature)</p>",
        "id": 191158860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584643777
    },
    {
        "content": "<p>It solves this:</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">X</span> <span class=\"err\">≫</span>  <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">h</span> <span class=\"err\">≫</span>  <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span> <span class=\"bp\">=</span>\n    <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">h</span> <span class=\"err\">≫</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span>  <span class=\"err\">≫</span> <span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">U</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 191159129,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584643908
    },
    {
        "content": "<p>and even this: </p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">X</span> <span class=\"err\">≫</span>  <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"mi\">𝟙</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">h</span> <span class=\"err\">≫</span>  <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span> <span class=\"bp\">=</span>\n    <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">h</span> <span class=\"err\">≫</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span>  <span class=\"err\">≫</span> <span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">U</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 191159276,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584643969
    },
    {
        "content": "<p>That nice !!! Why hte meta programming fails</p>",
        "id": 191160135,
        "sender_full_name": "orlando",
        "timestamp": 1584644405
    },
    {
        "content": "<p>yeah but it would be good to make it into a tactic and I can't work out how :-/</p>",
        "id": 191160189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584644440
    },
    {
        "content": "<p>Thanks to Chris Hughes who pointed out that it's the <code>include</code> that is causing the problem. You have to move the meta def before the include.</p>",
        "id": 191160523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584644616
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">functor_category</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">category</span>\n<span class=\"n\">universes</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">poor_mans_rewrite_search</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">iterate</span> <span class=\"mi\">5</span>\n    <span class=\"o\">{</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">assoc</span><span class=\"o\">},</span>\n      <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">nat_trans</span><span class=\"bp\">.</span><span class=\"n\">naturality</span><span class=\"o\">},</span>\n      <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">},</span>\n      <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">assoc</span><span class=\"o\">},</span>\n      <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">nat_trans</span><span class=\"bp\">.</span><span class=\"n\">naturality</span><span class=\"o\">},</span>\n      <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">}</span>\n    <span class=\"o\">}]</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"err\">𝒞</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"err\">𝒟</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v₂</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"err\">𝒞</span> <span class=\"err\">𝒟</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"err\">⟶</span> <span class=\"n\">U</span><span class=\"o\">)(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">G</span>  <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"err\">⥤</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"err\">⟶</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The diagram coming from g and α</span>\n<span class=\"cm\">    F(f)        F(h)       F(g)</span>\n<span class=\"cm\">F X ---&gt; F Y  ---&gt;  F V   ----&gt; F U</span>\n<span class=\"cm\"> |        |           |          |</span>\n<span class=\"cm\"> |α(X)    |α(Y)       | α (v)    |  α (U)</span>\n<span class=\"cm\"> v        v           v          v</span>\n<span class=\"cm\">G X ---&gt; G Y ----&gt;    G(V) ---- G(U)</span>\n<span class=\"cm\">    G(f)       G(h)         G(g)</span>\n<span class=\"cm\">commutes.</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span>\n  <span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">X</span> <span class=\"err\">≫</span>  <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"mi\">𝟙</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">h</span> <span class=\"err\">≫</span>  <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span> <span class=\"bp\">=</span>\n    <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">h</span> <span class=\"err\">≫</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span>  <span class=\"err\">≫</span> <span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">U</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">poor_mans_rewrite_search</span> <span class=\"c1\">-- works :-)</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 191160543,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584644628
    },
    {
        "content": "<p>He also suggested a better tactic, which I'll write next</p>",
        "id": 191160606,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584644649
    },
    {
        "content": "<p>you could also <code>omit</code> inside a section if you don't want to move it</p>",
        "id": 191162292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584645453
    },
    {
        "content": "<p>You should also try the <code>conv_lhs { slice 3 4, ... }</code> idiom for dealing with associativity. This <code>slice</code> tactic could do with some work, but it mostly works. It rearranges brackets for you and zooms in to the \"3rd through 4th\" morphisms in a chain.</p>",
        "id": 191163448,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584646015
    },
    {
        "content": "<p>Here's Chris' suggestion:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">comp_right_app</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">V</span> <span class=\"err\">⟶</span> <span class=\"n\">W</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">h</span> <span class=\"err\">≫</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"n\">j</span> <span class=\"bp\">=</span>\n  <span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">Y</span> <span class=\"err\">≫</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat_trans</span><span class=\"bp\">.</span><span class=\"n\">naturality</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">assoc</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">omit</span> <span class=\"err\">𝒞</span> <span class=\"err\">𝒟</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">poor_mans_rewrite_search</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n<span class=\"bp\">`</span><span class=\"o\">[{</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">assoc</span><span class=\"o\">},</span>\n    <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">},</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">comp_right_app</span><span class=\"o\">},</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">nat_trans</span><span class=\"bp\">.</span><span class=\"n\">naturality</span><span class=\"o\">},</span>\n  <span class=\"o\">}]</span>\n\n<span class=\"n\">include</span> <span class=\"err\">𝒞</span> <span class=\"err\">𝒟</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span>\n  <span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">X</span> <span class=\"err\">≫</span>  <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"mi\">𝟙</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">h</span> <span class=\"err\">≫</span>  <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span> <span class=\"bp\">=</span>\n    <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">h</span> <span class=\"err\">≫</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span>  <span class=\"err\">≫</span> <span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">U</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">poor_mans_rewrite_search</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 191163636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584646103
    },
    {
        "content": "<p>Like mul_left_comm but for natural transformations</p>",
        "id": 191163682,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584646127
    },
    {
        "content": "<p>Doesn't <code>comp_right_app</code> already exist by the <code>reassoc</code> machinery?</p>",
        "id": 191166505,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584647538
    },
    {
        "content": "<p>Maybe, I don't know anything about any machinery. I was just trying to make a simple tactic which solved goals like this.</p>",
        "id": 191167804,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584648138
    },
    {
        "content": "<p>It turns out <code>comp_right_app</code> didn't exist, but should have and does now, see <a href=\"https://github.com/leanprover-community/mathlib/issues/2200\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/2200\">#2200</a>. <code>by simp</code> now suffices.</p>",
        "id": 191276255,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584725760
    },
    {
        "content": "<p>Oh nice! <span class=\"user-mention\" data-user-id=\"270476\">@orlando</span> you found a hole in the library!</p>",
        "id": 191277399,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584726284
    }
]