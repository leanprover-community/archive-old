[
    {
        "content": "<p>I'm having a very hard time with something which I thought would take an hour. I have a topological space <code>X</code> and an open subset <code>U : opens X</code>. I define a presheaf on <code>X</code> as map from <code>opens X</code> to some type plus some properties as follows:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">presheaf</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">F</span>     <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">res</span>   <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HVU</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"err\">⊆</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"n\">F</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Hid</span>   <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Hcomp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HWV</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"err\">⊆</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HVU</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"err\">⊆</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"n\">W</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">HWV</span> <span class=\"n\">HVU</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">res</span> <span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"n\">HWV</span> <span class=\"err\">∘</span> <span class=\"n\">res</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">HVU</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Now suppose that I have <code>OX : sheaf X</code> (presheaf as above + sheaf axiom). I want to define the restriction sheaf, of type <code>sheaf U</code> (or <code>sheaf {x // x ∈ U}</code>). I have a map <code>f : opens X → opens U</code> which is just <code>subtype.val</code> with the proof that it preserves <code>is_open</code>. I have defined the restricted presheaf in the obvious way using <code>f</code>. Is this the right way to work with subspaces? Am I missing something already in mathlib?</p>\n<p>The reason why I think that I might be doing something very wrong is because when I try to prove the sheaf condition, at some point I have a goal that looks like:</p>\n<div class=\"codehilite\"><pre><span></span>⊢ OX.res (f Uj) ((f Uj) ∩ (f Uk)) _ (s j) = OX.res (f Uk) ((f Uj) ∩ (f Uk)) _ (s k)\n</pre></div>\n\n\n<p>And in my hypotheses I have:</p>\n<div class=\"codehilite\"><pre><span></span>H : OX.res (f Uj) (f (Uj ∩ Uk)) _ (s j) = OX.res (f Uk) (f (Uj ∩ Uk)) _ (s k)\n</pre></div>\n\n\n<p>I also have a lemma that says:</p>\n<div class=\"codehilite\"><pre><span></span> <span class=\"kn\">lemma</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">inter</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"n\">W</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"err\">∩</span> <span class=\"n\">W</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">U</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>So I thought that rewriting at H would do the trick but I get:</p>\n<div class=\"codehilite\"><pre><span></span>[check] application type mismatch at\n  OX.res (f Uj) _a _\nargument type\n  f (Uj ∩ Uk) ⊆ f Uj\nexpected type\n  _a ⊆ f Uj\n</pre></div>\n\n\n<p>Any suggestions?</p>",
        "id": 160307081,
        "sender_full_name": "Ramon Fernandez Mir",
        "timestamp": 1552065378
    },
    {
        "content": "<p>You can't rewrite <code>H</code> with that lemma because there are proof terms (the <code>_</code>s) whose types depend on the things you want to rewrite.<br>\nTry <code>convert H</code> instead</p>",
        "id": 160307379,
        "sender_full_name": "Reid Barton",
        "timestamp": 1552065629
    },
    {
        "content": "<p>At least, I think that's the problem. I don't recognize your error message though.</p>",
        "id": 160307394,
        "sender_full_name": "Reid Barton",
        "timestamp": 1552065650
    },
    {
        "content": "<p>What does <code>convert</code> do?</p>",
        "id": 160308012,
        "sender_full_name": "Ramon Fernandez Mir",
        "timestamp": 1552066177
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md#convert\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md#convert\">https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md#convert</a></p>",
        "id": 160308035,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552066201
    },
    {
        "content": "<p>Thanks! I should get more familiar with many of these..</p>",
        "id": 160308734,
        "sender_full_name": "Ramon Fernandez Mir",
        "timestamp": 1552066772
    },
    {
        "content": "<p>that error message is what you get if you get the <code>rewrite motive is not type correct</code> error and then follow the error's advice and <code>set_option trace.check true</code></p>",
        "id": 160311146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552068533
    },
    {
        "content": "<p>Hi. Sorry, I was chairing a meeting and watching these interesting messages go by. I think you should make a more general construction than this. I think you should define the pullback sheaf, or comap sheaf as it will be called in this world, for an open immersion. Because at some point when defining a scheme you're going to need to pull a sheaf back along an isomorphism so you're going to have to write that code anyway.</p>",
        "id": 160311892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552069097
    },
    {
        "content": "<p>Might as well do pullback of sheaves in general in that case.</p>",
        "id": 160311966,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552069168
    },
    {
        "content": "<p>But that's harder because then you have to take some limit</p>",
        "id": 160312054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552069213
    },
    {
        "content": "<p>It's pushing forward which is the easy one</p>",
        "id": 160312072,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552069235
    },
    {
        "content": "<p>Oh, yep.. that's right.</p>",
        "id": 160312097,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552069259
    },
    {
        "content": "<p>I had to deal with all this with schemes the first time around :-)</p>",
        "id": 160314981,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552071400
    },
    {
        "content": "<p>I was idly wondering whether pullbacks are easy for an open map (image of open is open) but the naive definition isn't a sheaf, it seems to me (f(U intersect V) might not be f(U) intersect f(V)). So maybe open immersions are the correct generality.</p>",
        "id": 160315484,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552071751
    }
]