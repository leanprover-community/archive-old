[
    {
        "content": "<p>What is the most readable way to have <code>if (exists assumption of type t) then (code using t) else ..</code>? Same question for <code>if (lean can generate an instance of type t)</code>.</p>",
        "id": 275945056,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1647747551
    },
    {
        "content": "<p>You can write this function</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">has_asm</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"n\">succeeds</span> <span class=\"bp\">$</span> <span class=\"n\">find_assumption</span> <span class=\"n\">e</span>\n</code></pre></div>\n<p>and use it as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">do</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">has_asm</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n   <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"bp\">...</span>\n   <span class=\"k\">else</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 275948603,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1647753143
    },
    {
        "content": "<p>(I assume this is Lean 3)</p>",
        "id": 275948620,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1647753173
    },
    {
        "content": "<p>We can write a similar function to find instances:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">has_instance</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"n\">succeeds</span> <span class=\"bp\">$</span> <span class=\"n\">mk_instance</span> <span class=\"n\">e</span>\n</code></pre></div>",
        "id": 275948676,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1647753258
    },
    {
        "content": "<p>So, I need to search for the assumption/instance twice (once for <code>if</code> and once in the <code>then</code> branch)?</p>",
        "id": 275970553,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1647787505
    },
    {
        "content": "<p>You can do something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">find_assumption</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n    <span class=\"n\">something</span> <span class=\"k\">with</span> <span class=\"n\">e</span> <span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n<span class=\"o\">(</span><span class=\"n\">something</span> <span class=\"n\">without</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But note that in this case, <code>something without e</code> will run if <code>something with e</code> fails. If that's a possibility you need to be more careful with the logic.</p>",
        "id": 275971604,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1647788992
    },
    {
        "content": "<p>We can have something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">if_with</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tactic</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">v'</span> <span class=\"bp\">←</span> <span class=\"n\">optional</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"n\">v'.elim</span> <span class=\"n\">neg</span> <span class=\"n\">pos</span>\n</code></pre></div>",
        "id": 275973121,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1647791247
    },
    {
        "content": "<p>(probably, it works with some typeclass instead of just <code>tactic</code>)</p>",
        "id": 275973172,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1647791296
    },
    {
        "content": "<p>Is it in the library under some name? If not, how should I call it?</p>",
        "id": 275973188,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1647791354
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>: in <a href=\"https://github.com/leanprover-community/mathlib/pull/12844\">#12844</a> I want to add a branch for the case if there are assumptions <code>[measurable_space α] [borel_space α]</code>.</p>",
        "id": 275973202,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1647791400
    },
    {
        "content": "<p>(and the tactic should fail if there is a <code>[measurable_space α]</code> but no <code>[borel_space α]</code>)</p>",
        "id": 275973253,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1647791434
    },
    {
        "content": "<p>For now, I'm going to inline this function.</p>",
        "id": 275973534,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1647791858
    },
    {
        "content": "<p>Done.</p>",
        "id": 275974808,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1647793535
    },
    {
        "content": "<p>The usual way I do something like that is <code>o &lt;- try_core tac, match o with ...</code> or <code>mcond (succeeds tac) ... ...</code></p>",
        "id": 275975870,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647794748
    },
    {
        "content": "<p>Is <code>try_core</code> the same as <code>optional</code>?</p>",
        "id": 275977184,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1647795958
    },
    {
        "content": "<p>The question here amounts to asking for the lean translation of Python's:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">get_assumption</span><span class=\"p\">()</span>\n<span class=\"k\">except</span><span class=\"p\">:</span>\n    <span class=\"n\">no_t</span><span class=\"p\">()</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"n\">with_t</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Right?</p>",
        "id": 276054055,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647871095
    },
    {
        "content": "<p>Yes. I use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">borel</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">α</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">i'</span> <span class=\"bp\">←</span> <span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">measurable_space</span> <span class=\"bp\">%%</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">find_assumption</span><span class=\"o\">),</span>\n  <span class=\"n\">i'.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 276067893,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1647876349
    },
    {
        "content": "<p>in <a href=\"https://github.com/leanprover-community/mathlib/pull/12844\">#12844</a></p>",
        "id": 276067975,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1647876369
    },
    {
        "content": "<p>I found that you can spell this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">some</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">try_core</span> <span class=\"n\">get_assumption</span> <span class=\"bp\">|</span> <span class=\"n\">no_t</span><span class=\"o\">,</span>\n<span class=\"n\">with_t</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 285379366,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654689161
    }
]