[
    {
        "content": "<p>To introduce better notation for restriction of sheaves, I need a tactic that can discharge a goal of type <code>U ≤ V</code>. I would like to do this via approximating the transitive closure of the lemmas in the local context and also some tagged lemmas. This is what I have now</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.sheaves.presheaf</span>\n\n<span class=\"kd\">@[user_attribute]</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">restrict_attr</span> <span class=\"o\">:</span> <span class=\"n\">user_attribute</span> <span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">name</span>      <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">sheaf_restrict</span><span class=\"o\">,</span>\n  <span class=\"n\">descr</span>     <span class=\"o\">:=</span> <span class=\"s2\">\"tag lemmas to use in `presheaf.restrict_tac`\"</span><span class=\"o\">,</span>\n  <span class=\"n\">cache_cfg</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">mk_cache</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">ns</span><span class=\"o\">,</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"k\">do</span>\n    <span class=\"o\">{</span> <span class=\"n\">ctx</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">tactic.local_context</span><span class=\"o\">,</span>\n      <span class=\"n\">ctx.any_of</span> <span class=\"o\">(</span><span class=\"n\">tactic.focus1</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">tactic.apply</span> <span class=\"bp\">&gt;=&gt;</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">tactic.done</span><span class=\"o\">))</span> <span class=\"bp\">&gt;=&gt;</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"bp\">&lt;|&gt;</span>\n      <span class=\"n\">ns.any_of</span> <span class=\"o\">(</span><span class=\"n\">tactic.focus1</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">tactic.resolve_name</span> <span class=\"bp\">&gt;=&gt;</span> <span class=\"n\">tactic.to_expr</span> <span class=\"bp\">&gt;=&gt;</span> <span class=\"n\">tactic.apply</span> <span class=\"bp\">&gt;=&gt;</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">tactic.done</span><span class=\"o\">))</span> <span class=\"bp\">&gt;=&gt;</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">},</span>\n    <span class=\"n\">dependencies</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">restrict_tac</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.fail</span> <span class=\"s2\">\"`restrict_tac` failed\"</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">monad.join</span> <span class=\"o\">(</span><span class=\"n\">restrict_attr.get_cache</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">tactic.done</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">tactic.transitivity</span><span class=\"o\">,</span> <span class=\"n\">mjoin</span> <span class=\"o\">(</span><span class=\"n\">restrict_attr.get_cache</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">restrict_tac</span> <span class=\"n\">n</span><span class=\"o\">))]</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">sheaf_restrict</span><span class=\"o\">]</span> <span class=\"n\">bot_le</span> <span class=\"n\">le_top</span> <span class=\"n\">le_refl</span> <span class=\"n\">inf_le_left</span> <span class=\"n\">inf_le_right</span> <span class=\"n\">le_sup_left</span> <span class=\"n\">le_sup_right</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"bp\">⊓</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">⊓</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">v</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">restrict_tac</span> <span class=\"mi\">5</span>\n</code></pre></div>\n<p>Since this is my first time doing metaprogramming in lean, I have some questions:<br>\nDoes this do what I think it does? Is there a better way to achieve this? Does the exponential behavior make it unusable in the long run? <br>\nAnd also I would expect the <code>orelse</code> to shortcut when the first argument succeeds, so it shouldn't matter a lot what large number I put, but it seems like that's not the case. What am I missing?</p>",
        "id": 303095137,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1665295547
    },
    {
        "content": "<p>Update: It breaks when the example is changed to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Top</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"bp\">⊓</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">⊓</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">v</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">restrict_tac</span> <span class=\"mi\">5</span>\n</code></pre></div>\n<p>But I'm not sure why. I changed <code>apply</code> to <code>apply'</code> and the error persists.</p>",
        "id": 303096287,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1665296844
    },
    {
        "content": "<p>Ah it seems like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Top</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"bp\">⊓</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">⊓</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">v</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">transitivity</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>breaks already and it is not my fault.</p>",
        "id": 303096383,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1665296943
    },
    {
        "content": "<p>(note there is a <a class=\"stream\" data-stream-id=\"239415\" href=\"/#narrow/stream/239415-metaprogramming-.2F-tactics\">#metaprogramming / tactics</a> stream; do you want a Zulip moderator to move this topic there?)</p>",
        "id": 303187367,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665367737
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Help.20on.20metaprogramming\">#general &gt; Help on metaprogramming</a> by <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span>.</p>",
        "id": 303187432,
        "sender_full_name": "Notification Bot",
        "timestamp": 1665367803
    }
]