[
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#rcases\">tactic#rcases</a> allows multiple targets</p>",
        "id": 220412600,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608317112
    },
    {
        "content": "<p>You can do <code>rcases ⟨a, b⟩ with ...</code></p>",
        "id": 220412649,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608317150
    },
    {
        "content": "<p>I don't follow, how would you write the above with <code>rcases</code>?</p>",
        "id": 220415106,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608318322
    },
    {
        "content": "<p>Perhaps my title was unclear - I'm not talking about <code>cases</code> matching on multiple objects, but on <code>case</code> being able to focus on multiple goals.</p>",
        "id": 220415516,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608318511
    },
    {
        "content": "<p>I think it would be nice to have <code>work_on_goals</code> and not just <code>work_on_goal</code> for this, but usually you can phrase such proofs with <code>;</code> to pick out the goals just by having the tactic fail when it's not applicable</p>",
        "id": 220416335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608318960
    },
    {
        "content": "<p>the example is too minimal to reflect this</p>",
        "id": 220416428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608319006
    },
    {
        "content": "<p>Yury means this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">⟩</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"bp\">|</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"bp\">|</span><span class=\"n\">j</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exacts</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220416518,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608319072
    },
    {
        "content": "<p>I thought about <code>work_on_goals</code> too, although I wasn't sure where to insert unsolved goals back into the goals list</p>",
        "id": 220417970,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608319913
    },
    {
        "content": "<p>Which is a problem, because it makes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">work_on_goals</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">{},</span>\n<span class=\"n\">work_on_goals</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">{},</span>\n</code></pre></div>\n<p>behave poorly if the tactic blocks change the number of goals</p>",
        "id": 220418109,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608319969
    },
    {
        "content": "<p>Can <code>rcases</code> give me <code>hi</code> and <code>hj</code> for that case?</p>",
        "id": 220418258,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608320030
    },
    {
        "content": "<p>I think you should try not to write tactic scripts like this</p>",
        "id": 220420575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608321237
    },
    {
        "content": "<p>Can you suggest an alternative for these lines?</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/f942f91ff4ae9f080f520d8093a0448cec334bf0/src/linear_algebra/alternating.lean#L546-L563\">https://github.com/leanprover-community/mathlib/blob/f942f91ff4ae9f080f520d8093a0448cec334bf0/src/linear_algebra/alternating.lean#L546-L563</a></p>",
        "id": 220425933,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608324280
    },
    {
        "content": "<p>I mean, I guess I could just expand all four cases and deal with the duplication</p>",
        "id": 220425985,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608324325
    },
    {
        "content": "<p>But if I were doing this on paper, I'd want to group the similar goals</p>",
        "id": 220426008,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608324342
    },
    {
        "content": "<p>Some more discussion <a href=\"#narrow/stream/113488-general/topic/Multiple.20case/near/224158120\">in #general</a></p>",
        "id": 224159487,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611741296
    }
]