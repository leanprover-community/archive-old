[
    {
        "content": "<p>For generalised (nested or mutual) inductive types, Lean apparently does not generate the associated no-confusion principle. However, it seems like I can get around this by reducing an equation <code>C = D</code>, where <code>C</code> and <code>D</code> are different constructors of the generalised inductive type, to an equation <code>C' = D'</code> between constructors of the type that the kernel sees. Then I can apply that type's no-confusion principle.</p>\n<p>Can anyone confirm or deny that this construction is sound?</p>",
        "id": 209928998,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1600000329
    },
    {
        "content": "<p>Example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">rose</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">tip</span> <span class=\"o\">:</span> <span class=\"n\">rose</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">rose</span> <span class=\"bp\">â†’</span> <span class=\"n\">rose</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">rose</span><span class=\"bp\">.</span><span class=\"n\">no_confusion</span> <span class=\"c1\">-- does not exist</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"bp\">_</span><span class=\"n\">nest_1_1</span><span class=\"bp\">._</span><span class=\"n\">nest_1_1</span><span class=\"bp\">.</span><span class=\"n\">rose</span><span class=\"bp\">._</span><span class=\"n\">mut_</span><span class=\"bp\">.</span><span class=\"n\">no_confusion</span> <span class=\"c1\">-- does exist</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">rs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">rose</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">rose</span><span class=\"bp\">.</span><span class=\"n\">tip</span> <span class=\"bp\">=</span> <span class=\"n\">rose</span><span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">rs</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">_</span><span class=\"n\">nest_1_1</span><span class=\"bp\">._</span><span class=\"n\">nest_1_1</span><span class=\"bp\">.</span><span class=\"n\">rose</span><span class=\"bp\">._</span><span class=\"n\">mut_</span><span class=\"bp\">.</span><span class=\"n\">no_confusion</span> <span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 209929114,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1600000554
    },
    {
        "content": "<p>What do you mean? Of course the theorem is true, or else it wouldn't be a proper definition of the generalized inductive type in the first place</p>",
        "id": 209933393,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600006430
    },
    {
        "content": "<p>but the framework doesn't prove the theorem because it wasn't implemented</p>",
        "id": 209933436,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600006448
    },
    {
        "content": "<p>plus,  you just proved it so you should have some reasonable confidence that the theorem is true :)</p>",
        "id": 209933470,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600006546
    },
    {
        "content": "<p>The question is, given any generalised inductive type <code>I</code> and equation <code>C = D : I</code> with <code>C</code> and <code>D</code> different constructors of <code>I</code>, can I use the following tactic to prove <code>false</code>:</p>\n<ul>\n<li>Unfold <code>C</code> until I get a constructor of some non-generalised inductive type <code>J</code> (which internally represents <code>I</code>).</li>\n<li>Apply <code>J</code>'s no-confusion lemma.</li>\n</ul>\n<p>This seems to work on the examples, but I don't know much about the translation so I'm not sure if this method always succeeds.</p>",
        "id": 209933756,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1600006982
    },
    {
        "content": "<p>I think you can just skip to step 2</p>",
        "id": 209933788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600007023
    },
    {
        "content": "<p>This will work as long as you are only proving distinct constructors distinct</p>",
        "id": 209933843,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600007054
    },
    {
        "content": "<p>proving injectivity is more complicated</p>",
        "id": 209933848,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600007064
    },
    {
        "content": "<p>All right, thanks! Injectivity lemmas for the constructors of generalised inductives are provided by Lean, so I'm good on that front.</p>",
        "id": 209933863,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1600007109
    },
    {
        "content": "<p>The real front end <code>no_confusion</code> should support both cases</p>",
        "id": 209933869,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600007131
    }
]