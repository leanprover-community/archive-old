[
    {
        "content": "<p>I'm trying to define an <code>inline</code> tactic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n<span class=\"n\">setup_tactic_parser</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">inline</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">):</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">`</span><span class=\"o\">[</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">%%</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n        <span class=\"n\">clear</span> <span class=\"bp\">%%</span><span class=\"n\">h</span>\n    <span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">interactive</span>\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n</code></pre></div>\n<p>I get the error <code>invalid antiquotation, occurs outside of quoted expressions</code> at <code>clear</code> though. I don't understand that error.<br>\nHow can I fix that?</p>",
        "id": 221709062,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1609884819
    },
    {
        "content": "<p>I think this tactic already exists, and is called \"subst\"</p>",
        "id": 221709513,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609885105
    },
    {
        "content": "<p>Thanks! Missed it. But I'm still interesting in why my inline tactic does not type-check!</p>",
        "id": 221710475,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1609885788
    },
    {
        "content": "<p>Well, subst does only work for <code>x = t</code> or <code>t = x</code>. Not for <code>t = t</code>!</p>",
        "id": 221711560,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1609886515
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">inline</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">parser.pexpr</span><span class=\"o\">):</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n    <span class=\"n\">m</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">match_local_const</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">expr.to_raw_fmt</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n        <span class=\"n\">rewrite</span>\n            <span class=\"o\">{</span> <span class=\"n\">rules</span><span class=\"o\">:=</span> <span class=\"o\">[{</span><span class=\"n\">pos</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">line</span> <span class=\"o\">:=</span> <span class=\"mi\">43</span><span class=\"o\">,</span> <span class=\"n\">column</span> <span class=\"o\">:=</span> <span class=\"mi\">11</span><span class=\"o\">},</span> <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"n\">rule</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">}],</span> <span class=\"n\">end_pos</span><span class=\"o\">:=</span><span class=\"n\">none</span> <span class=\"o\">}</span>\n            <span class=\"n\">loc.wildcard</span><span class=\"o\">,</span>\n        <span class=\"n\">tactic.clear_lst</span> <span class=\"o\">[</span><span class=\"n\">m.fst</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>This works! It would be great if rewrite would not change the order of the hypothesis though</p>",
        "id": 221753002,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1609929397
    },
    {
        "content": "<p>This is an unfortunate aspect of Lean metaprogramming: many tactics are implemented as <code>revert &lt;hyps&gt;, &lt;something&gt;, intros</code>, which doesn't always preserve the order of hypotheses. If this is important to you, I'm sure people would welcome a fix, but it's not going to be super easy.</p>",
        "id": 221753710,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1609929951
    },
    {
        "content": "<p>If you're going to do more metaprogramming, you might be interested in a <a href=\"https://limperg.de/posts/2020-08-19-lean-metaprogramming.html\">blog post</a> of mine where I talk about some more of Lean's gotchas.</p>",
        "id": 221753801,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1609930009
    },
    {
        "content": "<p>Thank you for the link! While I would love to be fluent in metaprogramming, I find it way too complex and difficult to learn with the current tools at hand. Keeping the order of hyps is not super important for me, it is nice that it works at all.</p>",
        "id": 221756151,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1609931798
    },
    {
        "content": "<p>Fair enough. It took me the better part of a year to get the hang of it, so I feel you. ;)</p>",
        "id": 221756203,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1609931858
    },
    {
        "content": "<p>I really like leans dot-notation and the autocompletion it offers (at least most of the time). However, as soon as you need a random undocumented function in some obscure namespace it is just trail&amp;error and guessing for me. I found it way easier to extend and play around with the internals of the typescript language service. It is very nice though that you don't need to wait for any compilation in lean. I miss a debugger nonetheless :D</p>",
        "id": 221756452,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1609932097
    }
]