[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/Check.20for.20sorry.20in.20tactic.20proof/near/241913279\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116045\">Jesse Michael Han</span> suggested that we could list all the axioms used.  That should be a general solution for this sort of thing.  (I assume a constant is considered an axiom, right?)  However, I donâ€™t know if there is currently a tactic which will tell you what axioms are used in an expression.  Does anyone know if there is and if not what obstacles exist in making one?</p>\n</blockquote>\n<p>What is the current state of such a tactic?</p>",
        "id": 270043300,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1643640829
    },
    {
        "content": "<p>It's not exactly a tactic, but <code>#print axioms X</code> will show you axioms used by the top-level declaration (e.g. definition/lemma) <code>X</code></p>",
        "id": 270043957,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643641073
    },
    {
        "content": "<p>Thanks, does this do <code>const</code> also?</p>",
        "id": 270044174,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1643641148
    },
    {
        "content": "<p>I should probably mention the context: I hand out an open-ended Lean assignment of the form \"State and prove X\". This might come with a library of axioms that make the problem reasonable. </p>\n<p>Given the completed assignment, I would like to </p>\n<ul>\n<li>scan for the construction of a term of the correct type</li>\n<li>have Lean sign off on the proof (ie no <code>sorry</code> warnings or errors)</li>\n<li>and filter any global constants to make sure only the allowed ones are in scope</li>\n</ul>",
        "id": 270045236,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1643641506
    },
    {
        "content": "<p>I think you mean does it also track <code>constant</code>s that are used? Then yes.</p>",
        "id": 270045504,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643641603
    },
    {
        "content": "<p>Great!</p>",
        "id": 270045598,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1643641634
    },
    {
        "content": "<p>Right, I think it's for exactly this kind of situation.<br>\nYou might check out the setup on codewars (there's a stream of the same name here, but not active lately).</p>",
        "id": 270045656,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643641656
    },
    {
        "content": "<p>I scanned through that but perhaps I should do so again.</p>",
        "id": 270045722,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1643641682
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 270045764,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1643641685
    },
    {
        "content": "<p><a href=\"https://github.com/codewars/codewars-runner-cli/issues/773\">https://github.com/codewars/codewars-runner-cli/issues/773</a> and <a href=\"https://github.com/maxhaslbeck/proving-contest-backends/blob/master/Lean/grader.py\">https://github.com/maxhaslbeck/proving-contest-backends/blob/master/Lean/grader.py</a> might be helpful</p>",
        "id": 270045974,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643641750
    },
    {
        "content": "<p>Maybe also get in touch with Donald Sebastian Leung who I think did most of the implementation work for that.</p>",
        "id": 270045994,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643641757
    },
    {
        "content": "<p>Thanks to both of you. One more question: I can parse the output of <code>#print axioms X</code> directly in Lean, right? I get the sense that it is easier to farm the task out something else though.</p>",
        "id": 270046738,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1643642017
    },
    {
        "content": "<p>No, it get's printed to stdout or something. I don't think you can grab that output within Lean itself.</p>",
        "id": 270046979,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643642104
    },
    {
        "content": "<p>Right, it would be a bit tricky to parse the output in an automated way, so worth looking at prior art.</p>",
        "id": 270046993,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643642110
    },
    {
        "content": "<p>Ah ok.</p>",
        "id": 270047079,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1643642143
    },
    {
        "content": "<p><del>But Lean 4 right?</del> More precisely, this will be/is possible in Lean 4 correct?</p>",
        "id": 270047098,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1643642151
    },
    {
        "content": "<p>I will drop a <a href=\"https://github.com/DonaldKellett/CW-Lean3-Examples\">link</a> to the implementation output of the Codewars discussion for ease of reference (especially for future me).</p>",
        "id": 270047946,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1643642486
    },
    {
        "content": "<p>Wow, that's quite a helpful link!</p>",
        "id": 270048915,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643642863
    },
    {
        "content": "<p>Everything should be easier in Lean 4 indeed, here is the lean 4 print axioms command where you can call <code>collect</code> yourself <a href=\"https://github.com/leanprover/lean4/blob/89edc184fb7de86c4d9edb01f73aea95e6cc7f9d/src/Lean/Elab/Print.lean#L82\">https://github.com/leanprover/lean4/blob/89edc184fb7de86c4d9edb01f73aea95e6cc7f9d/src/Lean/Elab/Print.lean#L82</a></p>",
        "id": 270049084,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643642919
    },
    {
        "content": "<p>Sweet.</p>",
        "id": 270049619,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1643643105
    }
]