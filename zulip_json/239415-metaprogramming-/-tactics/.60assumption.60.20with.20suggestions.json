[
    {
        "content": "<p>I just finished making an <code>assumption</code> variation that optionally suggests the <code>exact ...</code> to the user. I'd love to receive any and all feedback and critiques about my code.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">my_assumption</span> <span class=\"o\">:</span>\n  <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;!&quot;</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">local_context</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">mfirst</span> <span class=\"n\">exact</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span>    <span class=\"o\">:=</span> <span class=\"n\">do</span>\n  <span class=\"n\">ctx</span> <span class=\"err\">←</span> <span class=\"n\">local_context</span><span class=\"o\">,</span>\n  <span class=\"n\">ctx</span><span class=\"bp\">.</span><span class=\"n\">mfirst</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">do</span>\n    <span class=\"n\">exact</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">fmt</span> <span class=\"err\">←</span> <span class=\"n\">pp</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">trace_fmt</span> <span class=\"o\">(</span><span class=\"n\">format</span><span class=\"bp\">.</span><span class=\"n\">compose</span> <span class=\"s2\">&quot;Try this: exact &quot;</span> <span class=\"n\">fmt</span><span class=\"o\">)</span> <span class=\"n\">return</span>\n</code></pre></div>",
        "id": 209572547,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1599687826
    },
    {
        "content": "<p>I would use <code>\"?\"</code> instead of <code>\"!\"</code></p>",
        "id": 209572730,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599687951
    },
    {
        "content": "<p>What does <code>trace_fmt</code> do?</p>",
        "id": 209572738,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599687960
    },
    {
        "content": "<p>A few things bother me, particularly:</p>\n<ul>\n<li>the pattern match on <code>option unit</code> that is happening to see if <code>!</code> was provided</li>\n<li>the (kind of, but not really) duplicate code, that is, <code>local_context &gt;&gt;= list.mfirst exact</code> is kind of written twice</li>\n<li>the way <code>Try this: exact </code> is being composed with <code>fmt</code> (it seems a bit convoluted)</li>\n</ul>",
        "id": 209572777,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1599687964
    },
    {
        "content": "<p><code>trace_fmt</code> is what <code>tactic.trace</code> calls. Its a primitive that actually does the printing.</p>",
        "id": 209572802,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1599687989
    },
    {
        "content": "<p>What about <code>trace!\"Try this: exact  {pp e}\"</code> instead of the <code>trace_fmt</code> line?</p>",
        "id": 209572843,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599688031
    },
    {
        "content": "<p>The hardest to understand part is its last argument (<code>trace_fmt : format → (unit → α) → α</code>). The last argument is a <em>continuation</em>.</p>",
        "id": 209572848,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1599688039
    },
    {
        "content": "<p>Also, this should reduce repetition:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">my_assumption</span> <span class=\"o\">(</span><span class=\"n\">verb</span> <span class=\"o\">:</span>  <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;!&quot;</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n  <span class=\"n\">ctx</span> <span class=\"err\">←</span> <span class=\"n\">local_context</span><span class=\"o\">,</span>\n  <span class=\"n\">ctx</span><span class=\"bp\">.</span><span class=\"n\">mfirst</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">do</span>\n    <span class=\"n\">exact</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">when</span> <span class=\"n\">verb</span><span class=\"bp\">.</span><span class=\"n\">is_some</span> <span class=\"err\">$</span> <span class=\"n\">do</span>\n      <span class=\"n\">fmt</span> <span class=\"err\">←</span> <span class=\"n\">pp</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n      <span class=\"n\">trace</span><span class=\"bp\">!</span><span class=\"s2\">&quot;...&quot;</span>\n</code></pre></div>",
        "id": 209572933,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599688100
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110026\">Simon Hudon</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/.60assumption.60.20with.20suggestions/near/209572843\">said</a>:</p>\n<blockquote>\n<p>What about <code>trace!\"Try this: exact  {pp e}\"</code> instead of the <code>trace_fmt</code> line?</p>\n</blockquote>\n<p>Wonderful! It looks a lot better than manually calling <code>trace_fmt</code>!</p>",
        "id": 209572962,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1599688129
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110026\">Simon Hudon</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/.60assumption.60.20with.20suggestions/near/209572730\">said</a>:</p>\n<blockquote>\n<p>I would use <code>\"?\"</code> instead of <code>\"!\"</code></p>\n</blockquote>\n<p>I thought about that, but didn't remember any core/mathlib tactic that uses an optional <code>?</code>, although that sounds familiar.</p>",
        "id": 209572985,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1599688161
    },
    {
        "content": "<p><code>tidy</code> and <code>rcases</code> use this convention (I had to grep for the examples, I thought it was more common). That's the preferred convention I believe</p>",
        "id": 209573111,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599688248
    },
    {
        "content": "<p>Thank you for the feedback. The tactic already look a lot better.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">my_assumption</span> <span class=\"o\">(</span><span class=\"n\">verb</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"err\">$</span> <span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;?&quot;</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">ctx</span> <span class=\"err\">←</span> <span class=\"n\">local_context</span><span class=\"o\">,</span>\n  <span class=\"n\">ctx</span><span class=\"bp\">.</span><span class=\"n\">mfirst</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">do</span>\n    <span class=\"n\">exact</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">when</span> <span class=\"n\">verb</span><span class=\"bp\">.</span><span class=\"n\">is_some</span> <span class=\"err\">$</span> <span class=\"n\">trace</span><span class=\"bp\">!</span><span class=\"s2\">&quot;Try this: exact {pp e}&quot;</span>\n</code></pre></div>",
        "id": 209573241,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1599688329
    },
    {
        "content": "<p>Where can I find documentation about <code>trace!</code>. It seems to be internal, since I can't jump to the definition. Also, couldn't find anything with a quick search on the mathlib docs.</p>",
        "id": 209573304,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1599688385
    },
    {
        "content": "<p>This is where it's defined: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/core.lean#L2045\">https://github.com/leanprover-community/mathlib/blob/master/src/tactic/core.lean#L2045</a>. It's a macro</p>",
        "id": 209573550,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599688548
    },
    {
        "content": "<p>I was thinking about this, but not with an alternative tactic. Maybe the regular <code>assumption</code> could already be underlined in blue and say <code>Try this: 'exact bla,'</code>.</p>\n<p>The goal is to encourage optimization so the compiler doesn't need to iterate on every contextual variable every time <code>assumption</code> is used. As a side-effect, manual naming ends up being encouraged over automatic.</p>",
        "id": 269099222,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643028163
    },
    {
        "content": "<p>I think there are still situations where <code>assumption</code> is useful and shouldn't be recommending its own removal.<br>\nThe most common one is in states where assumption is used on multiple goals (e.g. when writing a tactic script that handles multiple similar cases).<br>\nSome people also like the style of not referring to anything by name unless really necessary, as it can look cleaner and sometimes be more robust to other tactic changes or variable renames without breakage.<br>\nIn the grand scheme of lean tactic inefficiencies I'm not sure <code>assumption</code> is slowing down mathlib compile times, of course I could be wrong but there are a lot of tactics in mathlib that do a lot more than trying to unify. </p>\n<p>If I remember correctly adding <a href=\"https://leanprover-community.github.io/mathlib_docs/find/timeit\">docs#timeit</a> to individual tactics and running (or letting CI run) build on mathlib is quite helpful to find the \"worst\" uses of individual tactics in mathlib, maybe you can see here what significant speedups there are to be had?</p>",
        "id": 269106909,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643031935
    },
    {
        "content": "<p>Thanks for the clarification!!</p>",
        "id": 269108219,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643032447
    },
    {
        "content": "<p><code>assumption?</code> would probably be a welcome addition, to match <code>tidy</code> vs <code>tidy?</code> etc</p>",
        "id": 269324903,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1643145087
    },
    {
        "content": "<p>Yeah this is aligned with what <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> proposed in the very beginning of this thread (sorry I revived an old thread without saying it was old)</p>",
        "id": 269325094,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643145171
    },
    {
        "content": "<p>(perhaps not hugely useful, but anything easy that ends up bringing  more users up to speed with writing tactics is very useful!)</p>",
        "id": 269325098,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1643145172
    },
    {
        "content": "<p>If you don't want to touch lean itself, you could create <code>which_assumption</code>, to match <code>squeeze_simp</code></p>",
        "id": 269325705,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643145408
    },
    {
        "content": "<p>(Would there be much of a performance impact having <code>tactic.interactive.assumption</code> itself be any more complicated? It's only <code>tactic.assumption</code> that's pervasively used by other tactics, right?)</p>",
        "id": 269326052,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643145551
    },
    {
        "content": "<blockquote>\n<p>in states where assumption is used on multiple goals</p>\n</blockquote>\n<p>I didn't know <code>assumption</code> could do that. For multiple targets I think <code>squeeze_assumption</code> would be a better name match</p>",
        "id": 269326523,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643145742
    },
    {
        "content": "<p>I actually prefer <code>assumption?</code> and I'd happily rename <code>squeeze_simp</code> to <code>simp?</code></p>",
        "id": 269326655,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1643145812
    },
    {
        "content": "<p><code>simp?</code> already exists tho <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> <br>\nBut I don't understand it. Ctrl+clicking on it took me to the definition of <code>simp</code></p>",
        "id": 269327718,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643146237
    },
    {
        "content": "<p>Do you know where <code>simp?</code> is defined? github search is of no help here</p>",
        "id": 269329653,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1643147259
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> It's in <code>simp</code> itself. <code>?</code> is a flag it parses (see the arguments)</p>",
        "id": 269330691,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643147755
    },
    {
        "content": "<p>Ah nice! <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> It also answers your question on why <code>ctrl</code> click takes you there</p>",
        "id": 269330791,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1643147808
    },
    {
        "content": "<p>Yeah, I was wondering why he said</p>\n<blockquote>\n<p>If you don't want to touch lean itself...</p>\n</blockquote>",
        "id": 269330843,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643147837
    },
    {
        "content": "<p>It ended up being a partly silly idea, but <a href=\"#narrow/stream/113488-general/topic/simp.40/near/265233898\">here</a> I had a version of <code>simp</code> that could take an additional <code>@</code> flag to get it to try harder in a couple ways (adding <code>{contextual := tt}</code> seems potentially useful still). So that you don't have to guess the right order for all the flags, the parsing logic was also redone there. It might be nice to make a generic interface for accepting single-character flags for tactics.</p>",
        "id": 269331524,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643148152
    },
    {
        "content": "<p>I might do this just for the sake or learning</p>",
        "id": 269341537,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643153599
    }
]