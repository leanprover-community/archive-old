[
    {
        "content": "<p>Why does the following not work?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">expr</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">focus</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">tac</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">g</span> <span class=\"bp\">::</span> <span class=\"n\">gs</span> <span class=\"err\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n   <span class=\"n\">set_goals</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">],</span>\n   <span class=\"n\">a</span> <span class=\"err\">←</span> <span class=\"n\">tac</span><span class=\"o\">,</span>\n   <span class=\"n\">new_gs</span> <span class=\"err\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n   <span class=\"n\">set_goals</span> <span class=\"o\">(</span><span class=\"n\">new_gs</span> <span class=\"bp\">++</span> <span class=\"n\">gs</span><span class=\"o\">),</span>\n   <span class=\"n\">return</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 209672990,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1599755458
    },
    {
        "content": "<p>Looking at the definition of <code>focus1</code>, it seems to only work for <code>Type</code> (aka <code>Sort 1</code>). Isn't that somewhat limiting?</p>",
        "id": 209673066,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1599755490
    },
    {
        "content": "<p>What makes this intriguing is that the following works:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">focus</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">tac</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">g</span> <span class=\"bp\">::</span> <span class=\"n\">gs</span> <span class=\"err\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n   <span class=\"n\">set_goals</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">],</span>\n   <span class=\"n\">a</span> <span class=\"err\">←</span> <span class=\"n\">tac</span><span class=\"o\">,</span>\n   <span class=\"n\">new_gs</span> <span class=\"err\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n   <span class=\"n\">set_goals</span> <span class=\"o\">(</span><span class=\"n\">new_gs</span> <span class=\"bp\">++</span> <span class=\"n\">gs</span><span class=\"o\">),</span>\n   <span class=\"n\">return</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 209673204,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1599755531
    },
    {
        "content": "<p>Declaring <code>u</code> in a standalone <code>universe u</code> declaration before the definition doesn't fix the problem in the first example.</p>",
        "id": 209673278,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1599755557
    },
    {
        "content": "<p>can you be more specific than \"doesn't work\"?</p>",
        "id": 209673347,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599755588
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298376\">Pedro Minicz</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/Tactics.20and.20universes/near/209673204\">said</a>:</p>\n<blockquote>\n<p>What makes this intriguing is that the following works:</p>\n</blockquote>\n<p>Right, because <code>Type*</code> means Lean gets to pick the universe level and it picked the only possible one, namely <code>Type</code></p>",
        "id": 209673369,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599755596
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298376\">Pedro Minicz</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/Tactics.20and.20universes/near/209673066\">said</a>:</p>\n<blockquote>\n<p>Looking at the definition of <code>focus1</code>, it seems to only work for <code>Type</code> (aka <code>Sort 1</code>). Isn't that somewhat limiting?</p>\n</blockquote>\n<p>Yes, somewhat, but it's hard to get monads to play along with universes IIRC</p>",
        "id": 209673593,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599755692
    },
    {
        "content": "<p>and normally <code>Type</code> would be adequate for anything you actually want to pass around at runtime</p>",
        "id": 209673671,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599755725
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/Tactics.20and.20universes/near/209673593\">said</a>:</p>\n<blockquote>\n<p>Yes, somewhat, but it's hard to get monads to play along with universes IIRC</p>\n</blockquote>\n<p>Addendum: that is indeed true but it can be done if it's necessary. If not, use <code>Type</code> and your design will be simpler for it. If you really need universe polymorphism in <code>tactic</code> for whatever reason, use <code>tactic.up</code> and <code>tactic.down</code>: <a href=\"https://github.com/leanprover-community/lean/blob/1604446600dd4249fc5d5570373e4d62e4eb469d/library/init/meta/tactic.lean#L75\">https://github.com/leanprover-community/lean/blob/1604446600dd4249fc5d5570373e4d62e4eb469d/library/init/meta/tactic.lean#L75</a></p>\n<p>In other monads, there's <code>uliftable</code> which is quite cumbersome: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/control/uliftable.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/control/uliftable.lean</a></p>",
        "id": 209677031,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599757185
    },
    {
        "content": "<p>As I recall it's also possible to defeat the universe level checks in <code>meta</code> and stuff your large data in a <code>Type</code></p>",
        "id": 209677392,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599757289
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> can you elaborate?  Would you for instance <code>unsafe_coerce</code> to <code>unit</code> and then back?</p>",
        "id": 209678996,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599757950
    },
    {
        "content": "<p>I think you can coerce <code>id : Type u -&gt; Type u</code> to have type <code>Type u -&gt; Type</code></p>",
        "id": 209679046,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599757985
    },
    {
        "content": "<p>conveniently, these have the same universe level</p>",
        "id": 209679100,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599758030
    },
    {
        "content": "<p>I don't think that's a limitation for <code>unsafe_coerce</code> though</p>",
        "id": 209679192,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599758072
    },
    {
        "content": "<p>Oh, it's even in mathlib: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/uchange\">docs#uchange</a></p>",
        "id": 209679535,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599758280
    },
    {
        "content": "<p>Change universe levels using this one weird trick mathematicians don't want you to know about</p>",
        "id": 209679641,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599758317
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110026\">Simon Hudon</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/Tactics.20and.20universes/near/209679192\">said</a>:</p>\n<blockquote>\n<p>I don't think that's a limitation for <code>unsafe_coerce</code> though</p>\n</blockquote>\n<p>Maybe not in Lean 4? The Lean 3 implementation uses <code>cast</code> with an unsound proof of equality in <code>Type u</code>, so it needs the universes to agree</p>",
        "id": 209679766,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599758401
    },
    {
        "content": "<p>My mistake, I thought they didn't need to agree. </p>\n<blockquote>\n<p>[from the link]<br>\nIn the VM, both α and uchange α have the same representation.</p>\n</blockquote>\n<p>I always assumed that was also the case for <code>ulift</code>. Is it not?</p>",
        "id": 209680291,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599758648
    },
    {
        "content": "<p>I think it is</p>",
        "id": 209680574,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599758779
    },
    {
        "content": "<p>Shouldn't universe levels just be ignored in <code>meta</code> land instead of this <code>uchange</code> thing? Pretend that every sort is <code>Type</code> whenever we're in a <code>meta def</code> and disable universe checking in <code>meta inductive</code>. Maybe the distinction between <code>Prop</code> and <code>Type</code> needs to be kept, but the <code>Type</code> tower should collapse.</p>",
        "id": 209796246,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1599838456
    },
    {
        "content": "<p>I think this is easier said than done because it kind of breaks the typechecker</p>",
        "id": 209796314,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599838486
    },
    {
        "content": "<p>Possible. I haven't thought through this in any detail.</p>",
        "id": 209796422,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1599838532
    }
]