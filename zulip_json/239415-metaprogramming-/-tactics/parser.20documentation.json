[
    {
        "content": "<p>Is there any to avoid the horrible error message on hover when using a custom parser? I have defined tactics whose only argument is a complicated custom parser and every time my mouse gets over an application of such a tactic I have half a page of error message complaining Lean wasn't able to synthesize a description for this parser.</p>",
        "id": 223579548,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611267747
    },
    {
        "content": "<p>I should have thought more before posting. I realized <code>rcases</code> certainly hasn't an auto-generated parser description and I see a promising <code>with_desc</code> there. I'll investigate.</p>",
        "id": 223579950,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611267978
    },
    {
        "content": "<p>I'd be interested in finding out how to fix this for the tactics which currently suffer from this.</p>",
        "id": 223580006,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1611268019
    },
    {
        "content": "<p>Bryan, which tactic are you talking about? I think there is no problem using <code>with_desc</code> to fix everything.</p>",
        "id": 223625642,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611312216
    },
    {
        "content": "<p>For example, <code>ext</code> and <code>ext1</code> seem to be broken at the moment:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span><span class=\"bp\">∈</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext1</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ^ hover here</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I'll take a look at how <code>rcases</code> does things too.</p>",
        "id": 223653911,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1611328474
    }
]