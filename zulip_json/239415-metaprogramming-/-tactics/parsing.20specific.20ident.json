[
    {
        "content": "<p>Hi,</p>\n<p>I would like to parse not a <code>tk</code> but a specific <code>ident</code>, something whose syntax would be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">lean.parser.specific_ident</span> <span class=\"o\">(</span><span class=\"n\">nm</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lean.parser.name</span>\n</code></pre></div>\n<p>I tried with things like this but it didn't work :(</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">lean.parser.specific_ident</span> <span class=\"o\">(</span><span class=\"n\">nm</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lean.parser</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">ident</span> <span class=\"bp\">←</span> <span class=\"n\">lean.parser.ident</span><span class=\"o\">,</span>\n  <span class=\"n\">guardb</span> <span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"bp\">=</span> <span class=\"n\">nm</span><span class=\"o\">),</span>\n  <span class=\"n\">pure</span> <span class=\"n\">nm</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">tactic.trace</span> <span class=\"bp\">$</span> <span class=\"n\">lean.parser.run_with_input</span> <span class=\"o\">(</span><span class=\"n\">lean.parser.specific_ident</span> <span class=\"bp\">`</span><span class=\"n\">aa</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">`</span><span class=\"n\">zz</span><span class=\"o\">)</span> <span class=\"s2\">\"aa\"</span>\n<span class=\"c1\">-- aa</span>\n<span class=\"k\">#eval</span> <span class=\"n\">tactic.trace</span> <span class=\"bp\">$</span> <span class=\"n\">lean.parser.run_with_input</span> <span class=\"o\">(</span><span class=\"n\">lean.parser.specific_ident</span> <span class=\"bp\">`</span><span class=\"n\">aa</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">`</span><span class=\"n\">zz</span><span class=\"o\">)</span> <span class=\"s2\">\"bb\"</span>\n<span class=\"c1\">-- failed</span>\n\n<span class=\"c1\">-- but:</span>\n<span class=\"k\">#eval</span> <span class=\"n\">tactic.trace</span> <span class=\"bp\">$</span> <span class=\"n\">lean.parser.run_with_input</span> <span class=\"o\">(</span><span class=\"n\">failure</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">`</span><span class=\"n\">zz</span><span class=\"o\">)</span> <span class=\"s2\">\"bb\"</span>\n<span class=\"c1\">-- zz</span>\n<span class=\"c1\">-- and even with guarb:</span>\n<span class=\"k\">#eval</span> <span class=\"n\">tactic.trace</span> <span class=\"bp\">$</span> <span class=\"n\">lean.parser.run_with_input</span> <span class=\"o\">(</span><span class=\"n\">guardb</span> <span class=\"n\">ff</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">`</span><span class=\"n\">aa</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">`</span><span class=\"n\">zz</span><span class=\"o\">)</span> <span class=\"s2\">\"bb\"</span>\n<span class=\"c1\">-- zz</span>\n</code></pre></div>\n<p>what is wrong? how come the <code>failure</code> from <code>guardb</code> inside <code>lean.parser.specific_ident</code> is not similar to the <code>guardb</code> when alone?</p>",
        "id": 274991474,
        "sender_full_name": "Xavier Martinet",
        "timestamp": 1647013279
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"324140\">@Xavier Martinet</span>! Sorry for the ultra late response. I am on my way back home today but I think I can try to help you tomorrow if nobody else does it first</p>",
        "id": 275168998,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647197406
    },
    {
        "content": "<p>In the meantime, I see that you have two unanswered questions (two recent threads). Do you still need help on both of them? Have you made any progress since then?</p>",
        "id": 275169249,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647197771
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/parsing.20specific.20ident/near/275169249\">said</a>:</p>\n<blockquote>\n<p>In the meantime, I see that you have two unanswered questions (two recent threads). Do you still need help on both of them? Have you made any progress since then?</p>\n</blockquote>\n<p>Thanks a million times! Actually the second one was connected to the first one, so if you help me on this one I should be fine :)</p>",
        "id": 275217942,
        "sender_full_name": "Xavier Martinet",
        "timestamp": 1647254224
    },
    {
        "content": "<p>I don't know about the Lean 3 parser, but some other parser combinator libraries do backtracking only for 'atomic' failures. That is, the parser <code>p &lt;|&gt; q</code> works like this:</p>\n<ul>\n<li>If <code>p</code> succeeds, return its result.</li>\n<li>If <code>p</code> fails <em>without consuming input</em>, try <code>q</code>.</li>\n<li>If <code>p</code> fails <em>and has already consumed input</em>, fail without trying <code>q</code>.</li>\n</ul>\n<p>Afaict that would explain the observed behaviour. If this is the issue, there should be a combinator which takes a parser <code>p</code> and acts like <code>p</code>, only that non-atomic failure is treated as atomic failure.</p>",
        "id": 275221714,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1647256406
    },
    {
        "content": "<p>In regular parsing, it's called \"try\". I don't remember the lean.parser name but there is try_core iirc</p>",
        "id": 275226264,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1647259600
    },
    {
        "content": "<p>thx. Actually <code>lean.parser.ident</code> does consume input, but is still compatible with <code>&lt;|&gt;</code> :(</p>",
        "id": 275257177,
        "sender_full_name": "Xavier Martinet",
        "timestamp": 1647273607
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/parsing.20specific.20ident/near/275226264\">said</a>:</p>\n<blockquote>\n<p>In regular parsing, it's called \"try\". I don't remember the lean.parser name but there is try_core iirc</p>\n</blockquote>\n<p><code>try_core</code> is a <code>tactic</code> monad, not a <code>lean.parser</code> one. However it seems that its code should be reusable for a <code>lean.parser</code> - I will try and let you know</p>",
        "id": 275257805,
        "sender_full_name": "Xavier Martinet",
        "timestamp": 1647273810
    },
    {
        "content": "<p>What are the underlying differences between <code>lean.parser</code> and just <code>parser</code>?</p>",
        "id": 275270769,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1647278965
    },
    {
        "content": "<p>it seems that <code>parser</code> is not used much in metaprogramming... <code>lean.parser</code> is an instance of the <code>interaction_monad</code>, that keeps track of the <code>pos</code>, from what I can see</p>",
        "id": 275273766,
        "sender_full_name": "Xavier Martinet",
        "timestamp": 1647280353
    },
    {
        "content": "<p>Ok, it seems that the issue comes from the <code>parser_state.cur_pos</code>.</p>\n<p>In <code>&lt;|&gt;</code> aka <code>lean.parser.parser_orelse</code>, there is a check <code>if pos₁ ≠ pos₂ then interaction_monad.result.exception e₁ ref₁ s'</code>. If we got rid of it (see below), it works fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">lean.parser.parser_orelse'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}(</span><span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">lean.parser</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lean.parser</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">pos₁</span> <span class=\"o\">:=</span> <span class=\"n\">parser_state.cur_pos</span> <span class=\"n\">s</span> <span class=\"k\">in</span>\n<span class=\"n\">result.cases_on</span> <span class=\"o\">(</span><span class=\"n\">p₁</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"n\">interaction_monad.result.success</span>\n  <span class=\"c1\">-- (λ e₁ ref₁ s',</span>\n  <span class=\"c1\">--   let pos₂ := parser_state.cur_pos s' in</span>\n  <span class=\"c1\">--   if pos₁ ≠ pos₂ then</span>\n  <span class=\"c1\">--     interaction_monad.result.exception e₁ ref₁ s'</span>\n  <span class=\"c1\">--   else result.cases_on (p₂ s)</span>\n  <span class=\"c1\">--    interaction_monad.result.success</span>\n  <span class=\"c1\">--    interaction_monad.result.exception)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e₁</span> <span class=\"n\">ref₁</span> <span class=\"n\">s'</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">pos₂</span> <span class=\"o\">:=</span> <span class=\"n\">parser_state.cur_pos</span> <span class=\"n\">s'</span> <span class=\"k\">in</span>\n    <span class=\"n\">result.cases_on</span> <span class=\"o\">(</span><span class=\"n\">p₂</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n     <span class=\"n\">interaction_monad.result.success</span>\n     <span class=\"n\">interaction_monad.result.exception</span><span class=\"o\">)</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">lean.parser.specific_ident</span> <span class=\"o\">(</span><span class=\"n\">nm</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lean.parser</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">ident</span> <span class=\"bp\">←</span> <span class=\"n\">lean.parser.ident</span><span class=\"o\">,</span>\n  <span class=\"n\">guardb</span> <span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"bp\">=</span> <span class=\"n\">nm</span><span class=\"o\">),</span>\n  <span class=\"n\">pure</span> <span class=\"n\">nm</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">tactic.trace</span> <span class=\"bp\">$</span> <span class=\"n\">lean.parser.run_with_input</span> <span class=\"o\">(</span><span class=\"n\">lean.parser.parser_orelse'</span> <span class=\"o\">(</span><span class=\"n\">lean.parser.specific_ident</span> <span class=\"bp\">`</span><span class=\"n\">aa</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"bp\">`</span><span class=\"n\">zz</span><span class=\"o\">))</span> <span class=\"s2\">\"bb cc\"</span>\n<span class=\"c1\">-- zz</span>\n<span class=\"k\">#eval</span> <span class=\"n\">tactic.trace</span> <span class=\"bp\">$</span> <span class=\"n\">lean.parser.run_with_input</span> <span class=\"o\">(</span><span class=\"n\">lean.parser.parser_orelse</span> <span class=\"o\">(</span><span class=\"n\">lean.parser.specific_ident</span> <span class=\"bp\">`</span><span class=\"n\">aa</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"bp\">`</span><span class=\"n\">zz</span><span class=\"o\">))</span> <span class=\"s2\">\"bb cc\"</span>\n<span class=\"c1\">-- failed</span>\n</code></pre></div>\n<p>So I wonder: how to set <code>lean_parser.cur_pos</code> ?</p>",
        "id": 275275856,
        "sender_full_name": "Xavier Martinet",
        "timestamp": 1647281252
    },
    {
        "content": "<p>I think this <code>lean_parser.cur_pos</code> issue stems from the fact that <code>lean.parser.ident</code> does consume the string, as <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span>  mentionned. There should be a way <em>not</em> to consume the string, with a <code>try_core</code> as <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span>  suggested. I will try it.</p>",
        "id": 275276245,
        "sender_full_name": "Xavier Martinet",
        "timestamp": 1647281418
    },
    {
        "content": "<p>I just looked through core and mathlib and I can't find this combinator. In fact, I can't even find the primitives you'd need to define this combinator. So this might actually be impossible (short of patching Lean). Maybe <code>tk</code> works for you?</p>",
        "id": 275277886,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1647282126
    },
    {
        "content": "<p>nope: <code>tk</code> takes a \"registered\" token, such as \"at\", not any string :(</p>",
        "id": 275278737,
        "sender_full_name": "Xavier Martinet",
        "timestamp": 1647282523
    },
    {
        "content": "<p>Okay, then I think your only option is to use your variant of <code>parser_orelse</code>. It's not pretty but it probably works.</p>",
        "id": 275281797,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1647283885
    },
    {
        "content": "<p>Even weirder: I don't understand AT ALL what is going on there.</p>\n<p>In case of an exception, I store the previous <code>parser_state</code>, but for some reasons (<code>parser_state</code> not being pure?), it is not frozen:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">lean.parser.specific_ident</span> <span class=\"o\">(</span><span class=\"n\">nm</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lean.parser</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">pos</span> <span class=\"o\">:=</span> <span class=\"n\">parser_state.cur_pos</span> <span class=\"n\">s</span> <span class=\"k\">in</span>\n  <span class=\"n\">result.cases_on</span> <span class=\"o\">(</span><span class=\"n\">lean.parser.ident</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">nm'</span> <span class=\"n\">s'</span><span class=\"o\">,</span>\n      <span class=\"k\">if</span> <span class=\"n\">nm'</span> <span class=\"bp\">=</span> <span class=\"n\">nm</span> <span class=\"k\">then</span>\n        <span class=\"n\">interaction_monad.result.success</span> <span class=\"n\">nm'</span> <span class=\"n\">s'</span>\n      <span class=\"k\">else</span>\n        <span class=\"k\">let</span> <span class=\"n\">new_pos</span> <span class=\"o\">:=</span> <span class=\"n\">parser_state.cur_pos</span> <span class=\"n\">s</span> <span class=\"k\">in</span>\n        <span class=\"n\">interaction_monad.result.exception</span>\n          <span class=\"o\">(</span><span class=\"n\">option.some</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">format</span><span class=\"bp\">!</span><span class=\"s2\">\"init: ({pos.line}, {pos.column}) - end: ({new_pos.line}, {new_pos.column})\"</span><span class=\"o\">)</span>\n          <span class=\"n\">pos</span>\n          <span class=\"n\">s</span> <span class=\"c1\">-- we save the previous state s as in `tactic.try_core` in the hope it gets frozen</span>\n    <span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">interaction_monad.result.exception</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">lean.parser.parser_orelse'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}(</span><span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">lean.parser</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lean.parser</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">pos₁</span> <span class=\"o\">:=</span> <span class=\"n\">parser_state.cur_pos</span> <span class=\"n\">s</span> <span class=\"k\">in</span>\n<span class=\"n\">result.cases_on</span> <span class=\"o\">(</span><span class=\"n\">p₁</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"n\">interaction_monad.result.success</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e₁</span> <span class=\"n\">ref₁</span> <span class=\"n\">s'</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">pos₂</span> <span class=\"o\">:=</span> <span class=\"n\">parser_state.cur_pos</span> <span class=\"n\">s'</span> <span class=\"k\">in</span>\n    <span class=\"k\">if</span> <span class=\"n\">pos₁</span> <span class=\"bp\">≠</span> <span class=\"n\">pos₂</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">e₁'</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">e₁</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">option.none</span> <span class=\"o\">:=</span> <span class=\"s2\">\"none\"</span>\n      <span class=\"bp\">|</span> <span class=\"n\">option.some</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">to_string</span> <span class=\"bp\">$</span> <span class=\"n\">f</span> <span class=\"o\">()</span>\n      <span class=\"kd\">end</span> <span class=\"k\">in</span>\n      <span class=\"n\">interaction_monad.result.exception</span> <span class=\"o\">(</span><span class=\"n\">option.some</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">format</span><span class=\"bp\">!</span><span class=\"s2\">\"got exc: </span><span class=\"se\">\\\"</span><span class=\"s2\">{e₁'}</span><span class=\"se\">\\\"</span><span class=\"s2\"> - init ({pos₁.line}, {pos₁.column}) ≠ end ({pos₂.line}, {pos₂.column}) (should be {ref₁})\"</span><span class=\"o\">)</span> <span class=\"n\">ref₁</span> <span class=\"n\">s'</span>\n    <span class=\"k\">else</span> <span class=\"n\">result.cases_on</span> <span class=\"o\">(</span><span class=\"n\">p₂</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n     <span class=\"n\">interaction_monad.result.success</span>\n     <span class=\"n\">interaction_monad.result.exception</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">tactic.trace</span> <span class=\"bp\">$</span> <span class=\"n\">lean.parser.run_with_input</span> <span class=\"o\">(</span><span class=\"n\">lean.parser.parser_orelse'</span> <span class=\"o\">(</span><span class=\"n\">lean.parser.specific_ident</span> <span class=\"bp\">`</span><span class=\"n\">aa</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"bp\">`</span><span class=\"n\">zz</span><span class=\"o\">))</span> <span class=\"s2\">\"aa cc\"</span>\n<span class=\"c1\">-- aa</span>\n<span class=\"k\">#eval</span> <span class=\"n\">tactic.trace</span> <span class=\"bp\">$</span> <span class=\"n\">lean.parser.run_with_input</span> <span class=\"o\">(</span><span class=\"n\">lean.parser.parser_orelse'</span> <span class=\"o\">(</span><span class=\"n\">lean.parser.specific_ident</span> <span class=\"bp\">`</span><span class=\"n\">aa</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"bp\">`</span><span class=\"n\">zz</span><span class=\"o\">))</span> <span class=\"s2\">\"bb cc\"</span>\n<span class=\"c1\">-- got exc: \"init: (1, 0) - end: (1, 0)\" - init (1, 0) ≠ end (1, 3) (should be (some ⟨1, 0⟩))</span>\n<span class=\"c1\">-- `s` is not frozen at all!</span>\n<span class=\"k\">#eval</span> <span class=\"n\">tactic.trace</span> <span class=\"bp\">$</span> <span class=\"n\">lean.parser.run_with_input</span> <span class=\"o\">(</span><span class=\"n\">lean.parser.parser_orelse</span> <span class=\"o\">(</span><span class=\"n\">lean.parser.specific_ident</span> <span class=\"bp\">`</span><span class=\"n\">aa</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"bp\">`</span><span class=\"n\">zz</span><span class=\"o\">))</span> <span class=\"s2\">\"bb cc\"</span>\n<span class=\"c1\">-- init: (1, 0) - end: (1, 0)</span>\n</code></pre></div>\n<p>I mean, what the hell is going on there? is that because internally, the <code>parser_state</code> is some C++ pointer whose pointed value gets mutated, no matter what? If so, then how does <code>lean.parser.with_input</code> works ?</p>",
        "id": 275283293,
        "sender_full_name": "Xavier Martinet",
        "timestamp": 1647284412
    },
    {
        "content": "<blockquote>\n<p>is that because internally, the parser_state is some C++ pointer whose pointed value gets mutated, no matter what?</p>\n</blockquote>\n<p>Yes, that's indeed what's happening.</p>",
        "id": 275285497,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647285438
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/parsing.20specific.20ident/near/275285497\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>is that because internally, the parser_state is some C++ pointer whose pointed value gets mutated, no matter what?</p>\n</blockquote>\n<p>Yes, that's indeed what's happening.</p>\n</blockquote>\n<p>is there a workaround? either to \"freeze\" the <code>parser_state</code>, or to set it to a specific value?</p>",
        "id": 275285911,
        "sender_full_name": "Xavier Martinet",
        "timestamp": 1647285652
    },
    {
        "content": "<p>No obvious workaround.  What do you actually want to parse?</p>",
        "id": 275285994,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647285699
    },
    {
        "content": "<p>I can think of one horrible hack: if you know the original string, then maybe you could <code>cur_pos</code> and <code>with_input</code> to temporarily switch the input to a substring of the original string starting with the current position.</p>",
        "id": 275286181,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647285804
    },
    {
        "content": "<p>I would like to parse itactic such as <code>\"try {norm_num [] }\"</code>, to have them simplified and written in a more \"canonical\" form</p>\n<p>e.g., if <code>try</code> succeeds, it would be just <code>\"norm_num\"</code></p>",
        "id": 275286196,
        "sender_full_name": "Xavier Martinet",
        "timestamp": 1647285815
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/parsing.20specific.20ident/near/275286181\">said</a>:</p>\n<blockquote>\n<p>I can think of one horrible hack: if you know the original string, then maybe you could <code>cur_pos</code> and <code>with_input</code> to temporarily switch the input to a substring of the original string starting with the current position.</p>\n</blockquote>\n<p>I have thought about that, but it felt really ugly lol</p>\n<p>maybe there is just no other way :( or get rid of the parser altogether and work with heuristic (\"if the string starts with a <code>try</code>, then parse after char 4\")</p>",
        "id": 275286374,
        "sender_full_name": "Xavier Martinet",
        "timestamp": 1647285921
    },
    {
        "content": "<p>Another option is to factor out the first ident parser (which is I believe the only one where you need to check the name).  Something like <code>do i ← ident, dispatch_on_ident i</code>.</p>",
        "id": 275286376,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647285923
    },
    {
        "content": "<p>On the C++ side there's the <code>get_token_info</code> function on the parser class which returns the info for the next token.  Not sure if it's worth the work but it's possible to expose that on the Lean side.</p>",
        "id": 275286637,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647286075
    },
    {
        "content": "<p>yup</p>\n<p>still, it is sad that in Lean 3 there are things like that that are not inspectable within Lean itself :( hopefully Lean 4 is coming!</p>",
        "id": 275286640,
        "sender_full_name": "Xavier Martinet",
        "timestamp": 1647286076
    },
    {
        "content": "<p>Lean 4 is already \"here\" enough to play with things like this, and I would expect that you can do this kind of normalization since it isn't too different from what mathport is already doing</p>",
        "id": 275296355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647291185
    }
]