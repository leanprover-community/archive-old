[
    {
        "content": "<p>So, just getting my toes wet with meta here... </p>\n<p>Let's say I have a list of expressions, and I would like to partition them into a sublist that matches a given pattern and a sublist that does not. What's the easiest way to do this? There's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.match_expr\">docs#tactic.match_expr</a> but a) that's a tactic and b) there's a weird argument I don't understand (what exactly does it mean a function takes an argument that's already defined, anyway?); there's also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/expr.match_app\">docs#expr.match_app</a> (for example) but it also takes a fixed argument, in this case <code>elab</code>.</p>",
        "id": 285274439,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1654617960
    },
    {
        "content": "<p>which I don't know how to provide</p>",
        "id": 285274503,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1654617977
    },
    {
        "content": "<p>The <code>:=</code> in the function input is a default value:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">add</span> <span class=\"mi\">5</span> <span class=\"c1\">-- 7</span>\n<span class=\"k\">#eval</span> <span class=\"n\">add</span> <span class=\"mi\">5</span> <span class=\"mi\">3</span> <span class=\"c1\">-- 8</span>\n</code></pre></div>",
        "id": 285274914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654618140
    },
    {
        "content": "<p>Can you give a bit more detail about what sort of thing you want to match, or even some code with blanks to be filled in?</p>",
        "id": 285275387,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654618340
    },
    {
        "content": "<p>This may not be the most efficient code, but, given what I imagine that you want to do with the <code>smul</code> application, it might be useful.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.core</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n\n<span class=\"sd\">/-- Sort a list of `expr`s into two lists: one consisting of expressions that begin with an `expr.app` and one consisting of the rest. -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">select_apps</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"o\">([],</span> <span class=\"o\">[])</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">expr.app</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">select_apps</span> <span class=\"n\">as</span> <span class=\"k\">in</span>  <span class=\"c1\">-- the `e@` assigns the name `e` to the matched expression, so you can use it later.</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">select_apps</span> <span class=\"n\">as</span> <span class=\"k\">in</span>\n  <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"o\">::</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"k\">in</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"mi\">7</span> <span class=\"mi\">8</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"k\">do</span>  <span class=\"c1\">-- &lt;--- put the cursor here to see the result of the `trace`s</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">e1</span> <span class=\"bp\">∧</span> <span class=\"bp\">%%</span><span class=\"n\">e2</span> <span class=\"bp\">∧</span> <span class=\"bp\">%%</span><span class=\"n\">e3</span> <span class=\"bp\">∧</span> <span class=\"bp\">%%</span><span class=\"n\">e4</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">apps</span><span class=\"o\">,</span> <span class=\"n\">napps</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">select_apps</span> <span class=\"o\">[</span><span class=\"n\">e1</span><span class=\"o\">,</span> <span class=\"n\">e2</span><span class=\"o\">,</span> <span class=\"n\">e3</span><span class=\"o\">,</span> <span class=\"n\">e4</span><span class=\"o\">],</span>\n  <span class=\"n\">trace</span> <span class=\"s2\">\"* applications:\"</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">apps</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">* non applications:\"</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">napps</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n</code></pre></div>\n<p>I think that this code contains most of the tricks that I constantly use when meta-programming.</p>",
        "id": 285297051,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654627692
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/filtering.20an.20expr.20list.20for.20matches/near/285275387\">said</a>:</p>\n<blockquote>\n<p>Can you give a bit more detail about what sort of thing you want to match, or even some code with blanks to be filled in?</p>\n</blockquote>\n<p>Well, I'd like to be able to match any pattern, really; but specifically I want to find things of the form <code>( _ • r)</code> for a constant <code>r</code></p>",
        "id": 285327586,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1654644816
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/filtering.20an.20expr.20list.20for.20matches/near/285297051\">said</a>:</p>\n<blockquote>\n<p>This may not be the most efficient code, but, given what I imagine that you want to do with the <code>smul</code> application, it might be useful.<br>\n(snip)<br>\nI think that this code contains most of the tricks that I constantly use when meta-programming.</p>\n</blockquote>\n<p>Yeah, I was wondering if I would have to just write my own inductive destructor. Thanks!</p>",
        "id": 285327661,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1654644895
    },
    {
        "content": "<p>Chasing both approaches at once, can anyone guess what's going wrong here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.multiset_smul_collect</span> <span class=\"o\">:</span> <span class=\"n\">conv</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">do</span> <span class=\"o\">{</span>\n    <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">lhs</span><span class=\"o\">,</span> <span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.target_lhs_rhs</span><span class=\"o\">,</span>\n    <span class=\"k\">match</span> <span class=\"n\">expr.to_list</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">lhs</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n          <span class=\"k\">do</span> <span class=\"o\">{</span>\n            <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"bp\">%%</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">return</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n            <span class=\"n\">tactic.trace</span> <span class=\"o\">(</span><span class=\"n\">list.filter_map</span> <span class=\"o\">(</span><span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">•</span> <span class=\"bp\">%%</span><span class=\"n\">r</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">match_app</span> <span class=\"n\">tl</span> <span class=\"o\">)</span>\n          <span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.trace</span> <span class=\"s2\">\"oops\"</span>\n    <span class=\"kd\">end</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">return</span>\n</code></pre></div>\n<p>It's not intended to really <em>do</em> anything yet (other than trace), but there's an error under <code>list.filter_map</code> complaining about a type mismatch:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">list.filter_map</span> <span class=\"o\">(</span><span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_x_1</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">has_scalar.smul</span> <span class=\"n\">_</span> <span class=\"n\">_x_1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subst</span> <span class=\"o\">(</span><span class=\"n\">to_pexpr</span> <span class=\"n\">r</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">match_app</span>\n<span class=\"n\">term</span>\n  <span class=\"o\">(</span><span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_x_1</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">has_scalar.smul</span> <span class=\"n\">_</span> <span class=\"n\">_x_1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subst</span> <span class=\"o\">(</span><span class=\"n\">to_pexpr</span> <span class=\"n\">r</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">match_app</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"n\">ff</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span> <span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 285328787,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1654645783
    },
    {
        "content": "<p>which I don't know what to make of</p>",
        "id": 285328863,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1654645831
    },
    {
        "content": "<p>Oh, wait, dammit I got my wires crossed and thought I was working with the generic match-a-pattern functionality from <code>tactics</code>. Nevermind lol</p>",
        "id": 285329048,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1654646000
    },
    {
        "content": "<p>If I understood correctly, this might be useful:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.core</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group.defs</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">expr</span>\n\n<span class=\"c1\">--  this function appears in `move_add`</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">list_summands</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a.list_summands</span> <span class=\"bp\">++</span> <span class=\"n\">b.list_summands</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span>            <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span>\n\n<span class=\"c1\">--  similar to function `candidates` in `move_add`</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">list_smuls</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"bp\">%%</span><span class=\"n\">r</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"n\">prod.mk</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">a.list_summands</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">r.list_summands</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">e</span> <span class=\"n\">f</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"n\">e.list_smuls</span> <span class=\"bp\">++</span> <span class=\"n\">f.list_smuls</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pi</span>  <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">e</span> <span class=\"n\">f</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"n\">e.list_smuls</span> <span class=\"bp\">++</span> <span class=\"n\">f.list_smuls</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">mvar</span>  <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">e</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"n\">e.list_smuls</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">e</span> <span class=\"n\">f</span><span class=\"o\">)</span>      <span class=\"o\">:=</span> <span class=\"n\">e.list_smuls</span> <span class=\"bp\">++</span> <span class=\"n\">f.list_smuls</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">elet</span> <span class=\"n\">_</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">e.list_smuls</span> <span class=\"bp\">++</span> <span class=\"n\">f.list_smuls</span> <span class=\"bp\">++</span> <span class=\"n\">g.list_smuls</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span>              <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">expr</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>  <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">d</span> <span class=\"bp\">•</span> <span class=\"n\">t</span> <span class=\"k\">in</span> <span class=\"c1\">-- `∀` adds useless noise, the `let` contributes below</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"bp\">•</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"k\">do</span>  <span class=\"c1\">--  note that the isolated `t` on the rhs does not appear in the list :(</span>\n  <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.target</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.trace</span> <span class=\"n\">t.list_smuls</span>\n</code></pre></div>",
        "id": 285335806,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654653266
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/filtering.20an.20expr.20list.20for.20matches/near/285335806\">said</a>:</p>\n<blockquote>\n<p>If I understood correctly, this might be useful:<br>\n<em>snip</em></p>\n</blockquote>\n<p>hmm, this does look useful<br>\nthanks, I was actually just about to ask about a related issue<br>\nlet's see if this pattern works</p>",
        "id": 285640752,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1654846417
    }
]