[
    {
        "content": "<p>Hi, does anyone know what's going on in the following snippet?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">→</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">trivial</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">test&#39;</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">→</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">trivial</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">mk_test</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span>\n  <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">test</span> <span class=\"n\">trivial</span><span class=\"o\">),</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">e</span> <span class=\"n\">trivial</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">exact</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">mk_test&#39;</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span>\n  <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">test&#39;</span> <span class=\"n\">rfl</span><span class=\"o\">),</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">e</span> <span class=\"n\">trivial</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">exact</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">mk_test</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">a&#39;</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">mk_test&#39;</span> <span class=\"c1\">-- function expected at `rfl` term has type `?m_2 = ?m_2`</span>\n</code></pre></div>\n\n\n<p>In both cases, infering the type of <code>e</code> gives <code>true → true</code> as expected, but for some reason the second <code>to_expr</code> fails in <code>mk_test'</code>.</p>",
        "id": 204298507,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1595074805
    },
    {
        "content": "<p>This definitely looks like a bug, one I don't remember seeing before. It seems like the elaborator is ignoring the <code>as_is</code> annotation on <code>e</code>.</p>",
        "id": 204304167,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595085187
    },
    {
        "content": "<p>For a bit more explanation: after <code>  e ← tactic.to_expr ``(test' rfl),</code> <code>e</code> is a fully elaborated expr. When you insert it into <code>``(%%e trivial)</code>, which is a <code>pexpr</code>, Lean knows that <code>e</code> is already elaborated and makes a note of this. You can see the note if you <code>trace ``(%%e trivial)</code>. When you elaborate that <code>pexpr</code> it should know not to touch the thing inside this annotation.</p>",
        "id": 204304248,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595085341
    },
    {
        "content": "<p>Thank you for having a look at this. I have opened <a href=\"https://github.com/leanprover-community/lean/issues/395\">lean#395</a>.</p>",
        "id": 204304871,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1595086370
    }
]