[
    {
        "content": "<p>In a tactic, is there a way to tell Lean to apply a tactic, inspect the resulting tactic state and they roll back to the previous tactic state without loosing all information? I am meta-meta-programming. I want my tactic to inspect the goal, say: \"If you apply assumption h then the new goal will be ...\" but not actually applying assumption h. I know I can do </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">do</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">trace</span> <span class=\"s2\">\"some text, fail \"\" } &lt;|&gt; do</span>\n<span class=\"s2\">...</span>\n</code></pre></div>\n<p>but this only work with <code>trace</code>, I can't assign a variable in the first block and use it in the second one. Does my question make sense?</p>",
        "id": 268582695,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642616711
    },
    {
        "content": "<p>Maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.lock_tactic_state\">docs#tactic.lock_tactic_state</a> ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.core</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">ta</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">l</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">lock_tactic_state</span> <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">apply</span> <span class=\"n\">false.elim</span><span class=\"o\">],</span> <span class=\"n\">get_state</span><span class=\"o\">),</span>\n  <span class=\"n\">trace</span> <span class=\"n\">l</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ta</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 268583949,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1642617310
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.lock_tactic_state\">docs#tactic.lock_tactic_state</a> the same as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.retrieve\">docs#tactic.retrieve</a> ?</p>",
        "id": 268584185,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1642617444
    },
    {
        "content": "<p>No, it's the same as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.retrieve'\">docs#tactic.retrieve'</a></p>",
        "id": 268586463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642618437
    },
    {
        "content": "<p>The difference is that regular <code>retrieve</code> does not roll back the tactic state in case of error while <code>retrieve'</code> rolls it back either way</p>",
        "id": 268586554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642618472
    },
    {
        "content": "<p>Er, yeah, that's the one I was reading. Pesky <code>'</code> is hard to see</p>",
        "id": 268586874,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1642618621
    },
    {
        "content": "<p>Should we dedup these?</p>",
        "id": 268586889,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1642618628
    },
    {
        "content": "<p>thanks everybody!</p>",
        "id": 268587971,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642619035
    }
]