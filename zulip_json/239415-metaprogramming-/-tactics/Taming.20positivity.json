[
    {
        "content": "<p>I am faced with awful goals in <a href=\"https://github.com/leanprover-community/mathlib/pull/15440\">#15440</a> that are in the scope of <code>positivity</code>. For it to work there, it needs to know that <code>0 ≤ ((n : ℕ) : α)</code> so I tried writing an extension and failed miserably.</p>",
        "id": 294131959,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660843147
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.positivity</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">positivity</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">nat_cast_nonneg</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n.cast_nonneg</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">nat_cast_pos</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat.cast_pos.2</span> <span class=\"n\">hn</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">int_cast_nonneg</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">int.cast_zero</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">int.cast_mono</span> <span class=\"n\">hn</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">int_cast_pos</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">int.cast_pos.2</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">rat_cast_nonneg</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">rat.cast_nonneg.2</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">rat_cast_pos</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rat.cast_pos.2</span>\n\n<span class=\"sd\">/-- Extension for the `positivity` tactic: cast of a natural is nonnegative. -/</span>\n<span class=\"kd\">@[positivity]</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">positivity_coe</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">strictness</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">lift_t</span> <span class=\"bp\">%%</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">typ_a</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">strictness_a</span> <span class=\"bp\">←</span> <span class=\"n\">core</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"k\">match</span> <span class=\"n\">typ_a</span><span class=\"o\">,</span> <span class=\"n\">strictness_a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">positive</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">positive</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">mk_app</span> <span class=\"bp\">``</span><span class=\"n\">nat_cast_pos</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">nonnegative</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">nonnegative</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">mk_app</span> <span class=\"bp\">``</span><span class=\"n\">nat_cast_nonneg</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">positive</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">positive</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">mk_app</span> <span class=\"bp\">``</span><span class=\"n\">int_cast_pos</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">nonnegative</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">nonnegative</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">mk_app</span> <span class=\"bp\">``</span><span class=\"n\">int_cast_nonneg</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"n\">positive</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">positive</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">mk_app</span> <span class=\"bp\">``</span><span class=\"n\">rat_cast_pos</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"n\">nonnegative</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">nonnegative</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">mk_app</span> <span class=\"bp\">``</span><span class=\"n\">rat_cast_nonneg</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">failed</span>\n  <span class=\"kd\">end</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">failed</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 294131980,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660843156
    },
    {
        "content": "<p>What did I do wrong?</p>",
        "id": 294132039,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660843180
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 294132166,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660843209
    },
    {
        "content": "<p>I don't think the function is called <code>lift_t</code></p>",
        "id": 294132310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660843258
    },
    {
        "content": "<p><code>coe</code> doesn't work either at least.</p>",
        "id": 294132389,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660843286
    },
    {
        "content": "<p>it definitely needs to be <code>coe</code>, if you add a <code>trace</code> you can see your function doesn't even get called otherwise</p>",
        "id": 294132702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660843392
    },
    {
        "content": "<p>How do I add a trace?</p>",
        "id": 294132972,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660843465
    },
    {
        "content": "<p><code>trace a,</code> in the do block</p>",
        "id": 294132996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660843474
    },
    {
        "content": "<p>the other issue is that you are failing if <code>core a</code> fails, which means that the <code>nat_cast_nonneg</code> case doesn't work</p>",
        "id": 294133451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660843615
    },
    {
        "content": "<p>Aaah, I know. <code>core a</code> fails.</p>",
        "id": 294133466,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660843617
    },
    {
        "content": "<p>So I should another extension that proves that all naturals are nonnegative?</p>",
        "id": 294133537,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660843639
    },
    {
        "content": "<p>You need to wrap it with <code>try_core</code> to handle the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[positivity]</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">positivity_coe</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">strictness</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"bp\">%%</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">typ_a</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">strictness_a</span> <span class=\"bp\">←</span> <span class=\"n\">try_core</span> <span class=\"o\">(</span><span class=\"n\">core</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n  <span class=\"k\">match</span> <span class=\"n\">typ_a</span><span class=\"o\">,</span> <span class=\"n\">strictness_a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">positive</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">positive</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">mk_app</span> <span class=\"bp\">``</span><span class=\"n\">nat_cast_pos</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">nonnegative</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">mk_app</span> <span class=\"bp\">``</span><span class=\"n\">nat_cast_nonneg</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">positive</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">positive</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">mk_app</span> <span class=\"bp\">``</span><span class=\"n\">int_cast_pos</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">nonnegative</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nonnegative</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">mk_app</span> <span class=\"bp\">``</span><span class=\"n\">int_cast_nonneg</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">positive</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">positive</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">mk_app</span> <span class=\"bp\">``</span><span class=\"n\">rat_cast_pos</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">nonnegative</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nonnegative</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">mk_app</span> <span class=\"bp\">``</span><span class=\"n\">rat_cast_nonneg</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">failed</span>\n  <span class=\"kd\">end</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">failed</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span> <span class=\"c1\">-- ok</span>\n</code></pre></div>",
        "id": 294133558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660843646
    },
    {
        "content": "<p>Also, is this design alright or should I write a different extension for each coercion? For example, this doesn't handle <code>nnreal</code>.</p>",
        "id": 294134500,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660843910
    },
    {
        "content": "<p>checking the types is not very robust. For instance this will fail if you are using the nat -&gt; int coercion</p>",
        "id": 294135468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660844186
    },
    {
        "content": "<p>you should pattern match on the coe instance itself</p>",
        "id": 294135512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660844199
    },
    {
        "content": "<p>like <code>(@coe %%typ_a _ %%inst %%a)</code> and then match on <code>inst</code></p>",
        "id": 294135644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660844240
    },
    {
        "content": "<p>it's fine that this doesn't do all coes; there is no requirement that this is the only <code>coe</code> extension</p>",
        "id": 294135861,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660844303
    },
    {
        "content": "<p>Are you sure? That's part of what Gabriel is changing.</p>",
        "id": 294135875,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660844306
    },
    {
        "content": "<p>not sure what you are referring to</p>",
        "id": 294135994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660844346
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_comm_group_with_one\">docs#add_comm_group_with_one</a></p>",
        "id": 294136048,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660844365
    },
    {
        "content": "<p>In particular, in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.comm_ring\">docs#int.comm_ring</a> you can see that the coercion is implemented using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.of_nat\">docs#int.of_nat</a>.</p>",
        "id": 294136346,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660844448
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, what am I doing wrong now?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.positivity</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">positivity</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">nonneg_of_canon</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">canonically_ordered_add_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">zero_le</span> <span class=\"n\">_</span>\n\n<span class=\"sd\">/-- Extension for the `positivity` tactic: Any elemeny of a canonically ordered additive monoid is</span>\n<span class=\"sd\">nonnegative. -/</span>\n<span class=\"kd\">@[positivity]</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">positivity_canon</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">strictness</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nonnegative</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">mk_app</span> <span class=\"bp\">``</span><span class=\"n\">nonneg_of_canon</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">nat_cast_nonneg</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n.cast_nonneg</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">nat_cast_pos</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat.cast_pos.2</span> <span class=\"n\">hn</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">int_coe_nat_nonneg</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n.cast_nonneg</span>\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">int_coe_nat_pos</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nat.cast_pos.2</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">int_cast_nonneg</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">int.cast_zero</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">int.cast_mono</span> <span class=\"n\">hn</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">int_cast_pos</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">int.cast_pos.2</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">rat_cast_nonneg</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">rat.cast_nonneg.2</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">rat_cast_pos</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rat.cast_pos.2</span>\n\n<span class=\"sd\">/-- Extension for the `positivity` tactic: casts from `ℕ`, `ℤ`, `ℚ`. -/</span>\n<span class=\"kd\">@[positivity]</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">positivity_coe</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">strictness</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"bp\">%%</span><span class=\"n\">typ_a</span> <span class=\"n\">_</span> <span class=\"bp\">%%</span><span class=\"n\">inst</span> <span class=\"bp\">%%</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">strictness_a</span> <span class=\"bp\">←</span> <span class=\"n\">core</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"k\">match</span> <span class=\"n\">inst</span><span class=\"o\">,</span> <span class=\"n\">strictness_a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_to_lift</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">nat.cast_coe</span><span class=\"o\">),</span> <span class=\"n\">positive</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">positive</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">mk_app</span> <span class=\"bp\">``</span><span class=\"n\">nat_cast_pos</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_to_lift</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">nat.cast_coe</span><span class=\"o\">),</span> <span class=\"n\">nonnegative</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">nonnegative</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">mk_app</span> <span class=\"bp\">``</span><span class=\"n\">nat_cast_nonneg</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_to_lift</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"bp\">@</span><span class=\"n\">coe_base</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">int.has_coe</span><span class=\"o\">),</span> <span class=\"n\">positive</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">positive</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">mk_app</span> <span class=\"bp\">``</span><span class=\"n\">int_coe_nat_pos</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_to_lift</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"bp\">@</span><span class=\"n\">coe_base</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">int.has_coe</span><span class=\"o\">),</span> <span class=\"n\">nonnegative</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">nonnegative</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">mk_app</span> <span class=\"bp\">``</span><span class=\"n\">int_coe_nat_nonneg</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_to_lift</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">int.cast_coe</span><span class=\"o\">),</span> <span class=\"n\">positive</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">positive</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">mk_app</span> <span class=\"bp\">``</span><span class=\"n\">int_cast_pos</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_to_lift</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">int.cast_coe</span><span class=\"o\">),</span> <span class=\"n\">nonnegative</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">nonnegative</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">mk_app</span> <span class=\"bp\">``</span><span class=\"n\">int_cast_nonneg</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_to_lift</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">rat.cast_coe</span><span class=\"o\">),</span> <span class=\"n\">positive</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">positive</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">mk_app</span> <span class=\"bp\">``</span><span class=\"n\">rat_cast_pos</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_to_lift</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">rat.cast_coe</span><span class=\"o\">),</span> <span class=\"n\">nonnegative</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">nonnegative</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">mk_app</span> <span class=\"bp\">``</span><span class=\"n\">rat_cast_nonneg</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">failed</span> <span class=\"c1\">-- TODO: Handle `coe : nnreal → real`</span>\n  <span class=\"kd\">end</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">failed</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n\n<span class=\"c1\">-- work</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">show_term</span> <span class=\"o\">{</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span> <span class=\"o\">}</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">show_term</span> <span class=\"o\">{</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span> <span class=\"o\">}</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">show_term</span> <span class=\"o\">{</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- fail</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">show_term</span> <span class=\"o\">{</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span> <span class=\"o\">}</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">show_term</span> <span class=\"o\">{</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span> <span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">equation compiler failed, maximum number of steps (2048) exceeded (possible solution: use</span>\n<span class=\"cm\">'set_option eqn_compiler.max_steps &lt;new-threshold&gt;') (use</span>\n<span class=\"cm\">'set_option trace.eqn_compiler.elim_match true' for additional details)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 294181096,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660862657
    },
    {
        "content": "<p>Ah, it just looks like I was matching on too much at once.</p>",
        "id": 294183042,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660863947
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/16141\">#16141</a></p>",
        "id": 294184659,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660865145
    },
    {
        "content": "<p>pattern matching on the coercion (edit: instance) feels like a bad idea; you don't want a syntactic math, you want one that unifies</p>",
        "id": 295045566,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661347341
    },
    {
        "content": "<p>Mario was the one suggesting this. What alternative do you offer? I was originally pattern-matching on the type, but that fails to distinguish <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.cast_coe\">docs#nat.cast_coe</a> from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.has_coe\">docs#int.has_coe</a>.</p>",
        "id": 295045906,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661347446
    },
    {
        "content": "<p>What do you mean by pattern matching on the type?</p>",
        "id": 295046490,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661347623
    },
    {
        "content": "<p>Matching on the expr of the type of the variable that's being cast.</p>",
        "id": 295046781,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661347709
    },
    {
        "content": "<p>You want to pattern match on the type, and <em>not</em> the instance. I suspect if you leave the instance as a <code>_</code> then lean uses typeclass inference and the end result is actually that you do end up matching on the instance</p>",
        "id": 295046803,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661347716
    },
    {
        "content": "<p>Yeah, so that fails to distinguish <code>coe : ℕ → ℤ</code> from <code>coe : ℕ → ℚ</code>.</p>",
        "id": 295046961,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661347760
    },
    {
        "content": "<p>Does matching <code>(@coe %%src %%dest %%inst %%a)</code>, then matching on <code>src, dest</code> pairs not work?</p>",
        "id": 295046996,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661347769
    },
    {
        "content": "<p>Sure that's an option.</p>",
        "id": 295047117,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661347804
    },
    {
        "content": "<p>It's the right option, because it doesn't try to compare typeclass instances syntactically</p>",
        "id": 295047184,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661347821
    },
    {
        "content": "<p>Matching <code>(@coe ℕ ℚ %%inst %%a)</code> etc at the top level should work too</p>",
        "id": 295048154,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661348119
    }
]