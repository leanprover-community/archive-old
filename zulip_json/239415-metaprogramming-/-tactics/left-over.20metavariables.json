[
    {
        "content": "<p>Dear All,</p>\n<p>in the code below, I think that the issue is that <code>pX</code> is supposed to have type <code>polynomial.X : polynomial R</code>, but Lean has no way of knowing which <code>R</code> I am talking about.  Is there a was to get Lean to unify the <code>Type</code> and <code>semiring</code> metavariables to what they should be and not produce these side goals?</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.degree.lemmas</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic.interactive</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">extract_deg_one_term</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">pX</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">polynomial.X</span><span class=\"o\">),</span>\n<span class=\"k\">do</span> <span class=\"n\">bo</span> <span class=\"bp\">←</span> <span class=\"n\">succeeds</span> <span class=\"bp\">$</span> <span class=\"n\">unify</span> <span class=\"n\">e</span> <span class=\"n\">pX</span><span class=\"o\">,</span>\n<span class=\"k\">if</span> <span class=\"n\">bo</span> <span class=\"k\">then</span> <span class=\"n\">trace</span> <span class=\"s2\">\"0\"</span> <span class=\"k\">else</span> <span class=\"n\">trace</span> <span class=\"s2\">\"1\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">polynomial.X</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"k\">do</span> <span class=\"n\">nh</span> <span class=\"bp\">←</span> <span class=\"n\">get_local</span> <span class=\"bp\">`</span><span class=\"n\">h</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">infer_type</span><span class=\"o\">,</span>\n  <span class=\"k\">match</span> <span class=\"n\">nh</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">tl</span> <span class=\"bp\">=</span> <span class=\"bp\">%%</span><span class=\"n\">tr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">extract_deg_one_term</span> <span class=\"n\">tl</span><span class=\"o\">,</span>\n    <span class=\"n\">trivial</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">skip</span>\n  <span class=\"kd\">end</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">## prints \"1\", so it went through the \"else\"</span>\n\n<span class=\"cm\">tactic failed, there are unsolved goals</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">2 goals</span>\n<span class=\"cm\">R : Type ?,</span>\n<span class=\"cm\">_inst_1 : semiring R,</span>\n<span class=\"cm\">h : polynomial.X ^ 2 = 1</span>\n<span class=\"cm\">⊢ Type ?</span>\n\n<span class=\"cm\">R : Type ?,</span>\n<span class=\"cm\">_inst_1 : semiring R,</span>\n<span class=\"cm\">h : polynomial.X ^ 2 = 1</span>\n<span class=\"cm\">⊢ semiring ?m_1</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 281614115,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652037790
    },
    {
        "content": "<p>As a check, if I replace <code>polynomial.X ^ 2</code> with <code>polynomial.X</code>, then the <code>do</code>-block prints <code>0</code> and Lean is happy that all goals have been solved.</p>",
        "id": 281614492,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652038385
    },
    {
        "content": "<p>Btw, if I add <code>{S : Type*} [semiring S]</code> and use them to close the meta-goals, Lean is happy.  This makes me think that the new goals are completely artificial</p>",
        "id": 281616986,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652042161
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> Do you need something like <code>instantiate_mvars</code>?</p>",
        "id": 281626117,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652056215
    },
    {
        "content": "<p>I think that I might, but I was not able to understand how to use it...</p>",
        "id": 281627782,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652058766
    },
    {
        "content": "<p>The problem here is that <code>to_expr</code> by default creates new goals for each metavariable after it's done with elaboration.  You can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.i_to_expr_no_subgoals\">docs#tactic.i_to_expr_no_subgoals</a> instead</p>",
        "id": 281628182,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652059342
    },
    {
        "content": "<p>That's equivalent to doing <code>to_expr ``(polynomial.X) tt ff</code></p>",
        "id": 281628196,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652059367
    },
    {
        "content": "<p>Wonderful, Kyle, thanks a lot!  In the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> it works!  I will try it in my context! <span aria-label=\"thank you\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"thank you\">:thank_you:</span></p>",
        "id": 281628246,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652059435
    },
    {
        "content": "<p>But you might also consider doing something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">extract_deg_one_term</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">polynomial.X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">trace</span> <span class=\"s2\">\"0\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">trace</span> <span class=\"s2\">\"1\"</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281628294,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652059460
    },
    {
        "content": "<p>Since the issue was earlier, why does it only create problems in one branch?</p>",
        "id": 281628306,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652059477
    },
    {
        "content": "<p>I'll try your second suggestion, but in my actual context I think that it may not work.  However, I am very grateful for suggested improvements!</p>",
        "id": 281628347,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652059550
    },
    {
        "content": "<p>When the unification is successful, then all the metavariables that were created end up being solved for here (they're in <code>e</code>'s <code>polynomial.X</code>), and solved metavariables are automatically removed from the goal list</p>",
        "id": 281628413,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652059634
    },
    {
        "content": "<p>Ah, of course!  <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> <br>\nThis is the magic of Lean working in the background!</p>",
        "id": 281628424,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652059679
    },
    {
        "content": "<p>Your first suggestion of adding <code>tt ff</code> works perfectly in my use-case and cuts down running time by literally an order of magnitude!</p>\n<p>I'll see if I can <code>match</code> more efficiently as well!</p>",
        "id": 281628582,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652059916
    }
]