[
    {
        "content": "<p>If I use <code>nontriviality</code> here<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/0c90c3ed1b520b34a37d12eddc6e74868e5ed97e/src/linear_algebra/basis.lean#L294\">https://github.com/leanprover-community/mathlib/blob/0c90c3ed1b520b34a37d12eddc6e74868e5ed97e/src/linear_algebra/basis.lean#L294</a><br>\nit produces automatically an instance <code>nontrivial M</code> (here <code>M</code> is a module over a semiring <code>R</code>). This in turn implies <code>nontrivial R</code> (that is what I need), via <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.subsingleton\">docs#module.subsingleton</a>. Is it possible to have <code>nontriviality</code> to do this for me? Note that  I know exactly nothing about tactic writing, so this can be nonsense/very easy.</p>",
        "id": 239154188,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621283024
    },
    {
        "content": "<p>I haven't used <code>nontriviality</code> a lot, but I believe from the docs at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.nontriviality\">docs#tactic.interactive.nontriviality</a> that <code>nontriviality R</code> will get you the <code>nontrivial R</code> instance.</p>",
        "id": 239155493,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1621283585
    },
    {
        "content": "<p>I have to go to bed soon, but I can take a closer look at it tomorrow if no one else wants to be first :)</p>",
        "id": 239155869,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1621283710
    },
    {
        "content": "<p>Thanks!<code>nontriviality R</code> says <code>Could not prove goal assuming subsingleton R</code>.  But note that my question has nothing to do with this specific goal, <code>nontriviality</code> is able to produce <code>nontrivial M</code>, and this always implies <code>nontrivial R</code>.</p>",
        "id": 239156445,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621283956
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[nontriviality]</span> <span class=\"kd\">instance</span> <span class=\"n\">ring.nontrivial_of_nontrivial_module</span> <span class=\"o\">[</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"n\">nontrivial</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">nontrivial</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"n\">classical.by_contradiction</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hR</span><span class=\"o\">,</span>\n  <span class=\"n\">not_subsingleton</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semimodule.subsingleton</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">not_nontrivial_iff_subsingleton.1</span> <span class=\"n\">hR</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≠</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">nontriviality</span> <span class=\"n\">R</span><span class=\"bp\">;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- _inst : nontrivial R appears</span>\n</code></pre></div>",
        "id": 239163248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621286916
    },
    {
        "content": "<p>Does that work without <code>instance</code>?</p>",
        "id": 239169201,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621290450
    },
    {
        "content": "<p>I am playing with this, and it doesn't seem to work without <code>instance</code>.</p>",
        "id": 239233025,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621335220
    },
    {
        "content": "<p>But adding this instance creates random problems elsewhere</p>",
        "id": 239233113,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621335265
    },
    {
        "content": "<p>What are the nature of the problems? One can give a constructive proof, it's just longer.</p>",
        "id": 239234851,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621336226
    },
    {
        "content": "<p>It's a dangerous instance just like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.subsingleton\">docs#module.subsingleton</a></p>",
        "id": 239234995,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621336305
    },
    {
        "content": "<p>(but we should definitely add it as a lemma if we don't already have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.nontrivial\">docs#module.nontrivial</a>)</p>",
        "id": 239235134,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621336358
    },
    {
        "content": "<p>The first problem I get is in <code>algebra/module/ordered</code>, in the proof of <code>ordered_module.mk''</code>: no real errors, but there are unsolved goals.<br>\nEssentially the final goal is <code>0 &lt; 1</code>, but <code>exact zero_lt_one</code> says<br>\n<code>maximum class-instance resolution depth has been reached (the limit can be increased by setting option 'class.instance_max_depth') (the class-instance resolution trace can be visualized by setting option 'trace.class_instances')</code></p>",
        "id": 239237815,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621337872
    },
    {
        "content": "<p>This seems to me a bad sign</p>",
        "id": 239237921,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621337923
    },
    {
        "content": "<p>Would it work to say a <code>local attribute [instance] module.nontrivial</code> only in the file you need it?</p>",
        "id": 239238396,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1621338188
    },
    {
        "content": "<p>For my proof it is even simpler, <code>nontriviality</code> creates <code>nontrivial M</code>, and so I can use Kevin's lemma with a <code>letI</code> by hand.</p>",
        "id": 239239891,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621339038
    },
    {
        "content": "<p>I think the solution here is to teach <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.nontriviality_by_assumption\">docs#tactic.nontriviality_by_assumption</a> about <code>module.nontrivial</code></p>",
        "id": 239242267,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621340114
    },
    {
        "content": "<p>Right now it does:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">apply_instance</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">solve_by_elim</span> <span class=\"o\">[</span><span class=\"n\">nontrivial_of_ne</span><span class=\"o\">,</span> <span class=\"n\">nontrivial_of_lt</span><span class=\"o\">]]</span>\n</code></pre></div>\n<p>If you could add <code>module.nontrivial</code> to that list I expect it would work; although obviously you'd need a mechanism to register the lemma from elsewhere</p>",
        "id": 239242397,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621340169
    }
]