[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span>  As I am trying to learn Lean tactics, I sort of did the cancel_denoms exercise:<br>\n<a href=\"/user_uploads/3121/XjNMfwBK5joWhoWzfmuhzMvC/cancel_denoms.lean\">cancel_denoms.lean</a> <br>\nWould you like to integrate it to mathlib? Notes:</p>\n<ul>\n<li>I defined <code>lcm</code> and <code>gcd</code> for rational numbers there. If you agree it is a reasonable definition, it could belong somewhere else.</li>\n<li>It is still handling numerical values only. Handling general expression would be chalenging, I would need some sort of the least common multiple for polynomial expressions.</li>\n<li>It is not a conservative extension -- some cases are handled a bit differently.</li>\n</ul>",
        "id": 214181630,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1603371065
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133339\">@Miroslav Olšák</span> An improved <code>cancel_denoms</code> would be great to have in mathlib. It's only expected to handle numerical values, polynomial denominators are indeed much harder. Do the <code>linarith</code> tests pass using your <code>cancel_denoms</code> in place of the existing one? That would be a very good sign.</p>",
        "id": 214237061,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603395095
    },
    {
        "content": "<p>I'm on vacation and won't be able to look at this until next week at the earliest.</p>",
        "id": 214237087,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603395108
    },
    {
        "content": "<p>But if you make a PR I'll review when I have time, or of course I don't mind if others review first!</p>",
        "id": 214237237,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603395158
    },
    {
        "content": "<p>I am not sure how to perform the tests. Where are they? And if I just replace the file <code>cancel_denoms.lean</code> in the mathlib directory by mine, will Lean reload it? (as far as I understand, mathlib is somehow precompiled)</p>",
        "id": 214249597,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1603401607
    },
    {
        "content": "<p>I hope that my version will work but there still could be some issues with zeroes, and it is also probably slower as it is handling fractions generally as <code>expr / expr</code>, and uses rational numbers instead of naturals.</p>",
        "id": 214249614,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1603401619
    },
    {
        "content": "<p>I can wait when you will have time. But help from someone else is also welcome.</p>",
        "id": 214249635,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1603401630
    },
    {
        "content": "<p>You can run the <code>linarith</code> tests locally by running <code>lean test/linarith.lean</code>.</p>\n<p>You can also push your edits to a branch on the mathlib repo (do you need access?) and then the CI will run all the tests for you.</p>",
        "id": 214249829,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603401748
    },
    {
        "content": "<p>OK, so it is not as easy to pass the tests. First it turned out that the function <code>derive</code> is actually necessary, so I implemented it again, and now it does not work for some reason. Could it be because I leave too much mess in the expression which is cleaned up by <code>norm_num</code> in the interactive version?<br>\nCurrent version: <a href=\"/user_uploads/3121/0udOeJLjBnoXk3sPne7B17yu/cancel_denoms.lean\">cancel_denoms.lean</a></p>",
        "id": 214285547,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1603441600
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133339\">@Miroslav Olšák</span> I've sent you an invite to the mathlib repository. Instead of sharing lean files here, it's much easier to discuss/comment on a git branch. <a href=\"https://github.com/leanprover-community/mathlib/tree/cancel-denoms-mirefek\">https://github.com/leanprover-community/mathlib/tree/cancel-denoms-mirefek</a></p>",
        "id": 214615076,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603737118
    },
    {
        "content": "<p>(I haven't made a PR yet. You should do that so you get the credit for it.)</p>",
        "id": 214615131,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603737130
    },
    {
        "content": "<p>Indeed, <code>derive</code> is necessary and isn't strong enough in your version. You can see in the first failing <code>linarith</code> test what's going on:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.linarith</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">A</span><span class=\"bp\">*</span><span class=\"n\">B</span><span class=\"bp\">/</span><span class=\"mi\">8</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">linarith</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 214615284,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603737210
    },
    {
        "content": "<p>After the <code>cancel_denoms</code> preprocessing, you're left with </p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Preprocessing: cancel denominators\n[1 * (1 * (1 * A) * (1 * B)) / (1 / 8 * 8) ≤ 0, -(A * B) &lt; 0]\n</code></pre></div>",
        "id": 214615323,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603737234
    },
    {
        "content": "<p>The <code>1*</code>s shouldn't really matter, but the denominator isn't cancelled, and that does matter.</p>",
        "id": 214615434,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603737278
    },
    {
        "content": "<p>For comparison, the current <code>cancel_denoms</code> results in </p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Preprocessing: cancel denominators\n[1 * A * (1 * B) ≤ 0, -(A * B) &lt; 0]\n</code></pre></div>",
        "id": 214615500,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603737323
    },
    {
        "content": "<p><code>linarith</code> might be smart enough to deal with a <code>/ 1</code> left over, off the top of my head I'm not sure. But I guess it doesn't like the <code>/ (1/8 * 8)</code>.</p>",
        "id": 214615812,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603737461
    },
    {
        "content": "<p>I haven't looked carefully at the diff between the old version and yours yet. Do you have an idea how you might fix this? If not, I'll look more closely.</p>",
        "id": 214616007,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603737551
    },
    {
        "content": "<p>If you do, you can push your changes directly to the branch <a href=\"https://github.com/leanprover-community/mathlib/tree/cancel-denoms-mirefek\">branch#cancel-denoms-mirefek</a></p>",
        "id": 214616192,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603737633
    },
    {
        "content": "<p>Github will try to build every commit that gets pushed. So you'll see a red X there as long as things are failing to build, including the tests. In this case, though, it's maybe easier to build the linarith test file locally. There aren't many imports between the test file and cancel_denoms.lean</p>",
        "id": 214616444,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603737753
    },
    {
        "content": "<p>I think I can fix it. I was just lazy, so if the <code>norm_num</code> actually canceled the mess, I didn't care so much.</p>",
        "id": 214617656,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1603738361
    },
    {
        "content": "<p>norm_num can't cancel that</p>",
        "id": 214617702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603738389
    },
    {
        "content": "<p><code>ring</code> might</p>",
        "id": 214617711,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603738395
    },
    {
        "content": "<p>OK, I am not sure what it was.</p>",
        "id": 214617739,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1603738410
    },
    {
        "content": "<p>I reused a lot of the original code.</p>",
        "id": 214617852,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1603738444
    },
    {
        "content": "<p><code>ring</code> won't be able to fix that the lhs is apparently 64 times larger than rob's version? Does that matter?</p>",
        "id": 214617898,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603738471
    },
    {
        "content": "<p>I will look at the github repository, and fix the issues, hopefully this week. I was not sure how much I have to care about the special cases as long as it was somehow miraculously working on the basic examples I tried.</p>",
        "id": 214618224,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1603738624
    },
    {
        "content": "<p>But if someone knows why the interactive version contrary to <code>derive</code> reduces the expression, I would appreciate knowing it.</p>",
        "id": 214618541,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1603738793
    },
    {
        "content": "<p>I don't see any tactic <code>ring</code> used there.</p>",
        "id": 214618621,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1603738822
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> I pushed a version which already passes the linarith tests. On the other hand, they are about 2.5 times slower than with the original version, I am not exactly sure what to do about it.</p>",
        "id": 214956967,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1603973040
    },
    {
        "content": "<p>I received a message from Github that \"continuous integration: Some jobs were not successful\": <a href=\"https://github.com/leanprover-community/mathlib/actions/runs/335756434\">https://github.com/leanprover-community/mathlib/actions/runs/335756434</a><br>\nWhat does it mean?</p>",
        "id": 214961322,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1603975930
    },
    {
        "content": "<p>Whenever you push to a branch on the mathlib repository, Github tries to build and lint the commit you pushed. This process failed, so your changes have broken something in mathlib. You can click on \"Lint style\" and \"Build mathlib\" on the left and it'll show you exactly what errors were found. You don't have to fix them immediately, but they should be fixed when you make a PR.</p>",
        "id": 214963130,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1603976819
    },
    {
        "content": "<p>OK, one error is easily fixable \"too long lines\", and the other is the <code>linarith</code> tactic failing somewhere (in particular <code>gromov_hausdorff.lean</code>).  Would it be possible to figure out from it where the <code>cancel_denom</code> does not work properly?</p>",
        "id": 214978001,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1603983495
    },
    {
        "content": "<p>Yes, it should be line 531:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>/home/runner/work/mathlib/mathlib/src/topology/metric_space/gromov_hausdorff.lean:531:30: error: linarith failed to find a contradiction\n</code></pre></div>",
        "id": 214978527,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603983677
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/d510a637b9d1d1cb72acb1f847694281f0c61051/src/topology/metric_space/gromov_hausdorff.lean#L531\">https://github.com/leanprover-community/mathlib/blob/d510a637b9d1d1cb72acb1f847694281f0c61051/src/topology/metric_space/gromov_hausdorff.lean#L531</a></p>",
        "id": 214978761,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603983738
    },
    {
        "content": "<p>The goal seems to be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ε₂</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε₂</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">δ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 214978899,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603983785
    },
    {
        "content": "<p>You can use <code>set_option trace.linarith true</code> to get some information about what <code>linarith</code> is doing. In particular it will print the hypotheses before and after denominator cancellation.</p>",
        "id": 214992125,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603988833
    },
    {
        "content": "<p>For the efficiency problem, I'll take a look. <code>set_option profiler true</code> often gives useful information here.</p>",
        "id": 214992235,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603988879
    },
    {
        "content": "<p>The pattern you use <a href=\"https://github.com/leanprover-community/mathlib/blob/cancel-denoms-mirefek/src/tactic/cancel_denoms.lean#L142\">here</a> and above, where you try to apply a bunch of different lemmas to see which one works, can be expensive. It's better if you can identify which lemma is the right one based on the values you have access to, and apply it directly.</p>",
        "id": 215010048,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603996685
    },
    {
        "content": "<p>I'm not sure that this is what's causing the slowdown though.</p>",
        "id": 215010069,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603996694
    },
    {
        "content": "<p>Your version is spending a lot more time in various places, including in <code>norm_num</code>.</p>",
        "id": 215010133,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603996740
    },
    {
        "content": "<p>Part of this is because it's doing more than the old version is. But on problems that the old version solves too, I wouldn't expect it to be doing too much more, not enough to see this kind of slowdown.</p>",
        "id": 215010206,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603996780
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/cancel-denoms-mirefek/src/tactic/cancel_denoms.lean#L158\">https://github.com/leanprover-community/mathlib/blob/cancel-denoms-mirefek/src/tactic/cancel_denoms.lean#L158</a> is wrong, this check only works if the original problem is over <code>rat</code>. A simpler check is <code>guard (v = 1)</code>.</p>",
        "id": 215010359,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603996855
    },
    {
        "content": "<p>This simplifies one call to <code>norm_num</code> but not by a huge amount.</p>",
        "id": 215010414,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603996896
    },
    {
        "content": "<p>Sure, I am aware of many places where some optimization could be added (I should try the profiler to see which is the bottleneck now).</p>",
        "id": 215068280,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1604048114
    },
    {
        "content": "<p>Now, I am rather planning to figure out the problem with <code>gromov_hausdorf.lean</code>.</p>",
        "id": 215068283,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1604048117
    },
    {
        "content": "<p>I don't get the problem with <code>gromov_hausdorf.lean</code>. When I enabled debug prints for <code>linarith</code>, I got</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Preprocessing</span><span class=\"o\">:</span> <span class=\"n\">make</span> <span class=\"n\">comparisons</span> <span class=\"k\">with</span> <span class=\"n\">zero</span>\n<span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">δ</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">xα</span> <span class=\"n\">xs</span> <span class=\"bp\">-</span> <span class=\"n\">ε₁</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">ε₂</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε₂</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">ε₂</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">]</span>\n<span class=\"n\">Preprocessing</span><span class=\"o\">:</span> <span class=\"n\">cancel</span> <span class=\"n\">denominators</span>\n<span class=\"o\">[</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ε₂</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">ε₂</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">ε₂</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">xα</span> <span class=\"n\">xs</span> <span class=\"bp\">-</span> <span class=\"n\">ε₁</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">δ</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">]</span>\n</code></pre></div>\n\n<p>But when I test <code>derive</code> on my own, like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">test_derive</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">pf</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">cancel_factors.derive</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">tp</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.infer_type</span> <span class=\"n\">pf</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.trace</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.trace</span> <span class=\"n\">tp</span>\n\n<span class=\"kd\">constants</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span>\n<span class=\"kd\">run_cmd</span> <span class=\"n\">test_derive</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>It behaves well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span>\n<span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 215070259,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1604049504
    },
    {
        "content": "<p>Maybe <code>linarith</code> does not use the simplification when the factor is 1?</p>",
        "id": 215070334,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1604049563
    },
    {
        "content": "<p>Hmm. There is something odd going on here. Didn't manage to locate it immediately. I'll take a closer look later today when I have the time.</p>",
        "id": 215114297,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1604073542
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133339\">Miroslav Olšák</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/cancel_denoms.20exercise/near/215070334\">said</a>:</p>\n<blockquote>\n<p>Maybe <code>linarith</code> does not use the simplification when the factor is 1?</p>\n</blockquote>\n<p>It's something to do with this, yes, but not as obviously as you might expect.</p>",
        "id": 215114370,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1604073580
    },
    {
        "content": "<p>Any progress? Should I look into <code>linarith</code>?</p>",
        "id": 215850517,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1604672017
    },
    {
        "content": "<p>Sorry. It's been a distracting week</p>",
        "id": 215851817,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1604672560
    },
    {
        "content": "<p>I'll find time to look into this today.</p>",
        "id": 215851831,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1604672565
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133339\">@Miroslav Olšák</span> sorry for the delay. I pushed a fix to the branch.</p>",
        "id": 215881013,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1604685235
    },
    {
        "content": "<p>The issue was with expressions that can be cancelled without a new factor, like <code>2 * (x / 2 + y)</code>. <code>cancel_denoms</code> needs to do some work here, and the old version unnecessarily multiplied the whole thing by 2. When the new one produces a factor of 1 there's an extra step needed to make sure that <code>1*</code> appears (or doesn't appear) in the right place.</p>",
        "id": 215881414,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1604685439
    }
]