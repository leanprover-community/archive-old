[
    {
        "content": "<p>I made this tactic combinator that intercepts any failure messages while its argument is evaluated, and reports them before returning success or failure. I found it handy for debugging <code>norm_num</code> plugins, since <code>norm_num</code> doesn't distinguish between failures due to failed matching and failures due to an internal tactic error. Do we want this in the library somewhere, and do we have anything like it already?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n\n<span class=\"sd\">/-- Run `t` while tracing any errors that are raised during evaluation of `t`. -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">with_trace_errors</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">result.success</span> <span class=\"n\">x</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">result.success</span> <span class=\"n\">x</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">result.exception</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">msg</span><span class=\"o\">)</span> <span class=\"n\">pos</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">tactic.trace</span> <span class=\"o\">(</span><span class=\"n\">msg</span> <span class=\"o\">())</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">fail</span> <span class=\"o\">(</span><span class=\"n\">msg</span> <span class=\"o\">()))</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">result.exception</span> <span class=\"n\">none</span> <span class=\"n\">pos</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">tactic.trace</span> <span class=\"s2\">\"failed!\"</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">failure</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 276865536,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1648470638
    },
    {
        "content": "<p>Is this <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.trace_error\">docs#tactic.trace_error</a> with <code>msg = \"\"</code>?</p>",
        "id": 276866303,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1648470985
    }
]