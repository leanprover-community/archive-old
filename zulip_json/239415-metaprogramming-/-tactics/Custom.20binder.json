[
    {
        "content": "<p>How to create a syntax rule so that <code>F (a ∈ b), ψ</code> translates to <code>f b (λ a =&gt; ψ)</code> where <code>a</code> appears free in <code>ψ</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>And it would be nice if there can be multiple binder parameters, for example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">ψ</span>\n</code></pre></div>\n<p>should translate to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">f</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ψ</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 286904959,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1655814430
    },
    {
        "content": "<p>I tried using <code>explicitBinders</code> like in the definition of <code>∃</code>, but couldn't make it work.</p>",
        "id": 286905250,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1655814596
    },
    {
        "content": "<p>Maybe this trick does what you want?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"F (\"</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">explicitBinders</span> <span class=\"s2\">\"∈\"</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"),\"</span> <span class=\"n\">φ</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"bp\">←</span> <span class=\"n\">expandExplicitBinders</span> <span class=\"bp\">``</span><span class=\"n\">id</span> <span class=\"n\">a</span> <span class=\"n\">φ</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">b</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"c1\">-- f X (id fun a =&gt; a) : α</span>\n</code></pre></div>",
        "id": 286930805,
        "sender_full_name": "Ramon Fernandez Mir",
        "timestamp": 1655825326
    }
]