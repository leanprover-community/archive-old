[
    {
        "content": "<p>Would it be possible to make <code>lift</code> not fail if it cannot clear an hypothesis? It is still useful even if the lifting condition hypothesis appears in another hypothesis.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.finite</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hs.to_finset</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">lift</span> <span class=\"n\">s</span> <span class=\"n\">to</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"n\">using</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">clear tactic failed, target type depends on 'hs'</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">α : Type ?,</span>\n<span class=\"cm\">s : finset α,</span>\n<span class=\"cm\">hs : ↑s.finite</span>\n<span class=\"cm\">⊢ hs.to_finset = ∅</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 314759019,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670529221
    },
    {
        "content": "<p>Of course, I can just do <code>lift s to finset α using id hs</code> but we might as well fix it to the source.</p>",
        "id": 314759176,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670529269
    },
    {
        "content": "<p>If you replace these two lines</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/10b4e499f43088dd3bb7b5796184ad5216648ab1/src/tactic/lift.lean#L135-L136\">https://github.com/leanprover-community/mathlib/blob/10b4e499f43088dd3bb7b5796184ad5216648ab1/src/tactic/lift.lean#L135-L136</a><br>\nnamely</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">if</span> <span class=\"n\">h_prf_nm</span> <span class=\"o\">:</span> <span class=\"n\">prf_nm.is_some</span> <span class=\"bp\">∧</span> <span class=\"n\">n.nth</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"n\">prf_nm</span> <span class=\"k\">then</span>\n    <span class=\"n\">get_local</span> <span class=\"o\">(</span><span class=\"n\">option.get</span> <span class=\"n\">h_prf_nm.1</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">clear</span> <span class=\"k\">else</span> <span class=\"n\">skip</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">new</span> <span class=\"bp\">←</span> <span class=\"n\">get_unused_name</span><span class=\"o\">,</span>\n    <span class=\"k\">if</span> <span class=\"n\">n.nth</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"n\">prf_nm</span> <span class=\"k\">then</span> <span class=\"n\">get_local</span> <span class=\"o\">(</span><span class=\"n\">option.get_or_else</span> <span class=\"n\">prf_nm</span> <span class=\"n\">new</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">clear</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">skip</span> <span class=\"k\">else</span> <span class=\"n\">skip</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>you probably obtain the behaviour that you want.  I tested it in your case and also on this example with smaller imports that compiles faster:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.lift</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">lift</span> <span class=\"n\">n</span> <span class=\"n\">to</span> <span class=\"n\">ℕ</span> <span class=\"n\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span>  <span class=\"c1\">--  now succeeds</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">foo</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I am not too happy with the \"new\" name and admittedly the proposal above checks less than what it did earlier, but since the alternative was skipping anyway, it may be ok...</p>",
        "id": 314791584,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1670541896
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/17869\">#17869</a>, to see if anything else breaks and if anyone else has comments!</p>\n<p><del>I made the removal of the issue with <code>clear</code> slightly more robust as well.</del><br>\nEDIT: I changed the previous message to reflect the slightly tighter change.</p>",
        "id": 314792935,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1670542587
    },
    {
        "content": "<p>Note that this already works if you use <code>lift s to finset α using hs with _ _ hs</code></p>",
        "id": 314793918,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670543178
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> can you port <code>lift</code> to mathlib 4? Right now any changes to lean 3 tactics are just making the port process harder.</p>",
        "id": 314794009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670543267
    },
    {
        "content": "<p>Kevin, I am going to seriously start with helping the porting process starting from next week: tomorrow is the last day of term and I am very short on time for a few more hours!</p>",
        "id": 314794123,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1670543334
    },
    {
        "content": "<p>There is actually a PR open: <a href=\"https://github.com/leanprover-community/mathlib4/pull/723\">https://github.com/leanprover-community/mathlib4/pull/723</a> by Yury, that is badly overdue for a review.</p>",
        "id": 314797027,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670545001
    }
]