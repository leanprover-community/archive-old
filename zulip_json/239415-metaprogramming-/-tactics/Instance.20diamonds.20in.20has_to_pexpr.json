[
    {
        "content": "<p>I was struggling to wrap my head around how antiquotations work, and discoverred that it was because there is an instance diamond:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"kd\">meta</span><span class=\"bp\">.</span><span class=\"n\">expr</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">i1</span> <span class=\"o\">:</span> <span class=\"n\">has_to_pexpr</span> <span class=\"n\">pexpr</span> <span class=\"o\">:=</span> <span class=\"n\">pexpr.has_to_pexpr</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">i2</span> <span class=\"o\">:</span> <span class=\"n\">has_to_pexpr</span> <span class=\"n\">pexpr</span> <span class=\"o\">:=</span> <span class=\"n\">has_reflect.has_to_pexpr</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">p1</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">to_pexpr</span> <span class=\"n\">_</span> <span class=\"n\">i1</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">p2</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">to_pexpr</span> <span class=\"n\">_</span> <span class=\"n\">i2</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"bp\">=</span> <span class=\"n\">p2</span><span class=\"o\">)</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 287083928,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655917548
    },
    {
        "content": "<p>The conflicting instances are <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_reflect.has_to_pexpr\">docs#has_reflect.has_to_pexpr</a>  and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pexpr.has_to_pexpr\">docs#pexpr.has_to_pexpr</a></p>",
        "id": 287084016,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655917571
    },
    {
        "content": "<p>I think the intent of the former (introduced in <a href=\"https://github.com/leanprover-community/mathlib/pull/3477\">#3477</a>) is to make <code>%%x</code> a shorthand for <code>%%`(x)</code>, but that's confusing for pexpr where the first spelling already has a different meaning.</p>",
        "id": 287084155,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655917656
    },
    {
        "content": "<p>Oh, that probably shouldn't be a (global) instance then. I don't remember why I added it anymore. Feel free to remove it, if it doesn't cause a massive amount of failures.</p>",
        "id": 287096794,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1655923665
    },
    {
        "content": "<p>Done in <a href=\"https://github.com/leanprover-community/mathlib/pull/14901\">#14901</a></p>",
        "id": 287099572,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655925060
    },
    {
        "content": "<p>Almost nothing depended on it</p>",
        "id": 287099585,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655925068
    }
]