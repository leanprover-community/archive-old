[
    {
        "content": "<p>I spent some time today making a faster <code>interval_cases</code> (draft at <a href=\"https://github.com/leanprover-community/mathlib/pull/12237\">#12237</a>). It focuses on just <code>ℕ</code>, <code>ℤ</code>, and <code>ℕ+</code>.</p>\n<p>Some examples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- takes about 6 seconds</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">40</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">22</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">24</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">interval_cases'</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- can make use of additional hypotheses, including conjunctions of inequalities</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">set.Ico</span> <span class=\"mi\">1</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">16</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">interval_cases'</span> <span class=\"n\">n</span> <span class=\"n\">using</span> <span class=\"o\">[</span><span class=\"n\">set.mem_Ico.mp</span> <span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- can merge hypotheses</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">10</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">20</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">11</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">11</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">interval_cases'</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">-- can operate on expressions in addition to variables</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w₁</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w₂</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">interval_cases'</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- substitutes variables everywhere like before</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">mod8_odd'</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hlo</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hhi</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hodd</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">int.odd_iff</span> <span class=\"n\">at</span> <span class=\"n\">hodd</span><span class=\"o\">,</span>\n  <span class=\"n\">interval_cases'</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">hodd</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272902966,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645589615
    },
    {
        "content": "<p>I'm not sure I've implemented things involving proof construction or goal management correctly. (And I'm sure there are better ways to go about it.)</p>\n<p>The <code>mk_prop</code> function builds up a proof of the disjunction <code>n = 4 \\/ n = 5 \\/ ... \\/ n = 10 \\/ false</code> given bounds <code>4 &lt;= n</code> and <code>n &lt; 11</code>, using a lot of <code>norm_num</code> to tie things together.</p>\n<p>Then, this is split up using a tactic I made called <code>cases_subst</code>. I built it out of the first tactics I could figure out how to string together:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">cases_subst</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">h</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">false.elim</span> <span class=\"bp\">%%</span><span class=\"n\">e</span><span class=\"o\">),</span>\n                   <span class=\"n\">tactic.exact</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">∨</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">focus1</span> <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"o\">[(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]),</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">b</span><span class=\"o\">])]</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.cases</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n               <span class=\"n\">focus'</span> <span class=\"o\">[</span><span class=\"n\">try_core</span> <span class=\"o\">(</span><span class=\"n\">subst</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(),</span> <span class=\"n\">cases_subst</span> <span class=\"n\">b</span><span class=\"o\">])</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">try_core</span> <span class=\"o\">(</span><span class=\"n\">subst</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272903579,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645590286
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Do you have any thoughts about speeding <code>interval_cases</code> up like this? Are there any other types <code>interval_cases</code> has been used on in practice?  (I've neglected <code>fin n</code>, but I wonder whether it make sense to instead do <code>interval_cases</code> on the underlying <code>nat</code>.)</p>",
        "id": 272903786,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645590523
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> was talking about this a couple days ago, maybe he has some ideas</p>",
        "id": 272915716,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645603841
    },
    {
        "content": "<p>I was not really sure what to do about fin n. It's possible to have the tactic produce fin numerals, but it seems like that is unlikely to be what the user wants because of all the modulo inside</p>",
        "id": 272915875,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645603964
    },
    {
        "content": "<p>Any thoughts on whether I should pursue this version of <code>interval_cases</code> further? (Maybe I should update the PR to replace <code>interval_cases</code> rather than having a parallel <code>interval_cases'</code> and check that it works as a drop-in replacement?)</p>",
        "id": 273528125,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1646070797
    }
]