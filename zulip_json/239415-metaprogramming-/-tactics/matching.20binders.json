[
    {
        "content": "<p>Is something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">%%</span><span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"bp\">%%</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">failed</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">failed</span>\n</code></pre></div>\n\n<p>ever a good idea? Or will <code>B</code> end up in some weird state (it should be an expression in a modified context)? Should I just use <code>open_lambdas</code>?</p>",
        "id": 213714877,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603040031
    },
    {
        "content": "<p><code>B</code> will be an open term with one free de Bruijn variable. It's easy to repair. You can also match <code>sigma</code> applied to a lambda and use <code>open_lambdas</code> if you prefer. That seems over kill to me</p>",
        "id": 213715095,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1603040374
    },
    {
        "content": "<p>Just to check, by \"match <code>sigma</code> applied to a lambda\" you mean \"match <code>sigma</code> applied to a variable, which I expect to be a lambda\" right?</p>",
        "id": 213715192,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603040484
    },
    {
        "content": "<p>In the MWE, everything is overkill <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 213715249,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603040525
    },
    {
        "content": "<p>To be even more exact: \"match <code>sigma</code> applied to a term, which I expect to be a lambda\"</p>",
        "id": 213715252,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1603040527
    },
    {
        "content": "<p>right</p>",
        "id": 213715263,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603040544
    },
    {
        "content": "<p>a term (which is the antiquotation of a variable)</p>",
        "id": 213715268,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603040555
    },
    {
        "content": "<p>I would say if you have only one bound variable, I wouldn't use <code>open_*</code>. If you have a few, you might need to write a specialized <code>open_sigma</code> function</p>",
        "id": 213715292,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1603040589
    },
    {
        "content": "<p>How do I \"repair\" <code>B</code> if I matched on it?</p>",
        "id": 213715360,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603040650
    },
    {
        "content": "<p><code>expr.instantiate_local</code> I think</p>",
        "id": 213715380,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603040695
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">do</span> <span class=\"n\">v</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">mk_local_def</span> <span class=\"bp\">`</span><span class=\"n\">v</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">B.instantiate_var</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n   <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 213715394,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1603040719
    },
    {
        "content": "<p>aha</p>",
        "id": 213715411,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603040759
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `instantiate_var a b` takes the 0th de-Bruijn variable in `a` and replaces each occurrence with `b`. -/</span>\n</code></pre></div>",
        "id": 213715452,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603040772
    },
    {
        "content": "<p>Be careful, if <code>B</code> contains meta variables, the result will be messed up. You should use <code>instantiate_mvars</code> on <code>B</code> first.</p>",
        "id": 213715468,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1603040809
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/matching.20binders/near/213715380\">said</a>:</p>\n<blockquote>\n<p><code>expr.instantiate_local</code> I think</p>\n</blockquote>\n<p>This is what you use when you're specifying a local constant to instantiate rather than a de Bruijn variable</p>",
        "id": 213715548,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1603040886
    },
    {
        "content": "<p>There are a bunch of variations on <code>abstract</code> and <code>instantiate</code>, they're often easy to confuse for each other. (and not to mention <code>kabstract</code>)</p>",
        "id": 213715570,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1603040932
    },
    {
        "content": "<p>I want to think of <code>B</code> as a type in the context <code>i : A</code> anyways, and recurse on the structure of <code>B</code>, so maybe keeping <code>B</code> in this \"open\" form while I do the recursion is sensible anyways.<br>\n(I guess the alternative is, if <code>i</code> got turned into a local constant, then I need to recognize the variable <code>i</code> in the <code>local_const</code> case of <code>expr</code>.)</p>",
        "id": 213716130,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603041659
    },
    {
        "content": "<p>If you keep <code>B</code> open, tactics like <code>infer_type</code> and <code>unify</code> and anything that uses them breaks down. You may want to carry around a list of new locals instead</p>",
        "id": 213716292,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1603041909
    },
    {
        "content": "<p>Ah, that might be a problem, since <code>expr</code> doesn't have type information everywhere (e.g., not at <code>app</code>)</p>",
        "id": 213716511,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603042219
    },
    {
        "content": "<p>Exactly</p>",
        "id": 213716547,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1603042291
    }
]