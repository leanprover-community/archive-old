[
    {
        "content": "<p>I have an inductive type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive [decidable_eq, has_reflect, inhabited]</span><span class=\"o\">]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">op</span> <span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"bp\">|</span> <span class=\"n\">div</span> <span class=\"bp\">|</span> <span class=\"n\">sub</span> <span class=\"bp\">|</span> <span class=\"n\">inv</span> <span class=\"bp\">|</span> <span class=\"n\">neg</span>\n</code></pre></div>\n\n<p>Is there an easy way to get a decidable <code>has_lt</code> on this type. I really don't care what the ordering is.</p>",
        "id": 214811277,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603877061
    },
    {
        "content": "<p>Reason: I want to use this as part of a key for a lookup table.</p>",
        "id": 214811324,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603877091
    },
    {
        "content": "<p>And <code>rb_lmap</code> wants a decidable <code>has_lt</code> on its key</p>",
        "id": 214811357,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603877109
    },
    {
        "content": "<p>does it have to be an order? Can you just define it to be \"always false\"?</p>",
        "id": 214811511,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603877212
    },
    {
        "content": "<p>not fully automatic, but fairly easy:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">op</span>\n<span class=\"kd\">def</span> <span class=\"n\">to_nat</span> <span class=\"o\">:</span> <span class=\"n\">op</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">|</span> <span class=\"n\">div</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n<span class=\"bp\">|</span> <span class=\"n\">sub</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span> <span class=\"bp\">|</span> <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"mi\">4</span> <span class=\"bp\">|</span> <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span>\n<span class=\"kd\">end</span> <span class=\"n\">op</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_lt</span> <span class=\"n\">op</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x.to_nat</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y.to_nat</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 214811658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603877335
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I wouldn't be surprised if <code>rb_lmap</code> will be angry with me if I try that trick.</p>",
        "id": 214812092,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603877624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> thx! How do I (easily) lift the decidability?</p>",
        "id": 214812389,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603877808
    },
    {
        "content": "<p>unfold; apply_instance</p>",
        "id": 214812422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603877834
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">op.decidable_lt</span> <span class=\"o\">:</span> <span class=\"n\">decidable_rel</span> <span class=\"o\">((</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">op</span> <span class=\"bp\">→</span> <span class=\"n\">op</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">has_lt.lt</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 214812620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603877962
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_linear_order</span> <span class=\"n\">op</span> <span class=\"o\">:=</span>\n<span class=\"n\">decidable_linear_order.lift</span> <span class=\"n\">to_nat</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨⟩</span> <span class=\"o\">⟨⟩</span> <span class=\"o\">⟨⟩</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"o\">})</span>\n</code></pre></div>",
        "id": 214812752,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603878039
    },
    {
        "content": "<p>Unfortunately, it's not trivial to show that the decidable_eq instance induced by the order is the same as the decidable_eq instance you <code>derive</code>d</p>",
        "id": 214812826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603878099
    },
    {
        "content": "<p>Then I'll remove the derive</p>",
        "id": 214813000,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603878210
    },
    {
        "content": "<p>actually I take it back, that <code>rintros</code> is doing more work for you than I thought</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_linear_order</span> <span class=\"n\">op</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">:=</span> <span class=\"n\">op.decidable_eq</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">decidable_linear_order.lift</span> <span class=\"n\">to_nat</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨⟩</span> <span class=\"o\">⟨⟩</span> <span class=\"o\">⟨⟩</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"o\">})</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 214813102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603878260
    },
    {
        "content": "<p>Is there benefit in using the <code>decidable_eq</code> from the derive handler?</p>",
        "id": 214813177,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603878326
    },
    {
        "content": "<p>I have two <code>list name</code>s. How can I make lean print the diff?</p>",
        "id": 214814903,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603879380
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">check_list</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.get_env</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">lems</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">env.get_decls.map</span> <span class=\"n\">declaration.to_name</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">name.is_prefix_of</span> <span class=\"bp\">`</span><span class=\"n\">baby_calc</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">M1</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">lookup.values</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">M2</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">lems</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- what goes here?</span>\n</code></pre></div>",
        "id": 214815039,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603879402
    },
    {
        "content": "<p>I turned them into <code>multiset</code>s because I don't care about the order.</p>",
        "id": 214815057,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603879418
    },
    {
        "content": "<p>(I also don't care about multiplicity, actually)</p>",
        "id": 214815069,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603879432
    },
    {
        "content": "<p>that makes it difficult to print them though</p>",
        "id": 214815085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603879441
    },
    {
        "content": "<p>because printing requires an order</p>",
        "id": 214815148,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603879467
    },
    {
        "content": "<p>so you can either sort them, don't turn them into multisets, or use <code>unquot</code> to unsafely get the underlying list</p>",
        "id": 214815203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603879500
    },
    {
        "content": "<p>Ok, so I can take the <code>unquot</code> of <code>M1 - M2</code>.</p>",
        "id": 214815240,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603879523
    },
    {
        "content": "<p>But then, how do I print it?</p>",
        "id": 214815246,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603879528
    },
    {
        "content": "<p><code>trace</code></p>",
        "id": 214815252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603879534
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">quot.unquot</span> <span class=\"n\">D1</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">quot.unquot</span> <span class=\"n\">D1</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">list</span> <span class=\"n\">name</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">string</span>\n</code></pre></div>",
        "id": 214815539,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603879688
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">to_string</span> <span class=\"o\">(</span><span class=\"n\">quot.unquot</span> <span class=\"n\">D1</span><span class=\"o\">)))</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">to_string</span> <span class=\"o\">(</span><span class=\"n\">quot.unquot</span> <span class=\"n\">D1</span><span class=\"o\">))</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">thunk</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">tactic</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>",
        "id": 214815930,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603879931
    },
    {
        "content": "<p>/me is bad at writing meta code</p>",
        "id": 214815943,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603879940
    },
    {
        "content": "<p><code>tactic.trace</code></p>",
        "id": 214816026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603880004
    },
    {
        "content": "<p>Aah, thx</p>",
        "id": 214816229,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603880109
    },
    {
        "content": "<p>there is also <code>_root_.trace</code> which is useful for tracing pure code; it has a string argument that will be traced (you have to call <code>to_string</code>), followed by a thunk which is whatever the expression is actually supposed to return. The tactic <code>tactic.trace</code> is a bit easier to use, it takes anything that implements <code>has_to_tactic_format</code> which is just about everything</p>",
        "id": 214816270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603880139
    },
    {
        "content": "<p>Thanks for that explanation!</p>",
        "id": 214817198,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603880658
    },
    {
        "content": "<p>Ok, I have a partial victory:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">check_list</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">lems</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">env.get_decls.map</span> <span class=\"n\">declaration.to_name</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">name.is_prefix_of</span> <span class=\"bp\">`</span><span class=\"n\">calc_step</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">M1</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">lookup.values.map</span> <span class=\"o\">(</span><span class=\"n\">name.append</span> <span class=\"bp\">`</span><span class=\"n\">calc_step</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">M2</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">lems</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">D1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">M1</span> <span class=\"bp\">-</span> <span class=\"n\">M2</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">D2</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">M2</span> <span class=\"bp\">-</span> <span class=\"n\">M1</span><span class=\"o\">),</span>\n  <span class=\"n\">trace</span> <span class=\"s2\">\"diff 1:\"</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">D1.unquot</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"s2\">\"diff 2:\"</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">D2.unquot</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"n\">check_list</span>\n</code></pre></div>",
        "id": 214817554,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603880884
    },
    {
        "content": "<p>The first difference is now empty</p>",
        "id": 214817585,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603880892
    },
    {
        "content": "<p>But the second one contains lots of auto-generated declerations</p>",
        "id": 214817599,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603880904
    },
    {
        "content": "<p>Can I somehow check whether a declaration was declared by me in the file using <code>lemma</code>, or auto-generated by lean?</p>",
        "id": 214817640,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603880937
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">check_list</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">names</span> <span class=\"o\">:=</span> <span class=\"n\">env.get_decls.map</span> <span class=\"n\">declaration.to_name</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">in_scope</span> <span class=\"o\">:=</span> <span class=\"n\">names.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">name.is_prefix_of</span> <span class=\"bp\">`</span><span class=\"n\">calc_step</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">lems</span> <span class=\"o\">:=</span> <span class=\"n\">in_scope.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n            <span class=\"bp\">!</span><span class=\"n\">name.is_prefix_of</span> <span class=\"bp\">`</span><span class=\"n\">calc_step.side</span> <span class=\"n\">n</span> <span class=\"bp\">&amp;&amp;</span>\n            <span class=\"bp\">!</span><span class=\"n\">name.is_prefix_of</span> <span class=\"bp\">`</span><span class=\"n\">calc_step.op</span>   <span class=\"n\">n</span> <span class=\"bp\">&amp;&amp;</span>\n            <span class=\"bp\">!</span><span class=\"n\">name.is_prefix_of</span> <span class=\"bp\">`</span><span class=\"n\">calc_step.sign</span> <span class=\"n\">n</span> <span class=\"bp\">&amp;&amp;</span>\n            <span class=\"bp\">!</span><span class=\"n\">name.is_prefix_of</span> <span class=\"bp\">`</span><span class=\"n\">calc_step.rel</span>  <span class=\"n\">n</span> <span class=\"bp\">&amp;&amp;</span>\n            <span class=\"bp\">!</span><span class=\"n\">name.is_prefix_of</span> <span class=\"bp\">`</span><span class=\"n\">calc_step.lookup_list</span> <span class=\"n\">n</span> <span class=\"bp\">&amp;&amp;</span>\n            <span class=\"bp\">!</span><span class=\"n\">name.is_prefix_of</span> <span class=\"bp\">`</span><span class=\"n\">calc_step.lookup</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">M1</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">lookup.values.map</span> <span class=\"o\">(</span><span class=\"n\">name.append</span> <span class=\"bp\">`</span><span class=\"n\">calc_step</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">M2</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">lems</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">D1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">M1</span> <span class=\"bp\">-</span> <span class=\"n\">M2</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">D2</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">M2</span> <span class=\"bp\">-</span> <span class=\"n\">M1</span><span class=\"o\">),</span>\n  <span class=\"n\">trace</span> <span class=\"n\">D1.unquot</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">D2.unquot</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"n\">check_list</span>\n</code></pre></div>",
        "id": 214819021,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603881750
    },
    {
        "content": "<p>This now traces <code>[] []</code> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <br>\nThanks for all the help</p>",
        "id": 214819048,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603881765
    }
]