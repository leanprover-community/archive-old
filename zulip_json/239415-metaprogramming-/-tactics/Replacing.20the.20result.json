[
    {
        "content": "<p>Is there a way to set the result of a tactic (i.e. the term that the tactic produces to inhabited the target type)? We can inspect the result with <code>tactic.result</code>, but is there a way to replace this term?</p>\n<p>Use case: I want to clean up the result term produced by one of my tactics, to see if this fixes a strange interaction with the equation compiler.</p>",
        "id": 211502097,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1601304388
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.show_term\">docs#tactic.interactive.show_term</a>?</p>",
        "id": 211502205,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601304443
    },
    {
        "content": "<p>More low-level: you probably want to get the goal metavariable before calling your tactic, and then call <code>instantiate_mvars</code> on it after.</p>",
        "id": 211503079,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601304768
    },
    {
        "content": "<p>Patrick's suggestion is better if you're in interactive mode/want a pretty-printed statement.</p>",
        "id": 211503156,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601304807
    },
    {
        "content": "<p>This allows me to view the result term, but I want to <em>replace</em> it from within a tactic, telling Lean, \"use this result term regardless of what happened earlier.\"</p>\n<p>Actually, maybe I can execute a tactic, get the produced result, roll back the tactic and 'refine' with the cleaned-up result term.</p>",
        "id": 211503467,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1601304950
    },
    {
        "content": "<p>Yep. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.retrieve\">docs#tactic.retrieve</a> and variants can help with rolling back. But this does sound slightly convoluted...</p>",
        "id": 211503829,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601305119
    },
    {
        "content": "<p>You might want to take inspiration from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.dsimp_result\">docs#tactic.dsimp_result</a></p>",
        "id": 211503950,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1601305181
    },
    {
        "content": "<p>Oh, nice, I didn't know about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.intercept_result\">docs#tactic.intercept_result</a></p>",
        "id": 211504236,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601305284
    },
    {
        "content": "<p>Be careful!</p>",
        "id": 211504341,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601305324
    },
    {
        "content": "<p>(that was a slightly unnerving quote from the docstring, by the way!)</p>",
        "id": 211504428,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601305362
    },
    {
        "content": "<p>Hmm, is the implementation of <code>intercept_result</code> right in the case where a metavariable appears in the goal?</p>",
        "id": 211504550,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601305410
    },
    {
        "content": "<p>It copies the goal metavariables for some reason, but if there are metavariables in their types those could still get assigned.</p>",
        "id": 211504604,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601305442
    },
    {
        "content": "<p>Yes, that's exactly what I was looking for. Thanks all! Of course this is highly unsafe, but I promise to be careful. ;)</p>",
        "id": 211504660,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1601305457
    },
    {
        "content": "<p>(I'm just glancing at it on GitHub, didn't look carefully at what it's doing.)</p>",
        "id": 211504704,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601305475
    },
    {
        "content": "<p>That sounds like a very honest docstring.</p>",
        "id": 211504775,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601305502
    },
    {
        "content": "<p>I like the ones at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module_info.resolve_module_name\">docs#module_info.resolve_module_name</a> too</p>",
        "id": 211504961,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601305574
    },
    {
        "content": "<p>Oh, I never noticed the color choice for meta!</p>",
        "id": 211505188,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601305685
    },
    {
        "content": "<p>It's for <code>constant</code>/<code>axiom</code></p>",
        "id": 211505236,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601305711
    },
    {
        "content": "<p>I see, this makes even more sense.</p>",
        "id": 211505374,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601305781
    },
    {
        "content": "<p>From <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.intercept_result\">docs#tactic.intercept_result</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"c1\">-- and assign to the original goals.</span>\n  <span class=\"c1\">-- (We have to use `assign` here, as `unify` and `exact` are apparently</span>\n  <span class=\"c1\">-- unreliable about which way they do the assignment!)</span>\n  <span class=\"n\">unsafe.type_context.run</span> <span class=\"bp\">$</span> <span class=\"n\">unsafe.type_context.assign</span> <span class=\"n\">g</span> <span class=\"n\">g''</span><span class=\"o\">),</span>\n</code></pre></div>\n\n<p>Since the author used \"apparently,\" maybe someone with a deep understanding of <code>unify</code> could rewrite this tactic making is safer.</p>",
        "id": 211519068,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1601312144
    },
    {
        "content": "<p>Maybe if <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> runs into issues with it, but I don't think this is any kind of priority.</p>",
        "id": 211520101,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601312612
    },
    {
        "content": "<p>No issues in my use case, though that was just some simple debugging.</p>",
        "id": 211521268,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1601313130
    }
]