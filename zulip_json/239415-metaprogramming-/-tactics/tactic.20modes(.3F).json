[
    {
        "content": "<p>Is there documentation on (or, failing that, some examples of) writing new tactic modes such as <code>conv</code>?</p>",
        "id": 210552702,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600451057
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> what's the link to your temporal logic tactic? I poked around your github repos but didn't see it</p>",
        "id": 210552775,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600451098
    },
    {
        "content": "<p>I've followed the smt mode from core as an example, the handful of times I've tried to do this</p>",
        "id": 210552991,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1600451199
    },
    {
        "content": "<p>Here it is: <a href=\"https://github.com/unitb/temporal-logic\">https://github.com/unitb/temporal-logic</a></p>",
        "id": 210553017,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600451210
    },
    {
        "content": "<p>The natural number game used some kind of modded tactic mode <code>begin [natnumgame]</code> and Rob Lewis wrote some code which ported most of the tactics over and let me redefine a few</p>",
        "id": 210553058,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600451228
    },
    {
        "content": "<p><span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> that's one of the handful</p>",
        "id": 210553114,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1600451263
    },
    {
        "content": "<p><a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/tactic/nat_num_game.lean\">https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/tactic/nat_num_game.lean</a></p>",
        "id": 210553231,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600451308
    },
    {
        "content": "<p>Thanks all. So I gather <code>begin [smt] ... end</code> means something like <code>smt.interactive.execute t</code> where <code>t</code> is the result of parsing the <code>begin-end</code> block using the <code>smt.interactive</code> namespace. And I guess if I want to support something like <code>conv { ... }</code>, then I just need to define <code>my_tac.interactive.itactic := my_tac unit</code> to represent the body and the parser will automatically use the <code>my_tac</code> parser for it?</p>",
        "id": 210553825,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600451624
    },
    {
        "content": "<p>Yes</p>",
        "id": 210554411,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600451885
    },
    {
        "content": "<p>There are a few tiny examples in the Lean tests as well: <a href=\"https://github.com/leanprover-community/lean/blob/ec1613aef1eee72e601f192b16740629c6d49690/tests/lean/interactive/my_tac_class.lean\">tests/lean/interactive/my_tac_class.lean</a>, <a href=\"https://github.com/leanprover-community/lean/blob/ec1613aef1eee72e601f192b16740629c6d49690/tests/lean/run/my_tac_class.lean\">tests/lean/run/my_tac_class.lean</a>, <a href=\"https://github.com/leanprover-community/lean/blob/ec1613aef1eee72e601f192b16740629c6d49690/tests/lean/interactive/rb_map_ts.lean\">tests/lean/interactive/rb_map_ts.lean</a></p>",
        "id": 210556760,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1600453055
    },
    {
        "content": "<p>I found a helpful comment at <a href=\"https://github.com/unitb/temporal-logic/blob/master/src/temporal_logic/tactic.lean#L17-L31\">https://github.com/unitb/temporal-logic/blob/master/src/temporal_logic/tactic.lean#L17-L31</a><br>\nclearly copied from somewhere else, but that's where I found it</p>",
        "id": 210556910,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600453132
    },
    {
        "content": "<p>ah, it's indeed in the Lean C++ code somewhere</p>",
        "id": 210556977,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600453183
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/blob/d907e6aed0b399f6512139c751b908979bf45eaf/src/frontends/lean/tactic_notation.cpp#L33-L52\">https://github.com/leanprover-community/lean/blob/d907e6aed0b399f6512139c751b908979bf45eaf/src/frontends/lean/tactic_notation.cpp#L33-L52</a></p>",
        "id": 210557215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600453287
    },
    {
        "content": "<p>So with <code>save_info</code>, although all the examples I've found ultimately use <code>tactic.to_format</code>to format the tactic state, I can also pass any old nonsense I like to <code>save_info_thunk</code>, right?</p>",
        "id": 210558432,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600453900
    },
    {
        "content": "<p>(with the possible exception of the smt tactic which uses a different built-in formatter)</p>",
        "id": 210558540,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600453939
    },
    {
        "content": "<p>Yes that's right, that's where you feed in whatever you want to display</p>",
        "id": 210558695,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600454041
    },
    {
        "content": "<p>To correct what I wrote earlier, Simon's <code>temporal</code> tactic does produce a custom format for the tactic state, it just does such a good job of imitating the standard one that I didn't notice <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 210572477,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600461452
    },
    {
        "content": "<p>Ha! Sorry to mislead you like this!</p>",
        "id": 210572687,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600461583
    },
    {
        "content": "<p>Mainly what my pretty printing does is print hypotheses of the form <code>h : Γ ⊢ φ</code> as <code>h : φ</code> and omit the variable <code>Γ</code> from the context.</p>",
        "id": 210572861,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600461658
    },
    {
        "content": "<p>Was it hard to get it to build? I haven't ungraded it in a while (still in the process of upgrading the dependencies)</p>",
        "id": 210572937,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600461714
    },
    {
        "content": "<p>Let's say it was not hard to get it to build to the point where I could inspect at least one <code>[temporal]</code> proof interactively</p>",
        "id": 210573007,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600461748
    },
    {
        "content": "<p>In fact, what I want to do is broadly similar--basically I want to pretend that I have a variable <code>x : X</code>, while actually representing it by <code>x : Γ → X</code>.</p>",
        "id": 210577457,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600464480
    },
    {
        "content": "<p>One thing I don't understand yet is what controls the environment that <code>texpr</code> gets parsed/typechecked in. When <code>texpr</code> is an argument of an interactive tactic, is the <code>pexpr</code> that gets passed to the tactic really independent of the environment? If it does depend on the environment, can I set the environment somehow?</p>",
        "id": 210577705,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600464621
    },
    {
        "content": "<p>Oh, looking up a few inches I see</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"kn\">constant</span> <span class=\"n\">set_env</span> <span class=\"o\">:</span> <span class=\"n\">environment</span> <span class=\"bp\">→</span> <span class=\"n\">parser</span> <span class=\"n\">unit</span>\n</code></pre></div>\n\n\n<p>Can I run this from the <code>tactic</code> monad somehow? Or am I supposed to create a custom <code>parser</code> for my interactive tactics which manipulates the environment first? I see <code>meta constant of_tactic : tactic α → parser α</code>...</p>",
        "id": 210580821,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600467162
    },
    {
        "content": "<p>sorry, that path only goes one way</p>",
        "id": 210580865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600467236
    },
    {
        "content": "<p>tactics can't run parsers</p>",
        "id": 210580911,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600467248
    },
    {
        "content": "<p>Do you really want to replace the environment and not just the local context?</p>",
        "id": 210580966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600467316
    },
    {
        "content": "<p>I do just want to replace the local context but I don't understand how I'd do so</p>",
        "id": 210580989,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600467339
    },
    {
        "content": "<p>An easy way is to <code>revert_all</code> and then backtrack when you are done</p>",
        "id": 210581072,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600467394
    },
    {
        "content": "<p>that is, I want to have an underlying tactic state somewhere containing <code>x : Γ → X</code> but present to the user the illusion that <code>x : X</code>, and have my tactics fix up the <code>expr</code> in a certain way</p>",
        "id": 210581101,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600467446
    },
    {
        "content": "<p>I guess what I don't really understand is how the parser knows what the local context is at all--couldn't I use some monad totally unrelated to <code>tactic_state</code> as my custom tactic monad?</p>",
        "id": 210581124,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600467482
    },
    {
        "content": "<p>the parser doesn't have to care since it only produces pre-expressions</p>",
        "id": 210581178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600467535
    },
    {
        "content": "<p>If you are okay with the extra work the usual way I do more radical type reinterpretation is to perform post-processing directly on the pexpr, without calling <code>to_expr</code> on it</p>",
        "id": 210581217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600467588
    },
    {
        "content": "<p>ok, so does this mean a pre-expression might contain things like unresolved <code>.</code> syntax, overloaded notation, etc.?</p>",
        "id": 210581219,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600467588
    },
    {
        "content": "<p>presumably as macros or something?</p>",
        "id": 210581282,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600467612
    },
    {
        "content": "<p>yes, it has those things</p>",
        "id": 210581283,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600467612
    },
    {
        "content": "<p>I see</p>",
        "id": 210581287,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600467618
    },
    {
        "content": "<p>If you need to change name resolution then things get a bit more tricky</p>",
        "id": 210581312,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600467660
    },
    {
        "content": "<p>I guess that's fine for the \"operate directly on the <code>pexpr</code>\" approach since I want to replace <code>x.foo</code> by <code>(x i).foo</code> or whatever anyways</p>",
        "id": 210581339,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600467689
    },
    {
        "content": "<p>in  your case you can probably send it to <code>to_expr</code> after your fixups to still get most of lean goodness</p>",
        "id": 210581418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600467752
    },
    {
        "content": "<p>in fact, I basically just want to do a bunch of substitutions of the form \"replace <code>x</code> by <code>x i</code>\" so maybe this functionality already exists</p>",
        "id": 210581422,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600467758
    },
    {
        "content": "<p>and then use <code>to_expr</code> right</p>",
        "id": 210581427,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600467766
    },
    {
        "content": "<p>Isn't that exactly what a <code>parameter</code> does?</p>",
        "id": 210581433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600467777
    },
    {
        "content": "<p>I guess so? though here the parameter <code>i</code> will be another local constant</p>",
        "id": 210581541,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600467904
    },
    {
        "content": "<p>I was thinking more along the lines of Lean knowing how perform substitution in general</p>",
        "id": 210581561,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600467939
    },
    {
        "content": "<p>well technically if you are in a section then the parameter is in your local context</p>",
        "id": 210581566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600467944
    },
    {
        "content": "<p>There is <code>expr.replace</code> I think</p>",
        "id": 210581632,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600467986
    },
    {
        "content": "<p>which was updated to work on pexprs at some point</p>",
        "id": 210581642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600468005
    },
    {
        "content": "<p>this looks fancy</p>",
        "id": 210581750,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600468127
    },
    {
        "content": "<p>but, it also looks like it only works on <code>expr</code></p>",
        "id": 210581850,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600468219
    },
    {
        "content": "<p>anyways, this is more than enough to keep me busy for a while</p>",
        "id": 210581884,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600468262
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> Didn't you PR something like this?</p>",
        "id": 210581917,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600468297
    },
    {
        "content": "<p>Not me</p>",
        "id": 210581926,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1600468316
    },
    {
        "content": "<p>IIUC the only thing needed to make <code>expr.replace</code> work on pexprs is to generalize the signature</p>",
        "id": 210581970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600468328
    },
    {
        "content": "<p>this was something like 18 months ago or so</p>",
        "id": 210581990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600468362
    },
    {
        "content": "<p>pexprs need a general overhaul to make them more lean friendly</p>",
        "id": 210582028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600468417
    },
    {
        "content": "<p>I think I made such adjustment for <code>expr.fold</code> the same should work for <code>expr.replace</code></p>",
        "id": 210582115,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600468493
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/tactic.20modes(.3F)/near/210581970\">said</a>:</p>\n<blockquote>\n<p>IIUC the only thing needed to make <code>expr.replace</code> work on pexprs is to generalize the signature</p>\n</blockquote>\n<p>so, you're saying I can just <code>unchecked_cast</code> it <span aria-label=\"smiling devil\" class=\"emoji emoji-1f608\" role=\"img\" title=\"smiling devil\">:smiling_devil:</span></p>",
        "id": 210582231,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600468613
    },
    {
        "content": "<p>yes, that will work</p>",
        "id": 210582242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600468631
    },
    {
        "content": "<p>is this the formal version of proof by reference to personal communication</p>",
        "id": 210582319,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600468687
    },
    {
        "content": "<p>Is there a tactic for that?</p>",
        "id": 210587230,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600473974
    }
]