[
    {
        "content": "<p>Simple question, but how do I write a tactic taking two arguments?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic.interactive</span>\n\n<span class=\"n\">setup_tactic_parser</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">parser.pexpr</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">trace</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">foo₂</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">parser.pexpr</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">trace</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n   <span class=\"n\">trace</span> <span class=\"n\">q</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">tactic.interactive</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">foo</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"c1\">-- fine</span>\n  <span class=\"n\">foo₂</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"c1\">-- error \"expression expected\"</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 267529241,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1641867851
    },
    {
        "content": "<p>If I'm understanding what's going on, it's parsing <code>3 4</code> as one expression (a function application with one argument).</p>",
        "id": 267529475,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641868202
    },
    {
        "content": "<p>If you have it use the default highest precedence, it works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic.interactive</span>\n\n<span class=\"n\">setup_tactic_parser</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">parser.pexpr</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">trace</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">foo₂</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">parser.pexpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">trace</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n   <span class=\"n\">trace</span> <span class=\"n\">q</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">tactic.interactive</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"c1\">-- fine</span>\n  <span class=\"n\">foo₂</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"c1\">-- fine</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 267529539,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641868279
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 267529540,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1641868280
    }
]