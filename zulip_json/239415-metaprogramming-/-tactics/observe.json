[
    {
        "content": "<p>Here's my next attempt at <code>observe</code> (yes, I'm giving a talk again tomorrow)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n<span class=\"n\">setup_tactic_parser</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">observe</span> <span class=\"o\">(</span><span class=\"n\">trc</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"bp\">$</span> <span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">\"?\"</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">\":\"</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">texpr</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"n\">h.get_or_else</span> <span class=\"bp\">`</span><span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span>\n  <span class=\"n\">ppt</span> <span class=\"bp\">←</span> <span class=\"n\">pp</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">assert</span> <span class=\"n\">h'</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">focus1</span> <span class=\"o\">(</span><span class=\"n\">tactic.library_search</span> <span class=\"o\">{</span> <span class=\"n\">try_this</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span> <span class=\"o\">})</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">fail</span> <span class=\"s2\">\"observe failed\"</span><span class=\"o\">,</span>\n  <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">s.get_rest</span> <span class=\"s2\">\"Try this: \"</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">pph</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">n.to_string</span> <span class=\"bp\">++</span> <span class=\"s2\">\" \"</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">get_or_else</span> <span class=\"s2\">\"\"</span><span class=\"o\">,</span>\n  <span class=\"n\">when</span> <span class=\"n\">trc.is_some</span> <span class=\"bp\">$</span> <span class=\"n\">trace</span><span class=\"bp\">!</span> <span class=\"s2\">\"Try this: have {pph}: {ppt.to_string}, {s}\"</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">interactive</span>\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n</code></pre></div>\n<p>(Big thanks to Mario for the initial skeleton!)</p>",
        "id": 262585245,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637759067
    },
    {
        "content": "<p>My question is: how do I print <code>{</code> in a format string?</p>",
        "id": 262585268,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637759081
    },
    {
        "content": "<p>In the line <code>when trc.is_some $ trace! \"Try this: have {pph}: {ppt.to_string}, {s}\"</code> I want to surround <code>s</code> by braces,<br>\nso that the output looks like <code>{ exact foo.bar }</code>.</p>",
        "id": 262585327,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637759122
    },
    {
        "content": "<p>This works, but looks very asymmetrical:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">when</span> <span class=\"n\">trc.is_some</span> <span class=\"bp\">$</span> <span class=\"n\">trace</span><span class=\"bp\">!</span> <span class=\"s2\">\"Try this: have {pph}: {ppt.to_string}, {{ {s} }\"</span>\n</code></pre></div>",
        "id": 262586293,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637759608
    },
    {
        "content": "<p>I now have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">observe</span> <span class=\"o\">(</span><span class=\"n\">trc</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"bp\">$</span> <span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">\"?\"</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">\":\"</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">texpr</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"n\">h.get_or_else</span> <span class=\"bp\">`</span><span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span>\n  <span class=\"n\">ppt</span> <span class=\"bp\">←</span> <span class=\"n\">pp</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">assert</span> <span class=\"n\">h'</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">focus1</span> <span class=\"o\">(</span><span class=\"n\">tactic.library_search</span> <span class=\"o\">{</span> <span class=\"n\">try_this</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span> <span class=\"o\">})</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">fail</span> <span class=\"s2\">\"observe failed\"</span><span class=\"o\">,</span>\n  <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">s.get_rest</span> <span class=\"s2\">\"Try this: exact \"</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">pph</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">n.to_string</span> <span class=\"bp\">++</span> <span class=\"s2\">\" \"</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">get_or_else</span> <span class=\"s2\">\"\"</span><span class=\"o\">,</span>\n  <span class=\"n\">when</span> <span class=\"n\">trc.is_some</span> <span class=\"bp\">$</span> <span class=\"n\">trace</span><span class=\"bp\">!</span> <span class=\"s2\">\"Try this: have {pph}: {ppt.to_string} := {s}\"</span>\n</code></pre></div>\n<p>which I'm quite happy with.</p>",
        "id": 262587277,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637760159
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/observe/near/262586293\">said</a>:</p>\n<blockquote>\n<p>This works, but looks very asymmetrical:</p>\n</blockquote>\n<p>This will be fixed in the next release of Lean: <a href=\"https://github.com/leanprover-community/lean/issues/650\">lean#650</a></p>",
        "id": 262591941,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1637762520
    }
]