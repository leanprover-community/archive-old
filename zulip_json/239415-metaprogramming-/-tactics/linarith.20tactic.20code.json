[
    {
        "content": "<p>Hi guys! I am super new to Lean and am trying to understand the meta programming stuff and tactic writing. I wanted to start with linarith tactic understanding. I have posted some of the queries in the new members stream : <a href=\"#narrow/stream/113489-new-members/topic/linarith.20tactic.20understanding\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/linarith.20tactic.20understanding</a> . It would be helpful if anyone can shed some light over the doubts. thanks! PS: I have understood the idea of FM elimination.</p>",
        "id": 257820385,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1634379577
    },
    {
        "content": "<p>Just to comment that when I was super-new to Lean, I tried to understand the basics of type theory, and read through all of <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> and did all the exercises, before I started reading any of the code in mathlib.</p>",
        "id": 257821575,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634380830
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  I have done some exercises from the tuts, NNG and read some books. Also since u mention the apt readings, I wanted to know how important is to understand the elements of monadic programming (getting hard time to understand it from H guide :) to get into Lean metaprogramming?</p>",
        "id": 257823048,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1634382358
    },
    {
        "content": "<p>I have no idea about metaprogramming.</p>",
        "id": 257823107,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634382400
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439607\">@Ayush Agrawal</span> Have you seen the metaprogramming tutorial on youtube, by Rob Lewis?</p>",
        "id": 257833966,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634392821
    },
    {
        "content": "<p>Oh yes! I saw those videos. But they were hard for me to understand since I am new to functional paradigm. Can u recommend some basic resources I should go over before watching those videos again?</p>",
        "id": 257837186,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1634395911
    },
    {
        "content": "<p>Hmmz, I'm not a meta expert either. Did you try the exercises?</p>",
        "id": 257839072,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634397682
    },
    {
        "content": "<p>Which exercises? Can u send the link to those plz..</p>",
        "id": 257841414,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1634399918
    },
    {
        "content": "<p>Hmm, maybe I'm mistaken. I thought there were exercises, but I can't find them now.</p>",
        "id": 257846552,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634404547
    },
    {
        "content": "<p>How can we call <code>linarith</code> tactic inside a meta code? for example for <code>apply</code>, we may use <code>tactic.applyc</code>. Is there a similar way for <code>linarith </code>also?</p>",
        "id": 257920308,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1634478554
    },
    {
        "content": "<p>You can always call an interactive tactic directly, i.e. <code>tactic.interactive.linarith</code>, but many tactics also provide non-interactive versions. You can usually find the functions you want to call by looking at the source of the tactic frontend (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.linarith/src\">src#tactic.interactive.linarith</a>) to see if it immediately dispatches to some other function that you can call instead</p>",
        "id": 257922170,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634480209
    },
    {
        "content": "<p>and in this case you can see that it straight away calls <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.linarith/src\">src#tactic.linarith</a></p>",
        "id": 257922196,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634480236
    },
    {
        "content": "<p>although in this case, depending on what your input looks like, you may want to go one step further and call the things that <code>tactic.linarith</code> calls</p>",
        "id": 257922279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634480298
    },
    {
        "content": "<p>I've found the Hitchhiker's Guide to Logical Verification to be particularly helpful in understanding metaprogramming:<br>\n<a href=\"https://raw.githubusercontent.com/blanchette/logical_verification_2020/master/hitchhikers_guide.pdf\">https://raw.githubusercontent.com/blanchette/logical_verification_2020/master/hitchhikers_guide.pdf</a></p>\n<p>If you're new to functional programming there are suggestions in the Hitchhiker's Guide pointing to specific Haskell tutorials to follow that might help.</p>",
        "id": 258050401,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1634572116
    }
]