[
    {
        "content": "<p>I was looking at <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span>'s code in <a href=\"https://github.com/leanprover-community/mathlib/issues/5052\">#5052</a> and noticed that it was quite painful to verify facts about constant polynomials that hold because they are identities of the underlying field elements.  One has to explicitly reverse-apply lemmas like <code>C_eq_nat_cast</code> and <code>C_mul</code>, in tasks like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.monomial</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">C_eq_nat_cast</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">C_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">C_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217891484,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1606314705
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> Are these rewrites something that could be done by <code>norm_cast</code>?  That is, could <code>norm_cast</code> apply to the not-a-coercion from a ring to the polynomials over it, or more generally from a ring into an algebra over that ring, by analogy with how it applies to the coercion from (eg) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85556em;vertical-align:-0.16667em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span>?</p>",
        "id": 217891500,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1606314712
    },
    {
        "content": "<p>That would be very useful!</p>",
        "id": 217892082,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1606314985
    },
    {
        "content": "<p><code>norm_cast</code> only looks at things that are explicitly coercion operators, under the logic of \"you need to draw a line somewhere.\" In principle we could probably generalize things and let users tag arbitrary functions as coercions. But do you always want <code>C</code> to be treated as a coercion by <code>norm_cast</code>? My guess is no, there will be cases where this basically disrupts the expected behavior.</p>",
        "id": 217897402,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606317461
    },
    {
        "content": "<p>So you'd need syntax for locally enabling/disabling the \"this is a coercion\" tag.</p>",
        "id": 217897438,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606317483
    },
    {
        "content": "<p>And you'd have to train users to know when to apply this tag, and how to disable it, and how to recognize when to disable it.</p>",
        "id": 217897533,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606317515
    },
    {
        "content": "<p>And I bet that in the end <code>rw [← C_mul]</code> ends up looking less unpleasant in comparison.</p>",
        "id": 217897691,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606317591
    },
    {
        "content": "<p>I see, thanks for thinking about it!</p>",
        "id": 217898803,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1606318100
    }
]