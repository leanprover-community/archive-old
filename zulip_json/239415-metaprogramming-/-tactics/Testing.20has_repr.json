[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/issues/8170\">#8170</a>, I suggested writing a test for a <code>has_repr</code> instance. Ideally the test would just be <code>#eval ...</code> and the test runner would just check the output, but it seems that unlike the core lean tests, the mathlib tests don't work that way.</p>\n<p>So how can I run <code>eval</code> from within a tactic block? My naive attempt is something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">run_cmd</span>\n<span class=\"k\">do</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">cycle</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n   <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"s2\">\"{repr x}\"</span><span class=\"o\">,</span>\n   <span class=\"k\">if</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"s2\">\"c[2, 1, 4, 3]\"</span> <span class=\"k\">then</span>\n     <span class=\"n\">pure</span> <span class=\"o\">()</span>\n   <span class=\"k\">else</span>\n     <span class=\"n\">failure</span>\n</code></pre></div>\n<p>but I can't work out how to actually call <code>repr</code>.</p>",
        "id": 249454872,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628939721
    },
    {
        "content": "<p>Ah, found <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.eval_expr\">docs#tactic.eval_expr</a>. Is there a more idiomatic way than this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">run_cmd</span>\n<span class=\"k\">do</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">repr</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">cycle</span> <span class=\"n\">ℕ</span><span class=\"o\">)),</span>\n   <span class=\"s2\">\"c[1, 4, 3, 2]\"</span> <span class=\"bp\">←</span> <span class=\"n\">eval_expr</span> <span class=\"n\">string</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n   <span class=\"n\">pure</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 249455071,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628940020
    },
    {
        "content": "<p>Doesn't this have the same effect? I don't understand exactly what you're trying to do.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">run_cmd</span>\n<span class=\"k\">do</span>\n   <span class=\"s2\">\"c[1, 4, 3, 2]\"</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">repr</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">cycle</span> <span class=\"n\">ℕ</span><span class=\"o\">)),</span>\n   <span class=\"n\">pure</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>I guess in your application you want <code>x</code> to be an arbitrary expression? If so, then I don't know a better way.</p>",
        "id": 249463035,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1628952349
    },
    {
        "content": "<p>You're right, I think I forgot that meta code runs in the VM anyway</p>",
        "id": 249463180,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628952510
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">run_cmd</span> <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"s2\">\"c[1, 4, 3, 2]\"</span> <span class=\"bp\">=</span> <span class=\"n\">repr</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">cycle</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>seems like it's probably the spelling I want</p>",
        "id": 249463186,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628952521
    }
]