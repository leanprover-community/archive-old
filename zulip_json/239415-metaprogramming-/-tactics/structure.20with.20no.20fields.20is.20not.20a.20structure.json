[
    {
        "content": "<p>I found this surprising:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">no_fields</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"k\">do</span>\n  <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.get_env</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.trace</span> <span class=\"o\">(</span><span class=\"n\">e.is_structure</span> <span class=\"bp\">`</span><span class=\"n\">no_fields</span><span class=\"o\">)</span>\n<span class=\"c1\">-- ff</span>\n</code></pre></div>",
        "id": 289054852,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657390136
    },
    {
        "content": "<p>I haven't checked if it's calling the same function, but I remember <code>is_structure</code> at <a href=\"https://github.com/leanprover-community/lean/blob/master/src/frontends/lean/structure_cmd.cpp#L118\">https://github.com/leanprover-community/lean/blob/master/src/frontends/lean/structure_cmd.cpp#L118</a> being more complicated than I would have expected</p>",
        "id": 289056019,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1657391663
    },
    {
        "content": "<p>Looks like it deliberately considers structures with no fields as not structures: <a href=\"https://github.com/leanprover-community/lean/blob/9d5adc6ab80d02bb2a0fd39a786aaeb1efd6fb01/src/frontends/lean/structure_cmd.cpp#L129\">https://github.com/leanprover-community/lean/blob/9d5adc6ab80d02bb2a0fd39a786aaeb1efd6fb01/src/frontends/lean/structure_cmd.cpp#L129</a></p>",
        "id": 289063474,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657401950
    },
    {
        "content": "<p>That feels like it could just be a bug</p>",
        "id": 289063477,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657401958
    },
    {
        "content": "<p>I vote for considering this a bug</p>",
        "id": 289087085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1657436775
    },
    {
        "content": "<p>Lean 4 agrees:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Foo</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"{isStructure (← getEnv) ``Foo}\"</span>\n  <span class=\"c1\">-- true</span>\n</code></pre></div>",
        "id": 289087345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1657437192
    },
    {
        "content": "<p>Attempted as <a href=\"https://github.com/leanprover-community/lean/pull/739\">leanprover-community/lean#739</a></p>",
        "id": 289092098,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657444690
    },
    {
        "content": "<p>CI seems not to care</p>",
        "id": 289093845,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657447429
    }
]