[
    {
        "content": "<p>How does introspection of a defn work? Let's say I wanted to write a <code>meta def</code> that told me whether I used <code>(+)</code> in a definition's body. How would that work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">uses_addition</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 226776840,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613635901
    },
    {
        "content": "<p>The easiest way is to use <code>environment.get_decl</code> or the shorthand <code>tactic.get_decl</code> to obtain the declaration from the environment, and then use <code>declaration.value</code> to get the expression corresponding to the def</p>",
        "id": 226781219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613638717
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span>\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">uses_addition</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">d</span> <span class=\"bp\">←</span> <span class=\"n\">get_decl</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">expr.fold</span> <span class=\"n\">d.value</span> <span class=\"n\">ff</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"n\">_</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">||</span> <span class=\"n\">e.is_constant_of</span> <span class=\"bp\">``</span><span class=\"n\">has_add.add</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">uses_addition</span> <span class=\"bp\">`</span><span class=\"n\">f</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span> <span class=\"c1\">-- tt</span>\n<span class=\"k\">#eval</span> <span class=\"n\">uses_addition</span> <span class=\"bp\">`</span><span class=\"n\">g</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span> <span class=\"c1\">-- ff</span>\n</code></pre></div>",
        "id": 226781594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613638934
    },
    {
        "content": "<p>Slightly golfed, since that second line is common enough to be a library function.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">uses_addition</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">d</span> <span class=\"bp\">←</span> <span class=\"n\">get_decl</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">d.value.contains_constant</span> <span class=\"o\">(</span><span class=\"bp\">=</span> <span class=\"bp\">``</span><span class=\"n\">has_add.add</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 226782485,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1613639522
    },
    {
        "content": "<p>What I'm really trying to do is write something like a derive handler, but for parser properties. Right now, the only property is <code>parser.mono</code>, and I've defined a <code>parser.numeral</code>. So instead of me introspecting the definition I wrote manually:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">numeral</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat.bin_cast</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">mono</span> <span class=\"o\">(</span><span class=\"n\">numeral</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mono.map</span>\n</code></pre></div>\n<p>I want to make a tactic that will do that introspection for me.</p>",
        "id": 226783306,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613640078
    },
    {
        "content": "<p>Right now, I'm trying to figure out how to generate ex nihilo the mvars for <code>(α : Type) [has_zero α] [has_one α] [has_add α]</code> after starting with something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">``</span><span class=\"n\">numeral</span><span class=\"o\">,</span>\n  <span class=\"n\">f</span> <span class=\"bp\">←</span> <span class=\"n\">resolve_name</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">to_expr</span><span class=\"o\">,</span>\n  <span class=\"n\">tgt</span> <span class=\"bp\">←</span> <span class=\"n\">mk_app</span> <span class=\"bp\">``</span><span class=\"n\">parser.mono</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">],</span> <span class=\"c1\">-- this breaks because it is `numeral` and not `numeral α`</span>\n  <span class=\"n\">triv</span>\n</code></pre></div>",
        "id": 226783503,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613640195
    },
    {
        "content": "<p>What are your imports/open namespaces?</p>",
        "id": 226783661,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1613640289
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.buffer.parser.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">parser</span> <span class=\"n\">parse_result</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">parser</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">Parse a string of digits as a numeral while casting it to target type `α`.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">numeral</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat.bin_cast</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">mono</span> <span class=\"o\">(</span><span class=\"n\">numeral</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mono.map</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.app_builder</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">``</span><span class=\"n\">numeral</span><span class=\"o\">,</span>\n  <span class=\"n\">f</span> <span class=\"bp\">←</span> <span class=\"n\">resolve_name</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">to_expr</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">f.is_constant</span><span class=\"o\">,</span>\n  <span class=\"n\">triv</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">parser</span>\n</code></pre></div>",
        "id": 226783860,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613640397
    },
    {
        "content": "<p>I'm still not completely sure what you're trying to do. To get the parameters to the type of <code>numeral</code> (as local consts) you can do something like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">``</span><span class=\"n\">numeral</span><span class=\"o\">,</span>\n  <span class=\"n\">f</span> <span class=\"bp\">←</span> <span class=\"n\">resolve_name</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">to_expr</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">,</span> <span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">f</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">open_pis</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">args</span><span class=\"o\">,</span> <span class=\"n\">trace</span> <span class=\"n\">body</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">f.is_constant</span><span class=\"o\">,</span>\n  <span class=\"n\">triv</span>\n</code></pre></div>",
        "id": 226784839,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1613640939
    },
    {
        "content": "<p>I'm not seeing the connection to the derive handler but I guess I'm just missing the context</p>",
        "id": 226785074,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1613641064
    },
    {
        "content": "<p>What is the derive handler supposed to be looking for in the expr?</p>",
        "id": 226785194,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1613641123
    },
    {
        "content": "<p>The derive handler is only able to make instances for inductive types. In my case, <code>numeral : parser α</code>, so writing a derive handler won't work.</p>",
        "id": 226785245,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613641155
    },
    {
        "content": "<p>That's not really true, see e.g. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.delta_instance_handler\">docs#tactic.delta_instance_handler</a></p>",
        "id": 226785457,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1613641263
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.buffer.parser.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">parser</span> <span class=\"n\">parse_result</span>\n\n\n<span class=\"kd\">@[derive_handler]</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">mono_derive</span> <span class=\"o\">:</span> <span class=\"n\">derive_handler</span> <span class=\"o\">:=</span>\n<span class=\"n\">instance_derive_handler</span> <span class=\"bp\">`</span><span class=\"n\">parser.mono</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">apply</span> <span class=\"n\">mono.map</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">parser</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">Parse a string of digits as a numeral while casting it to target type `α`.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">@[derive mono]</span> <span class=\"kd\">def</span> <span class=\"n\">numeral</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat.bin_cast</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">nat</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">numeral.mono</span>\n</code></pre></div>",
        "id": 226785481,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1613641278
    },
    {
        "content": "<p>The pseudo code would be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">create</span> <span class=\"n\">a</span> <span class=\"n\">goal</span> <span class=\"n\">of</span> <span class=\"bp\">`</span><span class=\"n\">mono</span> <span class=\"o\">(</span><span class=\"n\">numeral</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">`</span>\n<span class=\"n\">get</span> <span class=\"n\">the</span> <span class=\"kd\">definition</span> <span class=\"n\">body</span> <span class=\"n\">for</span> <span class=\"n\">the</span> <span class=\"n\">parser</span><span class=\"o\">,</span> <span class=\"n\">likely</span> <span class=\"n\">written</span> <span class=\"k\">in</span> <span class=\"n\">functor</span><span class=\"bp\">/</span><span class=\"n\">seq</span><span class=\"bp\">/</span><span class=\"n\">bind</span> <span class=\"kd\">notation</span> <span class=\"n\">or</span> <span class=\"k\">do</span> <span class=\"kd\">notation</span><span class=\"o\">,</span>\n<span class=\"n\">map</span> <span class=\"kd\">notation</span> <span class=\"n\">symbol</span> <span class=\"n\">to</span> <span class=\"n\">corresponding</span> <span class=\"bp\">`</span><span class=\"n\">mono.</span><span class=\"o\">{</span><span class=\"n\">map</span><span class=\"o\">,</span><span class=\"n\">seq</span><span class=\"o\">,</span><span class=\"n\">bind</span><span class=\"o\">}</span><span class=\"bp\">`</span> <span class=\"kd\">instance</span> <span class=\"n\">that</span> <span class=\"n\">already</span> <span class=\"n\">exists</span>\n<span class=\"n\">try</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">the</span> <span class=\"n\">goal</span> <span class=\"n\">using</span> <span class=\"n\">something</span> <span class=\"n\">like</span> <span class=\"bp\">`</span><span class=\"n\">convert</span> <span class=\"n\">mono.bind</span><span class=\"bp\">`.</span>\n<span class=\"n\">deal</span> <span class=\"k\">with</span> <span class=\"n\">the</span> <span class=\"n\">new</span> <span class=\"n\">goals</span> <span class=\"n\">that</span> <span class=\"n\">might</span> <span class=\"n\">appear</span>\n</code></pre></div>",
        "id": 226785527,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613641310
    },
    {
        "content": "<p>How does that pass <code>guard (env.is_inductive n)</code> in the body of <code>meta def instance_derive_handler</code>??</p>",
        "id": 226785642,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613641372
    },
    {
        "content": "<p>In fact, it seems to work even with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive_handler]</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">mono_derive</span> <span class=\"o\">:</span> <span class=\"n\">derive_handler</span> <span class=\"o\">:=</span>\n<span class=\"n\">instance_derive_handler</span> <span class=\"bp\">`</span><span class=\"n\">parser.mono</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">trivial</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 226786165,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613641683
    },
    {
        "content": "<p>Heh, you're right, that derive handler isn't doing anything <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 226786486,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1613641855
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.delta_instance_handler\">docs#tactic.delta_instance_handler</a> is succeeding before it tries the new one</p>",
        "id": 226786517,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1613641879
    },
    {
        "content": "<p>Because it has higher priority</p>",
        "id": 226786548,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1613641901
    },
    {
        "content": "<p>I have to say, I'm quite impressed with how easily that worked, it seems</p>",
        "id": 226786694,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613641981
    },
    {
        "content": "<p>Ah, so that <code>delta_instance_handler</code> is just the very generalized version of what I was trying to do</p>",
        "id": 226786720,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613642003
    },
    {
        "content": "<p>That is quite awesome.</p>",
        "id": 226786759,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613642038
    },
    {
        "content": "<p>More or less. If <code>def d := t ...</code>, <code>delta_instance</code> creates an instance of <code>C d</code> if it can infer an instance <code>C (t ...)</code> (taking into account arguments to <code>d</code>). So if that's enough for you, great</p>",
        "id": 226787072,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1613642223
    },
    {
        "content": "<p>That makes my life much easier, and lets me easily bring <a href=\"https://github.com/leanprover-community/mathlib/issues/5463\">#5463</a> into very neat order</p>",
        "id": 226787343,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613642382
    }
]