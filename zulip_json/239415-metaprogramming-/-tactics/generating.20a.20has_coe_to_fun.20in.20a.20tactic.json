[
    {
        "content": "<p>How does one make this work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.equiv.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.app_builder</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"k\">do</span>\n  <span class=\"n\">try_inst</span> <span class=\"bp\">←</span> <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">has_coe_to_fun</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">equiv.perm</span> <span class=\"n\">ℕ</span><span class=\"o\">)],</span>\n  <span class=\"n\">trace</span> <span class=\"n\">try_inst</span><span class=\"o\">,</span>\n  <span class=\"gr\">admit</span>\n</code></pre></div>\n<p>I've been trying things like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">sic</span> <span class=\"bp\">←</span> <span class=\"n\">mk_instance_cache</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">equiv.perm</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">sic</span><span class=\"o\">,</span> <span class=\"n\">coe_inst</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">sic.get</span> <span class=\"bp\">`</span><span class=\"n\">has_coe_to_fun</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>but that <code>get</code> fails.</p>",
        "id": 222018336,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610063428
    },
    {
        "content": "<p>Very difficult, but there's an implicit second universe parameter, so this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"k\">do</span>\n  <span class=\"n\">try_inst</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">has_coe_to_fun.</span><span class=\"o\">{</span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">equiv.perm</span> <span class=\"n\">ℕ</span><span class=\"o\">)),</span>\n  <span class=\"n\">trace</span> <span class=\"n\">try_inst</span><span class=\"o\">,</span>\n  <span class=\"gr\">admit</span>\n</code></pre></div>",
        "id": 222019940,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610064769
    },
    {
        "content": "<p><code>get</code> would need to generate meta universe variables for every universe that cannot be inferred from the arguments.</p>",
        "id": 222021173,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1610065785
    },
    {
        "content": "<p>For some reason, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cls</span> <span class=\"bp\">←</span> <span class=\"n\">get_classes</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">equiv.</span><span class=\"o\">{</span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>fails to get <code>has_coe_to_fn</code> too, with app builder complaining that <code>[app_builder] failed to create an 'has_coe_to_fun'-application, there are missing implicit arguments</code>. But what would those implicit arguments be? Another <code>ℕ</code>?</p>",
        "id": 222021176,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610065791
    },
    {
        "content": "<p>I think those would be universe parameters</p>",
        "id": 222021261,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1610065853
    },
    {
        "content": "<p>For which things? Other than the already specified <code>Sort 1</code> and <code>Sort 1</code>, what else is implicit?</p>",
        "id": 222021310,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610065904
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">has_coe_to_fun</span>\n<span class=\"n\">has_coe_to_fun</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"o\">(</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>This means that the function type that you're coercing to can be in different universes from the argument</p>",
        "id": 222021451,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1610066020
    }
]