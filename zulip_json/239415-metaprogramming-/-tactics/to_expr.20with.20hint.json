[
    {
        "content": "<p>How can I help <code>to_expr</code> when I have partial information about the expected type? In </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">run_cmd</span> <span class=\"k\">do</span>\n           <span class=\"n\">mv</span> <span class=\"bp\">←</span> <span class=\"n\">mk_mvar</span><span class=\"o\">,</span>\n           <span class=\"k\">let</span> <span class=\"n\">e'</span> <span class=\"o\">:=</span> <span class=\"bp\">``</span><span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">%%</span><span class=\"n\">mv</span><span class=\"o\">),</span>\n           <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n           <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n           <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">L</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">%%</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_type</span> <span class=\"n\">R</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic.trace</span>\n           <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">skip</span>\n           <span class=\"kd\">end</span>\n</code></pre></div>\n<p>I'd like to replace the <code>to_expr</code> line with \"please elaborate <code> ``(0 &lt; 1)</code> so that it unifies with <code>e'</code> so that the trace will print int.</p>",
        "id": 223251083,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611073423
    },
    {
        "content": "<p>use <code>unify e e'</code> before the <code>match</code></p>",
        "id": 223251443,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1611073521
    },
    {
        "content": "<p>Isn't it too late? Lean will have already elaborated, right?</p>",
        "id": 223251496,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611073549
    },
    {
        "content": "<p>And Lean complains <code>e'</code> is a pexpr.</p>",
        "id": 223251618,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611073590
    },
    {
        "content": "<p>It will be it won't have assigned types to meta variables. In your case, I hadn't considered it but the numerals will have been defaulted to <code>nat</code></p>",
        "id": 223251650,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1611073604
    },
    {
        "content": "<p>That's the main point: I want to get around that nat by default crazyness.</p>",
        "id": 223251731,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611073642
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/to_expr.20with.20hint/near/223251618\">said</a>:</p>\n<blockquote>\n<p>And Lean complains <code>e'</code> is a pexpr.</p>\n</blockquote>\n<p>You can solve that issue with <code>e' &lt;- to_expr ``((0 : ℤ) &lt; %%mv),</code></p>",
        "id": 223251744,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1611073648
    },
    {
        "content": "<p>If you know what type you want them to be, you can write <code>to_expr ``(0 &lt; (1 : %%t))</code></p>",
        "id": 223251887,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1611073704
    },
    {
        "content": "<p>(where <code>t</code> is the expected type)</p>",
        "id": 223251902,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1611073712
    },
    {
        "content": "<p>Maybe I minimized too much. I want to use <code>change_core</code>,  but it wants a <code>expr</code> as the new goal and if I use <code>to_expr</code> it gets the wrong numerals.</p>",
        "id": 223252017,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611073777
    },
    {
        "content": "<p>Where do you get that <code>pexpr</code> from?</p>",
        "id": 223252183,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1611073852
    },
    {
        "content": "<p>It's an argument of the tactic.</p>",
        "id": 223252233,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611073880
    },
    {
        "content": "<p>I'm super confused, now I no longer understand why the interactive <code>change</code> tactic doesn't have this issue.</p>",
        "id": 223252270,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611073901
    },
    {
        "content": "<p>Oh it does</p>",
        "id": 223252347,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611073928
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223252376,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611073943
    },
    {
        "content": "<p>This doesn't work, and it's exactly the minimized version of the problem that's driving me crazy.</p>",
        "id": 223252400,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611073962
    },
    {
        "content": "<p>Can anyone make a version of <code>change</code> that succeeds in the above example?</p>",
        "id": 223252488,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611074003
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">force_type</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">my_change</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">pexpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">g</span> <span class=\"o\">::</span> <span class=\"n\">gs</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">force_type</span> <span class=\"bp\">%%</span><span class=\"n\">p</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">force_type</span> <span class=\"bp\">%%</span><span class=\"n\">p</span> <span class=\"bp\">%%</span><span class=\"n\">g</span><span class=\"o\">),</span>\n   <span class=\"c\">/-</span><span class=\"cm\"> etc -/</span>\n</code></pre></div>",
        "id": 223253005,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1611074225
    },
    {
        "content": "<p>I think that should work. Can you try it and tell me how it goes?</p>",
        "id": 223253059,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1611074252
    },
    {
        "content": "<p>(don't forget the edit)</p>",
        "id": 223253133,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1611074279
    },
    {
        "content": "<p>It works a bit too much, it creates two copies of my goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"n\">setup_tactic_parser</span>\n<span class=\"kd\">def</span> <span class=\"n\">force_type</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">@[interactive]</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">my_change</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">g</span> <span class=\"bp\">←</span> <span class=\"n\">get_goal</span><span class=\"o\">,</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">force_type</span> <span class=\"bp\">%%</span><span class=\"n\">p</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span>  <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">force_type</span> <span class=\"bp\">%%</span><span class=\"n\">p</span> <span class=\"bp\">%%</span><span class=\"n\">g</span><span class=\"o\">),</span>\n  <span class=\"n\">skip</span>\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">my_change</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">2 goals</span>\n<span class=\"cm\">⊢ 0 &lt; 1</span>\n\n<span class=\"cm\">⊢ 0 &lt; 1</span>\n<span class=\"cm\">-/</span>\n <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223253962,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611074611
    },
    {
        "content": "<p>What if you use <code>i_to_expr</code> instead of <code>to_expr</code>?</p>",
        "id": 223254582,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1611074889
    },
    {
        "content": "<p>same</p>",
        "id": 223254653,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611074927
    },
    {
        "content": "<p>Sorry, what we want is <code>i_to_expr_no_subgoals</code></p>",
        "id": 223254909,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1611075049
    },
    {
        "content": "<p>That one seems to work! I'll try it in the real use case.</p>",
        "id": 223255254,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611075194
    },
    {
        "content": "<p>It doesn't work in the real world <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">my_change</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223257724,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611076100
    },
    {
        "content": "<p>Error message?</p>",
        "id": 223257861,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1611076154
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">tactic.force_type</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n<span class=\"n\">term</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 223258055,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611076223
    },
    {
        "content": "<p>I understand Lean finds this tricky, but it's very sad.</p>",
        "id": 223258504,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611076408
    },
    {
        "content": "<p>This coercion from nat to real is so important for my course that I'm tempted to have a specific hack trying to put it in front of local variable that has type nat in case the change fails.</p>",
        "id": 223258791,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611076529
    },
    {
        "content": "<p>Your version is still performing better than the official one, <code>my_change 1/(↑n+1) &gt; 0,</code> works whereas <code>change 1/(↑n+1) &gt; 0,</code> fails</p>",
        "id": 223259235,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611076680
    },
    {
        "content": "<p>I've spent way too much time fighting this. I give up. I'd still be very grateful if someone can get this to work (including by hard-wiring a special treatment of the nat to real coercion).</p>",
        "id": 223264414,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611078509
    },
    {
        "content": "<p>Is it possible to get a <code>can_lift</code> working here?<br>\nFor example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">can_lift</span> <span class=\"n\">ℝ</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">coe</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">floor</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">floor</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h.symm</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">lift</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">ℤ</span> <span class=\"k\">with</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">one_div</span><span class=\"o\">,</span> <span class=\"n\">gt_iff_lt</span><span class=\"o\">,</span> <span class=\"n\">inv_pos</span><span class=\"o\">],</span>\n    <span class=\"n\">refine</span> <span class=\"n\">add_pos_of_nonneg_of_pos</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hn</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">floor_coe</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223283030,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611085761
    },
    {
        "content": "<p>The proof construction for the second goal can probably be automated. And there seem to be some lemmas necessary to make the <code>can_lift</code> to work transitively from <code>real</code> to <code>nat</code>.</p>",
        "id": 223283346,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611085872
    }
]