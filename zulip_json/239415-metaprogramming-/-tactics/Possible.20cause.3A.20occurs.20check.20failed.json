[
    {
        "content": "<p>Why <code>exact</code> doesn't work in the following example (even though, <code>infer_type `(nat.lt_irrefl %%n %%h) &gt;&gt;= trace</code> prints <code>false</code>)?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">setup_tactic_parser</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">nm</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">nm</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">infer_type</span><span class=\"o\">,</span>\n   <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n   <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n   <span class=\"n\">h</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">nm</span><span class=\"o\">,</span>\n   <span class=\"n\">infer_type</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_irrefl</span> <span class=\"err\">%%</span><span class=\"n\">n</span> <span class=\"err\">%%</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span>\n   <span class=\"n\">exact</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_irrefl</span> <span class=\"err\">%%</span><span class=\"n\">n</span> <span class=\"err\">%%</span><span class=\"n\">h</span><span class=\"o\">),</span>\n   <span class=\"n\">get_local</span> <span class=\"n\">nm</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">clear</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">test</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"k\">show</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_ne_zero</span> <span class=\"n\">n</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 209582710,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1599695496
    },
    {
        "content": "<p>I also tried to <code>instantiate_mvars</code> on <code>n</code> and <code>h</code> to no success. In fact, tracing <code>expr.to_raw_fmt</code> showed the same thing before and after instantiation.</p>",
        "id": 209582780,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1599695538
    },
    {
        "content": "<p>The following example is even more intriguing. Why can't the metavariable be unified?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">test&#39;</span> <span class=\"o\">(</span><span class=\"n\">nm</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">nm</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">infer_type</span><span class=\"o\">,</span>\n   <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n   <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n   <span class=\"n\">g</span> <span class=\"bp\">::</span> <span class=\"bp\">_</span> <span class=\"err\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n   <span class=\"n\">h</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">nm</span><span class=\"o\">,</span>\n   <span class=\"n\">unify</span> <span class=\"n\">g</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_irrefl</span> <span class=\"err\">%%</span><span class=\"n\">n</span> <span class=\"err\">%%</span><span class=\"n\">h</span><span class=\"o\">),</span>\n   <span class=\"n\">get_local</span> <span class=\"n\">nm</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">clear</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">test</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- unify tactic failed, failed to unify</span>\n  <span class=\"c1\">--   ?m_1 : false</span>\n  <span class=\"c1\">-- and</span>\n  <span class=\"c1\">--   nat.lt_irrefl n h : false</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"k\">show</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_ne_zero</span> <span class=\"n\">n</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 209582957,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1599695760
    },
    {
        "content": "<p>Never mind, I was using an \"old version\" of <code>n</code>. The metavariable probably turned invalid after <code>cases</code>, thus the error. Although this is only a guess. I'd love to know a proper explanation.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">nm</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">nm</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">infer_type</span><span class=\"o\">,</span>\n   <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n   <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n   <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">nm</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">infer_type</span><span class=\"o\">,</span>\n   <span class=\"n\">h</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">nm</span><span class=\"o\">,</span>\n   <span class=\"n\">exact</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_irrefl</span> <span class=\"err\">%%</span><span class=\"n\">n</span> <span class=\"err\">%%</span><span class=\"n\">h</span><span class=\"o\">),</span>\n   <span class=\"n\">get_local</span> <span class=\"n\">nm</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">clear</span>\n</code></pre></div>",
        "id": 209583319,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1599696031
    },
    {
        "content": "<p>That's right. Think of <code>cases</code> as <code>revert</code>-ing variables and then <code>intro</code>-ing them again. They have the same names (most of the time) but they are not technically the same variables.</p>",
        "id": 209583505,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599696176
    },
    {
        "content": "<p>In the API, <code>cases_core</code> actually returns a list of substitutions so that you can transport your expressions from one context to the other.</p>",
        "id": 209583603,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599696243
    },
    {
        "content": "<p>You can see this in action if you print <code>ls &lt;- local_context, trace $ ls.map expr.local_uniq_name</code>. You'll see the ugly names of the variables and that they change when you call <code>cases</code></p>",
        "id": 209583765,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599696384
    }
]