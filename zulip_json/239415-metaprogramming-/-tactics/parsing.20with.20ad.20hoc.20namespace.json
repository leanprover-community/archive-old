[
    {
        "content": "<p>Hey, this is somewhat related to my previous question \"interactive tactic printer\": I was wondering: how to parse a string with an ad hoc namespace ?</p>\n<p>for instance, I would like to have some function such as :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">parse_expr_with_namespace</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kn\">namespace</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.full_names</span> <span class=\"n\">true</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">tactic.trace</span> <span class=\"bp\">$</span> <span class=\"n\">parse_expr_with_namespace</span> <span class=\"s2\">\"div\"</span> <span class=\"bp\">`</span><span class=\"n\">nat</span>\n<span class=\"c1\">-- nat.div</span>\n</code></pre></div>",
        "id": 276625258,
        "sender_full_name": "Xavier Martinet",
        "timestamp": 1648217964
    },
    {
        "content": "<p>I have tried stuff like this, to no avail:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">all</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">run_with_state'</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">interaction_monad</span>\n<span class=\"kn\">open</span> <span class=\"n\">interaction_monad.result</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">run_with_state'</span> <span class=\"o\">{</span><span class=\"n\">σ₁</span> <span class=\"n\">σ₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">state</span> <span class=\"o\">:</span> <span class=\"n\">σ₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tac</span> <span class=\"o\">:</span> <span class=\"n\">interaction_monad</span> <span class=\"n\">σ₁</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">interaction_monad</span> <span class=\"n\">σ₂</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">tac</span> <span class=\"n\">state</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n     <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">success</span> <span class=\"n\">val</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">success</span> <span class=\"n\">val</span> <span class=\"n\">s</span>\n     <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">exception</span> <span class=\"n\">fn</span> <span class=\"n\">pos</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">exception</span> <span class=\"n\">fn</span> <span class=\"n\">pos</span> <span class=\"n\">s</span>\n     <span class=\"kd\">end</span>\n<span class=\"kd\">end</span> <span class=\"n\">interaction_monad</span>\n<span class=\"kd\">end</span> <span class=\"n\">run_with_state'</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">run_on_input</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">lean.parser</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nmspace</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">lean.parser.run</span> <span class=\"bp\">$</span> <span class=\"k\">do</span>\n  <span class=\"n\">interaction_monad.get_state</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"bp\">λ</span> <span class=\"n\">ps</span><span class=\"o\">,</span> <span class=\"n\">lean.parser.of_tactic</span> <span class=\"bp\">$</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">ps.env</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"o\">:=</span>  <span class=\"n\">env.mark_namespace_as_open</span> <span class=\"n\">nmspace</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"o\">:=</span>  <span class=\"n\">env.execute_open</span> <span class=\"n\">nmspace</span><span class=\"o\">,</span>\n    <span class=\"n\">tactic.set_env</span> <span class=\"n\">env</span><span class=\"o\">,</span>\n    <span class=\"n\">prod.fst</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">interaction_monad.run_with_state'</span> <span class=\"n\">lean.parser_state</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ps</span> <span class=\"bp\">$</span> <span class=\"n\">lean.parser.with_input</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">do</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">run_on_input</span> <span class=\"n\">lean.parser.pexpr</span> <span class=\"bp\">`</span><span class=\"n\">int</span> <span class=\"s2\">\"succ\"</span><span class=\"o\">,</span> <span class=\"n\">tactic.trace</span> <span class=\"n\">e</span>\n<span class=\"c1\">-- tactic failed</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">int</span>\n<span class=\"k\">#eval</span> <span class=\"k\">do</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">run_on_input</span> <span class=\"n\">lean.parser.pexpr</span> <span class=\"bp\">`</span><span class=\"n\">int</span> <span class=\"s2\">\"succ\"</span><span class=\"o\">,</span> <span class=\"n\">tactic.trace</span> <span class=\"n\">e</span>\n<span class=\"c1\">-- int.succ</span>\n<span class=\"k\">#eval</span> <span class=\"k\">do</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">run_on_input</span> <span class=\"n\">lean.parser.pexpr</span> <span class=\"bp\">`</span><span class=\"n\">nat</span> <span class=\"s2\">\"succ\"</span><span class=\"o\">,</span> <span class=\"n\">tactic.trace</span> <span class=\"n\">e</span>\n<span class=\"c1\">-- int.succ</span>\n</code></pre></div>",
        "id": 276647804,
        "sender_full_name": "Xavier Martinet",
        "timestamp": 1648227071
    }
]