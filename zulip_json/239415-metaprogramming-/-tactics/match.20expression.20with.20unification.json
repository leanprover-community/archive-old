[
    {
        "content": "<p>Is there a way to pattern match on an expression with definition unfolding (like <code>tactic.unify</code> does)? For example, how to make the following function <code>get_first_summand</code> working also in the other cases?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">get_first_summand</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"c1\">-- tactic.unify `(nat.add 2 5) e, -- tactic.unify would work but there is no space for variables</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nat.add</span> <span class=\"bp\">%%</span><span class=\"n\">a</span> <span class=\"bp\">%%</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">return</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">return</span> <span class=\"n\">a</span>\n\n<span class=\"c1\">-- succeeds with 2</span>\n<span class=\"kd\">run_cmd</span> <span class=\"n\">tactic.trace</span> <span class=\"o\">(</span><span class=\"n\">get_first_summand</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nat.add</span> <span class=\"mi\">2</span> <span class=\"mi\">5</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">new_func</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">nat.add</span> <span class=\"n\">n</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- fails</span>\n<span class=\"kd\">run_cmd</span> <span class=\"n\">tactic.trace</span> <span class=\"o\">(</span><span class=\"n\">get_first_summand</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">new_func</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n<span class=\"kd\">run_cmd</span> <span class=\"n\">tactic.trace</span> <span class=\"o\">(</span><span class=\"n\">get_first_summand</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>I don't want to just add more cases for <code>new_func</code> or <code>has_add.add</code> because function <code>new_func</code> could be defined after the tactic.</p>",
        "id": 235149682,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1618823413
    },
    {
        "content": "<p>You'll have to use <code>whnf</code> or <code>dsimp</code> to reduce the expression to head-normal form, then <code>match</code> on it. There is unfortunately no way to directly match 'up to conversion'. You'll also have to decide what transparency to use; this controls which constants get unfolded during the <code>whnf</code> reduction.</p>",
        "id": 235150394,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1618823813
    },
    {
        "content": "<p>(Actually, you could <code>unify</code> with a term containing metavariables, then read those. But that's probably more expensive.)</p>",
        "id": 235150624,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1618823936
    },
    {
        "content": "<p>I do not need too much efficiency in this case, how do I construct an expression with metavariables?</p>",
        "id": 235150783,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1618824018
    },
    {
        "content": "<p>I guess there's no quotation for mvars, so you'll have to build it manually. Something like this (untested):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">summand1</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">mk_mvar</span> <span class=\"n\">nat</span><span class=\"o\">,</span>\n<span class=\"n\">summand2</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">mk_mvar</span> <span class=\"n\">nat</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">pattern</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nat.add</span> <span class=\"bp\">%</span><span class=\"n\">summand1</span> <span class=\"bp\">%</span><span class=\"n\">summand2</span><span class=\"o\">),</span>\n<span class=\"n\">unify</span> <span class=\"n\">e</span> <span class=\"n\">pattern</span><span class=\"o\">,</span>\n<span class=\"n\">summand1</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">instantiate_mvars</span> <span class=\"n\">summand1</span><span class=\"o\">,</span>\n<span class=\"n\">pure</span> <span class=\"n\">summand1</span>\n</code></pre></div>\n<p>I should stress this is highly unidiomatic; I just had this idea. YMMV.</p>",
        "id": 235151465,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1618824359
    },
    {
        "content": "<p>thanks, I will play with it, maybe <code>whnf</code> will suffice (but I don't want to expand what could be expanded in the match, so I will have to play with reducibility a bit)</p>",
        "id": 235151805,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1618824518
    },
    {
        "content": "<p>For completeness, this is a working code with metavariables.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">get_first_summand</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">summand1</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">tactic.mk_mvar</span><span class=\"o\">,</span>\n  <span class=\"n\">summand2</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">tactic.mk_mvar</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">pattern</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nat.add</span> <span class=\"bp\">%%</span><span class=\"n\">summand1</span> <span class=\"bp\">%%</span><span class=\"n\">summand2</span><span class=\"o\">),</span>\n  <span class=\"n\">tactic.unify</span> <span class=\"n\">e</span> <span class=\"n\">pattern</span><span class=\"o\">,</span>\n  <span class=\"n\">summand1</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">tactic.instantiate_mvars</span> <span class=\"n\">summand1</span><span class=\"o\">,</span>\n  <span class=\"n\">return</span> <span class=\"n\">summand1</span>\n</code></pre></div>",
        "id": 235153421,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1618825347
    }
]