[
    {
        "content": "<p>Dear All,</p>\n<p>this question belongs in the \"New members metaprogramming\" stream.</p>\n<p>I feel very uneasy about <code>tactic</code> and I may have gotten in a weird place to ask this question unwillingly.</p>\n<p>I would like confirmation/correction about whether the definition below does what I think it does.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">cat</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">expr</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">l</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Does this mean \"take the <code>expr</code> in <code>l</code>, concatenate it with the list in <code>m</code> and produce a list that is one longer, inside the tactic monad\"?</p>\n<p>Many of these concepts are well below my level of reasonable confidence for me to be sure or even know how to check in some examples.<br>\nFor instance, what is the role of the \"irrelevant\" <code>λ e</code>?</p>\n<p>Thanks!</p>",
        "id": 279790034,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650613701
    },
    {
        "content": "<p>Do you understand the general idea of a monad? If not you might want to take a look at simple ones such as <code>option</code> or <code>list</code> in order to grasp the concept.</p>",
        "id": 279790300,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1650613910
    },
    {
        "content": "<p>I may have a too general idea of a monad.  I am usually able to get by with <code>option</code> and <code>list</code>.  I struggle specifically with <code>tactic</code>, though (and have been playing with it for about a week, so I do not really have much experience at all).</p>",
        "id": 279790618,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650614129
    },
    {
        "content": "<p>Okay, in that case: The <code>tactic</code> monad is basically a <code>state</code> monad that allows you to indicate that an operation failed in addition. This means that the bind operation will execute the left hand side (in this case <code>l</code>) which:</p>\n<ol>\n<li>might change the state</li>\n<li>might throw an error which will prevent the next (right hand side) computation from getting executed and instead give back the error as a result</li>\n</ol>\n<p>the right hand side then gets passed the value that the first computation returned, in this case an <code>expr</code> and is allowed to execute whatever to return a <code>list expr</code> in this case.</p>\n<p>So effectively what you are doing here is:</p>\n<ol>\n<li>execute tactic <code>l</code>, if it fails return instantly with a failure</li>\n<li>if it doesnt fail tactic <code>l</code> might have changed the tactic state</li>\n<li>pass the result (the <code>expr</code>) of tactic <code>l</code> as a parameter <code>e</code> to your lambda that may return some expression of type <code>tactic (list expr)</code>. Note that this computation will already be happening with the updated state. In this specific case you are simply choosing to ignore<code>e</code></li>\n<li>the lambda then just returns <code>m</code> but evaluated with the state that <code>l</code> returned so this computation is different from just returning <code>m</code> due to the eventual error and state change of <code>l</code></li>\n</ol>",
        "id": 279792396,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1650615377
    },
    {
        "content": "<p>Ok, this clarifies somewhat.  Here is what I am trying to do.</p>",
        "id": 279792615,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650615540
    },
    {
        "content": "<p>I have a list of \"user-provided\" <code>expr</code>s and a list of <code>expr</code>s that lean found in some <code>expr</code>.  The user wants to get lean to match the <code>expr</code>s that it gives to lean with a sublist of the <code>expr</code>s that lean produces.</p>",
        "id": 279792739,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650615612
    },
    {
        "content": "<p>for instance, lean computes <code>[a, b, c]</code> and the user want to obtain <code>b</code>.</p>",
        "id": 279792756,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650615633
    },
    {
        "content": "<p>So, they pass <code>[b]</code>, but, because of how things go with pretty-printing and all, they may not be an exact match, but may only <code>unify</code> to the same thing.</p>",
        "id": 279792798,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650615670
    },
    {
        "content": "<p>So, I try to get lean to try to unify each element of <code>[a, b, c]</code> with the <code>b</code> that the user provides and, as soon as it matches, lean then uses the <code>b</code> that lean had, instead of the one that the user had provided.</p>",
        "id": 279792904,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650615740
    },
    {
        "content": "<p>So far, I am able to get this to work.</p>",
        "id": 279792940,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650615756
    },
    {
        "content": "<p>My problem starts when the user passes more than one input.  Then, I want lean to find matches <em>different</em> from the matches that it already found.</p>",
        "id": 279792973,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650615795
    },
    {
        "content": "<p>Now, if I were not in a monad-mess, I would simply recursively do the match on the initial element of the list, and then call the recursion with some <code>list.erase (matched element)</code>.  Except that the <code>matched element</code> is now in <code>tactic expr</code> and not in <code>expr</code> and I am entangled!</p>",
        "id": 279793110,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650615872
    },
    {
        "content": "<p>(The error part that you mention is also very relevant, since I am throwing errors if a match for the user provided <code>expr</code> is not found and I want the computation to stop there and Lean to say that it did not find a match)</p>",
        "id": 279793171,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650615922
    },
    {
        "content": "<p>Here is the code that I have so far.  Maybe it makes things appear clearer.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.core</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">cat</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">expr</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">l</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- adapted from Arthur's code</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">_root_.expr.unify_with</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">e'</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"n\">succeeds</span> <span class=\"bp\">$</span> <span class=\"n\">unify</span> <span class=\"n\">e</span> <span class=\"n\">e'</span>\n\n<span class=\"c1\">-- adapted from `tactic.op_induction.is_opposite` in `data.opposite`</span>\n<span class=\"sd\">/--  Given `e : expr` and `l : list expr`, find the first expression in `l` that unifies with `e`.</span>\n<span class=\"sd\">Fail if no such hypothesis exist in the local context. -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">_root_.expr.find_in</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lc</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">pe</span> <span class=\"bp\">←</span> <span class=\"n\">pp</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">lc.mfilter</span> <span class=\"bp\">$</span> <span class=\"n\">e.unify_with</span> <span class=\"bp\">|</span> <span class=\"n\">fail</span> <span class=\"n\">format</span><span class=\"bp\">!</span><span class=\"s2\">\"No {pe} found\"</span><span class=\"o\">,</span>\n  <span class=\"n\">return</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">_root_.list.to_arg_list_cat</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">sl</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">::</span><span class=\"n\">es</span><span class=\"o\">)</span> <span class=\"n\">sl</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">ma</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">e.find_in</span> <span class=\"n\">sl</span><span class=\"o\">),</span>\n  <span class=\"n\">cat</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">ma</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_root_.list.to_arg_list_cat</span> <span class=\"n\">es</span> <span class=\"o\">(</span><span class=\"n\">sl.erase</span> <span class=\"n\">ma</span><span class=\"o\">))</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n</code></pre></div>",
        "id": 279793615,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650616253
    },
    {
        "content": "<p>I hoped that <code>list.to_arg_list_cat</code> would take an element of the first list, checked whether it could be unified with an element of the second list.</p>\n<ul>\n<li>If not, throw an error.</li>\n<li>If it unifies to <code>ma</code>, then append <code>ma</code> to the new list, and repeat the matching with the remaining elements of the first list and the second list without <code>ma</code>.</li>\n</ul>\n<p>I do not think that this is what that function does, though.</p>",
        "id": 279793822,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650616378
    },
    {
        "content": "<p><del>So, reading again your answer, it seems that <code>e</code> in <code>λ e</code> is what I would like to remove from <code>m</code>?</del><br>\nI don't know, I am very confused.</p>",
        "id": 279794118,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650616548
    },
    {
        "content": "<p>Let me try again with a question.</p>\n<p>Is it possible to extract a <code>bool</code> from a <code>tactic bool</code>?</p>",
        "id": 279800501,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650620356
    },
    {
        "content": "<p>From the discussion above, I understand that the <code>tactic bool</code> may have failed, in which case I would extract nothing.  Otherwise, I probably can read off the value of the <code>bool</code>?  If I wanted to do this, how would I go about it?</p>",
        "id": 279800682,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650620421
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">mybool</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">mytactic</span>\n</code></pre></div>\n<p>for the rest of your question my meta programming experience in lean 3 is too limited im afraid</p>",
        "id": 279801546,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1650620980
    },
    {
        "content": "<p>Thank you: I feel that I understood something from what you said, but I am still confused by a lot of basic questions.</p>",
        "id": 279801643,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650621038
    },
    {
        "content": "<p>Some small amount of testing seems to indicate that this might be a solution to the question that I asked.  I leave it here, in case someone can either check it or needs it!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.move_add</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"sd\">/-- A `tactic bool` computing whether the user-input `e` unifies with `e'`. -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">expr.unify_with</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">e'</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"n\">succeeds</span> <span class=\"bp\">$</span> <span class=\"n\">unify</span> <span class=\"n\">e</span> <span class=\"n\">e'</span>\n\n<span class=\"sd\">/-- A `tactic expr` that either finds the first entry of `lc` that unifies with `e` or fails. -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">expr.find_in</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lc</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">pe</span> <span class=\"bp\">←</span> <span class=\"n\">pp</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">lc.mfilter</span> <span class=\"bp\">$</span> <span class=\"n\">e.unify_with</span> <span class=\"bp\">|</span> <span class=\"n\">fail</span> <span class=\"n\">format</span><span class=\"bp\">!</span><span class=\"s2\">\"No {pe} found\"</span><span class=\"o\">,</span>\n  <span class=\"n\">return</span> <span class=\"n\">h</span>\n\n<span class=\"sd\">/-- A `tactic (list expr)` that either finds a sublist of its second argument`sl` that unifies</span>\n<span class=\"sd\">entry-wise with its first argument or fails. -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">list.to_arg_list_cat</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">sl</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">::</span><span class=\"n\">es</span><span class=\"o\">)</span> <span class=\"n\">sl</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">ma</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">e.find_in</span> <span class=\"n\">sl</span><span class=\"o\">),</span>\n  <span class=\"n\">nl</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">list.to_arg_list_cat</span> <span class=\"n\">es</span> <span class=\"o\">(</span><span class=\"n\">sl.erase</span> <span class=\"n\">ma</span><span class=\"o\">)),</span>\n  <span class=\"n\">functor.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">),</span> <span class=\"n\">nl.cons</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">return</span> <span class=\"n\">ma</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 279805272,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650623544
    },
    {
        "content": "<p>Henrik, thank you for your explanation: what you said definitely helped me make progress!</p>",
        "id": 279805299,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650623579
    },
    {
        "content": "<p>If I understand correctly, when you are inside a <code>do</code> block, Lean displays in the infoview types <em>without</em> <code>tactic</code>, but I am supposed to think that they are all implicitly <code>tactic</code>.<br>\nIf this is so, then that was part of my confusion!<br>\nIf that is not so, then I am confused at a deeper level.</p>",
        "id": 279805496,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650623726
    },
    {
        "content": "<p>I think the whole point of a monad is that you cannot escape it! You can't get a <code>nat</code> from a <code>list nat</code> because the list might be empty.</p>",
        "id": 279805564,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650623763
    },
    {
        "content": "<p>I don't know about the Lean 3 specifics but this is most certainly not the case in Lean 4, could you show what makes you think so?</p>",
        "id": 279805776,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1650623946
    },
    {
        "content": "<p>Kevin, I see your point, but you could assign <code>0</code> to every list.  I was worried that someone would have answered this to my questions, but luckily the community here is too nice to do so!</p>",
        "id": 279805951,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650624048
    },
    {
        "content": "<p>Well you can get a <code>bool</code> from a <code>tactic bool</code> because you can just use <code>tt</code>! That's what you didn't want me to say, right? :-)</p>",
        "id": 279806001,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650624099
    },
    {
        "content": "<p>Indeed, this is what I was lucky enough to not have received as a first answer!  <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 279806077,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650624125
    },
    {
        "content": "<p>Anyway, I think that what I have above is correct: it works inside the monad, extracts what seems to work in a dubious case and <strong>does not leave the monad</strong>!</p>",
        "id": 279806138,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650624181
    },
    {
        "content": "<p>So your <code>tactic bool</code> term could be made from <code>tt</code> or <code>ff</code> or it could represent some kind of failure.</p>",
        "id": 279806179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650624214
    },
    {
        "content": "<p>Yes, and the failure is passed on to the <code>tactic (list expr)</code>: you either get a <code>list expr</code> or you fail, since you failed at one of the steps that was building your list.</p>",
        "id": 279806321,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650624310
    },
    {
        "content": "<p>Now that I (think that I) have solved this question, it all seems much simpler than I thought at the beginning.</p>",
        "id": 279806351,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650624351
    },
    {
        "content": "<p>Henrik, I had read about this failure thing, but it was not until you explained it that I actually internalized it.  Thank you again!</p>",
        "id": 279806422,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650624388
    },
    {
        "content": "<p>Regarding \"not leaving the monad\", I can imagine that there are silly kinds of monads, like the identity monad, where you can enter and leave at will.  However, I would also agree with Kevin that \"most\" monads are of the kind that you cannot leave.  The ones that have been mentioned in this stream seem to be this trap-like kind of monad:</p>\n<ul>\n<li><code>list</code>, you can leave, if the list is not <code>[]</code>,</li>\n<li><code>option</code>, you can leave, if you are not <code>none</code>,</li>\n<li><code>tactic</code>, you can leave, if you did not produce an error.</li>\n</ul>\n<p>At least, this is my understanding of it!</p>",
        "id": 279806635,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650624552
    },
    {
        "content": "<p>In fact, when dealing with polynomials, in mathlib there are the <code>degree</code>, taking values in <code>option nat</code> and the <code>nat_degree</code>, taking values in <code>nat</code> and assigning <code>0</code> to <code>none</code>.  I was at the beginning completely unable to work with the <code>option nat</code>-valued <code>degree</code>, but now I think that a lot of the difficulties of working with <code>nat_degree</code> arise from the \"weird\" assignment of <code>0 : nat</code> as the degree of <code>0 : R[X]</code>.</p>",
        "id": 279806930,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650624728
    },
    {
        "content": "<p>So your concept of \"leaving\" isnt exactly correct here, what you are referring to as leaving is the bind operation you see if you have a code like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">myMonadicComputation</span>\n<span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">somePureComputation</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>what this compiles to is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">myMonadicComputation</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">somePureComputation</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>so you are actually never leaving the monad you are making use of the bind operator in a syntactically nice way that makes it <em>seem</em> like you are leaving but you are in fact always there.</p>\n<p>Now there is actually a way to turn e.g. a <code>tactic expr</code> into just an <code>expr</code> or an error. After all not all parts of the Lean compiler live in the tactic moand right?</p>\n<p>If we take a look at the definition of the tactic monad in we can see that its a</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">state</span> <span class=\"bp\">→</span> <span class=\"n\">result</span> <span class=\"n\">state</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>where <code>state</code> is the tactic state and  <code>α</code> is whatever is \"stored inside the monad\" so if you really want to escape the monad all you have to do is provide a state to this function and it will give you back either an error or a <code>state</code> coupled with an <code>α</code> at which point you have truly escaped. The provider of this state is the Lean compiler who constructs the initial tactic state from other information when you open a tactic</p>",
        "id": 279807618,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1650625128
    },
    {
        "content": "<p>Yes, I think that we probably all mean the same thing, but put the emphasis on different parts.  I would consider the lingering possibility that an error is produced as \"you have not left the monad, you were simply lucky enough that you were not bitten by it\".  On the other hand, if what you are interested in is the outcome of the computation, and you get a result, it is immaterial that something else could have failed!</p>",
        "id": 279808413,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650625630
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/concatenating.20and.20the.20tactic.20monad/near/279800501\">said</a>:</p>\n<blockquote>\n<p>Is it possible to extract a <code>bool</code> from a <code>tactic bool</code>?</p>\n</blockquote>\n<p>How about \"Is it possible to extract a <code>unit</code> from a <code>tactic unit</code>?\" Now the answer \"Sure, just use <code>unit.star</code>\" isn't even that silly, because what else could you get? But you are throwing away the effects of the tactic, which might be introducing a variable or running the simplifier. It is not just about success or failure.</p>",
        "id": 279812827,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650628522
    },
    {
        "content": "<p>Reid, I agree.  It is also how I feel about <code>degree → nat_degree</code> for polynomials.  At some level, it is not wrong to assign degree <code>0</code> to the zero polynomial, but, even though it is constant, the zero polynomial is a different constant than the other constant polynomials!</p>",
        "id": 279814154,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650629211
    }
]