[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you think it would be possible to write an intro tactic that does <code>rintros</code> in a flattened way? I'm not asking for mathlib inclusion, this is part of my controlled natural language for teaching  experimentation. I'd like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">my_intro</span> <span class=\"o\">(</span><span class=\"n\">hQ</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hQ'</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hP</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>to work.</p>",
        "id": 223625462,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611312082
    },
    {
        "content": "<p>doesn't rintro do that already?</p>",
        "id": 223661479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611331694
    },
    {
        "content": "<p>I think Patrick wants to avoid these angle brackets:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">hQ</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">⟨(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">hQ</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">)⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hP</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223661802,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1611331820
    },
    {
        "content": "<p>Presumably the heuristic Patrick wants is \"insert angle brackets until the type annotation unifies with the field\", as opposed to \"unfold fully and ensure the type annotations still match\"</p>",
        "id": 223662092,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611331930
    },
    {
        "content": "<p>oh I missed that it was a conjunction</p>",
        "id": 223666949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611333994
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Should this (1) always require that conjunctions are fully expanded or (2) split conjunctions only if the provided types don't match? (1) is easier and I think more stable because it doesn't require guessing and backtracking</p>",
        "id": 223667228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611334142
    },
    {
        "content": "<p>I think I'll always want to fully expand.</p>",
        "id": 223672934,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611336795
    },
    {
        "content": "<p>are the types required?</p>",
        "id": 223673438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611337081
    },
    {
        "content": "<p>Also I'm guessing you only want this for, say, conjunction and exists, not all inductive types (in particular splitting a nat seems bad)</p>",
        "id": 223673682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611337200
    },
    {
        "content": "<p>Splitting a nat won't happen, because that's <code>|</code> not <code>,</code> notation. A better question would be whether <code>prod</code> should be split.</p>",
        "id": 223674330,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611337467
    },
    {
        "content": "<p>also definitions that unfold to a conjunction</p>",
        "id": 223677662,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611338979
    },
    {
        "content": "<p>Yes, I'm thinking about conjunction and exists. Splitting a nat would be a disaster.</p>",
        "id": 223678800,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611339490
    },
    {
        "content": "<p>What do you want to do about disjunctive things?</p>",
        "id": 223678873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611339524
    },
    {
        "content": "<p>Definitions that unfold to a conjunction are not necessary, I can think of situation where you don't want to do that.</p>",
        "id": 223678880,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611339527
    },
    {
        "content": "<p>Disjunctive things are sufficiently rare that I don't really care.</p>",
        "id": 223678939,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611339554
    },
    {
        "content": "<p>and are the types for decoration or are they required</p>",
        "id": 223679089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611339612
    },
    {
        "content": "<p>Decoration is better, but they could be required.</p>",
        "id": 223679154,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611339643
    },
    {
        "content": "<p>I can do decoration, that's probably easier while you are figuring out what to write</p>",
        "id": 223679217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611339675
    },
    {
        "content": "<p>the names could be required too; like you have to intro 1 or 3 things in your example</p>",
        "id": 223679365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611339737
    },
    {
        "content": "<p>I don't understand what you mean by requiring name. How could you avoid providing names anyway? You mean autogenerating names?</p>",
        "id": 223679512,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611339812
    },
    {
        "content": "<p>yeah</p>",
        "id": 223679530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611339818
    },
    {
        "content": "<p>that's what rintro does now</p>",
        "id": 223679546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611339826
    },
    {
        "content": "<p>I mean if the idea is to have a more strict version of rintro then it would make sense not to allow autogenerated names</p>",
        "id": 223679721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611339897
    },
    {
        "content": "<p>unless you want <code>rintro _</code> to work</p>",
        "id": 223679762,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611339915
    },
    {
        "content": "<p>The idea is not really to have a more strict version, I want a simpler to use version.</p>",
        "id": 223679798,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611339936
    },
    {
        "content": "<p>And I don't want <code>rintro _</code> to work.</p>",
        "id": 223679812,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611339944
    },
    {
        "content": "<p>By the way you can accomplish something similar to splitting all conjunctions using <code>casesm [_/\\_]</code> IIRC</p>",
        "id": 223679932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611340001
    },
    {
        "content": "<p>do you want <code>&lt;x,y&gt;</code> to still work?</p>",
        "id": 223680247,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611340152
    },
    {
        "content": "<p>or is this not part of the syntax anymore</p>",
        "id": 223680279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611340170
    },
    {
        "content": "<p>I don't care. I'd like to avoid students having to write it, but it doesn't matter if it actually still works.</p>",
        "id": 223680324,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611340193
    },
    {
        "content": "<p>The <code>casesm</code> thing is after introducing stuff, right?</p>",
        "id": 223680421,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611340220
    },
    {
        "content": "<p>yeah</p>",
        "id": 223680434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611340225
    },
    {
        "content": "<p>so it would be something like <code>intros names, casesm</code></p>",
        "id": 223680470,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611340238
    },
    {
        "content": "<p>it's not a perfect match</p>",
        "id": 223680488,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611340247
    },
    {
        "content": "<p>casesm doesn't seem to like exists</p>",
        "id": 223680596,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611340304
    },
    {
        "content": "<p>did you try <code>[Exists _]</code>?</p>",
        "id": 223680622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611340319
    },
    {
        "content": "<p>I can imagine the <code>my_intro?</code> version would also be useful for teaching</p>",
        "id": 223680723,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611340362
    },
    {
        "content": "<p>I didn't try, and it works.</p>",
        "id": 223680782,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611340390
    },
    {
        "content": "<p>dunno if that makes it too easy</p>",
        "id": 223680816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611340405
    },
    {
        "content": "<p>I'm also restricting this intro thing actually. My current version (which is based on regular intro, not rintro) has separate version for introducing data and Prop. Because on paper they are seen as completely different actions, and I'm tired of student starting proofs with \"Assume there exists <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\varepsilon &gt; 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">ε</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>\".</p>",
        "id": 223681008,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611340491
    },
    {
        "content": "<p>oh, so then you don't want <code>(exists x, p x) -&gt; Q</code> to work as <code>my_intro (x : A) (h : p x)</code>?</p>",
        "id": 223681186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611340599
    },
    {
        "content": "<p>Good question.</p>",
        "id": 223681262,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611340634
    },
    {
        "content": "<p>Damn it, consistency</p>",
        "id": 223681277,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611340648
    },
    {
        "content": "<p>If this were first order logic, that would be two steps: the first intros <code>x</code> and leaves goal <code>p x -&gt; Q</code> and the second would be an implication intro</p>",
        "id": 223681400,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611340708
    },
    {
        "content": "<p>Actually I think I want the current behavior (without rintro) with this one: an implication intro followed by a cases.</p>",
        "id": 223681517,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611340783
    },
    {
        "content": "<p>So actually I guess I only want automatic splitting of <code>and</code></p>",
        "id": 223681576,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611340805
    },
    {
        "content": "<p>cool</p>",
        "id": 223681606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611340819
    },
    {
        "content": "<p>and it only works on props?</p>",
        "id": 223681621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611340832
    },
    {
        "content": "<p>Yes</p>",
        "id": 223681643,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611340847
    },
    {
        "content": "<p>ok I'll try my hand at it</p>",
        "id": 223681688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611340880
    },
    {
        "content": "<p>Thank you very much!</p>",
        "id": 223681709,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611340897
    }
]