[
    {
        "content": "<p>Is there any nice way to do string replacement? i.e \"xyz\".replace(\"x\", \"a\") =&gt; \"ayz\"? Seems there are no utilities for this. </p>\n<p>Context:<br>\nI'm using metaprogramming to extract and process a dataset consisting of Lean proofs in raw text format. I'd like to do some cleanup like changing universe variables to a consistent set (u_1, u_2, etc...). I figure it'll be easiest to do this with string replacement, but if there's some easy way to replace universe variables in the underlying expr corresponding to each proof that would work too.</p>",
        "id": 235416842,
        "sender_full_name": "Joe Palermo",
        "timestamp": 1618952996
    },
    {
        "content": "<p>I think basically all string munging needs to be done as <code>list</code>-of-characters munging.</p>",
        "id": 235423458,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618956212
    },
    {
        "content": "<p>You can replace universe levels at the <code>expr</code> level too.</p>",
        "id": 235423487,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618956234
    },
    {
        "content": "<p>But I'm failing to immediately find clear examples of this being done. :-) I do remember seeing some functions for doing this at whole-expression level, but what I'm seeing now is traversing expressions and manually manipulating <code>level</code> terms.</p>",
        "id": 235423785,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618956379
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/string.20replace/near/235423458\">said</a>:</p>\n<blockquote>\n<p>I think basically all string munging needs to be done as <code>list</code>-of-characters munging.</p>\n</blockquote>\n<p>That's good to know</p>",
        "id": 235528055,
        "sender_full_name": "Joe Palermo",
        "timestamp": 1619017886
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/string.20replace/near/235423785\">said</a>:</p>\n<blockquote>\n<p>But I'm failing to immediately find clear examples of this being done. :-) I do remember seeing some functions for doing this at whole-expression level, but what I'm seeing now is traversing expressions and manually manipulating <code>level</code> terms.</p>\n</blockquote>\n<p>Wow I would love to have a function for doing that at whole-expression level. If anyone finds this please let me know :)</p>",
        "id": 235530145,
        "sender_full_name": "Joe Palermo",
        "timestamp": 1619018463
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"337523\">Joe Palermo</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/string.20replace/near/235530145\">said</a>:</p>\n<blockquote>\n<p>Wow I would love to have a function for doing that at whole-expression level. If anyone finds this please let me know :)</p>\n</blockquote>\n<p>I think you want <a href=\"https://leanprover-community.github.io/mathlib_docs/find/expr.instantiate_univ_params\">docs#expr.instantiate_univ_params</a>?</p>",
        "id": 235586196,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1619040883
    },
    {
        "content": "<p>Joe, (based on my understanding of your project), is this on the data gathering side or on the putting the expression back into Lean side?  If on the data gathering side, you could also use  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/expr.collect_univ_params\">docs#expr.collect_univ_params</a> I think to find the universe params in your expression and print them.  If it is on the putting the expression into Lean side, you can't modify the expression, because you haven't parsed your string into an expression.  And you can't parse your string into an expression until you handle the missing universes.  I suggest in that case, you may want to do the string processing in Python (or whatever language you are using to generate your expressions).  Lean 3 doesn't have good string editing.  </p>\n<p>Now, if on the data gathering side you want to standardize the universes in the expressions before dumping them to output, then I think a combination of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/expr.collect_univ_params\">docs#expr.collect_univ_params</a> to find the universe names and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/expr.instantiate_univ_params\">docs#expr.instantiate_univ_params</a> to replace them, could work.</p>",
        "id": 235595170,
        "sender_full_name": "Jason Rute",
        "timestamp": 1619046020
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> Thanks for pointing it out!</p>\n<p><span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span> It's on the data gathering side. Like you pointed out, it will make things easier to standardize universes before dumping to output. In the interim I wrote up a Python script to do it but it's ugly and could lead to bugs, so I'd rather do it in Lean if I can. I'll try expr.instantiate_univ_params</p>",
        "id": 235604486,
        "sender_full_name": "Joe Palermo",
        "timestamp": 1619052686
    }
]