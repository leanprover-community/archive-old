[
    {
        "content": "<p>Hello. I'd love any and all feedback and critiques about my <code>succ_less</code> tactic. It is supposed to turn goals of the form <code>a.succ.succ = b</code> into <code>a + 2 = b</code> (the rhs of the equality is not dealt with).</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">setup_tactic_parser</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">expr</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">count_succ</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"err\">%%</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">count_succ</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">succ_less</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n   <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"err\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">count_succ</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n   <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n   <span class=\"n\">x</span> <span class=\"err\">←</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n   <span class=\"n\">assertv</span> <span class=\"n\">h</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">eq</span> <span class=\"bp\">ℕ</span> <span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"err\">%%</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"err\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n   <span class=\"n\">clear</span> <span class=\"n\">e</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">):</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">succ_less</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">succ_less</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hn</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>A few particular things I am uncertain about:</p>\n<ul>\n<li>are there any edge cases <code>count_succ</code> wouldn't work as expected?</li>\n<li>is there a better way to quote <code> `(@eq ℕ (%%a + %%x) %%b)</code> (aka how do I turn an <code>expr ff</code> into <code>expr tt</code> (because then <code> ```(a + x = b)</code> may work))?</li>\n<li>any best practices/ways to make the code smaller and more elegant that I am missing?</li>\n</ul>",
        "id": 209735993,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1599792191
    },
    {
        "content": "<p>I'd like to understand the relation between <code>expr ff</code> and <code>pexpr</code>. In the following example from <em>A Metaprogramming Framework for Formal Verification</em>, <code> ``` </code> seem to produce a <code>pexpr</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">do</span> <span class=\"n\">intro</span> <span class=\"bp\">`</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>(I haven't finished reading the paper, it may explain this later.)</p>",
        "id": 209736368,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1599792733
    },
    {
        "content": "<p><code>expr ff</code> and <code>pexpr</code> are the same thing. <code>pexpr</code> is a synonym.</p>",
        "id": 209736506,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599792939
    },
    {
        "content": "<p>I would make sure you print a useful error message when the <code>guard</code>  fails and when <code>infer_type</code> doesn't find a <code>_ = _</code> proposition.</p>",
        "id": 209736588,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599793079
    },
    {
        "content": "<p>To implement Simon's error message suggestion, here are two useful patterns:</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"err\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">e</span> <span class=\"bp\">|</span> <span class=\"n\">fail</span><span class=\"bp\">!</span> <span class=\"s2\">&quot;error message&quot;</span><span class=\"o\">,</span>\n  <span class=\"bp\">...</span>\n  <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">fail</span><span class=\"bp\">!</span> <span class=\"s2\">&quot;error message&quot;</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p><code>tactic.core</code> should have a variant of <code>change</code> that works on hypotheses, which you could use instead of the <code>assertv ..., clear</code>. Might give a slightly nicer term.</p>\n<p>There are a few ways to generalise this tactic (if you're interested in that):</p>\n<ul>\n<li>Make it work on the target if no hypothesis is given.</li>\n<li>Make it work on any expression <code>nat.succ n</code> that appears in the hypothesis/target, not only on the lhs of an equation.</li>\n<li>Make it work up to definitional equality so that e.g. <code>let f := nat.succ in f (f n)</code> gets normalised.</li>\n</ul>\n<p>N.b. your test case would pass even if <code>succ_less</code> was a noop since <code>exact</code> works up to definitional equality. You can use <code>guard_hyp</code> to specify exactly which type a hypothesis should have.</p>",
        "id": 209794576,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1599837745
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span>  That's much better than what I came up with. </p>\n<p><span class=\"user-mention\" data-user-id=\"298376\">@Pedro Minicz</span> In your example, it would be easier for reviewers to read if you put in comments after each meaningful proof command the goal that one is expected to see</p>",
        "id": 209795264,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599838048
    },
    {
        "content": "<p>(I think you tagged the wrong Janis. ;))</p>",
        "id": 209796764,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1599838664
    },
    {
        "content": "<p>My bad</p>",
        "id": 209796884,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599838716
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 209929084,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1600000474
    },
    {
        "content": "<p>Grr, I'm still too stupid to reply to the right thread. Sorry!</p>",
        "id": 209929096,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1600000510
    }
]