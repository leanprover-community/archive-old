[
    {
        "content": "<p>Is there a way to make this work? I've been looking at the implementation of the <code>#html</code> command. The effect I'm trying to get is that some tactic takes a bunch of <code>html</code> and renders it below the goal state in the Info View.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">html</span> <span class=\"n\">empty</span> <span class=\"o\">:=</span> <span class=\"s2\">\"hello world\"</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">c₁</span> <span class=\"o\">:</span> <span class=\"n\">component</span> <span class=\"n\">unit</span> <span class=\"n\">empty</span> <span class=\"o\">:=</span> <span class=\"n\">component.stateless</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">D</span><span class=\"o\">]),</span>\n  <span class=\"k\">let</span> <span class=\"n\">c₂</span> <span class=\"o\">:</span> <span class=\"n\">component</span> <span class=\"n\">tactic_state</span> <span class=\"n\">empty</span> <span class=\"o\">:=</span> <span class=\"n\">component.ignore_props</span> <span class=\"n\">c₁</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.save_widget</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">⟩</span> <span class=\"n\">c₂</span><span class=\"o\">,</span> <span class=\"c1\">-- fails: unknown identifier 'c₂'</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 267178918,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641555220
    },
    {
        "content": "<p>Basically, I would like a variant of <code>trace</code> that renders <code>html</code>.</p>",
        "id": 267179735,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641555798
    },
    {
        "content": "<p>I'd try <code>trace_widget</code>.</p>",
        "id": 267180031,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641556081
    },
    {
        "content": "<p>Oh, and you're mixing up two things here.</p>",
        "id": 267180101,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641556108
    },
    {
        "content": "<p>You're not writing tactic code, but instead calling the let-tactic (i.e. you try to prove <code>true</code> using the lemma <code>html empty</code>).</p>",
        "id": 267180122,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641556126
    },
    {
        "content": "<p>What you want is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">html</span> <span class=\"o\">:=</span> <span class=\"s2\">\"hello world\"</span><span class=\"o\">,</span>\n         <span class=\"bp\">...</span>\n         <span class=\"n\">tactic.trace_widget</span> <span class=\"n\">c₂</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 267180163,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641556166
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Thanks! Now the code is compiling. But I don't actually see any result in the Info View.</p>",
        "id": 267185730,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641560376
    },
    {
        "content": "<p>I can reproduce the error, something's seriously going wrong:</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"p\">{</span><span class=\"nx\">response</span><span class=\"o\">:</span> <span class=\"s2\">\"error\"</span><span class=\"p\">,</span> <span class=\"nx\">message</span><span class=\"o\">:</span> <span class=\"s2\">\"'unreachable' code was reached\"</span><span class=\"p\">,</span> <span class=\"nx\">seq_num</span><span class=\"o\">:</span> <span class=\"mf\">750</span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 267189439,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641562639
    },
    {
        "content": "<p>This is what I have atm:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- let s : string := \"test\",</span>\n  <span class=\"o\">(</span><span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">html</span> <span class=\"n\">empty</span> <span class=\"o\">:=</span> <span class=\"s2\">\"hello world\"</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">c₁</span> <span class=\"o\">:</span> <span class=\"n\">component</span> <span class=\"n\">unit</span> <span class=\"n\">empty</span> <span class=\"o\">:=</span> <span class=\"n\">component.stateless</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"s2\">\"joy\"</span><span class=\"o\">]),</span>\n    <span class=\"k\">let</span> <span class=\"n\">c₂</span> <span class=\"o\">:</span> <span class=\"n\">component</span> <span class=\"n\">tactic_state</span> <span class=\"n\">empty</span> <span class=\"o\">:=</span> <span class=\"n\">component.ignore_props</span> <span class=\"n\">c₁</span><span class=\"o\">,</span>\n    <span class=\"n\">tactic.trace_widget</span> <span class=\"n\">c₂</span><span class=\"o\">,</span>\n    <span class=\"n\">tactic.trace</span> <span class=\"s2\">\"boo\"</span><span class=\"o\">,</span>\n    <span class=\"n\">tactic.skip</span><span class=\"o\">),</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 267189693,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641562796
    },
    {
        "content": "<p>It's not you, it's an issue in Lean.  Some widgets seem to fail to render.  I've just pushed an update to the vscode extension to show the error message.</p>",
        "id": 267189863,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641562904
    },
    {
        "content": "<p>Aha, thanks for your help!</p>",
        "id": 267189985,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641562975
    },
    {
        "content": "<p>Johan gets a rare bonus point for reaching unreachable code. This has become much harder recently.</p>",
        "id": 267190811,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641563446
    },
    {
        "content": "<p>Mmmh, so for some unclear reason <code>trace_widget</code> does not work inside tactic proofs.  This works just fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">tactic.trace_widget</span> <span class=\"bp\">$</span> <span class=\"n\">component.pure</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"s2\">\"hello world\"</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 267191329,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641563763
    },
    {
        "content": "<p>The error shows up as a regular message, in green font, instead of the usual red font. Is that because it's somehow too nested for the extension to recognize it as an error message?</p>",
        "id": 267192889,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641564581
    },
    {
        "content": "<p>The \"'unreachable' code was reached\" message?  I didn't spend too much time styling it.</p>",
        "id": 267193099,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641564700
    },
    {
        "content": "<p>(The error message only refers to the body of the message.  When it works, <code>trace_widget</code> generates a regular \"green\" message.  The only thing failing here is rendering the message body.)</p>",
        "id": 267193221,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641564751
    },
    {
        "content": "<p>aha</p>",
        "id": 267193623,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641564985
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> I just learned from <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> that the following works (and fails):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">trace_html</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">html</span> <span class=\"n\">empty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">tactic.trace_widget</span> <span class=\"bp\">$</span> <span class=\"n\">component.pure</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">html</span> <span class=\"n\">empty</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"s2\">\"em\"</span> <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"o\">:=</span> <span class=\"s2\">\"test\"</span><span class=\"o\">,</span>\n  <span class=\"n\">trace_html</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"s2\">\"joy!\"</span><span class=\"o\">),</span> <span class=\"c1\">-- works</span>\n  <span class=\"n\">trace_html</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"s2\">\"more joy!\"</span><span class=\"o\">),</span> <span class=\"c1\">-- works</span>\n  <span class=\"c1\">-- trace_html (foo s), -- fails</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 267217217,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641576669
    },
    {
        "content": "<p>I think you know why the last trace_html fails.</p>",
        "id": 267217613,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641576860
    },
    {
        "content": "<p>I'm relieved that trace_widget seems to work after all, although you have to put it behind a helper definition.  Maybe it's because of the lambdas?</p>",
        "id": 267217656,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641576899
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/interactive.20save_widget/near/267217613\">said</a>:</p>\n<blockquote>\n<p>I think you know why the last trace_html fails.</p>\n</blockquote>\n<p>No, actually I don't. I really hoped that it would work.</p>",
        "id": 267217732,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641576933
    },
    {
        "content": "<p>My mental model is that <code>let</code> is just an \"inline\" <code>def</code>. But apparently this is not the case.</p>",
        "id": 267217766,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641576959
    },
    {
        "content": "<p>My assumption was just that it uses the name of the tactic to hook the position, so when the tactic is anonymous it doesn't have anything to get the pos from</p>",
        "id": 267217824,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641576971
    },
    {
        "content": "<p>Oooh, I guess I need to do some sort of tactic parser dance to make the version with <code>s</code> work?</p>",
        "id": 267218085,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641577096
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/interactive.20save_widget/near/267217732\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/interactive.20save_widget/near/267217613\">said</a>:</p>\n<blockquote>\n<p>I think you know why the last trace_html fails.</p>\n</blockquote>\n<p>No, actually I don't. I really hoped that it would work.</p>\n</blockquote>\n<p>What happens is that you have two lists of variables.  1) The list of variables in the meta-world, where your tactic runs.  and 2) The list of variables in the object-world, the proof of <code>true</code>.  The two kinds of variables cannot refer to each other.</p>\n<p>The <code>let</code> tactic creates a variable in 2), while your tactic wants one in 1).</p>",
        "id": 267218110,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641577109
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/interactive.20save_widget/near/267218085\">said</a>:</p>\n<blockquote>\n<p>Oooh, I guess I need to do some sort of tactic parser dance to make the version with <code>s</code> work?</p>\n</blockquote>\n<p><code>(do let s : string := \"test\", trace_html (foo s))</code> should work.</p>",
        "id": 267218155,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641577137
    },
    {
        "content": "<p>Right, but usually you don't notice this distinction. <code>rw [lemma_foo, hyp_foo]</code> just works.</p>",
        "id": 267218179,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641577148
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/interactive.20save_widget/near/267218179\">said</a>:</p>\n<blockquote>\n<p>Right, but usually you don't notice this distinction. <code>rw [lemma_foo, hyp_foo]</code> just works.</p>\n</blockquote>\n<p><code>hyp_foo</code> is a variable in 2).</p>",
        "id": 267218212,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641577172
    },
    {
        "content": "<p>You probably don't notice the distinction because the list 1) is always empty in a tactic block.</p>",
        "id": 267218299,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641577208
    },
    {
        "content": "<p>Where does <code>lemma_foo</code> live? And where does my <code>let s</code> live? Don't they all live in (2)?</p>",
        "id": 267218444,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641577280
    },
    {
        "content": "<p>Yes, the <code>let</code> tactic modifies (2).  <code>lemma_foo</code> is in the environment and accessible to both tactics and the proof.</p>",
        "id": 267218650,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641577391
    },
    {
        "content": "<p>So <code>rw</code> is grabbing things from (2). I want a version of <code>trace_html</code> that also grabs things from (2). That should be possible, right?</p>",
        "id": 267218789,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641577458
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">trace_html</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"c1\">-- ??</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 267218862,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641577505
    },
    {
        "content": "<p>But I guess I need to do <code>ctx ← local_context,</code> etc...</p>",
        "id": 267218871,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641577511
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Right... I understand that can't work. But somehow <code>let s := ...</code> records specific data.</p>",
        "id": 267218965,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641577554
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/interactive.20save_widget/near/267217824\">said</a>:</p>\n<blockquote>\n<p>My assumption was just that it uses the name of the tactic to hook the position, so when the tactic is anonymous it doesn't have anything to get the pos from</p>\n</blockquote>\n<p>It's indeed the lambdas. <a href=\"https://github.com/leanprover-community/lean/pull/663\">https://github.com/leanprover-community/lean/pull/663</a></p>\n<p>When Lean executes VM code, it compiles lambdas by adding aux definitions to the environment.  These aux definitions are only available in the environment of the VM state, but not the environment of the tactic state.</p>",
        "id": 267219598,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641577870
    },
    {
        "content": "<p>So, could there in theory be some <code>metalet</code> that adds data to some (tactic?) state that is then made available to things like <code>trace</code> and <code>trace_html</code>?</p>",
        "id": 267219967,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641578061
    },
    {
        "content": "<p>Here is what I would like to be able to do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">foobar</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">html</span> <span class=\"n\">empty</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"s2\">\"div\"</span> <span class=\"o\">[]</span> <span class=\"bp\">$</span> <span class=\"n\">l.map</span> <span class=\"o\">(</span><span class=\"n\">html.of_string</span> <span class=\"bp\">∘</span> <span class=\"n\">to_string</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"n\">ctx</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.local_context</span><span class=\"o\">,</span> <span class=\"n\">trace_html</span> <span class=\"n\">ctx</span><span class=\"o\">),</span> <span class=\"c1\">-- works, and I understand why</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"o\">:=</span> <span class=\"s2\">\"test\"</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">what_I_care_about</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">s</span><span class=\"o\">],</span>\n  <span class=\"n\">trace_html</span> <span class=\"o\">(</span><span class=\"n\">foobar</span> <span class=\"n\">what_I_care_about</span><span class=\"o\">),</span> <span class=\"c1\">-- fails, and I understand why</span>\n  <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">what_I_care_about</span> <span class=\"o\">:=</span> <span class=\"n\">what_I_care_about</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">],</span>\n  <span class=\"n\">trace_html</span> <span class=\"o\">(</span><span class=\"n\">foobar</span> <span class=\"n\">what_I_care_about</span><span class=\"o\">),</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 267224832,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641580466
    },
    {
        "content": "<p>So somehow, I want to record some metadata, during the proof, and I want to be able to refer to this later on.</p>",
        "id": 267224876,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641580494
    },
    {
        "content": "<p>I guess this can be done using new tactic state types. But it then all the old tactics aren't easily available.</p>",
        "id": 267224936,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641580529
    },
    {
        "content": "<p>I would love to have this \"blend in\" transparently in the usual tactic state.</p>",
        "id": 267224970,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641580548
    },
    {
        "content": "<p>I think that's called \"quasiquote\" in programming?</p>",
        "id": 267230674,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1641582992
    }
]