[
    {
        "content": "<p><code>to_expr</code> behaves differently with an expected type: observe</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"o\">(</span><span class=\"k\">do</span>\n    <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">s.sum</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"c1\">-- works, generating a `add_comm_monoid α` goal</span>\n    <span class=\"n\">exact</span> <span class=\"n\">e</span><span class=\"o\">),</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"o\">(</span><span class=\"k\">do</span>\n    <span class=\"n\">tgt</span> <span class=\"bp\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n    <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">s.sum</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">%%</span><span class=\"n\">tgt</span><span class=\"o\">),</span> <span class=\"c1\">-- failed to synthesize type class instance for `add_comm_monoid α`</span>\n    <span class=\"n\">exact</span> <span class=\"n\">e</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is there a way I can persuade <code>to_expr</code> to work, generating new goals for failed typeclass inference, but with the presence of an expected type?</p>",
        "id": 282051368,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652321865
    },
    {
        "content": "<p>This is not an answer, but me trying to understand at least what the problem is!  Is what you are asking analogous to what's below in tactic mode?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"c1\">--  failed to synthesize type class instance for `add_comm_monoid α`</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">s.sum</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"c1\">-- works, generating a `add_comm_monoid α` goal</span>\n  <span class=\"n\">apply</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">s.sum</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 282054885,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652326368
    },
    {
        "content": "<p>If this is what it is, then there is an extended comment to <code>i_to_expr_for_apply</code> that may be useful, if I understood better what it said!</p>",
        "id": 282055269,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652326977
    },
    {
        "content": "<p>Yes, under the hood <code>refine</code> differs from <code>apply</code> by calling <code>to_expr</code> with the expected type before calling <code>exact</code>. (Perhaps I should have just asked the question about <code>refine</code> and <code>apply</code>, in fact.)</p>",
        "id": 282067785,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652340341
    },
    {
        "content": "<p>I did read those comments on <code>i_to_expr_for_apply</code>, but didn't get what I wanted. Maybe I will read them again, thanks. :-)</p>",
        "id": 282067866,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652340372
    },
    {
        "content": "<p>Honestly, I feel very relieved that even you have a hard time with the <code>meta</code> world: I find it very hard to navigate, while at the same time feel that it should be easy!</p>",
        "id": 282070111,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652341997
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>, do either of you know what is going on here, or a workaround?</p>",
        "id": 282393842,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652597750
    },
    {
        "content": "<p>Is <code>e ← to_expr ``(λ s : finset ℕ, @finset.sum %%tgt _ (id _) s _),</code> an acceptable workaround?</p>",
        "id": 282394097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652598080
    },
    {
        "content": "<p>Oh, that seems way too specific to this particular example.</p>",
        "id": 282394231,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652598244
    },
    {
        "content": "<p>If the intended use case were some variant of <code>refine</code> that would generate instance goals, how would <code>refine' λ s : finset ℕ, s.sum _</code> possibly know where exactly it was meant to insert the <code>%%tgt</code> in your solution?</p>",
        "id": 282394263,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652598312
    },
    {
        "content": "<p>Or for that matter how would <code>refine'</code> decide which underscores need to be wrapped in <code>id _</code>?</p>",
        "id": 282394276,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652598349
    },
    {
        "content": "<p>oh you don't have to insert the <code>%%tgt</code> there, you can keep it on the outside</p>",
        "id": 282394278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652598351
    },
    {
        "content": "<p>Okay, so the second question then? How to automatically insert the <code>id</code>s?</p>",
        "id": 282394324,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652598374
    },
    {
        "content": "<p>I'm not sure how you are getting this <code>%%tgt</code> from a generic elaborator</p>",
        "id": 282394339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652598407
    },
    {
        "content": "<p>Just like <code>refine</code> does: look up the current goal.</p>",
        "id": 282394353,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652598427
    },
    {
        "content": "<p>no I mean <code>refine</code> doesn't use quotations and antiquotation like this</p>",
        "id": 282394363,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652598447
    },
    {
        "content": "<p>the issue is specific to the use of quotation</p>",
        "id": 282394367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652598458
    },
    {
        "content": "<p>But here's the definition of <code>refine</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">pexpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">tgt</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n   <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">%%</span><span class=\"n\">tgt</span><span class=\"o\">)</span> <span class=\"n\">tt</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">exact</span>\n</code></pre></div>",
        "id": 282394415,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652598526
    },
    {
        "content": "<p>So I think <code>refine</code> <em>is</em> using (anti)quotation like this.</p>",
        "id": 282394439,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652598598
    },
    {
        "content": "<p>And it is the <code>to_expr</code> step of <code>refine</code> that fails when if can't immediately solve the typeclass search.</p>",
        "id": 282394485,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652598646
    },
    {
        "content": "<p>(but would have succeeded if we hadn't given an expected type via <code>: %%tgt</code>)</p>",
        "id": 282394489,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652598667
    },
    {
        "content": "<p>how about</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">(</span><span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">pexpr</span> <span class=\"o\">:=</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">s.sum</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">tgt</span> <span class=\"bp\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n    <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">infer_type</span> <span class=\"n\">e</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">unify</span> <span class=\"n\">tgt</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">e</span><span class=\"o\">),</span>\n</code></pre></div>",
        "id": 282394497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652598678
    },
    {
        "content": "<p>I'll go play with that in my bigger examples. :-)</p>",
        "id": 282394502,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652598705
    },
    {
        "content": "<p>Oh,</p>",
        "id": 282394576,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652598828
    },
    {
        "content": "<p>no, this is not helping: I want the advantages of the expected type, so I don't have to write everything out.</p>",
        "id": 282394620,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652598851
    },
    {
        "content": "<p>it is using the expected type there</p>",
        "id": 282394642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652598874
    },
    {
        "content": "<p>e.g. if I defined</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">setup_tactic_parser</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">refine'</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">pexpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">tgt</span> <span class=\"bp\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n  <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">infer_type</span> <span class=\"n\">e</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">unify</span> <span class=\"n\">tgt</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">e</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">refine'</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">tactic.refine'</span> <span class=\"n\">q</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">interactive</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n</code></pre></div>\n<p>then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s.sum</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"k\">show</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>fails, showing <code>refine'</code> is not a good replacement for <code>refine</code>, because it can't work out the type of the lambda binder.</p>",
        "id": 282394661,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652598904
    },
    {
        "content": "<p>to be fair,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">refine'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">s.sum</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)),</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s.sum</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n</code></pre></div>\n<p>also don't work, for the reasons you have already indicated, so I'm not sure the expected type is the issue here</p>",
        "id": 282394743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652599071
    },
    {
        "content": "<p>Hmm... okay. What I want is a variant of <code>refine</code> so the following works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">s.sum</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">show</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 282394929,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652599270
    },
    {
        "content": "<p>I think you need to change the elaborator itself if you want it to give you back the pending typeclass goals. Like the comment for <code>i_to_expr_for_apply</code> says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>   <span class=\"n\">Another</span> <span class=\"n\">possible</span> <span class=\"n\">fix</span><span class=\"o\">:</span> <span class=\"n\">we</span> <span class=\"n\">modify</span> <span class=\"n\">the</span> <span class=\"n\">elaborator</span> <span class=\"n\">to</span> <span class=\"n\">return</span> <span class=\"n\">pending</span>\n   <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"n\">resolution</span> <span class=\"n\">problems</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"n\">store</span> <span class=\"n\">them</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">tactic_state.</span>\n</code></pre></div>",
        "id": 282394933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652599281
    },
    {
        "content": "<p>My last example feels like a very common step of \"human reasoning\" that just isn't expressible in the natural order in Lean at the moment. I really want the proof to reflect the idea \"I know I want to take some sum over my finset, but I don't yet know what the codomain of the function I'm summing ought to be\", so at a <em>later</em> step we can reflect the human idea \"oh, it suffices now to take <code>α = ℕ</code> and use the identity function\".</p>",
        "id": 282395066,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652599526
    },
    {
        "content": "<p>you can still write essentially this proof with the <code>id</code>... it's not pretty but it works in a pinch</p>",
        "id": 282395117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652599584
    },
    {
        "content": "<p>And is then completely un-explainable to a Lean beginner. :-) Which doesn't help when the goal here is to show that one can express the human chain of reasoning directly...</p>",
        "id": 282395130,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652599652
    },
    {
        "content": "<p>not sure what to tell you... I'm not up to patching lean right now</p>",
        "id": 282395136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652599676
    },
    {
        "content": "<p>No, that's great already. Knowing that I'm not just missing something is an excellent answer. :-)</p>",
        "id": 282395177,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652599700
    },
    {
        "content": "<p>I've just been working with the <code>congr_with_pattern_match</code> and for this reason, I think that it could be a solution to everything. <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> </p>\n<p>Do you think that you might be able to do a similarly assisted pattern-matching, where the three inputs are</p>\n<ul>\n<li>the given expression with metavariables <code>e</code>,</li>\n<li><em>itself again</em> <code>e</code>as the <code>lhs</code> and</li>\n<li>the actual target as the <code>rhs</code>?</li>\n</ul>",
        "id": 282410206,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652622353
    },
    {
        "content": "<p>(I can try, but since I only recursed inside <code>expr.app</code>s, it will take me a while to get to a stage where it recurses far enough into an expr that I can really see if it applies (refines?) or not.)</p>",
        "id": 282410261,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652622411
    },
    {
        "content": "<p>E.g., simply changing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">refine'</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">pexpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">tgt</span> <span class=\"bp\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n  <span class=\"n\">e'</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"n\">e</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">infer_type</span><span class=\"o\">,</span><span class=\"n\">trace</span> <span class=\"n\">e'</span><span class=\"o\">,</span>\n  <span class=\"n\">equate_with_pattern</span> <span class=\"n\">e'</span> <span class=\"n\">e'</span> <span class=\"n\">tgt</span>\n</code></pre></div>\n<p>and then doing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">s.sum</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n<span class=\"c\">/-</span><span class=\"cm\">  Goals:</span>\n<span class=\"cm\">α: Type ?</span>\n<span class=\"cm\">⊢ finset ℕ → α</span>\n<span class=\"cm\">α: Type ?</span>\n<span class=\"cm\">s: finset ℕ</span>\n<span class=\"cm\">⊢ Type ?</span>\n<span class=\"cm\">α: Type ?</span>\n<span class=\"cm\">s: finset ℕ</span>\n<span class=\"cm\">⊢ add_comm_monoid ?m_1</span>\n<span class=\"cm\">α: Type ?</span>\n<span class=\"cm\">s: finset ℕ</span>\n<span class=\"cm\">⊢ ℕ → ?m_1</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 282410721,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652623171
    },
    {
        "content": "<p>analogous to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">s.sum</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n<span class=\"c\">/-</span><span class=\"cm\">  Goals:</span>\n<span class=\"cm\">α: Type ?</span>\n<span class=\"cm\">s: finset ℕ</span>\n<span class=\"cm\">⊢ add_comm_monoid α</span>\n<span class=\"cm\">α: Type ?</span>\n<span class=\"cm\">s: finset ℕ</span>\n<span class=\"cm\">⊢ ℕ → α</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 282410810,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652623219
    },
    {
        "content": "<p>It possibly needs a tiny little bit more of unification, but seems like a possible compromise, maybe.</p>",
        "id": 282410848,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652623249
    },
    {
        "content": "<p>This might work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.refine'</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">pexpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">tgt</span> <span class=\"bp\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n  <span class=\"n\">e'</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"n\">e</span> <span class=\"n\">tt</span> <span class=\"n\">ff</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">infer_type</span><span class=\"o\">,</span>   <span class=\"c1\">--    &lt;---  added the ascription `tt ff` to `to_expr`</span>\n  <span class=\"n\">equate_with_pattern</span> <span class=\"n\">e'</span> <span class=\"n\">tgt</span> <span class=\"n\">e'</span><span class=\"o\">,</span>\n  <span class=\"n\">unify</span> <span class=\"n\">e'</span> <span class=\"n\">tgt</span><span class=\"o\">,</span>  <span class=\"c1\">--  added unification, since I mistakenly removed it from the copied code</span>\n  <span class=\"n\">apply</span> <span class=\"n\">e</span>  <span class=\"c1\">--  `apply` not `exact`!</span>\n</code></pre></div>",
        "id": 282411326,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652623992
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">s.sum</span> <span class=\"n\">_</span><span class=\"o\">),</span>  <span class=\"c1\">-- don't know how to get rid of the type annotation  `s : finset ℕ`</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">2 goals</span>\n<span class=\"cm\">α: Type ?</span>\n<span class=\"cm\">s: finset ℕ</span>\n<span class=\"cm\">⊢ add_comm_monoid α</span>\n\n<span class=\"cm\">α: Type ?</span>\n<span class=\"cm\">s: finset ℕ</span>\n<span class=\"cm\">⊢ ℕ → α</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 282411384,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652624076
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>, where do I get this <code>equate_with_pattern</code> from?</p>",
        "id": 282483924,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652701972
    },
    {
        "content": "<p>Probably the one from <a href=\"https://github.com/leanprover-community/mathlib/pull/14153\">#14153</a></p>",
        "id": 282483984,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1652702014
    },
    {
        "content": "<p>Indeed, it is that one.  Although, I could not get it to work with your example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s.sum</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"k\">show</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 282484965,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652702621
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>, I'm not certain what you're suggesting, but this is my attempt to reconstruct it. Could you confirm this is what you intended?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n\n<span class=\"n\">setup_tactic_parser</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">equate_with_pattern</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr.app</span> <span class=\"n\">f</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">expr.app</span> <span class=\"n\">f0</span> <span class=\"n\">e0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">expr.app</span> <span class=\"n\">f1</span> <span class=\"n\">e1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr.mvar</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">el</span> <span class=\"bp\">←</span> <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">eq</span> <span class=\"o\">[</span><span class=\"n\">e0</span><span class=\"o\">,</span> <span class=\"n\">e1</span><span class=\"o\">],</span>\n    <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">get_unused_name</span> <span class=\"s2\">\"h\"</span><span class=\"o\">,</span>\n    <span class=\"n\">assert</span> <span class=\"n\">n</span> <span class=\"n\">el</span><span class=\"o\">,</span>\n    <span class=\"n\">interactive.rotate</span><span class=\"o\">,</span>\n    <span class=\"n\">get_local</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">rewrite_target</span><span class=\"o\">,</span>\n    <span class=\"n\">equate_with_pattern</span> <span class=\"n\">f</span> <span class=\"n\">f0</span> <span class=\"n\">f1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">equate_with_pattern</span> <span class=\"n\">e</span> <span class=\"n\">e0</span> <span class=\"n\">e1</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">equate_with_pattern</span> <span class=\"n\">f</span> <span class=\"n\">f0</span> <span class=\"n\">f1</span>\n  <span class=\"kd\">end</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">skip</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">refine'</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">pexpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">tgt</span> <span class=\"bp\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n  <span class=\"n\">e'</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"n\">e</span> <span class=\"n\">tt</span> <span class=\"n\">ff</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">infer_type</span><span class=\"o\">,</span>   <span class=\"c1\">--    &lt;---  added the ascription `tt ff` to `to_expr`</span>\n  <span class=\"n\">equate_with_pattern</span> <span class=\"n\">e'</span> <span class=\"n\">tgt</span> <span class=\"n\">e'</span><span class=\"o\">,</span>\n  <span class=\"n\">unify</span> <span class=\"n\">e'</span> <span class=\"n\">tgt</span><span class=\"o\">,</span>  <span class=\"c1\">--  added unification, since I mistakenly removed it from the copied code</span>\n  <span class=\"n\">apply</span> <span class=\"n\">e'</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">skip</span> <span class=\"c1\">--  `apply` not `exact`!</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">refine'</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">tactic.refine'</span> <span class=\"n\">q</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">interactive</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">refine'</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">s.sum</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"c1\">-- invalid apply tactic, failed to unify `finset ℕ → α` with  `Type`</span>\n  <span class=\"k\">show</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 282485384,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652702873
    },
    {
        "content": "<p>(Note in the line <code>apply e</code> in your version, I had to change this to <code>apply e' &gt;&gt; skip</code>. Hopefully that is correct?</p>",
        "id": 282485465,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652702901
    },
    {
        "content": "<p>This doesn't work for me, still. I've noted the error above <code>`-- invalid apply tactic, failed to unify </code>finset ℕ → α<code> with  </code>Type```.</p>",
        "id": 282485469,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652702906
    },
    {
        "content": "<p>Scott, this is indeed what I had.  It does <em>not</em> work for me either, but worked on the simpler examples that started the chat:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">s.sum</span> <span class=\"n\">_</span><span class=\"o\">),</span>  <span class=\"c1\">-- don't know how to get rid of the type annotation  `s : finset ℕ`</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">2 goals</span>\n<span class=\"cm\">α: Type ?</span>\n<span class=\"cm\">s: finset ℕ</span>\n<span class=\"cm\">⊢ add_comm_monoid α</span>\n\n<span class=\"cm\">α: Type ?</span>\n<span class=\"cm\">s: finset ℕ</span>\n<span class=\"cm\">⊢ ℕ → α</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 282485550,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652702963
    },
    {
        "content": "<p>No, that doesn't work for me.</p>",
        "id": 282485654,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652703013
    },
    {
        "content": "<p>My <code>refine'</code> must still not be your <code>refine'</code>.</p>",
        "id": 282485665,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652703022
    },
    {
        "content": "<p>Ok, let me dig it up!</p>",
        "id": 282485703,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652703043
    },
    {
        "content": "<p>Could you post a self-contained code block that contains the last example you posted?</p>",
        "id": 282485707,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652703047
    },
    {
        "content": "<p>I'm failing to reproduce: I must have changed something else.  I have a meeting now, but will get back to you as soon as I am done!</p>",
        "id": 282486073,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652703286
    },
    {
        "content": "<p>Ok, I do not know whether this is useful, but I think that this is what I had:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.interactive</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.gcd_monoid.finset</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic.interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">interactive</span>\n<span class=\"n\">setup_tactic_parser</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">decomp</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr.app</span> <span class=\"n\">f</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">expr.app</span> <span class=\"n\">f0</span> <span class=\"n\">e0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">expr.app</span> <span class=\"n\">f1</span> <span class=\"n\">e1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr.mvar</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">el</span> <span class=\"bp\">←</span> <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">eq</span> <span class=\"o\">[</span><span class=\"n\">e0</span><span class=\"o\">,</span> <span class=\"n\">e1</span><span class=\"o\">],</span>\n    <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">get_unused_name</span> <span class=\"s2\">\"h\"</span><span class=\"o\">,</span>\n    <span class=\"n\">assert</span> <span class=\"n\">n</span> <span class=\"n\">el</span><span class=\"o\">,</span>\n    <span class=\"n\">swap</span><span class=\"o\">,</span>\n    <span class=\"n\">decomp</span> <span class=\"n\">f</span> <span class=\"n\">f0</span> <span class=\"n\">f1</span><span class=\"o\">,</span>\n    <span class=\"n\">rotate_right</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">decomp</span> <span class=\"n\">f</span> <span class=\"n\">f0</span> <span class=\"n\">f1</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">decomp</span> <span class=\"n\">e</span> <span class=\"n\">e0</span> <span class=\"n\">e1</span>\n  <span class=\"kd\">end</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">skip</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">refine'</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">tgt</span> <span class=\"bp\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n  <span class=\"n\">e'</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"n\">e</span> <span class=\"n\">tt</span> <span class=\"n\">ff</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">infer_type</span><span class=\"o\">,</span>\n  <span class=\"n\">decomp</span> <span class=\"n\">e'</span> <span class=\"n\">tgt</span> <span class=\"n\">e'</span><span class=\"o\">,</span>\n  <span class=\"n\">unify</span> <span class=\"n\">e'</span> <span class=\"n\">tgt</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">tactic.interactive</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">s.sum</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n<span class=\"c\">/-</span><span class=\"cm\">2 goals</span>\n<span class=\"cm\">α: Type ?</span>\n<span class=\"cm\">s: finset ℕ</span>\n<span class=\"cm\">⊢ add_comm_monoid α</span>\n<span class=\"cm\">α: Type ?</span>\n<span class=\"cm\">s: finset ℕ</span>\n<span class=\"cm\">⊢ ℕ → α</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 282494793,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652707796
    },
    {
        "content": "<p>I wonder whether I simply implemented an inefficient version of <code>apply</code>, though...</p>",
        "id": 282494874,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652707821
    },
    {
        "content": "<p>I am confused: this now seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">refine'</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">s.sum</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"c1\">-- invalid apply tactic, failed to unify `finset ℕ → α` with  `Type`</span>\n  <span class=\"k\">show</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 282495233,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652707986
    },
    {
        "content": "<p>Scott, if you can verify any of the above and let me know any discrepancies, I would be happy to debug!</p>",
        "id": 282495260,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652708007
    },
    {
        "content": "<p>Scott, looking at the last quoted example, I learned that <code>show ...</code> does what I thought <code>any_goals { show ... }</code> did.  This tripped me up!</p>\n<p>I thought that <code>show</code> and <code>change</code> were synonyms.</p>",
        "id": 282496410,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652708529
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/to_expr.20behaves.20differently.20with.20an.20expected.20type/near/282394929\">said</a>:</p>\n<blockquote>\n<p>Hmm... okay. What I want is a variant of <code>refine</code> so the following works:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">s.sum</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"c1\">-- invalid apply tactic, failed to unify `finset ℕ → α` with  `Type`</span>\n  <span class=\"k\">show</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> , I think that all that what all my playing around reduces to is that <code>apply</code> works here as <code>refine'</code>, but this is exactly where you started, so I have been walking around in circles:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">apply</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">s.sum</span> <span class=\"n\">_</span><span class=\"o\">,</span>  <span class=\"c1\">-- three goals: `add_comm_monoid α`, `ℕ → α`, `Type`</span>\n  <span class=\"k\">show</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Sorry about the noise. <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 282513763,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652715646
    },
    {
        "content": "<p>It's okay. :-) Thanks for taking a look at it.</p>",
        "id": 282576357,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652745536
    }
]