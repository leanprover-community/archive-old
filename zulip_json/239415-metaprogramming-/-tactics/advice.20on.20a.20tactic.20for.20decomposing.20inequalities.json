[
    {
        "content": "<p>For help in teaching proof by induction on natural numbers with a different base case, I've written a tactic (indeed, my first tactic) for decomposing an inequality <code>n ≤ m</code> for natural numbers <code>n</code> and <code>m</code> into <code>m + 1</code> cases (these being <code>n = 0</code>, <code>n = 0.succ</code>, <code>n=1.succ</code>, ...). It works but the cases look a bit messy, with hypotheses of the form <code>n = k.succ</code>.</p>\n<p>I'd be grateful if someone more experienced could look at my code an indicate if there's a better way to write it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">foo_aux</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"k\">do</span>\n    <span class=\"n\">try_le_zero</span> <span class=\"bp\">←</span> <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">nat.eq_zero_of_le_zero</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n    <span class=\"n\">note</span> <span class=\"n\">h.local_pp_name</span> <span class=\"n\">none</span> <span class=\"n\">try_le_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">clear</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">skip</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n    <span class=\"k\">do</span>\n      <span class=\"n\">pf</span> <span class=\"bp\">←</span> <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">nat.of_le_succ</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n      <span class=\"n\">clear</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"o\">[(</span><span class=\"n\">_</span><span class=\"o\">,[</span><span class=\"n\">y</span><span class=\"o\">]),</span> <span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"bp\">←</span> <span class=\"n\">cases</span> <span class=\"n\">pf</span> <span class=\"o\">[</span><span class=\"n\">h.local_pp_name</span><span class=\"o\">,</span> <span class=\"n\">h.local_pp_name</span><span class=\"o\">],</span>\n      <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">foo_aux</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic.interactive</span>\n\n<span class=\"n\">setup_tactic_parser</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">parser.pexpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>  <span class=\"n\">h</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">foo_aux</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">tactic.interactive</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">foo</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">trivial</span><span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 299443850,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1663513013
    },
    {
        "content": "<p>Do you know about <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#interval_cases\">tactic#interval_cases</a>? That should be good inspiration.</p>",
        "id": 299444819,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663513579
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 299451107,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1663517366
    }
]