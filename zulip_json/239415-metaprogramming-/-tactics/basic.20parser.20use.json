[
    {
        "content": "<p>as an exercise, I want to write the tactic that makes this proof work</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">trichotomy</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">contradiction</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I'm pretty sure the answer is to write something like the following, and then to write an interactive wrapper around it</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trichotomy</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">rcases</span> <span class=\"n\">lt_trichotomy</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 205936899,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596563001
    },
    {
        "content": "<p>the <code>tactic.trichotomy</code> above should be using some kind of anti-quoting for the <code>a</code> and <code>b</code>, e.g. the following introduces hypotheses about <code>a</code> and <code>b</code> instead of <code>0</code> and <code>1</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trichotomy</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>If i change <code>a</code> to <code>%%a</code> in the definition of <code>trichotomy</code> then I get a \"kernel failed to type check declaration \" error</p>",
        "id": 205936949,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596563041
    },
    {
        "content": "<p>maybe i should focus on the easier task of adding <code>lt_trichotomy a b</code> to the local context</p>",
        "id": 205939754,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596564444
    },
    {
        "content": "<p>You could construct the input to the interactive rcases tactic without using <code>`[...]</code></p>",
        "id": 205944300,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596566585
    },
    {
        "content": "<p>Something vaguely like this?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trichotomy</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">v</span> <span class=\"err\">←</span> <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">h</span> <span class=\"o\">[</span><span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">lt_trichotomy</span><span class=\"o\">),</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">],</span>\n</code></pre></div>",
        "id": 205944389,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596566637
    },
    {
        "content": "<p>The thing I wrote above has lots of problems, but the one I'm most confused about is that<br>\n<code>``(lt_trichotomy)</code> has type <code>expr ff</code> instead of type <code>expr</code>, which I think means it's not elaborated</p>",
        "id": 205944628,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596566731
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trichotomy</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">rcases</span> <span class=\"n\">none</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">lt_trichotomy</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">[[</span><span class=\"n\">rcases_patt</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"bp\">`</span><span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"o\">[</span><span class=\"n\">rcases_patt</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"bp\">`</span><span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"o\">[</span><span class=\"n\">rcases_patt</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"bp\">`</span><span class=\"n\">h</span><span class=\"o\">]]</span>\n</code></pre></div>",
        "id": 205944766,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596566771
    },
    {
        "content": "<p>That doesn't actually use the parameters, it is equivalent to <code>`[rcases lt_trichotomy a b with h|h|h]</code></p>",
        "id": 205944964,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596566860
    },
    {
        "content": "<p>but it should be more obvious how to insert the parameters now</p>",
        "id": 205944998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596566875
    },
    {
        "content": "<p>it's not transparent to me after poking at it for a couple of minutes, but I feel like I'm close to having a precise question</p>",
        "id": 205945728,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596567180
    },
    {
        "content": "<p>To do the mk_app, you should do <code>mk_app ``lt_trichotomy [a, b]</code></p>",
        "id": 205945782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596567216
    },
    {
        "content": "<p>so this might be correct?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trichotomy</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">v</span> <span class=\"err\">←</span> <span class=\"n\">mk_app</span> <span class=\"bp\">``</span><span class=\"n\">lt_trichotomy</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">],</span>\n<span class=\"n\">rcases</span> <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"n\">pexpr</span><span class=\"bp\">.</span><span class=\"n\">of_expr</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"o\">[[</span><span class=\"n\">rcases_patt</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"o\">[</span><span class=\"n\">rcases_patt</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"o\">[</span><span class=\"n\">rcases_patt</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"n\">h</span><span class=\"o\">]]</span>\n</code></pre></div>",
        "id": 205945956,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596567303
    },
    {
        "content": "<p>looks good</p>",
        "id": 205946003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596567329
    },
    {
        "content": "<p>then i should be able to write something like this</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trichotomy</span> <span class=\"err\">%%</span><span class=\"o\">(</span><span class=\"n\">reflect</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"err\">%%</span><span class=\"o\">(</span><span class=\"n\">reflect</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205946030,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596567347
    },
    {
        "content": "<p>the interactive tactic should take <code>pexpr</code>s for <code>a</code> and <code>b</code> though</p>",
        "id": 205946044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596567354
    },
    {
        "content": "<p>ooh, it works now</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trichotomy</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">v</span> <span class=\"err\">←</span> <span class=\"n\">mk_app</span> <span class=\"bp\">``</span><span class=\"n\">lt_trichotomy</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">],</span>\n<span class=\"n\">rcases</span> <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"n\">pexpr</span><span class=\"bp\">.</span><span class=\"n\">of_expr</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"o\">[[</span><span class=\"n\">rcases_patt</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"o\">[</span><span class=\"n\">rcases_patt</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"o\">[</span><span class=\"n\">rcases_patt</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"n\">h</span><span class=\"o\">]]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n<span class=\"n\">setup_tactic_parser</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">interactive</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span> <span class=\"n\">expr</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">trichotomy</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">parser</span><span class=\"bp\">.</span><span class=\"n\">pexpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">a</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trichotomy</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">`</span><span class=\"n\">h</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">trichotomy</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205946273,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596567467
    },
    {
        "content": "<p>Nice!</p>",
        "id": 205955160,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596572293
    },
    {
        "content": "<p>I want to do a similar thing, but essentially I'd like to abbreviate <code>apply foo a b</code> to <code>Foo a b</code>, but I'm not sure how to work with a <code>texpr</code>. The only thing that doesn't work for me below is <code>apply h</code>, since <code>h</code> is an <code>expr</code>, not a <code>parse texpr</code> (I don't understand what a <code>texpr</code> is).</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n\n<span class=\"n\">setup_tactic_parser</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">AndLeft_aux</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">do</span> <span class=\"n\">h</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">and_left</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">],</span> <span class=\"n\">apply</span> <span class=\"n\">h</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">AndLeft</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">parser</span><span class=\"bp\">.</span><span class=\"n\">pexpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">do</span> <span class=\"n\">a</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">AndLeft_aux</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span>\n</code></pre></div>",
        "id": 206220556,
        "sender_full_name": "Billy Price",
        "timestamp": 1596770210
    },
    {
        "content": "<p>So I realised there is <code>tactic.apply</code>, and I have a compiling definition now, but it doesn't quite work, because it can't infer one of the arguments, Is this because <code>tactic.apply</code> doesn't see the target or something?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">AndLeft</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">parser</span><span class=\"bp\">.</span><span class=\"n\">pexpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">do</span> <span class=\"n\">A</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">nat_deduction</span><span class=\"bp\">.</span><span class=\"n\">deduction</span><span class=\"bp\">.</span><span class=\"n\">and_left</span> <span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">apply</span><span class=\"o\">,</span> <span class=\"n\">skip</span>\n</code></pre></div>",
        "id": 206228972,
        "sender_full_name": "Billy Price",
        "timestamp": 1596783544
    },
    {
        "content": "<p><code>tactic.apply</code> does see the target. But <code>mk_app</code> is expecting to create a fully elaborated expr. So if you're not giving that enough info it could  fail to infer an argument.</p>",
        "id": 206229550,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1596784266
    },
    {
        "content": "<p>(Oops, mwe is above, sorry. I only saw the last post.) Well, kind of, I still can't test it and see the error.</p>",
        "id": 206229568,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1596784313
    },
    {
        "content": "<p>That's not a mwe gimme a sec</p>",
        "id": 206229638,
        "sender_full_name": "Billy Price",
        "timestamp": 1596784392
    },
    {
        "content": "<p>I'd like to replace <code>apply deduction.and_left p q</code> in the first line of the example proof with <code>⋀E₁ p q</code>, (but intermediately I need <code>AndLeft p q</code> to work)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">decidable_eq</span><span class=\"o\">]</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">Form</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">bot</span> <span class=\"o\">:</span> <span class=\"n\">Form</span>\n<span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span>\n<span class=\"bp\">|</span> <span class=\"n\">and</span> <span class=\"o\">:</span> <span class=\"n\">Form</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span>  <span class=\"o\">:</span> <span class=\"n\">Form</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span>\n<span class=\"bp\">|</span> <span class=\"n\">imp</span> <span class=\"o\">:</span> <span class=\"n\">Form</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span>\n\n<span class=\"n\">def</span> <span class=\"n\">Form</span><span class=\"bp\">.</span><span class=\"n\">neg</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Form</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Form</span> <span class=\"o\">:=</span> <span class=\"n\">Form</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"n\">A</span> <span class=\"n\">Form</span><span class=\"bp\">.</span><span class=\"n\">bot</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">nat_coe_Form</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"bp\">ℕ</span> <span class=\"n\">Form</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">Form</span><span class=\"bp\">.</span><span class=\"n\">atom</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">⋀</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">75</span> <span class=\"o\">:=</span> <span class=\"n\">Form</span><span class=\"bp\">.</span><span class=\"n\">and</span>\n<span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">⋁</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">74</span> <span class=\"o\">:=</span> <span class=\"n\">Form</span><span class=\"bp\">.</span><span class=\"n\">or</span>\n<span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">⟹</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">75</span> <span class=\"o\">:=</span> <span class=\"n\">Form</span><span class=\"bp\">.</span><span class=\"n\">imp</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">⊥</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">Form</span><span class=\"bp\">.</span><span class=\"n\">bot</span>\n<span class=\"kn\">prefix</span> <span class=\"bp\">`¬`</span> <span class=\"o\">:=</span> <span class=\"n\">Form</span><span class=\"bp\">.</span><span class=\"n\">neg</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">⊤</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"bp\">¬</span><span class=\"err\">⊥</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">deduction</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Form</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">weakening</span>  <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">Y</span><span class=\"o\">}</span>     <span class=\"o\">:</span> <span class=\"n\">deduction</span> <span class=\"n\">X</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">deduction</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"err\">∪</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">assumption</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span>       <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">deduction</span> <span class=\"n\">X</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">and_intro</span>  <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">}</span>     <span class=\"o\">:</span> <span class=\"n\">deduction</span> <span class=\"n\">X</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">deduction</span> <span class=\"n\">X</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">deduction</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">⋀</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">and_left</span>   <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span>     <span class=\"o\">:</span> <span class=\"n\">deduction</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">⋀</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">deduction</span> <span class=\"n\">X</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">and_right</span>  <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span>     <span class=\"o\">:</span> <span class=\"n\">deduction</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">⋀</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">deduction</span> <span class=\"n\">X</span> <span class=\"n\">B</span>\n<span class=\"bp\">|</span> <span class=\"n\">imp_intro</span>  <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">}</span>     <span class=\"o\">:</span> <span class=\"n\">deduction</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"err\">∪</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">})</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">deduction</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">⟹</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">imp_elim</span>   <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">B</span><span class=\"o\">}</span>   <span class=\"o\">:</span> <span class=\"n\">deduction</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">⟹</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">deduction</span> <span class=\"n\">X</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">deduction</span> <span class=\"n\">X</span> <span class=\"n\">B</span>\n<span class=\"bp\">|</span> <span class=\"n\">or_left</span>    <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">}</span>     <span class=\"o\">:</span> <span class=\"n\">deduction</span> <span class=\"n\">X</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">deduction</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">⋁</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">or_right</span>   <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">}</span>     <span class=\"o\">:</span> <span class=\"n\">deduction</span> <span class=\"n\">X</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">deduction</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">⋁</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">or_elim</span>    <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">deduction</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">⋁</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">deduction</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"err\">∪</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">})</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">deduction</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"err\">∪</span> <span class=\"o\">{</span><span class=\"n\">B</span><span class=\"o\">})</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">deduction</span> <span class=\"n\">X</span> <span class=\"n\">C</span>\n<span class=\"bp\">|</span> <span class=\"n\">falsum</span>     <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span>       <span class=\"o\">:</span> <span class=\"n\">deduction</span> <span class=\"n\">X</span> <span class=\"err\">⊥</span> <span class=\"bp\">→</span> <span class=\"n\">deduction</span> <span class=\"n\">X</span> <span class=\"n\">A</span>\n\n<span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">≻</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">60</span> <span class=\"o\">:=</span> <span class=\"n\">deduction</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n\n<span class=\"n\">setup_tactic_parser</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">AndLeft</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">parser</span><span class=\"bp\">.</span><span class=\"n\">pexpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">do</span> <span class=\"n\">A</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">nat_deduction</span><span class=\"bp\">.</span><span class=\"n\">deduction</span><span class=\"bp\">.</span><span class=\"n\">and_left</span> <span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">apply</span><span class=\"o\">,</span> <span class=\"n\">skip</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">deduction</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"err\">⋀</span> <span class=\"n\">q</span><span class=\"o\">}</span> <span class=\"err\">≻</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">deduction</span><span class=\"bp\">.</span><span class=\"n\">and_left</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">deduction</span><span class=\"bp\">.</span><span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_singleton</span> <span class=\"bp\">_</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206230701,
        "sender_full_name": "Billy Price",
        "timestamp": 1596785574
    },
    {
        "content": "<p>I get an error when I try to apply <code>AndLeft p q</code> because the example doesn't contain <code>nat_deduction.deduction.and_left</code>.</p>",
        "id": 206236772,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1596791110
    },
    {
        "content": "<p>Ah yeah that was a translation to mwe error, removing the prefix <code>nat_deduction.</code> fixes it, and introduces the original problem <code>[app_builder] failed to create an 'deduction.and_left'-application, failed to solve unification constraint for #2 argument (?x_0 ≻ ?x_1 ⋀ ?x_2 =?= ℕ)</code></p>",
        "id": 206237003,
        "sender_full_name": "Billy Price",
        "timestamp": 1596791351
    },
    {
        "content": "<p>So clearly <code>tactic.mk_app</code> is trying to unify the metavariables - but can't <code>expr</code>'s have meta variables in them? Why is it trying to figure them out?</p>",
        "id": 206237187,
        "sender_full_name": "Billy Price",
        "timestamp": 1596791495
    },
    {
        "content": "<p>Ah. Yes, as I assumed the problem is with the <code>mk_app</code>. <code>deduction.and_left</code> takes an implicit <code>X</code> and explicit <code>A, B</code>. You give it the later arguments but not enough info to infer the former.</p>",
        "id": 206237247,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1596791523
    },
    {
        "content": "<p>Do I need to do it all within <code>apply</code> directly somehow? I failed to get that to compile earlier.</p>",
        "id": 206237280,
        "sender_full_name": "Billy Price",
        "timestamp": 1596791570
    },
    {
        "content": "<p>And why can't mk_app just leave the metavariables in place?</p>",
        "id": 206237405,
        "sender_full_name": "Billy Price",
        "timestamp": 1596791677
    },
    {
        "content": "<p>You can do </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">AndLeft</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">parser</span><span class=\"bp\">.</span><span class=\"n\">pexpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">do</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">deduction</span><span class=\"bp\">.</span><span class=\"n\">and_left</span> <span class=\"err\">%%</span><span class=\"n\">A</span> <span class=\"err\">%%</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">apply</span><span class=\"o\">,</span> <span class=\"n\">skip</span>\n</code></pre></div>\n\n\n<p>which will leave the uninstantiated mvars as new goals.</p>",
        "id": 206237664,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1596791901
    },
    {
        "content": "<p>Awesome! Why does that work and the mk_app version doesn't?</p>",
        "id": 206238023,
        "sender_full_name": "Billy Price",
        "timestamp": 1596792234
    },
    {
        "content": "<p><code>mk_app</code> won't create new goals when you don't provide it enough information to fill in the implicit arguments. It also won't insert coercions like you're doing here.</p>",
        "id": 206238255,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1596792459
    },
    {
        "content": "<p>Gotcha. What about <code>concat_tags</code>? What does that do? I saw it in the definition of <code>apply</code>.</p>",
        "id": 206239074,
        "sender_full_name": "Billy Price",
        "timestamp": 1596793090
    },
    {
        "content": "<p><code>concat_tags</code> and <code>propagate_tags</code> create goal tags for the new goals produced by <code>apply</code>. A goal tag is the annotation that tells you which case of an <code>induction</code> or <code>cases</code> you're in, e.g. <code>nat.succ, list.nil</code>. New goals don't have any tag associated with them by default, so <code>concat_tags</code>/<code>propagate_tags</code> take the tags from the original goal and munge them appropriately. If you're writing tactics for your own specialised use, you don't need to worry about this. Otherwise just copy whatever <code>apply</code> uses.</p>",
        "id": 206246527,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1596799809
    }
]