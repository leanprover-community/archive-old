[
    {
        "content": "<p>This is a continuation of understanding how to make the parser do what I want.  The context is still <code>sort_summands</code> in <a href=\"https://github.com/leanprover-community/mathlib/pull/13483\">#13483</a>.</p>\n<p>Right now, writing <code>sort_summands [f, g]</code> finds <code>f, g</code> in the goal and does something with them.  For instance</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">sort_summands</span> <span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">]</span>  <span class=\"c1\">--works</span>\n</code></pre></div>\n<p>works, if the goal is <code>g + x * y</code>.</p>\n<p>I would like to be able to pattern-match on the arguments that are passed to <code>sort_summands</code>.  For instance, in the case above, I would like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">sort_summands</span> <span class=\"o\">[</span><span class=\"n\">_</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"c1\">-- currently does not work</span>\n</code></pre></div>\n<p>to have the same effect (assuming, of course, that the pattern does not also match for <code>g</code>).</p>\n<p>Is it possible to achieve this?</p>",
        "id": 279516529,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650445650
    },
    {
        "content": "<p>If I understand the expressions correctly, I would like to find the first time that the given pattern unifies with the type of something in the goal and, if it finds a match, I would like to bind the incomplete pattern with the resulting term and use that as an argument for <code>sort_summands</code>.</p>",
        "id": 279516950,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650445901
    },
    {
        "content": "<p>I know that you can do this in the situation below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">â„•</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"c1\">--  rwa add_comm _, -- uncommenting this does not prove the goal</span>\n<span class=\"c1\">--  rwa add_comm (_ * _),  -- uncommenting this does prove the goal</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279518428,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650446813
    },
    {
        "content": "<p>As an outcome of (this discussion)[https://leanprover.zulipchat.com/#narrow/stream/239415-metaprogramming-.2F-tactics], I now think that I have way of making Lean pattern-match on the input that the user provides.</p>",
        "id": 279809224,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650626146
    }
]