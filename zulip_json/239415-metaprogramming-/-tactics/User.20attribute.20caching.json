[
    {
        "content": "<p>I'm writing a tactic that'll make fairly heavy use of user attributes. As a result, I'm running into two limitations of the user attribute cache API (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/user_attribute_cache_cfg\">docs#user_attribute_cache_cfg</a>):</p>\n<p>1) The function that creates a cache receives the list of declarations to which the attribute was applied, but not the parameters gives to those attributes. So if you write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[attr 42]</span> <span class=\"kd\">def</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>you can cache the fact that <code>d</code> was tagged with <code>attr</code>, but not that it was tagged with 42. This is annoying for my use case because I rely a lot on attribute parameters, so a lot of work ends up uncached.</p>\n<p>2) As far as I can tell, cache construction is not incremental: the cache-constructing function is given a list of tagged declarations, but there is no way to add or remove declarations. I suspect this leads to a lot of duplicate work. In particular, I believe the construction of the simp set is a significant cost center, which is no surprise if it is reconstructed from scratch all the time.</p>\n<p>Any chance one of our resident C++ wizards would like to take a look at this?</p>",
        "id": 237841054,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1620401097
    },
    {
        "content": "<p>The main performance footgun is described here: <a href=\"https://leanprover-community.github.io/mathlib_docs/notes.html#user%20attribute%20parameters\">https://leanprover-community.github.io/mathlib_docs/notes.html#user%20attribute%20parameters</a></p>",
        "id": 237848112,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1620403675
    },
    {
        "content": "<p>That's a good note, thanks! So can I use <code>get_param_untyped</code> in the function that constructs the attribute cache, then parse that <code>expr</code> by hand? Can I assume that this <code>expr</code> is fully evaluated? That would solve problem 1.</p>",
        "id": 237850047,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1620404345
    },
    {
        "content": "<p>Yes you should parse it by hand.  It is fully elaborated.</p>",
        "id": 237850505,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1620404520
    },
    {
        "content": "<p>(By providing a custom reflected instance, you can also store the data as an ill-typed expression.)</p>",
        "id": 237850629,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1620404555
    },
    {
        "content": "<p>Okay, very nice. That'll be a bunch of work, but not too bad. Any comments on the non-incrementality issue?</p>",
        "id": 237851012,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1620404720
    },
    {
        "content": "<p>Worry about it later?</p>",
        "id": 237852285,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1620405255
    },
    {
        "content": "<p>Fair enough. At the current rate, the tactic won't be done until we're all on Lean 4 anyway. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 237859606,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1620408101
    }
]