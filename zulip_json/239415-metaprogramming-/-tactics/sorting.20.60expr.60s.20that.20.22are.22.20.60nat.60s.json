[
    {
        "content": "<p>Dear All,</p>\n<p>I am struggling again with meta-programming.  My goal is to find the term of maximum degree in a term of a polynomial ring.  For simplicity, the code below is adapted to the situation where the input is an expression of the form <code>X ^ a + X ^ b + ... + X ^z</code>.</p>\n<p>I can get Lean to extract the list of exponents <code>[a, b,..., z]</code> (see <code>list_exponents</code> below).</p>\n<p>My issue is that the extracted list is a list of <code>expr</code>s and I do not know if there is a way to compare them <em>knowing that they really are terms of type <code>nat</code></em>.  I am happy to get trash values for <code>expr</code>s that are not <code>nat</code>s or involve variables.  I tried <code>to_nat</code>, but it gives <code>none</code> if the expression is <code>0 + 0</code>, whereas I would like it to be interpreted as <code>some 0</code> (or <code>some (0 + 0)</code>).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.degree.lemmas</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">interactive</span> <span class=\"n\">expr</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic.interactive</span>\n<span class=\"n\">setup_tactic_parser</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">get_summands</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">get_summands</span> <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"n\">get_summands</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span>            <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/--  Given an expression `e`, assuming it is a polyomial, `guess_deg e` tries to guess the</span>\n<span class=\"sd\">`nat_degree` of `e`. -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">guess_deg</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">n0</span> <span class=\"o\">:=</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">nat.zero</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">n1</span> <span class=\"o\">:=</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">nat.zero.succ</span><span class=\"o\">),</span>\n  <span class=\"n\">pX</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">polynomial.X</span><span class=\"o\">),</span>\n  <span class=\"k\">match</span> <span class=\"n\">e.app_fn</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">coe_fn</span> <span class=\"bp\">$</span> <span class=\"n\">polynomial.C</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n          <span class=\"n\">bo</span> <span class=\"bp\">←</span> <span class=\"n\">succeeds</span> <span class=\"bp\">$</span> <span class=\"n\">unify</span> <span class=\"n\">e</span> <span class=\"n\">pX</span><span class=\"o\">,</span>\n          <span class=\"k\">if</span> <span class=\"n\">bo</span> <span class=\"k\">then</span> <span class=\"n\">n1</span> <span class=\"k\">else</span>\n            <span class=\"o\">(</span> <span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"n\">margs</span> <span class=\"o\">:=</span> <span class=\"n\">e.get_app_args</span><span class=\"o\">,</span>\n              <span class=\"n\">margs.nth</span> <span class=\"mi\">4</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">return</span> <span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n            <span class=\"o\">(</span> <span class=\"k\">do</span> <span class=\"n\">val</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">polynomial.nat_degree</span><span class=\"o\">),</span>\n              <span class=\"n\">return</span> <span class=\"bp\">$</span> <span class=\"n\">expr.mk_app</span> <span class=\"n\">val</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span> <span class=\"o\">)</span>\n          <span class=\"kd\">end</span>\n\n<span class=\"sd\">/--  My work-in-progress `tactic`.  Using `list_exponents` shows the effect of the tactic-so-far. -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">list_exponents</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">polynomial.nat_degree</span> <span class=\"bp\">%%</span><span class=\"n\">tl</span> <span class=\"bp\">=</span> <span class=\"bp\">%%</span><span class=\"n\">tr</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">summ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">get_summands</span> <span class=\"n\">tl</span><span class=\"o\">),</span>\n  <span class=\"n\">rere</span> <span class=\"bp\">←</span> <span class=\"n\">summ.mmap</span> <span class=\"n\">guess_deg</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"s2\">\"list of exponents\"</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">rere</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"s2\">\"list of to_nats\"</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"bp\">$</span> <span class=\"n\">rere.map</span> <span class=\"n\">expr.to_nat</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">tactic.interactive</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pro</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f10</span> <span class=\"o\">:</span> <span class=\"n\">f.nat_degree</span> <span class=\"bp\">≤</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">nat_degree</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">list_exponents</span><span class=\"o\">,</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  list of exponents</span>\n<span class=\"cm\">  [0 + 0, 1 * 1, 1, 5]</span>\n<span class=\"cm\">  list of to_nats</span>\n<span class=\"cm\">  [none, none, (some 1), (some 5)]</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is there a way to obtain that <code>5</code>  should be the highest value above?</p>",
        "id": 281393258,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651817021
    },
    {
        "content": "<p>I guess you would have to hit the expressions with <code>norm_num</code> first. Or something like that.</p>",
        "id": 281394622,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651817339
    },
    {
        "content": "<p>Can i use norm_num on exprs?</p>",
        "id": 281395091,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651817457
    },
    {
        "content": "<p>Or did you mean to convert it to \"tactic-mode\" and do the sorting there?</p>",
        "id": 281395259,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651817485
    },
    {
        "content": "<p><code>rere.mmap (λ e, do (e', _) ← norm_num.derive e &lt;|&gt; refl_conv e, e'.to_nat)</code></p>",
        "id": 281399529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651819193
    },
    {
        "content": "<p>Mario, thanks a lot!  This is awesome: I had no idea that <code>norm_num</code> could be used in this context!</p>",
        "id": 281400568,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651820179
    },
    {
        "content": "<p>There is another method that works if the expressions actually have type <code>nat</code> and not just some semiring type: <code>rere.mmap (eval_expr ℕ)</code></p>",
        "id": 281402036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651821302
    },
    {
        "content": "<p>this is basically just calling <code>#eval</code> on the expression, so it's probably preferable if applicable</p>",
        "id": 281402064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651821334
    },
    {
        "content": "<p>Ok, in my use case, I will have things that are really numbers, but I would also like to support the possibility of variables, as in <code>(n : nat), X ^ n</code>.  I may try to sort the two things in separate lists and see if I can get the <code>eval_expr</code> to work.</p>",
        "id": 281402905,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651821904
    },
    {
        "content": "<p>Of course, when there are variables, I will have to find a heuristic to decide whether <code>n</code> is bigger or not than <code>3</code>.</p>",
        "id": 281402950,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651821937
    },
    {
        "content": "<p>Anyway, right now I'm still taking apart your initial code to see how it works and how to adapt it.</p>",
        "id": 281403056,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651822010
    },
    {
        "content": "<p>Re-reading your comment, it seems that I <em>will</em> have <code>nat</code>s the whole time, even if I have variables.  The types should always be natural numbers, since otherwise they are not nat_degrees of polynomials!</p>",
        "id": 281403195,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651822102
    },
    {
        "content": "<p>So I think that <code>eval_expr ℕ</code> should work.  I'll keep on testing.</p>",
        "id": 281403231,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651822147
    },
    {
        "content": "<p>I really like that I'm using <code>#eval</code> \"inside\" a proof!</p>",
        "id": 281403287,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651822202
    },
    {
        "content": "<p>both methods will fail when you have variables, of course. You can wrap the expression in <code>try_core</code> to get a <code>none</code> if it's not a constant</p>",
        "id": 281403408,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651822292
    },
    {
        "content": "<p>Ok, thanks!  I was running into problems experimenting with these methods.</p>",
        "id": 281404395,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651823091
    },
    {
        "content": "<p>Damiano, since you seem interested in learning meta-programming, did you consider learn it in Lean 4 instead? We really really need more people porting tactics to Lean 4 instead of creating more Lean 3 tactics that need to be ported.</p>",
        "id": 281480888,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1651863704
    },
    {
        "content": "<p>Patrick, I am using this project as an excuse to learn some (meta)programming with a language that is more stable than Lean4.  I was planning to switch to Lean4, once I feel that I am able to produce my own code, rather than modifying pre-existing tactics.</p>\n<p>Also, I have Lean3 installed, but am a little intimidated by installing Lean4...</p>",
        "id": 281481695,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651864126
    },
    {
        "content": "<p>In my current experience, learning about metaprogramming in Lean 3 helped me to understand what metaprogramming is. But since the API is so drastically different and the overall monadic programming experience is much richer in Lean 4 if compared to Lean 3, it almost feels like I'm starting from scratch</p>",
        "id": 281483843,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651865437
    },
    {
        "content": "<p>Note: I don't mean to demotivate your learning, of course! Metaprogramming in Lean 3 is fun and I enjoy learning more about it to this day. I just wanted to question the idea of knowledge transfer from Lean 3 to Lean 4 regarding metaprogramming, which did not feel smooth for me</p>",
        "id": 281485496,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651866307
    },
    {
        "content": "<p>Ok, I'm going to produce quickly a working version of the <code>compute_degree</code> tactic in Lean3, and after that, I will port <code>move_add</code> to Lean4!</p>",
        "id": 281486836,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651867059
    },
    {
        "content": "<p>The core metaprogramming APIs are pretty stable in Lean 4 as well btw. I move a substantial project to the latest nightly every two weeks or so and most of the time this requires no or very few changes.</p>",
        "id": 281499360,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1651874758
    },
    {
        "content": "<p>Ok, thanks for the information and the encouragement!</p>",
        "id": 281516541,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651894808
    }
]