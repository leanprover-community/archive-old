[
    {
        "content": "<p>I'm very new to tactic programming. I want to apply induction, however, when I use <code>tactic.induction</code> inside my tactic, it loses the goal names:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Tree</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">leaf</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">Tree</span>\n<span class=\"bp\">|</span> <span class=\"n\">branch</span> <span class=\"o\">(</span><span class=\"n\">tr1</span> <span class=\"n\">tr2</span><span class=\"o\">:</span> <span class=\"n\">Tree</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span> <span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Tree.leaves_list</span><span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Tree.leaf</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Tree.branch</span> <span class=\"n\">tr1</span> <span class=\"n\">tr2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tr1.leaves_list</span> <span class=\"bp\">++</span> <span class=\"n\">tr2.leaves_list</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Tree.leaves</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">a.leaves_list.to_finset</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Tree.disjoint</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Tree.leaf</span> <span class=\"n\">leaf</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Tree.branch</span> <span class=\"n\">tr1</span> <span class=\"n\">tr2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tr1.disjoint</span> <span class=\"bp\">∧</span> <span class=\"n\">tr2.disjoint</span> <span class=\"bp\">∧</span> <span class=\"n\">disjoint</span> <span class=\"n\">tr1.leaves</span> <span class=\"n\">tr2.leaves</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n<span class=\"n\">setup_tactic_parser</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">disjoint_induction</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">parser.pexpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n    <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">tactic.induction</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">skip</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">interactive</span>\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Tree.leaves_list.nodup</span> <span class=\"o\">{</span> <span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">tree_disjoint</span><span class=\"o\">:</span> <span class=\"n\">t.disjoint</span><span class=\"o\">):</span>\n    <span class=\"n\">t.leaves_list.nodup</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">disjoint_induction</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This is the goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">tree_disjoint</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Tree.leaf</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">disjoint</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">Tree.leaf</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">leaves_list.nodup</span>\n\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">t_tr1</span> <span class=\"n\">t_tr2</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">t_ih_tr1</span> <span class=\"o\">:</span> <span class=\"n\">t_tr1.disjoint</span> <span class=\"bp\">→</span> <span class=\"n\">t_tr1.leaves_list.nodup</span><span class=\"o\">,</span>\n<span class=\"n\">t_ih_tr2</span> <span class=\"o\">:</span> <span class=\"n\">t_tr2.disjoint</span> <span class=\"bp\">→</span> <span class=\"n\">t_tr2.leaves_list.nodup</span><span class=\"o\">,</span>\n<span class=\"n\">tree_disjoint</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t_tr1.branch</span> <span class=\"n\">t_tr2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">disjoint</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">t_tr1.branch</span> <span class=\"n\">t_tr2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">leaves_list.nodup</span>\n</code></pre></div>\n<p>This is what I would like to get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">case</span> <span class=\"n\">Tree.leaf</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">tree_disjoint</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Tree.leaf</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">disjoint</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">Tree.leaf</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">leaves_list.nodup</span>\n\n<span class=\"n\">case</span> <span class=\"n\">Tree.branch</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">t_tr1</span> <span class=\"n\">t_tr2</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">t_ih_tr1</span> <span class=\"o\">:</span> <span class=\"n\">t_tr1.disjoint</span> <span class=\"bp\">→</span> <span class=\"n\">t_tr1.leaves_list.nodup</span><span class=\"o\">,</span>\n<span class=\"n\">t_ih_tr2</span> <span class=\"o\">:</span> <span class=\"n\">t_tr2.disjoint</span> <span class=\"bp\">→</span> <span class=\"n\">t_tr2.leaves_list.nodup</span><span class=\"o\">,</span>\n<span class=\"n\">tree_disjoint</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t_tr1.branch</span> <span class=\"n\">t_tr2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">disjoint</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">t_tr1.branch</span> <span class=\"n\">t_tr2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">leaves_list.nodup</span>\n</code></pre></div>\n<p>What do I do wrong?</p>",
        "id": 221662222,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1609861951
    },
    {
        "content": "<p>The goal names are called 'case tags' and they are set by <code>tactic.interactive.induction</code>, which wraps <code>tactic.induction</code>. Look at the private function <code>set_cases_tags</code> in <code>init/meta/tactic/interactive.lean</code> (above the definition of <code>tactic.interactive.induction</code>).</p>",
        "id": 221663143,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1609862359
    },
    {
        "content": "<p>Thanks, that hint helped me! I'm just calling <code>interactive.induction</code> now. Now I want to preprocess some cases. However, if I do this with <code>'[all_goals { ... }]</code> I lose all the tags again...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">ant_disjoint_induction</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">cases_arg_p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">\"have\"</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">ident</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">rec_name</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">using_ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ids</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">with_ident_list</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">revert</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">\"generalizing\"</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">ident</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n    <span class=\"n\">induction</span> <span class=\"n\">hp</span> <span class=\"n\">rec_name</span> <span class=\"n\">ids</span> <span class=\"n\">revert</span><span class=\"o\">,</span>\n    <span class=\"bp\">`</span><span class=\"o\">[</span>\n        <span class=\"n\">all_goals</span> <span class=\"o\">{</span>\n            <span class=\"n\">unfold</span> <span class=\"n\">Tree.disjoint</span> <span class=\"n\">at</span> <span class=\"n\">tree_disjoint</span><span class=\"o\">,</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">],</span>\n    <span class=\"n\">skip</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 221688767,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1609874108
    },
    {
        "content": "<p><code>all_goals</code> is not what is dismissing the tags, <code>unfold</code> is. You can wrap it in <code>propagate_tags</code></p>",
        "id": 221689493,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1609874478
    },
    {
        "content": "<p>~ohh awesome! But how can I wrap it within <code>'[ ... ]?</code>~<br>\nThis does it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">do</span>\n    <span class=\"n\">induction</span> <span class=\"n\">hp</span> <span class=\"n\">rec_name</span> <span class=\"n\">ids</span> <span class=\"n\">revert</span><span class=\"o\">,</span>\n    <span class=\"n\">propagate_tags</span> <span class=\"bp\">`</span><span class=\"o\">[</span>\n        <span class=\"n\">all_goals</span> <span class=\"o\">{</span>\n            <span class=\"n\">unfold</span> <span class=\"n\">Tree.disjoint</span> <span class=\"n\">at</span> <span class=\"n\">tree_disjoint</span><span class=\"o\">,</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">],</span>\n    <span class=\"n\">skip</span>\n</code></pre></div>\n<p>thank you!</p>",
        "id": 221689995,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1609874747
    },
    {
        "content": "<p>Why do you need  <code> `[ ... ]</code>?</p>",
        "id": 221690759,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1609875199
    },
    {
        "content": "<p>I don't know much about tactics programming yet. ` <code>[ ...]</code> seemed to be the easiest way to transform a repetitive pattern into a reusable tactic.</p>",
        "id": 221690961,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1609875305
    },
    {
        "content": "<p>But </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">all_goals</span> <span class=\"bp\">$</span> <span class=\"n\">propagate_tags</span> <span class=\"bp\">`</span><span class=\"o\">[</span>\n        <span class=\"n\">unfold</span> <span class=\"n\">Tree.disjoint</span> <span class=\"n\">at</span> <span class=\"n\">tree_disjoint</span>\n    <span class=\"o\">],</span>\n</code></pre></div>\n<p>finally does it.</p>",
        "id": 221691002,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1609875336
    }
]