[
    {
        "content": "<p>I am reviving <a href=\"https://github.com/leanprover-community/mathlib/pull/10645\">#10645</a> and this requires writing a tactic that solves goals of the form <code>roth_number_nat a = b</code>. The idea of the tactic is very simple: you have obligations of the form <code>roth_aux a m d l</code>, <code>roth_aux₁ a m d l</code>, <code>roth_aux₂ a m d l</code>, I have a few lemmas that turn (uniquely) one of those goals into a combination of others (and termination is guaranteed but of course I don't care here).</p>",
        "id": 300416270,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663954095
    },
    {
        "content": "<p>Now my naive idea was to make one tactic for each of <code>roth_aux</code>, <code>roth_aux₁</code>, <code>roth_aux₂</code> to apply those lemmas correctly (there are several lemmas for each, so the tactic isn't just applying one lemma), but of course I need to declare the tactics in some order in the file, and I can't refer to the last tactic from the first.</p>\n<p>Am I stuck?</p>",
        "id": 300416698,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663954223
    },
    {
        "content": "<p>Have you tried making your tactics <code>mutual</code>?</p>",
        "id": 300430252,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1663958715
    },
    {
        "content": "<p>RIght now I'm going with a single inductive tactic indexed by an inductive three elements type, which I guess is the same?</p>",
        "id": 300431962,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663959413
    },
    {
        "content": "<p>I am mostly wondering whether I missed an obvious solution.</p>",
        "id": 300432261,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663959522
    },
    {
        "content": "<p>Yeah, that's also fine. The <code>mutual</code> solution essentially compiles to what I imagine you're doing. <code>mutual</code> has no downsides when you're in <code>meta</code> land (in non-<code>meta</code> land, termination checking doesn't work), so it's perhaps more idiomatic in this case.</p>",
        "id": 300434385,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1663960225
    },
    {
        "content": "<p>Can you do <code>tactic × tactic × tactic</code>? Similar to how <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pgame.le_lf\">docs#pgame.le_lf</a> is done.</p>",
        "id": 300434403,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1663960236
    },
    {
        "content": "<p>Wouldn't that make two of the three tactics run unnecessarily every time?</p>",
        "id": 300435094,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663960477
    },
    {
        "content": "<p>Another strategy is to have some tactics that look at the goal, decide whether they apply, and perform a single step, then iteratively apply these tactics. It's a sort of recursive-to-iterative transformation, and it's somewhat similar to <code>norm_num</code> plugins.</p>",
        "id": 300435742,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663960716
    },
    {
        "content": "<p>Yes, that's how Bhavik started the implementation, but it feels a bit wasteful to call <code>tactic.target</code> several thousand times in the same proof.</p>",
        "id": 300435829,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663960766
    },
    {
        "content": "<p>If you care about that, you could give the target as an argument to these tactics and thread it through.</p>",
        "id": 300435946,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663960804
    },
    {
        "content": "<p>(I'm not sure if there's much of a performance penalty to <code>tactic.target</code>, but I've never measured it.)</p>",
        "id": 300436038,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663960833
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Recursing.20with.20several.20tactics/near/300416698\">said</a>:</p>\n<blockquote>\n<p>to apply those lemmas correctly (there are several lemmas for each, so the tactic isn't just applying one lemma)</p>\n</blockquote>\n<p>Is there a finite list of lemmas you could generate that you could use <code>apply_rules</code> with?</p>",
        "id": 300436167,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663960899
    },
    {
        "content": "<p>Yes, I am basically implementing a custom <code>apply_rules</code>.</p>",
        "id": 300436338,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663960966
    },
    {
        "content": "<p>... except that I will later add memoisation to the mix, and that requires special handling.</p>",
        "id": 300436769,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663961133
    }
]