[
    {
        "content": "<p>In the follow example <code>congr'</code> is very slow:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.outer_measure</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span> <span class=\"n\">measure_theory.outer_measure</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">outer_measure</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">Inf</span> <span class=\"n\">m</span> <span class=\"n\">t</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">⨅</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"bp\">∑'</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">⨅</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">outer_measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"bp\">∈</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Inf_eq_of_function_Inf_gen</span><span class=\"o\">,</span> <span class=\"n\">of_function_apply</span><span class=\"o\">],</span>\n  <span class=\"n\">congr'</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>Almost all of the time is spent in <code>relation_tactic</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elaboration</span><span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">execution</span> <span class=\"n\">took</span> <span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">51</span><span class=\"n\">s</span>\n <span class=\"mi\">7296</span><span class=\"n\">ms</span>    <span class=\"mi\">97</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">relation_tactic</span>\n</code></pre></div>\n\n<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> any ideas why this is so slow?</p>",
        "id": 213730675,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603062113
    },
    {
        "content": "<p>How does it compare to <code>congr</code>?</p>",
        "id": 213730828,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1603062361
    },
    {
        "content": "<p>Is <code>of_function_apply</code> a new function?</p>",
        "id": 213731262,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1603063185
    },
    {
        "content": "<p>Ah, <code>congr</code> is also slow.</p>",
        "id": 213731442,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603063524
    },
    {
        "content": "<p>Sorry for that. I updated the example to work in the current master.</p>",
        "id": 213731682,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603063995
    },
    {
        "content": "<p><code>congr</code> and <code>congr'</code> both spend ~7s in <code>relation_tactic</code>.</p>",
        "id": 213731688,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603064036
    },
    {
        "content": "<p>Sounds like it's happening in <code>refl</code></p>",
        "id": 213731913,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1603064417
    },
    {
        "content": "<p>I see, thanks for the investigation. I now see that adding</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">irreducible</span><span class=\"o\">]</span> <span class=\"n\">tsum</span>\n</code></pre></div>\n\n<p>makes this instantaneous.</p>",
        "id": 213731996,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603064637
    },
    {
        "content": "<p>Should we add it as a global attribute?</p>",
        "id": 213732057,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603064705
    },
    {
        "content": "<p>I think so. I'm not sure which of <code>tsum</code>, <code>summable</code> and <code>has_sum</code> should be made irreducible (any of them solves this issue).</p>",
        "id": 213732111,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603064768
    },
    {
        "content": "<p>I wonder if we should <em>also</em> add a <code>try_for</code> around the offending <code>refl</code> in <code>relation_tactic</code>.</p>",
        "id": 213732114,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603064786
    },
    {
        "content": "<p>In your case the proof will fail if you do that</p>",
        "id": 213732173,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1603064925
    },
    {
        "content": "<p>(btw, <code>refl</code> calls <code>relation_tactic</code>, not the other way around)</p>",
        "id": 213732178,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1603064942
    },
    {
        "content": "<p>You might want to make the <code>try_for</code> optional. Otherwise, you're going to get weird breaking points where <code>congr</code> will work in some cases and then you wrap your definition into one more definition and it stops working.</p>",
        "id": 213732236,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1603065024
    },
    {
        "content": "<p>Ah, I see.</p>",
        "id": 213732390,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603065332
    },
    {
        "content": "<p><code>congr</code> doesn't fail if the <code>refl</code> fails, that is just something tried to close the goal. I'm thinking something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.outer_measure</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span> <span class=\"n\">measure_theory.outer_measure</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.my_congr</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">focus1</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"n\">assumption</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">congr_core</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">all_goals'</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">try_for</span> <span class=\"mi\">1000</span> <span class=\"n\">reflexivity</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">try</span> <span class=\"n\">congr</span><span class=\"o\">))</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">outer_measure</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⨅</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">set.Union</span> <span class=\"n\">f</span><span class=\"o\">),</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">Inf_gen</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">⨅</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">set.Union</span> <span class=\"n\">f</span><span class=\"o\">),</span> <span class=\"bp\">∑'</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">⨅</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">outer_measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"bp\">∈</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">tactic.my_congr</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 213732442,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603065369
    },
    {
        "content": "<p>What's the error message you get?</p>",
        "id": 213732592,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1603065663
    },
    {
        "content": "<p>There is no error message, <code>tactic.my_congr</code> succeeds with exactly the same tactic state as <code>congr'</code>, but gets there quicker. It tried to solve the goal by <code>refl</code>, but gave up.</p>",
        "id": 213732649,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603065754
    },
    {
        "content": "<p>I see. It gives up quicker. You can give it a low default and we can override it with an optional argument</p>",
        "id": 213732733,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1603065884
    },
    {
        "content": "<p>That's what I did. I just opened <a href=\"https://github.com/leanprover-community/mathlib/issues/4678\">#4678</a> (no way to override the timeout interactively yet).</p>",
        "id": 213732805,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603065985
    },
    {
        "content": "<p>If you put it in a structure, you can call <code>congr'</code> as <code>congr' 3 { timeout := 500 }</code> or <code>congr' 3 { timeout := none }</code></p>",
        "id": 213733121,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1603066599
    },
    {
        "content": "<p>why would you ever want to set the timeout to something other than 0 or infinity? in a given application either <code>refl</code> is useful  or it isn't</p>",
        "id": 213742124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603081413
    },
    {
        "content": "<p>I think it would be better to just lower the transparency on that refl. It's only supposed to be cleaning up syntactic refl subgoals</p>",
        "id": 213742187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603081488
    },
    {
        "content": "<p>I don't like tactics which time out in real working code</p>",
        "id": 213742250,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603081599
    },
    {
        "content": "<p>I think the timeout is defensible. One extreme case would be to guard the use of <code>refl</code> with the condition that the lhs and rhs be alpha equivalent. That is very strict. I think we want to allow some unfolding. How much? One could say that we want as much as reducibility hints will allow but beyond a certain point, there's little hope that unfolding some more will yield any useful results.</p>",
        "id": 213744190,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1603084606
    },
    {
        "content": "<p>An alternative to putting this kind of safeguard in <code>congr'</code> or other tactics would be to have a linter tell us when a definition allows too much unfolding. I don't know how to judge that though</p>",
        "id": 213744275,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1603084691
    },
    {
        "content": "<p><code>congr</code> is not the place for heavy refls</p>",
        "id": 213744376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603084864
    },
    {
        "content": "<p>if you want a heavy refl, the only tactic that should do that is <code>refl</code></p>",
        "id": 213744387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603084877
    },
    {
        "content": "<p>I think it's fine to have the \"very strict\" alpha equality here, because you can easily clean up the non-alpha equivalent subterms with<code>refl</code></p>",
        "id": 213744447,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603084929
    },
    {
        "content": "<p>however if <code>congr_core</code> is already unfolding reducibles then there is no reason not to have the same level of unfolding in the refl before it</p>",
        "id": 213744467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603084964
    },
    {
        "content": "<p>I'm happy to replace the timeout by a \"refl, but only unfold reducibles\".</p>",
        "id": 213833292,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603135725
    },
    {
        "content": "<p>I do feel like that would be breaking much more things than the timeout in mathlib, though.</p>",
        "id": 213833354,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603135757
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>: I tried a couple of options in <a href=\"https://github.com/leanprover-community/mathlib/issues/4678\">#4678</a>:</p>\n<ul>\n<li><code>try_for 1000 reflexivity</code> passes on all of mathlib</li>\n<li><code>try_for 100 reflexivity</code> fails for the first time in <code>analysis/calculus/times_cont_diff</code></li>\n<li><code>reflexivity reducible</code> fails for the first time in <code>data/nat/basic</code></li>\n</ul>\n<p>I think we are relying a lot on <code>congr</code> solving goals by unfolding semireducible definitions, so I don't think that is a good change.<br>\nI think we should go for the second option: there might be a couple of places where <code>congr</code> will now create an extra subgoal.</p>\n<p>Should I also add an option to <code>congr'</code> that tells it to not use <code>reflexivity</code>?</p>",
        "id": 213839807,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603138844
    },
    {
        "content": "<p>If it's a big job we can put it off, but I do think we should change the default behavior to be less aggressive, and introduce <code>congr!</code> to unfold semireducibles</p>",
        "id": 213865816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603156028
    },
    {
        "content": "<p>this is the sort of thing that deserves a marker in the source</p>",
        "id": 213865882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603156094
    }
]