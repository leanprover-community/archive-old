[
    {
        "content": "<p>I have two expressions <code>l</code> and <code>r</code>, with which I built another expression <code>e</code> like this: <code>e ‚Üê mk_app </code>eq [l, r]`.</p>\n<p>So <code>e</code> is an equality. And I want to use <code>note</code> to add that equality to the context with some random name (say I use <code>get_unused_name</code>). The problem is that the proof term is rather ugly because <code>e</code> and <code>e'</code> can be long chains of sums.<br>\n(I'm helping out <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> on his tactic to order sums of monomials).</p>\n<p>So, the question is: how can I build such a proof term expression? The proof in tactic mode can be done with <code>simp only [add_comm, add_assoc, add_left_comm]</code></p>",
        "id": 279166957,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650113378
    },
    {
        "content": "<p>(for now we're planning to use <code>assert</code> and then prove it interactively)</p>",
        "id": 279167315,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650113954
    }
]