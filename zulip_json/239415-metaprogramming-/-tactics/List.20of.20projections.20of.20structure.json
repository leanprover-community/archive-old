[
    {
        "content": "<p>What's the easiest way to fill this sorry:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">get_projections</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>such that <code>get_projections `(prod X Y) = [`(@prod.fst X Y), `(@prod.snd X Y)]</code></p>",
        "id": 289049890,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657383321
    },
    {
        "content": "<p>You can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/environment.structure_fields\">docs#environment.structure_fields</a> to the (name of the) head of the expression, and then apply each of them to the same arguments as the original expression. You'd have to wrap it inside a tactic though.</p>",
        "id": 289092335,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1657445069
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.core</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">get_projections</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">str_nm</span> <span class=\"o\">:=</span> <span class=\"n\">t.get_app_fn.const_name</span><span class=\"o\">,</span>\n  <span class=\"n\">proj_nms</span> <span class=\"bp\">←</span> <span class=\"n\">env.structure_fields_full</span> <span class=\"n\">str_nm</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">univs</span> <span class=\"o\">:=</span> <span class=\"n\">t.get_app_fn.univ_levels</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"n\">t.get_app_args</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">projs</span> <span class=\"o\">:=</span> <span class=\"n\">proj_nms.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">proj_nm</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">expr.const</span> <span class=\"n\">proj_nm</span> <span class=\"n\">univs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mk_app</span> <span class=\"n\">args</span><span class=\"o\">),</span>\n  <span class=\"n\">return</span> <span class=\"n\">projs</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">get_projections</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">bool</span> <span class=\"bp\">×</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span> <span class=\"c1\">-- [prod.fst, prod.snd]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">get_projections</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">bool</span> <span class=\"bp\">×</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">trace</span> <span class=\"bp\">$</span> <span class=\"n\">x.map</span> <span class=\"n\">expr.to_raw_fmt</span><span class=\"o\">)</span>\n<span class=\"k\">#eval</span> <span class=\"n\">get_projections</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">bool</span> <span class=\"bp\">×</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x.mmap</span> <span class=\"n\">infer_type</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span><span class=\"o\">)</span> <span class=\"c1\">-- [bool × ℕ → bool, bool × ℕ → ℕ]</span>\n</code></pre></div>\n<p>(not extensively tested)<br>\nYou might want to apply <code>instantiate_mvars</code> and <code>whnf</code> to<code>t</code> first, in case <code>t</code> is not exactly in the right form.<br>\nEDIT: fixed bug</p>",
        "id": 289092596,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1657445467
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/pull/15207\">#15207</a> I ended up with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- ``(s_name, (c_name, c_fun), [(p_name, p_fun), ...]) ← get_constructor_and_projections `(struct n)``</span>\n<span class=\"sd\">gets the names and partial invocations of the constructor and projections of a structure -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">get_constructor_and_projections</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">)):=</span>\n<span class=\"k\">do</span>\n  <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">I</span> <span class=\"n\">ls</span><span class=\"o\">,</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">get_app_fn_args</span> <span class=\"n\">t</span><span class=\"o\">),</span>\n  <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n  <span class=\"o\">[</span><span class=\"n\">ctor</span><span class=\"o\">]</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">env.constructors_of</span> <span class=\"n\">I</span><span class=\"o\">),</span>\n  <span class=\"n\">ctor</span> <span class=\"bp\">←</span> <span class=\"k\">do</span>\n  <span class=\"o\">{</span> <span class=\"n\">d</span> <span class=\"bp\">←</span> <span class=\"n\">get_decl</span> <span class=\"n\">ctor</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">expr.const</span> <span class=\"n\">tt</span> <span class=\"n\">ctor</span> <span class=\"bp\">$</span> <span class=\"n\">d.univ_params.map</span> <span class=\"n\">level.param</span><span class=\"o\">,</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">ctor</span><span class=\"o\">,</span> <span class=\"n\">a.mk_app</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">ctor_type</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">ctor.2</span><span class=\"o\">,</span>\n  <span class=\"n\">tt</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"n\">ctor_type.is_pi</span> <span class=\"bp\">|</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">ctor</span><span class=\"o\">,</span> <span class=\"o\">[]),</span>\n  <span class=\"n\">some</span> <span class=\"n\">fields</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">env.structure_fields</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">fail</span><span class=\"bp\">!</span><span class=\"s2\">\"Not a structure\"</span><span class=\"o\">,</span>\n  <span class=\"n\">projs</span> <span class=\"bp\">←</span> <span class=\"n\">fields.mmap</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"k\">do</span>\n  <span class=\"o\">{</span> <span class=\"n\">d</span> <span class=\"bp\">←</span> <span class=\"n\">get_decl</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">++</span> <span class=\"n\">f</span><span class=\"o\">),</span>\n    <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">expr.const</span> <span class=\"n\">tt</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">++</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"n\">d.univ_params.map</span> <span class=\"n\">level.param</span><span class=\"o\">,</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">a.mk_app</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">ctor</span><span class=\"o\">,</span> <span class=\"n\">projs</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 289317927,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657630154
    },
    {
        "content": "<p>What do you want to get in case of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid\">docs#monoid</a>? Should it include <code>to_semigroup</code>?</p>",
        "id": 289321370,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1657631714
    },
    {
        "content": "<p>Good question, I think for my use-case I don't really care that much</p>",
        "id": 289326550,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657633957
    }
]