[
    {
        "content": "<p>I want to check that <code>e : pexpr</code> is a numeral. There exists <code>expr.is_numeral</code>. So how do I turn my <code>e</code> into an <code>expr</code>?<br>\nI'm a bit confused this doesn't work by default... because <code>pexpr := expr ff</code>.</p>",
        "id": 214721098,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603814335
    },
    {
        "content": "<p><code>pexpr</code> numerals are stored completely differently</p>",
        "id": 214722889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603815016
    },
    {
        "content": "<p>There are a few complications, most importantly, that a <code>pexpr</code> numeral is typically a macro.</p>",
        "id": 214722946,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603815044
    },
    {
        "content": "<p>You could just turn your <code>pexpr</code> into a <code>expr</code> by <code>unchecked_cast</code>, but the result would not work</p>",
        "id": 214722950,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603815048
    },
    {
        "content": "<p>Hmm, ok</p>",
        "id": 214723238,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603815167
    },
    {
        "content": "<p>I'll think more about this after dinner</p>",
        "id": 214723253,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603815176
    },
    {
        "content": "<p>We really need to make <code>macro_def</code> transparent in lean</p>",
        "id": 214723302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603815201
    },
    {
        "content": "<p>If you know the pexpr is going to be an \"input numeral\" parsed from the user (not created by some tactic or whatever) you can check if it's the right macro.</p>",
        "id": 214723313,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603815206
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">run_cmd</span> <span class=\"k\">match</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">expr.macro</span> <span class=\"n\">md</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">trace</span> <span class=\"bp\">$</span> <span class=\"n\">expr.macro_def_name</span> <span class=\"n\">md</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">failed</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 214723317,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603815209
    },
    {
        "content": "<p>It's \"transparent enough\" to test if something's a numeral.</p>",
        "id": 214723423,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603815248
    },
    {
        "content": "<p>Not what numeral it is.</p>",
        "id": 214723429,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603815250
    },
    {
        "content": "<p>The fact that it mutually recurs with <code>expr</code> is a potential issue for making it transparent</p>",
        "id": 214723557,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603815308
    },
    {
        "content": "<p>What if we had another type <code>macro_def'</code> which is the same as <code>macro_def</code> but is an <code>inductive</code> defined in <code>expr</code>? I'm afraid that actually using <code>mutual meta def</code> will break something</p>",
        "id": 214723881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603815447
    },
    {
        "content": "<p>BTW, I've already written down what <code>macro_def</code> should be as an inductive: <a href=\"https://github.com/digama0/olean-rs/blob/master/olean.lean#L16-L48\">https://github.com/digama0/olean-rs/blob/master/olean.lean#L16-L48</a></p>",
        "id": 214724060,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603815519
    },
    {
        "content": "<p>I have no clue what would break, but to be honest this seems complicated and not very high priority...</p>",
        "id": 214724376,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603815644
    },
    {
        "content": "<p>Well the advantage of the <code>macro_def'</code> approach (with an explicit <code>unfold : macro_def -&gt; macro_def'</code> function) is that it's a pure addition, so nothing will break</p>",
        "id": 214725415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603816074
    },
    {
        "content": "<p>In the meantime, here's an alternative way to get the value, although I don't think it can be done as a pure function (isn't there some <code>unsafe_perform_tactic</code> function?):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">nat_value</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">pexpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">expr.macro</span> <span class=\"n\">md</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"n\">expr.macro_def_name</span> <span class=\"n\">md</span> <span class=\"bp\">=</span> <span class=\"s2\">\"prenum\"</span><span class=\"o\">),</span>\n  <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">e.to_nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">failed</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 214725890,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603816236
    },
    {
        "content": "<p>Oh, it appears that this function has already been implemented as a pure function in core: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/expr.get_nat_value/src\">src#expr.get_nat_value</a></p>",
        "id": 214726424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603816441
    }
]