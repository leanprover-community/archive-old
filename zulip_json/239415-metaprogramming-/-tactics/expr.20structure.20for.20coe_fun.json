[
    {
        "content": "<p>What's the correct way to destruct something like <code>⇑(swap 2 4) 5</code> as an <code>expr</code>?</p>",
        "id": 221841429,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609978258
    },
    {
        "content": "<p>Can you elaborate on what you’re trying to do?</p>",
        "id": 221842205,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1609978829
    },
    {
        "content": "<p>I'm trying to write the norm_num extension a la norm_digits following Mario's comments in <a href=\"https://github.com/leanprover-community/mathlib/pull/5637\">https://github.com/leanprover-community/mathlib/pull/5637</a></p>",
        "id": 221842517,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609979117
    },
    {
        "content": "<p>I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[norm_num]</span> <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"bp\">%%</span><span class=\"n\">ea</span> <span class=\"bp\">%%</span><span class=\"n\">eb</span> <span class=\"bp\">%%</span><span class=\"n\">ec</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">expr.to_nat</span> <span class=\"n\">ea</span><span class=\"o\">,</span>\n  <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">expr.to_nat</span> <span class=\"n\">eb</span><span class=\"o\">,</span>\n  <span class=\"n\">c</span> <span class=\"bp\">←</span> <span class=\"n\">expr.to_nat</span> <span class=\"n\">ec</span><span class=\"o\">,</span>\n  <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"n\">eb</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"n\">ea</span>\n  <span class=\"k\">else</span> <span class=\"n\">return</span> <span class=\"n\">ec</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">failed</span>\n</code></pre></div>\n<p>but that doesn't work, I need a <code>coe_fn</code> somewhere in there</p>",
        "id": 221842536,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609979140
    },
    {
        "content": "<p>I see I misunderstood what the norm_num extension should be. I'll try to fix it.</p>",
        "id": 221843886,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609980146
    },
    {
        "content": "<p>I think it has to be something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[norm_num]</span> <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">coe_fn</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">equiv.swap</span><span class=\"o\">)</span> <span class=\"n\">ea</span><span class=\"o\">)</span> <span class=\"n\">eb</span><span class=\"o\">))</span> <span class=\"n\">ec</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">expr.to_nat</span> <span class=\"n\">ea</span><span class=\"o\">,</span>\n  <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">expr.to_nat</span> <span class=\"n\">eb</span><span class=\"o\">,</span>\n  <span class=\"n\">c</span> <span class=\"bp\">←</span> <span class=\"n\">expr.to_nat</span> <span class=\"n\">ec</span><span class=\"o\">,</span>\n  <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">ea</span><span class=\"o\">,</span>\n  <span class=\"n\">u</span> <span class=\"bp\">←</span> <span class=\"n\">mk_meta_univ</span><span class=\"o\">,</span>\n  <span class=\"n\">infer_type</span> <span class=\"n\">t</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">unify</span> <span class=\"o\">(</span><span class=\"n\">expr.sort</span> <span class=\"o\">(</span><span class=\"n\">level.succ</span> <span class=\"n\">u</span><span class=\"o\">)),</span>\n  <span class=\"n\">u</span> <span class=\"bp\">←</span> <span class=\"n\">get_univ_assignment</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n  <span class=\"n\">ic</span> <span class=\"bp\">←</span> <span class=\"n\">mk_instance_cache</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">ic</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">ic.get</span> <span class=\"bp\">``</span><span class=\"n\">decidable_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"k\">if</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n    <span class=\"k\">then</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">eb</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">swap_apply_left</span> <span class=\"bp\">%%</span><span class=\"n\">t</span> <span class=\"bp\">%%</span><span class=\"n\">d</span> <span class=\"bp\">%%</span><span class=\"n\">ea</span> <span class=\"bp\">%%</span><span class=\"n\">eb</span><span class=\"o\">))</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n    <span class=\"k\">then</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">ea</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">swap_apply_right</span> <span class=\"bp\">%%</span><span class=\"n\">t</span> <span class=\"bp\">%%</span><span class=\"n\">d</span> <span class=\"bp\">%%</span><span class=\"n\">ea</span> <span class=\"bp\">%%</span><span class=\"n\">eb</span><span class=\"o\">))</span>\n  <span class=\"k\">else</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">ec</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">swap_apply_of_ne_of_ne</span> <span class=\"bp\">%%</span><span class=\"n\">t</span> <span class=\"bp\">%%</span><span class=\"n\">d</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">failed</span>\n</code></pre></div>\n<p>but I'm not sure how to properly pass the universe metavariable, nor generate the inequality proofs for the final case.</p>",
        "id": 221845287,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609981541
    },
    {
        "content": "<p>Ok <code>coe_fn</code> takes two parameters in your case: <code>swap a b</code> and <code>c</code></p>",
        "id": 221846250,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1609982498
    },
    {
        "content": "<p>Getting closer:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[norm_num]</span> <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">coe_fn</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">equiv.swap</span><span class=\"o\">)</span> <span class=\"n\">ea</span><span class=\"o\">)</span> <span class=\"n\">eb</span><span class=\"o\">))</span> <span class=\"n\">ec</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">expr.to_nat</span> <span class=\"n\">ea</span><span class=\"o\">,</span>\n  <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">expr.to_nat</span> <span class=\"n\">eb</span><span class=\"o\">,</span>\n  <span class=\"n\">c</span> <span class=\"bp\">←</span> <span class=\"n\">expr.to_nat</span> <span class=\"n\">ec</span><span class=\"o\">,</span>\n  <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">ea</span><span class=\"o\">,</span>\n  <span class=\"n\">u</span> <span class=\"bp\">←</span> <span class=\"n\">mk_meta_univ</span><span class=\"o\">,</span>\n  <span class=\"n\">infer_type</span> <span class=\"n\">t</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">unify</span> <span class=\"o\">(</span><span class=\"n\">expr.sort</span> <span class=\"o\">(</span><span class=\"n\">level.succ</span> <span class=\"n\">u</span><span class=\"o\">)),</span>\n  <span class=\"n\">u</span> <span class=\"bp\">←</span> <span class=\"n\">get_univ_assignment</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n  <span class=\"n\">ic</span> <span class=\"bp\">←</span> <span class=\"n\">mk_instance_cache</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">ic</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">ic.get</span> <span class=\"bp\">``</span><span class=\"n\">decidable_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"k\">if</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n    <span class=\"k\">then</span> <span class=\"k\">do</span>\n      <span class=\"n\">unify</span> <span class=\"n\">ec</span> <span class=\"n\">ea</span><span class=\"o\">,</span>\n      <span class=\"n\">trace</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"n\">trace</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n      <span class=\"n\">trace</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n      <span class=\"o\">(</span><span class=\"n\">ic</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">ic.mk_app</span> <span class=\"bp\">``</span><span class=\"n\">swap_apply_left</span> <span class=\"o\">[</span><span class=\"n\">ea</span><span class=\"o\">,</span> <span class=\"n\">eb</span><span class=\"o\">],</span>\n      <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">eb</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n    <span class=\"k\">then</span> <span class=\"k\">do</span>\n      <span class=\"n\">unify</span> <span class=\"n\">ec</span> <span class=\"n\">eb</span><span class=\"o\">,</span>\n      <span class=\"n\">trace</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"n\">trace</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n      <span class=\"n\">trace</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n      <span class=\"o\">(</span><span class=\"n\">ic</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">ic.mk_app</span> <span class=\"bp\">``</span><span class=\"n\">swap_apply_right</span> <span class=\"o\">[</span><span class=\"n\">ea</span><span class=\"o\">,</span> <span class=\"n\">eb</span><span class=\"o\">],</span>\n      <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">eb</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">ec</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">swap_apply_of_ne_of_ne</span> <span class=\"bp\">%%</span><span class=\"n\">t</span> <span class=\"bp\">%%</span><span class=\"n\">d</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">failed</span>\n</code></pre></div>",
        "id": 221846304,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609982526
    },
    {
        "content": "<p>Try writing the pattern in a <code> `( )</code> quotation. It will let you omit implicit parameters</p>",
        "id": 221846744,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1609982887
    },
    {
        "content": "<p>Which pattern?</p>",
        "id": 221846790,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609982952
    },
    {
        "content": "<p><code> `(coe_fn (swap %%a %%b) %%c)</code></p>",
        "id": 221847198,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1609983374
    },
    {
        "content": "<p>Doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[norm_num]</span> <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">coe_fn</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"bp\">%%</span><span class=\"n\">ea</span> <span class=\"bp\">%%</span><span class=\"n\">eb</span><span class=\"o\">)</span> <span class=\"bp\">%%</span><span class=\"n\">ec</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">function expected at</span>\n<span class=\"cm\">  ⇑(swap _x_1 _x_2)</span>\n<span class=\"cm\">term has type</span>\n<span class=\"cm\">  has_coe_to_fun.F (swap _x_1 _x_2)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 221847494,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609983672
    },
    {
        "content": "<p>I didn't see that coming. The issue is that <code>coe_fn (swap _ _)</code> only has a function type if we find the right <code>has_coe_to_fun</code> instance. Give me a moment, I'll see how to synthesize it first.</p>",
        "id": 221852859,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1609989810
    },
    {
        "content": "<p>Ok, try this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"n\">x</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"k\">if</span> <span class=\"n\">e.is_app_of</span> <span class=\"bp\">``</span><span class=\"n\">coe_fn</span> <span class=\"k\">then</span> <span class=\"k\">do</span>\n      <span class=\"o\">[</span><span class=\"n\">_α</span><span class=\"o\">,</span> <span class=\"n\">_inst</span><span class=\"o\">,</span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">equiv.swap</span> <span class=\"bp\">%%</span><span class=\"n\">ea</span> <span class=\"bp\">%%</span><span class=\"n\">eb</span><span class=\"o\">),</span> <span class=\"n\">ec</span><span class=\"o\">]</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"n\">e.get_app_args</span><span class=\"o\">,</span>\n      <span class=\"n\">_</span>\n   <span class=\"k\">else</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 221853305,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1609990423
    },
    {
        "content": "<p>Did it work?</p>",
        "id": 222021279,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1610065868
    },
    {
        "content": "<p>Yes, I generalized it so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">If `e : expr` is of the form `const name _`, `app name _`,</span>\n<span class=\"cm\">or `app (app name _) _`, or so on, get back the `name`.</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">expr.name_of_const_or_app</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">name</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">n</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">expr.name_of_const_or_app</span> <span class=\"n\">f</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">fail</span> <span class=\"s2\">\"not const or app\"</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">If `e : expr` is of the form `app (⇑f) x`, get back the `expr`s for</span>\n<span class=\"cm\">type of `f`, the `has_coe_to_fun` instance, `f` itself, and `x`.</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">expr.get_of_coe_fn</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"n\">e.is_app_of</span> <span class=\"bp\">``</span><span class=\"n\">coe_fn</span>\n  <span class=\"k\">then</span> <span class=\"k\">do</span>\n    <span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">inst</span><span class=\"o\">,</span> <span class=\"n\">fexpr</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"n\">e.get_app_args</span><span class=\"o\">,</span>\n    <span class=\"n\">fname</span> <span class=\"bp\">←</span> <span class=\"n\">expr.name_of_const_or_app</span> <span class=\"n\">fexpr</span><span class=\"o\">,</span>\n    <span class=\"n\">decorate_error</span> <span class=\"o\">(</span><span class=\"s2\">\"retrieved function name \"</span> <span class=\"bp\">++</span> <span class=\"n\">fname.to_string</span> <span class=\"bp\">++</span> <span class=\"s2\">\" is not the expected \"</span> <span class=\"bp\">++</span> <span class=\"n\">f.to_string</span><span class=\"o\">)</span>\n      <span class=\"bp\">$</span> <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"n\">fname</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">),</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">inst</span><span class=\"o\">,</span> <span class=\"n\">fexpr</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span> <span class=\"n\">fail</span> <span class=\"s2\">\"not of coe_fn form with a single argument\"</span>\n\n<span class=\"kd\">@[norm_num]</span> <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"k\">do</span>\n  <span class=\"o\">(</span><span class=\"n\">swapt</span><span class=\"o\">,</span> <span class=\"n\">coe_fn_inst</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">expr.get_of_coe_fn</span> <span class=\"n\">e</span> <span class=\"bp\">``</span><span class=\"n\">equiv.swap</span><span class=\"o\">,</span>\n  <span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">deceq_inst</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"n\">f.get_app_args</span><span class=\"o\">,</span> <span class=\"c1\">-- the swap should have exactly two arguments applied</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 222021424,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610065986
    }
]