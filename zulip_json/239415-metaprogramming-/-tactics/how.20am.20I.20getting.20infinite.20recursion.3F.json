[
    {
        "content": "<p>Hi,</p>\n<p>I'm learning to write tactics to traverse the structure of an expr and extract certain bits. It seems that a tactic I wrote is leading to the error: \"excessive memory consumption detected at 'vm' (potential solution: increase memory consumption threshold)\". This sounds to me like it's running a bottomless recursion and it runs out of memory, but looking at my code I can't see how it would fail to reach the base case which ends the recursion. Perhaps what I wrote doesn't mean what I think it does. I would appreciate some guidance on how to fix it. Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">expr</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">extract_bindings</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"n\">var_name</span> <span class=\"n\">b_info</span> <span class=\"n\">var_type</span> <span class=\"n\">body</span> <span class=\"o\">:=</span> <span class=\"n\">lam</span> <span class=\"n\">var_name</span> <span class=\"n\">b_info</span> <span class=\"n\">var_type</span> <span class=\"o\">(</span><span class=\"n\">extract_bindings</span> <span class=\"n\">body</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">pi</span> <span class=\"n\">var_name</span> <span class=\"n\">b_info</span> <span class=\"n\">var_type</span> <span class=\"n\">body</span> <span class=\"o\">:=</span> <span class=\"n\">pi</span> <span class=\"n\">var_name</span> <span class=\"n\">b_info</span> <span class=\"n\">var_type</span> <span class=\"o\">(</span><span class=\"n\">extract_bindings</span> <span class=\"n\">body</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">expr.var</span> <span class=\"n\">tt</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"c1\">-- this one is fine</span>\n<span class=\"kd\">run_cmd</span> <span class=\"n\">tactic.trace</span> <span class=\"o\">(</span><span class=\"n\">extract_bindings</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">expr.var</span> <span class=\"n\">tt</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- this one produces the error</span>\n<span class=\"kd\">run_cmd</span> <span class=\"n\">tactic.trace</span> <span class=\"o\">(</span><span class=\"n\">extract_bindings</span>\n <span class=\"o\">(</span><span class=\"n\">expr.lam</span> <span class=\"o\">(</span><span class=\"n\">mk_simple_name</span> <span class=\"s2\">\"α\"</span><span class=\"o\">)</span> <span class=\"n\">binder_info.implicit</span> <span class=\"o\">(</span><span class=\"n\">expr.sort</span> <span class=\"bp\">$</span> <span class=\"n\">level.succ</span> <span class=\"n\">level.zero</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">expr.lam</span> <span class=\"o\">(</span><span class=\"n\">mk_simple_name</span> <span class=\"s2\">\"β\"</span><span class=\"o\">)</span> <span class=\"n\">binder_info.implicit</span> <span class=\"o\">(</span><span class=\"n\">expr.sort</span> <span class=\"bp\">$</span> <span class=\"n\">level.succ</span> <span class=\"n\">level.zero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">expr.var</span> <span class=\"n\">tt</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n <span class=\"o\">))</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">expr</span>\n</code></pre></div>",
        "id": 236729606,
        "sender_full_name": "Joe Palermo",
        "timestamp": 1619723833
    },
    {
        "content": "<p>Can you express your function using <code>expr.fold</code>?</p>",
        "id": 236732884,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619725193
    },
    {
        "content": "<p>If your thing truly recurses properly, you wouldn't need to write is as a <code>meta def</code>, just <code>def</code></p>",
        "id": 236733031,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619725245
    },
    {
        "content": "<p>Thanks for the suggestion. I'll try to rewrite it with fold</p>",
        "id": 236748694,
        "sender_full_name": "Joe Palermo",
        "timestamp": 1619731120
    },
    {
        "content": "<p>Okay this is a weird one. Here's a working version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">expr</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">extract_bindings</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"n\">var_name</span> <span class=\"n\">b_info</span> <span class=\"n\">var_type</span> <span class=\"n\">body</span> <span class=\"o\">:=</span> <span class=\"n\">lam</span> <span class=\"n\">var_name</span> <span class=\"n\">b_info</span> <span class=\"n\">var_type</span> <span class=\"o\">(</span><span class=\"n\">extract_bindings</span> <span class=\"n\">body</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">pi</span> <span class=\"n\">var_name</span> <span class=\"n\">b_info</span> <span class=\"n\">var_type</span> <span class=\"n\">body</span> <span class=\"o\">:=</span> <span class=\"n\">pi</span> <span class=\"n\">var_name</span> <span class=\"n\">b_info</span> <span class=\"n\">var_type</span> <span class=\"o\">(</span><span class=\"n\">extract_bindings</span> <span class=\"n\">body</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">expr.var</span> <span class=\"n\">tt</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"n\">tactic.trace</span> <span class=\"o\">(</span><span class=\"n\">extract_bindings</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">expr.var</span> <span class=\"n\">tt</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"n\">trace</span> <span class=\"bp\">$</span>\n    <span class=\"n\">extract_bindings</span> <span class=\"bp\">$</span>\n      <span class=\"n\">lam</span> <span class=\"bp\">`</span><span class=\"n\">α</span> <span class=\"n\">binder_info.default</span> <span class=\"o\">(</span><span class=\"n\">expr.sort</span> <span class=\"n\">level.zero</span><span class=\"o\">)</span> <span class=\"bp\">$</span>\n      <span class=\"n\">lam</span> <span class=\"bp\">`</span><span class=\"n\">β</span> <span class=\"n\">binder_info.default</span> <span class=\"o\">(</span><span class=\"n\">expr.sort</span> <span class=\"n\">level.zero</span><span class=\"o\">)</span> <span class=\"bp\">$</span>\n      <span class=\"n\">var</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">expr</span>\n</code></pre></div>\n<p>The difference is in the definition of <code>extract_bindings</code>. Arguments before the colon, like <code>e</code> in your version, are treated as parameters in definitions, meaning they are fixed in recursive calls. But I don't understand why Lean even accepted your definition in the first place. Usually, <code>extract_bindings</code> should have type <code>expr</code> in the body of its definition (since the <code>e</code> is fixed), so <code>extract_bindings body</code> should be a type error.</p>\n<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> can you tell what's going on here?</p>\n<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/how.20am.20I.20getting.20infinite.20recursion.3F/near/236733031\">said</a>:</p>\n<blockquote>\n<p>If your thing truly recurses properly, you wouldn't need to write is as a <code>meta def</code>, just <code>def</code></p>\n</blockquote>\n<p>In this case, <code>expr</code> is already <code>meta</code>, so the definition must be <code>meta</code> as well.</p>",
        "id": 236765150,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1619740561
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/how.20am.20I.20getting.20infinite.20recursion.3F/near/236765150\">said</a>:</p>\n<blockquote>\n<p>But I don't understand why Lean even accepted your definition in the first place. Usually, <code>extract_bindings</code> should have type <code>expr</code> in the body of its definition (since the <code>e</code> is fixed), so <code>extract_bindings body</code> should be a type error.</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/expr.has_coe_to_fun\">docs#expr.has_coe_to_fun</a> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 236797926,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1619768756
    },
    {
        "content": "<p>Ha! That explains the infinite recursion. Thanks!</p>",
        "id": 236819465,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1619781421
    },
    {
        "content": "<p>Wow, I didn't expect the problem to be in the function signature...</p>",
        "id": 236847272,
        "sender_full_name": "Joe Palermo",
        "timestamp": 1619794795
    },
    {
        "content": "<p>So <code>(extract_bindings body)</code> was being expanded to <code>(expr.app extract_bindings body)</code>. Also extract_bindings had an implicit argument (causing infinite recursion), but <code>has_coe_to_fun</code> prevented a type error from showing up on <code>(extract_bindings body)</code> because of the extra <code>expr.app</code>...</p>",
        "id": 236850518,
        "sender_full_name": "Joe Palermo",
        "timestamp": 1619795517
    },
    {
        "content": "<p>I hope I'm understanding correctly here.</p>\n<p>How can you prevent <code>has_coe_to_fun</code> from doing that? When does <code>has_coe_to_fun</code> apply? Was the change to the function signature enough to inhibit it? Because I don't see an extra <code>expr.app</code> in the resulting expression now that the program works</p>",
        "id": 236851414,
        "sender_full_name": "Joe Palermo",
        "timestamp": 1619795736
    },
    {
        "content": "<p><code>local attribute [-instance] expr.has_coe_to_fun</code></p>",
        "id": 236853246,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619796373
    },
    {
        "content": "<p>Your understanding seems correct. </p>\n<p><span class=\"user-mention silent\" data-user-id=\"337523\">Joe Palermo</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/how.20am.20I.20getting.20infinite.20recursion.3F/near/236851414\">said</a>:</p>\n<blockquote>\n<p>When does <code>has_coe_to_fun</code> apply? </p>\n</blockquote>\n<p>Whenever Lean sees an application <code>x y</code> with <code>x : T</code> and <code>T</code> not a function type, it tries to look for an instance of <code>has_coe_to_fun T</code>. (There are probably nasty details to consider, but that's the idea.) For <code>expr</code> specifically, this allows you to write <code>f x</code> with <code>f, x : expr</code> and <code>f</code> presumably of function type, which is occasionally handy.</p>\n<blockquote>\n<p>Was the change to the function signature enough to inhibit it? Because I don't see an extra <code>expr.app</code> in the resulting expression now that the program works</p>\n</blockquote>\n<p>With the change to the function signature, <code>extract_bindings</code> has type <code>expr -&gt; expr</code> in the body of its definition, so it's already a function and the <code>has_coe_to_fun</code> business doesn't apply.</p>",
        "id": 236857514,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1619797952
    }
]