[
    {
        "content": "<p>Dear All,</p>\n<p>to generalize <code>move_add</code> to something that also takes an operation as an input, I would like to match the user supplied operation (e.g. <code>+, *</code>) with the expression that comes from the actual lemma.  I found a very convoluted way of doing this, that you can see below.</p>\n<p>Can I (in fact, you!) do better?  It seems awfully laborious.</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.core</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">list_head_op</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">pexpr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">op</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"n\">op</span> <span class=\"n\">tt</span> <span class=\"n\">ff</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">name_cond</span>    <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">f.get_app_fn.const_name</span> <span class=\"bp\">=</span> <span class=\"n\">op.get_app_fn.const_name</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">no_name_cond</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">f.get_app_fn</span>            <span class=\"bp\">=</span> <span class=\"n\">op.get_app_fn</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">format</span><span class=\"bp\">!</span><span class=\"s2\">\"using name: {name_cond}</span><span class=\"se\">\\n</span><span class=\"s2\">not using name: {no_name_cond}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"k\">do</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">lhs</span> <span class=\"bp\">=</span> <span class=\"bp\">%%</span><span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n  <span class=\"n\">list_head_op</span> <span class=\"bp\">``</span><span class=\"o\">((</span><span class=\"bp\">+</span><span class=\"o\">))</span> <span class=\"n\">lhs</span><span class=\"o\">,</span>\n  <span class=\"n\">list_head_op</span> <span class=\"bp\">``</span><span class=\"o\">((</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"n\">rhs</span><span class=\"o\">,</span>\n  <span class=\"n\">exact_dec_trivial</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">using name: tt</span>\n<span class=\"cm\">not using name: ff</span>\n\n<span class=\"cm\">using name: tt</span>\n<span class=\"cm\">not using name: ff</span>\n\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 285627903,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654833371
    },
    {
        "content": "<p>I realize now that I learned the <code>const_name</code> trick from <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/passing.20functions/near/280444460\">Mario</a>.  This makes me suspicious about the possibility of making this any smoother!  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> </p>\n<p>Still, if there is any easy tweak to avoid the <code>pexpr -&gt; expr -&gt; get_app_fn -&gt; const_name</code> sequence, I'd be very happy to hear about it!</p>",
        "id": 285681074,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654870316
    },
    {
        "content": "<p>comparing <code>expr</code> for equality is usually not what you want</p>",
        "id": 285683325,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654871288
    },
    {
        "content": "<p>I don't usually consider laboriousness to be a factor when writing metaprograms. It's always possible to extract things into a function if they come up often enough. The more important question is whether the code actually expresses what you want, and whether there are any weird failure modes that will result in a bug report down the line</p>",
        "id": 285683569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654871404
    },
    {
        "content": "<p>For example, this code would also consider <code>(a + b) c</code> to have head <code>+</code></p>",
        "id": 285683683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654871448
    },
    {
        "content": "<p>is that important? hard to say</p>",
        "id": 285683720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654871466
    },
    {
        "content": "<p>It's almost certainly unnecessary to elaborate <code>op</code> here only to get the const_name from it. That's a fixed thing you can just inline, probably <code>has_add.add</code></p>",
        "id": 285683917,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654871563
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/avoid.20.60const_name.60.3F/near/285683683\">said</a>:</p>\n<blockquote>\n<p>For example, this code would also consider <code>(a + b) c</code> to have head <code>+</code></p>\n</blockquote>\n<p>Actually, this is very important for this code: I want to isolate all subexpressions of an expression that contain a sum, but only keeping the very first one in each case.  For instance, from <code>e + a / (a + b) + (b / (c + d) + c)</code> I want to extract</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span>   <span class=\"c1\">-- and not also, e.g., `b / (c + d) + c`</span>\n<span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n<span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span>\n</code></pre></div>\n<p>(My code actually seems to do this, based on the tests that I made.)</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/avoid.20.60const_name.60.3F/near/285683917\">said</a>:</p>\n<blockquote>\n<p>It's almost certainly unnecessary to elaborate <code>op</code> here only to get the const_name from it. That's a fixed thing you can just inline, probably <code>has_add.add</code></p>\n</blockquote>\n<p>I am probably not understanding this suggestion: I want the user to be able to specify whether they want to collect together sums, or product, or intersections, or whatever.  If I inline <code>has_add.add</code>, then this will only extract sums, right?</p>",
        "id": 285684916,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654872023
    },
    {
        "content": "<p>I think you didn't understand my <code>(a + b) c</code> example. That is an application with <code>(a + b)</code> as the function and <code>c</code> as the argument, so the head of that application is <code>+</code> but it's not going to play well with your reasoning about <code>+</code> as a binary operator</p>",
        "id": 285702338,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654879435
    },
    {
        "content": "<p>Indeed, I did not understand and I am not yet sure that I understand.  Do your <code>a, b</code> have a type different from <code>c</code>?  Is that intended to be an application of two additive homomorphisms <code>a, b</code> on a additive monoid containing a term <code>c</code>?</p>",
        "id": 285704364,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654880371
    },
    {
        "content": "<p>kind of; for this to typecheck you would need <code>a</code> and <code>b</code> to be function types and <code>c</code> is the argument type. I think we have an implementation of pointwise addition on function types so it isn't completely crazy to have such a term pop up</p>",
        "id": 285705733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654880980
    },
    {
        "content": "<p>if it was an \"additive homomorphism\" as in the type <code>add_monoid_hom</code> then the term would not actually look like that, it would be <code>coe_fn (a + b) c</code> which does not have <code>+</code> at the head</p>",
        "id": 285705893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654881052
    },
    {
        "content": "<p>Ok, something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>Let me switch branch and check it right away!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 285706674,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654881402
    },
    {
        "content": "<p>You are right that something is not as I intended it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"bp\">&lt;</span><span class=\"n\">my</span> <span class=\"n\">code</span> <span class=\"n\">that</span> <span class=\"n\">is</span> <span class=\"n\">supposed</span> <span class=\"n\">to</span> <span class=\"n\">extract</span> <span class=\"n\">summands</span><span class=\"bp\">&gt;</span>\n<span class=\"c1\">--  [(f + g * (g + h)) (a + b), g + h]</span>\n</code></pre></div>\n<p>I am inclined to not worry about this issue: if you want to move around terms in an expression like the one above, you can roll your sleeves up and do it manually, instead of relying on <code>move_add</code>!</p>\n<p>I will think about how to make <code>move_add</code> better, but I consider this not a priority, would you agree?</p>",
        "id": 285708777,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654882341
    },
    {
        "content": "<p>To be fair, in all the instances that I <a href=\"https://github.com/leanprover-community/mathlib/compare/aa_sort...adomani_move_add_random_golf\">saw</a> when I was looking for applications of <code>move_add/move_mul</code> not once did this situation arise.</p>",
        "id": 285709349,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654882629
    },
    {
        "content": "<p>Anyway, the take-away is that the tactic appears to work, if each subexpression that consists of iterated binary operations is separated by at least one expr-constructor from the next subexpression that has the same head symbol.</p>",
        "id": 285710273,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654883152
    },
    {
        "content": "<p>At least in the case mentioned above, <code>move_add/move_mul</code> appear to work as intended after applying <code>simp</code>, which \"applies\" the functions.</p>",
        "id": 285710472,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654883268
    },
    {
        "content": "<p>... almost, the third example violates what I said above.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.move_add</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group.pi</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">move_mul</span> <span class=\"n\">a</span><span class=\"o\">,</span>  <span class=\"c1\">-- fails doing nothing</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">move_mul</span> <span class=\"n\">a</span><span class=\"o\">,</span>  <span class=\"c1\">-- ⊢ (f + g) (b * a) = 1, as intended</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">move_mul</span> <span class=\"n\">f</span><span class=\"o\">,</span>  <span class=\"c1\">-- fails doing nothing, I was hoping for ⊢ (g * f) (a + b) = 1</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I may add a sentence about this in a doc-string.</p>",
        "id": 285710824,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654883466
    },
    {
        "content": "<blockquote>\n<p>I am inclined to not worry about this issue: if you want to move around terms in an expression like the one above, you can roll your sleeves up and do it manually, instead of relying on move_add!</p>\n</blockquote>\n<p>I would argue that your program should treat <code>(f + g * (g + h)) (a + b)</code> as a single term (making <code>move_add</code> a no-op) rather than incorrectly splitting it into two terms</p>",
        "id": 285911554,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655118720
    },
    {
        "content": "<p>Eric, you are probably right, but then I need to think about how to do this.  In any case, whether or not the program that gathers operands treats <code>(f + g * (g + h)) (a + b)</code> as a single block or not, the rest of the program does not seem to care much and mostly considers it a single block anyway.</p>",
        "id": 285945156,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1655134096
    },
    {
        "content": "<p>Does the code I provided in your earlier PR fail on this example?</p>",
        "id": 285950639,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655136042
    },
    {
        "content": "<p>That is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">expr.list_binary_operands_aux</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">expr.app</span> <span class=\"o\">(</span><span class=\"n\">expr.app</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">some</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">try_core</span> <span class=\"o\">(</span><span class=\"n\">unify</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">pure</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">],</span>\n  <span class=\"n\">as</span> <span class=\"bp\">←</span> <span class=\"n\">a.list_binary_operands_aux</span><span class=\"o\">,</span>\n  <span class=\"n\">bs</span> <span class=\"bp\">←</span> <span class=\"n\">b.list_binary_operands_aux</span><span class=\"o\">,</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"bp\">++</span> <span class=\"n\">bs</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- Produces a list of all the operands in `x`, ignoring associativity. -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">expr.list_binary_operands</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">pexpr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">fe</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">%%</span><span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"bp\">%%</span><span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"bp\">%%</span><span class=\"n\">t</span> <span class=\"o\">),</span>\n  <span class=\"n\">expr.list_binary_operands_aux</span> <span class=\"n\">fe</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 285950753,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655136080
    },
    {
        "content": "<p>It seems to work fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constants</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"kd\">constants</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n\n<span class=\"c1\">-- [(f + g) (a * b), 1]</span>\n<span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"n\">l</span> <span class=\"bp\">←</span> <span class=\"n\">expr.list_binary_operands</span> <span class=\"bp\">``</span><span class=\"o\">((</span><span class=\"bp\">+</span><span class=\"o\">))</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"n\">tactic.trace</span> <span class=\"n\">l</span>\n</code></pre></div>",
        "id": 285951704,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655136442
    },
    {
        "content": "<p>Eric, I think that you are right and that I was confused from the very beginning.  I have used your code <code>list_binary_operands</code>, I was simply interpreting the output incorrectly, since I was confusing it with the output of <code>list_head_op</code> as well.</p>\n<p>The interpretation that <code>(f + g) (a * b)</code> is a \"unit\" is clarifying and actually correct for code, as it already is.  At least as far as I have tested it.</p>",
        "id": 285968954,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1655144214
    },
    {
        "content": "<p>If you want to test whether you are confused or not about how <code>move_add</code> and <code>move_mul</code> work, you can scan through the lines of the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.move_add</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group.pi</span>\n\n<span class=\"kd\">constants</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"kd\">constants</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">move_add</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">move_add</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">_</span><span class=\"o\">],</span>\n  <span class=\"n\">move_mul</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">],</span>\n  <span class=\"n\">move_add</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">move_mul</span> <span class=\"n\">f</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">move_add</span> <span class=\"n\">_</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 285969030,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1655144276
    }
]