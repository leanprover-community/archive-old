[
    {
        "content": "<p>Sorry if this is a noobish question. Let's say that i have something like the following in the file <code>even.lean</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">system.io</span>\n<span class=\"kn\">open</span>  <span class=\"n\">io</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">even</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">add_two</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">even</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic_even</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">tactic.repeat</span>\n  <span class=\"o\">((</span><span class=\"n\">tactic.trace</span> <span class=\"s2\">\"Inductive step\"</span><span class=\"bp\">;</span> <span class=\"n\">tactic.applyc</span> <span class=\"bp\">``</span><span class=\"n\">even.add_two</span><span class=\"o\">)</span>\n  <span class=\"bp\">&lt;|&gt;</span>\n  <span class=\"o\">(</span><span class=\"n\">tactic.trace</span> <span class=\"s2\">\"Base Case\"</span><span class=\"bp\">;</span> <span class=\"n\">tactic.applyc</span> <span class=\"bp\">``</span><span class=\"n\">even.zero</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">six_is_even</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tactic_even</span>\n</code></pre></div>\n\n<p>The trace of <code>six_is_even</code> is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Inductive</span> <span class=\"n\">step</span>\n<span class=\"n\">Inductive</span> <span class=\"n\">step</span>\n<span class=\"n\">Inductive</span> <span class=\"n\">step</span>\n<span class=\"n\">Inductive</span> <span class=\"n\">step</span>\n<span class=\"n\">Base</span> <span class=\"n\">Case</span>\n</code></pre></div>\n\n<p>Is there a way I can write a function <code>def main : io unit</code> such that invoking <code>lean --run even.lean</code> would print the above trace to std output?</p>",
        "id": 210889545,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1600789425
    },
    {
        "content": "<p>Yes you can call it using <code>io.run_tactic</code> in your <code>main</code> function</p>",
        "id": 210893295,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600790973
    },
    {
        "content": "<p>Oh great!</p>",
        "id": 210896300,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1600792239
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>  can you give any  example of how to use it? I can't seem to figure how it works from the code itself</p>",
        "id": 210918014,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1600802071
    },
    {
        "content": "<p>Have you tried <code>def main : io unit := io.run_tactic tactic_even</code></p>",
        "id": 210918265,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600802188
    },
    {
        "content": "<p>Yes, but invoking </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">io</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n   <span class=\"n\">io.run_tactic</span> <span class=\"n\">tactic_even</span>\n</code></pre></div>\n\n<p>prints </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Inductive</span> <span class=\"n\">step</span>\n<span class=\"n\">Base</span> <span class=\"n\">Case</span>\n</code></pre></div>\n\n<p>which I'm assuming just means it traces out everything in the tactic. I'm wondering how I would use it in conjunction with a particular goal,  so if I use <code>tactic_even</code> to show that, say, 4 is even, it would print 2 isntances of <code>Inductive step</code> and one instance of <code>Base Case</code> </p>\n<p>(although the above version of tactic_even I provided actually prints an extra line)</p>",
        "id": 210920272,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1600803196
    },
    {
        "content": "<p>oh, maybe I can just provide an argument to <code>tactic_even</code></p>",
        "id": 210920500,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1600803325
    },
    {
        "content": "<p>If you call <code>lean even.lean</code> you'll already see the printout with regards to your specific proof. Why do you need it to be called from <code>main</code>?</p>\n<p>Regardless, you can do that with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">io</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n   <span class=\"n\">io.run_tactic</span> <span class=\"bp\">$</span> <span class=\"k\">do</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"mi\">6</span><span class=\"o\">],</span> <span class=\"n\">tactic_even</span>\n</code></pre></div>",
        "id": 210922068,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600804122
    },
    {
        "content": "<p>What I actually want to do is get some information from stdin in <code>main</code>  and then show the trace of a proof about that information. </p>\n<p>Thanks for the help!</p>",
        "id": 210922320,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1600804228
    }
]