[
    {
        "content": "<p>What am I doing wrong in:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic.interactive</span>\n\n<span class=\"n\">setup_tactic_parser</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">pexpr_list_or_texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">eargs</span> <span class=\"bp\">←</span> <span class=\"n\">args.mmap</span> <span class=\"n\">tactic.to_expr</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.mk_app</span> <span class=\"n\">i</span> <span class=\"n\">eargs</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic.exact</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">tactic.interactive</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.app_builder</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">test</span> <span class=\"n\">h</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220538594,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1608500373
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>?</p>",
        "id": 220538863,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1608500827
    },
    {
        "content": "<p><code>mk_app</code> expects the name of a constant in the first argument, it doesn't work on local constants</p>",
        "id": 220538886,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608500880
    },
    {
        "content": "<p>Is there any function I could use here?</p>",
        "id": 220538926,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1608500902
    },
    {
        "content": "<p>yes, I forget the name</p>",
        "id": 220538927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608500910
    },
    {
        "content": "<p>I'd like something that can handle both local constants and lemma names.</p>",
        "id": 220538928,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1608500916
    },
    {
        "content": "<p>the function I'm thinking of takes an expr in the first position</p>",
        "id": 220538938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608500964
    },
    {
        "content": "<p>Indeed my code works if I create a lemma replacing <code>h</code></p>",
        "id": 220538939,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1608500968
    },
    {
        "content": "<p>so you can use general expressions in addition to local constants</p>",
        "id": 220538940,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608500978
    },
    {
        "content": "<p>Great</p>",
        "id": 220538941,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1608500983
    },
    {
        "content": "<p>How do we find it?</p>",
        "id": 220538943,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1608500988
    },
    {
        "content": "<p><code>expr.mk_app</code> perchance?</p>",
        "id": 220539604,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1608502061
    },
    {
        "content": "<p>Jannis, could you try to fix my code using that function?</p>",
        "id": 220539759,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1608502287
    },
    {
        "content": "<p>I failed so far.</p>",
        "id": 220539762,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1608502301
    },
    {
        "content": "<p>Nevermind, this is a parsing issue</p>",
        "id": 220539816,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1608502385
    },
    {
        "content": "<p>Thank you very much.</p>",
        "id": 220539824,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1608502410
    },
    {
        "content": "<p>yeah, I was thinking of <code>expr.mk_app</code> but it's not a particularly good drop in replacement for <code>mk_app</code> because it doesn't do implicit stuff</p>",
        "id": 220539974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608502664
    },
    {
        "content": "<p>I need to go to bed, but I'd be very happy to read a more robust solution when I'll wake up.</p>",
        "id": 220540101,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1608502832
    }
]