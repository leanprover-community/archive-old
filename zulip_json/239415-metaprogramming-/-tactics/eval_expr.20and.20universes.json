[
    {
        "content": "<p>Is it possible to use <code>eval_expr</code> in a universe-polymorphic way? The non-working pseudocode is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Evaluate `ex` and reflect back its value -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">reflect_eval</span> <span class=\"o\">(</span><span class=\"n\">ex</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">et</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">ex</span><span class=\"o\">,</span>\n  <span class=\"n\">expr.sort</span> <span class=\"n\">l</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">et</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- `Type` isn't universe polymorphic; how to use `l`?</span>\n  <span class=\"c1\">-- note that we have to call `interaction_monad_bind` manually as `&gt;&gt;=` doesn't allow universe polymorphism</span>\n  <span class=\"n\">interaction_monad_bind</span> <span class=\"o\">(</span><span class=\"n\">eval_expr</span> <span class=\"kt\">Type</span> <span class=\"n\">et</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">inst1</span> <span class=\"o\">:</span> <span class=\"n\">reflected</span> <span class=\"kt\">Type</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"bp\">@</span><span class=\"n\">eval_expr</span> <span class=\"n\">t</span> <span class=\"n\">inst1</span> <span class=\"n\">ex</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">inst2</span> <span class=\"o\">:</span> <span class=\"n\">reflected</span> <span class=\"n\">t</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">reflect</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">inst2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>With the intent that <code>reflect_eval `(1  +  1) = `(2)</code> (but in a way that knows about any computable definition)</p>",
        "id": 298930667,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663233486
    },
    {
        "content": "<p>where is the has_reflect instance supposed to come from?</p>",
        "id": 298931038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663233661
    },
    {
        "content": "<p>I was hoping that I could ask instance search to look for one</p>",
        "id": 298931135,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663233714
    },
    {
        "content": "<p>(edited above to be non-pseudocode, but have <code>sorry</code>s instead)</p>",
        "id": 298931219,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663233741
    },
    {
        "content": "<p>Obviously the instance wouldn't be available in all cases, but it feels like it ought to be possible if <code>et</code> is <code> `(nat) </code></p>",
        "id": 298931565,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663233917
    },
    {
        "content": "<p>Ha!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">eval'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_reflect</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">reflected</span> <span class=\"n\">_</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span>\n  <span class=\"k\">do</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">eval_expr</span> <span class=\"n\">α</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">reflect</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Evaluate `ex` and reflect back its value -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">reflect_eval</span> <span class=\"o\">(</span><span class=\"n\">ex</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">ex</span><span class=\"o\">,</span>\n  <span class=\"n\">inst</span> <span class=\"bp\">←</span> <span class=\"n\">mk_app</span> <span class=\"bp\">``</span><span class=\"n\">has_reflect</span> <span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">mk_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">f</span> <span class=\"bp\">←</span> <span class=\"n\">eval_expr</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">expr.const</span> <span class=\"bp\">``</span><span class=\"n\">eval'</span> <span class=\"o\">[])</span><span class=\"bp\">.</span><span class=\"n\">mk_app</span> <span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">inst</span><span class=\"o\">]),</span>\n  <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"n\">ex</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">reflect_eval</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic.trace</span>\n</code></pre></div>",
        "id": 298932905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663234435
    }
]