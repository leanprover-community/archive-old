[
    {
        "content": "<p>Hi. <span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> already gave me some helpful pointers to track this down, but I'm afraid I don't know enough to get it over the finishing line yet.</p>\n<p>I noticed that <code>norm_num</code> can't solve arithmetic equations in complex numbers despite its docstring seemingly saying it should (my original example was <code>example : (2 + 3 * I) * (4 + 5 * I) = -7 + 22 * I := by norm_num</code> which does not work without <code>by ext; norm_num</code>).</p>\n<p>Two questions:</p>\n<p>1) Is this indeed within the intended scope of <code>norm_num</code>? Its docstring does seem to say \"Supports the operations <code>+</code> <code>-</code> <code>*</code> <code>/</code> <code>^</code> and <code>%</code> over numerical types such as <code>ℕ</code>, <code>ℤ</code>, <code>ℚ</code>, <code>ℝ</code>, <code>ℂ</code>\".<br>\n2) Assuming it is, I added the failing <code>example : complex.I ≠ 2 := by norm_num</code> to <code>test/norm_num.lean</code> -- is the right way to fix this say to try calling <code>tactic.ext</code> within <code>norm_num1</code> and if it succeeds recurse into each of the constructors with what's done today? (If so, can I have a hint as to how that's done?) Or should I try to figure out a way to add a <code>@[norm_num]</code> extension to <code>data.complex</code> specific to complex numbers? I can't quite tell whether the latter is precisely meant for this use case, it seems to talk about being used for new functions really, not types.</p>",
        "id": 260716355,
        "sender_full_name": "Julian Berman",
        "timestamp": 1636404348
    },
    {
        "content": "<p><code>norm_num</code> does not support complex number arithmetic. It supports the operations <code>+</code> <code>-</code> <code>*</code> etc over <code>ℂ</code>, but <code>I</code> is not supported so you can prove <code>(2 + 2 : ℂ) = 4</code> but not <code>(2 + I) * I = -1 + 2 * I</code></p>",
        "id": 260722145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636407295
    },
    {
        "content": "<p>One general way to handle it would be to use the grobner tactic (that doesn't exist) to prove ring equalities in C given the equation <code>I * I + 1 = 0</code></p>",
        "id": 260722304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636407376
    },
    {
        "content": "<p>Got it, so it's indeed not in the intended scope sounds like, thanks. Would a docstring fix be welcome then, I don't think I was the only one slightly confused by the way it's phrased now. Maybe even just <code>\"Supports the operations + - * / ^ and % over numerical types such as ℕ, ℤ, ℚ, ℝ, and partially over ℂ\"</code>?</p>",
        "id": 260722753,
        "sender_full_name": "Julian Berman",
        "timestamp": 1636407610
    },
    {
        "content": "<p>Adding new types to <code>norm_num</code> can be done, but it is tricky if the set of normal forms needs to be expanded. Most of it assumes that normal forms are numerals with maybe a minus sign (for integers) or fraction (for rationals), over any type (i.e. <code>3 / 5 : ℝ</code> is a normal form but not <code>pi : ℝ</code>). Adding complex numbers would require some specific recognizable normal form that matches the existing one for real numbers</p>",
        "id": 260722811,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636407643
    },
    {
        "content": "<p>Ah interesting ok, so my wording up top isn't appropriate then either -- it's about whether it's a numeric literal moreso than what type it is?</p>",
        "id": 260722939,
        "sender_full_name": "Julian Berman",
        "timestamp": 1636407716
    },
    {
        "content": "<p>yes</p>",
        "id": 260723000,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636407731
    },
    {
        "content": "<p>you can do \"rational number arithmetic\" proofs over any field</p>",
        "id": 260723030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636407752
    },
    {
        "content": "<p><em>nod</em> thanks I think that's making some more sense now -- Though, just because I thought of this playfully yesterday when playing around and you mentioned it -- by \"recognizable normal form\" -- does that have to be across all types? E.g. if you encode complexes by say concatenating the digits of the real and imaginary parts with some numeric separator like <code>00</code> does that \"work\" (preserve the type info) or does that mean that now norm_num will think (1 + 2i) = (1002 : R)?</p>",
        "id": 260723530,
        "sender_full_name": "Julian Berman",
        "timestamp": 1636408046
    },
    {
        "content": "<p>For complexes you can just use <code>ext</code> then <code>simp</code> then <code>norm_num</code></p>",
        "id": 260723662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636408118
    },
    {
        "content": "<p>Right I know that works (it was what Shing or Bhavik told me to use instead of <code>ring + simp</code>) I was mostly asking to see whether <code>norm_num</code> <em>should</em> have worked alone, which the docstring to us I think seemed like it should have.</p>",
        "id": 260723766,
        "sender_full_name": "Julian Berman",
        "timestamp": 1636408202
    },
    {
        "content": "<p>But I think I follow how to read it now at least.</p>",
        "id": 260723806,
        "sender_full_name": "Julian Berman",
        "timestamp": 1636408213
    },
    {
        "content": "<p>I'm not sure I understand your suggestion. The normal form has to be sound, at least - any expression that can be normalized should normalize to a normal form that is provably equal to the original. Your 1002 example doesn't satisfy that</p>",
        "id": 260723876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636408272
    },
    {
        "content": "<p>One example of a normal form is <code>&lt;numeral&gt; + &lt;numeral&gt; * I</code>, but an issue with this representation is that it includes operations that norm_num understands, so it will attempt to add and multiply the components, resulting in added busywork</p>",
        "id": 260724029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636408348
    },
    {
        "content": "<p>also you might want to support other kinds of square roots as well, not just <code>I</code></p>",
        "id": 260724126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636408403
    },
    {
        "content": "<p>but the normal form for quadratic algebraics gets a lot more complicated</p>",
        "id": 260724160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636408426
    },
    {
        "content": "<p>I see. My misunderstandingwas that all norm_num needed was some invertible encoding from numerals of C to R or something but never mind I see that's nonsense and it needs more than that.</p>",
        "id": 260724269,
        "sender_full_name": "Julian Berman",
        "timestamp": 1636408479
    },
    {
        "content": "<p>Thanks for explaining I think I follow a bit more at least.</p>",
        "id": 260724325,
        "sender_full_name": "Julian Berman",
        "timestamp": 1636408516
    },
    {
        "content": "<p>Is there a github issue that describes this missing grobner basis tactic that keeps being mentioned? Does coq or similar have such a tactic?</p>",
        "id": 260729890,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636411502
    },
    {
        "content": "<p>Not that I know of. The best reference is probably the conversation at <a href=\"#narrow/stream/116395-maths/topic/groebner.20basis.20algorithm\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/groebner.20basis.20algorithm</a></p>",
        "id": 260754743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636434872
    }
]