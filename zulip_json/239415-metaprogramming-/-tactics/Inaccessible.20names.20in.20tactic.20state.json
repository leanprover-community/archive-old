[
    {
        "content": "<p>The tactic state at the comment in this code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">what</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"o\">(⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"k\">do</span> <span class=\"o\">{</span>\n    <span class=\"c1\">-- if I put my cursor at the start of this line, I can see `_x` and `_p`.</span>\n    <span class=\"c1\">-- why can't I refer to these except with `‹›`? Which one is being found?</span>\n    <span class=\"n\">tactic.trace</span> <span class=\"n\">format</span><span class=\"bp\">!</span><span class=\"s2\">\"where did this come from: {‹ℕ × ℕ›}\"</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">tactic.skip</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"n\">what</span>\n</code></pre></div>\n<p>is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">what</span><span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"n\">_p</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">_do_match</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"n\">_x</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span>\n</code></pre></div>\n<p>What are <code>_x</code> and <code>_p</code>, and is there any way for me to access them?</p>",
        "id": 239267789,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621349786
    },
    {
        "content": "<p>These are artifacts of the equation compiler like the <code>_do_match</code>. I'm surprised you can even access them with the French quotes. You definitely shouldn't use them; conceptually there are no variables <code>_x</code> and <code>_p</code> in scope at that program point (or anywhere).</p>",
        "id": 239269533,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1621350336
    },
    {
        "content": "<p>Well, conceptually there <em>is</em> an \"object for which the match failed\" which is not otherwise accessible with that <code>|</code> syntax</p>",
        "id": 239270254,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621350578
    },
    {
        "content": "<p>Looking at the output of <code>#print</code>, it looks like <code>_x</code> and <code>_p</code> are one and the same</p>",
        "id": 239270753,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621350746
    },
    {
        "content": "<p>Right. If you need the matched object, I guess your least inelegant bet is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">x</span> <span class=\"bp\">&lt;-</span> <span class=\"bp\">...</span><span class=\"o\">,</span>\n<span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">pure</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">fail</span><span class=\"bp\">!</span> <span class=\"s2\">\"Matched object: {x}\"</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>Or of course a good old <code>match</code>.</p>",
        "id": 239273210,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1621351598
    }
]