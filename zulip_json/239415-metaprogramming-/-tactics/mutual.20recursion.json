[
    {
        "content": "<p><code>meta</code> functions still can't be mutually recursive unless they're defined in a common <code>mutual def</code>, right? Any neat tricks to get around this if the definitions might be very long?</p>",
        "id": 213710772,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603034089
    },
    {
        "content": "<p>One thing I was considering is basically an explicit translation to using <code>fix</code>, with a structure that holds the mutually recursive functions passed as an argument to each function</p>",
        "id": 213710868,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603034184
    },
    {
        "content": "<p>and then tying the knot at the end</p>",
        "id": 213710874,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603034192
    },
    {
        "content": "<p>This would be in the tactic monad. So another option could be to put the functions to be called recursively in a monad transformer or in global state or something like that. But none of these options sound especially appealing...</p>",
        "id": 213711201,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603034668
    },
    {
        "content": "<p>If you can limit the number of functions that need to be called, you can pass them as an argument to all the helper functions, and then eventually you get to the main function and use an unguarded recursion there</p>",
        "id": 213712798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603037013
    },
    {
        "content": "<p>By \"limit the number\" you mean, say, I have just three functions such that if I remove calls into these functions, the call graph becomes acyclic?</p>",
        "id": 213712868,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603037094
    },
    {
        "content": "<p>yes</p>",
        "id": 213712872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603037099
    },
    {
        "content": "<p>Right, that's basically what I'm considering with the structure of functions then</p>",
        "id": 213712879,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603037112
    },
    {
        "content": "<p>I just have a gut feeling that, say, a 500-line <code>mutual def</code> is a bad idea, even if I don't know exactly why...</p>",
        "id": 213712900,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603037155
    },
    {
        "content": "<p>I have the same feeling. It compiles slower and you can't put docs on it properly</p>",
        "id": 213712972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603037260
    },
    {
        "content": "<p>A hidden bonus of the \"pass a structure of functions to everything for recursive calls\" is that it makes it easy to parameterize the tactics on other things at the same time</p>",
        "id": 213716294,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603041913
    }
]