[
    {
        "content": "<p>I've been trying to understand <a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book/blob/7e4e9a102ba26d5529bea745ddfef29268f61246/lean/main/metam.lean#L204\">this example</a> from the Lean 4 metaprogramming book. The fact that WHNF has different rules for partial applications <a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book/blob/7e4e9a102ba26d5529bea745ddfef29268f61246/lean/main/metam.lean#L281\">when a function is inlined</a> makes me suspect that what's really going on here is that WHNF doesn't reduce partially applied <em>constants</em>, rather than functions. However, this seems to be a counterexample:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean.Elab.Term</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">whnf'</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">md</span> <span class=\"o\">:=</span> <span class=\"n\">TransparencyMode.default</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">TermElabM</span> <span class=\"n\">Format</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">elabTermAndSynthesize</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">none</span>\n  <span class=\"n\">ppExpr</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">whnf</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myadd</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Nat.zero</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">Nat.add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">whnf'</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">myadd</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"c1\">-- ▶ 231:1-231:6: information:</span>\n<span class=\"c1\">-- fun x =&gt;</span>\n<span class=\"c1\">--   match 1, x with</span>\n<span class=\"c1\">--   | a, Nat.zero =&gt; a</span>\n<span class=\"c1\">--   | a, Nat.succ b =&gt; Nat.succ (Nat.add a b)</span>\n<span class=\"k\">#eval</span> <span class=\"n\">whnf'</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Nat.add</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Nat.add 1</span>\n</code></pre></div>\n<p>What explains the different behavior here? Is the function being inlined behind the scenes? Or is something else going on? Thanks. (and I'll be happy to update the book with any additional details)</p>",
        "id": 286114797,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1655231701
    },
    {
        "content": "<p>I'm not sure what you mean by \"different rules for partial applications\"?  The line you link to shows that WHNF does β-reduction.</p>",
        "id": 286116411,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1655232485
    },
    {
        "content": "<p>In your example, the <code>myadd</code> function is defined the same way as <code>Nat.add</code> as far as I can tell.  However <code>Nat.add</code> is special-cased (by name) in both the kernel and MetaM to use GMP.</p>",
        "id": 286116567,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1655232556
    },
    {
        "content": "<p>So, WHNF always β-reduces regardless of whether a function is behind a constant and appears in a partial application? And <code>Nat.add</code> is a very special case that doesn't? I just tried <code>#eval whnf' ``(List.append [1])</code> which does reduce, so yeah this does seem to be the case. The line <a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book/blob/7e4e9a102ba26d5529bea745ddfef29268f61246/lean/main/metam.lean#L204\">\"Functions applied to too few arguments are in WHNF\"</a> seems to suggest that something more general is going on here, though I can't put my finger on it.</p>",
        "id": 286118477,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1655233506
    },
    {
        "content": "<p>Oh, that line seems to be wrong.  EDIT: and Nat.add is a bad running example for WHNF, since it is special-cased everywhere.</p>",
        "id": 286118653,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1655233580
    },
    {
        "content": "<p>β-reduction is when you syntactically have an application of a lambda.  It doesn't matter what's in the lambda.  But it literally needs to be a lambda, not a constant or free variable that unfolds to a lambda.</p>",
        "id": 286118779,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1655233652
    }
]