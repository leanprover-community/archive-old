[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/issues/5664\">#5664</a>, we have a faster <code>nat.bin_cast</code> that can be used instead of <code>nat.cast</code>. However, they are provably equal only if the <code>α : Type*</code> is an <code>add_monoid</code> (where the <code>has_zero</code> and <code>has_one</code> make sense). Currently, there are such types -- <code>fin n</code> is not instanced as an <code>add_monoid</code> (although <a href=\"https://github.com/leanprover-community/mathlib/issues/5010\">#5010</a> should help with that). I want to find out if there are other types where we have <code>has_zero</code>, <code>has_one</code>, and <code>has_add</code>, but are _not_ <code>add_monoid</code>.</p>",
        "id": 222740694,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610641100
    },
    {
        "content": "<p>What would be the best meta way of fetching these? How does one \"import all\"? Then I could try to write meta code that fetches types that satisfy any of the four classes, and find the intersection that I am interested in.</p>",
        "id": 222740989,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610641166
    },
    {
        "content": "<p>If you're trying to add things in <code>fin n</code>, you're doing it wrong, aren't you? If you're adding you should be using <code>zmod n</code>. I am slightly surprised there is an addition defined on <code>fin n</code>. This might be a historical artefact?</p>",
        "id": 222741305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610641298
    },
    {
        "content": "<p>You can't use <code>bit0</code> and <code>bit1</code> without <code>+</code></p>",
        "id": 222741406,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610641328
    },
    {
        "content": "<p>So as much as you want to avoid <code>+</code> on <code>fin n</code>, you need it to get nice <code>5 : fin 7</code>.</p>",
        "id": 222741449,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610641347
    },
    {
        "content": "<p><code>fin n</code> is supposed to be a canonical model of an abstract totally ordered set of size n. I don't want <code>bit0</code> on it either!</p>",
        "id": 222741594,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610641413
    },
    {
        "content": "<p>As you can see in the PR, I do not provide <code>monoid</code> even though it is provable. I do give <code>(*)</code> simp lemmas though because even though one <em>shouldn't</em> multiply in <code>fin n</code>, if you somehow get stuck in that situation, then something would be able to help.</p>",
        "id": 222741670,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610641443
    },
    {
        "content": "<p>You also get rather un-nice <code>12 : fin 7</code> and this is what I'm objecting to.</p>",
        "id": 222741700,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610641450
    },
    {
        "content": "<p>If you want to treat these things as numbers you should be using <code>zmod 7</code></p>",
        "id": 222741800,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610641493
    },
    {
        "content": "<p>That's my personal mental model of <code>fin n</code>, at any rate.</p>",
        "id": 222741876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610641527
    },
    {
        "content": "<p>The elements of <code>fin 7</code> aren't <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mn>6</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{0,1,2,\\ldots,6\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">6</span><span class=\"mclose\">}</span></span></span></span>, they're <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><msub><mi>a</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>6</mn></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{a_0,a_1,\\ldots,a_6\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span></p>",
        "id": 222741996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610641573
    },
    {
        "content": "<p>How do you distinguish <code>fin.succ</code> from <code>fin.cast_succ</code> then?</p>",
        "id": 222742091,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610641623
    },
    {
        "content": "<p>By referring to the total order, and saying \"new bot\" or \"new top\"?</p>",
        "id": 222742156,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610641651
    },
    {
        "content": "<p>How would one phrase, \"the minor after removing the 3rd row and 4th column\" if not making reference to <code>2</code> and <code>3</code>? Perhaps it'd be better if they were enumerated starting from <code>1</code> like ordinals?</p>",
        "id": 222742491,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610641789
    },
    {
        "content": "<p>If we wanted to talk about S_n, one could imagine notation like <code>(0 1 2 3)</code> or <code>(1 2 3 4)</code> whichever you prefer. And while mathematically, the addition isn't relevant, it is what makes the notation work for how Lean numerals are, as far as I understand.</p>",
        "id": 222742838,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610641910
    },
    {
        "content": "<p>I hope it doesn't seem like I'm being difficult -- I'm truly trying to understand the limitations of formalization.</p>",
        "id": 222743281,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610642085
    },
    {
        "content": "<p>While it is unfortunate that <code>12 : fin 7</code> is possible, is that different than <code>(6 : ℚ) / 4</code> being equal to <code>(3 : ℚ) / 2</code>? As soon as we start having some sort of numerical notation for things that aren't exactly <code>nat</code>, we'll run into the issue of noncanonical representations.</p>",
        "id": 222743639,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610642238
    },
    {
        "content": "<p>No, I'm just presenting some other point of view. We could have a map <code>zmod n -&gt; fin n</code>. This is what my mental model is, I'm not saying it's what we have to do! I think it is <em>deeply</em> unfortunate that <code>12 : fin 7</code> works, because nobody can guess what that means.</p>",
        "id": 222744206,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610642450
    },
    {
        "content": "<p>It's all about junk values I guess.</p>",
        "id": 222744283,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610642488
    },
    {
        "content": "<p>Similar to your favorite <code>1 / 0</code> example.</p>",
        "id": 222744440,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610642535
    },
    {
        "content": "<p>Well I hope determining the meta way of identifying such non-add_monoid types will help understand if there are any other places where there are numerals but they don't behave exactly right.</p>",
        "id": 222744677,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610642625
    },
    {
        "content": "<p>I always thought addition / succ <code>fin n</code> should be endpoint absorbing, like <code>(n - 1 : fin n) + 1 = n - 1</code>, that seems quite handy in some contexts where you are indexing things, succ / add would be more of an \"advance as far as possible\" operation. People can always use zmod if they want a cyclic group, but thats quite a radical change <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 222744791,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1610642666
    },
    {
        "content": "<p>That makes sense too, and then you have a subtraction which is dual.</p>",
        "id": 222745082,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610642777
    },
    {
        "content": "<p>But right now <code>succ</code> is defined as the embedding into the successor type, not within the type.</p>",
        "id": 222745147,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610642803
    },
    {
        "content": "<p>While <code>+ 1</code> is within the type.</p>",
        "id": 222745162,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610642808
    },
    {
        "content": "<p>I'd be totally cool with that redefinition -- probably a large undertaking though!</p>",
        "id": 222745447,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610642916
    },
    {
        "content": "<p>(Even if addition was defined in that way, <code>12 : fin 7</code> would still have a meaning, it would just be different than before.)</p>",
        "id": 222746806,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610643505
    },
    {
        "content": "<p>My impression is that there is some huge mess with cast and cast_succ right now. I would set it up in the following way. In the theory of simplicial sets there are maps from <code>fin n</code> to <code>fin (n +1)</code> called \"skip t\" and maps from <code>fin (n + 1)</code> to <code>fin n</code> called \"collapse t and t+1\". The combinatorics of the way these maps interact is very well-understood and these are the maps which should be used everywhere, plus some nice simp lemmas to deal with them.</p>",
        "id": 222751412,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610645218
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Simplicial_set#Face_and_degeneracy_maps\">https://en.wikipedia.org/wiki/Simplicial_set#Face_and_degeneracy_maps</a></p>",
        "id": 222751721,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610645330
    },
    {
        "content": "<p>The sigmas and the deltas are the maps you want, the lemmas are all there. <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> or <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  did you ever make these maps in Lean?</p>",
        "id": 222751967,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610645414
    },
    {
        "content": "<p>yup</p>",
        "id": 222752271,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610645538
    },
    {
        "content": "<p>there is a branch <code>sset</code> that has this stuff</p>",
        "id": 222752300,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610645548
    },
    {
        "content": "<p>Stuff like \"the minor after removing the 3rd row and 4th column\" is probably not something you never actually say. You might have <code>i : fin n</code> and <code>j : fin m</code> and then you can remove the i'th row and the j'th column, this is fine. I am just explicitly suggesting that using numerals to talk about <code>fin n</code> should not be necessary. But of course my use cases for <code>fin n</code> might be very different from yours.</p>",
        "id": 222752383,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610645579
    },
    {
        "content": "<p>You're right that one might not need to use numerals for <code>fin n</code>. But they are defined at the moment, and without the PR I cited above, they are not <code>add_monoid</code>. However, they do have <code>0</code>, <code>1</code>, and <code>+</code> which allows them to be notated by numerals. Currently, one cannot prove that <code>nat.cast</code> and <code>nat.bin_cast</code> will give the same <code>fin n</code>.</p>\n<p>I'm asking, what's the meta way to find the _other_ types where this lack of correspondence appears? Those might be other types that you could say shouldn't even have numerals work for them, but they do currently.</p>",
        "id": 222752912,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610645781
    },
    {
        "content": "<p>yeah, sorry, I should let you get back to the point :-)</p>",
        "id": 222753575,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610646103
    },
    {
        "content": "<p>Answering Kevin's earlier question, the skip and collapse maps are <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.succ_above\">docs#fin.succ_above</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.pred_above\">docs#fin.pred_above</a> I think</p>",
        "id": 222770074,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610652661
    },
    {
        "content": "<p><del>That's not exactly right about <code>fin.pred_above</code></del></p>",
        "id": 222770481,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610652801
    }
]