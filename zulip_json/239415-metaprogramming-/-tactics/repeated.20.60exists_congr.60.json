[
    {
        "content": "<p>I'm interested in finally learning how to write tactics, and I think I've found a beginner project to work on.  It seems like it should be possible to write a tactic that repeatedly applies <code>exists_congr</code> and <code>intro</code> to turn a goal of the form </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">...</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">...</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">...</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>into a goal of the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">...</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">...</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>This could remove the need for specialised lemmas like <code>exists₂_congr</code>, <code>exists₃_congr</code> etc. introduced in <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>'s <a href=\"https://github.com/leanprover-community/mathlib/pull/11490\">#11490</a>.</p>\n<p>I'm just posting this to check whether this seems like a worthwhile thing to try (at least, worth doing as a learning exercise).</p>\n<p>(It's quite likely that everyone reading this is itching to reply with the trivial one-liner solution.  Thanks in advance for letting me work it out for myself!  <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> )</p>",
        "id": 272600913,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1645373303
    },
    {
        "content": "<p>Lemmas are still useful in term mode! It certainly seems useful as a learning exercise, especially getting it to name things nicely</p>",
        "id": 272601399,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1645373863
    },
    {
        "content": "<p>What does <code>congr</code> do with this currently?</p>",
        "id": 272601590,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645374054
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> <code>congr</code> fails, but <code>congr'</code> turns it into an equality of the underlying lambdas:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">congr'</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ (λ (n : ℕ), ∃ (m : ℕ), P n m) = λ (a : ℕ), ∃ (b : ℕ), Q a b</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272604651,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645377359
    },
    {
        "content": "<p>This reminds me of an earlier idea (in a thread with you and Kevin) to have a more powerful <code>congr</code> that could take a <code>with</code> clause and introduce arguments into the context.</p>",
        "id": 272604706,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645377395
    },
    {
        "content": "<p>It would be nice if it could also introduce additional hypotheses that <code>congr</code> lemmas can have, like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.map_congr\">docs#list.map_congr</a></p>",
        "id": 272604731,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645377438
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#congr'\">tactic#congr'</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#rcongr\">tactic#rcongr</a> can do some parts of this</p>",
        "id": 272604745,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1645377459
    },
    {
        "content": "<p><code>congr' with n m</code> seems to fail to do anything in this example, but <code>rcongr n m</code> works.</p>",
        "id": 272604915,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645377646
    },
    {
        "content": "<p>That page doesn't contain <code>rcongr</code>...</p>",
        "id": 272604953,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645377719
    },
    {
        "content": "<p>oh it sort of does, but hidden behind a dropdown menu</p>",
        "id": 272605023,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645377771
    },
    {
        "content": "<p>i have never seen <code>rcongr</code> in my life, what does it od?</p>",
        "id": 272605065,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645377842
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/congr.html#tactic.interactive.rcongr\">https://leanprover-community.github.io/mathlib_docs/tactic/congr.html#tactic.interactive.rcongr</a></p>",
        "id": 272605122,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645377883
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> How did you come across <code>rcongr</code>? There are only three uses of it in all of mathlib, and it's almost not in the documentation</p>",
        "id": 272605126,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645377893
    },
    {
        "content": "<p>I wonder how many undocumented tactics there are. Is it safe to say that all interactive tactics are in <code>tactic.interactive</code> and return <code>tactic unit</code>?</p>",
        "id": 272605281,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645378074
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/repeated.20.60exists_congr.60/near/272605126\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> How did you come across <code>rcongr</code>? There are only three uses of it in all of mathlib, and it's almost not in the documentation</p>\n</blockquote>\n<p>From reading the documentation of <code>congr</code>, since I wanted to remind myself of the <code>congr'</code> syntax</p>",
        "id": 272610233,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1645383983
    }
]