[
    {
        "content": "<p>Hi, I seem to be unable to find this in the meta API:<br>\nGiven an <code>expr</code> <code>e</code> and an <code>expr</code> <code>M</code> potentially containing metavariables, what is the library function which succeeds iff <code>e</code> and <code>M</code> unify under a suitable metavariable assignment? It does not seem to be <code>tactic.unify</code>, which fails e.g. on <code>list nat</code> and <code>list A</code>, <code>A</code> being a metavariable of type <code>Type</code>.<br>\nOr is this not what metavariables are made for / the elaborator is accessed differently / ... ?<br>\n(I am still an absolute metaprogramming newbie)</p>",
        "id": 281844668,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1652197933
    },
    {
        "content": "<p>I'm also a newbie, so I do not really know an answer to your question.  However, the code below did what I wanted and \"unified metavariables\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"sd\">/-- A `tactic bool` computing whether the user-input `e` unifies with `e'`. -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">expr.unify_with</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">e'</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"n\">succeeds</span> <span class=\"bp\">$</span> <span class=\"n\">unify</span> <span class=\"n\">e</span> <span class=\"n\">e'</span>\n</code></pre></div>",
        "id": 281845673,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652198296
    },
    {
        "content": "<p>This allowed me to pass <code>_ * _</code> for instance and it unified with <code>3 * 4</code> and filled in the <code>_</code> with a term of type <code>nat</code>.</p>",
        "id": 281845815,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652198352
    },
    {
        "content": "<p>However, in my use-case, the metavariables were explicit <code>_</code>, not some <code>expr</code> whose type I did not know.  If this even makes sense...</p>",
        "id": 281845902,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652198393
    },
    {
        "content": "<p>Is <code>_</code> the same thing as an <code>expr.mvar</code>?</p>",
        "id": 281846261,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1652198499
    },
    {
        "content": "<p><code>_</code> will put a meta variable at the spot it's used yes.</p>",
        "id": 281846427,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1652198544
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">mk_mvar'</span> <span class=\"o\">(</span><span class=\"n\">pp_name</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n<span class=\"n\">uniq_name</span> <span class=\"bp\">←</span> <span class=\"n\">mk_fresh_name</span><span class=\"o\">,</span>\n<span class=\"n\">return</span> <span class=\"bp\">$</span> <span class=\"n\">mvar</span> <span class=\"n\">uniq_name</span> <span class=\"n\">pp_name</span> <span class=\"n\">type</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">mwe</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">m</span> <span class=\"bp\">←</span> <span class=\"n\">mk_mvar'</span> <span class=\"bp\">`</span><span class=\"n\">M</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"o\">),</span>\n  <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">to_raw_fmt</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">to_raw_fmt</span> <span class=\"n\">m</span><span class=\"o\">),</span>\n  <span class=\"n\">unify</span> <span class=\"n\">n</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"o\">),</span>\n  <span class=\"n\">unify</span> <span class=\"n\">m</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 281846805,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1652198679
    },
    {
        "content": "<p>With output</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">mvar</span> <span class=\"n\">_mlocal._fresh.2495.965</span> <span class=\"n\">_mlocal._fresh.2495.965</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">2</span> <span class=\"o\">[]))</span>\n<span class=\"o\">(</span><span class=\"n\">mvar</span> <span class=\"n\">_fresh.2495.962</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">sort</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>and error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unify</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">and</span>\n  <span class=\"n\">ℕ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>",
        "id": 281846956,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1652198743
    },
    {
        "content": "<p>Why is the type of the <code>_</code> metavariable <code>(const 2 [])</code>?</p>",
        "id": 281847446,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1652198924
    },
    {
        "content": "<p>If I understand correctly, the first <code>unify</code> succeeds: i.e. this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">mwe</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">m</span> <span class=\"bp\">←</span> <span class=\"n\">mk_mvar'</span> <span class=\"bp\">`</span><span class=\"n\">M</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"o\">),</span>\n  <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">tt</span> <span class=\"n\">ff</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">to_raw_fmt</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">to_raw_fmt</span> <span class=\"n\">m</span><span class=\"o\">),</span>\n  <span class=\"n\">unify</span> <span class=\"n\">n</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 281847710,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652199014
    },
    {
        "content": "<p>Yes, the <code>_</code> metavariable unifies, but my handcrafted one doesn't<br>\nThe difference is the <code>type</code> of the <code>expr.mvar</code><br>\nBut I do not see why it should be <code>(const 2 [])</code>... ?!</p>",
        "id": 281847867,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1652199087
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span>  maybe? :)</p>",
        "id": 281847908,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1652199109
    },
    {
        "content": "<p>Sorry, I am not sure that I can be of further/any help!  I think that the <code>_</code> is important and should be literally present, but I do not know. <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 281848047,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652199162
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/unify/near/281848047\">said</a>:</p>\n<blockquote>\n<p>Sorry, I am not sure that I can be of further/any help!  I think that the <code>_</code> is important and should be literally present, but I do not know. <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>\n</blockquote>\n<p>Yes, thank you a lot for pointing toward the underscore. That will work and I hope the pros will tell me what is behind the mysterious 2 ;)</p>",
        "id": 281848198,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1652199237
    },
    {
        "content": "<p>Exprs representing mvars and hypotheses often contain nonsensical types like these. <code>infer_type</code> will give you the right type. <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 281848902,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1652199514
    },
    {
        "content": "<p>\"/- [WARNING] Do not trust the types for <code>mvar</code> and <code>local_const</code>,<br>\nthey are sometimes dummy values. Use <code>tactic.infer_type</code> instead. -/\" I see</p>",
        "id": 281848943,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1652199531
    },
    {
        "content": "<p>Yep yep. (Fixed in Lean 4 thankfully.)</p>",
        "id": 281849037,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1652199575
    },
    {
        "content": "<p>So how would I write this instead?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">mk_mvar_pis</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pi</span> <span class=\"n\">n</span> <span class=\"n\">_</span> <span class=\"n\">d</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">mk_mvar'</span> <span class=\"n\">n</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">ps</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">mk_mvar_pis</span> <span class=\"o\">(</span><span class=\"n\">instantiate_var</span> <span class=\"n\">b</span> <span class=\"n\">p</span><span class=\"o\">),</span>\n  <span class=\"n\">return</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"o\">::</span> <span class=\"n\">ps</span><span class=\"o\">),</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"o\">([],</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 281849051,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1652199582
    },
    {
        "content": "<p>(taken from <code>mk_local_pis</code>)</p>",
        "id": 281849069,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1652199596
    },
    {
        "content": "<p>I would like to retrieve the body of a (nested) pi, but with something unifiable instead of <code>var 0</code> etc inside</p>",
        "id": 281849204,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1652199648
    },
    {
        "content": "<p>I wrote a comprehensive library for this sort of task a while ago. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.open_pis_metas\">docs#tactic.open_pis_metas</a> should be what you're looking for.</p>",
        "id": 281849700,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1652199836
    },
    {
        "content": "<p>wow great, exactly what I need!</p>",
        "id": 281850107,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1652200008
    },
    {
        "content": "<p>I didn't find it because I was looking for <code>mvars</code>, not <code>metas</code>...</p>",
        "id": 281850150,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1652200028
    },
    {
        "content": "<p>and I am learning from your code that one should not create <code>mvars</code> by the <code>expr.mvar</code> constructor but by <code>mk_meta_var</code>, right?</p>",
        "id": 281850358,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1652200102
    },
    {
        "content": "<p>If I used it there, probably. ;) I don't recall the details.</p>",
        "id": 281850749,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1652200273
    },
    {
        "content": "<p>Ah yeah if you use the <code>expr</code> constructor directly, you create a malformed expression. Metavariables which are referred to in an expression must be registered in the environment and <code>mk_meta_var</code> does exactly that.</p>",
        "id": 281851068,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1652200425
    },
    {
        "content": "<p>Just as a learning experience for myself^^ <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> </p>\n<p>i put all of my (admittedly rather little) knowledge of the Lean 4 Meta API into this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">u</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.mkFreshLevelMVar</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"n\">mkSort</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">listA</span> <span class=\"o\">:=</span> <span class=\"n\">mkApp</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">`</span><span class=\"n\">List</span> <span class=\"o\">[</span><span class=\"n\">u</span><span class=\"o\">])</span> <span class=\"n\">a</span>\n  <span class=\"k\">let</span> <span class=\"n\">listNat</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.mkAppM</span> <span class=\"bp\">`</span><span class=\"n\">List</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mkConst</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span><span class=\"o\">]</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{listA}\"</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{listNat}\"</span>\n  <span class=\"k\">if</span> <span class=\"bp\">←</span><span class=\"n\">Meta.isDefEq</span> <span class=\"n\">listA</span> <span class=\"n\">listNat</span> <span class=\"k\">then</span>\n    <span class=\"n\">IO.println</span> <span class=\"s2\">\"wooo\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">newlistA</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.instantiateMVars</span> <span class=\"n\">listA</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{newlistA}\"</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">let</span> <span class=\"n\">newlistA</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.instantiateMVars</span> <span class=\"n\">listA</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{newlistA}\"</span>\n    <span class=\"n\">IO.println</span> <span class=\"s2\">\"booo\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>but I get a boo and no meta variables are instantiated, why's that the case? The types it prints are</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">List.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">_uniq.1</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">_uniq.2</span>\n<span class=\"n\">List.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>those look to me like they should be solvable no?</p>",
        "id": 281853757,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1652201629
    },
    {
        "content": "<p>Took me a bit to figure out as well. It's a level issue: <code>mkApp (mkConst `List [u]) a</code> is not type-correct. <code>List.{u}</code> has type <code>Type u -&gt; Type u</code>, but <code>a</code> has type <code>Sort u</code>. Complete fix:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">u</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshLevelMVar</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"n\">mkSort</span> <span class=\"o\">(</span><span class=\"n\">mkLevelSucc</span> <span class=\"n\">u</span><span class=\"o\">))</span>\n  <span class=\"k\">let</span> <span class=\"n\">listA</span> <span class=\"o\">:=</span> <span class=\"n\">mkApp</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">List</span> <span class=\"o\">[</span><span class=\"n\">levelZero</span><span class=\"o\">])</span> <span class=\"n\">a</span>\n  <span class=\"k\">let</span> <span class=\"n\">listNat</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">List</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Nat</span><span class=\"o\">]</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{listA}\"</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{listNat}\"</span>\n  <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.isDefEq</span> <span class=\"n\">listA</span> <span class=\"n\">listNat</span> <span class=\"k\">then</span>\n    <span class=\"n\">IO.println</span> <span class=\"s2\">\"wooo\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">newlistA</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.instantiateMVars</span> <span class=\"n\">listA</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{newlistA}\"</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">let</span> <span class=\"n\">newlistA</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.instantiateMVars</span> <span class=\"n\">listA</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{newlistA}\"</span>\n    <span class=\"n\">IO.println</span> <span class=\"s2\">\"booo\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>Other comments which are hopefully helpful:</p>\n<ul>\n<li>Use <code>``List</code> instead of <code>`List</code> where possible.</li>\n<li>I usually use <code>trace[debug]</code> for printf-style debugging.</li>\n</ul>",
        "id": 281868596,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1652208323
    }
]