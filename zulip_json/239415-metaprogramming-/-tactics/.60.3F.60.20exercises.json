[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Achievement.3A.20multiply.20convergent.20sequences/near/198830593\">said</a>:</p>\n<blockquote>\n<p>An <code>assumption?</code> would also be cool (producing a <code>Try this: exact h</code>)</p>\n</blockquote>",
        "id": 198831415,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590533617
    },
    {
        "content": "<p>probably anyone who opens the source code for both <code>assumption</code> and something that provides a <code>?</code> (e.g. <code>tidy</code> though there's probably a simpler example) could either figure out how to make this work or would come away with a concrete thing they're confused about in <code>meta</code> land</p>",
        "id": 198831812,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590533769
    },
    {
        "content": "<p><code>assumption</code> is already used as the example tactic in many tactic tutorials</p>",
        "id": 198832388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590534145
    },
    {
        "content": "<p>There are only two things to making <code>?</code> work: parsing <code>?</code> and printing the words <code>Try this:</code> followed by the desired replacement</p>",
        "id": 198832438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590534203
    },
    {
        "content": "<p>yep, I'm looking at the <code>tidy</code> source and I think i understand how it does both of those things</p>",
        "id": 198832566,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590534297
    },
    {
        "content": "<p>This is an assumption tactic that I think always prints out <code>try exact h</code> when it succeeds. Still trying to understand the question mark. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">my_assumption</span>\n\n<span class=\"n\">meta</span> <span class=\"kn\">structure</span> <span class=\"n\">cfg</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">trace_result</span> <span class=\"o\">:</span> <span class=\"n\">bool</span>            <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">trace_result_prefix</span> <span class=\"o\">:</span> <span class=\"n\">string</span>   <span class=\"o\">:=</span> <span class=\"s2\">&quot;Try this: exact &quot;</span><span class=\"o\">)</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">find_matching_type</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>         <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">failed</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"bp\">::</span> <span class=\"n\">Hs</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"n\">do</span> <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">infer_type</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n                   <span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">unify</span> <span class=\"n\">e</span> <span class=\"n\">t</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">return</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">find_matching_type</span> <span class=\"n\">Hs</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">my_assumption_aux</span> <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">my_assumption</span><span class=\"bp\">.</span><span class=\"n\">cfg</span> <span class=\"o\">:=</span> <span class=\"o\">{})</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"o\">{</span> <span class=\"n\">ctx</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">local_context</span><span class=\"o\">,</span>\n     <span class=\"n\">t</span>   <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">target</span><span class=\"o\">,</span>\n     <span class=\"n\">hyp</span> <span class=\"err\">←</span> <span class=\"n\">find_matching_type</span> <span class=\"n\">t</span> <span class=\"n\">ctx</span><span class=\"o\">,</span>\n     <span class=\"n\">when</span> <span class=\"o\">(</span><span class=\"n\">cfg</span><span class=\"bp\">.</span><span class=\"n\">trace_result</span><span class=\"o\">)</span> <span class=\"err\">$</span>\n      <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">cfg</span><span class=\"bp\">.</span><span class=\"n\">trace_result_prefix</span> <span class=\"bp\">++</span> <span class=\"n\">to_string</span> <span class=\"n\">hyp</span><span class=\"o\">),</span>\n     <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">exact</span> <span class=\"n\">hyp</span> <span class=\"o\">}</span>\n<span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">fail</span> <span class=\"s2\">&quot;my_assumption tactic failed&quot;</span>\n</code></pre></div>",
        "id": 198834830,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590536253
    },
    {
        "content": "<p>You need to be in the <code>tactic.interactive</code> namespace to make an interactive tactic, and arguments to the tactic should have the form <code>parse p</code> where <code>p</code> is an appropriate parser</p>",
        "id": 198834922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590536333
    },
    {
        "content": "<p>You should also use <code>pp hyp</code> instead of <code>to_string hyp</code> because it can print expressions better (although possibly in this case there won't be much difference because the expression is a local constant)</p>",
        "id": 198835043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590536413
    },
    {
        "content": "<p>I tried this after the above</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">my_assumption</span> <span class=\"o\">(</span><span class=\"n\">trace</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"err\">$</span> <span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;?&quot;</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">cfg</span> <span class=\"o\">:=</span> <span class=\"o\">{})</span> <span class=\"o\">:=</span>\n<span class=\"n\">my_assumption_aux</span> <span class=\"o\">{</span> <span class=\"n\">trace_result</span> <span class=\"o\">:=</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">is_some</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"n\">cfg</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">my_assumption</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198835136,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590536493
    },
    {
        "content": "<p><code>tidy.cfg</code>?</p>",
        "id": 198835147,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590536511
    },
    {
        "content": "<p>oops</p>",
        "id": 198835157,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590536522
    },
    {
        "content": "<p>I don't think you need any cfg argument</p>",
        "id": 198835209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590536533
    },
    {
        "content": "<p>that's kind of heavy handed</p>",
        "id": 198835217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590536542
    },
    {
        "content": "<p>i agree, but already the parse argument doesn't work</p>",
        "id": 198835246,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590536572
    },
    {
        "content": "<p>There is no need to change the print prefix because <code>Try this:</code> is a keyword</p>",
        "id": 198835248,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590536575
    },
    {
        "content": "<p>You also didn't put <code>my_assumption</code> in the tactic.interactive namespace</p>",
        "id": 198835297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590536631
    },
    {
        "content": "<p>ah does that translate to <code>namespace tactic.interactive</code>?</p>",
        "id": 198835352,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590536661
    },
    {
        "content": "<p>yes</p>",
        "id": 198835355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590536665
    },
    {
        "content": "<p>I tried <code>open tactic.interactive</code> without thinking hard about what you meant</p>",
        "id": 198835359,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590536671
    },
    {
        "content": "<p>or <code>meta def tactic.interactive.my_assumption</code></p>",
        "id": 198835366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590536680
    },
    {
        "content": "<p>(i had a namespaces error that resulted from opening an extra namespace at the start of the file and not closing it when i thought i had)</p>",
        "id": 198835573,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590536889
    },
    {
        "content": "<p>This works on one test case</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">find_matching_type</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>         <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">failed</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"bp\">::</span> <span class=\"n\">Hs</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"n\">do</span> <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">infer_type</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n                   <span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">unify</span> <span class=\"n\">e</span> <span class=\"n\">t</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">return</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">find_matching_type</span> <span class=\"n\">Hs</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">my_assumption_aux</span> <span class=\"o\">(</span><span class=\"n\">trace_result</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"o\">{</span> <span class=\"n\">ctx</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">local_context</span><span class=\"o\">,</span>\n     <span class=\"n\">t</span>   <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">target</span><span class=\"o\">,</span>\n     <span class=\"n\">hyp</span> <span class=\"err\">←</span> <span class=\"n\">find_matching_type</span> <span class=\"n\">t</span> <span class=\"n\">ctx</span><span class=\"o\">,</span>\n     <span class=\"n\">when</span> <span class=\"n\">trace_result</span> <span class=\"err\">$</span>\n      <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"s2\">&quot;Try this: exact &quot;</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">to_string</span> <span class=\"err\">$</span> <span class=\"n\">hyp</span><span class=\"o\">)),</span>\n      <span class=\"c1\">-- trace (&quot;Try this: exact &quot; ++ (to_string $ pp hyp)),</span>\n     <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">exact</span> <span class=\"n\">hyp</span> <span class=\"o\">}</span>\n<span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">fail</span> <span class=\"s2\">&quot;my_assumption tactic failed&quot;</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">my_assumption</span> <span class=\"o\">(</span><span class=\"n\">trace_result</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"err\">$</span> <span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;?&quot;</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">my_assumption_aux</span> <span class=\"n\">trace_result</span><span class=\"bp\">.</span><span class=\"n\">is_some</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">my_assumption</span><span class=\"err\">?</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198835833,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590537132
    },
    {
        "content": "<p><code>pp</code> is a tactic</p>",
        "id": 198835869,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590537177
    },
    {
        "content": "<p>you have to call it in a <code>do</code> block</p>",
        "id": 198835884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590537194
    },
    {
        "content": "<p>thanks<br>\nI'm still not sure how to get from something of type <code>tactic format</code> to something of type <code>string</code></p>",
        "id": 198836042,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590537337
    },
    {
        "content": "<p>Actually I just thought of one place where <code>pp</code> would be important here even though you are just printing a local constant: if <code>h</code> has a type like <code>\\forall {x : A}, P x</code> then <code>exact h</code> won't work, and <code>pp</code> should produce <code>@h</code> so that you get the correct output which is <code>exact @h</code></p>",
        "id": 198836106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590537373
    },
    {
        "content": "<p>well i guess <code>trace</code> can take things of type <code>tactic format</code></p>",
        "id": 198836112,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590537380
    },
    {
        "content": "<p>convert the string to a format using coe</p>",
        "id": 198836117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590537390
    },
    {
        "content": "<p>the thing i don't know is how to concatenate things of type <code>tactic format</code>, but now that the question is that precise i can probably find it</p>",
        "id": 198836131,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590537404
    },
    {
        "content": "<p>format also <code>has_append</code></p>",
        "id": 198836134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590537412
    },
    {
        "content": "<p>so you can use <code>++</code> just like with strings</p>",
        "id": 198836151,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590537430
    },
    {
        "content": "<p>ah okay, so i need to get out of the tactic monad and just get the thing of type <code>format</code></p>",
        "id": 198836188,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590537477
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">find_matching_type</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>         <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">failed</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"bp\">::</span> <span class=\"n\">Hs</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"n\">do</span> <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">infer_type</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n                   <span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">unify</span> <span class=\"n\">e</span> <span class=\"n\">t</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">return</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">find_matching_type</span> <span class=\"n\">Hs</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">my_assumption_aux</span> <span class=\"o\">(</span><span class=\"n\">trace_result</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"o\">{</span> <span class=\"n\">ctx</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">local_context</span><span class=\"o\">,</span>\n     <span class=\"n\">t</span>   <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">target</span><span class=\"o\">,</span>\n     <span class=\"n\">hyp</span> <span class=\"err\">←</span> <span class=\"n\">find_matching_type</span> <span class=\"n\">t</span> <span class=\"n\">ctx</span><span class=\"o\">,</span>\n     <span class=\"n\">pp_hyp</span> <span class=\"err\">←</span> <span class=\"n\">pp</span> <span class=\"n\">hyp</span><span class=\"o\">,</span>\n     <span class=\"n\">when</span> <span class=\"n\">trace_result</span> <span class=\"err\">$</span>\n       <span class=\"n\">trace</span> <span class=\"o\">(</span> <span class=\"o\">(</span><span class=\"s2\">&quot;Try this: exact &quot;</span> <span class=\"o\">:</span> <span class=\"n\">format</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">pp_hyp</span><span class=\"o\">),</span>\n     <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">exact</span> <span class=\"n\">hyp</span> <span class=\"o\">}</span>\n<span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">fail</span> <span class=\"s2\">&quot;my_assumption tactic failed&quot;</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">my_assumption</span> <span class=\"o\">(</span><span class=\"n\">trace_result</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"err\">$</span> <span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;?&quot;</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">my_assumption_aux</span> <span class=\"n\">trace_result</span><span class=\"bp\">.</span><span class=\"n\">is_some</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">my_assumption</span><span class=\"err\">?</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198836271,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590537533
    },
    {
        "content": "<p>you use bind to get values from inside the tactic monad</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">do</span> <span class=\"n\">fmt</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">pp</span> <span class=\"n\">hyp</span><span class=\"o\">,</span>\n   <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"err\">\\</span><span class=\"n\">u</span> <span class=\"s2\">&quot;bla&quot;</span> <span class=\"bp\">++</span> <span class=\"n\">fmt</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 198836295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590537568
    },
    {
        "content": "<p>I think that's the same as what I did?</p>",
        "id": 198836314,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590537593
    },
    {
        "content": "<p>I don't see a left arrow in your code</p>",
        "id": 198836374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590537609
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>     <span class=\"n\">pp_hyp</span> <span class=\"err\">←</span> <span class=\"n\">pp</span> <span class=\"n\">hyp</span><span class=\"o\">,</span>\n     <span class=\"n\">when</span> <span class=\"n\">trace_result</span> <span class=\"err\">$</span>\n       <span class=\"n\">trace</span> <span class=\"o\">(</span> <span class=\"o\">(</span><span class=\"s2\">&quot;Try this: exact &quot;</span> <span class=\"o\">:</span> <span class=\"n\">format</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">pp_hyp</span><span class=\"o\">),</span>\n</code></pre></div>",
        "id": 198836406,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590537626
    },
    {
        "content": "<p>That should work, yes?</p>",
        "id": 198836432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590537642
    },
    {
        "content": "<p>it does</p>",
        "id": 198836442,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590537647
    },
    {
        "content": "<p>if you put the call in the <code>when</code> then it won't construct the format unless it's actually going to print</p>",
        "id": 198836471,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590537689
    },
    {
        "content": "<p>good point, thanks</p>",
        "id": 198836567,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590537772
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">find_matching_type</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>         <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">failed</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"bp\">::</span> <span class=\"n\">Hs</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"n\">do</span> <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">infer_type</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n                   <span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">unify</span> <span class=\"n\">e</span> <span class=\"n\">t</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">return</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">find_matching_type</span> <span class=\"n\">Hs</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">my_assumption_aux</span> <span class=\"o\">(</span><span class=\"n\">trace_result</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"o\">{</span> <span class=\"n\">ctx</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">local_context</span><span class=\"o\">,</span>\n     <span class=\"n\">t</span>   <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">target</span><span class=\"o\">,</span>\n     <span class=\"n\">hyp</span> <span class=\"err\">←</span> <span class=\"n\">find_matching_type</span> <span class=\"n\">t</span> <span class=\"n\">ctx</span><span class=\"o\">,</span>\n     <span class=\"n\">when</span> <span class=\"n\">trace_result</span> <span class=\"err\">$</span>\n      <span class=\"n\">do</span> <span class=\"o\">{</span> <span class=\"n\">pp_hyp</span> <span class=\"err\">←</span> <span class=\"n\">pp</span> <span class=\"n\">hyp</span><span class=\"o\">,</span>\n      <span class=\"n\">trace</span> <span class=\"o\">(</span> <span class=\"o\">(</span><span class=\"s2\">&quot;Try this: exact &quot;</span> <span class=\"o\">:</span> <span class=\"n\">format</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">pp_hyp</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n     <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">exact</span> <span class=\"n\">hyp</span> <span class=\"o\">}</span>\n<span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">fail</span> <span class=\"s2\">&quot;my_assumption tactic failed&quot;</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">my_assumption</span> <span class=\"o\">(</span><span class=\"n\">trace_result</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"err\">$</span> <span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;?&quot;</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">my_assumption_aux</span> <span class=\"n\">trace_result</span><span class=\"bp\">.</span><span class=\"n\">is_some</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">my_assumption</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198836570,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590537776
    },
    {
        "content": "<p>lgtm</p>",
        "id": 198836608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590537809
    },
    {
        "content": "<p>so <code>assumption</code> is defined in core, I think</p>",
        "id": 198836629,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590537834
    },
    {
        "content": "<p>Indeed it is</p>",
        "id": 198836674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590537850
    },
    {
        "content": "<p>which makes PRing it significantly harder, right?</p>",
        "id": 198836682,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590537863
    },
    {
        "content": "<p>not particularly, I think</p>",
        "id": 198836691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590537871
    },
    {
        "content": "<p>not anymore, at least</p>",
        "id": 198836700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590537879
    },
    {
        "content": "<p>it will go into the next release of lean and then everyone will be happier</p>",
        "id": 198836729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590537914
    },
    {
        "content": "<p>you will have to write tests for it too</p>",
        "id": 198836772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590537946
    },
    {
        "content": "<p>hmm our effort with <code>pp</code> was not enough</p>",
        "id": 198837202,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590538291
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">red_herring</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">,</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">my_assumption</span><span class=\"err\">?</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198837209,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590538296
    },
    {
        "content": "<p>this prints <code>exact h2</code> instead of <code>exact @h2</code></p>",
        "id": 198837218,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590538308
    },
    {
        "content": "<p>i guess the <code>find_matching_type</code> needs to do more than it currently is</p>",
        "id": 198837291,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590538365
    },
    {
        "content": "<p>it's just returning <code>h2</code>, which can be <code>tactic.unify</code>ed with the goal</p>",
        "id": 198837319,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590538394
    },
    {
        "content": "<p>but we really need like, the result of that unification</p>",
        "id": 198837331,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590538408
    },
    {
        "content": "<p>(but doesn't exact do some unifying?)</p>",
        "id": 198837338,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590538416
    },
    {
        "content": "<p>h2 is the correct answer</p>",
        "id": 198837356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590538438
    },
    {
        "content": "<p>but it needs to be printed properly so that <code>exact</code> also knows we are talking about <code>h2</code> and not <code>h2 _</code></p>",
        "id": 198837413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590538465
    },
    {
        "content": "<p>oh but this gives me an error</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">red_herring</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">,</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">exact</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198837416,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590538467
    },
    {
        "content": "<p>hmm ok</p>",
        "id": 198837452,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590538498
    },
    {
        "content": "<p>i guess we can close the goal with <code>tactic.exact hyp</code> inside of the execution of <code>my_assumption</code><br>\nbut not with <code>exact &lt;k&gt;</code> where <code>&lt;k&gt;</code> is the output of <code>pp hyp</code></p>",
        "id": 198837534,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590538557
    },
    {
        "content": "<p>if this pp thing isn't working, the low tech way to do this is to just check if it starts with an implicit binder and put <code>@</code> in front if so</p>",
        "id": 198837536,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590538558
    },
    {
        "content": "<p>sure, <code>assumption</code> itself is not affected</p>",
        "id": 198837588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590538577
    },
    {
        "content": "<p>the issue is with the replacement tactic that is printed, turned into a string, written into the input file and then run</p>",
        "id": 198837601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590538601
    },
    {
        "content": "<p>maybe i'll try passing options to <code>pp</code> before going with the low-tech solution</p>",
        "id": 198837627,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590538634
    },
    {
        "content": "<p>I'm not actually sure if the expression pretty printer correctly handles putting <code>@</code> when needed</p>",
        "id": 198837653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590538673
    },
    {
        "content": "<p>okay, I also realized I have no idea what I mean by \"pass options to <code>pp</code>\", so i'll start on that low-tech solution</p>",
        "id": 198837742,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590538730
    },
    {
        "content": "<p><code>pp</code> does have options, they are set via the <code>options</code> struct that can be edited by users using <code>set_option</code> - I'm sure you've heard of <code>pp.all</code> - but I don't think they will solve this problem</p>",
        "id": 198837838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590538808
    },
    {
        "content": "<p>Is the thing we want \"check if <code>expr = mvar _</code>\"? where <code>mvar</code> is one of the type constructors?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"kn\">inductive</span> <span class=\"n\">expr</span> <span class=\"o\">(</span><span class=\"n\">elaborated</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"> A bound variable with a de-Bruijn index. -/</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span>         <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span>\n<span class=\"c\">/-</span><span class=\"cm\"> A type universe: `Sort u` -/</span>\n<span class=\"bp\">|</span> <span class=\"n\">sort</span>        <span class=\"o\">:</span> <span class=\"n\">level</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span>\n<span class=\"c\">/-</span><span class=\"cm\"> A global constant. These include definitions, constants and inductive type stuff present</span>\n<span class=\"cm\">in the environment as well as hard-coded definitions. -/</span>\n<span class=\"bp\">|</span> <span class=\"n\">const</span>       <span class=\"o\">:</span> <span class=\"n\">name</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">level</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span>\n<span class=\"c\">/-</span><span class=\"cm\"> [WARNING] Do not trust the types for `mvar` and `local_const`,</span>\n<span class=\"cm\">they are sometimes dummy values. Use `tactic.infer_type` instead. -/</span>\n<span class=\"c\">/-</span><span class=\"cm\"> An `mvar` is a &#39;hole&#39; yet to be filled in by the elaborator or tactic state. -/</span>\n<span class=\"bp\">|</span> <span class=\"n\">mvar</span>        <span class=\"o\">(</span><span class=\"n\">unique</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">pretty</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span>\n<span class=\"c\">/-</span><span class=\"cm\"> A local constant. For example, if our tactic state was `h : P ⊢ Q`, `h` would be a local constant. -/</span>\n<span class=\"bp\">|</span> <span class=\"n\">local_const</span> <span class=\"o\">(</span><span class=\"n\">unique</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pretty</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bi</span> <span class=\"o\">:</span> <span class=\"n\">binder_info</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Function application. -/</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span>         <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Lambda abstraction. eg ```(λ a : α, x)`` -/</span>\n<span class=\"bp\">|</span> <span class=\"n\">lam</span>        <span class=\"o\">(</span><span class=\"n\">var_name</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bi</span> <span class=\"o\">:</span> <span class=\"n\">binder_info</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">var_type</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Pi type constructor. eg ```(Π a : α, x)`` and ```(α → β)`` -/</span>\n<span class=\"bp\">|</span> <span class=\"n\">pi</span>         <span class=\"o\">(</span><span class=\"n\">var_name</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bi</span> <span class=\"o\">:</span> <span class=\"n\">binder_info</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">var_type</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span>\n<span class=\"c\">/-</span><span class=\"cm\"> An explicit let binding. -/</span>\n<span class=\"bp\">|</span> <span class=\"n\">elet</span>       <span class=\"o\">(</span><span class=\"n\">var_name</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">assignment</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span>\n<span class=\"c\">/-</span><span class=\"cm\"> A macro, see the docstring for `macro_def`.</span>\n<span class=\"cm\">  The list of expressions are local constants and metavariables that the macro depends on.</span>\n<span class=\"cm\">  -/</span>\n<span class=\"bp\">|</span> <span class=\"n\">macro</span>       <span class=\"o\">:</span> <span class=\"n\">macro_def</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span>\n</code></pre></div>",
        "id": 198838022,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590538992
    },
    {
        "content": "<p>You want to check if the type of <code>hyp</code> matches <code>expr.pi _ binder_info.implicit _ _</code></p>",
        "id": 198838149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590539116
    },
    {
        "content": "<p>is it possible to do this by writing something like <code>tactic.unify hyp (expr.pi _ binder_info.implicit _ _)</code>?</p>",
        "id": 198838447,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590539328
    },
    {
        "content": "<p>probably not, I guess it wants there to be an <code>expr</code> in both places there, and it would need to actually fill in the holes to do that, instead of leaving them as patterns</p>",
        "id": 198838485,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590539381
    },
    {
        "content": "<p>maybe the equation compiler can do it</p>",
        "id": 198838537,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590539404
    },
    {
        "content": "<p>this doesn't work, haven't yet figured out if it can't work or if I got it slightly wrong :</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"bp\">_</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n</code></pre></div>",
        "id": 198838614,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590539513
    },
    {
        "content": "<p>this also doesn't work, so I should go learn what the equation compiler does</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n</code></pre></div>",
        "id": 198838914,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590539784
    },
    {
        "content": "<p>You're missing parentheses.</p>",
        "id": 198839060,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590539992
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/.60.3F.60.20exercises/near/198838914\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">````</span>\n</code></pre></div>\n\n\n</blockquote>",
        "id": 198839115,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590540028
    },
    {
        "content": "<p>(Pattern matching can be used with multiple arguments.)</p>",
        "id": 198839118,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590540039
    },
    {
        "content": "<p>ah that makes sense, thanks</p>",
        "id": 198839128,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590540077
    },
    {
        "content": "<p>Nice, this almost works</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n</code></pre></div>",
        "id": 198839197,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590540156
    },
    {
        "content": "<p>I think this is what we wanted</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"bp\">_</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n</code></pre></div>",
        "id": 198839286,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590540271
    },
    {
        "content": "<p>except that lean can't infer <code>decidable (is_implicit hyp)</code></p>",
        "id": 198839776,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590540863
    },
    {
        "content": "<p>what is <code>is_implicit</code>?</p>",
        "id": 198840184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590541412
    },
    {
        "content": "<p>hah, sorry, I was pretending that I was just talking to myself</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">is_implicit</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"bp\">_</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n</code></pre></div>",
        "id": 198840312,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590541580
    },
    {
        "content": "<p>currently I think <code>is_implicit</code> is not firing when we expect it to</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">find_matching_type</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>         <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">failed</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"bp\">::</span> <span class=\"n\">Hs</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"n\">do</span> <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">infer_type</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n                   <span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">unify</span> <span class=\"n\">e</span> <span class=\"n\">t</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">return</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">find_matching_type</span> <span class=\"n\">Hs</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">is_implicit</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"bp\">_</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">my_assumption_aux</span> <span class=\"o\">(</span><span class=\"n\">trace_result</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"o\">{</span> <span class=\"n\">ctx</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">local_context</span><span class=\"o\">,</span>\n     <span class=\"n\">t</span>   <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">target</span><span class=\"o\">,</span>\n     <span class=\"n\">hyp</span> <span class=\"err\">←</span> <span class=\"n\">find_matching_type</span> <span class=\"n\">t</span> <span class=\"n\">ctx</span><span class=\"o\">,</span>\n     <span class=\"n\">when</span> <span class=\"n\">trace_result</span> <span class=\"err\">$</span>\n      <span class=\"n\">do</span> <span class=\"o\">{</span> <span class=\"n\">pp_hyp</span> <span class=\"err\">←</span> <span class=\"n\">pp</span> <span class=\"n\">hyp</span><span class=\"o\">,</span>\n      <span class=\"c1\">-- when (tt) $ do { trace &quot;@&quot; },</span>\n      <span class=\"n\">when</span> <span class=\"o\">(</span><span class=\"n\">is_implicit</span> <span class=\"n\">hyp</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"n\">do</span> <span class=\"o\">{</span> <span class=\"n\">trace</span> <span class=\"s2\">&quot;@&quot;</span> <span class=\"o\">},</span>\n      <span class=\"n\">trace</span> <span class=\"o\">(</span> <span class=\"o\">(</span><span class=\"s2\">&quot;Try this: exact &quot;</span> <span class=\"o\">:</span> <span class=\"n\">format</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">pp_hyp</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n     <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">exact</span> <span class=\"n\">hyp</span> <span class=\"o\">}</span>\n<span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">fail</span> <span class=\"s2\">&quot;my_assumption tactic failed&quot;</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">my_assumption</span> <span class=\"o\">(</span><span class=\"n\">trace_result</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"err\">$</span> <span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;?&quot;</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">my_assumption_aux</span> <span class=\"n\">trace_result</span><span class=\"bp\">.</span><span class=\"n\">is_some</span>\n\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">my_assumption</span><span class=\"err\">?</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">expr</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">red_herring</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">my_assumption</span><span class=\"err\">?</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198840338,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590541627
    },
    {
        "content": "<p>I think ratther than call <code>trace</code> directly you should construct a different <code>format</code> to pass to <code>trace</code></p>",
        "id": 198840409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590541705
    },
    {
        "content": "<p>so that you can append stuff in the right order</p>",
        "id": 198840414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590541719
    },
    {
        "content": "<p>I agree, right now the point of the <code>trace \"@\"</code> statement is to show that the <code>when</code> condition is not firing</p>",
        "id": 198840427,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590541744
    },
    {
        "content": "<p>(i tried but haven't yet succeeded at writing code that will prepend a \"@\" to <code>hyp</code>)</p>",
        "id": 198840430,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590541753
    },
    {
        "content": "<p>it's the same as with appending <code>format</code> in the trace call</p>",
        "id": 198840441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590541797
    },
    {
        "content": "<p>Also you need to call <code>is_implicit</code> on the type of <code>hyp</code>, not <code>hyp</code> itself</p>",
        "id": 198840531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590541823
    },
    {
        "content": "<p><code>hyp</code> is not a pi type, it is a local constant</p>",
        "id": 198840533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590541835
    },
    {
        "content": "<p>that makes sense. I guess I want something with a type signature like <code>expr \\r Type*</code>? and its name should be something like <code>eval</code>?</p>",
        "id": 198840743,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590542059
    },
    {
        "content": "<p>No</p>",
        "id": 198840796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590542146
    },
    {
        "content": "<p>Hint: The function that gets the type of an expr is already used in your code</p>",
        "id": 198840839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590542171
    },
    {
        "content": "<p>Nice, thanks</p>",
        "id": 198840934,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590542322
    },
    {
        "content": "<p>I have all of the pieces and just need to put them together</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">find_matching_type</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>         <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">failed</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"bp\">::</span> <span class=\"n\">Hs</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"n\">do</span> <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">infer_type</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n                   <span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">unify</span> <span class=\"n\">e</span> <span class=\"n\">t</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">return</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">find_matching_type</span> <span class=\"n\">Hs</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">is_implicit</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"bp\">_</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">my_assumption_aux</span> <span class=\"o\">(</span><span class=\"n\">trace_result</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"o\">{</span> <span class=\"n\">ctx</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">local_context</span><span class=\"o\">,</span>\n     <span class=\"n\">t</span>   <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">target</span><span class=\"o\">,</span>\n     <span class=\"n\">hyp</span> <span class=\"err\">←</span> <span class=\"n\">find_matching_type</span> <span class=\"n\">t</span> <span class=\"n\">ctx</span><span class=\"o\">,</span>\n     <span class=\"n\">when</span> <span class=\"n\">trace_result</span> <span class=\"err\">$</span>\n      <span class=\"n\">do</span> <span class=\"o\">{</span> <span class=\"n\">pp_hyp</span> <span class=\"err\">←</span> <span class=\"n\">pp</span> <span class=\"n\">hyp</span><span class=\"o\">,</span>\n      <span class=\"n\">hyp_type</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">infer_type</span> <span class=\"n\">hyp</span><span class=\"o\">,</span>\n      <span class=\"n\">when</span> <span class=\"o\">(</span><span class=\"n\">is_implicit</span> <span class=\"n\">hyp_type</span> <span class=\"o\">)</span> <span class=\"err\">$</span>\n        <span class=\"n\">do</span> <span class=\"o\">{</span> <span class=\"n\">pp_hyp</span> <span class=\"err\">←</span> <span class=\"n\">pp</span> <span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"s2\">&quot;@&quot;</span> <span class=\"o\">:</span> <span class=\"n\">format</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">pp_hyp</span><span class=\"o\">,</span> <span class=\"n\">trace</span> <span class=\"s2\">&quot;code reached&quot;</span> <span class=\"o\">},</span>\n      <span class=\"n\">trace</span> <span class=\"o\">(</span> <span class=\"o\">(</span><span class=\"s2\">&quot;Try this: exact &quot;</span> <span class=\"o\">:</span> <span class=\"n\">format</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">pp_hyp</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n     <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">exact</span> <span class=\"n\">hyp</span> <span class=\"o\">}</span>\n<span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">fail</span> <span class=\"s2\">&quot;my_assumption tactic failed&quot;</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">my_assumption</span> <span class=\"o\">(</span><span class=\"n\">trace_result</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"err\">$</span> <span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;?&quot;</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">my_assumption_aux</span> <span class=\"n\">trace_result</span><span class=\"bp\">.</span><span class=\"n\">is_some</span>\n\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">red_herring</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">my_assumption</span><span class=\"err\">?</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198840949,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590542348
    },
    {
        "content": "<p>in the above, when i run the tactic in the example, I get the \"code reached\" message, but I don't have \"@\" appended to the front of \"h2\"</p>",
        "id": 198841063,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590542515
    },
    {
        "content": "<p>and I meant for this line to do both of those things</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">do</span> <span class=\"o\">{</span> <span class=\"n\">pp_hyp</span> <span class=\"err\">←</span> <span class=\"n\">pp</span> <span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"s2\">&quot;@&quot;</span> <span class=\"o\">:</span> <span class=\"n\">format</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">pp_hyp</span><span class=\"o\">,</span> <span class=\"n\">trace</span> <span class=\"s2\">&quot;code reached&quot;</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 198841115,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590542552
    },
    {
        "content": "<p>You don't want to <code>pp</code>the at sign</p>",
        "id": 198841132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590542572
    },
    {
        "content": "<p>that's the function for turning an <code>expr</code> into a format</p>",
        "id": 198841144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590542586
    },
    {
        "content": "<p>the function that turns a string into a format is coe</p>",
        "id": 198841149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590542603
    },
    {
        "content": "<p>i was <code>pp</code>ing the whole <code>format</code> after appending them</p>",
        "id": 198841157,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590542628
    },
    {
        "content": "<p>I tried replacing <code>pp</code> with <code>return</code> and it didn't give better results, though <code>return</code> is probably still better</p>",
        "id": 198841204,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590542650
    },
    {
        "content": "<p>try <code>let hyp_format := if is_implicit hyp_type then \\u\"@\" ++ pp_hyp else pp_hyp</code></p>",
        "id": 198841205,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590542655
    },
    {
        "content": "<p>ooh</p>",
        "id": 198841213,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590542670
    },
    {
        "content": "<p>but <code>ite</code> will want a <code>Prop</code> right? I guess it will coerce</p>",
        "id": 198841217,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590542690
    },
    {
        "content": "<p>yep</p>",
        "id": 198841222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590542695
    },
    {
        "content": "<p>you can use <code>cond</code> instead if you find that distasteful, but the syntax is not as nice</p>",
        "id": 198841238,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590542719
    },
    {
        "content": "<p>no this is fine; i was on alert about Prop vs bool because <br>\nearlier i made the mistake of defining <code>is_implicit</code> as <code>expr \\to Prop</code>; then it wanted a proof of decidability</p>",
        "id": 198841340,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590542830
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">find_matching_type</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>         <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">failed</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"bp\">::</span> <span class=\"n\">Hs</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"n\">do</span> <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">infer_type</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n                   <span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">unify</span> <span class=\"n\">e</span> <span class=\"n\">t</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">return</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">find_matching_type</span> <span class=\"n\">Hs</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">is_implicit</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"bp\">_</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">my_assumption_aux</span> <span class=\"o\">(</span><span class=\"n\">trace_result</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"o\">{</span> <span class=\"n\">ctx</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">local_context</span><span class=\"o\">,</span>\n     <span class=\"n\">t</span>   <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">target</span><span class=\"o\">,</span>\n     <span class=\"n\">hyp</span> <span class=\"err\">←</span> <span class=\"n\">find_matching_type</span> <span class=\"n\">t</span> <span class=\"n\">ctx</span><span class=\"o\">,</span>\n     <span class=\"n\">when</span> <span class=\"n\">trace_result</span> <span class=\"err\">$</span>\n      <span class=\"n\">do</span> <span class=\"o\">{</span> <span class=\"n\">pp_hyp</span> <span class=\"err\">←</span> <span class=\"n\">pp</span> <span class=\"n\">hyp</span><span class=\"o\">,</span>\n      <span class=\"n\">hyp_type</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">infer_type</span> <span class=\"n\">hyp</span><span class=\"o\">,</span>\n      <span class=\"k\">let</span> <span class=\"n\">hyp_format</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">is_implicit</span> <span class=\"n\">hyp_type</span> <span class=\"k\">then</span> <span class=\"err\">↑</span><span class=\"s2\">&quot;@&quot;</span> <span class=\"bp\">++</span> <span class=\"n\">pp_hyp</span> <span class=\"k\">else</span> <span class=\"n\">pp_hyp</span><span class=\"o\">,</span>\n      <span class=\"n\">trace</span> <span class=\"o\">(</span> <span class=\"o\">(</span><span class=\"s2\">&quot;Try this: exact &quot;</span> <span class=\"o\">:</span> <span class=\"n\">format</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">hyp_format</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n     <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">exact</span> <span class=\"n\">hyp</span> <span class=\"o\">}</span>\n<span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">fail</span> <span class=\"s2\">&quot;my_assumption tactic failed&quot;</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">my_assumption</span> <span class=\"o\">(</span><span class=\"n\">trace_result</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"err\">$</span> <span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;?&quot;</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">my_assumption_aux</span> <span class=\"n\">trace_result</span><span class=\"bp\">.</span><span class=\"n\">is_some</span>\n\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">my_assumption</span><span class=\"err\">?</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">red_herring</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">my_assumption</span><span class=\"err\">?</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198841366,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590542869
    },
    {
        "content": "<p>this works, I have a trivial test case and a test case with the implicit binder feature</p>",
        "id": 198841425,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590542904
    },
    {
        "content": "<p>(The root of your previous error was a confusion about scope in <code>do</code> blocks. In the expression</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">do</span> <span class=\"o\">{</span>\n  <span class=\"n\">pp_hyp</span> <span class=\"bp\">&lt;-</span> <span class=\"bp\">...</span><span class=\"o\">,</span>\n  <span class=\"n\">when</span> <span class=\"bp\">...</span> <span class=\"err\">$</span> <span class=\"n\">do</span> <span class=\"o\">{</span>\n    <span class=\"n\">pp_hyp</span> <span class=\"bp\">&lt;-</span> <span class=\"bp\">...</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"bp\">...</span> <span class=\"n\">pp_hyp</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>the final pp_hyp refers to the first binding, not the second one. When you leave a <code>do</code> block, its bindings go out of scope.)</p>",
        "id": 198841436,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1590542915
    },
    {
        "content": "<p>the code above works now, it has two test cases. <br>\nI guess it should inherit all of the test cases of <code>assumption</code> also</p>",
        "id": 198841469,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590542982
    },
    {
        "content": "<p>If you want to use <code>pp_hyp</code> outside the block, you have to do something like </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">do</span>\n  <span class=\"n\">pp_hyp</span> <span class=\"bp\">&lt;-</span> <span class=\"bp\">...</span><span class=\"o\">,</span>\n  <span class=\"n\">pp_hyp</span> <span class=\"bp\">&lt;-</span> <span class=\"k\">if</span> <span class=\"bp\">...</span> <span class=\"k\">then</span> <span class=\"n\">do</span>\n    <span class=\"n\">pp_hyp</span> <span class=\"bp\">&lt;-</span> <span class=\"bp\">...</span><span class=\"o\">,</span>\n    <span class=\"n\">return</span> <span class=\"n\">pp_hyp</span>\n  <span class=\"k\">else</span> <span class=\"n\">return</span> <span class=\"n\">pp_hyp</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">pp_hyp</span>\n</code></pre></div>",
        "id": 198841519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590543004
    },
    {
        "content": "<p>I think I'm supposed to add tests here<br>\n<a href=\"https://github.com/leanprover-community/lean/tree/master/tests/lean/interactive\">https://github.com/leanprover-community/lean/tree/master/tests/lean/interactive</a><br>\nI guess in a new file?</p>",
        "id": 198842559,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590544418
    },
    {
        "content": "<p>I didn't find any tests for <code>assumption</code> by just poking around in tests/lean/*</p>",
        "id": 198842624,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590544503
    },
    {
        "content": "<p>(but i admit I didn't try using a real search tool like grep)</p>",
        "id": 198842632,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590544519
    },
    {
        "content": "<p>I guess I also don't have permission to push a PR to leanprover-community/lean</p>",
        "id": 198842703,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590544602
    },
    {
        "content": "<p>(i'll move this conversation back out into the open, it's not about fiddly <code>meta</code> code details anymore)</p>",
        "id": 198842726,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590544638
    },
    {
        "content": "<p>Since I am always working with goals like this one:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">(((</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">),</span> <span class=\"err\">⇑</span><span class=\"n\">I</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">fst</span>\n<span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">chart_at</span> <span class=\"n\">H</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_local_equiv</span><span class=\"bp\">.</span><span class=\"n\">target</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n<span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"o\">((</span><span class=\"n\">chart_at</span> <span class=\"n\">H</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">))</span>\n<span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">chart_at</span> <span class=\"n\">H&#39;</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_local_equiv</span><span class=\"bp\">.</span><span class=\"n\">source</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n<span class=\"o\">((</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"err\">⇑</span><span class=\"n\">J</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"n\">J</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">snd</span>\n<span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">chart_at</span> <span class=\"n\">G</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_local_equiv</span><span class=\"bp\">.</span><span class=\"n\">target</span><span class=\"o\">)</span>\n<span class=\"bp\">∧</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"o\">((</span><span class=\"n\">chart_at</span> <span class=\"n\">G</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"n\">J</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">))</span>\n<span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">chart_at</span> <span class=\"n\">G&#39;</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_local_equiv</span><span class=\"bp\">.</span><span class=\"n\">source</span>\n</code></pre></div>\n\n\n<p>and I always need to manually use refine to split all the ands in multiple subgoals, loosing a lot of time, I was wondering if there were anybody here who is good at writing tactics able, without too much effort,  to write a tactic <code>refine?</code> that does this automatically?</p>",
        "id": 204063371,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594892506
    },
    {
        "content": "<p>Normally, when you get to a goal like that the simplifier should help you clear most of it. Two remarks:</p>\n<ul>\n<li>you have probably simplified with <code>simp</code>. If you use <code>simp with mfld_simps</code> it won't use <code>mem_range_iff</code> that screwed things a little bit (you can see this existential quantifier in the goal, it's never good news).</li>\n<li>If you are trying to prove that sets are equal to one another or included in one another, <code>mfld_set_tac</code> (that I have introduced in my recent manifold commit) can help you.</li>\n</ul>\n<p>If you have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, I can have a look.</p>",
        "id": 204063900,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1594892896
    },
    {
        "content": "<p>The general question is still legitimate</p>",
        "id": 204064135,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594893104
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/.60.3F.60.20exercises/near/204063900\">said</a>:</p>\n<blockquote>\n<p>Normally, when you get to a goal like that the simplifier should help you clear most of it. Two remarks:</p>\n<ul>\n<li>you have probably simplified with <code>simp</code>. If you use <code>simp with mfld_simps</code> it won't use <code>mem_range_iff</code> that screwed things a little bit (you can see this existential quantifier in the goal, it's never good news).</li>\n<li>If you are trying to prove that sets are equal to one another or included in one another, <code>mfld_set_tac</code> (that I have introduced in my recent manifold commit) can help you.</li>\n</ul>\n<p>If you have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, I can have a look.</p>\n</blockquote>\n<p>I am using <code>mfld_simps</code> only and I did try <code>mfld_set_tac</code> (I read your new PR!) but it does not work in my case unfortunately. I am basically just rewriting in a shorter way the proofs about standard product maps you saw already. I will push everything in the branch Lie groups as soon as I am done and I will tell you so that you can tell me if you have tips for smarter proofs.</p>",
        "id": 204064593,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594893433
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/.60.3F.60.20exercises/near/204064135\">said</a>:</p>\n<blockquote>\n<p>The general question is still legitimate</p>\n</blockquote>\n<p>In any case yeah I would still love this tactic and if <code>assumption?</code> were ready it'd be sooo cool if it could already close with the corect hypotheses the goals that can be closed with <code>assumption</code></p>",
        "id": 204064698,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594893507
    },
    {
        "content": "<p>this sounds more like a <code>splits</code> tactic</p>",
        "id": 204064741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594893563
    },
    {
        "content": "<p>Yes, the original question was about <code>splits</code></p>",
        "id": 204064774,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594893583
    },
    {
        "content": "<p><code>refine?</code> sounds a bit ambiguous because <code>refine</code> is the everything tactic</p>",
        "id": 204064850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594893622
    },
    {
        "content": "<p>I don' know the name but sometimes I have a long goal like this one:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">(((</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">),</span> <span class=\"err\">⇑</span><span class=\"n\">I</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">fst</span>\n<span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">chart_at</span> <span class=\"n\">H</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_local_equiv</span><span class=\"bp\">.</span><span class=\"n\">target</span><span class=\"o\">)</span>\n<span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"err\">⇑</span><span class=\"n\">J</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"n\">J</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">snd</span>\n<span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">chart_at</span> <span class=\"n\">G</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_local_equiv</span><span class=\"bp\">.</span><span class=\"n\">target</span><span class=\"o\">)</span>\n<span class=\"bp\">∧</span> <span class=\"err\">⇑</span><span class=\"o\">((</span><span class=\"n\">chart_at</span> <span class=\"n\">H</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span>\n<span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">chart_at</span> <span class=\"n\">H</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_local_equiv</span><span class=\"bp\">.</span><span class=\"n\">source</span> <span class=\"bp\">→</span>\n<span class=\"o\">(((</span><span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"err\">∈</span>\n<span class=\"o\">(</span><span class=\"n\">chart_at</span> <span class=\"n\">H</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_local_equiv</span><span class=\"bp\">.</span><span class=\"n\">target</span>\n<span class=\"bp\">∧</span> <span class=\"err\">⇑</span><span class=\"o\">((</span><span class=\"n\">chart_at</span> <span class=\"n\">H</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span>\n<span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">chart_at</span> <span class=\"n\">H</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_local_equiv</span><span class=\"bp\">.</span><span class=\"n\">source</span><span class=\"o\">)</span>\n<span class=\"bp\">∧</span> <span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"n\">J</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">snd</span>\n<span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">chart_at</span> <span class=\"n\">G</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_local_equiv</span><span class=\"bp\">.</span><span class=\"n\">target</span>\n<span class=\"bp\">∧</span> <span class=\"err\">⇑</span><span class=\"o\">((</span><span class=\"n\">chart_at</span> <span class=\"n\">G</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"n\">J</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span>\n<span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">chart_at</span> <span class=\"n\">G</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_local_equiv</span><span class=\"bp\">.</span><span class=\"n\">source</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n<span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">model_prod</span> <span class=\"n\">H</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"n\">I</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">,</span> <span class=\"err\">⇑</span><span class=\"n\">J</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>and with <code>rintros</code>, and by taking some time to rewrite the long <code>rintros</code> names, get</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">rintro</span> <span class=\"bp\">⟨⟨⟨⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>and the above goal. At this point the goal can be almost always closed with just one refine like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">refine</span> <span class=\"bp\">⟨⟨⟨⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>or at most with something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">refine</span> <span class=\"bp\">⟨⟨⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"bp\">_⟩⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">_⟩⟩</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">local_homeomorph</span><span class=\"bp\">.</span><span class=\"n\">map_target</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">exacts</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">],</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>I wish the tactic could automatically write the part</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">refine</span> <span class=\"bp\">⟨⟨⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"bp\">_⟩⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">_⟩⟩</span>\n</code></pre></div>\n\n\n<p>and I only had to deal with the rest.<br>\nI wouldn't know how to give it a better name then <code>refine?</code></p>",
        "id": 204065316,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594893984
    },
    {
        "content": "<p>It would be nice if <code>show_term</code> could be used to produce <code>refine</code>  proof scripts as well as <code>exact</code> proof terms</p>",
        "id": 204065380,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594894041
    },
    {
        "content": "<p>that way you could achieve what you want with roughly <code>show_term {repeat {split &lt;|&gt; assumption}}</code></p>",
        "id": 204065421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594894082
    },
    {
        "content": "<p>the <code>repeat {split &lt;|&gt; assumption}</code> part isn't quite right; there are a number of special cases that would suggest a dedicated tactic for this, perhaps called <code>splita</code></p>",
        "id": 204065659,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594894261
    },
    {
        "content": "<p>but what you are calling <code>refine?</code> could be something that brackets a tactic invocation and returns an equivalent refine script (give or take)</p>",
        "id": 204065702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594894314
    },
    {
        "content": "<p>Well as long as it automates this process I'm happy however it is implemented. Do you think it is something that could be done in the current lean or is it more like a possible future wish</p>",
        "id": 204065964,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594894523
    },
    {
        "content": "<p>It should be a minor variation on <code>show_term</code></p>",
        "id": 204066076,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594894609
    },
    {
        "content": "<p><code>splita</code> is also a relatively simple exercise (although it gets more complicated if you have dependent args and many assumption options and want to make maximal progress)</p>",
        "id": 204066124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594894663
    },
    {
        "content": "<p>(to be clear: this is all very doable in lean 3)</p>",
        "id": 204066368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594894837
    },
    {
        "content": "<p>Actually you're right <code>show_term {repeat {split &lt;|&gt; assumption}}</code> is pretty much similar to what I wanted even if it writes exacts instead of refine and it doesn't really work in case of exists goals</p>",
        "id": 204066622,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594895032
    },
    {
        "content": "<p>I mean I am trying it right now and sometimes the goal can be closed with <code>\\&lt;b, rfl\\&gt;</code> but this writes <code>Exists.intro (a, b).snd (eq.refl (⇑J (a, b).snd))</code> and then it does not accept its own output</p>",
        "id": 204066764,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594895150
    },
    {
        "content": "<p>Probably because coercions are involved</p>",
        "id": 204066824,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594895174
    },
    {
        "content": "<p>it's apparently not the best at pretty printing anonymous constructors (and it could also do with some proof term simplification)</p>",
        "id": 204066894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594895256
    },
    {
        "content": "<p>If you update mathlib, <code>show_term</code> should be printing <code>refine</code> rather than <code>exact</code>.</p>",
        "id": 204073882,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594901030
    },
    {
        "content": "<p>you could try <code>show_term { dsimp_result { ... } }</code></p>",
        "id": 204073942,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594901066
    },
    {
        "content": "<p>That should at least get rid of the <code>(a, b).snd</code> stuff.</p>",
        "id": 204073963,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594901089
    },
    {
        "content": "<p>I wonder if we can drop the coercion arrows from <code>pp</code>?</p>",
        "id": 204073988,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594901107
    },
    {
        "content": "<p>The multi-split thing came up at Xena this evening, when I had three goals, and <span class=\"user-mention\" data-user-id=\"243312\">@Jason KY.</span> suggested <code>refine </code>\\&lt;_, _, _\\&gt;` which worked for me.</p>",
        "id": 204142186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594933192
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/.60.3F.60.20exercises/near/204142186\">said</a>:</p>\n<blockquote>\n<p>The multi-split thing came up at Xena this evening, when I had three goals, and <span class=\"user-mention silent\" data-user-id=\"243312\">Jason KY.</span> suggested <code>refine </code>\\&lt;_, _, _\\&gt;` which worked for me.</p>\n</blockquote>\n<p>You mean just writing it manually? Or are you suggesting another form of automation?</p>",
        "id": 204147964,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594936287
    },
    {
        "content": "<p>Yes in my case I just wrote it manually, I just didn't want to do two <code>splits</code> because then I'd have lots of bracket indentations but this was a good workaround</p>",
        "id": 204151411,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594938578
    },
    {
        "content": "<p>Would it make sense to PR this combination of tactics with a short name? Like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">squeeze_splita</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">show_term</span> <span class=\"o\">{</span> <span class=\"n\">dsimp_result</span> <span class=\"o\">{</span> <span class=\"n\">norm_cast</span> <span class=\"o\">{</span><span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">split</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">assumption</span> <span class=\"o\">}}}}]</span>\n</code></pre></div>\n\n\n<p>It is very simple but very useful for 10 lines goals with a lot of ands</p>",
        "id": 204300434,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1595078458
    },
    {
        "content": "<p>And it is probably very annoying to write <code>show_term { dsimp_result { norm_cast {repeat { split &lt;|&gt; assumption }}}}</code> each time</p>",
        "id": 204300508,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1595078592
    },
    {
        "content": "<p>It seems strange to want to include <code>norm_cast</code> in there. That could produce gross looking terms.</p>",
        "id": 204301135,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595079841
    },
    {
        "content": "<p>Have you test this with other shaped splits? (Like <code>(nat x nat) x (nat x nat)</code>, for example.)</p>",
        "id": 204301190,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595079889
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/.60.3F.60.20exercises/near/204301135\">said</a>:</p>\n<blockquote>\n<p>It seems strange to want to include <code>norm_cast</code> in there. That could produce gross looking terms.</p>\n</blockquote>\n<p>That was to get rid of the coercion arrows that make the result of this tactic not accepted by lean but it can be removed and then people should just need to remove manually coercion arrows.</p>",
        "id": 204301843,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1595081050
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/.60.3F.60.20exercises/near/204301190\">said</a>:</p>\n<blockquote>\n<p>Have you test this with other shaped splits? (Like <code>(nat x nat) x (nat x nat)</code>, for example.)</p>\n</blockquote>\n<p>No I did not test it on anything except for the lemmas where I needed it. If you think this tactic is a good idea then I might try some tests even if I do not even know where to start really as by now I only looked into geometry topology and algebra and I have no idea about what happens in the other sections of the library</p>",
        "id": 204301900,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1595081182
    },
    {
        "content": "<p>Yes, this tactic sounds pretty useful!</p>",
        "id": 204325288,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595120426
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/.60.3F.60.20exercises/near/204325288\">said</a>:</p>\n<blockquote>\n<p>Yes, this tactic sounds pretty useful!</p>\n</blockquote>\n<p>Supposing we PR both a non-interactive version <code>splita</code> and an interactive one, should the interactive one be called <code>squeeze_splita</code> or <code>splita?</code>? I have no idea how the conventions work!</p>",
        "id": 204341856,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1595152458
    },
    {
        "content": "<p>I think the reporting version would be called <code>splita?</code></p>",
        "id": 204380027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595209940
    },
    {
        "content": "<p>Is there no way at all to modify the tactic in such a way that it automatically gets rid of coercion arrows? I'm using it a lot and it is great but this would make it way better</p>",
        "id": 204402700,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1595237706
    },
    {
        "content": "<p>I guess the issue is that you personally might want to remove coercion arrows as well, but perhaps a more principled approach is to regard the coercion issue as a different problem to the splitting multiple ands issue. Why not have a tactic which splits all the ands, and then in your use case you can put a semicolon after it and run <code>norm_cast</code>.</p>",
        "id": 204405788,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595240201
    },
    {
        "content": "<p>As Kevin says, they seem like quite orthogonal concerns. It's best is most tactics to a single, well-defined thing well, and then higher level tactics can combine them.</p>",
        "id": 204411320,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595244739
    }
]