[
    {
        "content": "<p>Dear All,</p>\n<p>I have been struggling with the following problem.  Whenever I want to apply a function in Lean, I am expected to give it its explicit arguments.  In the background, Lean figures out the implicit/typeclass inputs automatically.</p>\n<p>Is there a consistent way to get the list of expressions corresponding to the <em>explicit</em> arguments of a function?</p>\n<p>E.g. on input <code>has_add.add</code> I would like to have twice the same type and skip the typeclass argument.</p>\n<p>I have been failing to get this to work consistently and systematically.  If the question is not clear, I can provide the code that I have, but it is long, messy and dubious.</p>\n<p>Ah, as the stream suggests, I'm eventually looking for a way to do this in <code>meta</code>!</p>\n<p>Thanks!</p>",
        "id": 285200434,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654573231
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.fold_explicit_args\">docs#tactic.fold_explicit_args</a></p>",
        "id": 285220345,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654592068
    },
    {
        "content": "<p>Thanks a lot!  This looks like what I was looking for!</p>",
        "id": 285222195,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654593139
    },
    {
        "content": "<p>For the record, Eric's suggestion seems to be working exactly as I wanted!  Here is an example (mostly for my benefit!):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"k\">do</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">lhs</span> <span class=\"bp\">=</span> <span class=\"bp\">%%</span><span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"bp\">$</span> <span class=\"n\">fold_explicit_args</span> <span class=\"n\">lhs</span> <span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ll</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"bp\">$</span> <span class=\"n\">ll</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]),</span>\n  <span class=\"n\">trace</span> <span class=\"bp\">$</span> <span class=\"n\">fold_explicit_args</span> <span class=\"n\">rhs</span> <span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ll</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"bp\">$</span> <span class=\"n\">ll</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">])</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">[4, 5]</span>\n<span class=\"cm\">[3, 3]</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 285231698,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654598665
    },
    {
        "content": "<p>It does seem odd that we don't just have <code>get_explicit_args :  list expr</code>, from which you could recover the fold version via <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.mfoldl\">docs#list.mfoldl</a>; I guess it's either an efficiency thing, or a bootstrapping thing.</p>",
        "id": 285241240,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654604370
    },
    {
        "content": "<p>The file that you linked to seems to aim directly for this result, so I am guessing that it is the bootstrapping thing: you have to start somewhere.</p>",
        "id": 285262108,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654613364
    },
    {
        "content": "<p>I think in general the meta-programming / parts of the library are less thought out and consistent than the maths stuff, people just added precisely what they needed, when they needed it for a lot of these defs.</p>",
        "id": 285270110,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654616319
    }
]