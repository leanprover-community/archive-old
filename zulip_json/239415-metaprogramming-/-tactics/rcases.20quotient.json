[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>  How hard would it be to make <code>rcases</code> use custom function instead of <code>quot.mk</code>? Can we reuse the same trick <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#simps\">tactic#simps</a> uses to get custom functions instead of projections? It would be nice to get (a) custom <code>mk</code> if exists (e.g., <code>multiset</code>s should use <code>coe</code>, and <code>cardinal</code>s should use <code>cardinal.mk</code>); (b) <code>quotient.mk</code> if possible; (c) <code>quot.mk</code> if (a) and (b) fail.</p>",
        "id": 253660982,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631831424
    },
    {
        "content": "<p>Ideally, we would do <code>whnf</code> on the type in stages, unfolding one definition at a time and looking up to see if any of the intermediate types have a custom recursor (let's say we have a data structure to track these by type name). If it doesn't, we unfold and try again, until we get to <code>quot</code> or an inductive type at which point we use the builtin recursor</p>",
        "id": 253661307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631831611
    },
    {
        "content": "<p>I think I can see how to do this using <code>delta</code> and <code>whnf_no_delta</code>, but the other problem is that doing cases with a custom recursor doesn't always turn out well</p>",
        "id": 253662164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631832166
    },
    {
        "content": "<p>Why do you need a custom recursor?</p>",
        "id": 253662208,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631832206
    },
    {
        "content": "<p>isn't that the proposal?</p>",
        "id": 253662215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631832214
    },
    {
        "content": "<p><code>rcases</code> never directly constructs tuples or constructor applications itself</p>",
        "id": 253662315,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631832272
    },
    {
        "content": "<p>that is all a consequence of the <code>foo.cases_on</code> theorem</p>",
        "id": 253662337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631832286
    },
    {
        "content": "<p>I thought about something like <code>def cardinal.rcases_quot := cardinal.mk</code>. It seems that my understanding of how it works was very wrong.</p>",
        "id": 253662385,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631832317
    },
    {
        "content": "<p>I'm thinking something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">cardinal</span>\n<span class=\"kd\">@[rcases]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">cases_on</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">quotient.induction_on</span> <span class=\"n\">_</span> <span class=\"n\">cardinal.is_equivalent</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 253662986,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631832699
    },
    {
        "content": "<p>and then assuming we can teach <code>cases</code> to use this theorem instead of the default one we're set</p>",
        "id": 253663071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631832729
    },
    {
        "content": "<p>In the case of quotient-like theorems, we're already doing something custom to get this quot behavior, and we call <code>induction</code> internally (which has a slot for the custom induction principle to use), so that's okay. For inductive types, though, we call <code>cases_core</code> which has no such option</p>",
        "id": 253663379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631832917
    },
    {
        "content": "<p>If you can quickly fix quotient types, this would be already a nice improvement, even without custom handling of inductive types.<br>\nP.S.: I hope, some day we'll have a way to override the default induction principle for a type (I mean, make <code>induction</code> automatically use <code>finset.induction_on</code> for <code>finset</code>s etc).</p>",
        "id": 253674510,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631840976
    },
    {
        "content": "<p>But I'm not sure that it makes sense to do it in Lean 3.</p>",
        "id": 253674528,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631840997
    },
    {
        "content": "<p>Yeah, it would be great to use <code>ideal.quotient.mk</code>, so that you have a ring hom applied to <code>x</code>, instead of some low-level quotient constructor.</p>",
        "id": 253685331,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631850582
    }
]