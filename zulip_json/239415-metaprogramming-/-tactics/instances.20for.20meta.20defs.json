[
    {
        "content": "<p>Does the following make sense?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">init.meta.interactive</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">state</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">functor</span> <span class=\"o\">(</span><span class=\"n\">interaction_monad</span> <span class=\"n\">state</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">interaction_monad_fmap</span><span class=\"o\">,</span>\n  <span class=\"n\">map_const</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">interaction_monad_fmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n<p>or is that not useful, won't be accessible to the typeclass system?</p>",
        "id": 212738421,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1602185397
    },
    {
        "content": "<p>I guess it could be something, since there is a <code>meta instance</code> of <code>monad</code> in <code>interaction_monad.lean</code></p>",
        "id": 212739114,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1602185738
    },
    {
        "content": "<p>But I don't understand why <code>interaction_monad.result</code> is a separate defn</p>",
        "id": 212739137,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1602185750
    },
    {
        "content": "<p>It already exists as a consequence of the <code>monad</code> instance</p>",
        "id": 212743248,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602187953
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/instances.20for.20meta.20defs/near/212739137\">said</a>:</p>\n<blockquote>\n<p>But I don't understand why <code>interaction_monad.result</code> is a separate defn</p>\n</blockquote>\n<p>As opposed to what?</p>",
        "id": 212743260,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602187959
    },
    {
        "content": "<p>I guess what I'm trying to understand is whether <code>interactive_monad.result</code> can itself be a monad or a functor. Or something similar. In <a href=\"https://github.com/leanprover-community/lean/issues/476\">lean#476</a>, is there a way to simplify the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">found</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">success</span> <span class=\"n\">r</span> <span class=\"n\">s'</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"o\">(</span><span class=\"n\">success</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">exception</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"n\">s'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">exception</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"kd\">end</span><span class=\"o\">),</span>\n</code></pre></div>",
        "id": 212744979,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1602188956
    },
    {
        "content": "<p>Which as I understand, is just replacing the state in <code>found</code></p>",
        "id": 212745003,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1602188971
    },
    {
        "content": "<p>I wonder if something in <a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/control/except.lean\">https://github.com/leanprover-community/lean/blob/master/library/init/control/except.lean</a> is what I'm after</p>",
        "id": 212750126,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602191640
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> There are combinators that will do most of the variations on that kind of function, but you might want to do different things with the state, e.g. rolling it back in success case but not failure</p>",
        "id": 212754609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602194495
    },
    {
        "content": "<p>Oh you might have found a bug in my PR then</p>",
        "id": 212756150,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602195555
    },
    {
        "content": "<p>I wasn't really thinking about state rollbacks</p>",
        "id": 212756165,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602195571
    },
    {
        "content": "<p>But maybe it doesn't matter because the caller does the rollback anyway?</p>",
        "id": 212756227,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602195603
    },
    {
        "content": "<p>What PR?</p>",
        "id": 212756337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602195675
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/476\">lean#476</a></p>",
        "id": 212758495,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602197291
    },
    {
        "content": "<p>It looks like the operations I'm looking for are</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- capture / pack the result of a tactic</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">capture</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">tactic_result</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">success</span> <span class=\"n\">r</span> <span class=\"n\">s'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">success</span> <span class=\"o\">(</span><span class=\"n\">success</span> <span class=\"n\">r</span> <span class=\"n\">s'</span><span class=\"o\">)</span> <span class=\"n\">s'</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">exception</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"n\">s'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">success</span> <span class=\"o\">(</span><span class=\"n\">exception</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"n\">s'</span><span class=\"o\">)</span> <span class=\"n\">s'</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- release / rethrow / unpack a captured result</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">release</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">tactic_result</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">success</span> <span class=\"n\">r</span> <span class=\"n\">s'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"n\">r</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">e</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>Do these exist already under other names? If not, are the names I propose sensible?</p>",
        "id": 212831931,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602253288
    },
    {
        "content": "<p><code>capture</code> is similar to <code>try_core</code>, but returns more information. I think returning the <code>tactic_state</code> is generally not desirable though</p>",
        "id": 212832350,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602253501
    },
    {
        "content": "<p>The sole purpose of <code>capture</code> is to put the result through <code>release</code> later</p>",
        "id": 212832413,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602253532
    },
    {
        "content": "<p>In particular I'm skeptical about the <code>| e := λ s, e</code> case</p>",
        "id": 212832450,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602253553
    },
    {
        "content": "<p>Which is equivalent to <code>| (exception f p s') := λ s, (exception f p s')</code>, right? Presumably you're worried the second <code>s'</code> should be <code>s</code>?</p>",
        "id": 212832637,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602253632
    },
    {
        "content": "<p><code>capture t</code> is just <code>t &lt;$&gt; read</code>, right?</p>",
        "id": 212832696,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1602253660
    },
    {
        "content": "<p>Doesn't <a href=\"https://leanprover-community.github.io/mathlib_docs/find/read\">docs#read</a> give me a <code>tactic (tactic_state)</code>, not <code>tactic (tactic_result α)</code>?</p>",
        "id": 212832813,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602253690
    },
    {
        "content": "<p>And a tactic is a function from <code>tactic_state</code> to <code>tactic_result α</code>.</p>",
        "id": 212832870,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1602253716
    },
    {
        "content": "<p>oh, I was looking for <code>read</code> but I thought it would be called <code>get</code></p>",
        "id": 212832904,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602253736
    },
    {
        "content": "<p>Ah, I see what you mean</p>",
        "id": 212832908,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602253741
    },
    {
        "content": "<p>Yes, that's right</p>",
        "id": 212832911,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602253744
    },
    {
        "content": "<p>How about <code>release</code> then?</p>",
        "id": 212832925,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602253749
    },
    {
        "content": "<p><code>release r</code> is almost <code>λ _, r</code>, except that it doesn't update the tactic state.</p>",
        "id": 212833034,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1602253798
    },
    {
        "content": "<p>It leaves it unupdated for exceptions, but updates it for success</p>",
        "id": 212833112,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602253814
    },
    {
        "content": "<p>Really I'm just skeptical about this entire endeavor I guess. Manipulating these <code>tactic_state</code>s directly is like a worse version of GOTO.</p>",
        "id": 212833182,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602253841
    },
    {
        "content": "<p>@Reid, did you see the PR?</p>",
        "id": 212833205,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602253854
    },
    {
        "content": "<p>Yes, but I couldn't understand it</p>",
        "id": 212833221,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602253861
    },
    {
        "content": "<p>AFAIU it's a workaround for <code>ext_simplify_core</code> ignoring errors.</p>",
        "id": 212833239,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1602253867
    },
    {
        "content": "<p>Exactly</p>",
        "id": 212833252,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602253871
    },
    {
        "content": "<p><code>ext_simplify_core </code>  uses errors to indicate \"skip this match\"</p>",
        "id": 212833269,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602253883
    },
    {
        "content": "<p>Do we have to work around it? Could we fix it instead?</p>",
        "id": 212833270,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602253883
    },
    {
        "content": "<p>We'd have to change the API significantly</p>",
        "id": 212833336,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602253911
    },
    {
        "content": "<p>At the least, something like this needs <em>way</em> more documentation</p>",
        "id": 212833352,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602253918
    },
    {
        "content": "<p>Where would that documentation go?</p>",
        "id": 212833480,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602253979
    },
    {
        "content": "<p>In probably like an 80-line block comment above the definition of <code>conv.interactive.for</code></p>",
        "id": 212833559,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602254025
    },
    {
        "content": "<p>(note that I'm modelling the name <code>capture</code> from <a href=\"https://outcome.readthedocs.io/en/latest/api.html#outcome.capture\">https://outcome.readthedocs.io/en/latest/api.html#outcome.capture</a>). I suppose to match that, I should use <code>unwrap</code> instead of <code>release</code></p>",
        "id": 212833562,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602254026
    },
    {
        "content": "<p><code>find</code> needs it too</p>",
        "id": 212833577,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602254032
    },
    {
        "content": "<p>This is why I'm suggesting the two defs above - they leave a nice place for some explanatory documentation of why they can be useful</p>",
        "id": 212833752,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602254113
    },
    {
        "content": "<p>Even if one of them is just <code>t &lt;$&gt; read</code></p>",
        "id": 212833789,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602254136
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/instances.20for.20meta.20defs/near/212832637\">said</a>:</p>\n<blockquote>\n<p>Which is equivalent to <code>| (exception f p s') := λ s, (exception f p s')</code>, right? Presumably you're worried the second <code>s'</code> should be <code>s</code>?</p>\n</blockquote>\n<p>I'm definitely less worried if the second <code>s'</code> is <code>s</code>.</p>",
        "id": 212834021,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602254239
    },
    {
        "content": "<p>Because then you can write it using normal tactic functions.</p>",
        "id": 212834084,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602254277
    },
    {
        "content": "<p>That would give an incorrect error message though. I want to see the tactic state at the point the error happened, not at the point that <code>ext_simplify_core</code> did its cleanup after that</p>",
        "id": 212834151,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602254288
    },
    {
        "content": "<p>(whatever that cleanup may be)</p>",
        "id": 212834174,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602254298
    },
    {
        "content": "<p>I don't believe the tactic state in <code>exception</code> is used for anything other than diagnostics</p>",
        "id": 212834218,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602254318
    },
    {
        "content": "<p>Trying to continue from an error state by extracting and using the <code>s</code> of <code>exception</code> would be foolish in any situation - if you recover from an error, you should resume from a known-good state (ie, the beginning of a <code>try</code>)</p>",
        "id": 212834240,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602254331
    },
    {
        "content": "<p>Well this all hurts my head</p>",
        "id": 212834633,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602254520
    },
    {
        "content": "<p>I think maybe only 80 lines will not be enough? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 212834685,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602254530
    },
    {
        "content": "<p>Can you just use mutable variables somehow?</p>",
        "id": 212834720,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602254552
    },
    {
        "content": "<p>I really think that whatever you are trying to do should be possible without this weird non-chronological control flow</p>",
        "id": 212835013,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602254715
    },
    {
        "content": "<p>This isn't non-chronological</p>",
        "id": 212835045,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602254734
    },
    {
        "content": "<p>This is just a rewind, which is exactly what <code>try {}</code> already does - the only difference is I'm rewinding to an error state,  not to the pre-error state</p>",
        "id": 212835141,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602254769
    },
    {
        "content": "<p>Isn't it? You're saving an intermediate <em>state</em> and using it later, after more things might have affected the state in the meantime</p>",
        "id": 212835174,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602254785
    },
    {
        "content": "<p>My claim is that nothing uses that state</p>",
        "id": 212835206,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602254808
    },
    {
        "content": "<p>Yeah but <code>try</code> doesn't give you an object to use in totally uncontrolled ways</p>",
        "id": 212835208,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602254809
    },
    {
        "content": "<p>So then you must not need it, right? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 212835222,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602254820
    },
    {
        "content": "<p>Sorry, my claim is that the only user of the third argument to <code>exception</code> is the debug window printout</p>",
        "id": 212835252,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602254848
    },
    {
        "content": "<p>And for that use case, the old state is the one that matters</p>",
        "id": 212835264,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602254858
    },
    {
        "content": "<p>And you can't just capture the debug window output locally in a thunk or something?</p>",
        "id": 212835357,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602254900
    },
    {
        "content": "<p>Isn't that debug window output exactly <code>tactic_state</code>?</p>",
        "id": 212835404,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602254925
    },
    {
        "content": "<p>(I don't know the answer to this)</p>",
        "id": 212835425,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602254936
    },
    {
        "content": "<p>Like, if the tactic monad was the IO monad, your implementation would be impossible</p>",
        "id": 212835446,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602254944
    },
    {
        "content": "<p>but what you want to do doesn't seem impossible</p>",
        "id": 212835460,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602254951
    },
    {
        "content": "<p>What I want to do would be impossible in the IO monad</p>",
        "id": 212835499,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602254967
    },
    {
        "content": "<p>ok, I give up</p>",
        "id": 212835524,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602254978
    },
    {
        "content": "<p>If I have a <code>print_with_commas some_monad</code> that ignores errors in <code>some_monad</code> and keeps printing commas, there's nothing I can do to stop those commas being printed</p>",
        "id": 212835608,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602255003
    },
    {
        "content": "<p>But in the tactic monad, I can (and need to) rollback time to before the commas are printed. <code>try {}</code> is also not possible in the IO monad</p>",
        "id": 212835656,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602255042
    },
    {
        "content": "<p>Thanks for the feedback, anyway - I'll see if I can make the intent clearer</p>",
        "id": 212838129,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602256236
    },
    {
        "content": "<p>I still think it would be better to fix the API of <code>ext_simplify_core</code> so that it doesn't swallow all exceptions--this might fix other bugs at the same time.</p>",
        "id": 212840086,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602257080
    },
    {
        "content": "<p>My main resistance to that is <code>ext_simplify_core</code> being written in C++</p>",
        "id": 212840169,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602257119
    },
    {
        "content": "<p>But yes, I suppose the signature of  the <code>pre</code> and <code>post</code>callbacks to <code>ext_simplify_core</code> could be changed from returning <code>tactic (α × expr × option expr × bool)</code> to returning <code>tactic $ option (α × expr × option expr × bool)</code>, where <code>none</code> in the new version means monadic failure means together</p>",
        "id": 212840390,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602257203
    },
    {
        "content": "<p>But that requires changing every single caller of <code>ext_simplify_core</code>, which is something I don't feel at all comfortable doing.</p>",
        "id": 212840738,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602257368
    },
    {
        "content": "<p>I've updated the PR code with some more comments, and the PR description to summarize the alternative I describe above.</p>",
        "id": 212845710,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602259646
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/instances.20for.20meta.20defs/near/212840738\">said</a>:</p>\n<blockquote>\n<p>But that requires changing every single caller of <code>ext_simplify_core</code>, which is something I don't feel at all comfortable doing.</p>\n</blockquote>\n<p>There aren't that many, because it's a very unwieldy API</p>",
        "id": 212892266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602292184
    },
    {
        "content": "<p>There are a fair number of transitive callers that would change too</p>",
        "id": 212903151,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602313931
    },
    {
        "content": "<p>Would a suitable compromise be to:</p>\n<ul>\n<li>Define a wrapper, <code>ext_simplify_core_strict</code>, which does the monad tricks currently in the PR</li>\n<li>Change find and for to use this def instead</li>\n<li>Slowly convert other callers to use the new API over multiple PRs</li>\n<li>Change the C++ API to make ext_simplify_core_strict the default behavior, once all callers are changed</li>\n</ul>\n<p>I don't want to have to perform a massive refactor to fix an annoying bug - I'd prefer to fix the bug first, and leave breadcrumbs for someone more competent to perform the refactor</p>",
        "id": 212903248,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602314188
    },
    {
        "content": "<p>(note that this was merged in the end, and <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>  pointed out that <code>ext_simplify_core</code> not only discards errors, but rolls back any changes to the tactic state)</p>",
        "id": 213134796,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602584326
    }
]