[
    {
        "content": "<p>Can someone please hack a tactic together that adds <code>f x</code> to the tactic state for all <code>f</code> and <code>x</code> in the local context for which <code>f x</code> typechecks? (It shouldn't throw away <code>f</code> or <code>x</code>.)</p>",
        "id": 244568922,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625147474
    },
    {
        "content": "<p>Recursively?</p>",
        "id": 244570166,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625147916
    },
    {
        "content": "<p>No, I can call <code>repeat { foo }</code> if I need that.</p>",
        "id": 244570247,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625147947
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">lean</span> <span class=\"n\">lean.parser</span> <span class=\"n\">tactic</span> <span class=\"n\">interactive</span> <span class=\"n\">interactive.types</span> <span class=\"n\">expr</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.specialize_all</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">loc</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">val</span> <span class=\"bp\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">hs</span> <span class=\"bp\">←</span> <span class=\"n\">l.get_locals</span><span class=\"o\">,</span>\n  <span class=\"n\">hs.mmap'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"n\">expr.mk_app</span> <span class=\"n\">h</span> <span class=\"o\">[</span><span class=\"n\">val</span><span class=\"o\">],</span>\n      <span class=\"n\">t'</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n      <span class=\"n\">note</span> <span class=\"o\">(</span><span class=\"n\">h.local_pp_name</span> <span class=\"bp\">++</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">none</span> <span class=\"n\">h'</span><span class=\"o\">))</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic.interactive</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">specialize_all</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">loc</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">location</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">tactic.specialize_all</span> <span class=\"n\">val</span> <span class=\"n\">loc</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">tactic.interactive</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">specialize_all</span> <span class=\"n\">x</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"n\">extract_goal</span><span class=\"o\">,</span>\n    <span class=\"n\">trivial</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">example {α : Type ?} {β : Type ?} {γ : Type ?}</span>\n<span class=\"sd\">  (f g : α → β)</span>\n<span class=\"sd\">  (h : β → γ)</span>\n<span class=\"sd\">  (x y : α)</span>\n<span class=\"sd\">  (f.x g.x : β)</span>\n<span class=\"sd\">  (h.x : γ) :</span>\n<span class=\"sd\">  true :=</span>\n<span class=\"sd\">begin</span>\n<span class=\"sd\">  admit,</span>\n<span class=\"sd\">end</span>\n<span class=\"sd\">-/</span>\n</code></pre></div>",
        "id": 244577958,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1625150807
    },
    {
        "content": "<p>As you can see, it's not perfect because applying x to h shouldn't work.</p>",
        "id": 244578370,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1625150957
    },
    {
        "content": "<p>Is there an easy way to fix that?</p>",
        "id": 244582454,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625152362
    },
    {
        "content": "<p>Note that the version that I'm interested in is morally <code>specialize_all * at *</code>.</p>",
        "id": 244582511,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625152388
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">lean</span> <span class=\"n\">lean.parser</span> <span class=\"n\">tactic</span> <span class=\"n\">interactive</span> <span class=\"n\">interactive.types</span> <span class=\"n\">expr</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.specialize_single</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">loc</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">val</span> <span class=\"bp\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">valt</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">val</span><span class=\"o\">,</span>\n  <span class=\"n\">hs</span> <span class=\"bp\">←</span> <span class=\"n\">l.get_locals</span><span class=\"o\">,</span>\n  <span class=\"n\">hs.mmap'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">do</span>\n    <span class=\"n\">ht</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">try</span> <span class=\"bp\">$</span> <span class=\"k\">match</span> <span class=\"n\">ht</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pi</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">vt</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n        <span class=\"n\">is_def_eq</span> <span class=\"n\">vt</span> <span class=\"n\">valt</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">note</span> <span class=\"o\">(</span><span class=\"n\">h.local_pp_name</span> <span class=\"bp\">++</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"n\">h.mk_app</span> <span class=\"o\">[</span><span class=\"n\">val</span><span class=\"o\">])</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n      <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">vt</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n        <span class=\"n\">is_def_eq</span> <span class=\"n\">vt</span> <span class=\"n\">valt</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">note</span> <span class=\"o\">(</span><span class=\"n\">h.local_pp_name</span> <span class=\"bp\">++</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"n\">h.mk_app</span> <span class=\"o\">[</span><span class=\"n\">val</span><span class=\"o\">])</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n    <span class=\"kd\">end</span><span class=\"o\">)</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.specialize_all</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">simp_arg_type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">loc</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"o\">(</span><span class=\"n\">lp</span><span class=\"o\">,</span> <span class=\"n\">ln</span><span class=\"o\">,</span> <span class=\"n\">ln'</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">decode_simp_arg_list</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">lp.mmap'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"k\">do</span>\n    <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"k\">if</span> <span class=\"n\">e.is_local_constant</span> <span class=\"k\">then</span> <span class=\"n\">tactic.specialize_single</span> <span class=\"n\">e.local_pp_name</span> <span class=\"n\">l</span>\n      <span class=\"k\">else</span> <span class=\"n\">pure</span> <span class=\"o\">()),</span>\n  <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">pure</span> <span class=\"o\">()</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n    <span class=\"n\">ls</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.local_context</span><span class=\"o\">,</span>\n    <span class=\"n\">ls.mmap'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"k\">do</span>\n      <span class=\"k\">if</span> <span class=\"n\">expr.is_local_constant</span> <span class=\"n\">e</span> <span class=\"k\">then</span> <span class=\"n\">tactic.specialize_single</span> <span class=\"n\">e.local_pp_name</span> <span class=\"n\">l</span> <span class=\"k\">else</span> <span class=\"n\">pure</span> <span class=\"o\">()),</span>\n    <span class=\"n\">pure</span> <span class=\"o\">())</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic.interactive</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">specialize_all1</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">loc</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">location</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">tactic.specialize_single</span> <span class=\"n\">val</span> <span class=\"n\">loc</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">specialize_all</span> <span class=\"o\">(</span><span class=\"n\">vals</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">simp_arg_list</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">loc</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">location</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">tactic.specialize_all</span> <span class=\"n\">vals</span> <span class=\"n\">loc</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">tactic.interactive</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">specialize_all</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"n\">extract_goal</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h.z</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">example {α : Type ?} {β : Type ?} {γ : Type ?}</span>\n<span class=\"sd\">  (f g : α → β)</span>\n<span class=\"sd\">  (h : β → γ)</span>\n<span class=\"sd\">  (x y : α)</span>\n<span class=\"sd\">  (z f.x g.x f.y g.y : β)</span>\n<span class=\"sd\">  (h.z : γ) :</span>\n<span class=\"sd\">  γ :=</span>\n<span class=\"sd\">begin</span>\n<span class=\"sd\">  admit,</span>\n<span class=\"sd\">end</span>\n<span class=\"sd\">-/</span>\n</code></pre></div>",
        "id": 244597186,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1625158878
    },
    {
        "content": "<p>It can be made neater with <code>loc.try_apply</code>, but this works for your specifications at least.</p>",
        "id": 244597230,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1625158898
    },
    {
        "content": "<p>And works if you repeat it, as you expect.</p>",
        "id": 244597336,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1625158933
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> wonderful! thank you so much!</p>",
        "id": 244599303,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625159792
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> one more plea:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">surjective</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">surjective</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">surjective</span> <span class=\"n\">at</span> <span class=\"n\">hyp</span><span class=\"o\">,</span> <span class=\"c1\">-- can we avoid this step?</span>\n  <span class=\"n\">specialize_all</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.auto_cases</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.auto_cases</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 244601947,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625161095
    },
    {
        "content": "<p>I think that currently it is not \"aggresive\" enough. It only works for things that are visibly pi-like.</p>",
        "id": 244602009,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625161127
    },
    {
        "content": "<p>how docs <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#specialize\">tactic#specialize</a> do it? Can we just copy the approach used there?</p>",
        "id": 244606034,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625163077
    },
    {
        "content": "<p><code>specialize f x y z</code> does it by basically doing <code>replace f := f x y z</code>. I don't know what happens if one did a type-illogical <code>specialize f f nat</code> or something like that. So <code>specialize</code> does no typechecking other than what happens in <code>i_to_expr</code>. I can fake it with something like <code>e &lt;- </code>(%%hyp %%val)` and hope that this deals with reducibility properly.</p>",
        "id": 244608030,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1625164097
    },
    {
        "content": "<p>Should be enough to <code>whnf</code> before the <code>match</code> with the right reducibility setting.</p>",
        "id": 244608565,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1625164368
    },
    {
        "content": "<p>I tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">ht'</span> <span class=\"bp\">←</span> <span class=\"n\">whnf</span> <span class=\"n\">ht</span> <span class=\"n\">transparency.reducible</span><span class=\"o\">,</span>\n    <span class=\"n\">try</span> <span class=\"bp\">$</span> <span class=\"k\">match</span> <span class=\"n\">ht'</span> <span class=\"k\">with</span>\n</code></pre></div>\n<p>but that didn't help</p>",
        "id": 244614792,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625167457
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">lean</span> <span class=\"n\">lean.parser</span> <span class=\"n\">tactic</span> <span class=\"n\">interactive</span> <span class=\"n\">interactive.types</span> <span class=\"n\">expr</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.specialize_single</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">loc</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">val</span> <span class=\"bp\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">valt</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">val</span><span class=\"o\">,</span>\n  <span class=\"n\">hs</span> <span class=\"bp\">←</span> <span class=\"n\">l.get_locals</span><span class=\"o\">,</span>\n  <span class=\"n\">hs.mmap'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n    <span class=\"n\">ht</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">h</span> <span class=\"bp\">%%</span><span class=\"n\">val</span><span class=\"o\">),</span>\n    <span class=\"n\">et</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">note</span> <span class=\"o\">(</span><span class=\"n\">h.local_pp_name</span> <span class=\"bp\">++</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">none</span> <span class=\"n\">e</span><span class=\"o\">))</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.specialize_all</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">simp_arg_type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">loc</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"o\">(</span><span class=\"n\">lp</span><span class=\"o\">,</span> <span class=\"n\">ln</span><span class=\"o\">,</span> <span class=\"n\">ln'</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">decode_simp_arg_list</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">lp.mmap'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"k\">do</span>\n    <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"k\">if</span> <span class=\"n\">e.is_local_constant</span> <span class=\"k\">then</span> <span class=\"n\">tactic.specialize_single</span> <span class=\"n\">e.local_pp_name</span> <span class=\"n\">l</span>\n      <span class=\"k\">else</span> <span class=\"n\">pure</span> <span class=\"o\">()),</span>\n  <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">pure</span> <span class=\"o\">()</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n    <span class=\"n\">ls</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.local_context</span><span class=\"o\">,</span>\n    <span class=\"n\">ls.mmap'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"k\">do</span>\n      <span class=\"k\">if</span> <span class=\"n\">expr.is_local_constant</span> <span class=\"n\">e</span> <span class=\"k\">then</span> <span class=\"n\">tactic.specialize_single</span> <span class=\"n\">e.local_pp_name</span> <span class=\"n\">l</span> <span class=\"k\">else</span> <span class=\"n\">pure</span> <span class=\"o\">()),</span>\n    <span class=\"n\">pure</span> <span class=\"o\">())</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic.interactive</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">specialize_all1</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">loc</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">location</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">tactic.specialize_single</span> <span class=\"n\">val</span> <span class=\"n\">loc</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">specialize_all</span> <span class=\"o\">(</span><span class=\"n\">vals</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">simp_arg_list</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">loc</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">location</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">tactic.specialize_all</span> <span class=\"n\">vals</span> <span class=\"n\">loc</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">tactic.interactive</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">surjective</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">surjective</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize_all</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.auto_cases</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.auto_cases</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 244616506,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1625168375
    },
    {
        "content": "<p>So my brute-force \"create pexpr, elaborate it, make sure it is valid type\" approach also works.</p>",
        "id": 244616639,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1625168427
    },
    {
        "content": "<p>Great! That does exactly what I want!</p>",
        "id": 244617208,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625168755
    },
    {
        "content": "<p>I think this is a tactic that could potentially be nice to add to <code>tidy</code>.</p>",
        "id": 244670264,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625212487
    },
    {
        "content": "<p>But there is one catch: currently, if you have <code>f : X -&gt; Y</code> and <code>x : X</code>, then repeatedly calling <code>specialize_all [*] at *</code> will add many copies of <code>f x : Y</code>. So we somehow need to teach the tactic that it should fail if it isn't adding anything \"new\".</p>",
        "id": 244670332,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625212558
    },
    {
        "content": "<p>But even then there is a catch. Because with endomorphisms <code>f : X -&gt; X</code> and <code>x : X</code>, you will end up getting <code>f (f (f x))</code> etc...</p>",
        "id": 244670390,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625212591
    },
    {
        "content": "<p>I'm not sure whether such loops can be easily detected. So we might need to run the tactic on some <code>gas</code> (and if it is added to <code>tidy</code>, then <code>tidy</code> would need to run on gas as well).</p>",
        "id": 244670425,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625212635
    },
    {
        "content": "<p>Finally, I think that <code>tidy</code> could use a <code>auto_choose</code> tactic, that breaks open existential hypotheses, even if the goal is a type, instead of a prop.</p>",
        "id": 244670512,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625212688
    },
    {
        "content": "<p>With a combi of <code>specialize_all</code> and <code>auto_choose</code>, we could have a <code>tidy</code> that automatically proves <code>surjective (g \\circ f) -&gt; surjective g</code>.</p>",
        "id": 244670552,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625212729
    },
    {
        "content": "<p>Why do you need <code>auto_choose</code> for that surjective proof?</p>",
        "id": 244685408,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625222453
    },
    {
        "content": "<p>Because <code>fsplit</code> might turn <code>\\ex x, f x = y</code> into two goals <code>x : X</code> and <code>f m_1? = y</code> before we get a chance to do <code>cases</code> on the existential hyp.</p>",
        "id": 244687084,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625223724
    },
    {
        "content": "<p>So then you are left with the <code>X</code> goal, and you need to use choice to extract a witness out of the existential hyp.</p>",
        "id": 244687140,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625223746
    },
    {
        "content": "<p>I agree that this will produce a \"overpowered\" proof, and choice can be avoided. But I don't really care too much, in the case of <code>tidy</code> proofs.</p>",
        "id": 244687171,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625223778
    }
]