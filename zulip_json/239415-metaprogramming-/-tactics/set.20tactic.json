[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"329425\">@Peter Nelson</span> , <span class=\"user-mention\" data-user-id=\"252278\">@Mathieu Guay-Paquet</span> and I have been working off-and-on on a tactic for automatically discharging goals involving set equalities and inequalities.  Sets come up often in matroid theory and in combinatorics, and we've gotten tired of manually solving these goals as they come up all the time and devolve into long rewrite chains using the set lemmas.</p>\n<p>Ideally, we'd like to get some sort of set automation into mathlib eventually; we've (minimally) tried it out in our own work, but our tactic is nowhere near production ready.  If anyone's interested, especially if you use sets on a regular basis, we would really appreciate it if you could give our tactic a spin and leave feedback: <a href=\"https://github.com/apnelson1/lean-set-tactic\">https://github.com/apnelson1/lean-set-tactic</a> -- thanks!</p>",
        "id": 246328659,
        "sender_full_name": "Edward Lee",
        "timestamp": 1626534043
    },
    {
        "content": "<p>Once upon a time the <code>finish</code> tactic was intended for this</p>",
        "id": 246328903,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626534140
    },
    {
        "content": "<p>is there more to it than <code>ext; tauto</code>?</p>",
        "id": 246328908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626534159
    },
    {
        "content": "<p>ideally the <code>tauto</code> tactic itself would be adapted to work on arbitrary boolean algebras</p>",
        "id": 246329021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626534324
    },
    {
        "content": "<p>We've found <code>finish</code> to be too slow and <code>tauto</code> doesn't fill in/automatically specialize <code>forall</code> hypotheses.  It currently is a wrapper around <code>tauto</code> that repeatedly does <code>ext</code>, <code>intro</code> in some order and automatically fills in hypotheses.</p>",
        "id": 246329023,
        "sender_full_name": "Edward Lee",
        "timestamp": 1626534334
    },
    {
        "content": "<p>what kind of lemmas require you to fill foralls?</p>",
        "id": 246329071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626534370
    },
    {
        "content": "<p>we rewrite set constraints using set extensionality so that finish/tauto can work -- <a href=\"https://github.com/apnelson1/lean-set-tactic/blob/main/src/extensionality.lean\">https://github.com/apnelson1/lean-set-tactic/blob/main/src/extensionality.lean</a> -- which puts foralls everywhere.</p>",
        "id": 246329146,
        "sender_full_name": "Edward Lee",
        "timestamp": 1626534509
    },
    {
        "content": "<p>I see, so only the trivial kind, you aren't trying to actually solve arbitrary FOL problems</p>",
        "id": 246329160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626534557
    },
    {
        "content": "<p>our tactic started life as a thin wrapper around <code>finish</code>, and at least in an earlier commit we've found something like this broke tauto.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">boolean_algebra</span> <span class=\"n\">α</span><span class=\"o\">]</span>  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">A</span> <span class=\"bp\">≤</span> <span class=\"n\">B</span> <span class=\"bp\">→</span>\n  <span class=\"n\">B</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span> <span class=\"bp\">→</span>\n  <span class=\"n\">C</span> <span class=\"bp\">≤</span> <span class=\"n\">D</span> <span class=\"bp\">⊓</span> <span class=\"n\">E</span> <span class=\"bp\">→</span>\n  <span class=\"n\">D</span> <span class=\"bp\">≤</span> <span class=\"n\">F</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⊓</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">tactic.timetac</span> <span class=\"s2\">\"fast\"</span> <span class=\"bp\">$</span> <span class=\"bp\">`</span><span class=\"o\">[(</span><span class=\"k\">do</span>\n    <span class=\"n\">types</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">gather_types</span><span class=\"o\">,</span>\n    <span class=\"n\">types.mmap</span> <span class=\"n\">rewrite_for_type</span><span class=\"o\">,</span>\n    <span class=\"n\">tactic.skip</span><span class=\"o\">),</span>\n  <span class=\"n\">intros</span> <span class=\"n\">H1</span> <span class=\"n\">H2</span> <span class=\"n\">H3</span> <span class=\"n\">H4</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- tauto!, -- here fails</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intros</span> <span class=\"n\">e</span><span class=\"bp\">;</span>\n  <span class=\"n\">specialize</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"n\">specialize</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"n\">specialize</span> <span class=\"o\">(</span><span class=\"n\">H3</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"n\">specialize</span> <span class=\"o\">(</span><span class=\"n\">H4</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">tauto</span><span class=\"bp\">!</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246329162,
        "sender_full_name": "Edward Lee",
        "timestamp": 1626534575
    },
    {
        "content": "<p>If you have indexed unions or something then I can imagine real FOL stuff arising</p>",
        "id": 246329165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626534583
    },
    {
        "content": "<p>are you using an unusual has_mem instance to make that proof strategy work on arbitrary boolean algebras?</p>",
        "id": 246329292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626534725
    },
    {
        "content": "<p>no, we don't have that, though those do come up -- we're just trying to solve all the trivial set goals that come up all the time.</p>",
        "id": 246329303,
        "sender_full_name": "Edward Lee",
        "timestamp": 1626534733
    },
    {
        "content": "<p>and yeah, <span class=\"user-mention\" data-user-id=\"252278\">@Mathieu Guay-Paquet</span> defined a has_mem for boolean algebras -- it's at priority 90 so it doesn't conflict with anything else.</p>",
        "id": 246329318,
        "sender_full_name": "Edward Lee",
        "timestamp": 1626534778
    },
    {
        "content": "<p>you can also make it a local instance if it's only needed for the tactic</p>",
        "id": 246329326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626534792
    },
    {
        "content": "<p>does local work across lean files in the same subfolder?</p>",
        "id": 246329383,
        "sender_full_name": "Edward Lee",
        "timestamp": 1626534848
    },
    {
        "content": "<p>no but you can use <code>local attribute [instance] my_instance</code> in all relevant files</p>",
        "id": 246329406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626534910
    },
    {
        "content": "<p>Also, you might not need the has_mem instance at all, if you just use le instead</p>",
        "id": 246329440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626534963
    },
    {
        "content": "<p>that is, you keep the <code>boolalg_ext_lemmas</code> but write the lemmas with universally quantified <code>le</code></p>",
        "id": 246329479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626535017
    },
    {
        "content": "<p>and then it doesn't need to be a class, it can just be regular lemmas on <code>boolean_algebra</code></p>",
        "id": 246329487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626535038
    },
    {
        "content": "<p>oh, you are using ultrafilters as members. Well the principle still applies</p>",
        "id": 246329569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626535156
    },
    {
        "content": "<p>yeah, I see, but IIRC we really wanted elements as we're mostly dealing with sets / finsets.  <span class=\"user-mention\" data-user-id=\"252278\">@Mathieu Guay-Paquet</span> wrote some technical lemmas using ultrafilters to get a notion of elements for boolean algebras which is why we've got <code>has_mem</code>.</p>",
        "id": 246329587,
        "sender_full_name": "Edward Lee",
        "timestamp": 1626535182
    },
    {
        "content": "<p>the various <code>boolalg_ext_lemmas</code> typeclasses is us using typeclass inference to automatically select the right set of lemmas to rewrite by.</p>",
        "id": 246329639,
        "sender_full_name": "Edward Lee",
        "timestamp": 1626535246
    },
    {
        "content": "<p>sure, but this is a tactic internal thing. I think the external view should just be, you need a <code>boolean_algebra</code> instance and that's it</p>",
        "id": 246329654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626535273
    },
    {
        "content": "<p>oh yeah for sure.  The only thing this is meant to be external is the solver itself.</p>",
        "id": 246329663,
        "sender_full_name": "Edward Lee",
        "timestamp": 1626535291
    },
    {
        "content": "<p>We were going to hide all the special typeclasses somehow but we haven't gotten around to doing that yet.</p>",
        "id": 246329682,
        "sender_full_name": "Edward Lee",
        "timestamp": 1626535322
    },
    {
        "content": "<p>speaking of, is there a way to mark all definitions as local to a subfolder and its subdirectories or do we just have to use <code>local attribute</code> everywhere?</p>",
        "id": 246329745,
        "sender_full_name": "Edward Lee",
        "timestamp": 1626535378
    },
    {
        "content": "<p>so when you instantiate it on sets you will end up with some weird statements about ultrafilters of sets, but it doesn't matter as long as you have reduced everything to logic</p>",
        "id": 246329747,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626535382
    },
    {
        "content": "<p>but again, it would be a lot more straightforward to just have tauto do what it does but with boolean algebra lemmas instead of prop calc</p>",
        "id": 246329766,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626535424
    },
    {
        "content": "<p>You can put the local attributes in a locale and use <code>open_locale</code> to abbreviate a whole group of local instances and things</p>",
        "id": 246329825,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626535480
    },
    {
        "content": "<p>Cool.  Yeah, we talked to Rob earlier this year about tauto and his suggestion then was to wrap around tauto instead of modifying it as tauto looks complicated...</p>",
        "id": 246329987,
        "sender_full_name": "Edward Lee",
        "timestamp": 1626535732
    },
    {
        "content": "<p>We do try to avoid the ultrafilters on sets with instances of <code>boolalg_ext_lemmas</code> for <code>set T</code> and <code>finset T</code> so that the tactic does work as expected when the goal and hypothesis do have concrete sets and elements of those sets.</p>",
        "id": 246330206,
        "sender_full_name": "Edward Lee",
        "timestamp": 1626536064
    },
    {
        "content": "<p>I'm actually thinking of extending <code>itauto</code> for this instead of <code>tauto</code>, which is more of a heuristic procedure</p>",
        "id": 246330216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626536101
    },
    {
        "content": "<p><code>itauto</code> is currently for intuitionistic logic only but you can easily make it complete for classical logic by starting with <code>by_contradiction</code> and then running <code>itauto</code> on the result</p>",
        "id": 246330231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626536146
    },
    {
        "content": "<p>in particular, <code>itauto</code> does all its work on a shadow syntax, and replays the proof over <code>Prop</code>. So it would not be hard to replay the proof over some other boolean algebra instead</p>",
        "id": 246330279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626536211
    },
    {
        "content": "<p>and hey, you get a heyting algebra prover for free</p>",
        "id": 246330286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626536224
    },
    {
        "content": "<p>(do we even have heyting algebras?)</p>",
        "id": 246330290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626536250
    },
    {
        "content": "<p>There was a PR on them but it seems to be abandoned.</p>",
        "id": 246330296,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1626536264
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/5527\">#5527</a></p>",
        "id": 246330301,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1626536274
    },
    {
        "content": "<p>Yeah, when we looked at tauto we thought maybe it would be easy to extend it but at the time it looked like it was really tied into <code>Prop</code>.  The proofs for boolean algebras really ought to be the same as those for <code>Prop</code> so <code>itauto</code> ought to work well here.</p>",
        "id": 246330413,
        "sender_full_name": "Edward Lee",
        "timestamp": 1626536425
    },
    {
        "content": "<p>I guess all you'd really need to do is to select the boolean algebra/set/finset proof terms instead of the prop proof terms and you're all good.</p>",
        "id": 246330486,
        "sender_full_name": "Edward Lee",
        "timestamp": 1626536564
    },
    {
        "content": "<p>Cool, that's great to hear!  Yeah, we really just wrap tauto, so a more principled way of dealing with boolean algebras is nice to have, and <code>itauto</code> already has the reflection infrastructure all set up.</p>",
        "id": 246330640,
        "sender_full_name": "Edward Lee",
        "timestamp": 1626536828
    },
    {
        "content": "<p>BTW, Boolean algebras in mathlib were recently refactored so that they extend <a href=\"https://leanprover-community.github.io/mathlib_docs/find/generalized_boolean_algebra\">docs#generalized_boolean_algebra</a>, which are basically Boolean algebras without a <code>top</code>. I don't know if that's relevant for your tactic though.</p>",
        "id": 246330719,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1626536978
    },
    {
        "content": "<p>I don't think it affects us too much but we could probably split how we deal with boolean algebras into those with top and those without (we have to do so anyways as finsets might not have top)</p>",
        "id": 246330871,
        "sender_full_name": "Edward Lee",
        "timestamp": 1626537147
    },
    {
        "content": "<p>also <code>itauto</code> is pretty good about only using the rules it actually needs to use to destruct the goal, so I think if the input doesn't reference top then it won't use any top rules</p>",
        "id": 246333142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626540263
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> So on that note on <code>itauto</code>, now that I have a chance at looking at things again, what would be required to get it to work for boolean algebras/sets in detail?  I figure I need new versions of <code>reify</code> and <code>apply_proof</code> specialized to the right terms, but I imagine there's some setup work in <code>itauto</code> itself that needs to change?</p>",
        "id": 271347300,
        "sender_full_name": "Edward Lee",
        "timestamp": 1644440747
    },
    {
        "content": "<p>Specifically, what do you think needs to change in here:<a href=\"https://github.com/leanprover-community/mathlib/blob/2b9aca75e6c1a1dc6b5b1b80734b05b3e07d193f/src/tactic/itauto.lean#L592-L643\">https://github.com/leanprover-community/mathlib/blob/2b9aca75e6c1a1dc6b5b1b80734b05b3e07d193f/src/tactic/itauto.lean#L592-L643</a></p>",
        "id": 271347483,
        "sender_full_name": "Edward Lee",
        "timestamp": 1644440848
    },
    {
        "content": "<p>Since we last talked, <code>itauto</code> has grown the ability to prove classical theorems by using decidable instances and/or introducing its own</p>",
        "id": 271348190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644441179
    },
    {
        "content": "<p>Most of that code is constructing the initial context from the hypotheses, but it's not clear to me that this is still applicable in a different heyting algebra</p>",
        "id": 271348382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644441253
    },
    {
        "content": "<p>How would you do ND proofs in the target algebra? How is the context of assumptions encoded?</p>",
        "id": 271348462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644441294
    },
    {
        "content": "<p>I see...for us, our context would be the set of Props in the hypothesis tactic state that deal exclusively with sets and set membership.  I imagine most of the ND rules for Prop would also hold over set (membership), after observing that <code>P \\subset Q</code> &lt;--&gt; <code>forall x, x \\in P \\implies x \\in Q</code>, with some fussing around necessary.</p>",
        "id": 271441848,
        "sender_full_name": "Edward Lee",
        "timestamp": 1644504877
    },
    {
        "content": "<p>Essentially I'm trying to figure out if we should keep our existing tactic and merge it in to mathlib or work something out a little cleaner using the infrastructure in <code>itauto</code></p>",
        "id": 271441901,
        "sender_full_name": "Edward Lee",
        "timestamp": 1644504906
    },
    {
        "content": "<p>For set membership problems specifically, does it help to do <code>simp [set.ext_iff, set.subset_def]; intro; itauto</code>?</p>",
        "id": 271462443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644513079
    },
    {
        "content": "<p>Not really.  I don't have a set membership example off hand, but this simplifies after <code>simp [set.ext_iff, set.subset_def]; repeat {intro}</code> to a set membership question:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">B</span> <span class=\"bp\">→</span>\n  <span class=\"n\">B</span> <span class=\"bp\">⊆</span> <span class=\"n\">C</span> <span class=\"bp\">→</span>\n  <span class=\"n\">C</span> <span class=\"bp\">⊆</span> <span class=\"n\">D</span> <span class=\"bp\">∩</span> <span class=\"n\">E</span> <span class=\"bp\">→</span>\n  <span class=\"n\">D</span> <span class=\"bp\">⊆</span> <span class=\"n\">F</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∅</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> tactic.timetac \"slow\" $ set_solver, -/</span>\n   <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">set.ext_iff</span><span class=\"o\">,</span> <span class=\"n\">set.subset_def</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">intro</span><span class=\"o\">},</span> <span class=\"n\">itauto</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 276404267,
        "sender_full_name": "Edward Lee",
        "timestamp": 1648071519
    },
    {
        "content": "<p>itauto fails in this state:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n<span class=\"n\">_inst_1</span><span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span>\n<span class=\"n\">ABCDEFG</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span>\n<span class=\"n\">ᾰ</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span>\n<span class=\"n\">ᾰ_1</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span>\n<span class=\"n\">ᾰ_2</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">D</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">E</span>\n<span class=\"n\">ᾰ_3</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">F</span>\n<span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">ᾰ_4</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span>\n<span class=\"n\">ᾰ_5</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 276404325,
        "sender_full_name": "Edward Lee",
        "timestamp": 1648071552
    },
    {
        "content": "<p>Something like <code>finish</code> works here, probably I assume from instantiating the foralls in the hypothesis and deriving a contradiction.</p>",
        "id": 276404396,
        "sender_full_name": "Edward Lee",
        "timestamp": 1648071596
    }
]