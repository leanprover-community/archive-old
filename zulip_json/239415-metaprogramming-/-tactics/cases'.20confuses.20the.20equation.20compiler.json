[
    {
        "content": "<p>I'm trying to fix an unfortunate interaction between <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.cases'\">docs#tactic.interactive.cases'</a> and the equation compiler. <code>cases'</code> is a variant of the <code>induction'</code> tactic which is supposed to be a drop-in replacement for <code>cases</code>. However, using <code>cases'</code> in a definition involving the equation compiler may fail where <code>cases</code> would succeed. Afaict, the problem is that <code>cases'</code> generates a different proof term than <code>cases</code> and the termination checker can't process that term.</p>\n<p>Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.induction</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.simp_result</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">btree</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">empty</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">btree</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span>     <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">btree</span> <span class=\"bp\">→</span> <span class=\"n\">btree</span> <span class=\"bp\">→</span> <span class=\"n\">btree</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mirror</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">btree</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">btree</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">btree.empty</span>        <span class=\"o\">:=</span> <span class=\"n\">btree.empty</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">btree.node</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">btree.node</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">mirror</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mirror</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">is_full</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">btree</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">is_full</span> <span class=\"n\">btree.empty</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">btree</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">is_full</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">is_full</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hiff</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">btree.empty</span> <span class=\"bp\">↔</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">btree.empty</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_full</span> <span class=\"o\">(</span><span class=\"n\">btree.node</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_full_mirror</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">btree</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">is_full</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">is_full</span> <span class=\"o\">(</span><span class=\"n\">mirror</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">btree.empty</span>        <span class=\"o\">:=</span> <span class=\"n\">id</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">btree.node</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mirror</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp_result</span> <span class=\"o\">{</span> <span class=\"n\">cases'</span> <span class=\"n\">ht</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hl</span> <span class=\"n\">hr</span> <span class=\"n\">hiff</span> <span class=\"o\">},</span>\n    <span class=\"n\">tactic.trace_result</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">is_full.node</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">is_full_mirror</span> <span class=\"n\">_</span> <span class=\"n\">hr</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">is_full_mirror</span> <span class=\"n\">_</span> <span class=\"n\">hl</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>The last lemma fails because the equation compiler doesn't realise that <code>hr</code> and <code>hl</code> are about trees that are structurally smaller than <code>node a l r</code>. If you replace <code>cases'</code> with <code>cases</code>, the proof goes through. Any ideas how I could address this?</p>",
        "id": 238226347,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1620688760
    },
    {
        "content": "<p>(deleted) (Zulip strikes again)</p>",
        "id": 238302205,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1620738038
    }
]