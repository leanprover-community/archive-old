[
    {
        "content": "<p>In PR <a href=\"https://github.com/leanprover-community/mathlib/pull/16449\">#16449</a>, tactic <code>mono*</code> gives 2 extra typeclass goals. I tried to find out what happened and wrote these for debugging.<br>\n<a href=\"/user_uploads/3121/O1jZJNPR_KjFcy6Qz0dCybJT/image.png\">image.png</a><br>\n<a href=\"/user_uploads/3121/MJgjw4IrJtTrhMOeJbjHOGZF/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/O1jZJNPR_KjFcy6Qz0dCybJT/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/O1jZJNPR_KjFcy6Qz0dCybJT/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/MJgjw4IrJtTrhMOeJbjHOGZF/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/MJgjw4IrJtTrhMOeJbjHOGZF/image.png\"></a></div><p>Lines 90 and 91 in the first image were originally <code>apply_instance</code> and I want to check what happened to it.</p>\n<p><a href=\"https://paste.debian.net/1253452/\">Here</a> are the full messages.</p>\n<p>I found sometimes <code>apply_instance</code> succeeds to infer the instances <code>mul_pos_mono α</code> and <code>pos_mul_mono α</code>, but sometimes it fails. I wonder what happened.</p>\n<p>Sorry but it's hard to make an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>. You can download this branch for testing and here is the modified code above.</p>\n<p>In file <code>tactic.monotonicity.interactive</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">test_tgt</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">tgt</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.target</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic.instantiate_mvars</span><span class=\"o\">,</span>\n   <span class=\"n\">tactic.trace</span> <span class=\"n\">tgt</span><span class=\"o\">,</span>\n   <span class=\"n\">tactic.is_class</span> <span class=\"n\">tgt</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic.trace</span><span class=\"o\">,</span><span class=\"n\">return</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">unify_with_instance</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">as_goal</span> <span class=\"n\">e</span> <span class=\"bp\">$</span>\n<span class=\"o\">(((</span><span class=\"n\">local_context</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">mmap</span> <span class=\"n\">infer_type</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic.trace</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">test_tgt</span> <span class=\"bp\">&gt;&gt;</span>\n  <span class=\"o\">((</span><span class=\"n\">apply_instance</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">tactic.trace</span> <span class=\"s2\">\"ok</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">(</span><span class=\"n\">test_tgt</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">tactic.trace</span> <span class=\"s2\">\"why?</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">fail</span> <span class=\"s2\">\"\"</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>In file <code>tactic.monotonicity.default</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">mono</span><span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 298202830,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1662871846
    },
    {
        "content": "<p>Increasing the instance priority did not fix it. I have added specialized processing for now.</p>",
        "id": 298231537,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1662891460
    },
    {
        "content": "<p>I cannot reproduce what you're trying to ask. I pulled your branch and then attempted to make your changes in the screenshot; after editing tactic.monotonicity.interactive in what I think is the way indicated in the first screenshot I get errors in the def of <code>mono_aux</code> and <code>ac_mono_aux</code> later on in the file; furthermore editing tactic.monotonicity.default to add the example, I don't get the extra goals which you're seeing. If you can't make a mwe easily then why not make a branch which indicates the error, as opposed to saying \"here's a branch and now make more edits which I haven't quite made precise\"?</p>",
        "id": 298242680,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662898261
    },
    {
        "content": "<p>Sorry, I updated that branch 2 hours ago, I'll create a new branch.</p>",
        "id": 298242958,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1662898422
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/tree/FR_zero_lt_changes_fail\">branch#FR_zero_lt_changes_fail</a> here it is. There is no cached oleans yet but you can just use <code>leanproject get-cache --rev ab1ef27</code>.</p>",
        "id": 298244393,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1662899208
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">mono</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>A simpler example.</p>",
        "id": 298318277,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1662963311
    },
    {
        "content": "<p>It looks like because of the order of the type class derivation?</p>",
        "id": 298318568,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1662963493
    },
    {
        "content": "<p>The tactic tries to synthesize <code>has_zero α</code> after <code>mul_pos_mono α</code> and <code>pos_mul_mono α</code> so these two fail.</p>",
        "id": 298318752,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1662963622
    },
    {
        "content": "<p>Do you think that if instead of the abbreviation <code>mul_pos_mono</code> we used the fully expanded names, this issue would go away?</p>\n<p>Though, in general, I found that <code>covariant_class</code> assumptions seem to be left as side-goals when I use <code>apply</code> as opposed to <code>refine/exact</code>, so there may be a bit of both.</p>",
        "id": 298319083,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1662963868
    },
    {
        "content": "<p>I suspect that <code>rw</code> and <code>apply</code> etc. have the same problem since they have the <code>instances</code> configuration turned on by default. But sometimes it is still unable to synthesize instances.</p>",
        "id": 298319767,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1662964323
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/bot_eq_zero_class\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/bot_eq_zero_class</a></p>",
        "id": 298319835,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1662964378
    },
    {
        "content": "<p><code>zero_le_one_class</code> caused many similar random breakages.</p>",
        "id": 298319982,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1662964472
    },
    {
        "content": "<p>I just replace <code>mmap' unify_with_instance vs</code> with <code>mmap' unify_with_instance vs.reverse</code> and it seems works.</p>",
        "id": 298320503,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1662964884
    },
    {
        "content": "<p>But I haven't looked into other tactics yet and I'm not sure if there might be some similar problems.</p>",
        "id": 298320785,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1662965060
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455791\">Yuyang Zhao</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/.60apply_instance.60.20fails.20to.20infer.20instance.3F/near/298318752\">said</a>:</p>\n<blockquote>\n<p>The tactic tries to synthesize <code>has_zero α</code> after <code>mul_pos_mono α</code> and <code>pos_mul_mono α</code> so these two fail.</p>\n</blockquote>\n<p>And in the first round of the tactic (the first call of <code>mono_aux</code>), it succeeded because <code>has_zero α</code> has been solved before.</p>",
        "id": 298322962,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1662966261
    },
    {
        "content": "<p>Tests give another example. In <code>test/monotonicity</code> CI complains</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">actions</span><span class=\"bp\">-</span><span class=\"n\">runner</span><span class=\"bp\">/</span><span class=\"n\">_work</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">monotonicity.lean</span><span class=\"o\">:</span><span class=\"mi\">46</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span>\n<span class=\"n\">ambiguous</span> <span class=\"k\">match</span><span class=\"o\">:</span>\n\n<span class=\"n\">tsub_le_tsub</span>\n<span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">x</span>\n\n<span class=\"n\">sub_le_sub</span>\n<span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">x</span>\n\n<span class=\"n\">Tip</span><span class=\"o\">:</span> <span class=\"n\">try</span> <span class=\"n\">asserting</span> <span class=\"n\">a</span> <span class=\"n\">side</span> <span class=\"n\">condition</span> <span class=\"n\">to</span> <span class=\"n\">distinguish</span> <span class=\"n\">between</span> <span class=\"n\">the</span> <span class=\"n\">lemmas</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"mi\">4</span><span class=\"o\">,</span>\n<span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">z</span>\n</code></pre></div>\n<p>Before this change, if <code>mono</code> uses the lemma <code>tsub_le_tsub</code>, it will create 2 type classes goals. Now it will not create type classes goals. Also following proof become possible.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">mono</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>So I'll remove <code>@[mono]</code> at <code>sub_le_sub</code>: we can use <code>tsub_le_tsub</code> now.</p>",
        "id": 298351997,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1662977813
    },
    {
        "content": "<p>Relevant PR <a href=\"https://github.com/leanprover-community/mathlib/pull/16480\">#16480</a> is ready.</p>",
        "id": 298382058,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1662989592
    }
]