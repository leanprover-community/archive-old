[
    {
        "content": "<p>How can I write a function that detects if a (fully-elaborated) <code>expr</code> contains a certain type? For example, I want <code>contains_nat `(1 + 1 &gt; 0)</code> to give <code>tt</code>, but <code>contains_nat `(tt) </code> to give <code>ff</code>.</p>",
        "id": 228145908,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614535157
    },
    {
        "content": "<p>I think we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/expr.contains\">docs#expr.contains</a> for this. If you wanted to write it you would fold over the expr, oops I'm on mobile and that link doesn't work sorry</p>",
        "id": 228146381,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1614535570
    },
    {
        "content": "<p>Even without folding, I can't find the API to ask for the elaborated type of an expression</p>",
        "id": 228146406,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614535620
    },
    {
        "content": "<p>Would <code>infer_type</code> help here?</p>",
        "id": 228146425,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614535661
    },
    {
        "content": "<p>That's certainly what I was looking for, although it seems not to be enough:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">decidable_exact</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">declaration</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"o\">(</span><span class=\"n\">binders</span><span class=\"o\">,</span> <span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">open_pis</span> <span class=\"n\">d.type</span><span class=\"o\">,</span>\n  <span class=\"n\">body.mfold</span> <span class=\"n\">none</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"n\">depth</span> <span class=\"n\">so_far</span><span class=\"o\">,</span> <span class=\"k\">do</span>\n    <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"k\">if</span> <span class=\"n\">t.is_app_of</span> <span class=\"bp\">`</span><span class=\"n\">decidable_eq</span>\n     <span class=\"bp\">∨</span> <span class=\"n\">t.is_app_of</span> <span class=\"bp\">`</span><span class=\"n\">decidable_pred</span> <span class=\"bp\">∨</span> <span class=\"n\">t.is_app_of</span> <span class=\"bp\">`</span><span class=\"n\">decidable_rel</span>\n     <span class=\"bp\">∨</span> <span class=\"n\">t.is_app_of</span> <span class=\"bp\">`</span><span class=\"n\">decidable</span> <span class=\"k\">then</span> <span class=\"k\">do</span>\n      <span class=\"n\">trace</span> <span class=\"n\">t</span>\n    <span class=\"k\">else</span> <span class=\"n\">skip</span><span class=\"o\">,</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"s2\">\"ok\"</span><span class=\"o\">))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bad</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">default</span> <span class=\"n\">_</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"k\">do</span>\n  <span class=\"n\">d</span> <span class=\"bp\">←</span> <span class=\"n\">get_decl</span> <span class=\"bp\">`</span><span class=\"n\">bad</span><span class=\"o\">,</span>\n  <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">decidable_exact</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">infer_type'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">given</span> <span class=\"n\">expression</span> <span class=\"n\">should</span> <span class=\"n\">not</span> <span class=\"n\">contain</span> <span class=\"n\">de</span><span class=\"bp\">-</span><span class=\"n\">Bruijn</span> <span class=\"kd\">variables</span><span class=\"o\">,</span> <span class=\"n\">they</span> <span class=\"n\">should</span> <span class=\"n\">be</span> <span class=\"n\">replaced</span> <span class=\"k\">with</span> <span class=\"kn\">local</span> <span class=\"kd\">constants</span> <span class=\"n\">before</span> <span class=\"n\">using</span> <span class=\"n\">this</span> <span class=\"n\">tactic</span>\n</code></pre></div>",
        "id": 228146951,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614536190
    },
    {
        "content": "<p>How about this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">decidable_exact</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">declaration</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"o\">(</span><span class=\"n\">binders</span><span class=\"o\">,</span> <span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">open_pis</span> <span class=\"n\">d.type</span><span class=\"o\">,</span>\n  <span class=\"n\">body.mfold</span> <span class=\"n\">none</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"n\">depth</span> <span class=\"n\">so_far</span><span class=\"o\">,</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">e.get_free_var_range</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n      <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n      <span class=\"k\">if</span> <span class=\"n\">t.is_app_of</span> <span class=\"bp\">`</span><span class=\"n\">decidable_eq</span>\n          <span class=\"bp\">∨</span> <span class=\"n\">t.is_app_of</span> <span class=\"bp\">`</span><span class=\"n\">decidable_pred</span> <span class=\"bp\">∨</span> <span class=\"n\">t.is_app_of</span> <span class=\"bp\">`</span><span class=\"n\">decidable_rel</span>\n          <span class=\"bp\">∨</span> <span class=\"n\">t.is_app_of</span> <span class=\"bp\">`</span><span class=\"n\">decidable</span> <span class=\"k\">then</span> <span class=\"k\">do</span>\n        <span class=\"n\">trace</span> <span class=\"n\">t</span>\n      <span class=\"k\">else</span> <span class=\"n\">skip</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span> <span class=\"n\">skip</span><span class=\"o\">,</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"s2\">\"ok\"</span><span class=\"o\">))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bad</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">default</span> <span class=\"n\">_</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"k\">do</span>\n  <span class=\"n\">d</span> <span class=\"bp\">←</span> <span class=\"n\">get_decl</span> <span class=\"bp\">`</span><span class=\"n\">bad</span><span class=\"o\">,</span>\n  <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">decidable_exact</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 228148656,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614538139
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/expr.get_free_var_range\">docs#expr.get_free_var_range</a> reveal anything?</p>",
        "id": 228149061,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614538473
    },
    {
        "content": "<p>I'm just using is to filter out the expressions where the de Brujin var is behind a lambda</p>",
        "id": 228149239,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614538670
    },
    {
        "content": "<p>Are you just looking for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/expr.contains_constant\">docs#expr.contains_constant</a>?</p>",
        "id": 228448142,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1614705442
    },
    {
        "content": "<p>You cannot use <code>infer_type</code> in an <code>expr.mfold</code>, since the subexpressions are not well-typed (they could contain free de Bruijn variables).</p>",
        "id": 228448353,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1614705508
    },
    {
        "content": "<p><code>contains_constant</code> wouldn't return <code>true</code> for <code>contains_constant `(f x y) {`nat}</code> right? even if <code>x</code> has type <code>nat</code>?</p>",
        "id": 228449041,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614705757
    },
    {
        "content": "<p>If <code>f</code> has type <code>nat -&gt; ...</code> then no. However, for something like <code>`(1 + 1 &gt; 0)</code> you would get <code>true</code>, since <code>has_lt</code> is applied to <code>nat</code>.</p>\n<p>One solution is to mfold over the expression:</p>\n<ul>\n<li>If you see <code>nat</code> it contains <code>nat</code></li>\n<li>If you reach a local constant, use <code>infer_type</code> on it (which is safe, since it's a local constant) to see whether its type contains <code>nat</code></li>\n<li>If you reach a constant, use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/environment.get\">docs#environment.get</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/declaration.type\">docs#declaration.type</a> to see whether its type contains <code>nat</code>.</li>\n</ul>\n<p>This should cover all cases.</p>",
        "id": 228646799,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1614797773
    },
    {
        "content": "<p>Except maybe some macros...</p>",
        "id": 228646966,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1614797844
    }
]