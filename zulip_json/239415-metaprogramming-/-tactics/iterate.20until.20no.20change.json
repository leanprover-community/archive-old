[
    {
        "content": "<p>Dear All,</p>\n<p>I am a complete beginner with writing tactics, so I am very unsure whether what I ask is meaningful or not.</p>\n<p>In trying to convert a procedure to compute degree of polynomials into a tactic, I would like to <code>iterate</code> a code-block until the initial state and the final one are the same.  How can I do this?  Below is a silly <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>.</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"c1\">-- this loops forever</span>\n  <span class=\"n\">iterate</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279069593,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650019939
    },
    {
        "content": "<p>(Fun fact, if you remove the <code>import tactic</code>, then <code>iterate</code> seems to stop quickly and possibly behave as I hoped it would.)</p>",
        "id": 279069643,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650020004
    },
    {
        "content": "<p>(The difference in behaviour between <code>iterate</code> with or without the <code>import</code> appears to be that with the <code>import</code> <code>iterate</code> seems to pause at each step and make sure that it has not already proven the goal.)</p>",
        "id": 279069789,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650020139
    },
    {
        "content": "<p>Actually, I am not sure about the difference: I think that one <code>iterate</code> has an explicit bound on the number of iterations, the other does not.  Then there is a mix about <code>rw</code> that I did not know.</p>",
        "id": 279070995,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650021292
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#repeat\">tactic#repeat</a> does what you want. It stops applying the tactic if it doesn't change the goal (or fails)</p>",
        "id": 279073517,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1650023576
    },
    {
        "content": "<p>I am not sure what is going on, but this does not work (and in my use-case <code>repeat</code> also does not work):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">reprw</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">reprw</span><span class=\"o\">,</span> <span class=\"c1\">-- ends as it started saying that there are unsolved goals</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279074389,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650024351
    },
    {
        "content": "<p>I meant to say: I am using this <code>iterate</code> not to solve the goal, but to massage it, so that after I can continue processing it.</p>",
        "id": 279074488,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650024417
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#squeeze_simp\">tactic#squeeze_simp</a> has this behavior as well</p>",
        "id": 279074540,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650024475
    },
    {
        "content": "<p>This works for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">reprw</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">reprw</span> <span class=\"c1\">-- solves goal</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Note: you need some kind of import, in order for <code>add_comm</code> to exist.</p>",
        "id": 279074638,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1650024545
    },
    {
        "content": "<p>Ok, I'll continue investigating!  I suspect that I minimised my example too much.</p>",
        "id": 279074748,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650024694
    },
    {
        "content": "<p>I find not getting an error for the <code>add_comm</code> very confusing!</p>",
        "id": 279074836,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650024744
    },
    {
        "content": "<p>Note: a good way to debug issues with <code>repeat</code> is to just copy the tactic a couple of times and see where you get the first error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">],</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">],</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279074844,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1650024751
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/dd51529f58cfbe33f3320231d3561bd4b2e8e2c1/src/tactic/squeeze.lean#L144\"><code>same_result</code></a> is the function that you might want</p>",
        "id": 279074845,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650024753
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/iterate.20until.20no.20change/near/279074836\">said</a>:</p>\n<blockquote>\n<p>I find not getting an error for the <code>add_comm</code> very confusing!</p>\n</blockquote>\n<p>This is a feature(?) of <code>repeat</code>: it will execute the tactic until the first time the tactic raises an error. The tactic raises an error the first time is applied, since it doesn't know what <code>add_comm</code> is.</p>",
        "id": 279074877,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1650024800
    },
    {
        "content": "<p>Ok, thank you both for your help!</p>",
        "id": 279074900,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650024840
    },
    {
        "content": "<p>You can also use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.repeat1\">docs#tactic.repeat1</a> (doesn't have an interactive version, I believe):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">reprw</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">tactic.repeat1</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">foobar</span><span class=\"o\">]]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">reprw</span> <span class=\"c1\">-- unknown identifier 'foobar'</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279075001,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1650024925
    }
]