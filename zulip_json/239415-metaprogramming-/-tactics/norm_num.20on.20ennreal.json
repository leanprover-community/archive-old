[
    {
        "content": "<p>Is there a way to loosen the lemma requirements for <code>norm_num</code> to have it work for extended types? mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.ennreal</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ennreal</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">success_if_fail</span> <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"o\">},</span>\n  <span class=\"c1\">-- won't work because `norm_num` requires `linear_ordered_semiring`, which has</span>\n  <span class=\"c1\">-- `add_left_cancel : a + b = a + c → b = c`, which is not true for `a = ⊤`.</span>\n  <span class=\"n\">refine</span> <span class=\"n\">ennreal.le_of_top_imp_top_of_to_nnreal_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"bp\">;</span>\n  <span class=\"n\">norm_num</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span></p>",
        "id": 291783529,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659483639
    },
    {
        "content": "<p>norm_num doesn't require that class, the theorems it uses do. If you can weaken the requirements on the lemmas then it should be fixed automatically</p>",
        "id": 291783688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659483782
    },
    {
        "content": "<p>but I would assume that the theorems are assuming the minimum requirements already</p>",
        "id": 291783714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659483799
    },
    {
        "content": "<p>Sorry, I was fast and loose with the statement. Yes, its this collection of lemmas:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">lt_one_bit0</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">bit0</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">one_lt_two</span> <span class=\"o\">(</span><span class=\"n\">bit0_le_bit0.2</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">lt_one_bit1</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">bit1</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">one_lt_bit1.2</span> <span class=\"n\">h</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">lt_bit0_bit0</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">bit0</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">bit0</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">bit0_lt_bit0.2</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">lt_bit0_bit1</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bit0</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">bit1</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">bit0_le_bit0.2</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lt_add_one</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">lt_bit1_bit0</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bit1</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">bit0</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">lt_of_lt_of_le</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">bit0</span><span class=\"o\">,</span> <span class=\"n\">bit1</span><span class=\"o\">,</span> <span class=\"n\">zero_lt_one</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">bit0_le_bit0.2</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">lt_bit1_bit1</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">bit1</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">bit1</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">bit1_lt_bit1.2</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">le_one_bit0</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">bit0</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">lt_one_bit0</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"c1\">-- deliberately strong hypothesis because bit1 0 is not a numeral</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">le_one_bit1</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">bit1</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">lt_one_bit1</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">le_bit0_bit0</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">bit0</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">bit0</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">bit0_le_bit0.2</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">le_bit0_bit1</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bit0</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">bit1</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">lt_bit0_bit1</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">le_bit1_bit0</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bit1</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">bit0</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">lt_bit1_bit0</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">le_bit1_bit1</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">bit1</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">bit1</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">bit1_le_bit1.2</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sle_one_bit0</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">bit0</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">bit0_le_bit0.2</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">sle_one_bit1</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">bit1</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">le_bit0_bit1</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">sle_bit0_bit0</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">bit0</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">bit0</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">le_bit1_bit0</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">sle_bit0_bit1</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bit0</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">bit1</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">bit1_le_bit1.2</span> <span class=\"n\">h</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">sle_bit1_bit0</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">bit1</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">bit0</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">bit1_succ</span> <span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">bit0_le_bit0.2</span> <span class=\"n\">h</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">sle_bit1_bit1</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">bit1</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">bit1</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">bit1_succ</span> <span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">le_bit0_bit1</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 291783802,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659483863
    },
    {
        "content": "<p>the one that matters in this case is <code>le_one_bit0</code> I think</p>",
        "id": 291783865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659483931
    },
    {
        "content": "<p>Actually I should take back what I said: I think these theorems are deliberately all using the same class for efficiency. So you would need a single class that implies all of them</p>",
        "id": 291783952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659483997
    },
    {
        "content": "<p>There is an alternative proof approach that norm_num uses for complex not-equal which could also apply here: if <code>nat</code> order-embeds in the target type, then it is possible to prove that both sides are equal to <code>nat.cast</code> of something and then do the proof on <code>nat</code> instead</p>",
        "id": 291784079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659484101
    },
    {
        "content": "<p>Unfortunately, I don't think there is such a class</p>",
        "id": 291784109,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659484126
    },
    {
        "content": "<p>this is what <code>prove_nat_uncast</code> does</p>",
        "id": 291784130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659484149
    },
    {
        "content": "<p>Could we do this for <code>rat.cast</code>?</p>",
        "id": 291784133,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659484156
    },
    {
        "content": "<p>there's also a version for rat</p>",
        "id": 291784143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659484167
    },
    {
        "content": "<p>Ah, it doesn't embed</p>",
        "id": 291784148,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659484170
    },
    {
        "content": "<p>no it does</p>",
        "id": 291784157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659484181
    },
    {
        "content": "<p>the nonnegative rats do</p>",
        "id": 291784160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659484189
    },
    {
        "content": "<p><code>prove_rat_uncast_nonneg</code></p>",
        "id": 291784219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659484208
    },
    {
        "content": "<p>oh, but it might not be a <code>division_ring</code></p>",
        "id": 291784260,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659484247
    },
    {
        "content": "<p>So would you stick it into <code>eval_ineq</code>?</p>",
        "id": 291784374,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659484324
    },
    {
        "content": "<p>no, <code>prove_lt_nat</code> would get a wrapper that checks for an instance of <code>linear_ordered_semiring</code> and otherwise uses this method</p>",
        "id": 291784489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659484441
    },
    {
        "content": "<p>Alternatively, and I haven't done this with other things before because I don't like to introduce typeclasses, you could just have a new typeclass for having an order embedding to nat / int / nonneg rat / rat</p>",
        "id": 291784632,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659484553
    },
    {
        "content": "<p>I see, you stick it in as deep as possible, relying on the nat-le/lt proving to be done \"right\" -- deferring the need for coercion as late as possible</p>",
        "id": 291784671,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659484563
    },
    {
        "content": "<p>more <code>nat_cast</code> and <code>int_cast</code> data fields <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 291784693,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659484593
    },
    {
        "content": "<p>no, this doesn't have to be a data carrying typeclass</p>",
        "id": 291784710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659484618
    },
    {
        "content": "<p>basically we're saying that casted naturals are in the \"center\" of the type</p>",
        "id": 291784752,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659484653
    },
    {
        "content": "<p>when you prove theorems about bit0 and bit1 directly you don't have that fact available even though it's always going to be the case</p>",
        "id": 291784815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659484688
    },
    {
        "content": "<p>and that makes the lemmas have stronger hypotheses than you would like</p>",
        "id": 291784823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659484701
    },
    {
        "content": "<p>the nat_uncast stuff makes that explicit</p>",
        "id": 291784838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659484720
    },
    {
        "content": "<p>incidentally, in lean 4 this will trivially be available because numeric literals are defined like <code>nat.cast</code> instead of by recursive application of <code>bit0</code> and <code>bit1</code></p>",
        "id": 291784883,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659484782
    },
    {
        "content": "<p>Something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">prove_nat_uncast_los</span> <span class=\"o\">(</span><span class=\"n\">ic</span> <span class=\"o\">:</span> <span class=\"n\">instance_cache</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">instance_cache</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">option</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n  <span class=\"o\">(</span><span class=\"n\">ic</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">ic.get</span> <span class=\"bp\">`</span><span class=\"n\">linear_ordered_semiring</span><span class=\"o\">,</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">ic</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">))</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">nc</span> <span class=\"bp\">←</span> <span class=\"n\">mk_instance_cache</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">ic</span><span class=\"o\">,</span> <span class=\"n\">nc</span><span class=\"o\">,</span> <span class=\"n\">e'</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">prove_nat_uncast</span> <span class=\"n\">ic</span> <span class=\"n\">nc</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">ic</span><span class=\"o\">,</span> <span class=\"n\">e'</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 291785978,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659485786
    }
]