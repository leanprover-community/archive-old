[
    {
        "content": "<p>Dear All,</p>\n<p>while working on a tactic <code>sort_summands</code> (<a href=\"https://github.com/leanprover-community/mathlib/pull/13483\">#13483</a>) to reorder sums, Arthur Paulino and I would like to use <code>←</code> as an optional identifier for whether to move a term to the left of to the right.</p>\n<p>Thus, I would like something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">sort_summands</span> <span class=\"n\">g</span><span class=\"o\">,</span>  <span class=\"c1\">-- works, and the goal changes to `f + h + g = 0`</span>\n  <span class=\"n\">sort_summands</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">g</span><span class=\"o\">],</span>  <span class=\"c1\">-- currently does not work,</span>\n  <span class=\"c1\">-- we would like it to mean that the goal changes to `g + f + h`</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279401677,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650371456
    },
    {
        "content": "<p>Is it possible to get Lean to accept the extra token <code>←</code> and then do a case split, depending on whether it is present or not?</p>\n<p>I wanted something similar to how <code>simp [lemma]</code> and <code>simp [-lemma]</code> work, except using <code>-</code> does not really work, since there might be a <code>-</code> in the <code>pexpr</code> in this context.</p>",
        "id": 279401913,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650371592
    },
    {
        "content": "<p>An important remark is that we're using <code>parse pexpr_list_or_texpr?</code> so that's not a list of identifiers like we usually see with <code>simp [⋯]</code> or <code>rw [⋯]</code></p>",
        "id": 279402022,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650371652
    },
    {
        "content": "<p>Have you taken a look at the source for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.simp_arg_list\">docs#tactic.simp_arg_list</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.rw_rules\">docs#tactic.interactive.rw_rules</a>? You could use these as inspiration to make your own <code>tactic.sort_summands_arg_list</code>.</p>",
        "id": 279482531,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650411804
    },
    {
        "content": "<p>We found those and Damiano started to investigate it. I don't know what he was able to achieve tho</p>",
        "id": 279483056,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650412270
    },
    {
        "content": "<p>Honestly, I tried, but am somewhat overwhelmed by <code>parser</code> and <code>rules</code>...</p>",
        "id": 279496827,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650428128
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.core</span>\n<span class=\"n\">setup_tactic_parser</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">opt_list_of</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">list_of</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">list.ret</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">return</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">sort_summands_arg</span> <span class=\"o\">(</span><span class=\"n\">prec</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"o\">(</span><span class=\"n\">bool</span> <span class=\"bp\">×</span> <span class=\"n\">pexpr</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"n\">tk</span> <span class=\"s2\">\"&lt;-\"</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">parser.pexpr</span> <span class=\"n\">prec</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">))</span> <span class=\"bp\">&lt;|&gt;</span>\n<span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">parser.pexpr</span> <span class=\"n\">prec</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">))</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.foo</span>\n  <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span>\n    <span class=\"n\">list_of</span> <span class=\"o\">(</span><span class=\"n\">sort_summands_arg</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n    <span class=\"n\">list.ret</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"o\">(</span><span class=\"n\">sort_summands_arg</span> <span class=\"n\">tac_rbp</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n    <span class=\"n\">return</span> <span class=\"o\">[]))</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">tactic.trace</span> <span class=\"n\">args</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">b</span><span class=\"o\">],</span>\n  <span class=\"n\">foo</span> <span class=\"bp\">←</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">foo</span> <span class=\"bp\">←</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">skip</span><span class=\"o\">,</span>\n  <span class=\"n\">foo</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279498078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1650429604
    },
    {
        "content": "<p>Mario, thank you so much!  I think that I can take it from here.</p>",
        "id": 279504770,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650437445
    },
    {
        "content": "<p>I only have one problem: my computer seems to have to work a lot on the file that only contains your code and Lean breaks as soon as I change anything...</p>",
        "id": 279504800,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650437478
    },
    {
        "content": "<p>In fact, even if I do not touch anything at all, after some noise from the computer, Lean says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Error</span> <span class=\"n\">updating</span><span class=\"o\">:</span> <span class=\"n\">excessive</span> <span class=\"n\">memory</span> <span class=\"n\">consumption</span> <span class=\"n\">detected</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">whnf'</span>\n<span class=\"o\">(</span><span class=\"n\">potential</span> <span class=\"n\">solution</span><span class=\"o\">:</span> <span class=\"n\">increase</span> <span class=\"n\">memory</span> <span class=\"n\">consumption</span> <span class=\"n\">threshold</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Try</span> <span class=\"n\">again.</span>\n<span class=\"n\">No</span> <span class=\"n\">info</span> <span class=\"n\">found.</span>\n</code></pre></div>",
        "id": 279504908,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650437561
    },
    {
        "content": "<p>Sorry for the noise: I had some issues with my <code>olean</code>s.  Everything is fast now!</p>",
        "id": 279505451,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650438037
    },
    {
        "content": "<p>What is the significance of <code>prec : nat</code>?</p>",
        "id": 279509149,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650440819
    },
    {
        "content": "<p>It's for setting the parsing precedence (also known as binding power for a Pratt parser) for <code>parser.pexpr</code>. When you're parsing something inside a list, it's in a precedence-0 context, but when you're not parsing inside a list, you need to respect the precedence for arguments to a tactic -- that precedence is given by <code>tac_rbp</code> (tactic right binding power).  By giving <code>parser.pexpr</code> higher binding power, it will be less greedy in how far it will parse, and in particular it won't parse past a token of higher left binding power I believe.</p>",
        "id": 279510384,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650441740
    },
    {
        "content": "<p>Kyle, thank you very much for the explanation!  It makes more sense now!</p>",
        "id": 279510540,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650441858
    },
    {
        "content": "<p>If you take a look at the source for <code>pexpr_list_or_texpr</code>, you can see that Mario's code is sort of swapping out <code>parser.pexpr</code> for <code>sort_summands_arg</code>, which is a wrapper around <code>parser.pexpr</code> to optionally parse the <code>&lt;-</code>. All the binding powers are the same.</p>",
        "id": 279511119,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650442265
    },
    {
        "content": "<p>As another notation suggestion, <code>sort_summands [.., g]</code> vs <code>sort_summands [g, ..]</code>, might be a nice notation for \"sort to start\" vs \"sort to end\"</p>",
        "id": 279511655,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650442617
    },
    {
        "content": "<p>Or even <code>sort_summands g + _,</code> vs <code>sort_summands _ + g</code>, but maybe that's trying to be too clever</p>",
        "id": 279511684,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650442641
    },
    {
        "content": "<p>Eric, in your first suggestion you mean that <code>..,</code> is part of what gets consumed by the parser?  I would like to be able to give simultaneously conditions on which terms go to the left and which ones go to the right, so maybe something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">sort_summands</span> <span class=\"o\">[</span><span class=\"n\">g1</span><span class=\"o\">,</span><span class=\"bp\">...</span><span class=\"o\">,</span><span class=\"n\">gn</span> <span class=\"bp\">&lt;</span><span class=\"n\">some_separator</span><span class=\"bp\">&gt;</span> <span class=\"n\">h1</span><span class=\"o\">,</span><span class=\"bp\">...</span><span class=\"o\">,</span><span class=\"n\">hm</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>though I think that I prefer the arrow, since it is very used in mathlib and clearly tells you where the term goes.</p>\n<p>Also, I like the fact that you do not need to input the terms in a sorted list: you can add each term and decide for each term whether it goes left or right.</p>",
        "id": 279512024,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650442877
    },
    {
        "content": "<p>Kyle, it is indeed much clearer now!  I had been staring at those definitions for quite some time, but there was too much extra noise and unknowns for me, that I could not find my way around them.  Now it is all starting to lock into place!</p>",
        "id": 279512230,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650443016
    },
    {
        "content": "<p>Under my suggested spelling that would be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">sort_summands</span> <span class=\"o\">[</span><span class=\"n\">g1</span><span class=\"o\">,</span><span class=\"n\">h1</span><span class=\"o\">,</span><span class=\"bp\">...</span><span class=\"o\">,</span><span class=\"n\">gn</span><span class=\"o\">,</span><span class=\"n\">hn</span><span class=\"o\">]</span>  <span class=\"c1\">-- goal changes to `g1 + h1 + _ + gn + hn`</span>\n</code></pre></div>",
        "id": 279515546,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650445070
    },
    {
        "content": "<blockquote>\n<p>though I think that I prefer the arrow, since it is very used in mathlib and clearly tells you where the term goes.</p>\n</blockquote>\n<p>It's not that clear to me; what does <code>[a, b, ← c, ← d]</code> mean? Does <code>c</code> end up right of <code>d</code> or left of <code>d</code>?</p>",
        "id": 279515660,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650445134
    },
    {
        "content": "<p>Oh, <code>[a, b, ← c, ← d]</code> for me means to the left there are <code>[c, d]</code> and to the right <code>[a, b]</code>.</p>",
        "id": 279515809,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650445205
    },
    {
        "content": "<p>I view the arrow as attached to each term and, if present, it tells you that the term goes all the way to the left.</p>",
        "id": 279515929,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650445252
    },
    {
        "content": "<p>So, the default behaviour is that an explicitly given term moves to the right.  You can change this by using the arrow.</p>",
        "id": 279515976,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650445284
    },
    {
        "content": "<p>I like your suggestion as well.  Now that I feel bold with the use of the parser, I may even go as far as saying that I can implement both!  <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 279516138,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650445368
    },
    {
        "content": "<p>I am stuck between <code>expr</code> and <code>pexpr</code>, which I really do not understand.  Is there a way to convert a <code>pexpr</code> to an <code>expr</code>?</p>\n<p>The reason is that the code for <code>sort_summands</code> works with <code>expr</code>s, but what Mario gave me uses <code>pexpr</code>s.  I tried changing Mario's <code>pexpr</code>s to <code>expr</code>s, but <code>parser.pexpr prec</code> at the end of <code>sort_summands_arg</code> gets in the way...</p>",
        "id": 279540657,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650460034
    },
    {
        "content": "<p>If I simply try to <code>convert</code> a <code>pe : pexpr</code> to an <code>expr</code> I get the unpleasant goal <code>tt = ff</code>.  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 279540842,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650460145
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.to_expr\">docs#tactic.to_expr</a></p>",
        "id": 279540979,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1650460227
    },
    {
        "content": "<p>This seems to produce a <code>tactic expr</code>, whereas I seem to want an actual <code>expr</code>...</p>",
        "id": 279541075,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650460296
    },
    {
        "content": "<p>(I am very aware that I probably took a wrong turn somewhere, so what you are suggesting may also be a solution.  I am just unable to use it.)</p>",
        "id": 279541163,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650460338
    },
    {
        "content": "<p>It produces an <code>expr</code> but it runs in the <code>tactic</code> monad</p>",
        "id": 279541175,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650460345
    },
    {
        "content": "<p>Arthur, does this mean that I can use it or that I cannot use it?</p>",
        "id": 279541247,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650460393
    },
    {
        "content": "<p>Do you have a list of pexpr? Then you can run list.mmap tactic.to_expr to get tactic (list pexpr). Damiano, are you inside do notation?</p>",
        "id": 279541289,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1650460419
    },
    {
        "content": "<p>I am inside <code>do</code> notation, yes.</p>",
        "id": 279541385,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650460450
    },
    {
        "content": "<p>You can use it, but you just need to use the right syntax and functions for monadic computation. Can you point to the code?</p>",
        "id": 279541393,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650460457
    },
    {
        "content": "<p>Basically, my_expr &lt;- to_expr my_pexpr</p>",
        "id": 279541417,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1650460471
    },
    {
        "content": "<p>Instead of walrus assignment :=</p>",
        "id": 279541436,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1650460484
    },
    {
        "content": "<p>currently, my code is in a messy state.  However, I am trying to use what Mario gave me (which uses <code>pexpr</code>s), to what we had (which uses <code>pexpr</code>s).  I'll try with Yakov's mmap and otherwise I'll see if I can write a #we, if not an actual <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>!</p>",
        "id": 279541545,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650460546
    },
    {
        "content": "<p>This is how I coded the conversion from a list of <code>pexpr</code> to a list of <code>expr</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">l.get_or_else</span> <span class=\"o\">[])</span><span class=\"bp\">.</span><span class=\"n\">mmap</span> <span class=\"n\">to_expr</span>\n</code></pre></div>",
        "id": 279541627,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650460572
    },
    {
        "content": "<p>Ok, this is promising.  I have a pair of lists of pexprs that I want to convert into a pair of lists of exprs.  I can probably do it, but if someone has a quick way of solving this, I'd be grateful!</p>",
        "id": 279541883,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650460688
    },
    {
        "content": "<p>here is my state:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">args</span><span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">interactive.sort_pexpr_list_or_texpr</span>\n<span class=\"n\">locat</span><span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">location</span>\n<span class=\"n\">sort_summands</span><span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"n\">ll</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">pexpr</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"n\">pexpr</span>\n<span class=\"n\">_match</span><span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">location</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"n\">expr</span>\n</code></pre></div>",
        "id": 279541919,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650460710
    },
    {
        "content": "<p>I want <code>ll</code> to merge with the goal.</p>",
        "id": 279541964,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650460735
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">do</span>\n  <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">ll.1.mmap</span> <span class=\"n\">to_expr</span><span class=\"o\">,</span>\n  <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">ll.2.mmap</span> <span class=\"n\">to_expr</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 279542122,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650460804
    },
    {
        "content": "<p>(untested)</p>",
        "id": 279542151,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650460819
    },
    {
        "content": "<p>I think that it might have worked!  At least I progressed with the conversion a few extra lines!</p>\n<p>Thank you so much!</p>",
        "id": 279542363,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650460921
    }
]