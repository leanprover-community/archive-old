[
    {
        "content": "<p>Do we have a nice way to parse an expression analogous to how we parse tactic arguments? Or are we meant to use nested matches on the <code>expr</code> constructors?</p>",
        "id": 268129199,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642258285
    },
    {
        "content": "<p>I have about a dozen shapes of expressions I'd like to recognize and be able to act depending on which shape was recognized and what were the components.</p>",
        "id": 268129264,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642258363
    },
    {
        "content": "<p>For instance if I have <code>∀ k, ∃ n, P n k</code> as input then I would like to get : this is <code>forall_exists_prop</code> with components <code>k</code>, <code>n</code>, <code>P</code>.</p>",
        "id": 268129314,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642258433
    },
    {
        "content": "<p>You can use expr match for a lot of these use cases, but binders can be tricky</p>",
        "id": 268139880,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642271657
    },
    {
        "content": "<p>Thanks. I managed to do something. I won't claim there wasn't times where I simply tried all matched arguments in order until I found the one that worked...</p>",
        "id": 268140239,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642272231
    },
    {
        "content": "<p>If you don't feel like doing more important or entertaining things then you can have a look at:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.basic</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">rel_symb</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">%%</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"s2\">\" &lt; \"</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"bp\">%%</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"s2\">\" ≤ \"</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"bp\">%%</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"s2\">\" &gt; \"</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"bp\">%%</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"s2\">\" ≥ \"</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">%%</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"s2\">\" ∈ \"</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">pe</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.pp</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">tactic.fail</span> <span class=\"bp\">$</span> <span class=\"s2\">\"Not a relation: \"</span> <span class=\"bp\">++</span> <span class=\"n\">pe.to_string</span>\n\n\n<span class=\"kd\">meta</span> <span class=\"kd\">inductive</span> <span class=\"n\">my_expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">forall_rel</span> <span class=\"o\">(</span><span class=\"n\">var_name</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rel_rhs</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">propo</span> <span class=\"o\">:</span> <span class=\"n\">my_expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">my_expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">forall_simple</span> <span class=\"o\">(</span><span class=\"n\">var_name</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">propo</span> <span class=\"o\">:</span> <span class=\"n\">my_expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">my_expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">exist_rel</span> <span class=\"o\">(</span><span class=\"n\">var_name</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rel_rhs</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">propo</span> <span class=\"o\">:</span> <span class=\"n\">my_expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">my_expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">exist_simple</span> <span class=\"o\">(</span><span class=\"n\">var_name</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">propo</span> <span class=\"o\">:</span> <span class=\"n\">my_expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">my_expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">impl</span> <span class=\"o\">(</span><span class=\"n\">lhs</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rhs</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">my_expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">prop</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">my_expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">data</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">my_expr</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">my_expr</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tofmt</span> <span class=\"o\">:</span> <span class=\"n\">my_expr</span> <span class=\"bp\">→</span>  <span class=\"n\">tactic</span> <span class=\"n\">format</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">forall_rel</span> <span class=\"n\">var_name</span> <span class=\"n\">typ</span> <span class=\"n\">rel</span> <span class=\"n\">rel_rhs</span> <span class=\"n\">propo</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">rhs</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.pp</span> <span class=\"n\">rel_rhs</span><span class=\"o\">,</span>\n    <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">tofmt</span> <span class=\"n\">propo</span><span class=\"o\">,</span>\n    <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"s2\">\"forall_rel \"</span> <span class=\"bp\">++</span> <span class=\"n\">var_name.to_string</span> <span class=\"bp\">++</span> <span class=\"n\">rel</span> <span class=\"bp\">++</span> <span class=\"n\">rhs.to_string</span> <span class=\"bp\">++</span> <span class=\"s2\">\", \"</span> <span class=\"bp\">++</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">forall_simple</span> <span class=\"n\">var_name</span> <span class=\"n\">typ</span> <span class=\"n\">propo</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">tofmt</span> <span class=\"n\">propo</span><span class=\"o\">,</span>\n    <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"s2\">\"forall_simple \"</span> <span class=\"bp\">++</span> <span class=\"n\">var_name.to_string</span> <span class=\"bp\">++</span> <span class=\"s2\">\", \"</span> <span class=\"bp\">++</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">exist_rel</span> <span class=\"n\">var_name</span> <span class=\"n\">typ</span> <span class=\"n\">rel</span> <span class=\"n\">rel_rhs</span> <span class=\"n\">propo</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">rhs</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.pp</span> <span class=\"n\">rel_rhs</span><span class=\"o\">,</span>\n    <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">tofmt</span> <span class=\"n\">propo</span><span class=\"o\">,</span>\n    <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"s2\">\"exist_rel \"</span> <span class=\"bp\">++</span> <span class=\"n\">var_name.to_string</span> <span class=\"bp\">++</span> <span class=\"n\">rel</span> <span class=\"bp\">++</span> <span class=\"n\">rhs.to_string</span> <span class=\"bp\">++</span> <span class=\"s2\">\", \"</span> <span class=\"bp\">++</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">exist_simple</span> <span class=\"n\">var_name</span> <span class=\"n\">typ</span> <span class=\"n\">propo</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">tofmt</span> <span class=\"n\">propo</span><span class=\"o\">,</span>\n    <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"s2\">\"exist_simple \"</span> <span class=\"bp\">++</span> <span class=\"n\">var_name.to_string</span> <span class=\"bp\">++</span> <span class=\"s2\">\", \"</span> <span class=\"bp\">++</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">impl</span> <span class=\"n\">lhs</span> <span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">l</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.pp</span> <span class=\"n\">lhs</span><span class=\"o\">,</span>\n  <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.pp</span> <span class=\"n\">rhs</span><span class=\"o\">,</span>\n  <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"s2\">\"impl \"</span> <span class=\"bp\">++</span> <span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"s2\">\" ⇒ \"</span> <span class=\"bp\">++</span> <span class=\"n\">r</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">prop</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.pp</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"s2\">\"prop: \"</span> <span class=\"bp\">++</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">data</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.pp</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"s2\">\"data: \"</span> <span class=\"bp\">++</span> <span class=\"n\">p</span>\n\n\n<span class=\"kd\">meta</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_to_tactic_format</span> <span class=\"n\">my_expr</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">my_expr.tofmt</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">parse</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">my_expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">expr.pi</span> <span class=\"n\">n</span> <span class=\"n\">_</span> <span class=\"n\">t</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">e'</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">expr.pi</span> <span class=\"n\">n'</span> <span class=\"n\">_</span> <span class=\"n\">t'</span> <span class=\"n\">b'</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"k\">do</span> <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">symbole</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">rel_symb</span> <span class=\"n\">t'</span><span class=\"o\">,</span>\n           <span class=\"n\">my_expr.forall_rel</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"n\">symbole</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">parse</span> <span class=\"n\">b'</span> <span class=\"o\">}</span> <span class=\"bp\">&lt;|&gt;</span>\n      <span class=\"k\">do</span> <span class=\"o\">{</span> <span class=\"n\">body</span> <span class=\"bp\">←</span> <span class=\"n\">parse</span> <span class=\"n\">e'</span><span class=\"o\">,</span>\n           <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">my_expr.forall_simple</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"n\">body</span> <span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"n\">e'</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">e.binding_name</span> <span class=\"bp\">=</span> <span class=\"s2\">\"ᾰ\"</span> <span class=\"k\">then</span>\n              <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">impl</span> <span class=\"n\">t</span> <span class=\"n\">e'</span><span class=\"o\">)</span>\n            <span class=\"k\">else</span>\n              <span class=\"n\">forall_simple</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">parse</span> <span class=\"n\">b</span>\n    <span class=\"kd\">end</span>\n<span class=\"bp\">|`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Exists</span> <span class=\"bp\">%%</span><span class=\"n\">α</span> <span class=\"bp\">%%</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Exists</span> <span class=\"bp\">%%</span><span class=\"n\">α'</span> <span class=\"bp\">%%</span><span class=\"n\">p'</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"n\">p.binding_body</span> <span class=\"bp\">|</span>\n      <span class=\"n\">exist_simple</span> <span class=\"n\">p.binding_name</span> <span class=\"n\">α</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">parse</span> <span class=\"n\">p.binding_body</span> <span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">symbole</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">rel_symb</span> <span class=\"n\">α'.binding_body</span><span class=\"o\">,</span>\n  <span class=\"n\">exist_rel</span> <span class=\"n\">p.binding_name</span> <span class=\"n\">α</span> <span class=\"n\">symbole</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">parse</span> <span class=\"n\">p'.binding_body</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"o\">{</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.infer_type</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"k\">if</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">prop</span> <span class=\"n\">e</span> <span class=\"k\">else</span> <span class=\"n\">data</span> <span class=\"n\">e</span> <span class=\"o\">}</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">prop</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">my_expr</span>\n</code></pre></div>",
        "id": 268140318,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642272345
    },
    {
        "content": "<p>This defines a specialized grammar for expression where bounded quantifiers become first class citizens.</p>",
        "id": 268140374,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642272390
    },
    {
        "content": "<p>Note that I'm especially not proud of my detection of implication using <code>if e.binding_name = \"ᾰ\"</code>. A better solution would be welcome.</p>",
        "id": 268140400,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642272453
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/expr.is_arrow\">docs#expr.is_arrow</a> exists</p>",
        "id": 268141180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642273328
    },
    {
        "content": "<p>This is what I used in the beginning, but it didn't work.</p>",
        "id": 268141446,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642273694
    },
    {
        "content": "<p>I think it doesn't work for open terms.</p>",
        "id": 268141450,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642273703
    },
    {
        "content": "<p>I hope I'm not inventing the meaning of \"open term\".</p>",
        "id": 268141460,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642273718
    },
    {
        "content": "<p>I mean I had issue where I was traversing an expr and the implication referred to variables introduced earlier in the expression.</p>",
        "id": 268141481,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642273751
    },
    {
        "content": "<p>You should not be directly manipulating open terms if possible</p>",
        "id": 268141585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642273887
    },
    {
        "content": "<p>(where open means containing free occurrences of <code>var</code> constructor)</p>",
        "id": 268141589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642273906
    },
    {
        "content": "<p>Instead you should <code>instantiate</code> as you descend into binders</p>",
        "id": 268141618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642273922
    },
    {
        "content": "<p>How come Mario? Certainly I can see why it is nicer to have closed terms a lot of the time, but are there specific reasons we should try and avoid it? I've written a lot of code that manipulates open terms <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span></p>",
        "id": 268141725,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1642274057
    },
    {
        "content": "<p>An example of a simple tactic that has to descend into binders is <code>generalize_proofs</code>, see <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/generalize_proofs.lean#L50-L53\">https://github.com/leanprover-community/mathlib/blob/master/src/tactic/generalize_proofs.lean#L50-L53</a></p>",
        "id": 268141732,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642274063
    },
    {
        "content": "<p>Mostly because all of lean's API assumes closed terms</p>",
        "id": 268141738,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642274083
    },
    {
        "content": "<p>If you can do the whole job yourself, constructing / manipulating exprs without consulting lean, then it's fine to work on open terms</p>",
        "id": 268141760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642274119
    },
    {
        "content": "<p>but for example if you ever want to call <code>infer_type</code> then you are stuck</p>",
        "id": 268141785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642274161
    },
    {
        "content": "<p>(and for some things you <em>have</em> to consult the local context, for example if you encounter a local constant or metavariable in the expr)</p>",
        "id": 268141851,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642274212
    },
    {
        "content": "<p>an example of a function working directly on open terms nontrivially is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.alias.mk_iff_mp_app/src\">src#tactic.alias.mk_iff_mp_app</a></p>",
        "id": 268141939,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642274328
    },
    {
        "content": "<p>I'm clearly having issues with this. Below is a slightly updated version of my code including parsing tests. I'm almost happy with the result except precisely for the appearing of induces where I would like to see the original names. Do you see what I mean?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.basic</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">rel_symb</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">%%</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"s2\">\" &lt; \"</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"bp\">%%</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"s2\">\" ≤ \"</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"bp\">%%</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"s2\">\" &gt; \"</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"bp\">%%</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"s2\">\" ≥ \"</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">%%</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"s2\">\" ∈ \"</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">pe</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.pp</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">tactic.fail</span> <span class=\"bp\">$</span> <span class=\"s2\">\"Not a relation: \"</span> <span class=\"bp\">++</span> <span class=\"n\">pe.to_string</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">inductive</span> <span class=\"n\">my_expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">forall_rel</span> <span class=\"o\">(</span><span class=\"n\">var_name</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rel_rhs</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">propo</span> <span class=\"o\">:</span> <span class=\"n\">my_expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">my_expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">forall_simple</span> <span class=\"o\">(</span><span class=\"n\">var_name</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">propo</span> <span class=\"o\">:</span> <span class=\"n\">my_expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">my_expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">exist_rel</span> <span class=\"o\">(</span><span class=\"n\">var_name</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rel_rhs</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">propo</span> <span class=\"o\">:</span> <span class=\"n\">my_expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">my_expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">exist_simple</span> <span class=\"o\">(</span><span class=\"n\">var_name</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">typ</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">propo</span> <span class=\"o\">:</span> <span class=\"n\">my_expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">my_expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">impl</span> <span class=\"o\">(</span><span class=\"n\">lhs</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rhs</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">my_expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">prop</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">my_expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">data</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">my_expr</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">my_expr</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tofmt</span> <span class=\"o\">:</span> <span class=\"n\">my_expr</span> <span class=\"bp\">→</span>  <span class=\"n\">tactic</span> <span class=\"n\">format</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">forall_rel</span> <span class=\"n\">var_name</span> <span class=\"n\">typ</span> <span class=\"n\">rel</span> <span class=\"n\">rel_rhs</span> <span class=\"n\">propo</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">rhs</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.pp</span> <span class=\"n\">rel_rhs</span><span class=\"o\">,</span>\n    <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">tofmt</span> <span class=\"n\">propo</span><span class=\"o\">,</span>\n    <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"s2\">\"∀ \"</span> <span class=\"bp\">++</span> <span class=\"n\">var_name.to_string</span> <span class=\"bp\">++</span> <span class=\"n\">rel</span> <span class=\"bp\">++</span> <span class=\"n\">rhs.to_string</span> <span class=\"bp\">++</span> <span class=\"s2\">\", \"</span> <span class=\"bp\">++</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">forall_simple</span> <span class=\"n\">var_name</span> <span class=\"n\">typ</span> <span class=\"n\">propo</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">tofmt</span> <span class=\"n\">propo</span><span class=\"o\">,</span>\n    <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"s2\">\"∀ \"</span> <span class=\"bp\">++</span> <span class=\"n\">var_name.to_string</span> <span class=\"bp\">++</span> <span class=\"s2\">\", \"</span> <span class=\"bp\">++</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">exist_rel</span> <span class=\"n\">var_name</span> <span class=\"n\">typ</span> <span class=\"n\">rel</span> <span class=\"n\">rel_rhs</span> <span class=\"n\">propo</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">rhs</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.pp</span> <span class=\"n\">rel_rhs</span><span class=\"o\">,</span>\n    <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">tofmt</span> <span class=\"n\">propo</span><span class=\"o\">,</span>\n    <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"s2\">\"∃ \"</span> <span class=\"bp\">++</span> <span class=\"n\">var_name.to_string</span> <span class=\"bp\">++</span> <span class=\"n\">rel</span> <span class=\"bp\">++</span> <span class=\"n\">rhs.to_string</span> <span class=\"bp\">++</span> <span class=\"s2\">\", \"</span> <span class=\"bp\">++</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">exist_simple</span> <span class=\"n\">var_name</span> <span class=\"n\">typ</span> <span class=\"n\">propo</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">tofmt</span> <span class=\"n\">propo</span><span class=\"o\">,</span>\n    <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"s2\">\"∃ \"</span> <span class=\"bp\">++</span> <span class=\"n\">var_name.to_string</span> <span class=\"bp\">++</span> <span class=\"s2\">\", \"</span> <span class=\"bp\">++</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">impl</span> <span class=\"n\">lhs</span> <span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">l</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.pp</span> <span class=\"n\">lhs</span><span class=\"o\">,</span>\n  <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.pp</span> <span class=\"n\">rhs</span><span class=\"o\">,</span>\n  <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"s2\">\" ⇒ \"</span> <span class=\"bp\">++</span> <span class=\"n\">r</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">prop</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.pp</span> <span class=\"n\">e</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">data</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.pp</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_to_tactic_format</span> <span class=\"n\">my_expr</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">my_expr.tofmt</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">parse</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">my_expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">expr.pi</span> <span class=\"n\">n</span> <span class=\"n\">_</span> <span class=\"n\">t</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">e'</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">expr.pi</span> <span class=\"n\">n'</span> <span class=\"n\">_</span> <span class=\"n\">t'</span> <span class=\"n\">b'</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"k\">do</span> <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">symbole</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">rel_symb</span> <span class=\"n\">t'</span><span class=\"o\">,</span>\n           <span class=\"n\">my_expr.forall_rel</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"n\">symbole</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">parse</span> <span class=\"n\">b'</span> <span class=\"o\">}</span> <span class=\"bp\">&lt;|&gt;</span>\n      <span class=\"k\">do</span> <span class=\"o\">{</span> <span class=\"n\">body</span> <span class=\"bp\">←</span> <span class=\"n\">parse</span> <span class=\"n\">e'</span><span class=\"o\">,</span>\n           <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">my_expr.forall_simple</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"n\">body</span> <span class=\"o\">}</span>\n    <span class=\"bp\">|</span> <span class=\"n\">e'</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">e.binding_name</span> <span class=\"bp\">=</span> <span class=\"s2\">\"ᾰ\"</span> <span class=\"k\">then</span>\n              <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">impl</span> <span class=\"n\">t</span> <span class=\"n\">e'</span><span class=\"o\">)</span>\n            <span class=\"k\">else</span>\n              <span class=\"n\">forall_simple</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">parse</span> <span class=\"n\">b</span>\n    <span class=\"kd\">end</span>\n<span class=\"bp\">|`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Exists</span> <span class=\"bp\">%%</span><span class=\"n\">α</span> <span class=\"bp\">%%</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Exists</span> <span class=\"bp\">%%</span><span class=\"n\">α'</span> <span class=\"bp\">%%</span><span class=\"n\">p'</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"n\">p.binding_body</span> <span class=\"bp\">|</span>\n      <span class=\"n\">exist_simple</span> <span class=\"n\">p.binding_name</span> <span class=\"n\">α</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">parse</span> <span class=\"n\">p.binding_body</span> <span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">symbole</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">rel_symb</span> <span class=\"n\">α'.binding_body</span><span class=\"o\">,</span>\n  <span class=\"n\">exist_rel</span> <span class=\"n\">p.binding_name</span> <span class=\"n\">α</span> <span class=\"n\">symbole</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">parse</span> <span class=\"n\">p'.binding_body</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"o\">{</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.infer_type</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"k\">if</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">prop</span> <span class=\"n\">e</span> <span class=\"k\">else</span> <span class=\"n\">data</span> <span class=\"n\">e</span> <span class=\"o\">}</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">prop</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">my_expr</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic.interactive</span>\n<span class=\"n\">setup_tactic_parser</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">my_expr</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">get_local</span> <span class=\"n\">h</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">infer_type</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">parse</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">tactic.interactive</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₅</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₆</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₇</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">test</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"n\">test</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"n\">test</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n  <span class=\"n\">test</span> <span class=\"n\">h₄</span><span class=\"o\">,</span>\n  <span class=\"n\">test</span> <span class=\"n\">h₅</span><span class=\"o\">,</span>\n  <span class=\"n\">test</span> <span class=\"n\">h₆</span><span class=\"o\">,</span>\n  <span class=\"n\">test</span> <span class=\"n\">h₇</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 268142048,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642274467
    },
    {
        "content": "<p>induces?</p>",
        "id": 268142062,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642274511
    },
    {
        "content": "<p>So really I don't want those open terms, I simply lack the knowledge of how to close them back</p>",
        "id": 268142105,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642274523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/Expressing.20parsing/near/268142062\">said</a>:</p>\n<blockquote>\n<p>induces?</p>\n</blockquote>\n<p>Sorry, I don't understand that message at all.</p>",
        "id": 268142115,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642274550
    },
    {
        "content": "<p>you said induces and it didn't make sense</p>",
        "id": 268142124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642274569
    },
    {
        "content": "<p>oh sorry! I wanted to write indices</p>",
        "id": 268142135,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642274590
    },
    {
        "content": "<p>de Bruijn indices</p>",
        "id": 268142137,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642274601
    },
    {
        "content": "<p>modulo spelling of that name</p>",
        "id": 268142140,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642274610
    },
    {
        "content": "<p>So that's what the first link was about:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr.pi</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">nh</span> <span class=\"bp\">←</span> <span class=\"n\">collect_proofs_in</span> <span class=\"n\">d</span> <span class=\"n\">ctx</span> <span class=\"o\">(</span><span class=\"n\">ns</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">),</span>\n  <span class=\"n\">var</span> <span class=\"bp\">←</span> <span class=\"n\">mk_local'</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"n\">collect_proofs_in</span> <span class=\"o\">(</span><span class=\"n\">expr.instantiate_var</span> <span class=\"n\">e</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">var</span><span class=\"o\">::</span><span class=\"n\">ctx</span><span class=\"o\">)</span> <span class=\"n\">nh</span>\n</code></pre></div>\n<p>You use <code>var &lt;- mk_local' n b d</code> to get a new local constant and then use <code>expr.instantiate_var e var</code> to instantiate the body before recursing</p>",
        "id": 268142186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642274643
    },
    {
        "content": "<p>and hold on to <code>var</code> as the \"variable being bound\" in your inductive representation of the binder</p>",
        "id": 268142205,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642274680
    },
    {
        "content": "<p>Thanks, I'll try that.</p>",
        "id": 268142308,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642274846
    }
]