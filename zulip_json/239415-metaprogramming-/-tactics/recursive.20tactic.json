[
    {
        "content": "<p>I am trying to write a (noninteractive) <code>tactic</code> that recursively calls itself. Like in this MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">mwe</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">tactic.trace</span> <span class=\"s2\">\"done\"</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"n\">unit.star</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">tactic.trace</span> <span class=\"s2\">\"still to go\"</span><span class=\"o\">,</span> <span class=\"n\">mwe</span> <span class=\"n\">m</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>resulting in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">mwe</span> <span class=\"n\">m</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">m</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℕ</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">tactic_state</span>\n</code></pre></div>\n<p>It seems to me that when the equation compiler compiles the recursive <code>def</code>, no special treatment is given to the <code>tactic</code> monad's <code>bind</code>, so the <code>tactic_state</code> leaks through.</p>\n<p>According to <a href=\"https://wiki.haskell.org/Recursion_in_a_monad\">https://wiki.haskell.org/Recursion_in_a_monad</a>, recursion in monads is possible in Haskell (?), and I am asking myself if the same holds for Lean, and if so, how to do it.</p>",
        "id": 281813250,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1652184247
    },
    {
        "content": "<p>The problem is that <code>n</code> is a parameter of the function (before the colon) and so you cannot give it as an argument in recursive calls (it remains fixed throughout the recursion). If you put it after the colon, it should work (untested):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">mwe</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"k\">do</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">tactic.trace</span> <span class=\"s2\">\"done\"</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"n\">unit.star</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">tactic.trace</span> <span class=\"s2\">\"still to go\"</span><span class=\"o\">,</span> <span class=\"n\">mwe</span> <span class=\"n\">m</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(Changed in Lean 4 btw.)</p>",
        "id": 281813953,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1652184619
    },
    {
        "content": "<p>You have to use the equation compiler at the top level to write recursion</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">mwe</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">tactic.trace</span> <span class=\"s2\">\"done\"</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"n\">unit.star</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">tactic.trace</span> <span class=\"s2\">\"still to go\"</span><span class=\"o\">,</span> <span class=\"n\">mwe</span> <span class=\"n\">m</span>\n</code></pre></div>",
        "id": 281813972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652184633
    },
    {
        "content": "<p>oh I see! thanks a bunch to both of you!</p>",
        "id": 281814018,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1652184681
    },
    {
        "content": "<p>Jannis's solution also works, although only for <code>meta</code> definitions (otherwise you will get an error saying <code>mwe</code> is not in scope in the recursive call)</p>",
        "id": 281814063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652184713
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/recursive.20tactic/near/281814063\">said</a>:</p>\n<blockquote>\n<p>Jannis's solution also works, although only for <code>meta</code> definitions (otherwise you will get an error saying <code>mwe</code> is not in scope in the recursive call)</p>\n</blockquote>\n<p>Oh, I didn't even realise that. I should stop commenting on Lean 3 stuff. <span aria-label=\"silence\" class=\"emoji emoji-1f910\" role=\"img\" title=\"silence\">:silence:</span></p>",
        "id": 281814202,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1652184780
    },
    {
        "content": "<p>that was one change with lean 4</p>",
        "id": 281814217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652184791
    },
    {
        "content": "<p>in fact, in earlier versions of lean 3 you couldn't do this even in meta definitions, you <em>have</em> to use the equation compiler</p>",
        "id": 281814255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652184819
    },
    {
        "content": "<p>so you would get stuff like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">loop</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">loop</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>which introduces a useless argument because <code>meta def loop : tactic unit := loop</code> didn't compile</p>",
        "id": 281814383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652184869
    },
    {
        "content": "<p>You actually still have this issue in lean 3 in mutual defs (which have to use the equation compiler), which explains the useless parameter in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.rcases_patt_parse_hi'/src\">src#tactic.rcases_patt_parse_hi'</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.rcases_patt_parse'/src\">src#tactic.rcases_patt_parse'</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.rcases_patt_parse_list'/src\">src#tactic.rcases_patt_parse_list'</a></p>",
        "id": 281814799,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652185088
    },
    {
        "content": "<p>One more reason Lean 4 makes me very happy.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"210057\">Fabian Glöckle</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/recursive.20tactic/near/281813250\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">mwe</span> <span class=\"n\">m</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">m</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℕ</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">tactic_state</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Btw to demystify this error: <code>tactic α</code> is defined as something like <code>tactic_state -&gt; (α x tactic_state)</code> (with some layers of wrapping in between). So when you apply <code>mwe : tactic unit</code> to an argument, Lean tries to interpret <code>mwe</code> as a function, unfolds <code>tactic</code> and tries to interpret the argument as a <code>tactic_state</code>.</p>",
        "id": 281815082,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1652185259
    },
    {
        "content": "<p>Yes, thank you!</p>",
        "id": 281837164,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1652195061
    }
]