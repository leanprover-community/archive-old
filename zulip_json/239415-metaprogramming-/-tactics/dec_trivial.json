[
    {
        "content": "<p>Hi, I tried to understand how <code>dec_trivial</code> works. I read the corrsponding section in TPIL, but there are still some things I don't understand. In particular, I don't understand how <code>by tactic.triv</code> differs from <code>trivial</code>, and why things like whether the statement is an example or a lemma and <code>@</code> notation seem to affect whether a proof works, as illustrated by these examples:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">of_as_true</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">triv</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">of_as_true</span> <span class=\"n\">trivial</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">of_as_true</span> <span class=\"n\">trivial</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">of_as_true</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">trivial</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">of_as_true</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">triv</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n\n\n<p>Could anyone explain what's happening here?</p>",
        "id": 203956215,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1594820431
    },
    {
        "content": "<p>The difference here is how Lean elaborates the terms. By the time <code>trivial</code> is being elaborated, we haven't done the reduction of the <code>decidable</code> instance yet. But with <code>by</code>, elaboration is done differently. I think <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> might be more able to fill in the details of the elaboration process</p>",
        "id": 203961780,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594823042
    },
    {
        "content": "<p>Yes, tactics are first put in a list and then executed later.  In particular, we try to synthesize type-class instances first.</p>",
        "id": 204396523,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1595232948
    }
]