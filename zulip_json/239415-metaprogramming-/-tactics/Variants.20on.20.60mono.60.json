[
    {
        "content": "<p>I see.  I would imagine this to be a non-\"fancy\" tactic, safe to use at any stage of a proof.  (As <code>congr</code> is.). But this question seems implementation-dependent to me so I think it's too early to say for sure.  This is just a few lines of prototype code, the point is just to confirm or refute the idea that it's a tactic we'd use -- it would get completely rewritten before joining mathlib.</p>",
        "id": 300602476,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1664074584
    },
    {
        "content": "<p>I just encountered a really weird <code>apply</code>/<code>positivity</code> bug: In a very specific case, if the goal I call it on was generated by <code>apply</code>, <code>positivity</code> fails; but if it was generated by <code>refine</code>, <code>positivity</code> succeeds.</p>",
        "id": 300638974,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664105588
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/57ab484b2b1149e99a40d98d72ba06046ff816da/src/combinatorics/szemeredi/increment.lean#L161\">Here</a> it is.</p>",
        "id": 300639970,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1664106215
    },
    {
        "content": "<p>I encountered something similar: does instantiating some mvars help?</p>",
        "id": 300652244,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1664113379
    },
    {
        "content": "<p>I'm on mobile, but there is more context in a PR of mine that was merged earlier today, fixing what I think is a similar big for compute_degree_le</p>",
        "id": 300652826,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1664113707
    }
]