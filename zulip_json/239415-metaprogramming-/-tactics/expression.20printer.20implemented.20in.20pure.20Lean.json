[
    {
        "content": "<p>Is there a way to print an <code>expr</code> directly in Lean, to get results similar to <code>tactic.pp e</code> ? I mean, without using some <code>meta constant</code> written in C++ such as <code>expr.to_string</code> or <code>tactic_state.pp_tagged</code> ?</p>",
        "id": 269288831,
        "sender_full_name": "Xavier Martinet",
        "timestamp": 1643130463
    },
    {
        "content": "<p>The closest thing is <code>expr.to_raw_fmt</code>. It's not really possible to replicate <code>pp e</code> if <code>expr</code> is your only input because you need access to the local context to resolve some types</p>",
        "id": 269367571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643177057
    },
    {
        "content": "<p>Thanks. That would output the AST, not the pretty print though.</p>\n<p>And if I were able to feed the local context in a format that Lean would understand, I suppose there is no off-the-shelf pure-Lean function, right? I would have to re-implement the C++ pretty printer in Lean (God forbid me!)</p>",
        "id": 269377439,
        "sender_full_name": "Xavier Martinet",
        "timestamp": 1643186457
    },
    {
        "content": "<p>I don't think that writing an approximate pretty printer in Lean would be that bad</p>",
        "id": 269377726,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643186628
    },
    {
        "content": "<p>That is something I am interested in, because I would like to add some type annotation to disambiguate expressions (ie, having a bijection pretty-print &lt;-&gt; <code>expr</code>), without writing too many of them or too many parentheses. There are tricks I can use by leveraging the <code>eformat</code>, however everything related to precedence or infix gets lost in this format :(</p>",
        "id": 269381190,
        "sender_full_name": "Xavier Martinet",
        "timestamp": 1643188569
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"324140\">@Xavier Martinet</span> What's an example of something you want to do? I was thinking about modifying the pretty printer from the C++ side to have an option to add type annotations for numerals (like <code>(5 : zmod 7)</code>).</p>",
        "id": 269383700,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643190097
    },
    {
        "content": "<p>This goal is surprisingly tricky to achieve (except by printing every argument explicitly of course). It is an explicit goal of the  Lean 4 project.</p>",
        "id": 269383712,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643190102
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/expression.20printer.20implemented.20in.20pure.20Lean/near/269383700\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"324140\">Xavier Martinet</span> What's an example of something you want to do? I was thinking about modifying the pretty printer from the C++ side to have an option to add type annotations for numerals (like <code>(5 : zmod 7)</code>).</p>\n</blockquote>\n<p>typically, I would like to copy-paste the pretty-print of the tactic state to resume a tactic-mode proof at a given point without having to go through all the steps<br>\nalso, if I extract some lemmas from a proof (e.g., the <code>have</code>s within a tactic-mode proof), or even the final actual theorem), I would like to be able to copy-paste their statements without caring about the actual context they were written in</p>\n<p>What I do so far:</p>\n<ul>\n<li>I traverse the <code>eformat</code> graph</li>\n<li>if within a <code>tagged_format.tag</code>, the expression is a coercion, I add parentheses + type annotations around its pretty print</li>\n<li>a special case is indeed for numerals, as their type depends on the context while parsing: in that case, I just check if the type returned by parsing with no context is different from actual one, and if so I add parentheses + type annotation</li>\n<li>eventually there is a check to verify if the new pretty print, when parsed back to an <code>expr</code>, is alpha-equivalent to the original expression</li>\n</ul>\n<p>For instance , if the input string is <code>(1 : ℝ) + (x : ℝ)</code> where <code>x : ℕ</code>, the current <code>pp</code> would return <code>1 + ↑x</code> while the algorithm described above would return <code>(1 : ℝ) + (↑x : ℝ) </code>:</p>\n<ul>\n<li><code>1</code> is indeed parsed as a <code>ℝ</code>, and not as a <code>ℕ</code> coerced to a <code>ℝ</code>,</li>\n<li><code>x</code> is parsed as <code>ℕ</code> coerced to a <code>ℝ</code></li>\n</ul>",
        "id": 269386684,
        "sender_full_name": "Xavier Martinet",
        "timestamp": 1643191736
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"324140\">Xavier Martinet</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/expression.20printer.20implemented.20in.20pure.20Lean/near/269386684\">said</a>:</p>\n<blockquote>\n<p>typically, I would like to copy-paste the pretty-print of the tactic state to resume a tactic-mode proof at a given point without having to go through all the steps<br>\nalso, if I extract some lemmas from a proof (e.g., the <code>have</code>s within a tactic-mode proof), or even the final actual theorem), I would like to be able to copy-paste their statements without caring about the actual context they were written in</p>\n</blockquote>\n<p>This is precisely the goal that is difficult. You can search for \"round tripping\" for many discussions about that.</p>",
        "id": 269389324,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643193270
    }
]