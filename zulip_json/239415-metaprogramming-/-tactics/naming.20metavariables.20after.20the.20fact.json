[
    {
        "content": "<p>Sometimes it is convenient (or good pedagogy) to \"leave a metavariable for later\" in a proof.</p>\n<p>However when we do this in Lean 3 this leaves <code>?m_i</code> names in the proof state, which are highly confusing to people who haven't thought about metavariables, and unpleasant to read for anyone.</p>\n<p>Is there a good way to give names to metavariables after the fact? Here's an example of what I would like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">fsplit</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> The goals are:</span>\n<span class=\"cm\">  ```</span>\n<span class=\"cm\">  ⊢ Type</span>\n\n<span class=\"cm\">  ⊢ ℕ → ?m_1</span>\n<span class=\"cm\">  ```</span>\n\n<span class=\"cm\">  I would like them to be:</span>\n<span class=\"cm\">  ```</span>\n<span class=\"cm\">  ⊢ Type</span>\n\n<span class=\"cm\">  α : Type := ?m_1</span>\n<span class=\"cm\">  ⊢ ℕ → α</span>\n<span class=\"cm\">  ```</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Lean 4 has a nice mechanism for naming metavariables at the time they are created (i.e. using <code>?α</code> in place of <code>_</code> in a <code>refine</code> statement), but I'm interested in Lean 3 solutions for now.</p>\n<p>One solution is to replace the <code>fsplit</code> above with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n</code></pre></div>\n<p>and this gives me the desired goals.</p>\n<p>However I am specifically interested in solutions that work <em>after the fact</em>. I'll post below a more involved example where the <code>let α := _</code> trick doesn't work, as well.</p>",
        "id": 282048341,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652318384
    },
    {
        "content": "<p>I'd be interested in that more involved example!</p>",
        "id": 282060307,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652333460
    },
    {
        "content": "<p>Sorry, paused on the more involved example to ask my parallel question about <code>to_expr</code>. Essentially it's implicit there: when you use <code>refine</code>, you can't generate typeclass failures as new goals, while <code>fsplit</code> can. Thus the <code>let</code> trick, which requires <code>refine</code>, will fail if some of the other underscores are typeclasses depending on the named metavariable.</p>",
        "id": 282068009,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652340479
    },
    {
        "content": "<p>True. Note that <code>refine @foobar.mk α (id _) (id _) (id _) quux xyzzy</code> would work. But it is of course very ugly.</p>",
        "id": 282068170,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652340596
    },
    {
        "content": "<p>The main point being that <code>(id _)</code> will turn a typeclass argument into a new goal.</p>",
        "id": 282068233,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652340612
    },
    {
        "content": "<p>So is this some difference between elaborating with an expected type vs without? That when elaborating with an expected type, failed typeclasses searches are just failure. But if we insert <code>(id _)</code> the expect type can't propagate down that far, so the elaboration mode switches, and the typeclass searches instead result in new goals...</p>",
        "id": 282075651,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652345171
    },
    {
        "content": "<p>This makes me uncertain whether I should be thinking up some hacky <code>refine'</code> that inserts <code>id</code> in places, or hoping that it is possible or reasonable to change the behaviour of elaboration-with-expected-type so we still get the failed typeclass searches as goals.</p>",
        "id": 282075738,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652345230
    },
    {
        "content": "<p>I've never looked under the hood of <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#apply_with\">tactic#apply_with</a> but you can pass it a config option <code>{instances := ff}</code> that turns all typeclass arguments into new goals.</p>",
        "id": 282076191,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652345453
    },
    {
        "content": "<p>I don't think that argument for <code>apply</code> is relevant. It's the all in the difference between typeclass failures causing failure in <code>to_expr</code> with an expected type, vs causing new goals in <code>to_expr</code> without an expected type.</p>",
        "id": 282087873,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652352679
    },
    {
        "content": "<p>I don't understand why there would be that difference in behaviour.</p>",
        "id": 282087892,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652352689
    },
    {
        "content": "<p>And my limited attempts to find it in the C++ have not been very successful. :-)</p>",
        "id": 282087916,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652352703
    }
]