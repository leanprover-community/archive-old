[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"n\">has_add.add</span>\n<span class=\"c1\">-- def has_add.add : Π {α : Type u} [c : has_add α], α → α → α :=</span>\n<span class=\"c1\">-- λ (α : Type u) [c : has_add α], [has_add.add c]</span>\n</code></pre></div>\n\n<p>Suppose I have <code>e &lt;- resolve_name `has_add.add</code>. How do I ask lean what the names are of its arguments?<br>\nOr rather, suppose I know that it has an argument called <code>c</code>. How do I ask lean at which position this argument is?</p>",
        "id": 214943101,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603963764
    },
    {
        "content": "<p>I guess you could get the type and look for binders with that name</p>",
        "id": 214943268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603963846
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">find_named_arg</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr.pi</span> <span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"n\">nat.succ</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">find_named_arg</span> <span class=\"n\">e</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"k\">do</span>\n  <span class=\"n\">d</span> <span class=\"bp\">←</span> <span class=\"n\">get_decl</span> <span class=\"bp\">``</span><span class=\"n\">has_add.add</span><span class=\"o\">,</span>\n  <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"n\">find_named_arg</span> <span class=\"bp\">`</span><span class=\"n\">c</span> <span class=\"n\">d.type</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">n</span> <span class=\"c1\">-- 1</span>\n</code></pre></div>",
        "id": 214943683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603964063
    },
    {
        "content": "<p>Note however that the names are not unique:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">find_named_arg</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr.pi</span> <span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"k\">else</span> <span class=\"o\">[])</span> <span class=\"bp\">++</span> <span class=\"n\">nat.succ</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">find_named_arg</span> <span class=\"n\">e</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"k\">do</span>\n  <span class=\"n\">d</span> <span class=\"bp\">←</span> <span class=\"n\">get_decl</span> <span class=\"bp\">``</span><span class=\"n\">has_add.add</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"bp\">$</span> <span class=\"n\">find_named_arg</span> <span class=\"bp\">`</span><span class=\"n\">a</span> <span class=\"n\">d.type</span> <span class=\"c1\">-- [2, 3]</span>\n</code></pre></div>",
        "id": 214943974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603964213
    },
    {
        "content": "<p>But often they will be unique, right?</p>",
        "id": 214944059,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603964272
    },
    {
        "content": "<p>They are whatever the user wrote</p>",
        "id": 214944143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603964303
    },
    {
        "content": "<p>Your first version of <code>find_named_arg</code> will just return the first occurence, right? I guess that's good enough for me.</p>",
        "id": 214944155,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603964311
    },
    {
        "content": "<p>the autogenerated names are not disambiguated, so you will find <code>a</code> (or rather, <code>ᾰ</code>) a lot</p>",
        "id": 214944200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603964341
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/access.20named.20arguments.20of.20declaration/near/214944143\">said</a>:</p>\n<blockquote>\n<p>They are whatever the user wrote</p>\n</blockquote>\n<p>Right, which means that if it's not an auto-generated name, then it's very likely to be unique.</p>",
        "id": 214944215,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603964346
    },
    {
        "content": "<p>instances however are disambiguated:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">arg_names</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">name</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr.pi</span> <span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">arg_names</span> <span class=\"n\">e</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">has_lt</span> <span class=\"n\">ℕ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_le</span> <span class=\"n\">ℕ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"k\">do</span>\n  <span class=\"n\">d</span> <span class=\"bp\">←</span> <span class=\"n\">get_decl</span> <span class=\"bp\">``</span><span class=\"n\">foo</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"bp\">$</span> <span class=\"n\">arg_names</span> <span class=\"n\">d.type</span> <span class=\"c1\">-- [_inst_1, _inst_2, a, a]</span>\n</code></pre></div>",
        "id": 214944536,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603964529
    },
    {
        "content": "<p>Right, but for my application I care about things like <code>hc : 0 &lt; c</code>.</p>",
        "id": 214944880,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603964741
    },
    {
        "content": "<p>Those will be unique 99.9% of the time.</p>",
        "id": 214944901,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603964753
    },
    {
        "content": "<p>unless they are called <code>this</code></p>",
        "id": 214944952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603964764
    },
    {
        "content": "<p>what do you want to do with this information?</p>",
        "id": 214944965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603964771
    },
    {
        "content": "<p>We haven't really been cultivating an environment of \"binder names matter\"</p>",
        "id": 214945004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603964793
    },
    {
        "content": "<p>Also explicit <code>_</code> arguments:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">has_lt</span> <span class=\"n\">ℕ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_le</span> <span class=\"n\">ℕ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"k\">do</span>\n  <span class=\"n\">d</span> <span class=\"bp\">←</span> <span class=\"n\">get_decl</span> <span class=\"bp\">``</span><span class=\"n\">foo</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"bp\">$</span> <span class=\"n\">arg_names</span> <span class=\"n\">d.type</span> <span class=\"c1\">-- [_inst_1, _inst_2, _x, _x]</span>\n</code></pre></div>",
        "id": 214945219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603964894
    },
    {
        "content": "<p>I'm trying to build a tactic that will help beginners. Many beginners don't understand the naming convention. If they are doing a simple calculations and the want to change the goal from <code>x &lt; y</code> to <code>2 * x &lt; 2 * y</code>, which lemma do they need? I've collected a list of lemmas, and its currently ~70 lines long. I already know it is not complete, and should probably be twice as long.</p>",
        "id": 214945336,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603964994
    },
    {
        "content": "<p>So I want to build a <code>calc_step</code> tactic, that will be help the user \"say what they want\". And <code>calc_step?</code> should tell them the lemma they are looking for.</p>",
        "id": 214945436,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603965039
    },
    {
        "content": "<p>At the moment you can write <code>calc_step 2 mul L</code>, and it will change <code>x &lt; y</code> into <code>2 * x &lt; 2 * y</code>, and discharge the side goal <code>0 &lt; 2</code> by <code>norm_num</code>.</p>",
        "id": 214945497,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603965078
    },
    {
        "content": "<p>But the way it works is that it uses a custom database of 70 curated lemmas.</p>",
        "id": 214945535,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603965104
    },
    {
        "content": "<p>Now I would like to make it extensible using an attribute.</p>",
        "id": 214945547,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603965115
    },
    {
        "content": "<p>So I need to know which place to plug in the value <code>c</code> for lemmas like <code>0 &lt; c -&gt; c * a &lt; c * b -&gt; a &lt; b</code></p>",
        "id": 214945709,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603965210
    },
    {
        "content": "<p>you should analyze the type of the theorem for that rather than relying on names</p>",
        "id": 214945749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603965242
    },
    {
        "content": "<p>Hmm... that sounds a lot harder</p>",
        "id": 214945802,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603965262
    },
    {
        "content": "<p>in this case, <code>c</code> is the only non-propositional argument that doesn't appear in the goal</p>",
        "id": 214945827,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603965288
    },
    {
        "content": "<p>See the <code>calc-step</code> branch for what I currently have</p>",
        "id": 214945828,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603965288
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/access.20named.20arguments.20of.20declaration/near/214945827\">said</a>:</p>\n<blockquote>\n<p>in this case, <code>c</code> is the only non-propositional argument that doesn't appear in the goal</p>\n</blockquote>\n<p>Unless the goal was stated as an <code>iff</code></p>",
        "id": 214945860,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603965308
    },
    {
        "content": "<p>In which case you need to look at both sides of the goal</p>",
        "id": 214945895,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603965328
    },
    {
        "content": "<p>well you have to classify the lemma anyway to use it</p>",
        "id": 214945901,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603965331
    },
    {
        "content": "<p>Ok, this analyzing of the type sounds like a good idea. But I guess I'll need a ton of help to pull it off. Good thing that we have this stream.</p>",
        "id": 214946035,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603965385
    },
    {
        "content": "<p>if you go to theorems about <code>nat</code> for instance the forms are exactly the same but the variables are called <code>k,m,n</code> instead</p>",
        "id": 214946049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603965394
    },
    {
        "content": "<p>and we can't decide whether <code>n</code> names the first or second variable ;)</p>",
        "id": 214946105,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603965433
    },
    {
        "content": "<p>No sure. I was thinking that the attribute would look like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[calc_step (`c, [`hc]</span><span class=\"o\">)]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foo_bar</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 214946151,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603965468
    },
    {
        "content": "<p>So the names would be tailored to the lemma that is being tagged.</p>",
        "id": 214946224,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603965498
    },
    {
        "content": "<p>But if we can change it to <code>@[calc_step] lemma foobar</code> that would be even nicer.</p>",
        "id": 214946256,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603965515
    },
    {
        "content": "<p>If you have h and want to change it to h', can you do <code>have h' : ..., by library_search</code>?</p>",
        "id": 214946459,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603965623
    }
]