[
    {
        "content": "<p>It would be great if I could write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp_equiv]</span>\n<span class=\"kd\">def</span> <span class=\"n\">to_finsupp</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid_algebra</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">→₀</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f.map_domain</span> <span class=\"n\">multiplicative.to_add</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f.map_domain</span> <span class=\"n\">multiplicative.of_add</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">map_domain_comp</span><span class=\"o\">],</span> <span class=\"n\">convert</span> <span class=\"n\">map_domain_id</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">map_domain_comp</span><span class=\"o\">],</span> <span class=\"n\">convert</span> <span class=\"n\">map_domain_id</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n\n<p>and it would automatically generate for me the lemmas</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">to_finsupp_apply</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">to_finsupp</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f.map_domain</span> <span class=\"n\">multiplicative.to_add</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">to_finsupp_symm_apply</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">to_finsupp.symm</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f.map_domain</span> <span class=\"n\">multiplicative.of_add</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n\n<p>How hard would this be? Is it straightforward to extract the expression used to define <code>to_fun</code> and reuse it in a lemma?</p>",
        "id": 213538442,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602841202
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/attributes.html#simps\">https://leanprover-community.github.io/mathlib_docs/attributes.html#simps</a></p>",
        "id": 213550737,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602849934
    },
    {
        "content": "<p>I was wondering whether <code>simps</code> already did equivs</p>",
        "id": 213553149,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602851383
    },
    {
        "content": "<p>The example in those docs appears to not actually work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.equiv.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">equiv.simps.inv_fun</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">e.symm</span>\n\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">add_1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">≃</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">add_1_to_fun</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">add_1_inv_fun</span>\n</code></pre></div>\n\n<p>fails with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Invalid</span> <span class=\"n\">custom</span> <span class=\"n\">projection</span><span class=\"o\">:</span>\n <span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">e.symm</span><span class=\"o\">)</span>\n<span class=\"n\">Expression</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">equiv.inv_fun.</span>\n</code></pre></div>",
        "id": 213554730,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602852380
    },
    {
        "content": "<p>Which is super weird, because the following is just fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">equiv.simps.inv_fun</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">=</span> <span class=\"n\">equiv.inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">equiv.inv_fun</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">equiv.simps.inv_fun</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n\n<p>so they sure look to be definitionally equal</p>",
        "id": 213554974,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602852526
    },
    {
        "content": "<p>I tried <code>simp</code> with <code>equiv</code>, and it generated lemmas not in simp-normal form.</p>",
        "id": 213560597,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602855430
    },
    {
        "content": "<p>E.g., it used <code>e.inv_fun</code> instead of <code>e.symm</code></p>",
        "id": 213560633,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602855448
    },
    {
        "content": "<p>Right - and trying the custom projections just seems to fail every time</p>",
        "id": 213564220,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602857107
    },
    {
        "content": "<p>cc: <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span></p>",
        "id": 213581163,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602864899
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> That is weird. I will investigate.<br>\nI tried to adapt the file <code>equiv.basic</code> to use <code>@[simps]</code>, but didn't PR it yet, because there was a broken test:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/compare/use-simps-plus\">https://github.com/leanprover-community/mathlib/compare/use-simps-plus</a><br>\nI will PR it anyway. In that PR I write (in the <code>equiv</code> namespace)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- See Note [custom simps projection] -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">simps.inv_fun</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">e.symm</span>\n</code></pre></div>\n\n<p>and it works just fine. Not sure what is different.</p>",
        "id": 213594343,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1602871387
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> Yeah, <code>@[simps]</code> requires a setup to use the right projection (a declaration <code>equiv.simps.inv_fun</code> like Eric's example).</p>",
        "id": 213594425,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1602871429
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> The problem was that you wrote <code>Type*</code> instead of <code>Sort*</code>, so the custom projection had the wrong type.</p>",
        "id": 213601693,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1602875272
    },
    {
        "content": "<p>I made the error message better in that case: <a href=\"https://github.com/leanprover-community/mathlib/issues/4653\">#4653</a></p>",
        "id": 213601769,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1602875297
    },
    {
        "content": "<p>I also opened a PR to use <code>@[simps]</code> for <code>equiv</code>: <a href=\"https://github.com/leanprover-community/mathlib/issues/4652\">#4652</a></p>",
        "id": 213601803,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1602875319
    },
    {
        "content": "<p>Nice catch - thought why does the matter if I apply it to an equiv in the nat universe?</p>",
        "id": 213601842,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602875338
    },
    {
        "content": "<p>Regarding <a href=\"https://github.com/leanprover-community/mathlib/issues/4652\">#4652</a> - it would be great if we could override simps to keep the old names</p>",
        "id": 213602004,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602875437
    },
    {
        "content": "<p>Since <code>apply</code> is used fairly universally in lemma names for things involving coercion to func</p>",
        "id": 213602031,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602875459
    },
    {
        "content": "<p><code>@[simps]</code> generate the custom projection for each structure once, and then the custom projection stays the same for all occurrences of <code>@[simps]</code> for that structure. I could theoretically allow this, but it would be quite some work, and not gain much/anything.</p>",
        "id": 213602105,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1602875516
    },
    {
        "content": "<p>Yes, the custom naming thing has been mentioned before. It's on my to do list. I will try to do it relatively soon.</p>",
        "id": 213602208,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1602875563
    },
    {
        "content": "<p>If you have thoughts on how to specifically implement this, please comment here: <a href=\"#narrow/stream/113488-general/topic/lemma.20naming.20by.20.40.5Bsimps.5D\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/lemma.20naming.20by.20.40.5Bsimps.5D</a><br>\nOne thing I can certainly do is that the generated names for <code>equiv</code> are renamed from <code>..._to_fun</code>  and <code>..._inv_fun</code> to <code>..._apply</code> and <code>..._symm</code>. I'm not sure if that is sufficient, for example for nested structures (which happens when you <code>extend</code> a structure with <code>old_structure_cmd</code> false).</p>",
        "id": 213602544,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1602875755
    },
    {
        "content": "<p>After <a href=\"https://github.com/leanprover-community/mathlib/issues/4663\">#4663</a> is merged we can give different names to the lemmas <code>@[simps]</code> generates. Examples are in the tests of that PR, the file <code>embedding</code> of that PR, and in <a href=\"https://github.com/leanprover-community/mathlib/issues/4652\">#4652</a>.</p>",
        "id": 213673746,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1602973705
    },
    {
        "content": "<p>That's great news, thanks!</p>",
        "id": 213693810,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603006645
    },
    {
        "content": "<p>From what I've seen, the convention seems to be <code>_apply</code> and <code>_symm_apply</code> (not just <code>_symm</code>)</p>",
        "id": 213693854,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603006694
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> [said](<a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/Automatic.20apply.20lemmas.20for.20equivalences.20(and.20other.20bundle.2E.2E.2E/near/213693854)\">https://leanprover.zulipchat.com/#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/Automatic.20apply.20lemmas.20for.20equivalences.20(and.20other.20bundle.2E.2E.2E/near/213693854)</a>:</p>\n<blockquote>\n<p>From what I've seen, the convention seems to be <code>_apply</code> and <code>_symm_apply</code> (not just <code>_symm</code>)</p>\n</blockquote>\n<p>I take it that you responded to my commit message? I saw that convention myself too (after first using <code>_symm</code>), and I <em>think</em> I have changed all occurrences that I wrote <code>_symm</code> by <code>_symm_apply</code>.</p>",
        "id": 213694436,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603007824
    }
]