[
    {
        "content": "<p>I am trying to understand how tactic writing is done in Lean. I have a very trivial doubt here:<br>\nsimple use of intro</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">e</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>successfully generates a tactic state  : <a href=\"/user_uploads/3121/tquSyo2RVhKYMXVEfZc31V_7/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/tquSyo2RVhKYMXVEfZc31V_7/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/tquSyo2RVhKYMXVEfZc31V_7/image.png\"></a></div><p>But when I call <code>tactic.intro</code> inside a meta function like this :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">intro_copy</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">tactic.intro</span> <span class=\"n\">q</span>\n</code></pre></div>\n<p>and use <code>intro_copy c</code> inside <code>begin end</code> block, it is showing <code>unknown identifier c </code>. I am not understanding what should be the appropriate way to do this and what should be the general approach in using other tactics inside a meta function while writing tactics. Any leads on this <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ?</p>",
        "id": 257930411,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1634487809
    },
    {
        "content": "<p>The issue is that you are calling a noninteractive tactic in a tactic block, so you don't get any parsing niceties. You would have to write <code>intro_copy `c</code> since that's the syntax to pass a name to a function</p>",
        "id": 257930549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634487956
    },
    {
        "content": "<p>If you want to use a tactic parser, then you need to put <code>intro_copy</code> in the <code>tactic.interactive</code> namespace, and use <code>parse ident</code> as the type of <code>q</code>, similar to what <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.intro/src\">src#tactic.interactive.intro</a> is doing</p>",
        "id": 257930648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634488034
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> it did work! implementation of <code>intro</code> is in two files as I saw : interactive.lean and tactic.lean: are these implementation meant to be interdependent or are used for different purposes?</p>",
        "id": 257934506,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1634491525
    },
    {
        "content": "<p>the first one is the interactive tactic, the second is the noninteractive tactic</p>",
        "id": 257934581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634491571
    },
    {
        "content": "<p>the interactive tactic has a special type signature using <code>parse</code> which indicates how the tactic is parsed</p>",
        "id": 257934600,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634491602
    },
    {
        "content": "<p>otherwise it is just a wrapper for the noninteractive tactic in most cases</p>",
        "id": 257934612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634491619
    },
    {
        "content": "<p>generally, the interactive tactic is meant to be called by users by a begin-end block, and the noninteractive tactic is meant to be called by other tactics in a do block / metaprogramming contexts</p>",
        "id": 257934671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634491681
    }
]