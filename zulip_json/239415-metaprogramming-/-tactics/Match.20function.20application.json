[
    {
        "content": "<p>I want to match something of the form <code>f a</code> where <code>f : seminorm 𝕜 E</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/seminorm\">docs#seminorm</a>). I can match <code>f</code> alone using <code>`(⇑%%f)</code> but how do I match the function application?</p>",
        "id": 295008293,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661332915
    },
    {
        "content": "<p>Figured it out! I needed <code>expr.app `(⇑%%f) `(%%a)</code>. Feel free to tell me if there's something more idiomatic.</p>",
        "id": 295010341,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661333765
    },
    {
        "content": "<p>Does <code> `(⇑%%f %%a) </code> not work?</p>",
        "id": 295029002,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1661342069
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">positivity_seminorm</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">strictness</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">⇑%%</span><span class=\"n\">f</span> <span class=\"bp\">%%</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nonnegative</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">mk_app</span> <span class=\"bp\">``</span><span class=\"n\">map_nonneg_add</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n               <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">nonnegative</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">mk_app</span> <span class=\"bp\">``</span><span class=\"n\">map_nonneg_mul</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">failed</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">function expected at</span>\n<span class=\"cm\">  ⇑_x_1</span>\n<span class=\"cm\">term has type</span>\n<span class=\"cm\">  ?m_1 _x_1</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>(MWE on <a href=\"https://github.com/leanprover-community/mathlib/pull/16228\">#16228</a>)</p>",
        "id": 295037181,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661344518
    },
    {
        "content": "<p>Does <code> `(⇑%%f)</code> match a specific <code>coe_to_fun</code> or is the instance parameter not part of the match?</p>",
        "id": 295049411,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661348467
    },
    {
        "content": "<p>The instance parameter is not part of the match.</p>",
        "id": 295051490,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661349097
    }
]