[
    {
        "content": "<p>Suppose I want to write a tactic <code>foo</code> that calls an interactive tactic <code>bar</code>. One simple way to do this is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.bar</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">bar</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Now suppose that I insist on not importing <code>tactic.bar</code> in the file where I define <code>foo</code>. I am happy to rely on the user to have also imported <code>tactic.bar</code> by the time <code>foo</code> is actually invoked. Thus I want <code>foo</code> to run a parser on the string <code>\"bar\"</code> at invocation time, and then run the discovered tactic.</p>\n<p>Is there a simple way to achieve this?</p>\n<p>I see that something along these lines happens at <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/hint.lean#L40\">https://github.com/leanprover-community/mathlib/blob/master/src/tactic/hint.lean#L40</a>, but this is doing something slightly different (resolving the <code>\"`[bar]\"</code> to an <code>expr</code>, and making a new declaration from it).</p>",
        "id": 302385971,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1664945402
    },
    {
        "content": "<p>Do you need to use the interactive parser here? (the <code> `[ ... ]</code>)? It is a lot easier if you can write out the expr directly</p>",
        "id": 302397477,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664953243
    },
    {
        "content": "<p>Sorry, I should <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>. All I want to do is take a file that has a tactic that calls <code>`[ring]</code>, and avoid the need to have <code>import tactic.ring</code>.</p>",
        "id": 302416714,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1664961164
    },
    {
        "content": "<p>that still doesn't quite answer my question. Is it possible for you to refactor the original file so that it does not need to use the `[] notation? It is the difference between calling a function which is looked up at tactic execution time (easy) and running a parser that only exists at tactic execution time (hard)</p>",
        "id": 302534642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665000010
    },
    {
        "content": "<p>Here's an example for calling <code> `[ring]</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">expr.const</span> <span class=\"bp\">`</span><span class=\"n\">tactic.interactive.ring</span> <span class=\"o\">[])</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">none</span> <span class=\"n\">unit</span><span class=\"o\">):</span><span class=\"n\">expr</span><span class=\"o\">),</span>\n  <span class=\"n\">tac</span> <span class=\"bp\">←</span> <span class=\"n\">eval_expr</span> <span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">tac</span>\n</code></pre></div>\n<p>If at runtime the <code>tactic.interactive.ring</code> declaration exists, it will be executed, otherwise it fails with a <code>unknown declaration 'tactic.interactive.ring'</code> error</p>",
        "id": 302536017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665000502
    },
    {
        "content": "<p>Great, that does it. I wanted to hack <code>tactic.linarith</code> so it doesn't need to import <code>tactic.ring</code> or <code>tactic.norm_num</code> (until, obviously, at runtime). This trick (and the variants which handle <code> `[ring!]</code> and <code> `[norm_num]</code>) is exactly what I wanted. I'm trying to sort out what exactly needs to be ported to port <code>linarith</code>, and the huge imports for <code>tactic.ring</code> were getting in the way.</p>",
        "id": 302549525,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665005925
    },
    {
        "content": "<p>Oh that's interesting. I would like something similar to happen for <code>positivity</code> because having it defined after the point of declaration of many lemmas whose assumptions it could fulfill measn we can't use it as <code>out_param</code> there.</p>",
        "id": 302549966,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665006109
    },
    {
        "content": "<p>This is of course a worse version fo Heather's new tactic, but quite a cheap one were the imports not getting in the way.</p>",
        "id": 302550086,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665006148
    },
    {
        "content": "<p>I don't think we want to land something like that though, because <code>import tactic.linarith</code> and then using <code>linarith</code> shouldn't result in a crash</p>",
        "id": 302550447,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665006310
    },
    {
        "content": "<p>What huge imports does <code>tactic.ring</code> have? I would assume it only needs basic properties of <code>ring</code>, i.e. <code>algebra.ring.basic</code> or so</p>",
        "id": 302550645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665006376
    },
    {
        "content": "<p>The answer is the same, always.</p>",
        "id": 302550772,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665006457
    },
    {
        "content": "<p>The algebraic order hierarchy gets back into the pure algebraic hierarchy in several points because of concrete structures and the way we fix defeqs with forgetful inheritance.</p>",
        "id": 302550927,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665006519
    },
    {
        "content": "<p>In that case, you need to define <code>rat.cast</code> before you can define <code>field</code>.</p>",
        "id": 302550978,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665006543
    },
    {
        "content": "<p>This is very annoying and it keeps causing me headaches.</p>",
        "id": 302551176,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665006643
    },
    {
        "content": "<p>I agree we should be very cautious about actually landing this. A weird compromise might be for <code>import tactic.linartih</code> to do the <code>import tactic.ring</code> and <code>import tactic.norm_num</code>, while leaving the <code>tactic/linarith/*.lean</code> files <em>without</em> those imports. This would mean that hopefully no one gets a surprising failure from <code>linarith</code>, but it's still easy to  pare down imports and see what is really being used.</p>",
        "id": 302552213,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665007168
    },
    {
        "content": "<p>I'm not sure I understand the reasoning here though. <code>linarith</code> <em>does</em> use <code>ring</code>, it will fail if you try to call it without <code>ring</code> available</p>",
        "id": 302553558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665007780
    },
    {
        "content": "<p>it would make more sense to do this for <code>norm_num</code>'s lemmas</p>",
        "id": 302553630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665007807
    }
]