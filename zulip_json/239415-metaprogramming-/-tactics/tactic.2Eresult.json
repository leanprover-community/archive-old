[
    {
        "content": "<p>Hi, I need help in figuring out how to retrieve the (partial) proof term produced by some tactics. Consider the following mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">example_lemma</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">example_lemma</span>\n<span class=\"c1\">-- def example_lemma : 1 = 1 := eq.refl 1</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tidy_test</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">mv</span> <span class=\"bp\">←</span> <span class=\"n\">mk_meta_var</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"n\">tactic.set_goals</span> <span class=\"o\">[</span><span class=\"n\">mv</span><span class=\"o\">],</span>\n  <span class=\"n\">tactic.get_goals</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">list.mmap</span> <span class=\"n\">infer_type</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- [1 = 1]</span>\n  <span class=\"n\">tactic.result</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">infer_type</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- true</span>\n  <span class=\"n\">tactic.tidy.core</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- [refl]</span>\n  <span class=\"n\">tactic.result</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">infer_type</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- true</span>\n  <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">tidy_test</span>\n</code></pre></div>\n<p><code>example_lemma</code> shows that <code>tidy</code> is able to find the <code>refl</code> proof of <code>1 = 1</code>. When I manually set this as the proof goal and call <code>tactic.tidy.core</code>, <code>tactic.get_goals</code> will report the correct goal and <code>tactic.tidy.core</code> it is able to produce the correct tactic, but <code>tactic.result</code> still contains a mvar of type <code>true</code> as if <code>set_goals</code> had never been called.</p>\n<p>How does one correctly set goals in tactic mode, call tactics and retrieve the partial proof term constructed by the tactics? Thanks in advance!</p>",
        "id": 282464650,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1652690082
    },
    {
        "content": "<p>I think you aren't interested in <code>tactic.result</code>. Instead just look at the metavariable <code>mv</code> you constructed. After running the tactic on your synthetic goal, you can call <code>instantiate_mvars mv</code> and it should contain (the <code>expr</code> corresponding to) the term constructed by the tactic.</p>",
        "id": 282483006,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652701337
    },
    {
        "content": "<p><code>tactic.result</code> isn't fooled by your pretend goals. :-)</p>",
        "id": 282483038,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652701369
    },
    {
        "content": "<p>I see! That works, thank you :)</p>",
        "id": 282484305,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1652702266
    }
]