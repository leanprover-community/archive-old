[
    {
        "content": "<p>Does there exist a tactic, or is there a way to write one to check that <code>sorry</code> hasn't been applied so far in the proof?  Something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"o\">{</span><span class=\"gr\">sorry</span><span class=\"o\">},</span>\n<span class=\"n\">proof_is_sorry_free</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 241147950,
        "sender_full_name": "Jason Rute",
        "timestamp": 1622640362
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"249373\">@Stanislas Polu</span> <span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span></p>",
        "id": 241148130,
        "sender_full_name": "Jason Rute",
        "timestamp": 1622640437
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.sorry_if_contains_sorry/src\">src#tactic.sorry_if_contains_sorry</a> should show you how to do this</p>",
        "id": 241148173,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622640463
    },
    {
        "content": "<p>I think I wrote this long again for <code>obviously</code> when run as an auto_param: if the user hasn't specified the relevant data fields of the structure, there's little point trying to prove the axiom fields automatically.</p>",
        "id": 241148328,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622640529
    },
    {
        "content": "<p>So one would use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/expr.contains_sorry\">docs#expr.contains_sorry</a> to check <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.result\">docs#tactic.result</a>?</p>",
        "id": 241148424,
        "sender_full_name": "Jason Rute",
        "timestamp": 1622640566
    },
    {
        "content": "<p>Hi! Following up on this thread. When considering the following example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">induction_divisibility_3divnto3m2n</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">3</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">dvd_trans</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The type of the resulting proof mismatches the type of the theorem despite the final tactic state being \"no goals\".</p>\n<p>What would be the best way to check that the constructed proof's type matches the target goal? I presume something along the line of comparing the type of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.result\">docs#tactic.result</a> with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.target\">docs#tactic.target</a>?</p>",
        "id": 241747563,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1623056693
    },
    {
        "content": "<p>I'm curious where this proof came from. I'd be tempted to call this a bug in <code>simp</code>.</p>",
        "id": 241749561,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1623057867
    },
    {
        "content": "<p>It's been generated by our models, which are if anything else, good fuzzers :)</p>",
        "id": 241750004,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1623058118
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.type_check\">docs#tactic.type_check</a> applied to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.result\">docs#tactic.result</a> a good path forward here? I presume it does not guard against sorry so this would have to be checked separately?</p>",
        "id": 241750115,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1623058200
    },
    {
        "content": "<p><code>type_check</code> only makes sure that <code>result</code> is a well-typed term. After you've done this, you can <code>infer_type</code> on <code>result</code>, then compare that to <code>target</code> using <code>is_def_eq</code>. (<code>infer_type</code> without <code>type_check</code> is unreliable since it may return a bogus type if the term is not well-typed.) I believe you're right that none of this checks for <code>sorry</code>-freedom.</p>",
        "id": 241750694,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1623058552
    },
    {
        "content": "<p>Oh wow, even <code>recover</code> does not fix this one. This is surely a bug.</p>",
        "id": 241751158,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623058829
    },
    {
        "content": "<p>This is the solution I'm working on: <a href=\"https://github.com/openai/lean-gym/pull/5\">https://github.com/openai/lean-gym/pull/5</a> Feedback greatly appreciated!</p>",
        "id": 241755692,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1623061661
    },
    {
        "content": "<p>Just a silly remark: you can minimize slightly your example to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">induction_divisibility_3divnto3m2n</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">dvd_trans</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>An \"advantage\" of this formulation is that the conclusion is now actually false, rather than only the argument being fallacious!</p>",
        "id": 241756128,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623061960
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>   <span class=\"n\">src</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.infer_type</span> <span class=\"n\">pf</span><span class=\"o\">,</span>\n    <span class=\"n\">tgt</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.result</span><span class=\"o\">,</span>\n    <span class=\"n\">tactic.is_def_eq</span> <span class=\"n\">tgt</span> <span class=\"n\">src</span>\n</code></pre></div>\n<p>I think this should be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>   <span class=\"n\">src</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.infer_type</span> <span class=\"n\">pf</span><span class=\"o\">,</span>\n   <span class=\"n\">tgt</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.target</span><span class=\"o\">,</span> <span class=\"c1\">-- !</span>\n   <span class=\"n\">tactic.is_def_eq</span> <span class=\"n\">tgt</span> <span class=\"n\">src</span>\n</code></pre></div>\n<p><code>prf</code> is already <code>tactic.result</code>. Otherwise the validation logic looks good to me.</p>",
        "id": 241757440,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1623062788
    },
    {
        "content": "<p>Thanks a lot <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span></p>",
        "id": 241763766,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1623066590
    },
    {
        "content": "<p>Note: as we manually set the goal in the context of lean-gym we can't rely on <code>tactic.result</code> and <code>tactic.target</code> (h/t <span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span>). Finalized PR: <a href=\"https://github.com/openai/lean-gym/pull/5\">https://github.com/openai/lean-gym/pull/5</a></p>\n<p>If anybody has a minute to look at it, this now properly fails on the presence of <code>sorry</code> as well as the example above. The example above fails not on the check that the target type matches the proof term type but before due to the presence of meta variables <code>guard (bnot pf.has_meta_var)</code> in the proof term, but I'm still wondering if running <code>tgt ← tactic.infer_type g</code> where <code>g</code> is the meta-variable representing the top-level goal gives me the type of that initial goal or the type of the assignment of the meta-variable (in which case the final check is a no-op).</p>",
        "id": 241777506,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1623073210
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"249373\">Stanislas Polu</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/Check.20for.20sorry.20in.20tactic.20proof/near/241777506\">said</a>:</p>\n<blockquote>\n<p>I'm still wondering if running <code>tgt ← tactic.infer_type g</code> where <code>g</code> is the meta-variable representing the top-level goal gives me the type of that initial goal or the type of the assignment of the meta-variable (in which case the final check is a no-op).</p>\n</blockquote>\n<p>Aren't those two things the same?  When you create a metavariable <code>g</code> with type <code>t</code>, then all assignments to <code>g</code> should have type <code>t</code>, no?</p>",
        "id": 241782197,
        "sender_full_name": "Jason Rute",
        "timestamp": 1623075169
    },
    {
        "content": "<p>Well if the assignment still has meta variables that seems untrue as per the example proof above?</p>",
        "id": 241784225,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1623075989
    },
    {
        "content": "<p>Oh, interesting.  Ok, my guess then is that if you do infer type before instanting the metavariables, you will get the desired target.</p>",
        "id": 241792771,
        "sender_full_name": "Jason Rute",
        "timestamp": 1623079173
    },
    {
        "content": "<p>hmmm right now I infer_type on the final tactic state so the metavariable is instantiated...</p>",
        "id": 241793323,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1623079381
    },
    {
        "content": "<p>Let me try to get the type on the initial tactic_state and pass it to <code>validate_proof</code></p>",
        "id": 241793389,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1623079410
    },
    {
        "content": "<p>This works as well. Let's do that as there's higher probability that it will do the right thing: Updated diff here: <a href=\"https://github.com/openai/lean-gym/pull/5/files\">https://github.com/openai/lean-gym/pull/5/files</a></p>",
        "id": 241794693,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1623079902
    },
    {
        "content": "<p>Hi! Following up again on this thread, our models came up with this proof which passed our current checks:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.pnat.basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mathd_numbertheory_13</span>\n  <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"mi\">100</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"mi\">14</span><span class=\"bp\">*</span><span class=\"n\">u</span> <span class=\"bp\">-</span> <span class=\"mi\">46</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">100</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"mi\">14</span><span class=\"bp\">*</span><span class=\"n\">v</span> <span class=\"bp\">-</span> <span class=\"mi\">46</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">50</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">100</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"mi\">50</span> <span class=\"bp\">&lt;</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">v</span><span class=\"o\">):</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">64</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">revert</span> <span class=\"n\">h₄</span><span class=\"o\">,</span>\n  <span class=\"n\">contrapose</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">not_lt_of_lt</span> <span class=\"n\">hn</span> <span class=\"n\">undefined</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Where can I read more about undefined and is there a canonical way to check that the resulting proof does not rely on it?</p>\n<p>(I presume what happens is something along the lines of the last exact assigning <code>undefined</code> to a meta-variable left unassigned, but I'm surprised it passes the <code>infer_type</code> checks discussed yesterday)</p>",
        "id": 241881651,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1623138412
    },
    {
        "content": "<p>It's defined (!) <a href=\"https://github.com/leanprover-community/lean/blob/65ad4ffdb3abac75be748554e3cbe990fb1c6500/library/init/util.lean#L46-L48\">here</a> which gets <a href=\"https://github.com/leanprover-community/lean/blob/65ad4ffdb3abac75be748554e3cbe990fb1c6500/src/library/vm/vm_aux.cpp#L94\">replaced</a> by <a href=\"https://github.com/leanprover-community/lean/blob/65ad4ffdb3abac75be748554e3cbe990fb1c6500/src/library/vm/vm_aux.cpp#L43-L45\">this</a>.</p>",
        "id": 241882061,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623138713
    },
    {
        "content": "<p>I never met this before, and I have no idea how to detect it non-interactively</p>",
        "id": 241882164,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623138760
    },
    {
        "content": "<p>But how comes running infer_type on the assignment of the top-goal meta-variable even gives something meaningful here? (I'll check what it outputs precisely to better understand what's going on).</p>",
        "id": 241882309,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1623138857
    },
    {
        "content": "<p>The proof indeed contains undefined:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">has_dvd.dvd.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">monoid_has_dvd.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">right_cancel_monoid.to_monoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">cancel_monoid.to_right_cancel_monoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">cancel_comm_monoid.to_cancel_monoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">ordered_cancel_comm_monoid.to_cancel_comm_monoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.ordered_cancel_comm_monoid</span><span class=\"o\">)))))</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span><span class=\"o\">)))))))</span> <span class=\"o\">(</span><span class=\"n\">has_sub.sub.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_sub</span> <span class=\"o\">(</span><span class=\"n\">has_mul.mul.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_mul</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span><span class=\"o\">))))</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span><span class=\"o\">))))))))</span> <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">has_dvd.dvd.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">monoid_has_dvd.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">right_cancel_monoid.to_monoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">cancel_monoid.to_right_cancel_monoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">cancel_comm_monoid.to_cancel_monoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">ordered_cancel_comm_monoid.to_cancel_comm_monoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.ordered_cancel_comm_monoid</span><span class=\"o\">)))))</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span><span class=\"o\">)))))))</span> <span class=\"o\">(</span><span class=\"n\">has_sub.sub.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_sub</span> <span class=\"o\">(</span><span class=\"n\">has_mul.mul.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_mul</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span><span class=\"o\">))))</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span><span class=\"o\">))))))))</span> <span class=\"o\">(</span><span class=\"n\">hsum</span> <span class=\"o\">:</span> <span class=\"n\">has_lt.lt.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">preorder.to_has_lt.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">partial_order.to_preorder.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">ordered_cancel_comm_monoid.to_partial_order.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.ordered_cancel_comm_monoid</span><span class=\"o\">)))</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span><span class=\"o\">)))))))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">has_lt.lt.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">preorder.to_has_lt.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">partial_order.to_preorder.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">ordered_cancel_comm_monoid.to_partial_order.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.ordered_cancel_comm_monoid</span><span class=\"o\">)))</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span><span class=\"o\">)))))))),</span> <span class=\"o\">(</span><span class=\"n\">imp_of_not_imp_not</span> <span class=\"o\">(</span><span class=\"n\">has_lt.lt.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">preorder.to_has_lt.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">partial_order.to_preorder.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">ordered_cancel_comm_monoid.to_partial_order.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.ordered_cancel_comm_monoid</span><span class=\"o\">)))</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span><span class=\"o\">))))))))</span> <span class=\"o\">((</span><span class=\"n\">has_lt.lt.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">preorder.to_has_lt.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">partial_order.to_preorder.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">ordered_cancel_comm_monoid.to_partial_order.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.ordered_cancel_comm_monoid</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span><span class=\"o\">))))))</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">eq.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">has_div.div.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_div</span> <span class=\"o\">(</span><span class=\"n\">has_add.add.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_add</span> <span class=\"o\">(</span><span class=\"n\">coe.</span><span class=\"o\">{</span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">coe_to_lift.</span><span class=\"o\">{</span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">coe_base.</span><span class=\"o\">{</span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">nat</span> <span class=\"n\">coe_pnat_nat</span><span class=\"o\">))</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">coe.</span><span class=\"o\">{</span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">coe_to_lift.</span><span class=\"o\">{</span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">coe_base.</span><span class=\"o\">{</span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">nat</span> <span class=\"n\">coe_pnat_nat</span><span class=\"o\">))</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_add</span> <span class=\"o\">(</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_one</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_add</span> <span class=\"o\">(</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_one</span><span class=\"o\">)))))))))</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">not</span> <span class=\"o\">((</span><span class=\"n\">has_lt.lt.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">preorder.to_has_lt.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">partial_order.to_preorder.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">ordered_cancel_comm_monoid.to_partial_order.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.ordered_cancel_comm_monoid</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span><span class=\"o\">))))))</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">eq.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">has_div.div.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_div</span> <span class=\"o\">(</span><span class=\"n\">has_add.add.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_add</span> <span class=\"o\">(</span><span class=\"n\">coe.</span><span class=\"o\">{</span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">coe_to_lift.</span><span class=\"o\">{</span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">coe_base.</span><span class=\"o\">{</span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">nat</span> <span class=\"n\">coe_pnat_nat</span><span class=\"o\">))</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">coe.</span><span class=\"o\">{</span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">coe_to_lift.</span><span class=\"o\">{</span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">coe_base.</span><span class=\"o\">{</span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">nat</span> <span class=\"n\">coe_pnat_nat</span><span class=\"o\">))</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_add</span> <span class=\"o\">(</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_one</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_add</span> <span class=\"o\">(</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_one</span><span class=\"o\">)))))))))),</span> <span class=\"o\">(</span><span class=\"n\">id.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">has_lt.lt.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">preorder.to_has_lt.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">partial_order.to_preorder.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">ordered_cancel_comm_monoid.to_partial_order.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.ordered_cancel_comm_monoid</span><span class=\"o\">)))</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span><span class=\"o\">)))))))))</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">has_lt.lt.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">preorder.to_has_lt.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">partial_order.to_preorder.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">ordered_cancel_comm_monoid.to_partial_order.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.ordered_cancel_comm_monoid</span><span class=\"o\">)))</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span><span class=\"o\">)))))))),</span> <span class=\"o\">(</span><span class=\"n\">not_lt_of_lt.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">has_lt.lt.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">preorder.to_has_lt.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">partial_order.to_preorder.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">ordered_cancel_comm_monoid.to_partial_order.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.ordered_cancel_comm_monoid</span><span class=\"o\">))))</span> <span class=\"o\">(</span><span class=\"n\">has_lt.lt.is_strict_order.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">partial_order.to_preorder.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">ordered_cancel_comm_monoid.to_partial_order.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.ordered_cancel_comm_monoid</span><span class=\"o\">)))</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span><span class=\"o\">)))))))</span> <span class=\"n\">hn</span> <span class=\"o\">(</span><span class=\"n\">undefined.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">has_lt.lt.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">preorder.to_has_lt.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">partial_order.to_preorder.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">ordered_cancel_comm_monoid.to_partial_order.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.ordered_cancel_comm_monoid</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span><span class=\"o\">)))))))</span> <span class=\"n\">v</span><span class=\"o\">))))))</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But running infer_type on it does return a valid type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">Pi</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">has_dvd.dvd.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">monoid_has_dvd.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">right_cancel_monoid.to_monoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">cancel_monoid.to_right_cancel_monoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">cancel_comm_monoid.to_cancel_monoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">ordered_cancel_comm_monoid.to_cancel_comm_monoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.ordered_cancel_comm_monoid</span><span class=\"o\">)))))</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span><span class=\"o\">)))))))</span> <span class=\"o\">(</span><span class=\"n\">has_sub.sub.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_sub</span> <span class=\"o\">(</span><span class=\"n\">has_mul.mul.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_mul</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span><span class=\"o\">))))</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span><span class=\"o\">))))))))</span> <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">has_dvd.dvd.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">monoid_has_dvd.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">right_cancel_monoid.to_monoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">cancel_monoid.to_right_cancel_monoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">cancel_comm_monoid.to_cancel_monoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">ordered_cancel_comm_monoid.to_cancel_comm_monoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.ordered_cancel_comm_monoid</span><span class=\"o\">)))))</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span><span class=\"o\">)))))))</span> <span class=\"o\">(</span><span class=\"n\">has_sub.sub.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_sub</span> <span class=\"o\">(</span><span class=\"n\">has_mul.mul.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_mul</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span><span class=\"o\">))))</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span><span class=\"o\">))))))))</span> <span class=\"o\">(</span><span class=\"n\">hsum</span> <span class=\"o\">:</span> <span class=\"n\">has_lt.lt.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">preorder.to_has_lt.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">partial_order.to_preorder.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">ordered_cancel_comm_monoid.to_partial_order.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.ordered_cancel_comm_monoid</span><span class=\"o\">)))</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span><span class=\"o\">)))))))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">has_lt.lt.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">preorder.to_has_lt.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">partial_order.to_preorder.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">ordered_cancel_comm_monoid.to_partial_order.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.ordered_cancel_comm_monoid</span><span class=\"o\">)))</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_one</span><span class=\"o\">))))))))</span> <span class=\"o\">(</span><span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"n\">has_lt.lt.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">preorder.to_has_lt.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">partial_order.to_preorder.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"o\">(</span><span class=\"n\">ordered_cancel_comm_monoid.to_partial_order.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.ordered_cancel_comm_monoid</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span> <span class=\"o\">(</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 241885693,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1623141042
    },
    {
        "content": "<p>Now trying to test for this with something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/expr.contains_expr_or_mvar\">docs#expr.contains_expr_or_mvar</a> or <code>occurs</code></p>",
        "id": 241886070,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1623141277
    },
    {
        "content": "<p>Unfortunately this does not seem to catch it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"o\">(</span><span class=\"n\">pf.has_local_in</span> <span class=\"bp\">$</span> <span class=\"n\">mk_name_set.insert</span> <span class=\"bp\">`</span><span class=\"n\">undefined</span><span class=\"o\">)),</span>\n</code></pre></div>",
        "id": 241887421,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1623142162
    },
    {
        "content": "<p>And <code>guard (bnot (pf.occurs undefined)),</code> does not cut it as <code>undefined</code> gets eval-ed and crashes</p>",
        "id": 241887498,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1623142206
    },
    {
        "content": "<p>Using this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">guard_undefined</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"k\">do</span> <span class=\"o\">{</span>\n  <span class=\"n\">contains_undefined</span> <span class=\"bp\">←</span> <span class=\"n\">e.mfold</span> <span class=\"n\">ff</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e'</span> <span class=\"n\">_</span> <span class=\"n\">acc</span><span class=\"o\">,</span> <span class=\"k\">do</span> <span class=\"o\">{</span> <span class=\"n\">tactic.trace</span> <span class=\"n\">format</span><span class=\"bp\">!</span> <span class=\"s2\">\"{e'}\"</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">acc</span> <span class=\"k\">then</span> <span class=\"n\">pure</span> <span class=\"n\">acc</span> <span class=\"k\">else</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">bor</span> <span class=\"n\">acc</span> <span class=\"bp\">$</span> <span class=\"k\">do</span> <span class=\"o\">{</span> <span class=\"n\">e'.has_local_in</span> <span class=\"bp\">$</span> <span class=\"n\">mk_name_set.insert</span> <span class=\"s2\">\"undefined\"</span> <span class=\"o\">}}),</span>\n  <span class=\"n\">guard</span> <span class=\"bp\">$</span> <span class=\"n\">bnot</span> <span class=\"n\">contains_undefined</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>I do run over an exp which is <code>undefined.{0}</code> but the <code>has_local_in</code> call does not detect that. Any idea how I can properly detect this?</p>",
        "id": 241889212,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1623143312
    },
    {
        "content": "<p>Ah! This seems to cut it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">guard_undefined</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"k\">do</span> <span class=\"o\">{</span>\n  <span class=\"n\">contains_undefined</span> <span class=\"bp\">←</span> <span class=\"n\">e.mfold</span> <span class=\"n\">ff</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e'</span> <span class=\"n\">_</span> <span class=\"n\">acc</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">acc</span> <span class=\"k\">then</span> <span class=\"n\">pure</span> <span class=\"n\">acc</span> <span class=\"k\">else</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">bor</span> <span class=\"n\">acc</span> <span class=\"bp\">$</span> <span class=\"n\">e'.app_symbol_in</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">undefined</span><span class=\"o\">]),</span>\n  <span class=\"n\">guard</span> <span class=\"bp\">$</span> <span class=\"n\">bnot</span> <span class=\"n\">contains_undefined</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>Not sure if it is universally correct though?</p>",
        "id": 241891198,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1623144603
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span> suggested that we could list all the axioms used.  That should be a general solution for this sort of thing.  (I assume a constant is considered an axiom, right?)  However, I don’t know if there is currently a tactic which will tell you what axioms are used in an expression.  Does anyone know if there is and if not what obstacles exist in making one?</p>",
        "id": 241913279,
        "sender_full_name": "Jason Rute",
        "timestamp": 1623156594
    },
    {
        "content": "<p>This is the only example of <code>undefined</code> I think in mathlib, probably where the model learned about it: <a href=\"https://github.com/leanprover-community/mathlib/blob/76a3b82dc0ae6c9a60a8714d74c6cf2b854cf17b/src/data/fp/basic.lean#L113\">https://github.com/leanprover-community/mathlib/blob/76a3b82dc0ae6c9a60a8714d74c6cf2b854cf17b/src/data/fp/basic.lean#L113</a> cc <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 241915413,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1623157538
    },
    {
        "content": "<p>undefined is a meta constant, so it shouldn't be valid in a normal proof</p>",
        "id": 241975517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623181556
    },
    {
        "content": "<p>rather than looking for undefined specifically, you should screen out any references to meta things</p>",
        "id": 241975666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623181618
    },
    {
        "content": "<p>How would one achieve that?</p>",
        "id": 241981422,
        "sender_full_name": "Stanislas Polu",
        "timestamp": 1623184158
    },
    {
        "content": "<p>The easy way is to try to send the definition to the kernel and see if it complains</p>",
        "id": 241985091,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623185826
    },
    {
        "content": "<p>like <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/Check.20for.20sorry.20in.20tactic.20proof/near/241881651\">this example</a> shouldn't actually pass lean</p>",
        "id": 241985157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623185856
    },
    {
        "content": "<p>the metaprogramming way is to use <code>environment.get_decl</code> to get the declaration and see if <code>trusted</code> is set (false means meta)</p>",
        "id": 241985280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623185901
    }
]