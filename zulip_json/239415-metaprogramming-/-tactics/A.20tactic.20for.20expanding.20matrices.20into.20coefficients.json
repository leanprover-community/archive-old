[
    {
        "content": "<p>Inspired by <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.reassoc_of\">docs#category_theory.reassoc_of</a>, I wrote:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fin.vec_notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.fin_cases</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">matrix</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">section</span>\n<span class=\"c1\">-- Note that here we are disabling the \"safety\" of reflected, to allow us to reuse `nat.mk_numeral`.</span>\n<span class=\"c1\">-- The usual way to provide the required `reflected` instance would be via rewriting to prove that</span>\n<span class=\"c1\">-- the expression we use here is equivalent.</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">semireducible</span><span class=\"o\">]</span> <span class=\"n\">reflected</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">instance</span> <span class=\"n\">reflect</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">has_reflect</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">fin_zero_elim</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nat.mk_numeral</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span>\n              <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">))</span>\n              <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">))</span>\n              <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">))</span> <span class=\"bp\">∘</span> <span class=\"n\">subtype.val</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/-- Expand `v` to `![v 0, v 1, ...]` -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">fin_vec.eta_expand</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">matrix.vec_cons</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin_vec.eta_expand</span> <span class=\"o\">(</span><span class=\"n\">vec_tail</span> <span class=\"n\">v</span><span class=\"o\">))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">fin_vec.eta_expand_eq</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">fin_vec.eta_expand</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">v</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">fin_vec.eta_expand</span><span class=\"o\">,</span><span class=\"n\">fin_vec.eta_expand_eq</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">fin.cons_self_tail</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/-- Expand `A` to `!![A 0 0, ...; ..., A m n]` -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">eta_expand</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">matrix.of</span> <span class=\"o\">(</span><span class=\"n\">fin_vec.eta_expand</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">fin_vec.eta_expand</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eta_expand_eq</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">eta_expand</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">eta_expand</span><span class=\"o\">,</span> <span class=\"n\">fin_vec.eta_expand_eq</span><span class=\"o\">,</span> <span class=\"n\">matrix.of</span><span class=\"o\">,</span> <span class=\"n\">equiv.refl_apply</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- Prove a statement of the form `∀ A : matrix m n α, A = !![A 0 0, ...]`.</span>\n<span class=\"sd\">Returns the type of this statement and its proof. -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">prove_eta</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">u</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.mk_meta_univ</span><span class=\"o\">,</span>\n  <span class=\"n\">α</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.mk_local'</span> <span class=\"bp\">`</span><span class=\"n\">α</span> <span class=\"n\">binder_info.implicit</span> <span class=\"o\">(</span><span class=\"n\">expr.sort</span> <span class=\"n\">u.succ</span><span class=\"o\">),</span>\n  <span class=\"n\">A</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.mk_local'</span> <span class=\"bp\">`</span><span class=\"n\">A</span> <span class=\"n\">binder_info.default</span>\n    <span class=\"o\">(</span><span class=\"n\">expr.const</span> <span class=\"bp\">`</span><span class=\"n\">matrix</span> <span class=\"o\">[</span><span class=\"n\">level.zero</span><span class=\"o\">,</span> <span class=\"n\">level.zero</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">]</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"bp\">%%`</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"bp\">%%`</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">entries</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">entry_vals</span> <span class=\"o\">:=</span> <span class=\"n\">pi_fin.to_pexpr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">pi_fin.to_pexpr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">to_pexpr</span> <span class=\"bp\">$</span> <span class=\"n\">entries</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)),</span>\n  <span class=\"k\">let</span> <span class=\"n\">A_eta</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">matrix.of</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"bp\">%%`</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"bp\">%%`</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">entry_vals</span><span class=\"o\">),</span>\n  <span class=\"n\">A_eq</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"bp\">%%</span><span class=\"n\">A_eta</span><span class=\"o\">),</span>\n  <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.pis</span> <span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">A_eq</span><span class=\"o\">,</span>\n  <span class=\"o\">((),</span> <span class=\"n\">pr</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.solve_aux</span> <span class=\"n\">t</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">intros</span> <span class=\"n\">α</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">matrix.eta_expand_eq</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">],</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">pr</span><span class=\"o\">)</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">derive_eta_proof</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">target</span><span class=\"bp\">@`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">A'</span> <span class=\"bp\">=</span> <span class=\"bp\">%%</span><span class=\"n\">A_eta</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.target</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">expr.const</span> <span class=\"bp\">`</span><span class=\"n\">matrix</span> <span class=\"n\">ls</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"bp\">%%</span><span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"bp\">%%</span><span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">α</span><span class=\"o\">])</span> <span class=\"bp\">←</span> <span class=\"n\">expr.get_app_fn_args</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">tactic.infer_type</span> <span class=\"n\">A'</span><span class=\"o\">,</span>\n  <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">prod.mk</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">m.to_nat</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">n.to_nat</span><span class=\"o\">)</span> <span class=\"bp\">|</span>\n    <span class=\"n\">fail</span><span class=\"bp\">!</span><span class=\"s2\">\"Dimensions {m} {n} are not numerals\"</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">,</span><span class=\"n\">pr</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">prove_eta</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n\n  <span class=\"n\">tactic.unify</span> <span class=\"n\">target</span> <span class=\"o\">(</span><span class=\"n\">t.instantiate_pis</span> <span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">A'</span><span class=\"o\">]),</span>\n  <span class=\"n\">tactic.exact</span> <span class=\"o\">(</span><span class=\"n\">pr</span> <span class=\"n\">α</span> <span class=\"n\">A'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">fin_eta</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"bp\">«!</span><span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">...</span><span class=\"o\">]</span><span class=\"bp\">»</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"bp\">«!</span><span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">...</span><span class=\"o\">]</span><span class=\"bp\">»</span> <span class=\"bp\">.</span> <span class=\"n\">derive_eta_proof</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"bp\">«!</span><span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">...</span><span class=\"o\">]</span><span class=\"bp\">»</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">20</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">20</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">matrix.fin_eta</span> <span class=\"n\">B</span><span class=\"o\">,</span>  <span class=\"c1\">-- 400 coefficients, but very fast</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">matrix</span>\n</code></pre></div>\n<p>Are there some tricks I'm missing here to write this more briefly?</p>",
        "id": 289583229,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657800416
    },
    {
        "content": "<p>this is really neat; does this work for vectors too?</p>",
        "id": 289584687,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1657801325
    },
    {
        "content": "<p>The same approach would work</p>",
        "id": 289586147,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657802170
    },
    {
        "content": "<p>Really the pattern I'm not sure how to write neatly is:</p>\n<ul>\n<li>Write a function (like <code>matrix.eta_expand</code> above) that computes the eta expansion (or would do after unfolding), and prove it's equal to the identity</li>\n<li>Make a tactic that produces the nicely unfolded eta expansion </li>\n<li>Do a whole bunch of boilerplate to rewrite the not-unfolded spelling into the nicely unfolded one, and get that into the goal state</li>\n</ul>",
        "id": 289586423,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657802362
    },
    {
        "content": "<p>(I originally tried skipping step 1 and having the tactic just prove it via <code>intros</code> + <code>fin_cases</code> + <code>refl</code> but that was way slower)</p>",
        "id": 289586510,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657802403
    },
    {
        "content": "<p>Here's some pretty slow proofs I have that are <code>intros; fin_cases; refl</code>, can you try in on them?</p>",
        "id": 289601858,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657810144
    },
    {
        "content": "<p><a href=\"https://github.com/pechersky/e222/blob/master/src/problems01.lean#L66-L113\">https://github.com/pechersky/e222/blob/master/src/problems01.lean#L66-L113</a></p>",
        "id": 289601915,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657810172
    },
    {
        "content": "<p><a href=\"https://github.com/pechersky/e222/blob/master/src/problems02.lean#L40-L89\">https://github.com/pechersky/e222/blob/master/src/problems02.lean#L40-L89</a></p>",
        "id": 289601932,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657810179
    },
    {
        "content": "<p>I think a nice first target would be to have the proof of this lemma be more \"natural\":<br>\n<a href=\"https://github.com/pechersky/e222/blob/master/src/problems02.lean#L49-L58\">https://github.com/pechersky/e222/blob/master/src/problems02.lean#L49-L58</a></p>",
        "id": 289602097,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657810252
    },
    {
        "content": "<p>I would guess that for those lemmas you really just want to rewrite by <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.mul_fin_two\">docs#matrix.mul_fin_two</a></p>",
        "id": 289606220,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657811959
    },
    {
        "content": "<p>But Ideally we'd have a <code>matrix.mul_fin</code> lemma that works for arbitrary dimensions in the same way as the <code>fin_eta</code> lemma I have above</p>",
        "id": 289606311,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657812002
    },
    {
        "content": "<p>Ideally, one would not have to know the name of that lemma.</p>",
        "id": 289606354,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657812010
    },
    {
        "content": "<p>Yeah, exactly.</p>",
        "id": 289606362,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657812013
    },
    {
        "content": "<p>I'm not quite sure how the multiply version would look; I guess you'd have to do <code>rw matrix.mul_fin 2 2</code> as I can't see how lean would infer the dimensions otherwise</p>",
        "id": 289606643,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657812158
    },
    {
        "content": "<p>I assume we want the lemma with <code>!![...]</code> on both  sides rather than <code>A * B</code> on the left and <code>![A 0 0 * B 0 0 + ...]</code> on the right?</p>",
        "id": 289606715,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657812188
    },
    {
        "content": "<p>I've expanded on this a bit in <a href=\"https://github.com/leanprover-community/mathlib/tree/eric-wieser/fin-reflection\">branch#eric-wieser/fin-reflection</a></p>",
        "id": 291167266,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659006184
    },
    {
        "content": "<p>Discussion continues in <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/concrete.20matrix.20multiplication/near/291208624\">this thread</a></p>",
        "id": 291211554,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659023078
    }
]