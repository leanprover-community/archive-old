[
    {
        "content": "<p>Is there any way to make <code>letI</code> or <code>exactI</code> work within do notation? I can't work out how to nest a tactic application appropriatel. The failing example where I don't try anything is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.core</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">expr.has_add</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">tactic.instance_cache</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">tactic.instance_cache</span> <span class=\"bp\">×</span> <span class=\"n\">has_add</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">add</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">t.mk_app</span> <span class=\"bp\">`</span><span class=\"n\">has_add.add</span> <span class=\"o\">[],</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">})</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"k\">show</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"n\">c</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.mk_instance_cache</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">inst</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">expr.has_add</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_expr</span> <span class=\"bp\">+</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"c1\">-- failed to synthesize type class instance for</span>\n  <span class=\"c1\">-- inst : has_add expr</span>\n  <span class=\"c1\">-- ⊢ has_add expr</span>\n  <span class=\"n\">tactic.trace</span> <span class=\"n\">e</span>\n</code></pre></div>",
        "id": 291179961,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659014239
    },
    {
        "content": "<p>Can you just give up on having nice notation for what you want?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.core</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">expr.has_add</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">tactic.instance_cache</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">tactic.instance_cache</span> <span class=\"bp\">×</span> <span class=\"n\">has_add</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">add</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">t.mk_app</span> <span class=\"bp\">`</span><span class=\"n\">has_add.add</span> <span class=\"o\">[],</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">})</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"k\">show</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"n\">c</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.mk_instance_cache</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">inst</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">expr.has_add</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">has_add.add</span> <span class=\"n\">_</span> <span class=\"n\">inst</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_expr</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"c1\">-- failed to synthesize type class instance for</span>\n  <span class=\"c1\">-- inst : has_add expr</span>\n  <span class=\"c1\">-- ⊢ has_add expr</span>\n  <span class=\"n\">tactic.trace</span> <span class=\"n\">e</span>\n</code></pre></div>",
        "id": 291180454,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1659014518
    },
    {
        "content": "<p>Yeah, I guess that's not too bad</p>",
        "id": 291182883,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659015770
    },
    {
        "content": "<p>A related but subtly different question: how can I inject local <code>expr</code>s into the tactic cache?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Produce the term `λ {a : α} [add_comm_monoid α], (by apply_instance : has_add α)` -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">get_has_add_from_add_comm_monoid</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">u</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.mk_meta_univ</span><span class=\"o\">,</span>\n  <span class=\"n\">α</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.mk_local'</span> <span class=\"bp\">`</span><span class=\"n\">α</span> <span class=\"n\">binder_info.implicit</span> <span class=\"o\">(</span><span class=\"n\">expr.sort</span> <span class=\"n\">u.succ</span><span class=\"o\">),</span>\n  <span class=\"n\">add_comm_monoid_α</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.mk_app</span> <span class=\"bp\">`</span><span class=\"n\">add_comm_monoid</span> <span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic.mk_local'</span> <span class=\"bp\">`</span><span class=\"n\">_inst_2</span> <span class=\"n\">binder_info.inst_implicit</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- this line fails, it doesn't know to use the local`add_comm_monoid_α `</span>\n  <span class=\"n\">ret</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.mk_app</span> <span class=\"bp\">`</span><span class=\"n\">has_add</span> <span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic.mk_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.lambdas</span> <span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">add_comm_monoid_α</span><span class=\"o\">]</span> <span class=\"n\">ret</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"n\">get_has_add_from_add_comm_monoid</span>\n<span class=\"c1\">-- tactic.mk_instance failed to generate instance for</span>\n<span class=\"c1\">--   has_add α</span>\n</code></pre></div>",
        "id": 291183733,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659016043
    }
]