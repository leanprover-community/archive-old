[
    {
        "content": "<p>Do other formalization languages have a tactic to do linear algebra -- taking linear combinations of several given equalities to produce a goal equality?  Could <code>linarith</code> be adapted to do this (over a general rather than ordered field)?</p>\n<p>I just had to do the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">↔</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">exists_congr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">or_congr</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩),</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">eq_add_of_sub_eq</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">field_simp</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">field_simp</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">eq_add_of_sub_eq</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">field_simp</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">field_simp</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>and was wishing I was working over the reals, where I could have done</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">↔</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">exists_congr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">or_congr</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩)</span><span class=\"bp\">;</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 213444026,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602776069
    },
    {
        "content": "<p><del>aah, I refined my example so much it no longer makes sense, one sec</del> fixed</p>",
        "id": 213444293,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602776171
    },
    {
        "content": "<p>If someone will write this tactic, it would be nice to make it handle <code>add_torsor</code>s automatically. E.g., by turning every equality in the affine space into an equality in the tangent space. This can be done by subtracting <code>classical.choice</code> point whenever needed.</p>",
        "id": 213449643,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602778433
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> I am still a little curious about this (pinging you because I see you are online).  Would this imaginary tactic effectively amount to re-implementing Matlab in Lean?  Is it the kind of thing which (at least) should wait til Lean 4?</p>",
        "id": 213715836,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603041266
    },
    {
        "content": "<p>I guess Lean already has linear programming in <code>linarith</code>, so this should not be (much) harder.</p>",
        "id": 213716422,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603042100
    },
    {
        "content": "<p>This could be done with fairly large modifications to linarith. You need different preprocessing, different certificate generation, a different verification method.</p>",
        "id": 213716448,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603042171
    },
    {
        "content": "<p>I meant that writing this tactic shouldn't be harder than writing <code>linarith</code>.</p>",
        "id": 213716515,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603042224
    },
    {
        "content": "<p>At a certain point it does start to feel like it's moving toward a computational linear algebra package.</p>",
        "id": 213716520,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603042236
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/Linear.20algebra.20tactic/near/213716515\">said</a>:</p>\n<blockquote>\n<p>I meant that writing this tactic shouldn't be harder than writing <code>linarith</code>.</p>\n</blockquote>\n<p>Oh, I wasn't actually responding to your message there, hah. But you're right, it's not much harder and it does share some cod.e</p>",
        "id": 213716544,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603042285
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/Linear.20algebra.20tactic/near/213716520\">said</a>:</p>\n<blockquote>\n<p>At a certain point it does start to feel like it's moving toward a computational linear algebra package.</p>\n</blockquote>\n<p>OK, thanks!  Would the ideal solution in your mind (not taking into account the amount of work required) for this kind of thing be to outsource to an actual computational linear algebra package (Sage or similar)?</p>",
        "id": 213717615,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603043959
    },
    {
        "content": "<p>There are much smaller linear algebra packages.</p>",
        "id": 213717712,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603044111
    },
    {
        "content": "<p>Or numpy, whatever.</p>",
        "id": 213717758,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603044140
    },
    {
        "content": "<p>Although, I guess what one needs for formal verification is linear algebra over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85556em;vertical-align:-0.16667em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span></span></span></span>?</p>",
        "id": 213717775,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603044172
    },
    {
        "content": "<p>If we implement linear algebra in Lean, then we can use a custom test for <code>a = 0</code>. E.g., it may work differently in <code>[char_zero]</code> and <code>[char_p]</code> scenarios.</p>",
        "id": 213717878,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603044311
    },
    {
        "content": "<p>Do Isabelle or Coq have a tactic to do this?</p>",
        "id": 213718790,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603045756
    },
    {
        "content": "<p>I think proof assistants won't be seriously used as long as they are less good at computation than computational linear algebra packages (here I'm talking about small computation, not huge linear algebra needed in numerical analysis). So \"moving toward a computational linear algebra package\" certainly feels like a good idea.</p>",
        "id": 213719802,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603047267
    },
    {
        "content": "<p>When I said a \"computational linear algebra package\" I had in mind something like <a href=\"https://github.com/CoqEAL/CoqEAL\">CoqEAL</a>. The idea is, you don't want every algebraic computation to be handled by a one-off tactic with its own method and own data structures. You want to base as much as possible on the same core representations and algorithms. Offloading certifiable stuff to untrusted CAS is one way to partially do this, but you still need to deal with a lot of glue for setting up the problems and  verifying the certificates. In principle I think something like CoqEAL can minimize that glue. I'm not sure how much is built on top of it right now.</p>",
        "id": 213726085,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603055515
    },
    {
        "content": "<p>AFAIK CoqEAL does Gaussian elimination/matrix rank computations, which is the core of this problem, but again I don't know off the top of my head whether it's immediately applicable.</p>",
        "id": 213726163,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603055603
    },
    {
        "content": "<p>And there are various other approaches to certified computer algebra out there. I wouldn't be surprised if this particular thing were doable in Isabelle or Coq.</p>",
        "id": 213726222,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1603055658
    },
    {
        "content": "<p>In the medium term, maybe there could be a tactic <code>linear_combination</code> where you provide the coefficients yourself? (Idea borrowed from <a href=\"#narrow/stream/113488-general/topic/Equivalence.20of.20algebraic.20identities/near/213000513\">Mario</a>.)  With syntax like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.ring</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_zero</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- Desired syntax -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">linear_combination</span> <span class=\"o\">[⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">6</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"o\">⟩]</span>\n\n<span class=\"sd\">/-- What it should do -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">sub_eq_zero</span> <span class=\"n\">at</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">mul_right_inj'</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">6</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">mul_right_inj'</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">3</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">congr</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">has_add.add</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">field_simp</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 213928196,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603204568
    },
    {
        "content": "<p>See also an earlier conversation about this where I propose a <a href=\"#narrow/stream/116395-maths/topic/groebner.20basis.20algorithm/near/197250649\"><code>ring_rw</code></a> tactic with similar semantics</p>",
        "id": 213938120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603208683
    },
    {
        "content": "<p>Cool!  Yes, this <code>ring_rw</code> is very similar to what I am imagining, and would be great.  On the other hand, I think the linear-algebra version would be easier than the full ring-theory version, because you really only need equations and coefficients.</p>",
        "id": 213943321,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603210908
    },
    {
        "content": "<p>the implementation is the same, though, it's not really any easier or harder</p>",
        "id": 213943555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603211002
    },
    {
        "content": "<p>the only difference is that the coefficients are variables instead of constants</p>",
        "id": 213943583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603211018
    },
    {
        "content": "<p>in fact, as I mention in that thread, you could even substitute into arbitrary functions, not just + and *</p>",
        "id": 213943666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603211048
    },
    {
        "content": "<p>I think the hard problem with such generalization is the input grammar for the tactic though</p>",
        "id": 213943783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603211117
    }
]