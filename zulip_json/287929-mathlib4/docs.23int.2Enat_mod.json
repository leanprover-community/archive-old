[
    {
        "content": "<p>Where is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.nat_mod\">docs#int.nat_mod</a> gone? Context: <a href=\"https://github.com/leanprover-community/mathlib/pull/17896\">#17896</a></p>",
        "id": 319487185,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672872631
    },
    {
        "content": "<p><del>I think it went <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Data/Int/Cast/Lemmas.lean\">here</a>, since the theorems seem similar</del> nevermind, read the PR wrong<br>\nI think <code>nat_mod</code> was only used in 2 places in mathlib3, none of which are ported, and it was defined in core so the file was changed a lot</p>",
        "id": 319507142,
        "sender_full_name": "Niels Voss",
        "timestamp": 1672886570
    },
    {
        "content": "<p>What should I do? I am supposed to port a lemma about a definition that doesn't exist anymore <span aria-label=\"speechless\" class=\"emoji emoji-1f636\" role=\"img\" title=\"speechless\">:speechless:</span></p>",
        "id": 319537046,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672908403
    },
    {
        "content": "<p>the definition exists, as I said on the issue, it's <code>Int.natMod</code></p>",
        "id": 319544184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672911137
    },
    {
        "content": "<p>correction: it does not exist, it was planned to move from core to std but only the deletion from core was done</p>",
        "id": 319544588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672911256
    },
    {
        "content": "<p>The standard fix for a missing definition is to put it in the mathlib4 file corresponding to wherever it lived in lean 3</p>",
        "id": 319544793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672911332
    },
    {
        "content": "<p>What file would that be for <code> init.data.int.basic</code>?</p>",
        "id": 319545281,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672911499
    },
    {
        "content": "<p><code>Mathlib.Init.Data.Int.Basic</code></p>",
        "id": 319547021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672912101
    },
    {
        "content": "<p>Great, thanks!</p>",
        "id": 319548359,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672912625
    },
    {
        "content": "<p>Where do the <code>#align</code>s live for the lemmas in that mathlib3 file?</p>",
        "id": 319553436,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672914459
    },
    {
        "content": "<p>same place</p>",
        "id": 319553489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672914479
    },
    {
        "content": "<p>Would it make sense to populate <code>Mathlib.Init.Data.Int.Basic</code> with an <code>align</code> for every mathlib3 declaration, even if the mathlib4 versions no longer live in that file?</p>",
        "id": 319553548,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672914484
    },
    {
        "content": "<p>that too</p>",
        "id": 319553571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672914493
    },
    {
        "content": "<p>aligns always go there, the declaration also goes there if it hasn't been upstreamed</p>",
        "id": 319554041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672914615
    },
    {
        "content": "<p>Oh wait, it can't use <code>%</code> anymore, can it?</p>",
        "id": 319559222,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672916300
    },
    {
        "content": "<p><code>Mod Int</code> is overridden in <code>Std.Data.Int.Basic</code> to use the Lean 3 definition (at least if you're lucky and Lean picks the right instance)</p>",
        "id": 319568193,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672919568
    },
    {
        "content": "<p>So I don't have to spell <code>Int.emod</code> out?</p>",
        "id": 319568471,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672919656
    },
    {
        "content": "<p>I think that's right, you can and should just use <code>%</code>.</p>",
        "id": 319568817,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672919770
    }
]