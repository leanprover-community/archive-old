[
    {
        "content": "<p>I'm taking a look at <a href=\"https://github.com/leanprover-community/mathlib4/pull/550\">mathlib4#550</a> and I'm having trouble with getting <code>simp</code> to apply <code>Equiv.coe_refl</code>. It looks like <code>simp</code> will not match partial applications of structure fields. Here's the relevant code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">coe_refl</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Equiv.refl</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n<span class=\"k\">#check</span> <span class=\"n\">coe_refl</span> <span class=\"c1\">-- coe_refl : (Equiv.refl ?m.18617).toFun = id</span>\n<span class=\"c1\">-- here `Equiv.toFun` is defined as a projection of type `toFun : α → β`</span>\n\n<span class=\"c1\">-- [snip]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cast_eq_iff_heq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Equiv.cast</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">HEq</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">subst</span> <span class=\"n\">h</span>\n   <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">coe_refl</span><span class=\"o\">]</span>\n<span class=\"c1\">-- unsolved goals:</span>\n<span class=\"c1\">-- ⊢ toFun (Equiv.refl α) a = b ↔ a = b</span>\n</code></pre></div>\n<p>Should I just add a <code>@[simp] theorem refl_apply</code> where <code>refl</code> is fully applied?</p>",
        "id": 308591117,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1667915340
    },
    {
        "content": "<p>Here's a simplified example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">BundledFunction</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">BundledFunction</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">BundledFunction</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">coe_id</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFun</span> <span class=\"bp\">=</span> <span class=\"n\">_root_.id</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFun</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">coe_id</span><span class=\"o\">]</span> <span class=\"c1\">-- does not simplify anything</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">BundledFunction</span>\n</code></pre></div>",
        "id": 308591149,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1667915352
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span></p>",
        "id": 308591276,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1667915401
    },
    {
        "content": "<p>it looks like a bug in <code>simp</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.unify</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">BundledFunction.coe_id</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n      <span class=\"o\">(</span><span class=\"n\">BundledFunction.id</span> <span class=\"bp\">?</span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFun</span>\n    <span class=\"k\">with</span>\n      <span class=\"n\">BundledFunction.toFun</span> <span class=\"o\">(</span><span class=\"n\">BundledFunction.id</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 308602619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667918763
    },
    {
        "content": "<p>This is causing problems. Has this been raised as an issue? I'm happy to open it but I don't want to waste people's time. I can't see it in the issues...</p>",
        "id": 314880126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670587496
    },
    {
        "content": "<p>I'll file an issue.</p>",
        "id": 314880268,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1670587538
    },
    {
        "content": "<p>Issue: <a href=\"https://github.com/leanprover/lean4/pull/1937\">lean4#1937</a></p>",
        "id": 314882828,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1670588474
    }
]