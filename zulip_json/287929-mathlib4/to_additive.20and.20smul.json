[
    {
        "content": "<p>I haven't looked into this closely, but I'm hoping e.g. <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> may be able to give a quick answer here.</p>\n<p>There are some missing <code>to_additive</code> attributes in <code>Mathlib/Algebra/Group/Defs.lean</code>, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- TODO restore @[to_additive zsmul_eq_smul]</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">zpow_eq_pow</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">DivInvMonoid.zpow</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>These attributes don't work, I think because of the switched order of arguments. What is the status of this? Do we need more support from <code>to_additive</code>? Or are there just some attributes missing elsewhere?</p>",
        "id": 305061058,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666224295
    },
    {
        "content": "<p>This required an extension in <code>to_additive</code>, I recall it used to not work in mathlib either</p>",
        "id": 305077684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666239927
    },
    {
        "content": "<p>In mathlib3 it seems to work. Maybe <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> can give an overview of the missing features / known bugs in <code>@[to_additive]</code>. I haven't watched it closely after he took over.</p>",
        "id": 305101002,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1666254081
    },
    {
        "content": "<p>All of the features of to_additive from the lean3 version should be present (if not correct) in mathlib4. So we have all the attributes like <code>to_additive_reorder</code> and so on that are needed for the fiddly cases like pow → smul. I can't debug Scott's example above but there should be an attribute that can be added to help, maybe to <code>Pow</code>.</p>\n<p>But there are going to be bugs because the rules for converting are quite subtle. There are also some issues with how number literals work that needed to be modified. I am also worried that it won't work right for heterogeneous versions of the operators. I got it working on most of a ported lean3 unit test file and the basic group theory lemmas that were in mathlib4 at the time, with the hope that more bugs would arise as people use it.</p>\n<p>Relevant PR: <a href=\"https://github.com/leanprover-community/mathlib4/pull/234\">https://github.com/leanprover-community/mathlib4/pull/234</a></p>",
        "id": 305795089,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1666610103
    }
]