[
    {
        "content": "<p>I was looking at <code>Mathlib.Data.String.Basic</code> and it seems to be using a list-like API for <code>String</code>, with <code>cons</code>, <code>head</code>, etc.</p>\n<p>It doesn't look like Lean 4 replicates that API (presumably b/c Unicode doesn't make these straightforward implementations)?</p>",
        "id": 312089310,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669327222
    },
    {
        "content": "<p>There'd be little point in <code>String.head</code> since it would just be a shorthand for <code>String.data.head</code></p>",
        "id": 312089850,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669327530
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/string.cons\">docs#string.cons</a> doesn't existing in mathlib3 either though so I'm not really sure what you're referring to</p>",
        "id": 312090167,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669327705
    },
    {
        "content": "<p>Ah, in the first case, I was confused between the <code>iterator</code> and the string...</p>\n<p>But <code>string.head</code> is referenced in <code>mathlib.data.string.basic</code> <code>to_list_nonempty</code></p>",
        "id": 312090799,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669328090
    },
    {
        "content": "<p>defined in <code>mathlib.data.string.defs</code></p>",
        "id": 312090887,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669328161
    },
    {
        "content": "<p>which is currently unported :-)</p>",
        "id": 312091050,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669328251
    },
    {
        "content": "<p>I think it turns out to be an odd dependency issue for <code>data.string.basic</code></p>",
        "id": 312091440,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669328503
    }
]