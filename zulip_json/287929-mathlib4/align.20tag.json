[
    {
        "content": "<p>Instead of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">foo</span> <span class=\"n\">Foo</span>\n</code></pre></div>\n<p>can we just do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[align foo]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>instead? I ask because I just mistyped <code>Foo</code> in <code>#align foo Foo</code> and there was no error. In essentially all cases with <code>#align</code> I mean \"the theorem I just ported directly above\".</p>",
        "id": 310922729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668806228
    },
    {
        "content": "<p>I've been thinking about doing this as well. It is less clear what mathport should output in this case though; it is more annoying to remove an attribute that mathport redundantly added so probably it should stick to using <code>#align</code> but for user code I don't see why not to support the attribute as well</p>",
        "id": 310923302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668806432
    },
    {
        "content": "<p>Unfortunately, it is difficult to catch spelling errors on both the lean 3 and lean 4 sides of the attribute, because there are use cases for referencing things that don't exist. At least, you get a hover / go to def on the lean 4 side if you spell it right so that's one way to confirm that things are working. For lean 3 spell check I've been thinking about adding a <code>mathport_lint</code> executable that checks the final result of porting <code>Mathbin::all</code> to ensure that all <code>#align</code>s are used</p>",
        "id": 310923862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668806648
    },
    {
        "content": "<p>aah that would be a nice way to do it. I've just been changing a bunch of theorem names from e.g. <code>option_equiv_sum_punit_symm_inl</code> to <code>optionEquivSumPUnit_symm_inl</code> and I'm worried I'll make a slip.</p>",
        "id": 310924250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668806784
    }
]