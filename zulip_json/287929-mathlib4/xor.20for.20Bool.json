[
    {
        "content": "<p>Is there actually an instance for xor on <code>Bool</code> in lean4?</p>",
        "id": 312665572,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1669652485
    },
    {
        "content": "<p>I don't think so (assuming you mean the <code>^^^</code> operator). You can use <code>!=</code> though</p>",
        "id": 312666099,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669652612
    },
    {
        "content": "<p>But you don't have nice defeq for <code>!=</code></p>",
        "id": 312678792,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669656054
    },
    {
        "content": "<p>you should?</p>",
        "id": 312684828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669657490
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- it computes on literals</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">true</span> <span class=\"bp\">!=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">true</span> <span class=\"bp\">!=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">false</span> <span class=\"bp\">!=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">false</span> <span class=\"bp\">!=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- but there are no partial evaluation lucky defeqs</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">true</span> <span class=\"bp\">!=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fail</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">!=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fail</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">!=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fail</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">false</span> <span class=\"bp\">!=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fail</span>\n</code></pre></div>",
        "id": 312685435,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669657682
    },
    {
        "content": "<p>I ported <code>xor</code> -- it's in <code>Mathlib.Init.Data.Bool.Basic</code>.</p>",
        "id": 312720398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669669277
    },
    {
        "content": "<p>Should we use <code>!=</code> instead?</p>",
        "id": 312885242,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669740376
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Sorry, I didn't realize that you're talking about <code>!=</code>, not <code>â‰ </code>.</p>",
        "id": 312885518,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669740458
    },
    {
        "content": "<p>Or define <code>Xor</code> instances for <code>Bool</code> and <code>Prop</code>?</p>",
        "id": 312885999,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669740586
    }
]