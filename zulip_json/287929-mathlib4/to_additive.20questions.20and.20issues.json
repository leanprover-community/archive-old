[
    {
        "content": "<p>I'm looking at the mathport file <code>GroupTheory.GroupAction.Prod</code> and I have some questions and issues around <code>to_additive</code>.</p>\n<p>First, we have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">N</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">N</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[to_additive Prod.hasVadd]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">p.1</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">p.2</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">@[simp, to_additive]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">smul_fst</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">x.1</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">prod.smul_fst</span> <span class=\"n\">Prod.smul_fst</span>\n</code></pre></div>\n<p>Should the line </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">prod.vadd_fst</span> <span class=\"n\">Prod.vadd_fst</span>\n</code></pre></div>\n<p>be added under the align command above?</p>\n<p>In general, what's the procedure for handling <code>align</code> commands in conjunction with <code>to_additive</code>?</p>\n<p>Now for the issue. The following results in an error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive SMul]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">hasPow</span> <span class=\"o\">:</span> <span class=\"n\">Pow</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">E</span> <span class=\"n\">where</span> <span class=\"n\">pow</span> <span class=\"n\">p</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">p.1</span> <span class=\"bp\">^</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">p.2</span> <span class=\"bp\">^</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">prod.has_pow</span> <span class=\"n\">Prod.hasPow</span>\n</code></pre></div>\n<p>with the following error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"n\">c</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">p.fst</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">p.snd</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"n\">argument</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span>\n<span class=\"n\">but</span> <span class=\"n\">function</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SMul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">E</span>\n</code></pre></div>\n<p>Is this an issue with Mathlib4's <code>to_additive</code>?</p>",
        "id": 315628345,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670948251
    },
    {
        "content": "<p>Yes, please duplicate the <code>#align</code> for the additive versions. It would be nice if mathport could do this automatically, but currently it can't.</p>",
        "id": 315628687,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1670948333
    },
    {
        "content": "<p>Mathport can do this automatically, although I think the PR is blocked on something</p>",
        "id": 315628851,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670948380
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> what about other automatically generated lemmas, like those generated by <code>simps</code> for example? (This isn't an issue for this file, I'm just thinking ahead)</p>",
        "id": 315628864,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670948383
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathport/pull/209\">mathport#209</a></p>",
        "id": 315628984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670948403
    },
    {
        "content": "<p>I think we want to align those too. They won't be written down very often, so it doesn't matter too much if they're missing, but it would be nice if they could be given automatically by mathport.</p>",
        "id": 315629101,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1670948434
    },
    {
        "content": "<p>That PR doesn't support simps, and the general case is quite hard because we don't have any information about what environment declarations correspond to what syntax</p>",
        "id": 315629124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670948439
    },
    {
        "content": "<p>ooohh.... maybe I'll just wait until that PR gets merged before porting this file (since literally every single lemma in this file is tagged with <code>to_additive</code>)</p>",
        "id": 315629147,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670948447
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> any advice regarding the error I mentioned?</p>",
        "id": 315629373,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670948502
    },
    {
        "content": "<p>it looks like we need to swap the lambdas in the <code>smul</code> argument</p>",
        "id": 315629869,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670948635
    },
    {
        "content": "<p>did lean 3 handle this?</p>",
        "id": 315629923,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670948642
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I could try to make an attribute (or some other information) in the Lean 3 environment that contains the information which lemmas are generated by <code>simps</code>. E.g. I could make <code>simps</code> automatically give an attribute, e.g. <code>generated_by_simps [equiv.prod_coe, equiv.prod_symm_coe]</code> for <code>equiv.prod</code></p>",
        "id": 315629935,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1670948643
    },
    {
        "content": "<p>Both Lean 3 and Lean 4 should handle swapping arguments.</p>",
        "id": 315629986,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1670948658
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/to_additive.20questions.20and.20issues/near/315629923\">said</a>:</p>\n<blockquote>\n<p>did lean 3 handle this?</p>\n</blockquote>\n<p>I guess it did?</p>",
        "id": 315630022,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670948670
    },
    {
        "content": "<p>swapping arguments <em>to</em> a function, yes, but I don't remember anything about swapping lambdas</p>",
        "id": 315630107,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670948696
    },
    {
        "content": "<p>actually I'm confused. the mathlib3 file has both </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive prod.has_vadd]</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_smul</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span><span class=\"n\">a</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">p.1</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">p.2</span><span class=\"o\">)⟩</span>\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive has_smul]</span> <span class=\"kd\">instance</span> <span class=\"n\">has_pow</span> <span class=\"o\">:</span> <span class=\"n\">has_pow</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">pow</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p.1</span> <span class=\"bp\">^</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">p.2</span> <span class=\"bp\">^</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 315630224,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670948732
    },
    {
        "content": "<p>that sounds like it didn't do this automatically</p>",
        "id": 315630282,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670948752
    },
    {
        "content": "<p>Oh, it's missing a <code>to_additive_reorder</code> attribute.</p>",
        "id": 315630309,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670948760
    },
    {
        "content": "<p>Lean 4 since recently also swaps lambdas, but only of the outermost function. Maybe Lean 4 can do this automatically now.</p>",
        "id": 315630363,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1670948764
    },
    {
        "content": "<p>Did the Lean 3 version have a <code>to_additive_reorder</code> attribute?</p>",
        "id": 315630411,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1670948775
    },
    {
        "content": "<p>no the lean3 version is above</p>",
        "id": 315630450,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670948790
    },
    {
        "content": "<p>The new syntax is <code>@[to_additive (reorder := ...)]</code> and that should take care of swapping lambdas.</p>",
        "id": 315630468,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1670948795
    },
    {
        "content": "<p>I don't understand what the lean3 version is actually doing!</p>",
        "id": 315630498,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670948804
    },
    {
        "content": "<p>In Lean 3 the <code>to_additive</code> is doing basically nothing, except recording that the two declarations you gave are a multiplicative,additive pair</p>",
        "id": 315630678,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1670948846
    },
    {
        "content": "<p>I see</p>",
        "id": 315630742,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670948861
    },
    {
        "content": "<p>So what's the way forward with Lean4?</p>",
        "id": 315630774,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670948871
    },
    {
        "content": "<p>If you don't give an <code>SMul</code> version in Lean 4, it will actually try to generate an <code>smul</code> version, which is of course harder.</p>",
        "id": 315630775,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1670948871
    },
    {
        "content": "<p>Just to add to the confusion: the mathlib3 version has </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp, to_additive]</span> <span class=\"kd\">theorem</span> <span class=\"n\">smul_fst</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">x.1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[simp, to_additive]</span> <span class=\"kd\">theorem</span> <span class=\"n\">smul_snd</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">x.2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp, to_additive smul_snd, to_additive_reorder 6]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">pow_fst</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">p.fst</span> <span class=\"bp\">^</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[simp, to_additive smul_snd, to_additive_reorder 6]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">pow_snd</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"n\">p.snd</span> <span class=\"bp\">^</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 315631110,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670948943
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/287929-mathlib4/topic/to_additive.20questions.20and.20issues/near/315629935\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> I could try to make an attribute (or some other information) in the Lean 3 environment that contains the information which lemmas are generated by <code>simps</code>. E.g. I could make <code>simps</code> automatically give an attribute, e.g. <code>generated_by_simps [equiv.prod_coe, equiv.prod_symm_coe]</code> for <code>equiv.prod</code></p>\n</blockquote>\n<p>Yes that will work (although it is blocked on the same thing as <a href=\"https://github.com/leanprover-community/mathport/pull/209\">mathport#209</a>)</p>",
        "id": 315631159,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670948956
    },
    {
        "content": "<p>the fact that <code>smul_snd</code> appears twice in the second code block is not a typo</p>",
        "id": 315631196,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670948966
    },
    {
        "content": "<p>I suppose the <code>to_additive smul_snd</code>s don't actually do anything here either?</p>",
        "id": 315631288,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670948993
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/287929-mathlib4/topic/to_additive.20questions.20and.20issues/near/315630468\">said</a>:</p>\n<blockquote>\n<p>The new syntax is <code>@[to_additive (reorder := ...)]</code> and that should take care of swapping lambdas.</p>\n</blockquote>\n<p>I guess that needs to be reflected in mathport? I don't recall writing something like that, so it's probably still generating uses of the <code>to_additive_reorder</code> attribute</p>",
        "id": 315631723,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670949087
    },
    {
        "content": "<p>currently the <code>to_additive_reorder</code> attribute gives a warning message asking you to change it to <code>@[to_additive (reorder := ...)]</code><br>\nSince this attribute only occurs occasionally, I don't think it's high priority to implement this in mathport.</p>",
        "id": 315632012,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1670949151
    },
    {
        "content": "<p>the reorder attribute isn't the heart of the issue I'm having.</p>",
        "id": 315632141,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670949182
    },
    {
        "content": "<p>I think something is wrong with the invocation <code>attribute [to_additive (reorder := 1 4)] Pow.pow</code> in <code>Algebra.Group.Defs</code>. I'll investigate and try to fix.</p>",
        "id": 315632146,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1670949183
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 315632191,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670949194
    },
    {
        "content": "<p>The reorder attribute is at the heart of your issue: I think another declaration has the wrong <code>reorder</code> attribute, or there is a bug in the implementation of <code>to_additive</code>.</p>",
        "id": 315632303,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1670949227
    },
    {
        "content": "<p>well, in this case <code>Prod.SMul</code> is defined by hand, while <code>Prod.Pow</code> has a <code>to_additive</code> attribute</p>",
        "id": 315632456,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670949264
    },
    {
        "content": "<p>presumably the relevant function is <code>has_pow.mk</code></p>",
        "id": 315632466,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670949268
    },
    {
        "content": "<p>I think you're right</p>",
        "id": 315632561,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1670949300
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> the easiest thing for now is to just port both the <code>Pow</code> and <code>SMul</code> instances (which I think you already do), and then use <code>@[to_additive &lt;name_of_SMul_instance&gt;]</code>.</p>",
        "id": 315633245,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1670949499
    },
    {
        "content": "<p>The different thing you're trying to do compared to Lean 3 is that you're auto-generating the <code>SMul</code> instance, because the name of the <code>SMul</code> instance has changed.</p>",
        "id": 315633332,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1670949532
    },
    {
        "content": "<p>I think <code>to_additive</code> could automatically generate the <code>SMul</code> instance in Lean 4, but <code>to_additive</code> might need a new feature for that.</p>",
        "id": 315633486,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1670949577
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/to_additive.20questions.20and.20issues/near/315631288\">said</a>:</p>\n<blockquote>\n<p>I suppose the <code>to_additive smul_snd</code>s don't actually do anything here either?</p>\n</blockquote>\n<p>It will only generate the dictionary entry. In particular this will mean that additivizing any lemma that using <code>pow_fst</code> will fail, since it will try to replace it by <code>smul_snd</code> and then you'll get a type mismatch.</p>",
        "id": 315634002,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1670949708
    },
    {
        "content": "<p>What's the porting procedure for naming instances such as this?</p>",
        "id": 315634419,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670949826
    },
    {
        "content": "<p>the automatically generated name is <code>Prod.instSMulProd</code>.</p>",
        "id": 315634476,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670949842
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/287929-mathlib4/topic/to_additive.20questions.20and.20issues/near/315633486\">said</a>:</p>\n<blockquote>\n<p>I think <code>to_additive</code> could automatically generate the <code>SMul</code> instance in Lean 4, but <code>to_additive</code> might need a new feature for that.</p>\n</blockquote>\n<p>The issue with this is that the <code>to_additive</code> tag for <code>SMul</code> makes the <code>VAdd</code> instance, so <code>SMul</code> does need to be defined by hand.</p>",
        "id": 315634688,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670949905
    },
    {
        "content": "<p>I don't know. I think we can keep the automatically generated names.</p>",
        "id": 315634712,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1670949911
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/to_additive.20questions.20and.20issues/near/315634688\">said</a>:</p>\n<blockquote>\n<p>The issue with this is that the <code>to_additive</code> tag for <code>SMul</code> makes the <code>VAdd</code> instance, so <code>SMul</code> does need to be defined by hand.</p>\n</blockquote>\n<p>Not necessarily. For some declarations we now use the following to generate <code>pow_lemma</code>, <code>smul_lemma</code> and <code>vadd_lemma</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive (reorder := ...)]</span> <span class=\"n\">pow_lemma</span> <span class=\"bp\">...</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"n\">smul_lemma</span>\n</code></pre></div>\n<p>(and we could of course make this easier to type if we want)</p>",
        "id": 315634970,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1670949984
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/to_additive.20questions.20and.20issues/near/315631159\">said</a>:</p>\n<blockquote>\n<p>Yes that will work (although it is blocked on the same thing as <a href=\"https://github.com/leanprover-community/mathport/pull/209\">mathport#209</a>)</p>\n</blockquote>\n<p>Ok, I'll put that on my todo list (though no promises it will happen this year).</p>",
        "id": 315635552,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1670950153
    },
    {
        "content": "<p>ruuuuuuggghhhh this file has other issues...<br>\nThe def</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive instSMulProd]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Pow</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">E</span> <span class=\"n\">where</span> <span class=\"n\">pow</span> <span class=\"n\">p</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>has the following context:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.5487</span>\n<span class=\"n\">N</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.5490</span>\n<span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.5493</span>\n<span class=\"n\">E</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n<span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝⁵</span><span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"n\">α</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝⁴</span><span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"n\">β</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">N</span> <span class=\"n\">α</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝²</span><span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">N</span> <span class=\"n\">β</span>\n<span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">M</span>\n<span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">:</span> <span class=\"n\">Pow</span> <span class=\"n\">α</span> <span class=\"n\">E</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">Pow</span> <span class=\"n\">β</span> <span class=\"n\">E</span>\n<span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span>\n<span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">E</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span>\n</code></pre></div>",
        "id": 315636573,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670950439
    },
    {
        "content": "<p>It uses all variables? I wonder why... Is it because of the <code>where</code> syntax?</p>",
        "id": 315636866,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1670950508
    },
    {
        "content": "<p>oh nevermind the additional instances are removed once the definition is completed.</p>",
        "id": 315636997,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670950547
    },
    {
        "content": "<p>By the way, does Lean4's <code>to_additive</code> support the following syntax? <code>to_additive (reorder := 6) foobar</code>?</p>",
        "id": 315637565,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670950695
    },
    {
        "content": "<p>it seems that it does not!</p>",
        "id": 315637607,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670950708
    },
    {
        "content": "<p>It does, the reorder argument comes second</p>",
        "id": 315640416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670951422
    },
    {
        "content": "<p>I think that should be changed BTW, the usual convention is for config args to come first</p>",
        "id": 315640567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670951469
    },
    {
        "content": "<p>oh I see</p>",
        "id": 315640623,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670951492
    },
    {
        "content": "<p>yes that's confusing</p>",
        "id": 315640638,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670951495
    },
    {
        "content": "<p>ok, I can change that</p>",
        "id": 315640861,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1670951561
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/to_additive.20questions.20and.20issues/near/315631196\">said</a>:</p>\n<blockquote>\n<p>the fact that <code>smul_snd</code> appears twice in the second code block is not a typo</p>\n</blockquote>\n<p>In the meantime: <a href=\"https://github.com/leanprover-community/mathlib/pull/17930\">#17930</a></p>",
        "id": 315642033,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670951887
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/to_additive.20questions.20and.20issues/near/315631159\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/287929-mathlib4/topic/to_additive.20questions.20and.20issues/near/315629935\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> I could try to make an attribute (or some other information) in the Lean 3 environment that contains the information which lemmas are generated by <code>simps</code>. E.g. I could make <code>simps</code> automatically give an attribute, e.g. <code>generated_by_simps [equiv.prod_coe, equiv.prod_symm_coe]</code> for <code>equiv.prod</code></p>\n</blockquote>\n<p>Yes that will work (although it is blocked on the same thing as <a href=\"https://github.com/leanprover-community/mathport/pull/209\">mathport#209</a>)</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/17964\">#17964</a> adds this information to an attribute (if useful I can change the presentation, e.g. to a single cache).</p>",
        "id": 316265223,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1671197027
    },
    {
        "content": "<p>Also, <a href=\"https://github.com/leanprover-community/mathport/pull/209\">mathport#209</a> should be unblocked now.</p>",
        "id": 316265341,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1671197053
    },
    {
        "content": "<p>I think mathlib is still on 3.49.1, since the 3.50.0 release got yanked, see <a href=\"https://github.com/leanprover-community/mathlib/pull/17591\">#17591</a>.</p>",
        "id": 316437249,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671275391
    }
]