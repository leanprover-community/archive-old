[
    {
        "content": "<p>We have <code>Equiv.unique</code> in <a href=\"https://github.com/leanprover-community/mathlib4/blob/6be213c40a0e46497724faf413026818ba8d9798/Mathlib/Logic/Equiv/Defs.lean#L192\">mathlib4</a> and it's a def. Should it be <code>Equiv.Unique</code>? Same question for <code>Equiv.symm</code>, <code>Equiv.trans</code>, <code>Equiv.decidableEq</code>, <code>Equiv.inhabited</code>, <code>Equiv.equivCongr</code>, <code>Equiv.permCongr</code>, <code>Equiv.plift</code>... (all defs but have been decapitalised).</p>",
        "id": 310918931,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668804818
    },
    {
        "content": "<p>I think so... some of them might be theorem-cased but none of them should be type-cased because they aren't types</p>",
        "id": 310919943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668805174
    },
    {
        "content": "<p>it sounds like they should all be def-cased though</p>",
        "id": 310919974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668805186
    },
    {
        "content": "<p>There are tons of these, also in Logic.Equiv.Basic. The autoporter has called <code>α × Empty ≃ Empty</code> <code>prodEmpty</code> but it's a def so I'm changing it to <code>ProdEmpty</code>. In particular the conventions for <code>Logic.Equiv.Basic</code> (which I'm porting) are going to be different to those in <code>Logic.Equiv.Defs</code> (which is already ported) at this rate (unless I change <code>Logic.Equiv.Devs</code> too). <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> do you have an opinion on this?</p>",
        "id": 310920443,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668805341
    },
    {
        "content": "<p>no no, mathport is right here</p>",
        "id": 310920600,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668805409
    },
    {
        "content": "<p><code>ProdEmpty</code> would be if it was defining a type, i.e. something whose type is <code>Type u</code> or <code>Prop</code></p>",
        "id": 310920737,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668805448
    },
    {
        "content": "<p>for example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Equiv.Rel</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">~=</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">e</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n</code></pre></div>",
        "id": 310920835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668805496
    },
    {
        "content": "<p>Oh I'd misunderstood! Terms which are not types are <code>lowerCamelCase</code>!</p>",
        "id": 310921054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668805572
    },
    {
        "content": "<p>for something like <code>Equiv.symm</code>, it should be def-cased (lowerCamelCase) because it is constructing \"data\", i.e. something which is not a proposition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">~=</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">~=</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 310921066,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668805577
    },
    {
        "content": "<p>and for completeness: things which construct elements of a proposition are theorem-cased (snake_case), containing name components from the definitions it uses:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Equiv.symm_symm</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">~=</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">e.symm.symm</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 310921393,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668805699
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/capitals.20in.20Logic.2EEquiv.2EDefs.20file/near/310919974\">said</a>:</p>\n<blockquote>\n<p>it sounds like they should all be def-cased though</p>\n</blockquote>\n<p>I see, I was confused by Kevin calling it a lemma, while it's really an Equiv term.</p>",
        "id": 310921396,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1668805700
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">pemptyProd</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">PEmpty</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">PEmpty</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>So the rules are that this should be decapitalised because it's a term-not-a-type, and I think <code>pEmpty</code> looks weird so I'm going for this. Have I finally got it right?</p>",
        "id": 310921965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668805924
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">boolEquivPUnitSumPUnit</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">≃</span> <span class=\"n\">Sum</span> <span class=\"n\">PUnit.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">PUnit.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>The autoporter gave me <code>boolEquivPunitSumPunit</code></p>",
        "id": 310922427,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668806106
    }
]