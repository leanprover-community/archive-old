[
    {
        "content": "<p>If I write an attribute/command/tactic that adds a new declaration to the environment, I noticed that there are two ways that I can configure \"jump-to-definition\" to work</p>\n<ul>\n<li>add declaration ranges with <code>addDeclarationRanges</code></li>\n<li>add TermInfo with e.g. <code>addTermInfo</code> with <code>isBinder := true</code></li>\n</ul>\n<p>Is there a preferred way to do this? How do the two options relate (does one of them call the other, or are there multiple systems to decide to which definition to jump)? Is the second option abusing the <code>isBinder</code> option (since the doc string for <code>addTermInfo</code> suggests it's only for local constants)?</p>",
        "id": 313311782,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669910190
    },
    {
        "content": "<p>You should do both</p>",
        "id": 313313163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669910542
    },
    {
        "content": "<p>Declaration ranges are for global jump to definition, e.g from different files, while the termInfo gives you a hover on the span of the declaration id showing the type of the declared constant</p>",
        "id": 313313447,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669910633
    },
    {
        "content": "<p>I interpret the <code>isBinder := true</code> option more broadly, as \"this is a declaration\" vs \"this is a use\" for LSP purposes</p>",
        "id": 313313756,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669910704
    },
    {
        "content": "<p>Ok, so the <code>isBinder := true</code> will only enable jump-to-definition for the current file? That makes sense if it's intended for local constants.<br>\nSo we should use both, and set <code>isBinder := true</code> if it is the place where the new declaration is declared/introduced?</p>",
        "id": 313314982,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669911018
    },
    {
        "content": "<p>What is the difference between <code>range</code> and <code>selectionRange</code> in <code>DeclarationRanges</code>?<br>\nAlso, in the <code>Alias</code> tactic we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">for</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">aliases</span> <span class=\"k\">do</span> <span class=\"n\">withRef</span> <span class=\"n\">a</span> <span class=\"k\">do</span>\n    <span class=\"bp\">&lt;</span><span class=\"n\">stuff</span> <span class=\"n\">that</span> <span class=\"n\">doesn't</span> <span class=\"n\">change</span> <span class=\"kd\">variable</span> <span class=\"n\">a</span><span class=\"bp\">&gt;</span>\n    <span class=\"n\">addDeclarationRanges</span> <span class=\"n\">declName</span> <span class=\"o\">{</span>\n      <span class=\"n\">range</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">getDeclarationRange</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getRef</span><span class=\"o\">)</span>\n      <span class=\"n\">selectionRange</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">getDeclarationRange</span> <span class=\"n\">a</span>\n    <span class=\"o\">}</span>\n</code></pre></div>\n<p>am I correct that those two fields receive the same value?</p>",
        "id": 313316524,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669911480
    },
    {
        "content": "<p>Suppose someone writes <code>@[simps]</code> that adds two declarations to the environment. Is there a way to show the <code>TermInfo</code> for both declarations on that attribute? (I can do it if someone passes two arguments as in <code>@[simps fst snd]</code> by showing an <code>TermInfo</code> on each of the arguments.)</p>",
        "id": 313330305,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669915060
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>  iirc <code>range</code> is the range of the whole definition whereas <code>selectionRange</code> is what gets selected when you jump to it. For example in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">frob</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span>\n</code></pre></div>\n<p><code>range</code> is the whole thing whereas <code>selectionRange</code> is <code>frob</code>.</p>",
        "id": 313330363,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1669915073
    },
    {
        "content": "<p>Ok, that is clarifying. Just curious: what is <code>range</code> used for? (What goes wrong if I set it wrong?)</p>",
        "id": 313330619,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669915139
    },
    {
        "content": "<p>The LSP spec says \"This information is typically used to highlight the range in the editor.\" and I could swear it used to actually do this (the whole <code>range</code> would flash briefly) but it doesn't seem to do so currently. I might be having false memories, too.</p>",
        "id": 313331952,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1669915501
    },
    {
        "content": "<p>if I ctrl-hover over a declaration, the text in the span of <code>range</code> is shown in the hover</p>",
        "id": 313374767,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669927925
    }
]