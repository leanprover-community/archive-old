[
    {
        "content": "<p>Since Lean4 now enforces the new structure extension, I'd like to understand the extent to which lemmas about <code>mk</code> are needed at each level of extension. For example, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_equiv\">docs#mul_equiv</a> extends <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv\">docs#equiv</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_hom\">docs#mul_hom</a>. Would <code>mul_equiv.coe_mk</code> (which currently takes functions as arguments) be broken down into a lemma taking an <code>equiv</code> as argument, and another lemma <code>equiv.coe_mk</code> taking functions as arguments? What about <code>mul_equiv.symm_mk</code>?</p>",
        "id": 313874679,
        "sender_full_name": "Winston Yin",
        "timestamp": 1670204612
    },
    {
        "content": "<p>I'm currently porting all these lemmas by writing nested constructors</p>",
        "id": 313874785,
        "sender_full_name": "Winston Yin",
        "timestamp": 1670204707
    },
    {
        "content": "<p>Note that the statement of <code>MulEquiv.coe_mk</code> in Lean 4 will be syntactically the same as <code>(MulEquiv.mk f g h₁ h₂ h₃).toFun = f</code>, and <code>dsimp only</code> will do this automatically for you. Therefore, the lemma is likely not necessary anymore. I don't know if we want to keep it around for porting reasons.</p>",
        "id": 313959711,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1670245793
    },
    {
        "content": "<p>If we drop it we should use <code>#noalign</code></p>",
        "id": 313987773,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670250817
    },
    {
        "content": "<p>I just learnt about <code>#noalign</code> yesterday. What does the autoporter do if Lean 3 uses a declaration which has been no-aligned? Prove false?</p>",
        "id": 314111539,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670269501
    },
    {
        "content": "<p>It uses <code>sorry</code> instead</p>",
        "id": 314115185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670270793
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> As a heuristic, would you say that I can just remove all lemmas that can be proven with <code>by dsimp only</code>?</p>",
        "id": 314338080,
        "sender_full_name": "Winston Yin",
        "timestamp": 1670365481
    },
    {
        "content": "<p>Yes, that sounds like a good heuristic to me.</p>",
        "id": 314349548,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1670370612
    }
]