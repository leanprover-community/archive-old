[
    {
        "content": "<p>Can somebody shed some light on why <code>coe_mul</code> in <a href=\"https://github.com/leanprover-community/mathlib4/blob/8b509dad688ee929eef8de18abcc31d05ae10d6b/Mathlib/Algebra/Hom/Group.lean#L1260\">this file</a> is giving the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">whnf'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">200000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Also, <code>coe_one</code> just before this compiles but quite slowly. The problem goes away when the <code>Monoid (Monoid.EndCat M)</code> instance a little above is removed, so it's probably some instance loop I'm not seeing. The corresponding part in mathlib3 obviously has no such problem.</p>",
        "id": 311533638,
        "sender_full_name": "Winston Yin",
        "timestamp": 1669102486
    },
    {
        "content": "<p>An aside; do we really want <code>Monoid.EndCat</code> and not just <code>Monoid.End</code>?</p>",
        "id": 311552342,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669109645
    },
    {
        "content": "<p>I assume <code>EndCat</code> is just an automated choice by mathport due to casing, and not a conscious decision (cc <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>)</p>",
        "id": 311552591,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669109755
    },
    {
        "content": "<p>Yes, <code>EndCat</code> here is certainly incorrect.</p>",
        "id": 311676830,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669140300
    },
    {
        "content": "<p>Is there some command to see the instance search steps to catch this loop?</p>",
        "id": 311730917,
        "sender_full_name": "Winston Yin",
        "timestamp": 1669160895
    },
    {
        "content": "<p>Could I summon some help on this question? <a href=\"https://github.com/leanprover-community/mathlib4/pull/659\">mathlib4#659</a> is holding up pretty much everything at the moment.</p>\n<p>The problem we're having is an instance loop once we define <code>instance : Monoid (AddMonoid.End A)</code>.</p>\n<p>Adding <code>set_option trace.Meta.synthInstance true </code> before the timeout, the typeclass search that is spiralling out of control is <a href=\"https://gist.github.com/semorrison/3b03009d80f9afee1fb279ac4629562b\">here</a>.</p>\n<p>It begins <code>[] new goal CoeFun (AddMonoid.End A) _tc.0 ▶</code>, and ends with the obviously broken:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Monoid</span>\n        <span class=\"o\">(</span><span class=\"n\">Monoid.End</span>\n          <span class=\"o\">(</span><span class=\"n\">Monoid.End</span>\n            <span class=\"o\">(</span><span class=\"n\">Monoid.End</span>\n              <span class=\"o\">(</span><span class=\"n\">Monoid.End</span>\n                <span class=\"o\">(</span><span class=\"n\">Monoid.End</span>\n                  <span class=\"o\">(</span><span class=\"n\">Monoid.End</span>\n                    <span class=\"o\">(</span><span class=\"n\">Monoid.End</span>\n                      <span class=\"o\">(</span><span class=\"n\">Monoid.End</span>\n                        <span class=\"o\">(</span><span class=\"n\">Monoid.End</span>\n                          <span class=\"o\">(</span><span class=\"n\">Monoid.End</span>\n                            <span class=\"o\">(</span><span class=\"n\">Monoid.End</span>\n                              <span class=\"o\">(</span><span class=\"n\">Monoid.End</span>\n                                <span class=\"o\">(</span><span class=\"n\">AddMonoid.End</span> <span class=\"n\">A</span><span class=\"o\">)))))))))))))</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Monoid</span> <span class=\"bp\">?</span><span class=\"n\">m.218081</span> <span class=\"n\">of</span> <span class=\"n\">MulOneClass</span> <span class=\"bp\">?</span><span class=\"n\">m.218081</span> <span class=\"bp\">▶</span>\n</code></pre></div>",
        "id": 313125082,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669832773
    },
    {
        "content": "<p>Things start going wrong here with the <code>MonoidHomClass.toOneHomClass</code> instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">MonoidHomClass.toOneHomClass.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">,</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n  <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">)}</span> <span class=\"bp\">→</span>\n    <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">)}</span> <span class=\"bp\">→</span>\n      <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">MulOneClass</span> <span class=\"n\">M</span><span class=\"o\">)]</span> <span class=\"bp\">→</span>\n        <span class=\"o\">[</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">MulOneClass</span> <span class=\"n\">N</span><span class=\"o\">)]</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">MonoidHomClass</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">OneHomClass</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>What happens is that during function coercion, we need to synthesize an instance of <code>FunLike E ?a ?b</code>, then we're looking for <code>OneHomClass E ?a ?b</code>, and then we apply the instance above, which causes Lean to search for an instance of <code>MulOneClass ?M</code>.  Or in other words, enumerate <em>all</em> reasonable multiplicative structures.</p>",
        "id": 313135231,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1669835680
    },
    {
        "content": "<p>In Lean 3 we skipped arguments that were already assigned via unification, so we didn't run into this issue.</p>",
        "id": 313135312,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1669835718
    },
    {
        "content": "<p>Is this something we can/should change in Lean 4? Should I start making a MWE?</p>",
        "id": 313145270,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669838820
    },
    {
        "content": "<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n<span class=\"kd\">class</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">M</span>\n<span class=\"kd\">class</span> <span class=\"n\">AddZeroClass</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">Add</span> <span class=\"n\">M</span>\n<span class=\"kd\">class</span> <span class=\"n\">MulOneClass</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">One</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">Mul</span> <span class=\"n\">M</span>\n<span class=\"kd\">structure</span> <span class=\"n\">ZeroHom</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"n\">where</span> <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span>\n<span class=\"kd\">structure</span> <span class=\"n\">OneHom</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"n\">where</span> <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span>\n<span class=\"kd\">structure</span> <span class=\"n\">AddMonoidHom</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddZeroClass</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddZeroClass</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">ZeroHom</span> <span class=\"n\">M</span> <span class=\"n\">N</span>\n<span class=\"kd\">structure</span> <span class=\"n\">MonoidHom</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MulOneClass</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MulOneClass</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">OneHom</span> <span class=\"n\">M</span> <span class=\"n\">N</span>\n<span class=\"kd\">class</span> <span class=\"n\">AddMonoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">AddZeroClass</span> <span class=\"n\">M</span>\n<span class=\"kd\">class</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">MulOneClass</span> <span class=\"n\">M</span>\n<span class=\"kd\">def</span> <span class=\"n\">AddMonoid.End</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddZeroClass</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">AddMonoidHom</span> <span class=\"n\">A</span> <span class=\"n\">A</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">AddZeroClass</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">AddMonoid.End</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Zero.zero</span><span class=\"o\">}</span>\n  <span class=\"n\">mul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Zero.zero</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">Monoid.End</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MulOneClass</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">MonoidHom</span> <span class=\"n\">M</span> <span class=\"n\">M</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">MulOneClass</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">Monoid.End</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">One.one</span><span class=\"o\">}</span>\n  <span class=\"n\">mul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">One.one</span><span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">FunLike</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span>\n<span class=\"kd\">class</span> <span class=\"n\">MulHomClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">Mul</span> <span class=\"n\">N</span><span class=\"o\">)]</span> <span class=\"kd\">extends</span> <span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">N</span>\n<span class=\"kd\">class</span> <span class=\"n\">OneHomClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">One</span> <span class=\"n\">M</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">One</span> <span class=\"n\">N</span><span class=\"o\">)]</span> <span class=\"kd\">extends</span> <span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">N</span>\n<span class=\"kd\">class</span> <span class=\"n\">MonoidHomClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">MulOneClass</span> <span class=\"n\">M</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">MulOneClass</span> <span class=\"n\">N</span><span class=\"o\">)]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">MulHomClass</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">OneHomClass</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"n\">N</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"n\">F</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"n\">where</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">FunLike.toFun</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">AddZeroClass</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">AddMonoid.End</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">one.toFun</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddZeroClass</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">AddMonoidHom</span> <span class=\"n\">A</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 313145603,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1669838920
    },
    {
        "content": "<p>We can shrink that a bit to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">M</span>\n<span class=\"kd\">class</span> <span class=\"n\">MulOneClass</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">One</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">Mul</span> <span class=\"n\">M</span>\n<span class=\"kd\">structure</span> <span class=\"n\">OneHom</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"n\">where</span> <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span>\n<span class=\"kd\">structure</span> <span class=\"n\">MonoidHom</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MulOneClass</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MulOneClass</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">OneHom</span> <span class=\"n\">M</span> <span class=\"n\">N</span>\n<span class=\"kd\">class</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">MulOneClass</span> <span class=\"n\">M</span>\n<span class=\"kd\">def</span> <span class=\"n\">Monoid.End</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MulOneClass</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">MonoidHom</span> <span class=\"n\">M</span> <span class=\"n\">M</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">MulOneClass</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">Monoid.End</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">One.one</span><span class=\"o\">}</span>\n  <span class=\"n\">mul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">One.one</span><span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">FunLike</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span>\n<span class=\"kd\">class</span> <span class=\"n\">MulHomClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">N</span>\n<span class=\"kd\">class</span> <span class=\"n\">OneHomClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">N</span>\n<span class=\"kd\">class</span> <span class=\"n\">MonoidHomClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">MulOneClass</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MulOneClass</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">MulHomClass</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">OneHomClass</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"n\">N</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"n\">F</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"n\">where</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">FunLike.toFun</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">MulOneClass</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">Monoid.End</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">one.toFun</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MulOneClass</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">MonoidHom</span> <span class=\"n\">A</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 313149091,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669840188
    },
    {
        "content": "<p>(removing the <code>outParam</code>s on the typeclasses, after <a href=\"https://github.com/leanprover/lean4/issues/1852\">https://github.com/leanprover/lean4/issues/1852</a> was solved, and removed the additive structures, which aren't necessary to the example)</p>",
        "id": 313149330,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669840240
    },
    {
        "content": "<p>And further minimized:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Hom</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"n\">where</span> <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span>\n<span class=\"kd\">def</span> <span class=\"n\">End</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">Hom</span> <span class=\"n\">M</span> <span class=\"n\">M</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">End</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">A.m</span><span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">FunLike</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span>\n<span class=\"kd\">class</span> <span class=\"n\">HomClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">N</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"n\">F</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">FunLike.toFun</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 313151114,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669840867
    },
    {
        "content": "<p>We're thinking alike. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>   The <code>End</code> is a red herring, any instance that allows you to construct larger structures will do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Funny</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"n\">where</span> <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Funny</span> <span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"n\">F</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"n\">where</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">Funny.toFun</span>\n<span class=\"kd\">class</span> <span class=\"n\">MulHomClass</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Funny</span> <span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n<span class=\"kd\">class</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">M</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">Id</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MulHomClass</span> <span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 313151621,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1669841053
    },
    {
        "content": "<p>Great!</p>",
        "id": 313151784,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669841115
    },
    {
        "content": "<p>I'm going to assume that either you'll work on diagnosing this, or make a lean 4 issue for it, or tell me that I should make a lean 4 issue.</p>",
        "id": 313161044,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669844271
    },
    {
        "content": "<p>In the meantime since this file is holding up other things, I'm going to comment out some instances and leave porting notes pointing to this thread, then hopefully merge the file.</p>",
        "id": 313161290,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669844339
    },
    {
        "content": "<p>You'd need to comment out a lot of stuff, or is this going to blow up really big.  Note that the <code>MulHomClass extends FunLike</code> is enough to trigger the issue.</p>",
        "id": 313163834,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1669845229
    },
    {
        "content": "<p>I've opened <a href=\"https://github.com/leanprover/lean4/pull/1901\">lean4#1901</a>, but I don't think this is going to be fixed today.</p>",
        "id": 313163944,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1669845256
    },
    {
        "content": "<p>Hmm... okay.</p>",
        "id": 313163984,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669845274
    },
    {
        "content": "<p>Should lean4 go back to <code>is_monoid_hom</code> style because of this?</p>",
        "id": 313167565,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1669846603
    },
    {
        "content": "<p>I always thought that the reason we moved away from it was precisely because lean 3 had problems with it and we didn't want to wait for lean 4 which apparently wouldn't.</p>",
        "id": 313167662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669846662
    },
    {
        "content": "<p>Is the suggestion to switch from bundled hom structures back to mixins? Isn't it unavoidable to use bundled structures?</p>",
        "id": 313177745,
        "sender_full_name": "Winston Yin",
        "timestamp": 1669851199
    },
    {
        "content": "<p>My understanding is that we would keep the bundled structures but discard <code>instance : bundled_hom_class (bundled_hom A B) A B</code> in favor of <code>instance (h : bundled_hom A B) : is_hom f</code>, where the latter has the advantage that you can do things like <code>is_hom prod.fst</code> too</p>",
        "id": 313181213,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669853071
    },
    {
        "content": "<p>I'm trying to understand the difference between Lean 3 and Lean 4. In the issue, Gabriel explains that this comes from the instance</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">MulHomClass.toFunny</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MulHomClass</span> <span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Funny</span> <span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n</code></pre></div>\n<p>Is that related to the difference in instance resolution order (i.e., in Lean 3 we start with the last instance parameter, <code>[MulHomClass F A B]</code>, and then this fixes <code>A</code> and <code>B</code>, while in Lean 4 we start with the first instance parameter <code>[Mul A]</code>and then since <code>A</code> is not fixed this goes crazy)?</p>\n<p>If so, could we add an attribute to say that, in some lemma, one should start by the right-most instance instead of the leftmost? Or a crazy syntax like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">MulHomClass.toFunny</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MulHomClass</span> <span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Funny</span> <span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n</code></pre></div>\n<p>where one would start with the instance marked with <code>.{0}</code> if it exists, then the one marked with <code>.{1}</code> if it exists, and then the remaining ones (which are not solved by unification) from left to right?</p>",
        "id": 313299178,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1669906769
    },
    {
        "content": "<p>This actually already exists</p>",
        "id": 313299308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669906800
    },
    {
        "content": "<p><code>@[infer_tc_goals_rl]</code></p>",
        "id": 313299384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669906808
    },
    {
        "content": "<p>Not the crazy one though :)</p>",
        "id": 313299436,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669906820
    },
    {
        "content": "<p>Does it help on this issue?</p>",
        "id": 313299654,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1669906872
    },
    {
        "content": "<p>I would prefer that any crazy extensions have crazy syntax confined to the attribute itself</p>",
        "id": 313299664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669906875
    },
    {
        "content": "<p>The crazy syntax would have been helpful to me once in mathlib 3. There was an <code>[is_R_or_C 𝕜]</code> field in the middle of assumptions, and it would have been helpful to start with this one because this can not blow up, restricting <code>𝕜</code> to be reals or complexes, while a later assumption was of the form <code>[module 𝕜 F]</code> not imposing anything on <code>𝕜</code>, so Lean 3 would start with this instance search not knowing anything on <code>𝕜</code> and it would try all the rings it could imagine...</p>\n<p>I think this one is solved by the left-to-right rule. But for performance reasons I can imagine situations where one would like to start with a middle instance because that would be the one that imposes the most restrictions and thus be the quickest to solve.</p>",
        "id": 313300980,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1669907275
    },
    {
        "content": "<blockquote>\n<p>while in Lean 4 we start with the first instance parameter</p>\n</blockquote>\n<p>Is this behavior desirable?</p>",
        "id": 313308707,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669909293
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/instance.20loop.3F/near/313163944\">said</a>:</p>\n<blockquote>\n<p>I've opened <a href=\"https://github.com/leanprover/lean4/pull/1901\">lean4#1901</a>, but I don't think this is going to be fixed today.</p>\n</blockquote>\n<p>For people in certain time zones it <a href=\"https://github.com/leanprover/lean4/commit/ffb0f42aae1e763196213b06e685ec30e4e02996\">was fixed</a> the same day <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> Thanks Leo!</p>",
        "id": 313342196,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669918337
    },
    {
        "content": "<p>Unfortunately it looks like the fix may need a fix: <a href=\"https://github.com/leanprover/lean4/pull/1907\">lean4#1907</a>. This is holding up <code>Algebra.Hom.Group</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/659\">mathlib4#659</a> now.</p>",
        "id": 313423169,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669953900
    },
    {
        "content": "<p>Phew, this is finally solved! There's a little bit of version hell to deal with (we need to wait for nightly-2022-12-03, and also <a href=\"https://github.com/JLimperg/aesop/pull/32\">https://github.com/JLimperg/aesop/pull/32</a>) before we can merge, but all the instance loops are gone now, solved by fixes in Lean 4 core.</p>",
        "id": 313576642,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670010459
    },
    {
        "content": "<p>If we don't mind working with an intermediate-between-nightlies commit of Lean 4, we could merge this today. Otherwise I'll be offline all of tomorrow, but hopefully someone could bump to 2022-12-03 when it is available and merge.</p>",
        "id": 313597422,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670018822
    },
    {
        "content": "<p>I'm fine with an intermediate Lean 4 version.</p>",
        "id": 313597848,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1670019009
    },
    {
        "content": "<p>Yeah, let's go with the intermediate version.  We've decided yesterday that waiting 24h+ is just slowing us down with no upsides.</p>",
        "id": 313598053,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1670019127
    },
    {
        "content": "<p>Merged!</p>",
        "id": 313606721,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670023260
    }
]