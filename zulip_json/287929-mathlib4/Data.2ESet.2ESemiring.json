[
    {
        "content": "<p>The <a href=\"https://math.commelin.net/files/port_status.html\">#port-status</a> page says <code>data.set.semiring</code> is ready to be ported, but we are missing <code>Mathlib.Data.Set.Pointwise.Smul</code> (the only import in mathlib3). Is this a bug?</p>",
        "id": 321147269,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1673612553
    },
    {
        "content": "<p>Sorry, it's there.</p>",
        "id": 321147431,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1673612618
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> has marked this topic as resolved.</p>",
        "id": 321147599,
        "sender_full_name": "Notification Bot",
        "timestamp": 1673612662
    },
    {
        "content": "<p>I guess you noticed it's called SMul now</p>",
        "id": 321149728,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673613343
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> has marked this topic as unresolved.</p>",
        "id": 321153225,
        "sender_full_name": "Notification Bot",
        "timestamp": 1673614361
    },
    {
        "content": "<p>This file essentially only contains results like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">down_up</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s.up.down</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">set_semiring.down_up</span> <span class=\"n\">SetSemiring.down_up</span>\n</code></pre></div>\n<p>This now doesn't work because of dot notation. This works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">down_up</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SetSemiring.down</span> <span class=\"o\">(</span><span class=\"n\">Set.up</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">set_semiring.down_up</span> <span class=\"n\">SetSemiring.down_up</span>\n</code></pre></div>\n<p>Is there a way of making dot notation working again? Note that <code>SetSemiring.down</code> is protected, so it is really annoying to use.</p>",
        "id": 321153586,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1673614465
    },
    {
        "content": "<p>Oh, while you're on this file, let me know that some statements do not elaborate the way we want them to.</p>",
        "id": 321153823,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673614541
    },
    {
        "content": "<p>I tried fixing them, to no avail</p>",
        "id": 321153909,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673614563
    },
    {
        "content": "<p>There is one error in <code>instance [CommMonoid α] : CanonicallyOrderedCommSemiring (SetSemiring α)</code> coming from the fact that in <code>NoZeroDivisors</code> we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M₀</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>while in <code>CanonicallyOrderedCommSemiring</code> it's</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kn\">protected</span> <span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>It's easy to fix, but I am curious why this wasn't a problem in mathlib3.</p>",
        "id": 321162740,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1673616933
    },
    {
        "content": "<p>lean4 eagerly intros implicit args</p>",
        "id": 321163287,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1673617078
    },
    {
        "content": "<p>or it could be a protected attr issue where in one case it has it, in the other it doesn't. What's the error?</p>",
        "id": 321163602,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1673617143
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.16230</span> <span class=\"bp\">*</span> <span class=\"bp\">?</span><span class=\"n\">m.16231</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.16230</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"bp\">?</span><span class=\"n\">m.16231</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">SetSemiring</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>so it seems because of the implict variables.</p>",
        "id": 321163733,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1673617180
    },
    {
        "content": "<p>that's a implicit lambda issue</p>",
        "id": 321163756,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673617191
    },
    {
        "content": "<p>It's solved by adding explictely (instead of getting it from <code>NoZeroDivisors</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ab</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eq_zero_or_eq_zero_of_smul_eq_zero</span> <span class=\"n\">ab</span>\n</code></pre></div>",
        "id": 321163911,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1673617231
    },
    {
        "content": "<p>But I am wondering if we should use the same implicitness in both def</p>",
        "id": 321163999,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1673617254
    },
    {
        "content": "<p>Actually it's not about lambdas, that's a bug in lean 3, which normally introduces implicit variables in that situation</p>",
        "id": 321164008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673617254
    },
    {
        "content": "<p>It should be implicit in both places, I think</p>",
        "id": 321164113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673617277
    },
    {
        "content": "<p>Let me see what happens if I change it in mathlib3</p>",
        "id": 321164226,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1673617311
    },
    {
        "content": "<p>lean 3 will not introduce implicit variables when you reference a structure projection directly. If you make a wrapper, even if it has exactly the same binder info as the projection, it will not have the same behavior</p>",
        "id": 321164341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673617334
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/18167\">#18167</a></p>\n<p>I indeed had to modify</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">to_no_zero_divisors</span> <span class=\"o\">:</span> <span class=\"n\">no_zero_divisors</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 321166192,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1673617874
    },
    {
        "content": "<p>mathlib3 seems happy, I've opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/1545\">#1545</a>.</p>",
        "id": 321207895,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1673628577
    }
]