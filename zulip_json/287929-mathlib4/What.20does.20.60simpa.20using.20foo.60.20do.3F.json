[
    {
        "content": "<p>I'm trying to unwind a misbehaving <code>simpa using foo</code> tactic (red squiggly + \"no goals to be solved\" + \"Goals accomplished <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>\"), and would like to see where the more primitive simplification is getting to...</p>",
        "id": 311469429,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669062658
    },
    {
        "content": "<p>If you get both \"goal accomplished\" and an error it can be a bug. Can you provide a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 311470084,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1669062911
    },
    {
        "content": "<p>Doesn't feel like it -- I'm deep in the  bowels of a port that's secondary to another port. Let me see if I can <code>sorry</code> some stuff to make an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 311472321,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669063623
    },
    {
        "content": "<p>I get the error on both <code>simpa</code>s here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Option.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Subtype</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Equiv.Defs</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">Option</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">remove_none_aux</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">theorem</span> <span class=\"n\">remove_none_aux_some</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">x'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">remove_none_aux</span> <span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">theorem</span> <span class=\"n\">remove_none_aux_none</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">remove_none_aux</span> <span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">theorem</span> <span class=\"n\">remove_none_aux_inv</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">remove_none_aux</span> <span class=\"n\">e.symm</span> <span class=\"o\">(</span><span class=\"n\">remove_none_aux</span> <span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Option.some_injective</span> <span class=\"n\">_</span>\n    <span class=\"o\">(</span><span class=\"kd\">by</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">e.symm</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">remove_none_aux</span> <span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n      <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">remove_none_aux_none</span> <span class=\"n\">_</span> <span class=\"n\">h1</span><span class=\"o\">]</span>\n        <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">e.eq_symm_apply.mpr</span> <span class=\"n\">h2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n      <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">remove_none_aux_some</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n        <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h1</span>\n\n      <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">remove_none_aux_none</span> <span class=\"n\">_</span> <span class=\"n\">h2</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n        <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h1</span>\n\n      <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">remove_none_aux_some</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">⟩]</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">remove_none_aux_some</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩]</span>\n        <span class=\"n\">simp</span>\n        <span class=\"o\">)</span>\n</code></pre></div>\n<p>But figuring out how to trigger this with a minimum of dependencies is going to be tricky. Let me work on it...</p>",
        "id": 311472617,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669063775
    },
    {
        "content": "<p><code>simpa using h1</code> is like <code>simp</code> followed by <code>exact h1</code>, so it's possible that <code>simp</code> already solves the goal and so <code>exact h1</code> produce an error  that there's \"no goals to be solved\".</p>",
        "id": 311473079,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1669063956
    },
    {
        "content": "<p>What happen if you remove all the <code>private</code>?</p>",
        "id": 311473292,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1669064044
    },
    {
        "content": "<p><code>simp</code> doesn't solve the goal, sadly</p>",
        "id": 311473302,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669064053
    },
    {
        "content": "<p>Also, a <code>sorried</code> def is always dangerous.</p>",
        "id": 311473330,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1669064069
    },
    {
        "content": "<p>What does <code>simp at h1 ⊢</code> gives you?</p>",
        "id": 311473399,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1669064104
    },
    {
        "content": "<p>No effect on removing the <code>private</code> declarations.</p>",
        "id": 311473460,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669064132
    },
    {
        "content": "<p>Can you remove the first <code>sorry</code>?</p>",
        "id": 311473548,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1669064165
    },
    {
        "content": "<p>I just <code>sorry</code>d to de-dependency the beast...</p>",
        "id": 311473553,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669064168
    },
    {
        "content": "<p>Unfortunately the first <code>sorry</code> depends on a file that's as yet unported....</p>",
        "id": 311473609,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669064192
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> 's suggestion gives the <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 311473714,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669064241
    },
    {
        "content": "<p>make them <code>opaque</code> instead of <code>sorry</code></p>",
        "id": 311473781,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669064281
    },
    {
        "content": "<p>or <code>axiom</code></p>",
        "id": 311473888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669064309
    },
    {
        "content": "<p>OK, this repros.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Option.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Subtype</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Equiv.Defs</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">Option</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">remove_none_aux</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">isSome</span> <span class=\"k\">then</span> <span class=\"n\">Option.get</span> <span class=\"n\">_</span> <span class=\"n\">h</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">Option.get</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;|</span>\n      <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">none</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isSome</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Option.ne_none_iff_isSome</span><span class=\"o\">]</span>\n        <span class=\"n\">intro</span> <span class=\"n\">hn</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Option.not_isSome_iff_eq_none</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hn</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n        <span class=\"n\">exact</span> <span class=\"n\">Option.some_ne_none</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">e.injective</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">remove_none_aux_some</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">x'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">remove_none_aux</span> <span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">remove_none_aux</span><span class=\"o\">,</span> <span class=\"n\">Option.isSome_iff_exists.mpr</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">remove_none_aux_none</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">remove_none_aux</span> <span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">remove_none_aux</span><span class=\"o\">,</span> <span class=\"n\">Option.not_isSome_iff_eq_none.mpr</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">remove_none_aux_inv</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">remove_none_aux</span> <span class=\"n\">e.symm</span> <span class=\"o\">(</span><span class=\"n\">remove_none_aux</span> <span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Option.some_injective</span> <span class=\"n\">_</span>\n    <span class=\"o\">(</span><span class=\"kd\">by</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">e.symm</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">remove_none_aux</span> <span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n      <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">remove_none_aux_none</span> <span class=\"n\">_</span> <span class=\"n\">h1</span><span class=\"o\">]</span>\n        <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">e.eq_symm_apply.mpr</span> <span class=\"n\">h2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n      <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">remove_none_aux_some</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n        <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h1</span>\n\n      <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">remove_none_aux_none</span> <span class=\"n\">_</span> <span class=\"n\">h2</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n        <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h1</span>\n\n      <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">remove_none_aux_some</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">⟩]</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">remove_none_aux_some</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩]</span>\n        <span class=\"n\">simp</span>\n        <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 311474110,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669064404
    },
    {
        "content": "<p>When I've hit that, replacing <code>simpa using foo</code> by <code>simp at foo</code> was sufficient</p>",
        "id": 311475001,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1669064771
    },
    {
        "content": "<p>So interestingly, when I replace<br>\n<code>simpa using h1</code><br>\nwith<br>\n<code>simp at h1\nexact h1</code></p>\n<p>I get the same behavior (red squiggly + <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>)</p>",
        "id": 311475291,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669064888
    },
    {
        "content": "<p>what it macro expands to is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span><span class=\"bp\">'</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h1</span>\n<span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n<span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>and the <code>exact</code> line fails. As Ruben says, the solution is to just use <code>simp at h1</code>, the error message should be fixed to indicate this</p>",
        "id": 311475329,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669064909
    },
    {
        "content": "<p>The red squiggly + <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> situation isn't that unusual, the tactic state is generally empty at the end of a proof and that's when the <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> shows up</p>",
        "id": 311475466,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669064978
    },
    {
        "content": "<p>in particular, almost all tactics give an error if used when there are no goals, and that's when you get the <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 311475626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669065036
    },
    {
        "content": "<p>It's just that <code>h1</code><em>is</em> the goal....</p>",
        "id": 311475651,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669065044
    },
    {
        "content": "<p>?</p>",
        "id": 311475670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669065056
    },
    {
        "content": "<p>so <code>exact h1</code> should work?</p>",
        "id": 311475672,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669065057
    },
    {
        "content": "<p>no, <code>h1</code> is not the goal</p>",
        "id": 311475720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669065078
    },
    {
        "content": "<p><code>h1</code> is <code>some ... = none</code> after simplification which is why <code>simp</code> can close the goal itself</p>",
        "id": 311475764,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669065104
    },
    {
        "content": "<p>If I take the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> above, replace <code>simpa using h1</code> with <code>simp at h1</code>, <code>h1</code> is the goal...</p>",
        "id": 311475789,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669065120
    },
    {
        "content": "<p>I think you must be confused by the \"expected type\" printout</p>",
        "id": 311475885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669065150
    },
    {
        "content": "<p>the tactic state is empty (i.e. there are no goals and you get a <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>)</p>",
        "id": 311475895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669065155
    },
    {
        "content": "<p>that's the first bit</p>",
        "id": 311475905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669065158
    },
    {
        "content": "<p>the expected type is the type of <code>h1</code></p>",
        "id": 311475923,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669065167
    },
    {
        "content": "<p>because your cursor is on <code>h1</code></p>",
        "id": 311475940,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669065175
    },
    {
        "content": "<p>You are exactly correct</p>",
        "id": 311476240,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669065278
    }
]