[
    {
        "content": "<p>I was trying to diagnose why the <code>simp</code> was failing in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1424\">mathlib4#1424</a> and it seems to be the following thing (this works on mathlib master and can be massively minimised I'm sure)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.GroupRingAction.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">M'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">M'</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">M'</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">MulActionHom</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- The underlying function. -/</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span>\n  <span class=\"sd\">/-- The proposition that the function preserves the action. -/</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">toFun</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"n\">toFun</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">@[inherit_doc]</span>\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"n\">X</span> <span class=\"s2\">\" →[\"</span> <span class=\"n\">M</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"s2\">\"] \"</span> <span class=\"n\">Y</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">MulActionHom</span> <span class=\"n\">M</span> <span class=\"n\">X</span> <span class=\"n\">Y</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddMonoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DistribMulAction</span> <span class=\"n\">M</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddMonoid</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DistribMulAction</span> <span class=\"n\">M</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">DistribMulActionHom</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"bp\">→</span><span class=\"o\">[</span><span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">→+</span> <span class=\"n\">B</span>\n\n<span class=\"kd\">@[inherit_doc]</span>\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"n\">A</span> <span class=\"s2\">\" →+[\"</span> <span class=\"n\">M</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"s2\">\"] \"</span> <span class=\"n\">B</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">DistribMulActionHom</span> <span class=\"n\">M</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→+</span><span class=\"o\">[</span><span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨{</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→+</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"c1\">-- src✝ : A →+ B := 0</span>\n    <span class=\"c1\">-- ⊢ ↑↑src✝ (m • x) = m • ↑↑src✝ x</span>\n    <span class=\"n\">simp</span>\n    <span class=\"c1\">-- ⊢ ↑↑0 (m • x) = m • ↑↑0 x</span>\n    <span class=\"c1\">-- now let's change it to the goal we had in mathlib3 at this point</span>\n    <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→+</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→+</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n    <span class=\"n\">simp</span> <span class=\"c1\">-- now works</span>\n  <span class=\"o\">}}⟩</span>\n</code></pre></div>\n<p>Because of some change between Lean 3 and Lean 4 the goal is much more ugly in the Lean 4 version. <code>simp</code> removes the inaccessible variable but it doesn't have enough power to close the goal; presumably one could add more <code>simp</code> lemmas and fix the problem but then this would be an issue with divergence from mathlib3 I guess (for example if they're added later on in the port). I can imagine a lot more goals later on in the port being harder to prove because of this.</p>",
        "id": 320781996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673465726
    },
    {
        "content": "<p>I suspect adding the missing fun_like instances in Lean3 would solve this</p>",
        "id": 320782648,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673465930
    },
    {
        "content": "<p>Aah I see!</p>",
        "id": 320782786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673465993
    },
    {
        "content": "<p>I don't think we should spend any time on this file until we've done that</p>",
        "id": 320783134,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673466113
    },
    {
        "content": "<p>So in Lean 4 the missing lemmas are </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foo1</span> <span class=\"o\">:</span> <span class=\"n\">AddMonoidHom.toZeroHom</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→+</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">foo2</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ZeroHom.toFun</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ZeroHom</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 320787407,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673467541
    },
    {
        "content": "<p>I'm not very good at naming conventions and I'm not very good at knowing where things go but if you just want to give me some hints I can make the mathlib3 PR</p>",
        "id": 320787537,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673467572
    },
    {
        "content": "<p><code>zero_hom.coe_add_monoid_hom_zero</code>, <code>zero_hom.coe_zero</code>, both <code>simp</code> and <code>norm_cast</code></p>",
        "id": 320787775,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673467673
    },
    {
        "content": "<p>The first lemma shouldn't have <code>coe</code> in the name (in lean 3) since it is not about coe, and the second should be stated with <code>⇑</code> and already exist as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ZeroHom.zero_apply#doc\">docs4#ZeroHom.zero_apply</a> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/zero_hom.zero_apply\">docs#zero_hom.zero_apply</a>)</p>",
        "id": 320797571,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673471211
    },
    {
        "content": "<p>What's missing is the one that says <code>⇑(0 : ZeroHom A B) = 0</code></p>",
        "id": 320797814,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673471289
    },
    {
        "content": "<p>Oh sorry I checked the existing lemmas and concluded this was the <code>coe</code> one, not the <code>apply</code> one</p>",
        "id": 320797915,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673471324
    },
    {
        "content": "<p>I've spent a little bit of time looking into this, and I think this particular example might not even require a mathlib3 port: What makes <code>simp</code> work again here is simply a theorem like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp, to_additive]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">OneHom.toFun_eq_coe</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">OneHom</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f.toFun</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/hom/group.html#one_hom.to_fun_eq_coe\">And this exists in mathlib3!</a> But it was taken out in the port of Algebra.Hom.Group. Overeagerly so, I'm guessing, because <a href=\"https://github.com/leanprover-community/mathlib4/pull/1219\">mathlib4#1219</a> intends to reintroduce it in a semi-big refactoring effort, and it looks like people generally think the things that are happening in that PR are the right things to do.</p>",
        "id": 321029343,
        "sender_full_name": "Lukas Miaskiwskyi",
        "timestamp": 1673555769
    },
    {
        "content": "<p>This is the wrong fix, the right fix is the <code>FunLike</code> instances</p>",
        "id": 321030463,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673556199
    },
    {
        "content": "<p>Probably unrelated, but <code>@[simp, to_additive]</code> is now spelled <code>@[to_additive (attr := simp)]</code></p>",
        "id": 321035998,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1673558250
    },
    {
        "content": "<p>In the same file, there are also issues with coercion lemmas that come out as syntactic tautologies; the lean3 versions being (see also <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/hom/group_action.html#distrib_mul_action_hom.to_fun_eq_coe\">here</a>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">to_fun_eq_coe</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→+</span><span class=\"o\">[</span><span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f.to_fun</span> <span class=\"bp\">=</span> <span class=\"bp\">⇑</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[norm_cast]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coe_fn_coe'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→+</span><span class=\"o\">[</span><span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span><span class=\"o\">[</span><span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>(there are some \"syntactic tautologies\" in that file, but they are similar to these.)</p>\n<p>I'm trying to get a feeling for this: <code>to_fun_eq_coe</code> should indeed turn into a syntactic equality and be removed no matter what, right? That is how I understand the porting wiki's remarks on coercions.</p>\n<p>For the second one, both sides are unfolded to <code>f.toMulActionHom.toFun</code>, when maybe we'd rather want the lemma to unfold to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">FunLike.coe</span> <span class=\"o\">(</span><span class=\"n\">SMulHomClass.toMulActionHom</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">FunLike.coe</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>If I look how similar instances are handled elsewhere in mathlib4, the approach in Algebra.Hom.Group would lead me to defining</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[coe]</span>\n<span class=\"kd\">def</span> <span class=\"n\">SMulHomClass.toMulActionHom</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMulHomClass</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span><span class=\"o\">[</span><span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n <span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">FunLike.coe</span> <span class=\"n\">f</span>\n   <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"n\">map_smul</span> <span class=\"n\">f</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMulHomClass</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CoeTC</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span><span class=\"o\">[</span><span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">SMulHomClass.toMulActionHom</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>I don't know why CoeTC comes in here while being generally discouraged in its tooltip, but we'll take it. And with this new instance (maybe this is what Eric meant with the FunLike instances), the translation </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[norm_cast]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">coe_fn_coe'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→+</span><span class=\"o\">[</span><span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span><span class=\"o\">[</span><span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>causes no issue anymore with the linter and, when we remove some of the CoeFun instances in the file, unfolds exactly to the equation we hoped for. So, modulo backporting, is that what we want?</p>\n<p>Apologies for mucho texto, coe is melting my brain. I'm just hoping this is easy enough to parse to the experts. Also tagging <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> since he made remarks about this on the PR.</p>",
        "id": 321253822,
        "sender_full_name": "Lukas Miaskiwskyi",
        "timestamp": 1673642760
    },
    {
        "content": "<p>Much of what you say sounds fine to me. I don't really understand CoeTC yet.</p>",
        "id": 321271267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673649601
    },
    {
        "content": "<blockquote>\n<p>maybe this is what Eric meant with the FunLike instances</p>\n</blockquote>\n<p><del>I mean that in lean 3 we need a <code>add_monoid_hom_class (A →+[M] B) (A  → B)</code> instance, and that porting the file is going to be a massive headache without that</del></p>",
        "id": 321272596,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673650169
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 321272735,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673650234
    },
    {
        "content": "<p>Sorry, I'm being stupid; these instances already exist!</p>",
        "id": 321273006,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673650374
    },
    {
        "content": "<p>Thanks for clearing up the FunLike comment! I implemented the changes that I outlined in my previous post. They don't fix the simp issue that started the thread, but at least the syntactic tautologies stop being tautologies. Even lemmas like <code>DistribMulActionHom.toFun_eq_coe (f : A →+[M] B): f.toFun = f</code>, contrary to what I said earlier, now unfold to something meaningful, <code>f.toMulActionHom.toFun = FunLike.coe f</code>. The approach also seems consistent with <a href=\"https://github.com/leanprover-community/mathlib4/pull/1219\">mathlib4#1219</a>, which, if accepted as the correct thing to do and merged, will fix the simp issue.</p>",
        "id": 321365056,
        "sender_full_name": "Lukas Miaskiwskyi",
        "timestamp": 1673706481
    }
]