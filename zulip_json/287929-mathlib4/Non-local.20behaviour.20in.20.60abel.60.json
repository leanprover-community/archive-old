[
    {
        "content": "<p>I am experiencing seemingly non-local behaviour in <code>abel</code>, and wondered if anyone else could reproduce it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Abel</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">abel</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">Int.cast</span> <span class=\"n\">α</span> <span class=\"n\">Ring.toIntCast</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"c1\">-- HERE</span>\n  <span class=\"n\">use</span> <span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">y</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.cast_succ</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.cast_sub</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hy</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">Int.cast</span> <span class=\"n\">α</span> <span class=\"n\">Ring.toIntCast</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span> <span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">y</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.cast_succ</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.cast_sub</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hy</span><span class=\"o\">]</span>\n  <span class=\"n\">abel</span> <span class=\"c1\">-- fails with \"Try this ...\"</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 319724302,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672985996
    },
    {
        "content": "<p>Where marked <code>-- HERE</code>, change <code>↑z</code> to <code>z</code>.  On my machine this makes the failure in the <em>next</em> example go away.</p>",
        "id": 319724375,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672986038
    },
    {
        "content": "<p><span aria-label=\"ping pong\" class=\"emoji emoji-1f3d3\" role=\"img\" title=\"ping pong\">:ping_pong:</span> This behaviour persists for me today on fresh mathlib.  Can anyone else reproduce it?</p>",
        "id": 319831213,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673027771
    },
    {
        "content": "<p>I can reproduce. Whatever is going on?</p>",
        "id": 319838925,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673030285
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> any ideas?  This bug is pretty weird ...</p>",
        "id": 319839052,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673030336
    },
    {
        "content": "<p>I tracked it down as a test case for something experienced by <span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> and me in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1304\">mathlib4#1304</a>.</p>",
        "id": 319839424,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673030470
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Abel</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- -- the evil example: uncomment me to break your definition!</span>\n<span class=\"c1\">-- example (a : α) (c : ℕ) (y z : ℤ) (f : α → α) :</span>\n<span class=\"c1\">--     f a * ↑c + f a - f (a * ↑c + a) = ↑(z - y) := by</span>\n<span class=\"c1\">--   sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">Int.cast</span> <span class=\"n\">α</span> <span class=\"n\">Ring.toIntCast</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span> <span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">y</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.cast_succ</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.cast_sub</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hy</span><span class=\"o\">]</span>\n  <span class=\"n\">abel</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>Live streaming on the discord</p>",
        "id": 319848039,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673033442
    },
    {
        "content": "<p>this can't happen, right?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Abel</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- -- the evil example: uncomment me to break your definition!</span>\n<span class=\"c1\">-- example (a : α) (c : ℕ) (y z : ℤ) (f : α → α) :</span>\n<span class=\"c1\">--     f a * ↑c + f a - f (a * ↑c + a) = ↑(z - y) := by</span>\n<span class=\"c1\">--   sorry</span>\n\n<span class=\"c1\">-- -- I am the antidote -- uncomment me and your definition will work again!</span>\n<span class=\"c1\">-- def antidote (a : α) (c : ℕ) (y z : ℤ) (f : α → α)</span>\n<span class=\"c1\">--     (hy: f (a * ↑c + a) - f (a * ↑c) - f a = ↑y)</span>\n<span class=\"c1\">--     (hz: f a * ↑c - f (a * ↑c) = ↑z) :</span>\n<span class=\"c1\">--     f a * ↑c + f a - f (a * ↑c + a) = ↑(z - y) := by</span>\n<span class=\"c1\">--    rw [Int.cast_sub, ← hz, ← hy]</span>\n<span class=\"c1\">--    abel</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">Int.cast</span> <span class=\"n\">α</span> <span class=\"n\">Ring.toIntCast</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span> <span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">y</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.cast_succ</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.cast_sub</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hy</span><span class=\"o\">]</span>\n  <span class=\"n\">abel</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 319849262,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673033830
    },
    {
        "content": "<p>I'm assuming others can reproduce. I'm on Ubuntu 20.04.5 LTS</p>",
        "id": 319849443,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673033882
    },
    {
        "content": "<p><code>Lean (version 4.0.0-nightly-2023-01-04, commit 905d3204ae08, Release)</code></p>",
        "id": 319849600,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673033934
    },
    {
        "content": "<p>I can reproduce the problem too.</p>",
        "id": 319850527,
        "sender_full_name": "David Renshaw",
        "timestamp": 1673034254
    },
    {
        "content": "<p>Same behavior with just <code>able_nf</code>, with narrows it down a bit I think.</p>",
        "id": 319850870,
        "sender_full_name": "David Renshaw",
        "timestamp": 1673034387
    },
    {
        "content": "<p>I'm trying looking at the output after doing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.abel</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.abel.detail</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 319853779,
        "sender_full_name": "David Renshaw",
        "timestamp": 1673035409
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Abel</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- theorem uncommenting_me_breaks_foo (a : α) (c : ℕ) (f : α → α) : f a * ↑c + f a - f (a * ↑c + a)</span>\n<span class=\"c1\">--     = f a * ↑c - f (a * ↑c) - (f (a * ↑c + a) - f (a * ↑c) - f a) :=</span>\n<span class=\"c1\">-- Eq.trans</span>\n<span class=\"c1\">--   (sorry)</span>\n<span class=\"c1\">--   (Eq.symm</span>\n<span class=\"c1\">--     (Mathlib.Tactic.Abel.unfold_sub (f a * ↑c - f (a * ↑c)) (f (a * ↑c + a) - f (a * ↑c) - f a)</span>\n<span class=\"c1\">--       (Mathlib.Tactic.Abel.termg (-1) (f (a * ↑c + a))</span>\n<span class=\"c1\">--         (Mathlib.Tactic.Abel.termg 1 (f a) (Mathlib.Tactic.Abel.termg 1 (f a * ↑c) 0)))</span>\n<span class=\"c1\">--       (Mathlib.Tactic.Abel.subst_into_addg (f a * ↑c - f (a * ↑c)) (-(f (a * ↑c + a) - f (a * ↑c) - f a))</span>\n<span class=\"c1\">--         (Mathlib.Tactic.Abel.termg (-1) (f (a * ↑c)) (Mathlib.Tactic.Abel.termg 1 (f a * ↑c) 0))</span>\n<span class=\"c1\">--         (Mathlib.Tactic.Abel.termg (-1) (f (a * ↑c + a))</span>\n<span class=\"c1\">--           (Mathlib.Tactic.Abel.termg 1 (f (a * ↑c)) (Mathlib.Tactic.Abel.termg 1 (f a) 0)))</span>\n<span class=\"c1\">--         (Mathlib.Tactic.Abel.termg (-1) (f (a * ↑c + a))</span>\n<span class=\"c1\">--           (Mathlib.Tactic.Abel.termg 1 (f a) (Mathlib.Tactic.Abel.termg 1 (f a * ↑c) 0)))</span>\n<span class=\"c1\">--         (Mathlib.Tactic.Abel.unfold_sub (f a * ↑c) (f (a * ↑c))</span>\n<span class=\"c1\">--           (Mathlib.Tactic.Abel.termg (-1) (f (a * ↑c)) (Mathlib.Tactic.Abel.termg 1 (f a * ↑c) 0))</span>\n<span class=\"c1\">--           (Mathlib.Tactic.Abel.subst_into_addg (f a * ↑c) (-f (a * ↑c)) (Mathlib.Tactic.Abel.termg 1 (f a * ↑c) 0)</span>\n<span class=\"c1\">--             (Mathlib.Tactic.Abel.termg (-1) (f (a * ↑c)) 0)</span>\n<span class=\"c1\">--             (Mathlib.Tactic.Abel.termg (-1) (f (a * ↑c)) (Mathlib.Tactic.Abel.termg 1 (f a * ↑c) 0))</span>\n<span class=\"c1\">--             (Mathlib.Tactic.Abel.term_atomg (f a * ↑c))</span>\n<span class=\"c1\">--             (Mathlib.Tactic.Abel.subst_into_negg (f (a * ↑c)) (Mathlib.Tactic.Abel.termg 1 (f (a * ↑c)) 0)</span>\n<span class=\"c1\">--               (Mathlib.Tactic.Abel.termg (-1) (f (a * ↑c)) 0) (Mathlib.Tactic.Abel.term_atomg (f (a * ↑c)))</span>\n<span class=\"c1\">--               (Mathlib.Tactic.Abel.term_neg 1 (f (a * ↑c)) 0 (-1) 0 (Eq.refl (-1)) neg_zero))</span>\n<span class=\"c1\">--             (Mathlib.Tactic.Abel.const_add_termg (Mathlib.Tactic.Abel.termg 1 (f a * ↑c) 0) (-1) (f (a * ↑c)) 0</span>\n<span class=\"c1\">--               (Mathlib.Tactic.Abel.termg 1 (f a * ↑c) 0) (add_zero (Mathlib.Tactic.Abel.termg 1 (f a * ↑c) 0)))))</span>\n<span class=\"c1\">--         (sorry)</span>\n<span class=\"c1\">--         (sorry))))</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">Int.cast</span> <span class=\"n\">α</span> <span class=\"n\">Ring.toIntCast</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span> <span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">y</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.cast_succ</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.cast_sub</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hy</span><span class=\"o\">]</span>\n  <span class=\"n\">abel</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>I need to go now. I took the other route and tried to see which part of the term it was generating was causing the problem. Maybe the above helps? I need to go and make dinner for 4 now though, so I'll be gone a while.</p>",
        "id": 319853932,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673035448
    },
    {
        "content": "<p>Last few things: when <code>abel</code> fails the goal becomes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>so some <code>simp</code> lemma might have kicked in or not kicked in? And even better, <code>abel</code> suggests <code>abel_nf</code>, which closes the goal ;-)</p>",
        "id": 319854310,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673035579
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Abel</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- theorem uncommenting_me_breaks_foo (x : α) :</span>\n<span class=\"c1\">--   -x = (-1 : ℤ) • (x) + (0 : α) := sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">Int.cast</span> <span class=\"n\">α</span> <span class=\"n\">Ring.toIntCast</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span> <span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">y</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.cast_succ</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.cast_sub</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hy</span><span class=\"o\">]</span>\n  <span class=\"n\">abel</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 319868720,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673041644
    },
    {
        "content": "<p>So <code>abel</code> seems to be using the theorem <code>uncommenting_me_breaks_foo</code>. It turns the goal</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>into the goal</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>if <code>uncommenting_me_breaks_foo : -x = (-1 : ℤ) • (x) + (0 : α)</code> is declared, and then it gets lost. It would be interesting to check which tags <code>uncommenting_me_breaks_foo</code> has, I'm assuming none, but you never can tell with Lean 4. I think that now someone who knows something about <code>linarith</code> has to take over.</p>",
        "id": 319869420,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673042005
    },
    {
        "content": "<p>what does this have to do with <code>linarith</code>?</p>",
        "id": 319870039,
        "sender_full_name": "David Renshaw",
        "timestamp": 1673042254
    },
    {
        "content": "<p>Probably a typo for <code>abel</code>?  <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 319870193,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673042314
    },
    {
        "content": "<p><code>abel</code>, unlike <code>ring</code>, does not use a list of atoms as state to deduplicate defeq terms, it uses <code>Expr.quickLt</code> which compares the hashes of the expressions. In particular, this makes it sensitive to changes in FVarId naming, which makes atom ordering nondeterministic. So this explains why a change in an unrelated <code>example</code> can cause the tactic to behave differently.</p>",
        "id": 319881310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673047919
    },
    {
        "content": "<p>What it doesn't explain is why it doesn't always find the proof, because even if atom ordering is nondeterministic it should still be consistent over a given run</p>",
        "id": 319881404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673047968
    },
    {
        "content": "<p>Here's the trace from the working invocation (edited for clarity):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">abel</span><span class=\"o\">]</span> <span class=\"n\">running</span> <span class=\"n\">on</span> <span class=\"n\">an</span> <span class=\"n\">equality</span> <span class=\"bp\">`</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">`.</span>\n\n<span class=\"o\">[</span><span class=\"n\">abel</span><span class=\"o\">]</span> <span class=\"n\">found</span> <span class=\"n\">a</span> <span class=\"n\">proof</span> <span class=\"n\">that</span> <span class=\"bp\">`</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">Mathlib.Tactic.Abel.termg</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">Mathlib.Tactic.Abel.termg</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Mathlib.Tactic.Abel.termg</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">))</span><span class=\"bp\">`</span>\n\n<span class=\"o\">[</span><span class=\"n\">abel</span><span class=\"o\">]</span> <span class=\"n\">found</span> <span class=\"n\">a</span> <span class=\"n\">proof</span> <span class=\"n\">that</span> <span class=\"bp\">`</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">Mathlib.Tactic.Abel.termg</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">Mathlib.Tactic.Abel.termg</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Mathlib.Tactic.Abel.termg</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">))</span><span class=\"bp\">`</span>\n\n<span class=\"o\">[</span><span class=\"n\">abel</span><span class=\"o\">]</span> <span class=\"n\">verified</span> <span class=\"n\">that</span> <span class=\"n\">the</span> <span class=\"n\">simplified</span> <span class=\"n\">forms</span> <span class=\"n\">are</span> <span class=\"n\">identical</span>\n</code></pre></div>\n<p>and the trace from the failing version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">abel</span><span class=\"o\">]</span> <span class=\"n\">running</span> <span class=\"n\">on</span> <span class=\"n\">an</span> <span class=\"n\">equality</span> <span class=\"bp\">`</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">`.</span>\n\n<span class=\"o\">[</span><span class=\"n\">abel</span><span class=\"o\">]</span> <span class=\"n\">found</span> <span class=\"n\">a</span> <span class=\"n\">proof</span> <span class=\"n\">that</span> <span class=\"bp\">`</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">Mathlib.Tactic.Abel.termg</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">Mathlib.Tactic.Abel.termg</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Mathlib.Tactic.Abel.termg</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">))</span><span class=\"bp\">`</span>\n\n<span class=\"o\">[</span><span class=\"n\">abel</span><span class=\"o\">]</span> <span class=\"n\">found</span> <span class=\"n\">a</span> <span class=\"n\">proof</span> <span class=\"n\">that</span> <span class=\"bp\">`</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">Mathlib.Tactic.Abel.termg</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">Mathlib.Tactic.Abel.termg</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Mathlib.Tactic.Abel.termg</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"mi\">0</span><span class=\"o\">))</span><span class=\"bp\">`</span>\n</code></pre></div>\n<p>As you can see, the atom ordering is different in the two cases, but the weird part is that the atom ordering is different even just for the two sides of the second equation.</p>",
        "id": 319881566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673048069
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1394\">mathlib4#1394</a></p>",
        "id": 319885841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673051086
    },
    {
        "content": "<p>Thank you Mario.</p>",
        "id": 319889163,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673053214
    }
]