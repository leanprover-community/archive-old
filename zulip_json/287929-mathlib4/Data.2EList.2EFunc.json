[
    {
        "content": "<p>I'm giving a go at porting <code>Data.List.Func</code> (not claiming the file), and came upon two things which I'm wondering about:</p>\n<ul>\n<li>mathport translated a <code>mem_cons_iff</code> to <code>mem_cons_iff</code> which doesn't exist anymore, but now <code>mem_cons</code> replaces it. Is that a sign of a missing <code>#align</code> or not at all?</li>\n<li>The signature of <a href=\"https://leanprover-community.github.io/mathlib_docs/data/list/func.html#list.func.eq_get_of_mem\"><code>eq_get_of_mem</code></a> looks wrong to me: I think this random <code>d</code> is meant to be interpreted as the \"default value\", but shouldn't <code>get</code> be called like <code>@get _ \\&lt;d\\&gt;</code> for this to make sense?</li>\n</ul>",
        "id": 315990441,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671096284
    },
    {
        "content": "<p><code>eq_get_of_mem</code> was broken in <a href=\"https://github.com/leanprover-community/mathlib/pull/827/commits/3826b52128110b8fdf7a89c41075bd3d8d797f32\">https://github.com/leanprover-community/mathlib/pull/827/commits/3826b52128110b8fdf7a89c41075bd3d8d797f32</a></p>",
        "id": 315994003,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1671097455
    },
    {
        "content": "<p>The <code>forall d</code> should just be removed</p>",
        "id": 315994081,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1671097483
    },
    {
        "content": "<p>and the align kept? or is changing the function's signature not cause for dropping an align?</p>",
        "id": 315994861,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671097707
    },
    {
        "content": "<p>OK, just sharing my progress <a href=\"https://github.com/bottine/mathlib4/tree/bottine/Data.List.Func.aba57d4d3dae35460225919dcd82fe91355162f9\">here</a> in case someone wants to have a stab at it before I finish my port.</p>",
        "id": 315997835,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671098482
    },
    {
        "content": "<p>Mm, probably <code>#noalign</code> it - I would suggest fixing in mathlib3, but it's literally only used once in the same file</p>",
        "id": 315997872,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1671098489
    },
    {
        "content": "<p>So not worth spending time on, I think</p>",
        "id": 315997968,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1671098516
    },
    {
        "content": "<p>I'm not sure if people would prefer fixing it in the port or leave it with the weird signature and a note in a comment</p>",
        "id": 315998178,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1671098561
    },
    {
        "content": "<p>OK, I've got it typechecking in its entirety, but <code>#lint</code> is unhappy.</p>\n<p>The main cause for errors was that I had to provide instances of <code>Inhabited \\alpha</code> manually when working, say, with <code>AdditiveMonoid \\alpha</code>. What's the cause for that?</p>",
        "id": 316011348,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671102409
    },
    {
        "content": "<p>Mmh, that seemed to be a problem with the mathlib 3 code already:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">get_neg</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">get</span> <span class=\"n\">α</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">⟩</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">neg</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">get</span> <span class=\"n\">α</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">⟩</span> <span class=\"n\">k</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">unfold</span> <span class=\"n\">neg</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">get_map'</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">⟩),</span> <span class=\"n\">apply</span> <span class=\"n\">neg_zero</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>Why doesn't <code>[inhabited α]</code> follow here?</p>",
        "id": 316011767,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671102552
    },
    {
        "content": "<p>PR here: <a href=\"https://github.com/leanprover-community/mathlib4/pull/1048\">https://github.com/leanprover-community/mathlib4/pull/1048</a></p>",
        "id": 316044961,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671112051
    },
    {
        "content": "<p>I was wondering: when porting, are we encouraged to simplify/bikeshed/golf proofs down, or should we stick to being as close to the mathport source as possible?</p>",
        "id": 316045994,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671112332
    },
    {
        "content": "<p>I think it's worth flagging if a proof doesn't work and needs to be expanded, with a porting note. If you just feel like golfing and your new proof is definitely not something which takes 10x as long to compile, then why not go for it. I'm not sure it's _encouraged_ though! What's encouraged is that we get through this job ASAP :-)</p>",
        "id": 316067533,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671117836
    },
    {
        "content": "<p><strong>Rémi Bottinelli|461830</strong> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EList.2EFunc/near/315990441\">said</a>:</p>\n<blockquote>\n<ul>\n<li>mathport translated a <code>mem_cons_iff</code> to <code>mem_cons_iff</code> which doesn't exist anymore, but now <code>mem_cons</code> replaces it. Is that a sign of a missing <code>#align</code> or not at all?</li>\n</ul>\n</blockquote>\n<p>The <code>mem_cons_iff</code> missing align strikes again, this time in <code>Data.List.Permutation</code> :)</p>\n<p>It was previously declared in <code>init</code>: <a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/data/list/lemmas.lean#L100\">https://github.com/leanprover-community/lean/blob/master/library/init/data/list/lemmas.lean#L100</a></p>\n<p>Where should I put an <code>#align</code>?</p>",
        "id": 320410400,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673343882
    },
    {
        "content": "<p><code>Mathlib.Init.Data.List.Lemmas</code></p>",
        "id": 320410469,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673343910
    }
]