[
    {
        "content": "<p>Hi, I am trying to do <a href=\"https://github.com/leanprover-community/mathlib4/issues/306\">https://github.com/leanprover-community/mathlib4/issues/306</a> but I haven't found anything on how to change instance priority. I expect it to be somewhere in this file <a href=\"https://leanprover-community.github.io/mathlib4_docs//////Lean/Meta/Instances.html\">https://leanprover-community.github.io/mathlib4_docs//////Lean/Meta/Instances.html</a> but there is nothing.</p>",
        "id": 292249319,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659785195
    },
    {
        "content": "<p>I think the Lean 4 version should just expand to <code>open Classical</code> (a tactic!).</p>",
        "id": 292249889,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1659786005
    },
    {
        "content": "<p>I first tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">classical_foo</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"kn\">open</span> <span class=\"n\">Classical</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but that complained that <code>open</code> expects <code>in</code>, i.e., <code>open Classical in ..</code>, so I thought that using <code>open</code> is no good</p>",
        "id": 292250084,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659786263
    },
    {
        "content": "<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">classical_foo</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"kn\">open</span> <span class=\"n\">Classical</span> <span class=\"k\">in</span> <span class=\"o\">{})</span>\n</code></pre></div>\n<p>does obviously nothing</p>",
        "id": 292250187,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659786405
    },
    {
        "content": "<p>I don't even get it to work if I cheat with the syntax:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"classical_foo \"</span> <span class=\"n\">tactic</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">classical_foo</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">tactic</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"kn\">open</span> <span class=\"n\">Classical</span> <span class=\"k\">in</span> <span class=\"o\">{</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">tactic</span> <span class=\"o\">})</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">classical_foo</span> <span class=\"o\">(</span><span class=\"n\">exact</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>this runs into the error <code>unknown namespace 'Classical._@.test.Classical._hyg.193'</code>.</p>",
        "id": 292251992,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659788996
    },
    {
        "content": "<p>I guess that the problem is that the macro leaks the namespace, which is forbidden</p>",
        "id": 292252231,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659789133
    },
    {
        "content": "<p>one hack to make <code>open Classical</code> work would be to make the syntax <code>\"classical\" tacticSeq : tactic</code></p>",
        "id": 292256687,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659795201
    },
    {
        "content": "<p>You can use <code>set_option hygienic false in</code> in the declaration of the macro so that the word <code>Classical</code>is not marked up with hygiene info</p>",
        "id": 292256788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659795341
    },
    {
        "content": "<p>thanks, I will try that</p>",
        "id": 292258162,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659796719
    },
    {
        "content": "<p>(after I am finished spamming the mathlib PR queue <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> )</p>",
        "id": 292262198,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659797331
    },
    {
        "content": "<p>Thanks Mario, that got me almost to where I want to end up with, but the syntax is still not quite how it should be. If there is a way to get the tacticSeq of all following tactics I would be happy, but I could not find anything of that kind.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"classical_blubb \"</span> <span class=\"n\">seq</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"kn\">open</span> <span class=\"n\">Classical</span> <span class=\"k\">in</span> <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">seq</span><span class=\"o\">)</span> <span class=\"o\">})</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">classical_blubb</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>but the example by Gabriel was</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">classical_blubb</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 292283534,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659826798
    },
    {
        "content": "<p>I am sorry for bothering everyone with these stupidly simple questions, but I have a really hard time finding things in Lean4/mathlib4.</p>",
        "id": 292283607,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659826859
    },
    {
        "content": "<p>Here you should be able to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">classical_blubb</span> <span class=\"n\">exact</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 292291595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659839277
    },
    {
        "content": "<p>it won't work if you put a semicolon after it</p>",
        "id": 292291663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659839310
    }
]