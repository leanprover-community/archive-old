[
    {
        "content": "<p>I am trying to port <code>data.fin.fin2</code> and came up with the following tactic proof involving an empty type; what would be the term version?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Fin2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span>\n  <span class=\"sd\">/-- `0` as a member of `fin (succ n)` (`fin 0` is empty) -/</span>\n  <span class=\"n\">fz</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Fin2</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span>\n  <span class=\"sd\">/-- `n` as a member of `fin (succ n)` -/</span>\n  <span class=\"n\">fs</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Fin2</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Fin2</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">elim0</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Fin2</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin2</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>In Lean 3 it is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">elim0</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">fin2</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin2</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"n\">i.</span>\n</code></pre></div>",
        "id": 304764866,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1666109121
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">elim0</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Fin2</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin2</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nomatch</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 304766248,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1666109456
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.NoMatch</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">elim0</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Fin2</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin2</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span><span class=\"bp\">.</span>\n</code></pre></div>\n<p>is the equivalent of the lean 3 syntax</p>",
        "id": 304810111,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666116847
    },
    {
        "content": "<p>it acts similar to <code>fun i =&gt; nomatch i</code>, except it will introduce all arguments and look for empty pattern matches on all of them.</p>",
        "id": 304810459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666116975
    },
    {
        "content": "<p>Aha, thank you both. Mathport had correctly produced Mario's version, but it didn't have the import.</p>",
        "id": 304810752,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1666117097
    },
    {
        "content": "<p>So presumably this issue will go away as we move up the hierarchy.</p>",
        "id": 304810806,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1666117123
    },
    {
        "content": "<p>Yes, if mathport ever produces a syntax that doesn't work, try to find the import that makes it work rather than stubbing it out (unless that import is <code>Mathlib.Mathport.Syntax</code> since those syntaxes haven't been implemented yet)</p>",
        "id": 304814802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666117234
    },
    {
        "content": "<p>Mathport cheats by using <code>import Mathlib</code> itself</p>",
        "id": 304814927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666117292
    }
]