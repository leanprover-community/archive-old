[
    {
        "content": "<p>(deleted)</p>",
        "id": 322536508,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1674227457
    },
    {
        "content": "<p>So in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1719\">mathlib4#1719</a> I noticed that <code>ring</code> seems to have become slightly weaker in that it doesn't always automatically apply <code>cast_add</code> and the like. So to fix it I had to rewrite along <code>cast_sub hmn</code>, <code>cast_add</code>, and <code>cast_mul</code> manually. The first one I can see why that is but I don't get why I need to supply the other ones...</p>",
        "id": 322538998,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1674228055
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110789\">@Jakob von Raumer</span> I'm very interested in collecting and reporting such issues in the main \"arithmetic\" tactics, do you have time to make a mwe?</p>",
        "id": 322550695,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674230891
    },
    {
        "content": "<p>Yes, sure</p>",
        "id": 322550827,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1674230937
    },
    {
        "content": "<p>Ah I might have missed a differene in the goals, the deviation is after <code>zify</code></p>",
        "id": 322551993,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1674231246
    },
    {
        "content": "<p>If there's a nat subtraction around, a change that was noted recently is needing to call <code>zify [h]</code> to invoke relevant inequality hypotheses.</p>",
        "id": 322552304,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674231346
    },
    {
        "content": "<p>There are also various other zify bugs:<br>\n<a href=\"#narrow/stream/287929-mathlib4/topic/zify.20bugs.3F\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/zify.20bugs.3F</a></p>",
        "id": 322552416,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674231368
    },
    {
        "content": "<p>That does fix it!</p>",
        "id": 322552704,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1674231451
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110789\">Jakob von Raumer</span> has marked this topic as resolved.</p>",
        "id": 322552718,
        "sender_full_name": "Notification Bot",
        "timestamp": 1674231455
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.E2.9C.94.20cast_sub.20in.20ring/near/322550695\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110789\">Jakob von Raumer</span> I'm very interested in collecting and reporting such issues in the main \"arithmetic\" tactics, do you have time to make a mwe?</p>\n</blockquote>\n<p>While on the topic, I think it would be useful if <code>ring</code> would handle <code>Nat.succ</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n.succ</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ring</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>Which should be a simple case of adding a lemma <code>theorem nat_succ (n : ℕ) : Nat.succ n = n + 1 := rfl</code> to the <code>RingNF</code>-lemmas.</p>",
        "id": 322557134,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1674232680
    },
    {
        "content": "<p>Indeed that one also represents a regression compared to mathlib3, compare</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n.succ</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 322557897,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674232890
    }
]