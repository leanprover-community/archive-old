[
    {
        "content": "<p>I'm trying to understand <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/tauto.lean\"><code>tauto.lean</code></a> in mathlib3 (just as a way to learn how tactic-writing works), and I thought it might be worth asking a couple questions as to what's going on. I think understand what \"should\" be going on for the most part mathematically, but the meaning and usage of some lean operations is throwing me. Figured I'd gather them all here instead of creating a bunch of topics! (Unless that's frowned upon for some reason, in which case I'll make a bunch of topics. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> )</p>",
        "id": 303071854,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1665270639
    },
    {
        "content": "<p>First, what is <code>local_pp_name</code> is meant to do (or where is documentation for this)? The source code doesn't seem to be commented, and I can't find it in the reference manual.</p>",
        "id": 303072006,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1665270770
    },
    {
        "content": "<p>Equivalently, what would the analogue in Lean 4 be? Or would a totally different approach be used? Here, <code>local_pp_name</code> is used like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n<span class=\"k\">do</span> <span class=\"n\">h</span> <span class=\"bp\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">h.local_pp_name</span><span class=\"o\">,</span>\n         <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n         <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n         <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"n\">replace</span> <span class=\"n\">h.local_pp_name</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">iff.to_eq</span> <span class=\"bp\">%%</span><span class=\"n\">h</span><span class=\"o\">)</span>\n         <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">≠</span> <span class=\"n\">_</span><span class=\"o\">)</span>     <span class=\"o\">:=</span> <span class=\"n\">replace</span> <span class=\"n\">h.local_pp_name</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">iff.to_eq</span> <span class=\"bp\">%%</span><span class=\"n\">h</span><span class=\"o\">)</span>\n         <span class=\"bp\">|</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 303072050,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1665270834
    },
    {
        "content": "<p><code>local_pp_name</code> returns the pretty-printing name (the thing users see) for a local constant (now known as an fvar)</p>",
        "id": 303075554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665274127
    },
    {
        "content": "<p>My current guess is <code>h.local_pp_name</code> is equivalent to <code>h.userName</code> where <code>h</code> might be provided by something like <code>for h in ← getLCtx</code>. But it seems a bit unsafe to me to use <code>replace</code> with what I understand to be a user-facing name to replace hypotheses after doing syntax matching. (Though I'm not sure if that is indeed what's happening here.)</p>\n<p>Is there a better pattern for modifying a hypothesis in lean 4, in general?</p>",
        "id": 303075560,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1665274135
    },
    {
        "content": "<p>what does <code>replace</code> do in this code?</p>",
        "id": 303075588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665274168
    },
    {
        "content": "<p>it looks like a local function</p>",
        "id": 303075599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665274177
    },
    {
        "content": "<p>here's how the function starts—it's the first in the file</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">  find all assumptions of the shape `¬ (p ∧ q)` or `¬ (p ∨ q)` and</span>\n<span class=\"sd\">  replace them using de Morgan's law.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">distrib_not</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">hs</span> <span class=\"bp\">←</span> <span class=\"n\">local_context</span><span class=\"o\">,</span>\n   <span class=\"n\">hs.for_each</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">all_goals'</span> <span class=\"bp\">$</span>\n    <span class=\"n\">iterate_at_most'</span> <span class=\"mi\">3</span> <span class=\"bp\">$</span>\n      <span class=\"k\">do</span> <span class=\"n\">h</span> <span class=\"bp\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">h.local_pp_name</span><span class=\"o\">,</span>\n         <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n         <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n         <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"n\">replace</span> <span class=\"n\">h.local_pp_name</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">iff.to_eq</span> <span class=\"bp\">%%</span><span class=\"n\">h</span><span class=\"o\">)</span>\n         <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">≠</span> <span class=\"n\">_</span><span class=\"o\">)</span>     <span class=\"o\">:=</span> <span class=\"n\">replace</span> <span class=\"n\">h.local_pp_name</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">iff.to_eq</span> <span class=\"bp\">%%</span><span class=\"n\">h</span><span class=\"o\">)</span>\n         <span class=\"bp\">|</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 303075674,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1665274224
    },
    {
        "content": "<p>-</p>",
        "id": 303075691,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1665274245
    },
    {
        "content": "<p>I mean, where is the <code>replace</code> function defined?</p>",
        "id": 303075720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665274269
    },
    {
        "content": "<p>it might not mean what you think</p>",
        "id": 303075733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665274285
    },
    {
        "content": "<p>VS Code says it's <code>tactic.replace</code></p>",
        "id": 303075753,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1665274307
    },
    {
        "content": "<p>which is?</p>",
        "id": 303075760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665274315
    },
    {
        "content": "<p>\"replace h p elaborates the pexpr p, clears the existing hypothesis named h from the local context, and adds a new hypothesis named h. The type of this hypothesis is the type of p. Fails if there is nothing named h in the local context.\"</p>",
        "id": 303075802,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1665274323
    },
    {
        "content": "<p>which seems to me like it's finding the local hypothesis by the pretty-printed name</p>",
        "id": 303075818,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1665274352
    },
    {
        "content": "<p>which sounds unsafe</p>",
        "id": 303075821,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1665274355
    },
    {
        "content": "<p>It's true, that is imprecise</p>",
        "id": 303075837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665274373
    },
    {
        "content": "<p>most likely it's written like that to fit the signature of <code>tactic.replace</code> which is defined in core or something</p>",
        "id": 303075856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665274400
    },
    {
        "content": "<p>hmmm</p>",
        "id": 303075864,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1665274427
    },
    {
        "content": "<p>that kind of thing is reasonable for user-facing tactics since the name is coming from something the user wrote anyway</p>",
        "id": 303075869,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665274432
    },
    {
        "content": "<p>I should mention that I'm not really happy with the original lean 3 implementation of tauto, so I'm okay with it getting a rewrite on the way to lean 4 as long as it does basically similar things</p>",
        "id": 303075969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665274514
    },
    {
        "content": "<p>although I realize that's a bit much to ask of someone who doesn't have a lot of experience writing lean tactics</p>",
        "id": 303075991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665274545
    },
    {
        "content": "<p>I see, cool! In general, is there better functionality in Lean 4 for modifying a hypothesis (seeing as we're just iterating over all of them)?</p>",
        "id": 303075995,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1665274551
    },
    {
        "content": "<p>You shouldn't \"modify\" hypotheses for the most part</p>",
        "id": 303076051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665274573
    },
    {
        "content": "<p>instead, you revert them and intro the modified versions</p>",
        "id": 303076059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665274585
    },
    {
        "content": "<p>it is important for lean's internal coherence that an fvar only ever has a single type in a single local context</p>",
        "id": 303076090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665274627
    },
    {
        "content": "<blockquote>\n<p>although I realize that's a bit much to ask of someone who doesn't have a lot of experience writing lean tactics</p>\n</blockquote>\n<p>I mean, I'm willing to try! I just wouldn't want to prevent other people with more experience from potentially making better choices, lol</p>",
        "id": 303076091,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1665274629
    },
    {
        "content": "<p>Well there's always review time :P</p>",
        "id": 303076124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665274682
    },
    {
        "content": "<p>but it's great to hear you want to try it, I'll help however I can</p>",
        "id": 303076188,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665274730
    },
    {
        "content": "<p>ok, that sounds great! :)</p>",
        "id": 303076215,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1665274759
    },
    {
        "content": "<blockquote>\n<p>instead, you revert them and intro the modified versions</p>\n</blockquote>\n<p>hmmm... so would we start with something like <code>for h in &lt;- getLCtx</code> at all, as I initially thought, then? <code>revert</code>ing then <code>intro</code>ing seems to suggest we do a bunch of reversions then inspect the type of the goal, then do a bunch of intros based on that</p>",
        "id": 303076293,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1665274839
    },
    {
        "content": "<p>however, in this case it seems we might only want to revert a hypothesis based on its type in the first place. so maybe the <code>for</code> still works (thinking out loud)</p>",
        "id": 303076319,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1665274882
    },
    {
        "content": "<p>The usual pattern is that you say \"revert h\" and it reverts h and also h' which depended on h, and it gives you an array which you later pass to introN to re-intro them after rewriting</p>",
        "id": 303076380,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665274930
    },
    {
        "content": "<p>ah, ok</p>",
        "id": 303076398,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1665274964
    },
    {
        "content": "<p>Ok, general question: I'm not totally sure what <code>tauto!</code> is meant to do in opposition to <code>tauto</code>; according to the documentation \"The variants <code>tautology!</code> and <code>tauto!</code> use the law of excluded middle\", but <code>tauto</code> seems to use LEM anyway, as <code>example (p : Prop) : p ∨ ¬ p := by tauto</code> works. Is there something I'm missing? (I see that <code>tauto!</code> runs <code>classical</code> first, but I can't quite tell what meaningful effect that has.)</p>",
        "id": 303175084,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1665352826
    },
    {
        "content": "<p>It's kind of broken, don't worry about it. I wrote <code>itauto</code> exactly because <code>tauto</code> wasn't living up to its LEM-free claim. I think you should just implement one version of <code>tauto</code> and use classical logic.</p>",
        "id": 303176780,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665354903
    },
    {
        "content": "<p>Yes, mathlib is designed to be a classical library and the main issue at stake here is porting it to lean 4 so classical assumptions are fine.</p>",
        "id": 303177018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665355203
    },
    {
        "content": "<p>it is easy enough to translate both <code>tauto</code> and <code>tauto!</code> to <code>tauto</code> in mathport, so we can remove the option entirely</p>",
        "id": 303177080,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665355310
    },
    {
        "content": "<p>Ok, sounds good! I'm thinking about how we might improve the functionality <code>tauto</code> in general now...</p>",
        "id": 303178306,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1665356648
    },
    {
        "content": "<p>For example, it seems like currently it applies <code>solve_by_elim</code> at the end to address <code>∃</code> expressions, but doesn't address tautologies within those. e.g. <code>example (p q : Prop) (hq : q) : ∃ (hq : q), p → p := by tauto</code> fails. It seems easy enough to make it recursive—would it be alright to make it succeed here?</p>",
        "id": 303178348,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1665356738
    },
    {
        "content": "<p>yes</p>",
        "id": 303178675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665357165
    },
    {
        "content": "<p>as long as you can do the test cases, it's okay to do more</p>",
        "id": 303178690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665357195
    },
    {
        "content": "<p>great! where are the test cases located, by the way?</p>",
        "id": 303178756,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1665357278
    },
    {
        "content": "<p><code>test/tauto.lean</code> in mathlib</p>",
        "id": 303178768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665357301
    },
    {
        "content": "<p>oop. of course</p>",
        "id": 303178791,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1665357329
    },
    {
        "content": "<p>(I was looking in <code>testing</code> by mistake)</p>",
        "id": 303178795,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1665357338
    },
    {
        "content": "<p>also, thinking of improving the functionality: it seems strange to me that <code>tauto</code> is exclusively a finishing tactic when it produces a bunch of goals. wouldn't it be useful for a user to be able to carry on from that point, and supply the remaining goals after <code>tauto</code> does some work? (or is that named/would that be named something else?)</p>",
        "id": 303179311,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1665357982
    },
    {
        "content": "<p>can you describe the goals that are generated in a clear way, such that the user can predict them?</p>",
        "id": 303179347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665358076
    },
    {
        "content": "<p>hmmm</p>",
        "id": 303179407,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1665358113
    },
    {
        "content": "<p>If you just do a bunch of mumbo jumbo and end up somewhere and hand control back to the user, that's not very robust to tactic changes</p>",
        "id": 303179418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665358126
    },
    {
        "content": "<p>I see, makes sense</p>",
        "id": 303179457,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1665358195
    },
    {
        "content": "<p>The standard is a lot higher on non-\"finishing tactics\" to produce subgoals deterministically</p>",
        "id": 303179459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665358197
    },
    {
        "content": "<p>so most of the really high powered and heuristic based tactics are either finishing tactics by construction or convention</p>",
        "id": 303179512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665358226
    },
    {
        "content": "<p>that's a good convention! (but hmmm...and, it's not necessary for reimplementing <code>tauto</code>, but...I wonder if there exists a sort of canonical \"tautological normalization\" one can perform which reduces a proposition \"as much as possible\" in a certain mathematically-unique way. I kind of doubt that there does, but it'd be neat! After all, some of the goals that <code>tauto</code> produces anyway are pretty intelligible...but that's a generalization for later :) )</p>",
        "id": 303180041,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1665358914
    },
    {
        "content": "<p>One thing that might be useful is rather than setting new subgoals (which may indeed be a bit random), to print some sufficient facts (when <code>tauto</code> fails but does reduce the problem a bit) that the user can <code>have :=</code> into context above, so that <code>tauto</code> will then finish.</p>",
        "id": 303226531,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665394561
    },
    {
        "content": "<p>Okay, finally feeling well enough to start working on <code>tauto</code> again! I'm still working through the existing file to see what it does.</p>",
        "id": 304573335,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1666046641
    },
    {
        "content": "<p>First question: consider the definition of <code>add_symm_proof</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">  If there exists a symmetry lemma that can be applied to the hypothesis `e`,</span>\n<span class=\"sd\">  store it.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">add_symm_proof</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">tauto_state</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">rel</span> <span class=\"o\">:=</span> <span class=\"n\">e.get_app_fn.const_name</span><span class=\"o\">,</span>\n   <span class=\"n\">some</span> <span class=\"n\">symm</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">environment.symm_for</span> <span class=\"n\">env</span> <span class=\"n\">rel</span>\n     <span class=\"bp\">|</span> <span class=\"n\">add_refl</span> <span class=\"n\">r</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n   <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"n\">e'</span> <span class=\"bp\">←</span> <span class=\"n\">mk_meta_var</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">),</span>\n       <span class=\"n\">iff_t</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"bp\">%%</span><span class=\"n\">e'</span><span class=\"o\">),</span>\n       <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">solve_aux</span> <span class=\"n\">iff_t</span>\n         <span class=\"o\">(</span><span class=\"n\">applyc</span> <span class=\"bp\">`</span><span class=\"n\">iff.to_eq</span> <span class=\"bp\">;</span> <span class=\"o\">()</span> <span class=\"bp\">&lt;$</span> <span class=\"n\">split</span> <span class=\"bp\">;</span> <span class=\"n\">applyc</span> <span class=\"n\">symm</span><span class=\"o\">),</span>\n       <span class=\"n\">e'</span> <span class=\"bp\">←</span> <span class=\"n\">instantiate_mvars</span> <span class=\"n\">e'</span><span class=\"o\">,</span>\n       <span class=\"n\">m</span> <span class=\"bp\">←</span> <span class=\"n\">read_ref</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n       <span class=\"n\">write_ref</span> <span class=\"n\">r</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">m.insert</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">e'</span><span class=\"o\">,</span><span class=\"n\">p</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">insert</span> <span class=\"n\">e'</span> <span class=\"n\">none</span><span class=\"o\">,</span>\n       <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">e'</span><span class=\"o\">,</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n   <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">add_refl</span> <span class=\"n\">r</span> <span class=\"n\">e</span>\n</code></pre></div>",
        "id": 304573552,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1666046724
    },
    {
        "content": "<p>What exactly does <code>() &lt;$ split</code> do, for one? I understand what <code>&lt;$</code> does in isolation, and have an idea what <code>split</code> does, but I'm not sure how they're used together in context with <code>()</code> (the inhabitant of <code>unit</code>, as in <code>tactic unit</code>, somehow, maybe?).</p>",
        "id": 304573796,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1666046802
    },
    {
        "content": "<p><code>() &lt;$ tac</code> is an idiom similar to <code>discard tac</code> or <code>_ &lt;- tac</code>, it runs <code>tac</code> and then returns <code>()</code> instead of whatever the tactic was going to return</p>",
        "id": 304576168,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666047716
    },
    {
        "content": "<p>ah, ok, thanks!</p>",
        "id": 304580420,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1666049593
    }
]