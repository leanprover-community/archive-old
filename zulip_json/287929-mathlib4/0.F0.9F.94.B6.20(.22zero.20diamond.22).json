[
    {
        "content": "<p>In his last week here in Amsterdam, Aurélien ran into an exciting diamond in the algebra type classes.</p>\n<p>As you probably know, Lean 4 introduced in the <code>OfNat α n</code> type class with an <code>ofNat : α</code> member.  This type class is used to elaborate the numeral <code>n</code>, if you write <code>0</code> then you get e.g. <code>OfNat.ofNat 0</code>.  This type class only allows us to embed one single specific numeral <code>n</code>.  Typically we want a function <code>Nat → α</code> (cf <code>nat.cast</code> in mathlib3), so we define <code>Numeric α := ∀ n, OfNat α n</code>.</p>\n<p>However currently mathlib4 also contains a <code>Zero</code> type class ported from mathlib3, and e.g. <code>AddMonoid</code> extends <code>Zero</code>.  This means that there are two non-defeq ways to write <code>0</code> in a ring: <code>OfNat.ofNat 0</code> and <code>Zero.zero</code>.  (Since a ring should both have an embedding <code>Nat → R</code> as well as a zero from the monoid).</p>\n<p>I can think of some solutions, but all of them have some downsides.</p>\n<ol>\n<li>Make <code>AddMonoid</code> extend <code>Numeric</code>.  But then there are <code>AddMonoid</code> instances which are isomorphic (as monoids) but not equal (in Lean).</li>\n<li>Adopt the convention that the <code>zero</code> field is always defeq to <code>ofNat 0</code> for concrete instances.  This means that Ring no longer extends AddMonoid, instead we need to write the instance manually.</li>\n<li>Learn to live with the diamond, so far it wasn't outrageously painful in mathlib4.</li>\n</ol>",
        "id": 257669888,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634290178
    },
    {
        "content": "<p>After writing this up, I think option 2 is actually pretty okay.  Any opinions?</p>",
        "id": 257669986,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634290206
    },
    {
        "content": "<p>Why would <code>Ring</code> not be able to extend <code>AddMonoid</code>?</p>",
        "id": 257670158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634290321
    },
    {
        "content": "<p>By \"extend\" I mean <code>extend</code>.  Because then <code>Ring</code> would have two fields: <code>zero</code> and <code>ofNat</code>.  And no guarantee that <code>zero</code> and <code>ofNat 0</code> are defeq.</p>",
        "id": 257670266,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634290379
    },
    {
        "content": "<p>For general rings, this is true, but it could have both fields and an equality proof</p>",
        "id": 257673033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634291887
    },
    {
        "content": "<p>With the equality proof you get a diamond.  That is, you could have <code>R : Type, inst : Ring R ⊢ 0 = 0</code> which is not provable by <code>rfl</code>.</p>",
        "id": 257674329,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634292574
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/72\">https://github.com/leanprover-community/mathlib4/pull/72</a><br>\nThe main downside is that we get a bit of duplication.  That is, the fields of AddGroup, etc., are duplicated in Ring.  But otherwise this works quite nicely, it could replace a few proofs by rfl.</p>",
        "id": 257684796,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634298512
    },
    {
        "content": "<p>Can't <code>Zero</code> be effectively replaced by <code>OfNat _ 0</code>?</p>",
        "id": 257685621,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634298980
    },
    {
        "content": "<p>Unfortunately no.  The reason is that this doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">B</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>Here <code>B</code> will only extend <code>A 1</code> and not <code>A 2</code>.  Now set <code>B := MonoidWithZero</code> and <code>A := OfNat</code>.</p>",
        "id": 257685864,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634299116
    },
    {
        "content": "<p>Sebastian and me had a similar problem in our Lean class (boolean equality of decidable equality of products versus boolean equality of products of types with decidable equality), and we solved it with a further type class equating the two...</p>",
        "id": 258051201,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1634572405
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110789\">@Jakob von Raumer</span> That's the standard approach we take for diamonds, never defining fields in term of each other and always include proofs that they are equal instead.  (The typical example in mathlib is the topology of product spaces: the topology induced by the product metric is not defeq to the product of the topologies induced by the metrics).  However this rule is precisely what we're <em>not</em> doing here.</p>\n<p>The difference is that concrete instances of 0 and 0 are always supposed to be defeq (in contrast to the product example where the two topologies are not defeq).  Therefore we define 0 in terms of 0 instead of adding a proof that 0 = 0.</p>",
        "id": 258070953,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634579639
    }
]