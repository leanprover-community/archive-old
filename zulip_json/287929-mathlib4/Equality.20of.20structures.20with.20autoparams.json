[
    {
        "content": "<p>This is part of porting <code>Order.Basic</code>. Consider:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Function.Injective</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">⦄,</span> <span class=\"n\">f</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a₂</span> <span class=\"bp\">→</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">a₂</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Preorder</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">LT</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Preorder.toLE_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Preorder.toLE</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  fun A B h =&gt; by</span>\n<span class=\"cm\">  cases A</span>\n<span class=\"cm\">  cases B</span>\n<span class=\"cm\">  injection h with h_le</span>\n<span class=\"cm\">  have : A_lt = B_lt := by</span>\n<span class=\"cm\">    funext a b</span>\n<span class=\"cm\">    dsimp [(· ≤ ·)] at A_lt_iff_le_not_le B_lt_iff_le_not_le h_le</span>\n<span class=\"cm\">    simp [A_lt_iff_le_not_le, B_lt_iff_le_not_le, h_le]</span>\n<span class=\"cm\">  congr</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"k\">fun</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"n\">A_lt</span><span class=\"o\">,</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">A_le</span><span class=\"o\">,</span> <span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:=</span> <span class=\"n\">Ah</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"n\">B_lt</span><span class=\"o\">,</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">B_le</span><span class=\"o\">,</span> <span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:=</span> <span class=\"n\">Bh</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">A_lt</span> <span class=\"bp\">=</span> <span class=\"n\">B_lt</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">funext</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n      <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">LT.mk</span> <span class=\"n\">A_lt</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lt</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">LT.mk</span> <span class=\"n\">B_lt</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lt</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n    <span class=\"n\">congr</span>\n    <span class=\"c1\">-- @HEq (autoParam (∀ (a b : α), a &lt; b ↔ a ≤ b ∧ ¬b ≤ a) _auto✝) Ah (autoParam (∀ (a b : α), a &lt; b ↔ a ≤ b ∧ ¬b ≤ a) _auto✝) Bh : Prop</span>\n    <span class=\"c1\">-- how does one solve such a HEq goal? why does it appear here but not in mathlib3</span>\n</code></pre></div>",
        "id": 308446269,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1667845141
    },
    {
        "content": "<p>I've commented out the proof that mathport tries to construct. It doesn't work because it relies on unhygienic names, and I think the behavior of the <code>injection</code> tactic has also changed.</p>",
        "id": 308446414,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1667845188
    },
    {
        "content": "<p>Can you try to minimize this a bit?  From what I can tell any <code>autoParam</code> should trigger the issue.  I wouldn't be surprised if this was an accidental change in <code>congr</code> where in Lean 3 we would unfold <code>auto_param</code> (and then there is no dependent argument anymore that prevents us from applying congr).</p>",
        "id": 308446972,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667845379
    },
    {
        "content": "<p>Ah...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Function.Injective</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">⦄,</span> <span class=\"n\">f</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a₂</span> <span class=\"bp\">→</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">a₂</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Preorder</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">LT</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Preorder.toLE_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Preorder.toLE</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"n\">A_lt</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"o\">},</span> <span class=\"o\">{</span> <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"n\">B_lt</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">A_lt</span> <span class=\"bp\">=</span> <span class=\"n\">B_lt</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">funext</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n      <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">LT.mk</span> <span class=\"n\">A_lt</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lt</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">LT.mk</span> <span class=\"n\">B_lt</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lt</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n    <span class=\"n\">cases</span> <span class=\"n\">this</span>\n    <span class=\"n\">congr</span>\n</code></pre></div>",
        "id": 308447004,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1667845391
    },
    {
        "content": "<p>that proves it</p>",
        "id": 308447035,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1667845404
    },
    {
        "content": "<p>Not sure if this example is what you were hoping for:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">proof</span> <span class=\"o\">:</span> <span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">congr</span> <span class=\"c1\">-- no change, is that expected?</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">A</span>\n  <span class=\"n\">cases</span> <span class=\"n\">B</span>\n  <span class=\"n\">congr</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 308447653,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1667845626
    },
    {
        "content": "<p>Maybe this is what you meant?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">val2</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">val</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"n\">proof</span> <span class=\"o\">:</span> <span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">congr</span> <span class=\"c1\">-- no change, is that expected?</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">A</span>\n  <span class=\"n\">cases</span> <span class=\"n\">B</span>\n  <span class=\"n\">congr</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- no idea how to proceed</span>\n</code></pre></div>",
        "id": 308448370,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1667845854
    },
    {
        "content": "<p>Your first example works for me (I don't see any autoParam goals).  The second example can't work (because <code>A = B</code> is not true in general).</p>",
        "id": 308448783,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667845984
    },
    {
        "content": "<p>Ah right.</p>",
        "id": 308449031,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1667846064
    },
    {
        "content": "<p>So you want an example that specifically brings up an <code>HEq (autoParam _) (autoParam _)</code>?</p>",
        "id": 308449109,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1667846097
    },
    {
        "content": "<p>That would be great!</p>",
        "id": 308449764,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667846304
    },
    {
        "content": "<p>I'm having some trouble finding a good example that doesn't fall into just an <code>Eq</code> goal</p>",
        "id": 308451265,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1667846816
    },
    {
        "content": "<p>This is as minimal as I could get it</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Preorder</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">LT</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">le</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">lt</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">le</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">le</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Preorder.toLE_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Preorder</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A.le</span> <span class=\"bp\">=</span> <span class=\"n\">B.le</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"n\">A_lt</span><span class=\"o\">,</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">A_le</span><span class=\"o\">,</span> <span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:=</span> <span class=\"n\">Ah</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"n\">B_lt</span><span class=\"o\">,</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">B_le</span><span class=\"o\">,</span> <span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:=</span> <span class=\"n\">Bh</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">A_lt</span> <span class=\"bp\">=</span> <span class=\"n\">B_lt</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">funext</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n      <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">LT.mk</span> <span class=\"n\">A_lt</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lt</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">LT.mk</span> <span class=\"n\">B_lt</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lt</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n    <span class=\"n\">congr</span>\n</code></pre></div>",
        "id": 308453874,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1667847710
    },
    {
        "content": "<p>Simplified a bit and filed as <a href=\"https://github.com/leanprover-community/mathlib/pull/1808\">#1808</a>.</p>",
        "id": 308455380,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667848231
    },
    {
        "content": "<p>Thanks, it gets worse for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">LinearOrder.toPartialOrder_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">Function.Injective</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">LinearOrder.toPartialOrder</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>because of the necessity to match up <code>min</code> and <code>max</code></p>",
        "id": 308455671,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1667848360
    }
]