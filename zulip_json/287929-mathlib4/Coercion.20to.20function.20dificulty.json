[
    {
        "content": "<p>There seems to be a difficulty with coercions to functions not triggering in the port of <a href=\"https://github.com/leanprover-community/mathlib4/pull/804\"><code>Order.Hom.Basic</code></a> . For example on line 177 it is neessary to write <code>theorem map_lt_map_iff (f : F) {a b : α} : (f : α → β) a &lt; (f : α → β) b ↔ a &lt; b</code> instead of <code>theorem map_lt_map_iff (f : F) {a b : α} : f a &lt;  f b ↔ a &lt; b</code>. It is a major pain to have to write these types explicitly to get the coercions to trigger.</p>",
        "id": 313984809,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1670250048
    },
    {
        "content": "<p>This was the fix:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">-instance [LE α] [LE β] [OrderIsoClass F α β] : CoeTC F (α ≃o β) :=</span><span class=\"w\"></span>\n<span class=\"gi\">+instance {_ : LE α} {_ : LE β} [OrderIsoClass F α β] : CoeTC F (α ≃o β) :=</span><span class=\"w\"></span>\n<span class=\"w\"> </span>  ⟨fun f =&gt; ⟨f, map_le_map_iff f⟩⟩<span class=\"w\"></span>\n</code></pre></div>",
        "id": 314099568,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1670265488
    },
    {
        "content": "<p>I should probably port/redo the typeclass linters for mathlib4 now!</p>",
        "id": 314099714,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1670265538
    },
    {
        "content": "<p>(<code>#lint</code> also flags a lot of issues in the file btw)</p>",
        "id": 314099779,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1670265556
    },
    {
        "content": "<p>But will this instance trigger if the order on some random type alpha is in the type class inference system? I have never properly understood this implicit typeclass trick.</p>",
        "id": 314111993,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670269670
    },
    {
        "content": "<p>Yes, the difference here is that <code>[LE α]</code> means \"search for the type class by going through the registered instances\", while <code>{_ : LE α}</code> means \"hope that it will get filled in via unification\".</p>",
        "id": 314113970,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1670270366
    },
    {
        "content": "<p>In this case, it will get filled in via unification because the <code>LE α</code> argument appears in <code>OrderIsoClass F α β</code>.</p>",
        "id": 314114069,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1670270399
    },
    {
        "content": "<p>There were still a few problems porting <code>Order.Antisymmetrization</code>. The coercions to function did not trigger on <code>OrderIso.dualAntisymmetrization _</code> so I had to change the underscore to an <code>α</code> to get the coercion to work.</p>",
        "id": 314258046,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1670339732
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Coercion.20to.20function.20dificulty/near/314113970\">said</a>:</p>\n<blockquote>\n<p>Yes, the difference here is that <code>[LE α]</code> means \"search for the type class by going through the registered instances\", while <code>{_ : LE α}</code> means \"hope that it will get filled in via unification\".</p>\n</blockquote>\n<p>There are some other instances in <code>Order.Hom.Bounded</code> where instead of <code>LE α</code> you have <code>PartialOrder  α</code> so this trick does not work because only <code>LE  α</code> can be inferred via unification and not <code>PartialOrder α</code></p>",
        "id": 314312819,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1670355928
    },
    {
        "content": "<blockquote>\n<p>because only LE  α can be inferred via unification and not PartialOrder α</p>\n</blockquote>\n<p>This should still work (unification calls type-class synthesis in this case).  Can you post examples / link to the branch?</p>",
        "id": 314313486,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1670356205
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/888\">Here</a> is the PR</p>",
        "id": 314314221,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1670356471
    },
    {
        "content": "<p>Pushed a fix to the branch:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"w\"> </span>instance (α : Type _) [LE α] : LE αᵒᵈ :=<span class=\"w\"></span>\n<span class=\"gd\">-  ⟨fun x y : α ↦ y ≤ x⟩</span><span class=\"w\"></span>\n<span class=\"gi\">+  ⟨fun a b =&gt; @LE.le α _ b a⟩</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The previous version of the LE instance unfolded <code>@LE.le αᵒᵈ _</code> into <code>fun (a : α) =&gt; ...</code>, and then Lean failed to unify <code>α</code> and <code>αᵒᵈ</code> (with reducible transparency).</p>",
        "id": 314347896,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1670369765
    },
    {
        "content": "<p>The thing that jumps out as wrong with your snippet is that it doesn't mention <code>of_dual</code>.</p>",
        "id": 314400149,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670401401
    },
    {
        "content": "<p>Yael, <a href=\"https://github.com/leanprover-community/mathlib/blob/5b8284148e8149728f4b90624888d98c36284454/src/order/basic.lean\">Lean3</a> does the same questionable thing as <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Order/Basic.lean#L525-L526\">Lean4</a> there</p>",
        "id": 314447854,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670417424
    },
    {
        "content": "<p>Yes, my point is that it seems that the questionable thing is acceptable in Lean 3 but not in Lean 4. So the correct thing to do is to remove the questionable thing, rather than replacing it by another one.</p>",
        "id": 314454467,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670419432
    },
    {
        "content": "<p>But I would like to know whether this is a wide-spread problem with type synonyms or a sporadic one.</p>",
        "id": 314454597,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670419467
    },
    {
        "content": "<p>I think it happens here because of some challenges straightening out the import heirarchy</p>",
        "id": 314457104,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670420181
    },
    {
        "content": "<p>Namely because we decided to make the type-cast functions bundled, and the bundling wasn't available early enough</p>",
        "id": 314457143,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670420195
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110044\">Chris Hughes</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Coercion.20to.20function.20dificulty/near/314314221\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/888\">Here</a> is the PR</p>\n</blockquote>\n<p>The issue is not fixed. I just merged master and the problem is still there</p>",
        "id": 314478270,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1670425772
    },
    {
        "content": "<p>Is there a new issue?  <code>Mathlib.Order.Antisymmetrization</code> compiles in the branch, and has <code>dualAntisymmetrization _</code> (without the explicit <code>α</code>).</p>",
        "id": 314532187,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1670438209
    },
    {
        "content": "<p>The problem is in <code>Order.Hom.Bounded</code>. Line 125 if I remember correctly, but I can't check easily right now</p>",
        "id": 314534901,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1670439050
    },
    {
        "content": "<p><code>#lint</code> flags a lot of issues that I think are relevant to the issue in that file.</p>",
        "id": 314538736,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1670440202
    },
    {
        "content": "<p>The problem is that I cannot write the <code>TopHomClass</code> instance on line 102 in a way that satisfies the linter. The argument <code>PartialOrder β</code> cannot be inferred by unification or Type class inference.</p>",
        "id": 314675336,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1670505965
    },
    {
        "content": "<p>Here's a minimized version of this issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">BoundedOrder</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">FunLike</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"n\">where</span> <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"n\">F</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"n\">where</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">FunLike.toFun</span>\n<span class=\"kd\">class</span> <span class=\"n\">LEHomClass</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n<span class=\"kd\">class</span> <span class=\"n\">BoundedOrderHomClass</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BoundedOrder</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BoundedOrder</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">LEHomClass</span> <span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">instanceParam</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">OrderEquivClass₁</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"n\">where</span> <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">OrderEquivClass₁.toBoundedOrderHomClass</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"c1\">-- Implicit, because they depend on outParams and can be found through unification with the `OrderEquivClass` instance</span>\n    <span class=\"o\">[</span><span class=\"n\">BoundedOrder</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BoundedOrder</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"c1\">-- Can't be implicit, because they can't be find through unification.</span>\n    <span class=\"o\">[</span><span class=\"n\">OrderEquivClass₁</span> <span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">BoundedOrderHomClass</span> <span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">toFun</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BoundedOrder</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BoundedOrder</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OrderEquivClass₁</span> <span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- Error: function expected at `f`</span>\n<span class=\"c1\">-- Relevant part of the trace:</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">[Meta.synthInstance] ❌ CoeFun F ?γ ▼</span>\n<span class=\"cm\">  [] new goal CoeFun F _tc.0 ▶</span>\n<span class=\"cm\">  [] ✅ apply @instCoeFunForAll to CoeFun F fun x =&gt; ?m.689 → ?m.690 ▶</span>\n<span class=\"cm\">  [] ✅ apply @LEHomClass.toFunLike to FunLike F ?m.707 ?m.708 ▶</span>\n<span class=\"cm\">  [] ✅ apply @BoundedOrderHomClass.toLEHomClass to LEHomClass F ?m.722 ?m.723 ▶</span>\n<span class=\"cm\">  [] ✅ apply OrderEquivClass₁.toBoundedOrderHomClass to BoundedOrderHomClass F ?m.745 ?m.746 ▼</span>\n<span class=\"cm\">    [tryResolve] ✅ BoundedOrderHomClass F ?m.745 ?m.746 ≟ BoundedOrderHomClass F ?m.745 ?m.746</span>\n<span class=\"cm\">    [] no instances for BoundedOrder _tc.1 ▶</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">instanceParam</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">implicitParam</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">OrderEquivClass₂</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"n\">where</span> <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">OrderEquivClass₂.toBoundedOrderHomClass</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"c1\">-- Implicit, because they depend on outParams and can be found through unification with the `OrderEquivClass` instance</span>\n    <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">BoundedOrder</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">BoundedOrder</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"c1\">-- Can't be instance params, because they depend on outParam</span>\n    <span class=\"o\">[</span><span class=\"n\">OrderEquivClass₂</span> <span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">BoundedOrderHomClass</span> <span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">toFun</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BoundedOrder</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BoundedOrder</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OrderEquivClass₂</span> <span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- Error: function expected at `f`</span>\n<span class=\"c1\">-- Relevant part of the trace:</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">▶ 47:66-47:69: information:</span>\n<span class=\"cm\">[Meta.synthInstance] ❌ CoeFun F ?γ ▼</span>\n<span class=\"cm\">  [] new goal CoeFun F _tc.0 ▶</span>\n<span class=\"cm\">  [] ✅ apply @instCoeFunForAll to CoeFun F fun x =&gt; ?m.1285 → ?m.1286 ▶</span>\n<span class=\"cm\">  [] ✅ apply @LEHomClass.toFunLike to FunLike F ?m.1303 ?m.1304 ▶</span>\n<span class=\"cm\">  [] ✅ apply @BoundedOrderHomClass.toLEHomClass to LEHomClass F ?m.1318 ?m.1319 ▶</span>\n<span class=\"cm\">  [] ✅ apply OrderEquivClass₂.toBoundedOrderHomClass to BoundedOrderHomClass F ?m.1344 ?m.1345 ▶</span>\n<span class=\"cm\">  [] ✅ apply inst✝ to OrderEquivClass₂ F A B ▶</span>\n<span class=\"cm\">  [resume] propagating OrderEquivClass₂ F A B to subgoal OrderEquivClass₂ F A B of BoundedOrderHomClass F A B ▶</span>\n<span class=\"cm\">  [resume] propagating (x_0 : BoundedOrder A) →</span>\n<span class=\"cm\">        (x_1 : BoundedOrder B) → BoundedOrderHomClass F A B to subgoal BoundedOrderHomClass F A B of LEHomClass F A B ▶</span>\n<span class=\"cm\">  [resume] propagating BoundedOrder A → BoundedOrder B → LEHomClass F A B to subgoal LEHomClass F A B of FunLike F A B ▶</span>\n<span class=\"cm\">  [resume] propagating BoundedOrder A → BoundedOrder B → FunLike F A B to subgoal FunLike F A B of CoeFun F fun x =&gt; A → B ▼</span>\n<span class=\"cm\">    [] size: 4</span>\n<span class=\"cm\">    [synthInstance] skip answer containing metavariables instCoeFunForAll</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">implicitParam</span>\n</code></pre></div>",
        "id": 319572599,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1672921078
    },
    {
        "content": "<p>It looks like the instance <code>OrderEquivClass₁.toBoundedOrderHomClass</code> doesn't work because it has instance parameters depending on <code>outParam</code>s, and the instance <code>OrderEquivClass₂.toBoundedOrderHomClass</code> doesn't work because it has implicit parameters that can't be figured out through unification.</p>",
        "id": 319573269,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1672921230
    },
    {
        "content": "<p>(Edit: I went slightly overboard in minimizing, now I'm pretty sure the code is actually supposed to work!)</p>",
        "id": 319574205,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1672921559
    },
    {
        "content": "<p>Update: in <a href=\"https://github.com/leanprover-community/mathlib/pull/888\">#888</a> I managed to work around this issue mostly, by turning all parameters implicit to placate the linter, and adding <code>letI</code> when such an intermediate instance can't be found through unification.</p>",
        "id": 319595602,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1672928438
    },
    {
        "content": "<p>Another way to look at this issue is the linter, since <code>#lint</code> reports both instances in the example are dangerous:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">OrderEquivClass₁.toBoundedOrderHomClass</span> <span class=\"c\">/-</span><span class=\"cm\"> generates subgoals with metavariables: argument 6 inst✝² : BoundedOrder</span>\n<span class=\"cm\">  ?A, argument 7 inst✝¹ : BoundedOrder ?B -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">OrderEquivClass₂.toBoundedOrderHomClass</span> <span class=\"c\">/-</span><span class=\"cm\"> unassigned metavariable in out-param: @BoundedOrderHomClass.{u_1, u_2, u_3} F A B x✝³ x✝² ?x✝ ?x✝¹ -/</span>\n</code></pre></div>\n<p>(The latter error message isn't clear unless you set the option <code>pp.all</code>.)</p>",
        "id": 319600652,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1672929953
    }
]