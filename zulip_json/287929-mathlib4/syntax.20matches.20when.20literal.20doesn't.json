[
    {
        "content": "<p>I'm trying to refactor the way the <code>to_additive</code> syntax is parsed, but while doing that I stumbled upon interesting weird behavior, potentially a bug. I minimized it in the following code. It seems that the pattern <code>(attr| to_additive (attrs := $[$stxs],*)</code> seems to match the syntax <code>to_additive (reorder := 1 2 3)</code>. Is this expected behavior?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.RunCmd</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">toAdditiveOption</span> <span class=\"o\">:=</span>\n  <span class=\"s2\">\"(\"</span> <span class=\"o\">(</span><span class=\"bp\">&amp;</span><span class=\"s2\">\"attrs\"</span> <span class=\"s2\">\":=\"</span> <span class=\"n\">Parser.Term.attrInstance</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">(</span><span class=\"bp\">&amp;</span><span class=\"s2\">\"reorder\"</span> <span class=\"s2\">\":=\"</span> <span class=\"n\">num</span><span class=\"bp\">+</span> <span class=\"o\">)</span> <span class=\"s2\">\")\"</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">to_additive</span><span class=\"o\">)</span> <span class=\"s2\">\"to_additive\"</span> <span class=\"n\">toAdditiveOption</span> <span class=\"o\">:</span> <span class=\"n\">attr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">elabToAdditive</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">CoreM</span> <span class=\"n\">Unit</span>\n  <span class=\"c1\">-- this pattern seems to match both cases</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">attr</span><span class=\"bp\">|</span> <span class=\"n\">to_additive</span> <span class=\"o\">(</span><span class=\"n\">attrs</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">stxs</span><span class=\"o\">],</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"attrs {stxs}\"</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">attr</span><span class=\"bp\">|</span> <span class=\"n\">to_additive</span> <span class=\"o\">(</span><span class=\"n\">reorder</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">reorders</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"reorder {reorders.map (·.raw.isNatLit?.get!)}\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"c1\">-- the same function, but with the patterns in different order. This works as expected (probably because `simp` is not a list of numerals)</span>\n<span class=\"kd\">def</span> <span class=\"n\">elabToAdditive2</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">CoreM</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">attr</span><span class=\"bp\">|</span> <span class=\"n\">to_additive</span> <span class=\"o\">(</span><span class=\"n\">reorder</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">reorders</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"reorder {reorders.map (·.raw.isNatLit?.get!)}\"</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">attr</span><span class=\"bp\">|</span> <span class=\"n\">to_additive</span> <span class=\"o\">(</span><span class=\"n\">attrs</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">stxs</span><span class=\"o\">],</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"attrs {stxs}\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"n\">liftCoreM</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">do</span>\n  <span class=\"n\">elabToAdditive</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">attr</span><span class=\"bp\">|</span> <span class=\"n\">to_additive</span> <span class=\"o\">(</span><span class=\"n\">reorder</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"o\">)))</span> <span class=\"c1\">-- attrs [1, 3] (expected: reorder [1, 2, 3])</span>\n  <span class=\"n\">elabToAdditive2</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">attr</span><span class=\"bp\">|</span> <span class=\"n\">to_additive</span> <span class=\"o\">(</span><span class=\"n\">reorder</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"o\">)))</span> <span class=\"c1\">-- reorder [1, 2, 3] (as expected)</span>\n  <span class=\"n\">elabToAdditive</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">attr</span><span class=\"bp\">|</span> <span class=\"n\">to_additive</span> <span class=\"o\">(</span><span class=\"n\">attrs</span> <span class=\"o\">:=</span> <span class=\"n\">simp</span><span class=\"o\">)))</span> <span class=\"c1\">-- attrs [simp] (as expected)</span>\n  <span class=\"n\">elabToAdditive2</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">attr</span><span class=\"bp\">|</span> <span class=\"n\">to_additive</span> <span class=\"o\">(</span><span class=\"n\">attrs</span> <span class=\"o\">:=</span> <span class=\"n\">simp</span><span class=\"o\">)))</span> <span class=\"c1\">-- attrs [simp] (as expected)</span>\n</code></pre></div>",
        "id": 323011610,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674478224
    },
    {
        "content": "<p>The PR where I use this is <a href=\"https://github.com/leanprover-community/mathlib4/pull/1780\">mathlib4#1780</a></p>",
        "id": 323013901,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674478953
    },
    {
        "content": "<p><code>(...)</code> is not well-behaved with <code>&lt;|&gt;</code>. You should move the two sides to separate <code>syntax :=</code> abbrevs.</p>",
        "id": 323309419,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1674580900
    },
    {
        "content": "<p>Ah, good to know. I can confirm that replacing the syntax with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">toAdditiveAttrsOption</span> <span class=\"o\">:=</span> <span class=\"bp\">&amp;</span><span class=\"s2\">\"attrs\"</span> <span class=\"s2\">\":=\"</span> <span class=\"n\">Parser.Term.attrInstance</span><span class=\"o\">,</span><span class=\"bp\">*</span>\n<span class=\"n\">syntax</span> <span class=\"n\">toAdditiveReorderOption</span> <span class=\"o\">:=</span> <span class=\"bp\">&amp;</span><span class=\"s2\">\"reorder\"</span> <span class=\"s2\">\":=\"</span> <span class=\"n\">num</span><span class=\"bp\">+</span>\n<span class=\"n\">syntax</span> <span class=\"n\">toAdditiveOption</span> <span class=\"o\">:=</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">toAdditiveAttrsOption</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">toAdditiveReorderOption</span> <span class=\"s2\">\")\"</span>\n</code></pre></div>\n<p>gives the expected behavior.</p>",
        "id": 323311222,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674581410
    }
]