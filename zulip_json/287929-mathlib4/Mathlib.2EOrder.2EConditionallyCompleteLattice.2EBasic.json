[
    {
        "content": "<p>In <code>Mathlib.Order.ConditionallyCompleteLattice.Basic</code> there is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">ConditionallyCompleteLinearOrder</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">ConditionallyCompleteLattice</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"s2\">\"./././Mathport/Syntax/Translate/Command.lean:407:11: unsupported: advanced extends in structure\"</span>\n</code></pre></div>\n<p>where the mathlib3 <code>class</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">conditionally_complete_linear_order</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">conditionally_complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">linear_order</span> <span class=\"n\">α</span> <span class=\"kn\">renaming</span> <span class=\"n\">max</span> <span class=\"bp\">→</span> <span class=\"n\">sup</span> <span class=\"n\">min</span> <span class=\"bp\">→</span> <span class=\"n\">inf</span>\n</code></pre></div>\n<p>I guess the issue is with <code>renaming</code>, but I don't know. How are we supposed to write this in Lean4?</p>",
        "id": 317576851,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671805192
    },
    {
        "content": "<p>did we rename the fields in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearOrder?#doc\">docs4#LinearOrder?</a></p>",
        "id": 317583312,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671807085
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearOrder#doc\">docs4#LinearOrder</a></p>",
        "id": 317583373,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1671807107
    },
    {
        "content": "<p>No, we didn't</p>",
        "id": 317583384,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671807113
    },
    {
        "content": "<p>The solution here is to pick one class to extend, and copy across the fields (except sup/max and min/inf) for the other</p>",
        "id": 317583535,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671807149
    },
    {
        "content": "<p>And then add an instance manually that sets <code>min := inf</code> or vice versa</p>",
        "id": 317583654,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671807183
    },
    {
        "content": "<p>There is some renaming infrastructure here, but I don't know ow enough about this to say whether it applies here <br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/ddf4802e9a3a09b881d512b5a9bc7276920da7aa/Mathlib/Tactic/Simps/Basic.lean\">https://github.com/leanprover-community/mathlib4/blob/ddf4802e9a3a09b881d512b5a9bc7276920da7aa/Mathlib/Tactic/Simps/Basic.lean</a></p>",
        "id": 317583969,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1671807276
    },
    {
        "content": "<p>I don't think that's relevant here. The <code>renaming</code> keyword in Lean 3 was a mechanism to automatically do pretty much exactly the manual process I described above</p>",
        "id": 317584953,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671807551
    },
    {
        "content": "<p>Yeah it seems that stuff is just for <code>simps</code></p>",
        "id": 317585051,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1671807583
    },
    {
        "content": "<p>I suppose it would be reasonable to file a feature request against Lean for</p>\n<div class=\"codehilite\" data-code-language=\"lean4\"><pre><span></span><code>structure Foo where\n  x : Nat\n\nstructure Bar where\n  y : Nat\n\nstructure Baz extends Foo, Bar renaming Foo.x Bar.y -&gt; z\n</code></pre></div>\n<p>which would generate code similar to</p>\n<div class=\"codehilite\" data-code-language=\"lean4\"><pre><span></span><code>structure Foo where\n  x : Nat\n\nstructure Bar where\n  y : Nat\n\nstructure Baz where\n  z : Nat\n\ndef Baz.toFoo (self : Baz) : Foo := { x := self.z }\ndef Baz.toBar (self : Baz) : Bar := { y := self.z }\n</code></pre></div>",
        "id": 317585736,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671807755
    },
    {
        "content": "<p>There is still one thing I don't understand. I am writing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">ConditionallyCompleteLinearOrder</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">ConditionallyCompleteLattice</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">le_total</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n  <span class=\"n\">decidable_le</span> <span class=\"o\">:</span> <span class=\"n\">DecidableRel</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">≤</span> <span class=\"bp\">.</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"n\">decidable_eq</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">decidableEq_of_decidableLE</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">decidable_le</span>\n  <span class=\"n\">decidable_lt</span> <span class=\"o\">:</span> <span class=\"n\">DecidableRel</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">.</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">@</span><span class=\"n\">decidableLT_of_decidableLE</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">decidable_le</span>\n</code></pre></div>\n<p>(these are the fields of <code>linear_order</code> that don't mention <code>min/max</code>). Then we want</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ConditionallyCompleteLinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrder</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"o\">‹</span><span class=\"n\">ConditionallyCompleteLinearOrder</span> <span class=\"n\">α</span><span class=\"o\">›</span> <span class=\"k\">with</span>\n  <span class=\"n\">max</span> <span class=\"o\">:=</span> <span class=\"n\">HasSup.sup</span><span class=\"o\">,</span> <span class=\"n\">min</span> <span class=\"o\">:=</span> <span class=\"n\">HasInf.inf</span><span class=\"o\">,</span> <span class=\"n\">min_def</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"n\">max_def</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>I know how to fill the <code>sorry</code>, but I don't understand what happens in mathlib3: there is no sign of the proof, so I think <code>renaming</code> is adding them explicitly to the definition of <code>ConditionallyCompleteLinearOrder</code> even if they're automatic in this particular situation? In this case are they spelled using <code>inf/sup</code>?</p>",
        "id": 317610560,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671815604
    },
    {
        "content": "<p>In mathlib3 the proof is provided with an autoparam</p>",
        "id": 317611276,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671815904
    },
    {
        "content": "<p>either <a href=\"https://leanprover-community.github.io/mathlib_docs/find/conditionally_complete_linear_order/src\">src#conditionally_complete_linear_order</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_order/src\">src#linear_order</a> should contain the answer</p>",
        "id": 317611336,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671815928
    },
    {
        "content": "<p>Yeah, <a href=\"https://github.com/leanprover-community/lean/blob/87f1037e4941054d773387d855fd449c729a35f7/library/init/algebra/order.lean#L206-L209\">here</a></p>",
        "id": 317611461,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671815991
    },
    {
        "content": "<p>The autoparam in Lean4 <a href=\"https://github.com/leanprover-community/mathlib4/blob/0a5db45f3f85b707d54e42f7c7bac93f450dd4bf/Mathlib/Init/Algebra/Order.lean#L231-L234\">is different</a> and evidently less powerful</p>",
        "id": 317611594,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671816044
    },
    {
        "content": "<p>Oh, the actual answer is that in Mathlib3 , the <code>min_def</code> and <code>max_def</code> fields remain there, but restarted with sup/inf</p>",
        "id": 317611710,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671816105
    },
    {
        "content": "<p>Which is usually good enough, because you usually already have a <code>linear_order</code> instance lying around that you can populate them with</p>",
        "id": 317611905,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671816198
    },
    {
        "content": "<p>OK, that's reasonable, since I think it's just a coincidence that here they're automatic.</p>",
        "id": 317611974,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671816228
    },
    {
        "content": "<p>What's the best approach here? Adding them even if they're automatic or prove them in the <code>instance</code>?</p>",
        "id": 317612149,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671816285
    },
    {
        "content": "<p>Prove them in the instance to match mathlib3</p>",
        "id": 317618614,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671818843
    },
    {
        "content": "<p>The downside is that you won't be able to use <code>foo.linearOrder with</code> because the <code>with</code> keyword doesn't know about the renames</p>",
        "id": 317618704,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671818879
    }
]