[
    {
        "content": "<p>Is there a plan for the implementation of signed integers? Is it appropriate to make an analog for <code>Fin n</code> along these lines?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Zfin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Int</span>\n  <span class=\"n\">isLt</span> <span class=\"o\">:</span> <span class=\"n\">val.natAbs</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 264542946,
        "sender_full_name": "Chris B",
        "timestamp": 1639200550
    },
    {
        "content": "<p>Do you mean bounded/unboxed integers? I think it's clear we will eventually need <code>Int8</code> etc., though <code>isLt</code> will have to take the asymmetry of the negative and positive range into consideration.</p>",
        "id": 264548877,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1639209672
    },
    {
        "content": "<p>Oops, I thought this was <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a>... but maybe it's still relevant</p>",
        "id": 264548939,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1639209738
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Signed.20integers/near/264548877\">said</a>:</p>\n<blockquote>\n<p>though <code>isLt</code> will have to take the asymmetry of the negative and positive range into consideration.</p>\n</blockquote>\n<p>Lol that's so stupid. I was referencing a thing about C data types, and apparently there was  <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf\">a version of the C99 standard</a> that had symmetrical signed integers (-127 ~ 127).</p>\n<p>Do you have an implementation in mind? I'm working on something that needs a bounded Z, I'm interested in whether there are arguments for one implementation or another.</p>",
        "id": 264565203,
        "sender_full_name": "Chris B",
        "timestamp": 1639232554
    },
    {
        "content": "<p>It's probably silly for formalization purposes, but thinking about the compiler, the simplest solution would probably be to make <code>Int8</code> a wrapper struct around <code>UInt8</code>.</p>",
        "id": 264565531,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1639233052
    },
    {
        "content": "<p>Ok, I'll try that out.</p>",
        "id": 264566109,
        "sender_full_name": "Chris B",
        "timestamp": 1639233948
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> </p>\n<p>I'm not sure whether this is compatible with the attribute/implementation magic that goes on in the prelude, but if this will save you some typing  I can add some tests and PR this later: <a href=\"https://gist.github.com/ammkrn/79281ae3d3b301c99a84821c18dcb5f1\">https://gist.github.com/ammkrn/79281ae3d3b301c99a84821c18dcb5f1</a></p>",
        "id": 264767183,
        "sender_full_name": "Chris B",
        "timestamp": 1639428162
    },
    {
        "content": "<p>Also what is it about the bitwise and/or stuff and USize operations that doesn't play well with<code>rfl</code>?</p>",
        "id": 264767442,
        "sender_full_name": "Chris B",
        "timestamp": 1639428292
    },
    {
        "content": "<p><code>rfl</code> solves goals by definitional equality, it's rather sensitive to the input:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- does not work</span>\n</code></pre></div>\n<p>and I'd guess these small differences between \"obviously equal\" and \"definitionally equal\" is what's happening with your bitwise operations</p>",
        "id": 264768123,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1639428643
    },
    {
        "content": "<p>For USize I think it's something else. USize.add and UInt8.add are defined in the same way, using addition for Fin, but they produce different behaviors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> OK -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n<span class=\"c\">/-</span><span class=\"cm\"> type mismatch</span>\n<span class=\"cm\">  rfl</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  1 + 0 = 1 + 0 : Prop</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  1 + 0 = 1 : Prop -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 264768890,
        "sender_full_name": "Chris B",
        "timestamp": 1639429063
    },
    {
        "content": "<p>For the bitwise stuff I guess it's because <code>bitwise</code> is partial while shiftLeft and shiftRight are not. I'm still not used to that.</p>",
        "id": 264768967,
        "sender_full_name": "Chris B",
        "timestamp": 1639429099
    },
    {
        "content": "<p>That's because <code>USize.size</code> does not reduce in the kernel.  And <code>1 + 0 = (1 + 0) % USize.size</code> here.</p>",
        "id": 264772684,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639431044
    },
    {
        "content": "<p>Interesting, thanks.</p>",
        "id": 264773934,
        "sender_full_name": "Chris B",
        "timestamp": 1639431749
    }
]