[
    {
        "content": "<p>In Mathlib4 Algebra.Group.Defs we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Auxiliary typeclass for types with an involutive `Neg`. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">HasInvolutiveNeg</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Neg</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">neg_neg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">-</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n\n<span class=\"sd\">/-- Auxiliary typeclass for types with an involutive `Inv`. -/</span>\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">class</span> <span class=\"n\">HasInvolutiveInv</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Inv</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">inv_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>Should those be <code>InvolutiveNeg</code> and <code>InvolutiveInv</code>?</p>",
        "id": 313730088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670098580
    },
    {
        "content": "<p>I suspect yes</p>",
        "id": 313730331,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1670098786
    },
    {
        "content": "<p>Yes, definitely. Just haven't gotten around to changing them yet.</p>",
        "id": 313732227,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1670100099
    },
    {
        "content": "<p>I can just do them now; I'm doing groupy stuff.</p>",
        "id": 313732433,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670100243
    },
    {
        "content": "<p>Looks like <a href=\"https://github.com/leanprover-community/mathlib4/pull/832\">mathlib4#832</a> is attempting the rename as well</p>",
        "id": 313733949,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1670101553
    },
    {
        "content": "<p>oh good catch -- thanks!</p>",
        "id": 313734669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670102166
    },
    {
        "content": "<p>I looked around and also found other uses of <code>Has</code> but didn't go for a more global refactor because for some it is not very clear what the new name should be - e.g. <code>HasQuotient</code> would conflict with <code>Quotient</code>.</p>",
        "id": 313748838,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1670114227
    },
    {
        "content": "<p>I think <code>HasQuotient</code> is okay.</p>",
        "id": 313752601,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670117702
    },
    {
        "content": "<p>It's a slightly stronger sense of 'has' here. :-)</p>",
        "id": 313752614,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670117723
    }
]