[
    {
        "content": "<p>Setting up the branch &amp; PR now :)</p>",
        "id": 320590511,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673409570
    },
    {
        "content": "<p>hm, this is weird -- Lean is having trouble showing these recursions are structural induction. Let me push so someone can take a look.</p>",
        "id": 320596090,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673412031
    },
    {
        "content": "<p>For <code>List.Perm.symm</code> I genuinely have no clue what is wrong. I'm gonna try to write it directly with <code>rec</code> (like it was in mathlib3) but I feel like the compiler should accept that definition</p>",
        "id": 320596409,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673412176
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span> often it helps if you specify exactly which arguments you want to use in the induction step</p>",
        "id": 320596639,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673412278
    },
    {
        "content": "<p>So</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">my_lemma</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>instead of just</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">my_lemma</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 320596703,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673412309
    },
    {
        "content": "<p>Heh, I'm not even using tactic mode! I'll try writing out all arguments for my recursive calls</p>",
        "id": 320596754,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673412338
    }
]