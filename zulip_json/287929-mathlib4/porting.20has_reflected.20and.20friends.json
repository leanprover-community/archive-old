[
    {
        "content": "<p>I'm trying to get started porting, and one of the next files on the list is <code>order.with_bot</code>, which has the following instance fairly high up in the file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">reflected</span> <span class=\"n\">_</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_reflect</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_reflect</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">⊥</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subst</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>How should one go about porting this? Mathport produced the following output:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsafe</span> <span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">reflected</span> <span class=\"n\">_</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_reflect</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_reflect</span> <span class=\"o\">(</span><span class=\"n\">WithBot</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">⊥</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">⊥</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">q</span><span class=\"o\">((</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">WithBot</span> <span class=\"n\">α</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">subst</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 312727665,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669672239
    },
    {
        "content": "<p>Just delete.</p>",
        "id": 312727701,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669672257
    },
    {
        "content": "<p>It's meta code, so to whatever extent it is needed it will be ported outside of the main theory porting effort.</p>",
        "id": 312727745,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669672278
    },
    {
        "content": "<p>Great!</p>",
        "id": 312727782,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669672291
    },
    {
        "content": "<p>I've ported the <code>ToFormat</code> instance as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsafe</span> <span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Std.ToFormat</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Std.ToFormat</span> <span class=\"o\">(</span><span class=\"n\">WithBot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">format</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"⊥\"</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Std.format</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>Should I delete that as well?</p>",
        "id": 312727947,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669672342
    },
    {
        "content": "<p>Is it really \"just delete\" or \"comment out and leave a porting note\"?</p>",
        "id": 312727951,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1669672342
    },
    {
        "content": "<p>I think the main value of leaving a porting note would just be that no one looking at the file later wonders if they were meant to leaving a porting note. :-) I'm not too concerned about stray meta code not being reflected in ported theory files. But if anyone has concerns about this we can easily declare that porting notes should be left, too.</p>",
        "id": 312728862,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669672702
    },
    {
        "content": "<p>my instinct at this point is to leave a porting note when anything diverges from the mathlib3port in pretty much any way other than issues involving the naming convention...</p>",
        "id": 312730635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669673511
    },
    {
        "content": "<p>Yeah, this instance was introduced by a PR of mine specifically dedicated to adding those meta instances. So it would be a shame to silently drop it.</p>",
        "id": 312730871,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1669673611
    },
    {
        "content": "<p>(As it turns out, this file depends on <code>tactic.lift</code>, so I'm going to give up on porting it for now)</p>",
        "id": 312730980,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669673649
    },
    {
        "content": "<p>I don't know much about <code>reflected</code> and <code>has_reflect</code> from mathlib3, but is the intention that <code>Qq</code> will replace all of this stuff in Mathlib4?</p>",
        "id": 312731143,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669673728
    },
    {
        "content": "<p>Yes, as far as I understand there is no direct conversion of <code>reflected</code> and <code>has_reflect</code>, and so dropping them is the right thing to do.</p>",
        "id": 312731943,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669674067
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.ToExpr#doc\">docs4#Lean.ToExpr</a> a pretty literal translation of the two of those classes together</p>",
        "id": 312733807,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669674786
    },
    {
        "content": "<p>If you did want to port it, it would look very similar to <a href=\"https://github.com/leanprover/lean4/blob/cbf7da0f6ef35774407132cf8f5802daf2c9a39b/src/Lean/ToExpr.lean#L74-L79\">the code for the <code>ToExpr</code> instance for <code>option</code></a></p>",
        "id": 312734089,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669674908
    },
    {
        "content": "<p>Isn't this what <code>#noalign</code> is for; to indicate that we deliberately didn't port it? Or do we already not both to align instances?</p>",
        "id": 312734298,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669674986
    }
]