[
    {
        "content": "<p>First, some background. There's been some private discussion on the maintainers list preceding this, but there hasn't yet been a proper public discussion.</p>\n<p>We are hoping to soon get started porting files from mathlib3 to mathlib4. This is going to be a gradual process, assisted by the tool <code>mathport</code>.</p>\n<p>There is a wiki page with some advice on porting, at <a href=\"https://github.com/leanprover-community/mathlib4/wiki\">https://github.com/leanprover-community/mathlib4/wiki</a>.</p>\n<p>There is a page tracking which files have been ported, at <a href=\"https://github.com/leanprover-community/mathlib/wiki/mathlib4-port-status\">https://github.com/leanprover-community/mathlib/wiki/mathlib4-port-status</a></p>\n<p>There is a tool under <code>scripts/port_status.py</code>, which will land in <a href=\"https://github.com/leanprover-community/mathlib/pull/17009\">#17009</a>, which will provide a list of files which are ready for porting now.</p>",
        "id": 304628648,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666080197
    },
    {
        "content": "<p>Now, once files have been successfully ported, PR'd to mathlib4, and merged, we would like the freeze the file back in mathlib3.</p>",
        "id": 304628705,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666080221
    },
    {
        "content": "<p>This does not mean it is completely impossible to change --- but you'll need to make the corresponding PR to mathlib4, so it will be more cumbersome.</p>",
        "id": 304628797,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666080249
    },
    {
        "content": "<p>We need a way to mark files as frozen. The list at <a href=\"https://github.com/leanprover-community/mathlib/wiki/mathlib4-port-status\">https://github.com/leanprover-community/mathlib/wiki/mathlib4-port-status</a> in principle keeps track of this, but it's been suggested there should be a prominent indicator in the files themselves.</p>",
        "id": 304628920,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666080301
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/17039\">#17039</a> is my proposal for how to do this.</p>",
        "id": 304628949,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666080312
    },
    {
        "content": "<p>It adds a block</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">&gt;</span> <span class=\"n\">THIS</span> <span class=\"n\">FILE</span> <span class=\"n\">IS</span> <span class=\"n\">FROZEN</span><span class=\"o\">,</span> <span class=\"n\">AS</span> <span class=\"n\">IT</span> <span class=\"n\">HAS</span> <span class=\"n\">BEEN</span> <span class=\"n\">PORTED</span> <span class=\"n\">TO</span> <span class=\"n\">MATHLIB4</span>\n<span class=\"bp\">&gt;</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">pull</span><span class=\"bp\">/</span><span class=\"mi\">467</span>\n<span class=\"bp\">&gt;</span> <span class=\"n\">No</span> <span class=\"n\">changes</span> <span class=\"n\">accepted</span> <span class=\"n\">without</span> <span class=\"n\">a</span> <span class=\"n\">corresponding</span> <span class=\"n\">PR</span> <span class=\"n\">to</span> <span class=\"n\">mathlib4.</span>\n</code></pre></div>\n<p>at the very top of each frozen file.</p>",
        "id": 304629007,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666080339
    },
    {
        "content": "<p>If we go ahead with this, or something similar, we will also want two additional CI tools:</p>\n<ol>\n<li>something that labels PRs which touch frozen files with a special label, so reviewers can assure that a mathlib4 PR also exists.</li>\n<li>something that notifies us when <a href=\"https://github.com/leanprover-community/mathlib/wiki/mathlib4-port-status\">https://github.com/leanprover-community/mathlib/wiki/mathlib4-port-status</a> is out of sync with the labels inside actual files.</li>\n</ol>",
        "id": 304629239,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666080424
    },
    {
        "content": "<p>Video was super-helpful. Thanks a lot <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> ! </p>\n<p>In some sense the most terrifying part right now was the \"let's figure out which file to port -- oh look there's a gigantic maze with not enough information\". Can someone give some kind of a feeling as to which areas of mathlib are currently \"ready for porting\"? I am keen to get up to speed with this process ASAP because I think it's an excellent way to simultaneously learn about Lean 4 and mathlib4. I would humbly suggest that enabling non-power-users like me to be able to figure out which files need porting in a less painful way would be very helpful, but until that day comes I'm looking for general guidance about where I should start looking. For example is category theory something that we can start on now or are we in no position to do it? What about group theory (group homs, subgroups etc)?</p>\n<p>I should say that I have been waiting for this day for years. Initially I had naively assumed that the entire porting process was going to look like (a much more horrible version of) this (without the computer helping us first) and was rather looking forward to it. October is my horrible month; I am submerged in teaching every year, but it's the 18th so the light is at the end of the tunnel.</p>",
        "id": 304646277,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666087358
    },
    {
        "content": "<p>PS what was going on with (a) the missing import (<code>nonempty_prop</code>) and (b) the missing function (<code>extend_apply'</code>) in the video?</p>",
        "id": 304646618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666087499
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, as soon as bors is finished with <a href=\"https://github.com/leanprover-community/mathlib/pull/17009\">#17009</a>, you can type at the command line</p>\n<blockquote>\n<p>scripts/port_status.py</p>\n</blockquote>",
        "id": 304646751,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666087555
    },
    {
        "content": "<p>This will show you output something like:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code># The following files have all dependencies ported already, and should be ready to port:\n# Earlier items in the list are required in more places in mathlib.\nlogic.basic\ndata.option.defs\ndata.sigma.basic\nalgebra.group.to_additive\nalgebra.abs\ndata.bool.basic\ncontrol.functor\nlean_core.data.vector\ndata.char\nlogic.lemmas\ncategory_theory.concrete_category.bundled\nalgebra.order.floor\ncategory_theory.elementwise\ndata.bracket\ndata.stream.defs\ndata.rbtree.init\ndata.num.basic\ndata.lazy_list\ndata.fin.fin2\ndata.nat.bits\ndata.rbtree.default_lt\nlean_core.data.dlist\ncontrol.ulift\nlean_core.data.buffer\nlean_core.data.buffer.parser\nalgebra.group_power.identities\ndata.json\ncontrol.basic\nalgebra.hierarchy_design\n\n# The following files have their immediate dependencies ported already, and may be ready to port:\ndata.nat.cast.defs\ngroup_theory.eckmann_hilton\n</code></pre></div>",
        "id": 304646916,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666087616
    },
    {
        "content": "<p>We may want to have a thread where at regular intervals someone can post an annotated copy of this list.</p>",
        "id": 304647029,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666087670
    },
    {
        "content": "<p>I would <em>love</em> to have the output of <code>port_status.py</code> merged with the graph drawing super powers of <code>leanproject import-graph</code>, so we can have pretty progress charts to motivate us. :-)</p>",
        "id": 304647205,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666087759
    },
    {
        "content": "<p>I remember once a long time ago porting a bunch of logic.basic just for fun. Is there a way of \"claiming\" a file so that others know it's being worked on?</p>",
        "id": 304647225,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666087768
    },
    {
        "content": "<p>I don't care about the graphs, I think the text list is fine. The graphs are I'm sure helpful if your goal is \"port file X\" but my goal is \"learn Lean 4 and port all the files\"</p>",
        "id": 304647394,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666087834
    },
    {
        "content": "<p>I think the process to claim a file is to create a \"porting coordination\" thread in this stream, post a copy of that list, and say that you're working on it. :-)</p>",
        "id": 304647735,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666088007
    },
    {
        "content": "<p>That list is sorted, and the number of uses of each file drops off pretty precipitously as you go down the list. I wasn't sure whether it would be more or less helpful to show this number after each file, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">logic.basic</span> <span class=\"o\">(</span><span class=\"mi\">2563</span><span class=\"o\">)</span>\n<span class=\"n\">data.option.defs</span> <span class=\"o\">(</span><span class=\"mi\">2557</span><span class=\"o\">)</span>\n<span class=\"n\">data.sigma.basic</span> <span class=\"o\">(</span><span class=\"mi\">2515</span><span class=\"o\">)</span>\n<span class=\"n\">algebra.group.to_additive</span> <span class=\"o\">(</span><span class=\"mi\">2433</span><span class=\"o\">)</span>\n<span class=\"n\">algebra.abs</span> <span class=\"o\">(</span><span class=\"mi\">2352</span><span class=\"o\">)</span>\n<span class=\"n\">data.bool.basic</span> <span class=\"o\">(</span><span class=\"mi\">2229</span><span class=\"o\">)</span>\n<span class=\"n\">control.functor</span> <span class=\"o\">(</span><span class=\"mi\">2048</span><span class=\"o\">)</span>\n<span class=\"n\">lean_core.data.vector</span> <span class=\"o\">(</span><span class=\"mi\">2030</span><span class=\"o\">)</span>\n<span class=\"n\">data.char</span> <span class=\"o\">(</span><span class=\"mi\">1768</span><span class=\"o\">)</span>\n<span class=\"n\">logic.lemmas</span> <span class=\"o\">(</span><span class=\"mi\">883</span><span class=\"o\">)</span>\n<span class=\"n\">category_theory.concrete_category.bundled</span> <span class=\"o\">(</span><span class=\"mi\">813</span><span class=\"o\">)</span>\n<span class=\"n\">algebra.order.floor</span> <span class=\"o\">(</span><span class=\"mi\">742</span><span class=\"o\">)</span>\n<span class=\"n\">category_theory.elementwise</span> <span class=\"o\">(</span><span class=\"mi\">564</span><span class=\"o\">)</span>\n<span class=\"n\">data.bracket</span> <span class=\"o\">(</span><span class=\"mi\">147</span><span class=\"o\">)</span>\n<span class=\"n\">data.stream.defs</span> <span class=\"o\">(</span><span class=\"mi\">26</span><span class=\"o\">)</span>\n<span class=\"n\">data.rbtree.init</span> <span class=\"o\">(</span><span class=\"mi\">23</span><span class=\"o\">)</span>\n<span class=\"n\">data.num.basic</span> <span class=\"o\">(</span><span class=\"mi\">21</span><span class=\"o\">)</span>\n<span class=\"n\">data.lazy_list</span> <span class=\"o\">(</span><span class=\"mi\">20</span><span class=\"o\">)</span>\n<span class=\"n\">data.fin.fin2</span> <span class=\"o\">(</span><span class=\"mi\">16</span><span class=\"o\">)</span>\n<span class=\"n\">data.nat.bits</span> <span class=\"o\">(</span><span class=\"mi\">15</span><span class=\"o\">)</span>\n<span class=\"n\">data.rbtree.default_lt</span> <span class=\"o\">(</span><span class=\"mi\">11</span><span class=\"o\">)</span>\n<span class=\"n\">lean_core.data.dlist</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">)</span>\n<span class=\"n\">control.ulift</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span>\n<span class=\"n\">lean_core.data.buffer</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span>\n<span class=\"n\">lean_core.data.buffer.parser</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"n\">algebra.group_power.identities</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">data.json</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"n\">control.basic</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"n\">algebra.hierarchy_design</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 304648623,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666088364
    },
    {
        "content": "<p>Realistically, I think everything there with &gt;100 uses is worth doing immediately, and everything with &lt;=100 is not.</p>",
        "id": 304648853,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666088447
    },
    {
        "content": "<p>I see -- the idea being that once everything with &gt; 100 uses is done, there will be more things which appear on the list with &gt; 100 uses.</p>",
        "id": 304649221,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666088591
    },
    {
        "content": "<p>Whereas when you do something with &lt;100 uses, ipso facto the new things that appear also have &lt;100 uses!</p>",
        "id": 304650673,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666089165
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> So the second part of the output are files that have non-ported indirect imports?</p>",
        "id": 304670136,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666097064
    },
    {
        "content": "<p>Can someone clarify why <code>logic.basic</code> is on the list but there's already a file <code>Logic.Basic</code> in mathlib4/Mathlib?</p>",
        "id": 304673265,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666098249
    },
    {
        "content": "<p>Same question for data.option.defs</p>",
        "id": 304673354,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666098279
    },
    {
        "content": "<p>I tried to start on data.sigma.basic but despite the claim above that all dependencies are ported already, I can find none of the three imports</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Meta.Univs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Lint.Default</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ext</span>\n</code></pre></div>\n<p>in mathlib4. I am not clear about whether just deleting them all and pressing on will ultimately add more confusion or whether it's a worthwhile endeavour. Sorry for all the questions, I'm just getting the feeling for this -- I would ultimately like to get Imperial undergraduates working on this stuff but I need to figure it out myself first.</p>",
        "id": 304674922,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666098783
    },
    {
        "content": "<p>The script looks at which files on this page have been marked as <code>Yes</code>: <a href=\"https://github.com/leanprover-community/mathlib/wiki/mathlib4-port-status\">https://github.com/leanprover-community/mathlib/wiki/mathlib4-port-status</a><br>\n<code>Logic.Basic</code> is not a <code>yes</code>, because it was only a partial port: many things from mathlib3 are still missing.</p>",
        "id": 304767418,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1666109749
    },
    {
        "content": "<p>For <code>tactic</code>/<code>meta</code> imports: I think it is useful to look at the status of which tactics have already been ported in the list <a href=\"https://github.com/leanprover-community/mathlib4/pull/430\">mathlib4#430</a>. <br>\nIf the tactics mentioned in the imports are already ported, you can import the corresponding mathlib4 files (the file name might have changed a bit). If not, you can replace the <code>'No'</code> on <a href=\"https://github.com/leanprover-community/mathlib/wiki/mathlib4-port-status\">https://github.com/leanprover-community/mathlib/wiki/mathlib4-port-status</a> by <code>'Waiting on tactic X'</code> or something.</p>",
        "id": 304768535,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1666110062
    },
    {
        "content": "<p>Thanks -- this is very helpful</p>",
        "id": 304768803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666110159
    },
    {
        "content": "<p>Floris, could you add those explanations to the wiki page?</p>",
        "id": 304769377,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1666110333
    },
    {
        "content": "<p>Good idea. I added it.</p>",
        "id": 304790565,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1666110795
    },
    {
        "content": "<p>I must say I'm a bit worried about the missing tactics/attributes in mathlib4. I think that quite soon we will hit a roadblock where files depend on unported tactics, and the porting either has to wait, or we have to do a lot more manual work.</p>",
        "id": 304791592,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1666111119
    },
    {
        "content": "<p>David Renshaw pointed out in the other thread I opened (I wasn't sure if this thread was a place for porting questions) that both the ext and nolint attributes seem to be working (it had not occurred to me to look for instances of them in mathlib4)</p>",
        "id": 304792057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666111266
    },
    {
        "content": "<p>Note that a chunk of ported <code>Logic.Basic</code> things moved to <code>std4</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/403\">https://github.com/leanprover-community/mathlib4/pull/403</a>. (And yes, there's still a bunch that's totally unported too.)</p>",
        "id": 304792810,
        "sender_full_name": "David Renshaw",
        "timestamp": 1666111479
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/commit/3f3803e26e2894b0469196303b5afb2e300b68b9\">https://github.com/leanprover/std4/commit/3f3803e26e2894b0469196303b5afb2e300b68b9</a></p>",
        "id": 304792814,
        "sender_full_name": "David Renshaw",
        "timestamp": 1666111480
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/proposal.20for.20marking.20files.20as.20frozen/near/304629239\">said</a>:</p>\n<blockquote>\n<p>If we go ahead with this, or something similar, we will also want two additional CI tools:</p>\n<ol>\n<li>something that labels PRs which touch frozen files with a special label, so reviewers can assure that a mathlib4 PR also exists.</li>\n<li>something that notifies us when <a href=\"https://github.com/leanprover-community/mathlib/wiki/mathlib4-port-status\">https://github.com/leanprover-community/mathlib/wiki/mathlib4-port-status</a> is out of sync with the labels inside actual files.</li>\n</ol>\n</blockquote>\n<p>I think there are various race conditions to consider with this proposal, with associated CI implications.</p>\n<ul>\n<li>A PR touching a frozen file might be an old one from before the file was frozen - PRs often take a while to review. So you need to detect that case and mark old PRs (on branches in which the file is not marked as frozen) accordingly. Likewise if a change to the frozen file gets added in the old branch later. Likewise if a new PR is created from a branch predating the freezing.</li>\n<li>Or there might be changes to the file in mathlib3 after the version on which the mathlib4 file was based (mathlib3port currently seems to be 9 days old, if people start with files from there they won't get the most recent mathlib3 changes without adding them manually). Or changes occurring in parallel to the porting process or the process of marking as frozen (including merging in the same bors batch, or approved to merge while the batch merging the freeze is going through CI).</li>\n</ul>\n<p>I think what these race conditions really indicate is that assertions that a file is fully ported need to be <em>versioned</em>. Entries in mathlib4-port-status shouldn't say 'Yes', they should specify a mathlib3 commit such that all the content of the mathlib3 file <em>as of that commit</em> has been confirmed to be fully ported to mathlib4. (mathport might e.g. be made to put comments in the files it generates saying what mathlib3 commit of that file they are up to date with, to help people identify the exact version they have ported.) Once the data about what is ported is explicitly versioned, you no longer need some complicated way for CI to detect and avoid all race conditions (or error-prone manual checks for recent unmerged changes when reviewing a PR to mark a file as frozen), just a much simpler way to list files that were ported based on a version of the mathlib3 file that is no longer the most recent version, and so need more recent changes ported over.</p>\n<p>(There should also be documentation of how to apply the source-level porting to a single changed file or definition, to help people in porting changes to a previously ported file - including helping anyone who wants to do a PR to a frozen file and so would like the automatically generated version of their new or changed definitions or lemmas as a starting point for doing a corresponding mathlib4 PR. In general, my impression is that documentation for users of (Lean 3 + mathlib + leanproject) wanting to start doing things with Lean 4, and so wanting to know both how to convert source code and the Lean 4 equivalents of the things they do with Lean 3 + mathlib + leanproject, is fairly sparse at present.)</p>",
        "id": 304830316,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1666123061
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> <a href=\"#narrow/stream/287929-mathlib4/topic/proposal.20for.20marking.20files.20as.20frozen/near/304792810\">said</a>:</p>\n<blockquote>\n<p>Note that a chunk of ported <code>Logic.Basic</code> things moved to <code>std4</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/403\">https://github.com/leanprover-community/mathlib4/pull/403</a>. (And yes, there's still a bunch that's totally unported too.)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I'm sorry that we ask so much work from you but here I think we really need help to figure out what needs to be ported from this file. We will very quickly hit the time where all porting is blocked on that one. If you have a clear view of what was moved to core or std or is irrelevant, could you create a branch where you simply take the mathport output and remove everything we shouldn't port?</p>",
        "id": 304834071,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1666124528
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I'm confused by the question. The rule is the same as for any port: if stuff already exists upstream, then <code>#align</code> it, otherwise port it. If it exists upstream with the same name then it can be removed (and yes, that will mean that mathlib4's <code>Logic.Basic</code> file will be much smaller than it was).</p>",
        "id": 304840329,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666126956
    },
    {
        "content": "<p>The issue is to determine whether the stuff already exists upstream</p>",
        "id": 304840411,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1666127002
    },
    {
        "content": "<p>I have already done several full passes over Logic.Basic so it should be pretty complete already, but stuff moves on</p>",
        "id": 304840451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666127023
    },
    {
        "content": "<p>I have not made any attempt to freeze mathlib3's logic.basic yet</p>",
        "id": 304840559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666127060
    },
    {
        "content": "<p>Oh. Should we consider it ported then?</p>",
        "id": 304840862,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1666127179
    },
    {
        "content": "<p>I would say it needs another pass to finalize it. You can find most of the theorems by watching for duplicate definition errors, and there are a few more which have been renamed in std4 (<code>Std.Logic</code> is the new home for most of <code>logic.basic</code>)</p>",
        "id": 304840865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666127182
    },
    {
        "content": "<p>the <code>#align</code> directives for these are missing</p>",
        "id": 304840915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666127202
    },
    {
        "content": "<p>Should we start with the output from mathport or the current state of the file in mathlib4 then?</p>",
        "id": 304841214,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1666127342
    },
    {
        "content": "<p>The output from mathport should hopefully be well formed enough to get those duplicate definition errors</p>",
        "id": 304841448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666127415
    },
    {
        "content": "<p>the current mathlib4 file can be used as an \"answer key\" for most of it</p>",
        "id": 304841502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666127437
    },
    {
        "content": "<p>Ok, I'll try to that tomorrow if nobody is faster. Now is bedtime. I really want to work on the port. Like Kevin I'm super excited that we're now instructed to port theories instead of complicated tactics.</p>",
        "id": 304841819,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1666127566
    },
    {
        "content": "<p>I agree the race conditions coming from existing PRs, and from mathlib3port lagging behind current mathlib, are somewhat worrisome.</p>\n<p>I propose we do the following</p>\n<ul>\n<li>make sure (?) it is easy to see in mathlib3port which commit hash was used to generate the files</li>\n<li>PRs to mathlib4 porting files should include this hash in the PR description?</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/wiki/mathlib4-port-status\">https://github.com/leanprover-community/mathlib/wiki/mathlib4-port-status</a> should include some extra information besides 'Yes'.<ul>\n<li>I propose we go with 'Yes mathlib4#nnn mmmmm', where 'nnn' is the pull request number for mathlib4, and 'mmmmm' is the commit hash from mathlib3.</li>\n</ul>\n</li>\n</ul>",
        "id": 304847184,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666130061
    },
    {
        "content": "<p>However this is all extra work and overhead, which I'm not thrilled about. Winging it is another alternative, until we notice things going wrong.</p>",
        "id": 304847238,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666130084
    },
    {
        "content": "<p>Perhaps all these race conditions (which fail by dropping contributions to mathlib3) are features, not bugs: they encourage people to divert their work on mathlib3 into work on mathlib4. :-)</p>",
        "id": 304847311,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666130119
    },
    {
        "content": "<p>Maybe we can start having \"nightlies\" for mathlib: that is, certain designated (tagged?) commits which will be used by mathport CI and carried around</p>",
        "id": 304847767,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666130306
    },
    {
        "content": "<p>the bors pipeline means that we already basically have \"six-hour-lies\"</p>",
        "id": 304847834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666130342
    },
    {
        "content": "<p>Another rather brutal approach would just be to freeze all of mathlib3. I thought that this was the plan at some point? Has this been deemed unworkable?</p>",
        "id": 304848092,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666130444
    },
    {
        "content": "<p>At the rate things are going this would be hugely disruptive</p>",
        "id": 304848145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666130467
    },
    {
        "content": "<p>it's certainly not any time soon</p>",
        "id": 304848199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666130495
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, what if we just tweak mathport to add a comment to all the generated <code>.lean</code> files:<br>\n-- This file was generated from mathlib at commit XXXX<br>\n-- Please remove this comment before making a pull request to mathlib4, but include the commit hash in your PR description.</p>",
        "id": 304848613,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666130660
    },
    {
        "content": "<p>sure, we can do that</p>",
        "id": 304848652,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666130683
    },
    {
        "content": "<p>actually I guess that requires some more complicated CI scripting</p>",
        "id": 304848713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666130707
    },
    {
        "content": "<p>since the mathport executable doesn't actually know that information</p>",
        "id": 304848749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666130725
    },
    {
        "content": "<p>maybe the mathlib3port build script can do that?</p>",
        "id": 304849708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666131176
    },
    {
        "content": "<p>Oh, actually maybe this isn't such a good idea, it will cause a lot of merge conflicts</p>",
        "id": 304849883,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666131248
    },
    {
        "content": "<p>I like the idea of putting the mathlib commit in the mathlib3port commit message though</p>",
        "id": 304849939,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666131278
    },
    {
        "content": "<p>We really just need a way of making the mathlib3 commit sha visible to someone grabbing a file from mathlib3port.</p>",
        "id": 304849988,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666131301
    },
    {
        "content": "<p>I see, so <code>git log</code> in mathlib3port would tell you the latest mathlib3 sha.</p>",
        "id": 304850033,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666131329
    },
    {
        "content": "<p>So it's just the <code>update.sh</code> script in mathlib3port that needs to know which mathlib3 is being used.</p>",
        "id": 304850081,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666131361
    },
    {
        "content": "<p>I guess we could have mathport CI just put an extra file into the release process, that contains exactly that version information.</p>",
        "id": 304850187,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666131392
    },
    {
        "content": "<p>i.e. we would modify</p>\n<ul>\n<li>in mathport <code>.github/workflows/build.yml</code> (and <code>predata.yml</code>), to add an extra file to the release bundle, say <code>version.yaml</code> containing <code>mathlib: XXXX</code> etc</li>\n<li>in mathlib3port <code>update.sh</code>, to grab that file from the release bundle, and include the mathlib version in the commit message</li>\n</ul>",
        "id": 304850407,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666131485
    },
    {
        "content": "<p>(For simplicity perhaps the extra file shouldn't be a yaml, it can just contain the bare sha.)</p>",
        "id": 304850498,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666131537
    },
    {
        "content": "<p>okay, I will try this later today</p>",
        "id": 304850973,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666131769
    },
    {
        "content": "<p>There's going to be a slightly annoying thing here:</p>\n<ul>\n<li>in the port-status wiki file, we update a file to <code>Yes mathlib4#999 1234abcd</code> after the PR to mathlib4 lands.</li>\n<li>we then make a PR back to mathlib3, to label that file as frozen, per this thread</li>\n<li>this lands in commit <code>7890cdef</code> for mathlib3, so now the port-status file is out of date, and potentially we worry that the file has meaningfully changed</li>\n</ul>\n<p>Possible solutions:</p>\n<ul>\n<li>just cope</li>\n<li>when the freezing commit lands, remember to update the port-status wiki file</li>\n<li>have CI do that, by tracking appropriate labels</li>\n</ul>",
        "id": 304851576,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666132079
    },
    {
        "content": "<p>The file very well could have changed in that time. When reviewing the PR back to mathlib3, one of the tasks is to make sure that there are no such changes, and if there are, to open a mathlib4 update PR.</p>",
        "id": 304852332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666132448
    },
    {
        "content": "<p>I've updated the porting script in <a href=\"https://github.com/leanprover-community/mathlib/pull/17056\">#17056</a>, so if the port-status wiki file includes comments after <code>No</code>, it prints those. I've also update the port-status wiki header to state that the statuses MUST start with either 'Yes' or 'No' for now.</p>\n<p>Example output now:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code># The following files have all dependencies ported already, and should be ready to port:\n# Earlier items in the list are required in more places in mathlib.\nlogic.basic\ndata.option.defs\ndata.prod.basic    -- WIP\ndata.sigma.basic\nalgebra.group.to_additive\ndata.bool.basic\ncontrol.functor\nlean_core.data.vector\ndata.char\nlogic.lemmas\ncategory_theory.concrete_category.bundled\nalgebra.order.floor\ncategory_theory.elementwise\ndata.bracket\ndata.stream.defs\ndata.rbtree.init\ndata.num.basic\ndata.lazy_list\ndata.fin.fin2    -- PRd as #478\ndata.nat.bits\ndata.rbtree.default_lt\nlean_core.data.dlist\ncontrol.ulift\nlean_core.data.buffer\nlean_core.data.buffer.parser\nalgebra.group_power.identities    -- Blocked by current status of ring tactic: https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/status.20of.20.60ring.60/near/303965507\ndata.json\ncontrol.basic\nalgebra.hierarchy_design\n\n# The following files have their immediate dependencies ported already, and may be ready to port:\ndata.nat.cast.defs\ngroup_theory.eckmann_hilton\n</code></pre></div>",
        "id": 304855856,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666134614
    },
    {
        "content": "<p>(Perhaps people writing WIP should add their name. :-)</p>",
        "id": 304855888,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666134646
    },
    {
        "content": "<p>The port-status file looks pretty intimidating (in part because it's a yaml file rendered as markdown). Can we make this less user visible, for example by using a bot to update it automatically when a PR lands?</p>",
        "id": 304856015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666134747
    },
    {
        "content": "<p>I agree it's gross. I think this is the current set of transitions:</p>\n<ul>\n<li>When running <code>port_status.py</code>, it dumps a new <code>port_status.yaml</code> in the current directory with new lines for newly added files. These should be periodically included in the wiki.</li>\n<li>People are adding <code>WIP</code> and <code>PRd as</code> and <code>Blocked by...</code> comments</li>\n<li>When a PR is merged into mathlib4, we can change <code>No</code> to <code>Yes mathlib4#XXX</code>, or ideally <code>Yes mathlib4#XXX abcd1234</code> to record the mathlib sha.</li>\n<li>When someone freezes the file in mathlib3, they should update the sha.</li>\n</ul>\n<p>I'd propose we handle things manually for at least a few days, and then ask if someone can write a bot for us to help with CI. (Ask Sarah for help on this at the mathlib porting meeting with her?)</p>",
        "id": 304856685,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666135178
    },
    {
        "content": "<p>I'm not sure the person freezing the file in mathlib3 updating the sha is the best option, because of the risk that they get it wrong (miss that there are intermediate commits that still need porting). Rather, it might be better to have automation that checks if the sha is older than the current revision of the file in mathlib3 - and make that automation able to detect if a commit just does freezing but nothing else, and ignores the commit in that case (so an update isn't needed after a freezing commit but you still get the information when the mathlib4 file is genuinely out of date compared to mathlib3). Alternatively, the automation could update the sha itself in the case where the only mathlib3 commit to the file subsequent to the port to mathlib4 is a freezing-only commit.</p>",
        "id": 304861566,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1666138667
    },
    {
        "content": "<p>I agree that would be ideal, but it adds more requirements for the automation (detecting freeze-only commits).</p>",
        "id": 304867059,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666143196
    },
    {
        "content": "<p>not putting the freeze message in the file itself might help with this</p>",
        "id": 304867494,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666143547
    },
    {
        "content": "<p>it might suffice to have PRs that touch some frozen files get a comment from a bot saying \"this PR touches files X, Y, Z that have already been ported. Please make sure to open a companion PR on mathlib4\"</p>",
        "id": 304867625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666143623
    },
    {
        "content": "<p>It was suggested above that people would like to know that a file is synchronized before they start, and a bot that only touched PRs would be late in the game.</p>",
        "id": 304868472,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666144317
    },
    {
        "content": "<p>I don't think this is a show stopper, though, and I really like the prospect of fewer commits/PRs to make this all happen.</p>",
        "id": 304868529,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666144335
    },
    {
        "content": "<p>I guess we could keep the <code>SYNCHRONIZED</code> messages in individual files, but they would not be the \"source of truth\" (which I guess for now is the port-status page on the wiki).</p>\n<p>One bot could label prs that touch synchronized files.<br>\nPerhaps another bot could at regular intervals add the <code>SYNCHRONIZED</code> messages itself. (i.e. like our bot that updates nolints)</p>",
        "id": 304868680,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666144444
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/proposal.20for.20marking.20files.20as.20frozen/near/304850407\">said</a>:</p>\n<blockquote>\n<p>i.e. we would modify</p>\n<ul>\n<li>in mathport <code>.github/workflows/build.yml</code> (and <code>predata.yml</code>), to add an extra file to the release bundle, say <code>version.yaml</code> containing <code>mathlib: XXXX</code> etc</li>\n<li>in mathlib3port <code>update.sh</code>, to grab that file from the release bundle, and include the mathlib version in the commit message</li>\n</ul>\n</blockquote>\n<p>FYI, we already add a <code>rev</code> file in the predata. <a href=\"https://github.com/leanprover-community/mathport/blob/897d11a96d142d09757acb99461624e7cfc581df/Makefile#L76\">https://github.com/leanprover-community/mathport/blob/897d11a96d142d09757acb99461624e7cfc581df/Makefile#L76</a></p>",
        "id": 304879171,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1666154615
    },
    {
        "content": "<p>Do we need a way to not accidentally freeze files which are still about to change in open mathlib PRs?</p>",
        "id": 304904599,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666168895
    },
    {
        "content": "<p>Freezing files will, I think, have higher priority. Open PRs that have a \"freeze\" event intervene will have to cope.</p>",
        "id": 304904891,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666169027
    },
    {
        "content": "<p>(That's just a suggestion, not me saying how things have to be. :-)</p>",
        "id": 304907483,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666169859
    },
    {
        "content": "<p>Should <code>mathlib3port</code> be bumped more frequently?</p>",
        "id": 304923268,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666175926
    },
    {
        "content": "<p>Does your script ignore <code>Init</code>? <code>RBTree.Init</code> depends on <code>init.data.ordering.basic</code>, which hasn't been ported</p>",
        "id": 304925173,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666176519
    },
    {
        "content": "<p>Or is there something like <code>mathlib3port</code> for old <code>init</code> files?</p>",
        "id": 304931437,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666178846
    },
    {
        "content": "<p>Can someone grant me write access to non-master branches on <code>mathlib4</code>?</p>",
        "id": 304932492,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666179221
    },
    {
        "content": "<p>The instruction page for porting seems to be missing a reminder to put new files in <code>Mathlib.lean</code></p>",
        "id": 304935826,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666180456
    },
    {
        "content": "<p>I added a few comments to the file about blocking tactics and about blocking missing init files</p>",
        "id": 304937689,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666181132
    },
    {
        "content": "<p>Point 8 is now a bit painful, why do we need to track the <code>mathlib</code> commit hash we checked again? Shouldn't it be always on track with the most recent <code>mathlib</code> version?</p>",
        "id": 305052826,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666218834
    },
    {
        "content": "<p>How will we know that it is on track with the most recent <code>mathlib</code> version?</p>",
        "id": 305052978,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666218906
    },
    {
        "content": "<p>We need to keep track, somewhere, of the promise \"mathlib4 reflects all changes to this file up to commit X\".</p>",
        "id": 305053136,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666218975
    },
    {
        "content": "<p>So that if that file has any changes in to post X, we have a way of noticing and not losing those changes.</p>",
        "id": 305053167,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666218993
    },
    {
        "content": "<p>The proposal is that the \"source of truth\" for such promises is in the port status wiki page.</p>",
        "id": 305053196,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666219010
    },
    {
        "content": "<p>If someone makes a PR that touches a file that is synchronized, there will need to be a PR to mathlib4 to make the corresponding changes.</p>",
        "id": 305053249,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666219053
    },
    {
        "content": "<p>Once both PRs have merged we can update the port status wiki page sha for that file.</p>",
        "id": 305053279,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666219069
    },
    {
        "content": "<p>I agree point 8 is super painful for now. So we need some CI assistance.</p>",
        "id": 305053352,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666219090
    },
    {
        "content": "<ul>\n<li>a script that tells us a list of synchronized files but which have fresh changes</li>\n<li>perhaps some automation that updates the port status wiki page --- but I'm not really sure what automation helps here, as it seems all the steps need human verification that something has been done correctly...</li>\n</ul>",
        "id": 305053455,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666219151
    },
    {
        "content": "<p>Right, thanks for the explanation :)</p>",
        "id": 305054239,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666219561
    },
    {
        "content": "<p>I think what could be useful would be a way to automatically PR the freeze comment to mathlib</p>",
        "id": 305054310,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666219598
    },
    {
        "content": "<p>Okay, that's a good point. What should trigger it? A PR being merged to mathlib4 that ...? We need to work out how a bot would parse the PR to decide which files it should mark as synchronized.</p>",
        "id": 305054701,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666219857
    },
    {
        "content": "<p>If someone wants to write such a bot I will happily test it and merge the CI changes. :-)</p>",
        "id": 305054727,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666219878
    },
    {
        "content": "<p>I'll look into it tomorrow.</p>",
        "id": 305055383,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666220266
    },
    {
        "content": "<p>Made a manual PR for the comment for <a href=\"https://github.com/leanprover-community/mathlib4/pull/480\">mathlib4#480</a> at <a href=\"https://github.com/leanprover-community/mathlib/pull/17077\">#17077</a>. Maybe we can fast-track those PRs or add a specific label or switch off some of the CI?</p>",
        "id": 305055525,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666220348
    },
    {
        "content": "<p>(Ah, damn, I just noticed, that your proposal for that message might not be cast in stone as of now)</p>",
        "id": 305055677,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666220442
    },
    {
        "content": "<p>A specific label certainly seems like a good idea.</p>",
        "id": 305056139,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1666220705
    },
    {
        "content": "<p>I think we can just <code>bors merge</code> such PRs without waiting for CI.</p>",
        "id": 305056161,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1666220717
    },
    {
        "content": "<p>I created the <code>mathlib4-synchronization</code> label for these.</p>",
        "id": 305058635,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666222365
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/proposal.20for.20marking.20files.20as.20frozen/near/304904891\">said</a>:</p>\n<blockquote>\n<p>Freezing files will, I think, have higher priority. Open PRs that have a \"freeze\" event intervene will have to cope.</p>\n</blockquote>\n<p>I think this rule adds to the case that we need good Lean 4 migration documentation, so that PR submitters (who may never have used Lean 4 and may not have followed any Lean 4 discussions either so don't know any details of the differences between Lean 3 and Lean 4 or the mathlib conversion process) can be pointed to a guide covering how to do with Lean 4 (+ mathlib4 + lake + any other tools used with Lean 4) what they are used to doing in Lean 3 + mathlib + leanproject, and how to run the automated conversion for the new code in their PR. (Without the freeze of converted files we'd still have needed such migration documentation eventually, but maybe not until the conversion was much more advanced.)</p>\n<p>Regarding another comment, shouldn't permissions to push to non-master branches of mathlib4 be copied from the permissions on mathlib, so people don't need to request such permissions individually? (Note: I don't know whether this has in fact been done.)</p>",
        "id": 305064738,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1666227557
    },
    {
        "content": "<p>Yikes, yes, we have a little over 300 people with write access to the mathlib repository. Do we really want to copy over all those permissions? We'd have to work out how to do it in bulk.</p>",
        "id": 305065373,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666228112
    },
    {
        "content": "<p>Or at least the permissions for those who opened a mathlib PR in the last six months or something like that, but I don't know how much fewer that is (presumably the GitHub API can be used to get a list of such users).</p>",
        "id": 305065466,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1666228207
    },
    {
        "content": "<p>There's an assumption here that mathlib4 CI works (or will work) like mathlib CI, i.e. on branches in the main repository but not so well on forks (and will end up providing downloadable oleans for such branches, even if it doesn't yet, and mathlib4 will end up slow enough to build that having such oleans will be important). I don't know if that's actually the case or not.</p>",
        "id": 305065611,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1666228374
    },
    {
        "content": "<p>Yes, I think that assumption is correct.</p>",
        "id": 305065735,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666228490
    }
]