[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">37</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">37</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"c1\">-- error `expected '(', '_' or identifier`</span>\n</code></pre></div>\n<p>This worked in Lean 3 but to be honest I'm not entirely sure what it meant (in the sense that I can't find an example where foo and bar behave differently). I can't get it to work in Lean 4 with the implicit binders. Is it a thing, and if not then what should I do? This came up when porting <code>logic.relation</code>.</p>",
        "id": 308696408,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667952894
    },
    {
        "content": "<p>I don't think we should do that.</p>",
        "id": 308696675,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667953050
    },
    {
        "content": "<p>So I just use <code>∃ (n : ℕ)</code>?</p>",
        "id": 308696743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667953093
    },
    {
        "content": "<p>And by \"that\" I mean <code>∃ {n : ℕ}</code>.  I'm surprised this even works..</p>",
        "id": 308696746,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667953095
    },
    {
        "content": "<p>It's syntax for <code>Exists (λ {n : ℕ}, _)</code>, but I think that type of binder on lambdas only matters if they're invoked directly</p>",
        "id": 308696792,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667953153
    },
    {
        "content": "<p>It's found in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/relation.refl_trans_gen.cases_tail_iff\">docs#relation.refl_trans_gen.cases_tail_iff</a> , generated automatically by the <code>mk_iff</code> attribute <a href=\"https://github.com/leanprover-community/mathlib/blob/47b51515e69f59bca5cf34ef456e6000fe205a69/src/logic/relation.lean#L189\">here</a>.</p>",
        "id": 308696925,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667953272
    },
    {
        "content": "<p>For an example of <code>{}</code> binders in a lambda:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"c1\">-- 2</span>\n</code></pre></div>",
        "id": 308696946,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667953301
    },
    {
        "content": "<p>I've notice a peculiar phenomenon around <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_simple_order\">docs#is_simple_order</a>, namely that the <code>nontrivial</code> field cannot be directly supplied, for example <a href=\"https://github.com/leanprover-community/mathlib/blob/division_ring_prime_simple_order/src/linear_algebra/finite_dimensional.lean#L1624\">here</a> (<a href=\"https://github.com/leanprover-community/mathlib/blob/d525d847669c5150cb55de8ba8a2ea625e9deaa1/src/linear_algebra/finite_dimensional.lean#L1624\">permalink</a>). I have to do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">nontrivial_of_finrank_eq_succ</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">or_iff_not_imp_left.2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)⟩,</span>\n</code></pre></div>\n<p>where <code>refine ⟨_, λ S, or_iff_not_imp_left.2 (λ hn, _)⟩</code> doesn't work. And if I don't first put the nontrivial instance in the cache and <code>refine</code> (or <code>split</code>) directly, I get an error. This is probably a problem totally unrelated to this topic, but I think it also may cause trouble in porting.</p>",
        "id": 308711889,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1667966429
    },
    {
        "content": "<p>This is intended behavior I think <span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span>; in fact, Mario recently modified the syntax for <code>⟨⟩</code> in rcases to be consistent with this.</p>",
        "id": 308748488,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667986564
    },
    {
        "content": "<p>Oh thanks! I didn't connect <a href=\"https://github.com/leanprover-community/mathlib/pull/16617\">#16617</a> with this behavior. But why does <code>is_simple_order.mk</code> take <code>nontrivial</code> as an instance argument? Note that <code>is_simple_order extends nontrivial</code>. Is this how <code>extends</code> behaves without <code>old_structure_cmd</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">is_simple_order.mk</span>\n<span class=\"c\">/-</span><span class=\"cm\"> is_simple_order.mk :</span>\n<span class=\"cm\">  ∀ {α : Type u_1} [_inst_1 : has_le α] [_inst_2 : bounded_order α] [_to_nontrivial : nontrivial α],</span>\n<span class=\"cm\">    (∀ (a : α), a = ⊥ ∨ a = ⊤) → is_simple_order α -/</span>\n</code></pre></div>\n<p>And <code>refine @⟨_, _, _, _, λ S, or_iff_not_imp_left.2 (λ hn, _)⟩</code> doesn't work because <code>refine</code> doesn't recognize the <code>@</code> syntax at all. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">refine</span> <span class=\"o\">{</span> <span class=\"n\">to_nontrivial</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">eq_bot_or_eq_top</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>works though, but for <code>refine_struct</code> it's slightly different</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">refine_struct</span> <span class=\"o\">{</span> <span class=\"n\">exists_pair_ne</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">eq_bot_or_eq_top</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 308801591,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1668004946
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.E2.88.83.20.7Bn.20.3A.20.E2.84.95.7D/near/308801591\">said</a>:</p>\n<blockquote>\n<p>Is this how <code>extends</code> behaves without <code>old_structure_cmd</code>?</p>\n</blockquote>\n<p>Yes</p>",
        "id": 308801740,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668004988
    },
    {
        "content": "<p>Unforatunately the <code>@⟨...⟩</code> is only legal in <code>rcases</code> and similar right now</p>",
        "id": 308801876,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668005027
    },
    {
        "content": "<p>Actually the behavior may not be changed by <a href=\"https://github.com/leanprover-community/mathlib/pull/16617\">#16617</a> since that PR doesn't have to fix any <code>refine</code>.</p>",
        "id": 308806213,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1668006193
    },
    {
        "content": "<p>this works in lean 4, there are no plans to add it to lean 3 term syntax though</p>",
        "id": 308817804,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668009560
    }
]