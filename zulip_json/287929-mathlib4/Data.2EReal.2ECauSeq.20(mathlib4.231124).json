[
    {
        "content": "<p>It looks like this PR has run into a misport between <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_absolute_value.abv_add\">docs#is_absolute_value.abv_add</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsAbsoluteValue#doc\">docs4#IsAbsoluteValue</a> <code>abv_add</code>; the former takes <code>abv</code> as an explicit argument, but the port takes it as an implicit argument</p>",
        "id": 319453621,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672859058
    },
    {
        "content": "<p>I think this is caused by the <code>[]</code>s in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">is_absolute_value</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">abv_nonneg</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">abv_eq_zero</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">abv_add</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">abv_mul</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>has the Lean4 equivalent of these been discussed elsewhere?</p>",
        "id": 319454752,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672859414
    },
    {
        "content": "<p>people have just been priming and making separate methods</p>",
        "id": 319494942,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1672877297
    },
    {
        "content": "<p>the feature is obviously got a weird syntax in lean3 but removing it in lean4 isn't the way either I don't think</p>",
        "id": 319494972,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1672877322
    },
    {
        "content": "<p>see <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Countable#doc\">docs4#Countable</a></p>",
        "id": 319494977,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1672877327
    },
    {
        "content": "<p>Yeah, I liked this feature, so it's a bit sad to see it gone without replacement.</p>",
        "id": 319537401,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672908559
    },
    {
        "content": "<p>At any rate, it sounds like the interim solution is to add the primed lemmas; or better yet, for mathport to generate them</p>",
        "id": 319538879,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672909195
    },
    {
        "content": "<p>I think this specific <code>[]</code> mode was a feature added in the community lean version (a practice which always seemed a bit dubious to me, with the port on the horizon).</p>",
        "id": 319540694,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672909881
    },
    {
        "content": "<p>I've made a PR to have the function argument explicit: <a href=\"https://github.com/leanprover-community/mathlib4/pull/1398\">mathlib4#1398</a><br>\nI think the <code>[]</code> feature is nice (the syntax is unintuitive IMO), but it seems to be not used a lot in mathlib and I haven't heard of it before porting <code>IsAbsoluteValue</code>. In general it would be nice to have Lean 4 features to remove all of the boilerplate-y <code>foo'</code> fields. For the coercion this should be taken care of by elaboration of coercions (though I am not completely sure of it, since we have the <code>FunLike</code> weirdness).</p>",
        "id": 319897538,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1673060546
    },
    {
        "content": "<p>Sorry for the delay, I needed a few days to recover from the vacation.</p>",
        "id": 319897901,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1673060806
    },
    {
        "content": "<p>In the porting meeting call I suggested that maybe we don't even need a replacement for <code>[]</code>, and better heuristics for argument explicitness (i.e. do the right thing automatically) would suffice.</p>",
        "id": 319898219,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673061123
    },
    {
        "content": "<p>Either way, your PR is definitely the best short -term solution!</p>",
        "id": 319898253,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673061142
    }
]