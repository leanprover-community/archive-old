[
    {
        "content": "<p>I encountered this behavior earlier and found it surprising. This does appear to be the same behavior as what was in mathlib3, but I'm curious whether there's any desire to change it, or if I'm just thinking about this wrong:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- #eval x = 2</span>\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">30</span> <span class=\"bp\">/</span> <span class=\"mi\">15</span>\n  <span class=\"n\">a</span>\n\n<span class=\"c1\">-- #eval y = 0</span>\n<span class=\"kd\">def</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">30</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">15</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- #eval z = 0</span>\n<span class=\"kd\">def</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">30</span> <span class=\"bp\">/</span> <span class=\"mi\">15</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Particularly in <code>y</code>, I was expecting it to elaborate to <code>OfNat ((a : Nat / b : Nat)) : Fin 10</code>, instead of <code>(OfNat a : Fin 10) / (OfNat b : Fin 10)</code>.</p>",
        "id": 267541526,
        "sender_full_name": "Chris B",
        "timestamp": 1641882615
    },
    {
        "content": "<p>This follows the usual rule of outside-in coercion, which means that you usually get <code>↑a / ↑b</code> instead of <code>↑(a / b)</code> when both are a possibility</p>",
        "id": 267545562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641886093
    },
    {
        "content": "<p>Another way to force the <code>x</code> behavior is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">Fin</span> <span class=\"mi\">10</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"mi\">30</span> <span class=\"bp\">/</span> <span class=\"mi\">15</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"c1\">-- 2</span>\n</code></pre></div>",
        "id": 267545647,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641886202
    },
    {
        "content": "<p>Can you elaborate on the outside-in thing? Do you start at the outermost term and see what the inner-most possible way to do the conversion is?</p>",
        "id": 267546431,
        "sender_full_name": "Chris B",
        "timestamp": 1641886849
    },
    {
        "content": "<p>I think it's better described as outside-in elaboration. The expected type is propagated as far as possible, which pushes coercions towards the leaves.</p>",
        "id": 267546830,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1641887189
    },
    {
        "content": "<p>Got it, thanks.</p>",
        "id": 267547133,
        "sender_full_name": "Chris B",
        "timestamp": 1641887440
    }
]