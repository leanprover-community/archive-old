[
    {
        "content": "<p>Since Lean4 prefers <code>return</code> to <code>pure</code>, how should we handle in porting?</p>",
        "id": 310724995,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668729806
    },
    {
        "content": "<p>(Or maybe I don't understand the reference \"we prefer <code>return</code> to <code>pure</code>).</p>",
        "id": 310725207,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668729907
    },
    {
        "content": "<p>Is this in the context of a <code>do</code>?</p>",
        "id": 310725306,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668729959
    },
    {
        "content": "<p>It seems that <code>return</code> just works even without <code>do</code>. I don't know whether the \"preference\" in the reference refers only to <code>do</code> blocks.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"mi\">0</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"mi\">0</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 310726151,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1668730381
    },
    {
        "content": "<p>The actual <code>Monad</code> definition still spells <code>pure</code> as <code>pure</code>....</p>",
        "id": 310726341,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668730463
    },
    {
        "content": "<p>Where is the <code>return</code> vs. <code>pure</code> convention mentioned?</p>",
        "id": 310726762,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1668730687
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/lean4/doc/lean3changes.html#style-changes\">https://leanprover.github.io/lean4/doc/lean3changes.html#style-changes</a></p>",
        "id": 310726844,
        "sender_full_name": "David Renshaw",
        "timestamp": 1668730736
    },
    {
        "content": "<p><code>pure</code> and <code>return</code> are not always interchangeable.</p>",
        "id": 310726902,
        "sender_full_name": "David Renshaw",
        "timestamp": 1668730771
    },
    {
        "content": "<p>I think the manual is just saying that if you can do either <code>return</code> or <code>pure</code>, then you should do <code>return</code>.</p>",
        "id": 310727000,
        "sender_full_name": "David Renshaw",
        "timestamp": 1668730820
    },
    {
        "content": "<p>Here's an example of <code>return</code> jumping out of an inner <code>do</code> block: <a href=\"https://github.com/leanprover-community/mathlib4/blob/56284fa8920a42b4cadf77a94aa7ab167bebbb4f/Mathlib/Tactic/SplitIfs.lean#L55\">https://github.com/leanprover-community/mathlib4/blob/56284fa8920a42b4cadf77a94aa7ab167bebbb4f/Mathlib/Tactic/SplitIfs.lean#L55</a></p>",
        "id": 310727295,
        "sender_full_name": "David Renshaw",
        "timestamp": 1668731011
    },
    {
        "content": "<p>Iâ€™ll create a PR for the manual to clarify.</p>",
        "id": 310727601,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668731170
    },
    {
        "content": "<p>I believe that kind of jumping-out-of-a-do-block is not possible in Haskell.</p>",
        "id": 310727707,
        "sender_full_name": "David Renshaw",
        "timestamp": 1668731252
    },
    {
        "content": "<p>Jumping out of a do block is pretty fun. :-)</p>",
        "id": 310728605,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668731766
    },
    {
        "content": "<p>I don't agree with that convention to prefer <code>return</code> over <code>pure</code> (that's only in the lean 4 core repo I think). Certainly when translating from lean 3 monad code you should always use <code>pure</code></p>",
        "id": 310729381,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668732272
    },
    {
        "content": "<p><code>return</code> can cause issues when you do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;-</span> <span class=\"k\">match</span> <span class=\"n\">foo</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"n\">z</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bar</span> <span class=\"n\">z</span>\n<span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span> <span class=\"n\">bar</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>if you meant the first <code>return</code> to be a <code>pure</code> then you've accidentally skipped the rest of the do block</p>",
        "id": 310729584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668732398
    },
    {
        "content": "<p>obviously this is sometimes useful if that's what you wanted to do, but it makes it more important to use <code>return</code> deliberately and call it out when doing so (it is nicely highlighted as a keyword, so it calls attention to itself more than <code>pure</code>), so using <code>return</code> at the end of a do block weakens the signal here</p>",
        "id": 310729839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668732559
    },
    {
        "content": "<p>one exception to this in my personal style is when using <code>return</code> to <em>start</em> a do block, since <code>return x</code> outside a do block means the same as <code>do pure x</code> (and in particular you can use <code>&lt;- foo</code> inside <code>x</code>, so it is a concise way to write <code>&lt;$&gt;</code> expressions without the sigils).</p>",
        "id": 310729983,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668732640
    },
    {
        "content": "<blockquote>\n<p>I don't agree with that convention to prefer <code>return</code> over <code>pure</code></p>\n</blockquote>\n<p>I think I'm with you on this.</p>",
        "id": 310737970,
        "sender_full_name": "David Renshaw",
        "timestamp": 1668738280
    },
    {
        "content": "<p>At least, the Rust programmer in me wants to avoid using <code>return</code> unless it is strictly needed.</p>",
        "id": 310738017,
        "sender_full_name": "David Renshaw",
        "timestamp": 1668738341
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Porting.20monads/near/310729839\">said</a>:</p>\n<blockquote>\n<p>obviously this is sometimes useful if that's what you wanted to do, but it makes it more important to use <code>return</code> deliberately and call it out when doing so (it is nicely highlighted as a keyword, so it calls attention to itself more than <code>pure</code>), so using <code>return</code> at the end of a do block weakens the signal here</p>\n</blockquote>\n<p>I was also concerned about this, but adopted the Lean 4 convention anyway and it hasn't bitten me so far. The few times where I mistakenly wrote <code>return</code> instead of <code>pure</code>, Lean saved me with an \"unreachable do element\" error. Then again, the only benefit of using <code>return</code> everywhere is that it saves you a <code>$</code> or <code>&lt;|</code>.</p>",
        "id": 310790345,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1668768067
    },
    {
        "content": "<p>note in the example I gave, you won't get that error because it's in a match and the other branches are not early returning</p>",
        "id": 310792450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668768848
    },
    {
        "content": "<p>you still might get a type error if the do block has a different return type than the type of <code>x</code>, but it's fundamentally not something lean can catch since it's a valid thing to want to do</p>",
        "id": 310792608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668768904
    },
    {
        "content": "<p>Yes, of course. I'm just saying it hasn't been an issue empirically (but also no big benefit).</p>",
        "id": 310793282,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1668769162
    }
]