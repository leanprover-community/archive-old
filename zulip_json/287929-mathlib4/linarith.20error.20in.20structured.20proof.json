[
    {
        "content": "<p>I encountered an issue today with <code>linarith</code> that reminds me of some recent bugs in <code>abel</code> (<a href=\"https://github.com/leanprover-community/mathlib4/pull/1394\">mathlib4#1394</a>) and <code>polyrith</code> (<a href=\"https://github.com/leanprover-community/mathlib4/pull/1574\">mathlib4#1574</a>): a failure in a structured tactic proof which is highly dependent on that particular structure and goes away if you try to reorganize or minimize.  So maybe like those it's a missing <code>whnfR</code> or <code>withMainContext</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Linarith</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedCommRing</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span>\n  <span class=\"bp\">·</span> <span class=\"n\">linarith</span> <span class=\"c1\">-- fails</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 322937531,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674447167
    },
    {
        "content": "<p>I have tested it on the branch with the bugfix for<br>\n<a href=\"#narrow/stream/287929-mathlib4/topic/linarith.20with.20discharger\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/linarith.20with.20discharger</a><br>\nso it's not the same issue.</p>",
        "id": 322937564,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674447219
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1775\">mathlib4#1775</a></p>",
        "id": 322950073,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674456553
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/287929-mathlib4/topic/linarith.20error.20in.20structured.20proof/near/322937531\">said</a>:</p>\n<blockquote>\n<p>So maybe like those it's a missing <code>whnfR</code> or <code>withMainContext</code>?</p>\n</blockquote>\n<p>today's fix owed to the third member of the holy trinity, <code>instantiateMVars</code></p>",
        "id": 322950305,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674456687
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I tried out your fix and it doesn't actually seem to fix my original test case?  You have adjusted the test slightly and it passes your version but not mine.</p>",
        "id": 322960455,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674461766
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Linarith</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedCommRing</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n  <span class=\"n\">trivial</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedCommRing</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span>\n  <span class=\"bp\">·</span> <span class=\"n\">linarith</span> <span class=\"c1\">-- fails</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 322960478,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674461775
    },
    {
        "content": "<p>hm, I made it pass the original test case before modifying it, but that was on a branch with other changes as well from which the bug fix was extracted</p>",
        "id": 322972190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674466191
    },
    {
        "content": "<p>Indeed that was the issue. There is still a separate bug preventing me from doing the whole refactor, but I can at least do this part without breaking any tests.</p>",
        "id": 322974556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674466881
    }
]