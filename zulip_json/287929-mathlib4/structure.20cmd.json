[
    {
        "content": "<p>Leo implemented a solution to <a href=\"https://github.com/dselsam/mathport/issues/9\">https://github.com/dselsam/mathport/issues/9</a>, here is an example going all the way up to <code>Field</code>: <a href=\"https://github.com/leanprover/lean4/blob/master/tests/lean/diamond7.lean\">https://github.com/leanprover/lean4/blob/master/tests/lean/diamond7.lean</a> The generated coercions are much more compact than the ones in Lean3 and it could be a lot of faster. It would be great if someone could stress-test this (for the use-cases important to porting mathlib).</p>",
        "id": 249131849,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1628698991
    },
    {
        "content": "<p>So we don't even need to set a flag like <code>set_option old_structure_cmd true</code>?</p>",
        "id": 249133806,
        "sender_full_name": "David Renshaw",
        "timestamp": 1628699910
    },
    {
        "content": "<p>No, there is only one structure command now. If there are clashes/diamonds it looks for common ancestors rather than flattening everything like <code>old_structure_cmd</code> does in Lean3.</p>",
        "id": 249134437,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1628700212
    },
    {
        "content": "<p>Presumably the effect is that the first parent is the \"true\" parent <del>(such that <code>derived_A.to_first_parent = derived_B.to_first_parent</code> is true by refl)</del> and the second parent is inserted as an automatic definition <del>(such that <code>derived_A.to_second_parent = derived_B.to_second_parent</code> requires invoking a recursor)?</del></p>",
        "id": 249138148,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628701857
    },
    {
        "content": "<p>Hmm, that's not the discriminator I thought it was. There's some observable difference between first and second parents though, right?</p>",
        "id": 249138341,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628701946
    },
    {
        "content": "<p>If you look at the constructor of the structure, the flattened parents will be passed as a bunch of fields instead of a structure argument</p>",
        "id": 249139856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628702635
    },
    {
        "content": "<p>it also has consequences for whether <code>(foo.mk instA otherStuff).to_A = instA</code> is defeq or not</p>",
        "id": 249140049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628702708
    }
]