[
    {
        "content": "<p>I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Sum.inl</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Sum.inr</span> <span class=\"n\">val</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">some</span> <span class=\"n\">a'</span>\n</code></pre></div>\n<p>that I'd like to reduce to <code>some a = some a'</code></p>\n<p>but I haven't found the lemmata that get me there...</p>",
        "id": 319303754,
        "sender_full_name": "Arien Malec",
        "timestamp": 1672791928
    },
    {
        "content": "<p>Do cases on f b</p>",
        "id": 319304465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672792426
    },
    {
        "content": "<p>Or maybe try cases on h</p>",
        "id": 319304538,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672792456
    },
    {
        "content": "<p><code>split at h</code> should work too</p>",
        "id": 319352598,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1672825489
    },
    {
        "content": "<p>Hmm. I have an <code>f b</code> in both hypothesis and goal -- is there a way to make Lean 4 recognize that in the cases or splits? Otherwise, I get the goal and hypothesis with different names and run into a corner...</p>",
        "id": 319444179,
        "sender_full_name": "Arien Malec",
        "timestamp": 1672856110
    },
    {
        "content": "<p>maybe <code>(generalizing := true)</code> would help? <a href=\"#narrow/stream/270676-lean4/topic/Reusing.20knowledge.20from.20a.20pattern.20match/near/242485680\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Reusing.20knowledge.20from.20a.20pattern.20match/near/242485680</a></p>",
        "id": 319616514,
        "sender_full_name": "David Renshaw",
        "timestamp": 1672934645
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 319616847,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672934751
    },
    {
        "content": "<p>Indeed -- I'm working on hacking it out from the middle of the proof.</p>",
        "id": 319625132,
        "sender_full_name": "Arien Malec",
        "timestamp": 1672937047
    },
    {
        "content": "<p>For a question such as this, any working example should be fine.</p>",
        "id": 319629335,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672938250
    },
    {
        "content": "<p>I think this does it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Sum.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Sum</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sum</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">Sum</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Sum.inl</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Sum.inl</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Sum.inr</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Sum.inl</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"n\">a</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Sum.inr</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span><span class=\"o\">,</span>\n      <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Sum.inr</span> <span class=\"n\">b</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Sum.inr</span> <span class=\"n\">b</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">a'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 319636559,
        "sender_full_name": "Arien Malec",
        "timestamp": 1672940285
    },
    {
        "content": "<p>Tactic state is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span>\n<span class=\"n\">γ</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span>\n<span class=\"n\">β</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">α</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"bp\">✝</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"bp\">✝</span> <span class=\"bp\">⊕</span> <span class=\"n\">β</span><span class=\"bp\">✝</span>\n<span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"bp\">✝</span>\n<span class=\"n\">a'</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">✝</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Sum.inl</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Sum.inr</span> <span class=\"n\">val</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">some</span> <span class=\"n\">a'</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Sum.inl</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Sum.inl</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Sum.inr</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Sum.inl</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"n\">a</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Sum.inr</span> <span class=\"n\">val</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span><span class=\"o\">,</span>\n        <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span>\n  <span class=\"n\">some</span> <span class=\"n\">a'</span>\n</code></pre></div>\n<p>Most of the moves I try get me to corners where I have the goal as <code>some a_dagger = none</code> where it logically should only be in that state if <code>h</code> is a contradiction.</p>",
        "id": 319637711,
        "sender_full_name": "Arien Malec",
        "timestamp": 1672940646
    },
    {
        "content": "<p>That doesn't look solvable, the inner <code>f b</code> uses a different <code>b</code></p>",
        "id": 319638578,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1672940930
    },
    {
        "content": "<p>When I hover over the goal state, they are all <code>f : β✝ → α✝ ⊕ β✝</code></p>",
        "id": 319639496,
        "sender_full_name": "Arien Malec",
        "timestamp": 1672941201
    },
    {
        "content": "<p>and <code>b : β✝</code></p>",
        "id": 319639654,
        "sender_full_name": "Arien Malec",
        "timestamp": 1672941245
    },
    {
        "content": "<p>Everything right up to this point is straight out of the mathport output....</p>",
        "id": 319639873,
        "sender_full_name": "Arien Malec",
        "timestamp": 1672941321
    },
    {
        "content": "<p>What does appear odd is that the <code>a</code>s are different between <code>Sum.inl a</code> and <code>some a</code> but again I haven't changed anything here out of the port.</p>",
        "id": 319641151,
        "sender_full_name": "Arien Malec",
        "timestamp": 1672941705
    },
    {
        "content": "<p>got it...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Sum.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Sum</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sum</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">Sum</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Sum.inl</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Sum.inl</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Sum.inr</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Sum.inl</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"n\">a</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Sum.inr</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span><span class=\"o\">,</span>\n      <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Sum.inr</span> <span class=\"n\">b</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Sum.inr</span> <span class=\"n\">b</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">a'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n    <span class=\"n\">revert</span> <span class=\"n\">h</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">b'</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">dsimp</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">contradiction</span>\n</code></pre></div>",
        "id": 319684887,
        "sender_full_name": "Arien Malec",
        "timestamp": 1672958056
    },
    {
        "content": "<p>Oh I guess I misread the goal</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">unfold</span> <span class=\"n\">foo</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n    <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp_all</span>\n</code></pre></div>",
        "id": 319763105,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1673004751
    },
    {
        "content": "<p>Cool - is there a deep reason why I had to <code>revert</code> to use <code>cases</code> properly above, but <code>split</code> works fine?</p>\n<p>Also: any reason to prefer <code>unfold foo at *</code> vs <code>dsimp [foo] at *</code>?</p>",
        "id": 319841781,
        "sender_full_name": "Arien Malec",
        "timestamp": 1673031229
    },
    {
        "content": "<p><code>split</code> introduces an extra hypothesis, the same works with <code>cases</code> as well</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">by</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp_all</span><span class=\"bp\">!</span>\n</code></pre></div>",
        "id": 319927670,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1673084588
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"542196\">Arien Malec</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Proving.20if.20rhs.20is.20.60some.20a.60.20lhs.20must.20be.20.60some.60/near/319841781\">said</a>:</p>\n<blockquote>\n<p>Also: any reason to prefer <code>unfold foo at *</code> vs <code>dsimp [foo] at *</code>?</p>\n</blockquote>\n<p>It's one character shorter :)</p>",
        "id": 319927705,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1673084614
    }
]