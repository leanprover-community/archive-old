[
    {
        "content": "<p>I've noticed that it is often necessary to write <code>dsimp only</code> before <code>rw</code> could work. See <a href=\"https://github.com/leanprover-community/mathlib4/pull/1133/files#r1053862073\">this PR</a> but it's also been happening in other places. Should we do something about this?</p>",
        "id": 317063489,
        "sender_full_name": "Winston Yin",
        "timestamp": 1671581479
    },
    {
        "content": "<p>Do you mean \"it's necessary in lean4 where it wasn't in lean3\"?</p>",
        "id": 317063834,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671581716
    },
    {
        "content": "<p><code>(· • ·) a</code> looks suspicious there; I think the lean 3 version is <code>(•) a</code>, and that isn't a faithful port</p>",
        "id": 317064026,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671581826
    },
    {
        "content": "<p>I've been meaning to fix mathport to translate that idiom to <code>(a • ·)</code> instead, although that's still not faithful</p>",
        "id": 317064195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671581919
    },
    {
        "content": "<p>(<a href=\"#narrow/stream/287929-mathlib4/topic/Pretty-printing.20binary.20operations/near/313757136\">the previous thread about this</a>)</p>",
        "id": 317064229,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671581941
    },
    {
        "content": "<p>Can't we just do the literal translation?</p>",
        "id": 317064254,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671581953
    },
    {
        "content": "<p>what, <code>HasSMul.smul a</code>? That's a clear pessimization</p>",
        "id": 317064295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671581984
    },
    {
        "content": "<p>Mathport's first priority is to make code that looks natural, even over code that works. If we wanted something that works but is ugly we would use binport instead or pp.all</p>",
        "id": 317064516,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671582122
    },
    {
        "content": "<p>which is why I would like to fix this in core so that the natural thing also works, and mathport's optimistic translation doesn't have to change</p>",
        "id": 317064654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671582202
    },
    {
        "content": "<p>Unless the fix to core comes soon, it would likely be easiest to do the literal translation and then do a cleanup pass over ported code once it lands</p>",
        "id": 317066574,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671583536
    },
    {
        "content": "<p>Otherwise pessimization is happening to ported proofs</p>",
        "id": 317066671,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671583582
    },
    {
        "content": "<p>The majority of the time stuff like <code>(· • ·)</code> works just fine: inside definitions, proofs, and simp arguments. If you run into a case where it doesn't work (I've been waiting to get an MWE for this, so far it's only been a theoretical concern) then you have the option of fixing the proof or using <code>HasSMul.smul a</code> or anything else. All such options would need to come with a porting note anyway because they are all pessimizations, so I would like a human to do this.</p>",
        "id": 317071582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671587334
    },
    {
        "content": "<p>But mathport should be using the most optimistic setting rather than assuming it's never going to work and pessimizing the 99% because of the 1% of the time that it doesn't work</p>",
        "id": 317071680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671587411
    },
    {
        "content": "<p>Finally, the \"literal translation\" isn't literal at all. What is literally in the source is <code>(•)</code>, and that's what synport sees and tries to reproduce. It only has a vague idea of what this expands to and who knows what namespaces are open so the identifier resolution needed to write <code>HasSMul.smul</code> correctly is a lot more fraught.</p>",
        "id": 317071833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671587548
    },
    {
        "content": "<p>a much more reliable way to get mathport to produce that identifier would be to write it out in mathlib3</p>",
        "id": 317071876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671587610
    },
    {
        "content": "<p>Yeah, so in the linked PR (just for those who are catching up, like me) the issue is that in Lean 3 <code>#check ((*)a) b</code> gives <code>a * b</code> but in Lean 4 <code>#check (a * ·) b</code> gives <code>(fun x ↦ a * x) b</code>, so <code>dsimp</code> is occasionally necessary before a rewrite.</p>",
        "id": 317222314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671647356
    },
    {
        "content": "<p>This issue has also shown up <a href=\"#narrow/stream/287929-mathlib4/topic/Lean.20not.20.22seeing.20through.22.20composition/near/317218291\">here</a>. Is there no way of constructing some <code>f</code> from <code>*</code> and <code>a</code> such that <code>f b</code> is syntactically <code>a * b</code> in Lean 4, a la <code>((*)a)</code> in Lean 3?</p>",
        "id": 317224837,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671648134
    },
    {
        "content": "<p>Yes, it's <code>HMul.mul a</code></p>",
        "id": 317261954,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671662792
    },
    {
        "content": "<p>But you can't use the <code>*</code> notation, which is Mario's objection to using that spelling</p>",
        "id": 317262051,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671662832
    },
    {
        "content": "<p>I guess <code>HMul.mul a</code> is pretty ugly; however <code>((*)a)</code> is actually incomprehensible as well I guess, it's just that we're more used to it.</p>",
        "id": 317262357,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671662984
    },
    {
        "content": "<p>The argument for <code>(*) a</code> in mathlib3 instead of <code>λ x, a * x</code> is precisely that it avoids the need for the dsimps mentioned in this thread; it's not about concision</p>",
        "id": 317263342,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671663464
    },
    {
        "content": "<p>This is particularly noticable when using <code>apply mul_right_injective</code> in a proof, which needs a dsimp afterwards if the second spelling is used to state <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_right_injective\">docs#mul_right_injective</a>.</p>",
        "id": 317263460,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671663524
    },
    {
        "content": "<p>Note that even the docs use the <code>has_mul.mul</code> spelling, so my opinion is that we should use the same spelling in mathlib4 rather than trying to clean things up during the port.</p>",
        "id": 317263692,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671663616
    },
    {
        "content": "<p>I think someone should just open an issue so we can stop discussing workarounds</p>",
        "id": 317266503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671665124
    }
]