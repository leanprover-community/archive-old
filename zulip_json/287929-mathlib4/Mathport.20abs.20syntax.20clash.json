[
    {
        "content": "<p>The notation for <code>abs</code> clashes with some variants of the match notation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathbin.Algebra.Abs</span> <span class=\"c1\">-- works if this is not imported</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>  <span class=\"c1\">-- expected '|'</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>Is there a way to switch off a notation that has already been introduced? Should I report this as a bug on the mathport GitHub?</p>",
        "id": 264882985,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1639498933
    },
    {
        "content": "<p>Yes, we can change the notation during the port.</p>",
        "id": 264884619,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639499584
    },
    {
        "content": "<p>ok, I'll open an issue on GitHub.</p>",
        "id": 264887784,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1639500795
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathport/issues/73\">https://github.com/leanprover-community/mathport/issues/73</a></p>",
        "id": 264888067,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1639500870
    },
    {
        "content": "<p>the abs notation is even weird in Lean3, where often you need to do <code>(|x|)</code> instead of just <code>|x|</code>. I wonder if there's another vertical bar we could use for abs?</p>",
        "id": 264888070,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639500871
    },
    {
        "content": "<p>There is ∣ typed as <code>\\mid</code> in the emacs Lean input method.</p>",
        "id": 264888392,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1639501001
    },
    {
        "content": "<p>that one is already in use for divides</p>",
        "id": 264890065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639501543
    },
    {
        "content": "<p>I will once again renew my suggestion to stop using symmetric bracket pairs and use <code>⸡x⸠</code> like in mathematica</p>",
        "id": 264890368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639501659
    },
    {
        "content": "<p>why is it so important that they're asymmetric? is it because of how Lean's parser works? I don't currently like that syntax but I could get used to it I think</p>",
        "id": 264899122,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639504739
    },
    {
        "content": "<p>Symmetric brackets are fundamentally ambiguous</p>",
        "id": 264899558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639504883
    },
    {
        "content": "<p>last time this came up I used an example like <code>|1+|1-1|+|-|1|||</code></p>",
        "id": 264899751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639504946
    },
    {
        "content": "<p>In practice this simply doesn't arise</p>",
        "id": 264899890,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639504998
    },
    {
        "content": "<p>So there is nothing to worry about.</p>",
        "id": 264899904,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639505006
    },
    {
        "content": "<p>We have hundreds of year of training in putting parentheses when needed.</p>",
        "id": 264899956,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639505031
    },
    {
        "content": "<p>In practice this particular notation has been singled out as causing problems on <em>several</em> occasions</p>",
        "id": 264899958,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639505031
    },
    {
        "content": "<p>I see, a human would then work backwards from the totasl number of |s in a line if something as horrid as this came up but that doesn't seem good for a computer parser at all</p>",
        "id": 264900022,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639505045
    },
    {
        "content": "<p>The issues that arise in practice are slightly different in expression, but fundamentally the issue is that you can't make a totally coherent parser for symmetric brackets because they are ambiguous</p>",
        "id": 264900164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639505111
    },
    {
        "content": "<p>I haven't seen realistic examples where this is an issue, but I may have missed them.</p>",
        "id": 264900248,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639505148
    },
    {
        "content": "<p>the issue that arises in lean 3 is that you can't give the brackets the right precedence so you need to use parens</p>",
        "id": 264900373,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639505183
    },
    {
        "content": "<p>in lean 4 it looks to be much worse because you are also colliding with some built in notation</p>",
        "id": 264900425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639505207
    },
    {
        "content": "<p>I believe this was also why we had to remove the ascii structure brackets <code>(|a, b, c|)</code></p>",
        "id": 264900541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639505259
    }
]