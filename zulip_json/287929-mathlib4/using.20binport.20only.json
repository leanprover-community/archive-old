[
    {
        "content": "<p>I want to use the binported <code>.olean</code>s in a project of mine. I added </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">require</span> <span class=\"n\">mathlib3port</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/leanprover-community/mathlib3port\"</span>\n</code></pre></div>\n<p>to my lake file, and tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathbin.AlgebraicGeometry.Scheme</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lookup3</span> <span class=\"n\">algebraic_geometry.Scheme</span>\n<span class=\"k\">#check</span> <span class=\"n\">AlgebraicGeometry.Scheme</span>\n</code></pre></div>\n<p>as recommended by the mathport readme, but all I get is a <code>unknown package 'Mathlib'</code> on the import and it doesn't seem to use the oleans but instead wants to load the synported files (?). What am I doing wrong?</p>",
        "id": 289602739,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1657810547
    },
    {
        "content": "<p>Try <code>import Mathbin</code> instead. See also our discussion here:<br>\n<a href=\"#narrow/stream/270676-lean4/topic/unknown.20package.20Mathlib\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/unknown.20package.20Mathlib</a></p>",
        "id": 289604751,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1657811320
    },
    {
        "content": "<p>I don't know if this should be fixed in the mathport readme or in lake. But one of them must be wrong I think :-)</p>",
        "id": 289604886,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1657811400
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span></p>",
        "id": 289604981,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1657811429
    },
    {
        "content": "<p>Why do you think it's using the synported files? Maybe because when you click on the import you land in the synported files? I think that's intended and you are just being redirected there although internally the binport is used. That's what's happening for me at least.</p>",
        "id": 289605622,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1657811708
    },
    {
        "content": "<p>The binported oleans (e.g., <code>Mathbin.AlgebraicGeometry.Scheme</code>) import <code>Mathlib</code> and will thus break if Mathlib is not built and on the <code>LEAN_PATH</code>. The binported mathlib package (e.g., <code>mathlib3port</code>) does require <code>mathlib</code>, so Lake knows to add mathlib's olean directory to <code>LEAN_PATH</code>. However, Lake only builds modules on-demand. That is, when they are imported. Lake determines this by processing a module's header (i.e., the imports at the top of the file) to know what imports a given module  (e.g., your test code) makes. Since you only import <code>Mathbin.AlgebraicGeometry.Scheme</code>, that is all Lake ensures is built. And since that file only has an olean and no source file, Lake is unable to determine its imports to build them. Thus, <code>Mathlib</code> does not get built, which causes the error here. To fix this, you need to <code>import Mathlib</code> in your test file or import a file that syntatically imports <code>Mathlib</code> (e.g., <code>Mathbin</code>).</p>",
        "id": 289612887,
        "sender_full_name": "Mac",
        "timestamp": 1657815078
    },
    {
        "content": "<p>Thanks! That should do it, I'll test it tomorrow</p>",
        "id": 289641663,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1657828724
    },
    {
        "content": "<p>Still the same errors... it also gives me <code>warning: </code>extraDepTarget<code> has been deprecated. Try to use a custom target or raise an issue about your use case.</code>, is that related?</p>",
        "id": 289643128,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1657829424
    },
    {
        "content": "<p>Oh it seems <code>Mathlib</code> just throws errors (on nightly 7-12)</p>",
        "id": 289643406,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1657829587
    },
    {
        "content": "<p>Ah no, the error message has changed, it's now <code>object file './lean_packages/mathlib/build/lib/Mathlib.olean' of module Mathlib does not exist</code>. <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 289644574,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1657830156
    },
    {
        "content": "<p>I'm confused. I can clone and build mathlib4 with nightly 7-12 without errors, but if I import it via lake with a toolchain bound to the same Lean version, it throws errors concerning <code>Syntax</code> vs <code>TSyntax</code> which suggests it uses the wrong Lean version</p>",
        "id": 289645125,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1657830445
    },
    {
        "content": "<p>Did you have a different version of the dependency already downloaded? In that case, try running <code>lake update</code></p>",
        "id": 289645705,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1657830742
    },
    {
        "content": "<p>I did try <code>lake update</code>...  Should I remove mathlib4 from my dependencies? They currently looked like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">require</span> <span class=\"n\">mathlib</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/leanprover-community/mathlib4\"</span>\n\n<span class=\"n\">require</span> <span class=\"n\">mathlib3port</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/leanprover-community/mathlib3port\"</span>\n</code></pre></div>",
        "id": 289646498,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1657831118
    },
    {
        "content": "<p>Maybe I should try removing the <code>lake_packages</code> folder by hand</p>",
        "id": 289646687,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1657831217
    },
    {
        "content": "<p>Neither <code>lake update</code> nor removing <code>lake_packages</code> nor removing <code>mathlib</code> from the lake file helped <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 289646898,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1657831352
    },
    {
        "content": "<p>If I open the mathlib file that throws the error it compiles just fine</p>",
        "id": 289647076,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1657831456
    },
    {
        "content": "<p>This is the full first error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib3port</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">lean3port</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"n\">LD_LIBRARY_PATH</span><span class=\"bp\">=/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">javra</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-07-12/lib:./lean_packages/mathlib3port/build/lib:./build/lib:./lean_packages/mathlib/build/lib:./lean_packages/lean3port/build/lib:./lean_packages/mathlib/build/lib /home/javra/.elan/toolchains/leanprover--lean4---nightly-2022-07-12/bin/lean ./lean_packages/mathlib/././Mathlib/Tactic/RestateAxiom.lean -R ./lean_packages/mathlib/./. -o ./lean_packages/mathlib/build/lib/Mathlib/Tactic/RestateAxiom.olean -i ./lean_packages/mathlib/build/lib/Mathlib/Tactic/RestateAxiom.ilean -c ./lean_packages/mathlib/build/ir/Mathlib/Tactic/RestateAxiom.c</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stdout</span><span class=\"o\">:</span>\n<span class=\"bp\">./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Util</span><span class=\"bp\">/</span><span class=\"n\">LibraryNote.lean</span><span class=\"o\">:</span><span class=\"mi\">27</span><span class=\"o\">:</span><span class=\"mi\">40</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"bp\">'</span><span class=\"n\">isStrLit</span><span class=\"bp\">?'</span><span class=\"o\">,</span> <span class=\"n\">the</span> <span class=\"n\">environment</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">contain</span> <span class=\"bp\">'</span><span class=\"n\">Lean.TSyntax.isStrLit</span><span class=\"bp\">?'</span>\n  <span class=\"n\">title</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">str</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">javra</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-07-12/bin/lean exited with status 1</span>\n</code></pre></div>",
        "id": 289647242,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1657831554
    },
    {
        "content": "<p>What are the dependencies of those packages? Are they all using the same toolchain?</p>",
        "id": 289650943,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1657833449
    },
    {
        "content": "<p>No, mathlib4 uses 07-12 and mathlib3port uses 06-13, so there might be some real incompatibility to the current lean <span aria-label=\"disappointed\" class=\"emoji emoji-1f61e\" role=\"img\" title=\"disappointed\">:disappointed:</span></p>",
        "id": 289655279,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1657835995
    },
    {
        "content": "<p>You could try to find an older mathlib4 commit that uses that same toolchain, or something close enough to avoid conflicts</p>",
        "id": 289658979,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1657838148
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110789\">Jakob von Raumer</span> <a href=\"#narrow/stream/287929-mathlib4/topic/using.20binport.20only/near/289655279\">said</a>:</p>\n<blockquote>\n<p>No, mathlib4 uses 07-12 and mathlib3port uses 06-13, so there might be some real incompatibility to the current lean <span aria-label=\"disappointed\" class=\"emoji emoji-1f61e\" role=\"img\" title=\"disappointed\">:disappointed:</span></p>\n</blockquote>\n<p>Yeah, you should be using the 06-13 nightly if you want to use Mathbin</p>",
        "id": 289661724,
        "sender_full_name": "Mac",
        "timestamp": 1657839777
    },
    {
        "content": "<p>You don't need to figure out what mathlib it requires, mathbin already specifies that. Simply <code>require</code>'ing <code>mathlib3port</code> and importing <code>Mathlib</code> should be enough.</p>",
        "id": 289661856,
        "sender_full_name": "Mac",
        "timestamp": 1657839848
    },
    {
        "content": "<p>Rest of the project needs <code>TSyntax</code> unfortunately, so I'll have to wait for the lean version bump (or do it myself <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> )</p>",
        "id": 289694070,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1657869779
    },
    {
        "content": "<p>Yes, the Lean version needs to match exactly.  The mathport releases contain the oleans after all.  It's already a wonder if the source code compiles with two different Lean versions, binary compatibility is pretty much a lost cause.</p>",
        "id": 289696238,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1657871656
    },
    {
        "content": "<p>I have the same goal (use just binported mathlib files in a lean 4 project) and I'm also running into a bit of a wall with this.  I've tried <code>lake update</code> and <code>lake build</code>, but upon having <code>import Mathlib</code> in my project, I get a very long error:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Long Error</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p><code>/Users/thomas/.elan/toolchains/leanprover--lean4---nightly-2022-09-25/bin/lake print-paths Init Mathlib</code> failed:</p>\n<p>stderr:<br>\ninfo: Building Mathlib.Tactic.Alias<br>\ninfo: Building Mathlib.Tactic.Substs<br>\ninfo: Building Mathlib.Tactic.RestateAxiom<br>\ninfo: Building Std.Tactic.Lint.Simp<br>\nerror: &gt; LEAN_PATH=./lean_packages/mathlib3port/build/lib:./lean_packages/mathlib/build/lib:./lean_packages/lean3port/build/lib:./build/lib:./lean_packages/std/build/lib DYLD_LIBRARY_PATH=/Users/thomas/.elan/toolchains/leanprover--lean4---nightly-2022-09-25/lib:./lean_packages/mathlib3port/build/lib:./lean_packages/mathlib/build/lib:./lean_packages/lean3port/build/lib:./build/lib:./lean_packages/std/build/lib:./lean_packages/std/build/lib /Users/thomas/.elan/toolchains/leanprover--lean4---nightly-2022-09-25/bin/lean -DwarningAsError=true -Dlinter.missingDocs=true ./lean_packages/std/././Std/Tactic/Lint/Simp.lean -R ./lean_packages/std/./. -o ./lean_packages/std/build/lib/Std/Tactic/Lint/Simp.olean -i ./lean_packages/std/build/lib/Std/Tactic/Lint/Simp.ilean -c ./lean_packages/std/build/ir/Std/Tactic/Lint/Simp.c<br>\nerror: stdout:<br>\n./lean_packages/std/././Std/Tactic/Lint/Simp.lean:75:50: error: invalid dotted identifier notation, unknown identifier <code>Lean.Name.decl</code> from expected type<br>\n  Name<br>\n./lean_packages/std/././Std/Tactic/Lint/Simp.lean:95:30: error: unknown identifier 'Simp.UsedSimps'<br>\n./lean_packages/std/././Std/Tactic/Lint/Simp.lean:98:2: error: failed to construct 'ForIn' instance for collection<br>\n  ?m.27516 usedSimps env<br>\nand monad<br>\n  ReaderT Context (StateRefT' IO.RealWorld State CoreM)<br>\n./lean_packages/std/././Std/Tactic/Lint/Simp.lean:115:8: error: type mismatch<br>\n  (?m.28258, prf1_lems)<br>\nhas type<br>\n  ?m.28256 × ?m.28252 : Type (max ?u.28255 ?u.28254)<br>\nbut is expected to have type<br>\n  Simp.Result : Type<br>\nerror: external command <code>/Users/thomas/.elan/toolchains/leanprover--lean4---nightly-2022-09-25/bin/lean</code> exited with code 1<br>\nerror: &gt; LEAN_PATH=./lean_packages/mathlib3port/build/lib:./lean_packages/mathlib/build/lib:./lean_packages/lean3port/build/lib:./build/lib:./lean_packages/std/build/lib DYLD_LIBRARY_PATH=/Users/thomas/.elan/toolchains/leanprover--lean4---nightly-2022-09-25/lib:./lean_packages/mathlib3port/build/lib:./lean_packages/mathlib/build/lib:./lean_packages/lean3port/build/lib:./build/lib:./lean_packages/std/build/lib:./lean_packages/mathlib/build/lib /Users/thomas/.elan/toolchains/leanprover--lean4---nightly-2022-09-25/bin/lean ./lean_packages/mathlib/././Mathlib/Tactic/Substs.lean -R ./lean_packages/mathlib/./. -o ./lean_packages/mathlib/build/lib/Mathlib/Tactic/Substs.olean -i ./lean_packages/mathlib/build/lib/Mathlib/Tactic/Substs.ilean -c ./lean_packages/mathlib/build/ir/Mathlib/Tactic/Substs.c<br>\nerror: stdout:<br>\n./lean_packages/mathlib/././Mathlib/Tactic/Substs.lean:18:45: error: expected '(', ']', '_', 'decide', 'intro', 'match', 'native_decide', 'open', 'set_option', '{' or identifier<br>\nerror: external command <code>/Users/thomas/.elan/toolchains/leanprover--lean4---nightly-2022-09-25/bin/lean</code> exited with code 1<br>\nerror: &gt; LEAN_PATH=./lean_packages/mathlib3port/build/lib:./lean_packages/mathlib/build/lib:./lean_packages/lean3port/build/lib:./build/lib:./lean_packages/std/build/lib DYLD_LIBRARY_PATH=/Users/thomas/.elan/toolchains/leanprover--lean4---nightly-2022-09-25/lib:./lean_packages/mathlib3port/build/lib:./lean_packages/mathlib/build/lib:./lean_packages/lean3port/build/lib:./build/lib:./lean_packages/std/build/lib:./lean_packages/mathlib/build/lib /Users/thomas/.elan/toolchains/leanprover--lean4---nightly-2022-09-25/bin/lean ./lean_packages/mathlib/././Mathlib/Tactic/RestateAxiom.lean -R ./lean_packages/mathlib/./. -o ./lean_packages/mathlib/build/lib/Mathlib/Tactic/RestateAxiom.olean -i ./lean_packages/mathlib/build/lib/Mathlib/Tactic/RestateAxiom.ilean -c ./lean_packages/mathlib/build/ir/Mathlib/Tactic/RestateAxiom.c<br>\nerror: stdout:<br>\n./lean_packages/mathlib/././Mathlib/Tactic/RestateAxiom.lean:58:4: error: type mismatch<br>\n  addAndCompile<br>\n    (Declaration.defnDecl<br>\n      { toConstantVal :=<br>\n          { name := newName, levelParams := info.toConstantVal.levelParams, type := info.toConstantVal.type },<br>\n        value := info.value, hints := info.hints, safety := <a href=\"http://info.safety\">info.safety</a>, all := info.all })<br>\nhas type<br>\n  CoreM Unit : Type<br>\nbut is expected to have type<br>\n  CommandElabM Unit : Type<br>\nerror: external command <code>/Users/thomas/.elan/toolchains/leanprover--lean4---nightly-2022-09-25/bin/lean</code> exited with code 1<br>\nerror: &gt; LEAN_PATH=./lean_packages/mathlib3port/build/lib:./lean_packages/mathlib/build/lib:./lean_packages/lean3port/build/lib:./build/lib:./lean_packages/std/build/lib DYLD_LIBRARY_PATH=/Users/thomas/.elan/toolchains/leanprover--lean4---nightly-2022-09-25/lib:./lean_packages/mathlib3port/build/lib:./lean_packages/mathlib/build/lib:./lean_packages/lean3port/build/lib:./build/lib:./lean_packages/std/build/lib:./lean_packages/mathlib/build/lib /Users/thomas/.elan/toolchains/leanprover--lean4---nightly-2022-09-25/bin/lean ./lean_packages/mathlib/././Mathlib/Tactic/Alias.lean -R ./lean_packages/mathlib/./. -o ./lean_packages/mathlib/build/lib/Mathlib/Tactic/Alias.olean -i ./lean_packages/mathlib/build/lib/Mathlib/Tactic/Alias.ilean -c ./lean_packages/mathlib/build/ir/Mathlib/Tactic/Alias.c<br>\nerror: stdout:<br>\n./lean_packages/mathlib/././Mathlib/Tactic/Alias.lean:96:4: error: application type mismatch<br>\n  bind (addDecl decl)<br>\nargument<br>\n  addDecl decl<br>\nhas type<br>\n  CoreM Unit : Type<br>\nbut is expected to have type<br>\n  Elab.Command.CommandElabM PUnit : Type<br>\n./lean_packages/mathlib/././Mathlib/Tactic/Alias.lean:77:27: error: (kernel) declaration has metavariables 'Tactic.Alias.elabAlias'<br>\nerror: external command <code>/Users/thomas/.elan/toolchains/leanprover--lean4---nightly-2022-09-25/bin/lean</code> exited with code 1</p>\n</div></div>\n<p>Any idea what could be going on? I have <code>require mathlib3port from git\n  \"https://github.com/leanprover-community/mathlib3port\"</code> in my lakefile, and <code>import Mathlib</code> at the top of my top-level project-named lean file. (I'm not sure if I'm structuring that correctly; just starting out with lean!)</p>\n<p>And <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> , when you say the lean version needs to match, do you mean that the lean version specified in the <code>leanpkg.toml</code> file needs to match the version used by <code>mathlib3port</code>?</p>",
        "id": 300929618,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664246857
    },
    {
        "content": "<p>Yeah that looks like a version mismatch.</p>",
        "id": 300931362,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1664248440
    },
    {
        "content": "<p>Ok, thanks! I'm actually having a bit of trouble fixing it, though. <a href=\"https://limperg.de/posts/2021-05-31-lean4-project.html\">This</a> suggests I use <code>leanpkg configure</code>, but I get the following error:</p>\n<p>error: toolchain 'leanprover/lean4:nightly-2022-09-25' does not have the binary <code>/Users/thomas/.elan/toolchains/leanprover--lean4---nightly-2022-09-25/bin/leanpkg</code></p>\n<p>Perhaps I've chosen the wrong <code>lean_version</code> string (which I've naively set to <code>\"leanprover/lean4:nightly-2022-09-13\"</code>)...?</p>",
        "id": 300932022,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664249051
    },
    {
        "content": "<p>Leanpkg is long obsolete. I'd try the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rm</span> <span class=\"bp\">-</span><span class=\"n\">rf</span> <span class=\"n\">lean_packages</span>\n<span class=\"n\">lake</span> <span class=\"n\">update</span>\n<span class=\"n\">cp</span> <span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span> <span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 300932549,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1664249549
    },
    {
        "content": "<p>Hmm, thanks, that definitely did something! Now, with <code>\"leanprover/lean4:nightly-2022-09-13\"</code> as my <code>lean_version</code>, I get an error starting with \"<code>/Users/thomas/.elan/toolchains/leanprover--lean4---nightly-2022-09-11/bin/lake print-paths Init Mathlib</code> failed\" instead, which I'll count as progress. Do you know how I might find the correct version to use here?</p>",
        "id": 300933095,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664250095
    },
    {
        "content": "<p>what is this <code>lean_version</code> field? AFAIK lake doesn't use that, it uses a <code>lean-toolchain</code> file at the root</p>",
        "id": 300933173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664250154
    },
    {
        "content": "<p>you should use the same <code>lean-toolchain</code> version present in the version of mathlib4 you are using</p>",
        "id": 300933215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664250211
    },
    {
        "content": "<p>Oh, maybe that's my problem. The <code>lean_version</code> field is in <code>leanpkg.toml</code>. Is that whole file obselete/unneeded now? (I may have been following an out-of-date guide...)</p>",
        "id": 300933321,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664250315
    },
    {
        "content": "<p>the whole file is unused</p>",
        "id": 300933326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664250327
    },
    {
        "content": "<p>gotcha, thanks!</p>",
        "id": 300933331,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664250337
    },
    {
        "content": "<p>let's see if the <code>lean-toolchain</code> thing works...</p>",
        "id": 300933337,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664250349
    },
    {
        "content": "<p>lake gets its data from <code>lakefile.lean</code> and <code>lean-toolchain</code></p>",
        "id": 300933339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664250350
    },
    {
        "content": "<p>Ok, it looks like my <code>leantoolchain</code> matches <code>mathlib3port</code>'s toolchain (<code>leanprover/lean4:nightly-2022-09-11</code>) but I'm still getting what seems to me to be basically the same message. Here it is again in case it's slightly different:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Long Error</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p><code>/Users/thomas/.elan/toolchains/leanprover--lean4---nightly-2022-09-11/bin/lake print-paths Init Mathlib</code> failed:</p>\n<p>stderr:<br>\ninfo: Building Std.Tactic.OpenPrivate<br>\ninfo: Building Std.Tactic.GuardExpr<br>\ninfo: Building Std.Tactic.ByCases<br>\ninfo: Building Std.Lean.Meta<br>\ninfo: Building Std.Lean.Tactic<br>\ninfo: Building Std.Classes.Dvd<br>\ninfo: Building Std.Util.TermUnsafe<br>\ninfo: Building Std.Lean.NameMapAttribute<br>\ninfo: Building Mathlib.Init.Data.Nat.Basic<br>\ninfo: Building Std.Lean.Command<br>\ninfo: Building Std.Tactic.HaveI<br>\ninfo: Building Std.Data.List.Init.Lemmas<br>\ninfo: Building Std.Tactic.RCases<br>\ninfo: Building Std.Data.Option.Init.Lemmas<br>\ninfo: Building Std.Util.ExtendedBinder<br>\ninfo: Building Std.Lean.Parser<br>\ninfo: Building Mathlib.Tactic.Alias<br>\ninfo: Building Std.Tactic.CoeExt<br>\ninfo: Building Std.Data.DList<br>\ninfo: Building Std.Tactic.TryThis<br>\nerror: &gt; LEAN_PATH=./lean_packages/mathlib3port/build/lib:./lean_packages/mathlib/build/lib:./lean_packages/lean3port/build/lib:./build/lib:./lean_packages/std/build/lib DYLD_LIBRARY_PATH=/Users/thomas/.elan/toolchains/leanprover--lean4---nightly-2022-09-11/lib:./lean_packages/mathlib3port/build/lib:./lean_packages/mathlib/build/lib:./lean_packages/lean3port/build/lib:./build/lib:./lean_packages/std/build/lib:./lean_packages/std/build/lib /Users/thomas/.elan/toolchains/leanprover--lean4---nightly-2022-09-11/bin/lean -DwarningAsError=true -Dlinter.missingDocs=true ./lean_packages/std/././Std/Tactic/ByCases.lean -R ./lean_packages/std/./. -o ./lean_packages/std/build/lib/Std/Tactic/ByCases.olean -i ./lean_packages/std/build/lib/Std/Tactic/ByCases.ilean -c ./lean_packages/std/build/ir/Std/Tactic/ByCases.c<br>\nerror: stdout:<br>\n./lean_packages/std/././Std/Tactic/ByCases.lean:79:61: error: application type mismatch<br>\n  h.raw<br>\nargument<br>\n  h<br>\nhas type<br>\n  TSyntax <code>Lean.binderIdent : Type\nbut is expected to have type\n  TSyntax </code>ident : Type<br>\nerror: external command <code>/Users/thomas/.elan/toolchains/leanprover--lean4---nightly-2022-09-11/bin/lean</code> exited with code 1<br>\ninfo: Building Std.Util.LibraryNote<br>\ninfo: Building Mathlib.Init.Data.Int.Notation<br>\nerror: &gt; LEAN_PATH=./lean_packages/mathlib3port/build/lib:./lean_packages/mathlib/build/lib:./lean_packages/lean3port/build/lib:./build/lib:./lean_packages/std/build/lib DYLD_LIBRARY_PATH=/Users/thomas/.elan/toolchains/leanprover--lean4---nightly-2022-09-11/lib:./lean_packages/mathlib3port/build/lib:./lean_packages/mathlib/build/lib:./lean_packages/lean3port/build/lib:./build/lib:./lean_packages/std/build/lib:./lean_packages/std/build/lib /Users/thomas/.elan/toolchains/leanprover--lean4---nightly-2022-09-11/bin/lean -DwarningAsError=true -Dlinter.missingDocs=true ./lean_packages/std/././Std/Tactic/CoeExt.lean -R ./lean_packages/std/./. -o ./lean_packages/std/build/lib/Std/Tactic/CoeExt.olean -i ./lean_packages/std/build/lib/Std/Tactic/CoeExt.ilean -c ./lean_packages/std/build/ir/Std/Tactic/CoeExt.c<br>\nerror: stdout:<br>\n./lean_packages/std/././Std/Tactic/CoeExt.lean:14:2: error: expected 'abbrev', 'add_decl_doc', 'axiom', 'builtin_initialize', 'class', 'declare_simp_like_tactic', 'declare_syntax_cat', 'def', 'elab', 'elab_rules', 'example', 'inductive', 'infix', 'infixl', 'infixr', 'initialize', 'instance', 'macro', 'macro_rules', 'notation', 'opaque', 'postfix', 'prefix', 'register_builtin_option', 'register_option', 'register_simp_attr', 'structure', 'syntax', 'theorem' or 'unif_hint'<br>\n./lean_packages/std/././Std/Tactic/CoeExt.lean:16:2: error: expected 'abbrev', 'add_decl_doc', 'axiom', 'builtin_initialize', 'class', 'declare_simp_like_tactic', 'declare_syntax_cat', 'def', 'elab', 'elab_rules', 'example', 'inductive', 'infix', 'infixl', 'infixr', 'initialize', 'instance', 'macro', 'macro_rules', 'notation', 'opaque', 'postfix', 'prefix', 'register_builtin_option', 'register_option', 'register_simp_attr', 'structure', 'syntax', 'theorem' or 'unif_hint'<br>\n./lean_packages/std/././Std/Tactic/CoeExt.lean:18:2: error: expected 'abbrev', 'add_decl_doc', 'axiom', 'builtin_initialize', 'class', 'declare_simp_like_tactic', 'declare_syntax_cat', 'def', 'elab', 'elab_rules', 'example', 'inductive', 'infix', 'infixl', 'infixr', 'initialize', 'instance', 'macro', 'macro_rules', 'notation', 'opaque', 'postfix', 'prefix', 'register_builtin_option', 'register_option', 'register_simp_attr', 'structure', 'syntax', 'theorem' or 'unif_hint'<br>\n./lean_packages/std/././Std/Tactic/CoeExt.lean:19:11: error: expected 'instance'<br>\n./lean_packages/std/././Std/Tactic/CoeExt.lean:24:23: error: unknown constant '_root_.coe'<br>\n./lean_packages/std/././Std/Tactic/CoeExt.lean:25:26: error: unknown constant '_root_.coeFun'<br>\n./lean_packages/std/././Std/Tactic/CoeExt.lean:26:27: error: unknown constant '_root_.coeSort'<br>\n./lean_packages/std/././Std/Tactic/CoeExt.lean:25:4: error: redundant alternative<br>\n./lean_packages/std/././Std/Tactic/CoeExt.lean:26:4: error: redundant alternative<br>\n./lean_packages/std/././Std/Tactic/CoeExt.lean:36:11: error: failed to generate 'Inhabited' instance for 'Tactic.NormCast.CoeFnInfo'<br>\n./lean_packages/std/././Std/Tactic/CoeExt.lean:42:0: error: failed to synthesize<br>\n  Inhabited (SimpleScopedEnvExtension (Name × CoeFnInfo) (NameMap CoeFnInfo))<br>\n./lean_packages/std/././Std/Tactic/CoeExt.lean:63:4: error: invalid pattern variable, must be atomic<br>\n./lean_packages/std/././Std/Tactic/CoeExt.lean:97:79: error: invalid dotted identifier notation, unknown identifier <code>Tactic.NormCast.CoeFnType.coe</code> from expected type<br>\n  CoeFnType<br>\nerror: external command <code>/Users/thomas/.elan/toolchains/leanprover--lean4---nightly-2022-09-11/bin/lean</code> exited with code 1<br>\ninfo: Building Mathlib.Init.Zero<br>\ninfo: Building Mathlib.Tactic.Spread<br>\ninfo: Building Mathlib.Init.Function<br>\ninfo: Building Mathlib.Init.Data.Option.Basic<br>\ninfo: Building Mathlib.Init.Data.Option.Instances<br>\ninfo: Building Mathlib.Lean.Expr.Basic<br>\ninfo: Building Mathlib.Util.MemoFix<br>\ninfo: Building Mathlib.Tactic.Coe<br>\ninfo: Building Mathlib.Data.Char<br>\nerror: &gt; LEAN_PATH=./lean_packages/mathlib3port/build/lib:./lean_packages/mathlib/build/lib:./lean_packages/lean3port/build/lib:./build/lib:./lean_packages/std/build/lib DYLD_LIBRARY_PATH=/Users/thomas/.elan/toolchains/leanprover--lean4---nightly-2022-09-11/lib:./lean_packages/mathlib3port/build/lib:./lean_packages/mathlib/build/lib:./lean_packages/lean3port/build/lib:./build/lib:./lean_packages/std/build/lib:./lean_packages/std/build/lib /Users/thomas/.elan/toolchains/leanprover--lean4---nightly-2022-09-11/bin/lean -DwarningAsError=true -Dlinter.missingDocs=true ./lean_packages/std/././Std/Tactic/GuardExpr.lean -R ./lean_packages/std/./. -o ./lean_packages/std/build/lib/Std/Tactic/GuardExpr.olean -i ./lean_packages/std/build/lib/Std/Tactic/GuardExpr.ilean -c ./lean_packages/std/build/ir/Std/Tactic/GuardExpr.c<br>\nerror: stdout:<br>\n./lean_packages/std/././Std/Tactic/GuardExpr.lean:19:0: error: expected 'abbrev', 'add_decl_doc', 'axiom', 'builtin_initialize', 'class', 'declare_simp_like_tactic', 'declare_syntax_cat', 'def', 'elab', 'elab_rules', 'example', 'inductive', 'infix', 'infixl', 'infixr', 'initialize', 'instance', 'macro', 'macro_rules', 'notation', 'opaque', 'postfix', 'prefix', 'register_builtin_option', 'register_option', 'register_simp_attr', 'structure', 'syntax', 'theorem' or 'unif_hint'<br>\n./lean_packages/std/././Std/Tactic/GuardExpr.lean:21:0: error: expected 'abbrev', 'add_decl_doc', 'axiom', 'builtin_initialize', 'class', 'declare_simp_like_tactic', 'declare_syntax_cat', 'def', 'elab', 'elab_rules', 'example', 'inductive', 'infix', 'infixl', 'infixr', 'initialize', 'instance', 'macro', 'macro_rules', 'notation', 'opaque', 'postfix', 'prefix', 'register_builtin_option', 'register_option', 'register_simp_attr', 'structure', 'syntax', 'theorem' or 'unif_hint'<br>\n./lean_packages/std/././Std/Tactic/GuardExpr.lean:23:0: error: expected 'abbrev', 'add_decl_doc', 'axiom', 'builtin_initialize', 'class', 'declare_simp_like_tactic', 'declare_syntax_cat', 'def', 'elab', 'elab_rules', 'example', 'inductive', 'infix', 'infixl', 'infixr', 'initialize', 'instance', 'macro', 'macro_rules', 'notation', 'opaque', 'postfix', 'prefix', 'register_builtin_option', 'register_option', 'register_simp_attr', 'structure', 'syntax', 'theorem' or 'unif_hint'<br>\n./lean_packages/std/././Std/Tactic/GuardExpr.lean:50:24: error: invalid dotted identifier notation, unknown identifier <code>Std.Tactic.GuardExpr.MatchKind.syntactic</code> from expected type<br>\n  MatchKind<br>\n./lean_packages/std/././Std/Tactic/GuardExpr.lean:51:25: error: invalid dotted identifier notation, unknown identifier <code>Std.Tactic.GuardExpr.MatchKind.alphaEq</code> from expected type<br>\n  MatchKind<br>\n./lean_packages/std/././Std/Tactic/GuardExpr.lean:56:27: error: invalid dotted identifier notation, unknown identifier <code>Std.Tactic.GuardExpr.MatchKind.syntactic</code> from expected type<br>\n  MatchKind<br>\n./lean_packages/std/././Std/Tactic/GuardExpr.lean:57:28: error: invalid dotted identifier notation, unknown identifier <code>Std.Tactic.GuardExpr.MatchKind.alphaEq</code> from expected type<br>\n  MatchKind<br>\n./lean_packages/std/././Std/Tactic/GuardExpr.lean:62:24: error: invalid dotted identifier notation, unknown identifier <code>Std.Tactic.GuardExpr.MatchKind.defEq</code> from expected type<br>\n  MatchKind<br>\n./lean_packages/std/././Std/Tactic/GuardExpr.lean:63:25: error: invalid dotted identifier notation, unknown identifier <code>Std.Tactic.GuardExpr.MatchKind.syntactic</code> from expected type<br>\n  MatchKind<br>\n./lean_packages/std/././Std/Tactic/GuardExpr.lean:64:25: error: invalid dotted identifier notation, unknown identifier <code>Std.Tactic.GuardExpr.MatchKind.alphaEq</code> from expected type<br>\n  MatchKind<br>\n./lean_packages/std/././Std/Tactic/GuardExpr.lean:69:4: error: invalid dotted identifier notation, unknown identifier <code>Std.Tactic.GuardExpr.MatchKind.syntactic</code> from expected type<br>\n  MatchKind</p>\n</div></div>",
        "id": 300933673,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664250714
    },
    {
        "content": "<p>Somehow the error got much longer, so that's just a sample. I suppose it must be a different error, on some level...</p>",
        "id": 300933726,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664250730
    },
    {
        "content": "<p>mathlib4, not mathlib3port</p>",
        "id": 300933783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664250800
    },
    {
        "content": "<p>what's in your <code>lean_packages/manifest.json</code> file?</p>",
        "id": 300933802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664250832
    },
    {
        "content": "<p>Oh, ok, an earlier message suggested this: \"simply <code>require</code>'ing mathlib3port and importing Mathlib should be enough\" so that's what I was going off of!</p>",
        "id": 300933868,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664250877
    },
    {
        "content": "<p>Let's find out...</p>",
        "id": 300933873,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664250881
    },
    {
        "content": "<p>Here it is:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>manifest.json</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>{\"version\": 2,<br>\n \"packages\":<br>\n [{\"url\": \"<a href=\"https://github.com/mhuisi/lean4-cli\">https://github.com/mhuisi/lean4-cli</a>\",<br>\n   \"rev\": \"112b35fc348a4a18d2111ac2c6586163330b4941\",<br>\n   \"name\": \"Cli\"},<br>\n  {\"url\": \"<a href=\"https://github.com/hargonix/LeanInk\">https://github.com/hargonix/LeanInk</a>\",<br>\n   \"rev\": \"439303af06465824588a486f5f9c023ca69979f3\",<br>\n   \"name\": \"leanInk\"},<br>\n  {\"url\": \"<a href=\"https://github.com/leanprover-community/mathlib3port\">https://github.com/leanprover-community/mathlib3port</a>\",<br>\n   \"rev\": \"9d2aa54216553f283e6efe011d4aa71cae0abd50\",<br>\n   \"name\": \"mathlib3port\"},<br>\n  {\"url\": \"<a href=\"https://github.com/leanprover/doc-gen4\">https://github.com/leanprover/doc-gen4</a>\",<br>\n   \"rev\": \"a2345380e861332fabecc61591cb274e61163a97\",<br>\n   \"name\": \"doc-gen4\",<br>\n   \"inputRev\": \"main\"},<br>\n  {\"url\": \"<a href=\"https://github.com/xubaiw/Unicode.lean\">https://github.com/xubaiw/Unicode.lean</a>\",<br>\n   \"rev\": \"25b32ef69fd6d8ae34300d51dc0b9403ffb1fd29\",<br>\n   \"name\": \"Unicode\"},<br>\n  {\"url\": \"<a href=\"https://github.com/leanprover-community/mathlib4.git\">https://github.com/leanprover-community/mathlib4.git</a>\",<br>\n   \"rev\": \"dd1ecc5d3aefab6a83767079c7d020f4aa254a24\",<br>\n   \"name\": \"mathlib\",<br>\n   \"inputRev\": \"dd1ecc5d3aefab6a83767079c7d020f4aa254a24\"},<br>\n  {\"url\": \"<a href=\"https://github.com/leanprover-community/lean3port.git\">https://github.com/leanprover-community/lean3port.git</a>\",<br>\n   \"rev\": \"b73dfeb9e288603ef280d4ccf8dd8d3af7b244fc\",<br>\n   \"name\": \"lean3port\",<br>\n   \"inputRev\": \"b73dfeb9e288603ef280d4ccf8dd8d3af7b244fc\"},<br>\n  {\"url\": \"<a href=\"https://github.com/leanprover/std4\">https://github.com/leanprover/std4</a>\",<br>\n   \"rev\": \"52c2324923b7f83e4e9b82ca9c8284f7a86bd3e8\",<br>\n   \"name\": \"std\",<br>\n   \"inputRev\": \"main\"},<br>\n  {\"url\": \"<a href=\"https://github.com/leanprover/lake\">https://github.com/leanprover/lake</a>\",<br>\n   \"rev\": \"6cfb4e3fd7ff700ace8c2cfdb85056d59f321920\",<br>\n   \"name\": \"lake\"},<br>\n  {\"url\": \"<a href=\"https://github.com/xubaiw/CMark.lean\">https://github.com/xubaiw/CMark.lean</a>\",<br>\n   \"rev\": \"8c0f9c1b16ee8047813f43b1f92de471782114ff\",<br>\n   \"name\": \"CMark\"}]}</p>\n</div></div>",
        "id": 300933951,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664250910
    },
    {
        "content": "<p>You have the latest commit of <code>std4</code> there, which is on 09-26, so I don't think it will play well with mathlib3port from 09-11</p>",
        "id": 300934071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664251047
    },
    {
        "content": "<p>Hmm, that's strange. I did just <code>rm -rf</code> this.</p>",
        "id": 300934132,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664251094
    },
    {
        "content": "<p>well mathlib3port hasn't been released in a while</p>",
        "id": 300934143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664251113
    },
    {
        "content": "<p>so it's probably not your fault</p>",
        "id": 300934149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664251129
    },
    {
        "content": "<p>Huh, ok. Is <code>std</code> coming...via <code>mathlip3port</code>, so to speak? Or from somewhere else? Is there any way to force it to play nice?</p>",
        "id": 300934252,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664251206
    },
    {
        "content": "<p>lean4 -&gt; std4 -&gt; mathlib4 -&gt; mathlib3port</p>",
        "id": 300934281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664251242
    },
    {
        "content": "<p>I see</p>",
        "id": 300934294,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664251259
    },
    {
        "content": "<p>I think you are likely to have best results using the 09-26 nightly</p>",
        "id": 300934310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664251278
    },
    {
        "content": "<p>I would have thought using a <code>2022-9-11</code> lean toolchain would have prevented that, though?</p>",
        "id": 300934319,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664251296
    },
    {
        "content": "<p>since mathlib3port doesn't make much use of lean features</p>",
        "id": 300934321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664251298
    },
    {
        "content": "<p>Ok, that's what I started with—but then is there a way to make it work with mathlib binaries?</p>",
        "id": 300934347,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664251325
    },
    {
        "content": "<p>building std4 on 09-11 is not going to work, it uses features from the future</p>",
        "id": 300934368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664251329
    },
    {
        "content": "<p>the alternative is to check out an old version of the dependencies, that is, use whatever version there was on 09-11</p>",
        "id": 300934428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664251359
    },
    {
        "content": "<p>I think that's what I'd like to do if it's the only way to use the mathlib binaries—if there's another way I'm all ears though</p>",
        "id": 300934462,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664251398
    },
    {
        "content": "<p>std4 -&gt; 6488a2afeb62fb4c781d26d629796480c8270b2f<br>\nmathlib4 -&gt; dd1ecc5d3aefab6a83767079c7d020f4aa254a24</p>",
        "id": 300934521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664251457
    },
    {
        "content": "<p>put those in your manifest</p>",
        "id": 300934534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664251485
    },
    {
        "content": "<p>oo ok great! (Aside: I also would have naively thought specifying a toolchain date would have prevented using features from the future, though. my <code>lean-toolchain</code> is <code>leanprover/lean4:nightly-2022-09-11</code>, so I'd expect it to only use things from then or earlier in the \"lean4 -&gt;\" stage.)</p>",
        "id": 300934563,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664251536
    },
    {
        "content": "<p>yeah, lake isn't very good at managing the lean toolchain version</p>",
        "id": 300934577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664251559
    },
    {
        "content": "<p>it just uses whatever you specify and hopes for the best</p>",
        "id": 300934625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664251572
    },
    {
        "content": "<p>ah gotcha lol</p>",
        "id": 300934636,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664251599
    },
    {
        "content": "<p>Ok, is it <code>lake update</code> now?</p>",
        "id": 300934639,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664251605
    },
    {
        "content": "<p>Asking for the versions to match exactly is also problematic though, because there's a new version every day and maintainers can't keep up with  that pace</p>",
        "id": 300934647,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664251621
    },
    {
        "content": "<p>most of the time whatever changes there were are not relevant to the library</p>",
        "id": 300934667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664251646
    },
    {
        "content": "<p><code>lake update</code> will update the manifest to the latest version of everything, which will undo the work you just did</p>",
        "id": 300934674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664251670
    },
    {
        "content": "<p>ah! I understand now haha</p>",
        "id": 300934724,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664251691
    },
    {
        "content": "<p>ok, I've tried deleting everything but the manifest and rebuilding, but now it doesn't like any of the imports in <code>lean_packages/std/Std.lean</code> either...hmmm</p>",
        "id": 300935078,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664252074
    },
    {
        "content": "<p>hmm, the <code>lean_packages/std/lean-toolchain</code> is still the <code>9-26</code> nightly build</p>",
        "id": 300935183,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664252187
    },
    {
        "content": "<p>(and as far as I can tell no update has taken place; <code>6488a2afeb62fb4c781d26d629796480c8270b2f</code> is still in the manifest)</p>",
        "id": 300935241,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664252282
    },
    {
        "content": "<p>does <code>lake</code> actually <em>use</em> the manifest or is it meant to be more of a record? if it does use it, I'm not sure why this isn't working...hmmm. perhaps this can be fixed by fixing <code>lake</code> somehow...I'm going to investigate tomorrow :) (I also wonder if people would agree that this needs to be fixed in <code>lake</code>. my argument would be that the point of having versioned toolchains is to prevent breaking changes like this! :) )</p>",
        "id": 300935929,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664253044
    },
    {
        "content": "<p>anyway thanks to both of you for all of your help so far! :) I’m not giving up…we’ll figure this out eventually!</p>",
        "id": 300936516,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664253590
    },
    {
        "content": "<p>There is some ongoing discussion (<a href=\"#narrow/stream/270676-lean4/topic/.22Perfect.20world.22.20dependency.20management\">here</a> and <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20broken\">here</a>) about precisely this issue... the answer isn't straightforward</p>",
        "id": 300937605,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664254483
    },
    {
        "content": "<p>lake checks out the commit in the manifest first thing when you run <code>lake build</code>, at least in my experience</p>",
        "id": 300937626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664254507
    },
    {
        "content": "<p>but one way to be sure is to copy the manifest file, delete the <code>lean_packages</code> folder entirely, restore the manifest and call <code>lake build</code></p>",
        "id": 300937690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664254555
    },
    {
        "content": "<p>(that file should really not be in the <code>lean_packages</code> folder)</p>",
        "id": 300937803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664254623
    },
    {
        "content": "<p>I'm not even confident that's the case, given how I'm now observing <a href=\"#narrow/stream/270676-lean4/topic/lake.20build.20updating.20manifest.3F\">lake changing my manifest without me asking it to</a>. Just haven't had time to investigate why</p>",
        "id": 300937809,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664254626
    },
    {
        "content": "<blockquote>\n<p>but one way to be sure is to copy the manifest file, delete the lean_packages folder entirely, restore the manifest and call lake build</p>\n</blockquote>\n<p>Hmm...I moved the modified <code>manifest.json</code> to the top level of the project and <code>rm -rf</code>'d <code>lean_packages</code> and <code>build</code>, then called <code>lake build</code>. This generated a new manifest inside the created <code>lean_packages</code>, and still used a <code>std</code> that had a <code>9-26</code> toolchain, unfortunately :/</p>",
        "id": 301154813,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664337233
    },
    {
        "content": "<p>you have to restore the manifest before calling <code>lake build</code></p>",
        "id": 301155407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664337790
    },
    {
        "content": "<p>what does it mean to restore a manifest?</p>",
        "id": 301155419,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664337807
    },
    {
        "content": "<p>put the file you copied back where it was</p>",
        "id": 301155422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664337820
    },
    {
        "content": "<p>it was in <code>lean_packages</code>, though</p>",
        "id": 301155426,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664337831
    },
    {
        "content": "<p>so that nuking the lean_packages folder doesn't also nuke your changes</p>",
        "id": 301155445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664337843
    },
    {
        "content": "<p>That is, you want to delete everything in <code>lean_packages</code> <em>except</em> the manifest that is the only record that you are interested in something other than the latest version</p>",
        "id": 301155518,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664337932
    },
    {
        "content": "<p>right, ok; I had tried that last night already, as it happens</p>",
        "id": 301155585,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664337984
    },
    {
        "content": "<p>what I hadn't tried was keeping it outside the folder</p>",
        "id": 301155592,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664337999
    },
    {
        "content": "<p>if you run <code>lake build</code> with a <code>lean_packages</code> folder that only has the modified manifest in it and nothing else, in my experience lake will respect it and download the right versions</p>",
        "id": 301155623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664338042
    },
    {
        "content": "<p>I did find something weird playing around (well, weird since I don't know what it means, lol): changing <code>inputRev</code> in the manifest seems to successfully change the <code>std</code> that gets cloned to one with a <code>9-11</code> toolchain</p>",
        "id": 301155624,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664338043
    },
    {
        "content": "<p>gotcha; I just tried it again, and unfortunately deleting everything but the manifest in <code>lean_packages</code> didn't work :/</p>",
        "id": 301155639,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664338068
    },
    {
        "content": "<p>I usually update the <code>\"rev\"</code> field, this should make lake download the version</p>",
        "id": 301155710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664338130
    },
    {
        "content": "<p>Yeah, that's what I had been trying already</p>",
        "id": 301155721,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664338143
    },
    {
        "content": "<p>(which wasn't working, so I tried changing the <code>inputRev</code> as well)</p>",
        "id": 301155731,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664338157
    },
    {
        "content": "<p>and it's updating the rev?</p>",
        "id": 301155732,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664338158
    },
    {
        "content": "<p>so to be clear, if this is in my manifest</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span><span class=\"s2\">\"url\"</span><span class=\"o\">:</span> <span class=\"s2\">\"https://github.com/leanprover/std4\"</span><span class=\"o\">,</span>\n   <span class=\"s2\">\"rev\"</span><span class=\"o\">:</span> <span class=\"s2\">\"6488a2afeb62fb4c781d26d629796480c8270b2f\"</span><span class=\"o\">,</span>\n   <span class=\"s2\">\"name\"</span><span class=\"o\">:</span> <span class=\"s2\">\"std\"</span><span class=\"o\">,</span>\n   <span class=\"s2\">\"inputRev\"</span><span class=\"o\">:</span> <span class=\"s2\">\"main\"</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>it doesn't work; clones a version of <code>std</code> with <code>lean-toolchain</code> <code>leanprover/lean4:nightly-2022-09-26</code>, which isn't consistent with rev <code>6488a2afeb62fb4c781d26d629796480c8270b2f</code> of <code>std</code> on github.</p>",
        "id": 301155824,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664338245
    },
    {
        "content": "<p>It is downloading <code>6488a2</code> though?</p>",
        "id": 301155918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664338349
    },
    {
        "content": "<p>no, it's not; if it were, the <code>lean-toolchain</code> in <code>std</code> ould be for <code>9-11</code></p>",
        "id": 301155935,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664338381
    },
    {
        "content": "<p>what version is it?</p>",
        "id": 301155943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664338397
    },
    {
        "content": "<p>it says \"downloading version XYZ\" when it goes to github</p>",
        "id": 301155954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664338415
    },
    {
        "content": "<p>hmm, do I need a verbose option for <code>lake build</code> or something? currently it just says <code>info: cloning https://github.com/leanprover/std4 to ./lean_packages/std</code></p>",
        "id": 301156032,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664338484
    },
    {
        "content": "<p>specifically, I get a message like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">updating</span> <span class=\"bp\">./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">std</span> <span class=\"n\">to</span> <span class=\"n\">revision</span> <span class=\"mi\">6488</span><span class=\"n\">a2afeb62fb4c781d26d629796480c8270b2f</span>\n</code></pre></div>\n<p>when I change the manifest and run <code>lake build</code></p>",
        "id": 301156049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664338504
    },
    {
        "content": "<p>actually, ok, something else very weird: it updates the manifest without me touching it</p>",
        "id": 301156055,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664338505
    },
    {
        "content": "<p>and you have <code>\"inputRev\": \"main\"</code> as well?</p>",
        "id": 301156091,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664338540
    },
    {
        "content": "<p>yes</p>",
        "id": 301156095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664338545
    },
    {
        "content": "<p>hmmmm</p>",
        "id": 301156145,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664338569
    },
    {
        "content": "<p>oh, no when I delete the directory entirely it doesn't report the revision</p>",
        "id": 301156198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664338627
    },
    {
        "content": "<p>but if you go inside <code>lean_packages/std/</code> and run <code>git rev-parse HEAD</code> it will report the revision</p>",
        "id": 301156224,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664338680
    },
    {
        "content": "<p>hmm yep, that gives me <code>52c2324923b7f83e4e9b82ca9c8284f7a86bd3e8</code></p>",
        "id": 301156289,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664338727
    },
    {
        "content": "<p>what happens if you <code>git checkout 6488a2afeb62fb4c781d26d629796480c8270b2f</code> and change the manifest to match?</p>",
        "id": 301156321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664338770
    },
    {
        "content": "<p>this is really weird</p>",
        "id": 301156324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664338779
    },
    {
        "content": "<p>ok VERY strange</p>",
        "id": 301156394,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664338835
    },
    {
        "content": "<p>i successfully checked out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Previous</span> <span class=\"n\">HEAD</span> <span class=\"n\">position</span> <span class=\"n\">was</span> <span class=\"mi\">52</span><span class=\"n\">c2324</span> <span class=\"n\">feat</span><span class=\"o\">:</span> <span class=\"n\">use</span> <span class=\"n\">simp</span> <span class=\"n\">trace</span> <span class=\"n\">support</span> <span class=\"k\">in</span> <span class=\"n\">simpNF</span> <span class=\"n\">linter</span>\n<span class=\"n\">HEAD</span> <span class=\"n\">is</span> <span class=\"n\">now</span> <span class=\"n\">at</span> <span class=\"mi\">6488</span><span class=\"n\">a2a</span> <span class=\"n\">chore</span><span class=\"o\">:</span> <span class=\"n\">update</span> <span class=\"n\">nightly</span> <span class=\"mi\">09</span><span class=\"bp\">-</span><span class=\"mi\">11</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"mi\">7</span><span class=\"o\">)</span>\n</code></pre></div>\n<p><code>cd</code>'d back up to the project level, changed the <code>rev</code> in the manifest and made sure to save it; <code>lake build</code> then changed the manifest back as I watched <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 301156423,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664338896
    },
    {
        "content": "<p>what's in the <code>lakefile.lean</code>?</p>",
        "id": 301156483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664338936
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>lakefile.lean</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>import Lake<br>\nopen Lake DSL</p>\n<p>package moonshine</p>\n<p>require mathlib3port from git<br>\n  \"<a href=\"https://github.com/leanprover-community/mathlib3port\">https://github.com/leanprover-community/mathlib3port</a>\"</p>\n<p>lean_lib Moonshine {<br>\n  -- add library configuration options here<br>\n}</p>\n<p>@[defaultTarget]<br>\nlean_exe moonshine {<br>\n  root := `Main<br>\n}</p>\n</div></div>",
        "id": 301156503,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664338970
    },
    {
        "content": "<p>(The only thing I changed/added was the <code>require</code> statement)</p>",
        "id": 301156557,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664339029
    },
    {
        "content": "<p>now, for whatever reason, if I change <code>inputRev</code> (and maybe this is obvious; I don't yet know what <code>inputRev</code> means) I get the messages</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">std</span><span class=\"o\">:</span> <span class=\"n\">revision</span> <span class=\"bp\">`</span><span class=\"mi\">6488</span><span class=\"n\">a2afeb62fb4c781d26d629796480c8270b2f</span><span class=\"bp\">`</span> <span class=\"n\">listed</span> <span class=\"k\">in</span> <span class=\"n\">manifest</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">match</span> <span class=\"bp\">`</span><span class=\"n\">main</span><span class=\"bp\">`</span> <span class=\"n\">listed</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">configuration</span> <span class=\"n\">file</span><span class=\"bp\">;</span> <span class=\"n\">you</span> <span class=\"n\">may</span> <span class=\"n\">wish</span> <span class=\"n\">to</span> <span class=\"n\">run</span> <span class=\"bp\">`</span><span class=\"n\">lake</span> <span class=\"n\">update</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">update</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">updating</span> <span class=\"bp\">./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">std</span> <span class=\"n\">to</span> <span class=\"n\">revision</span> <span class=\"mi\">6488</span><span class=\"n\">a2afeb62fb4c781d26d629796480c8270b2f</span>\n</code></pre></div>",
        "id": 301156637,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664339077
    },
    {
        "content": "<p>and then indeed the revision is reported by <code>git rev-parse HEAD </code> as <code>6488a2afeb62fb4c781d26d629796480c8270b2f</code>. however, nothing works this time either, because of the mismatch between the configuration files</p>",
        "id": 301156832,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664339144
    },
    {
        "content": "<p><code>inputRev</code> means the revision specified in the input i.e. in the lakefile</p>",
        "id": 301156916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664339214
    },
    {
        "content": "<p>because the only thing better than global mutable state is having that state in two places that have to match</p>",
        "id": 301156956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664339254
    },
    {
        "content": "<p>haha yes</p>",
        "id": 301156963,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664339265
    },
    {
        "content": "<p>so I'm guessing something's up with how <code>lake</code> uses</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[defaultTarget]</span>\n<span class=\"n\">lean_exe</span> <span class=\"n\">moonshine</span> <span class=\"o\">{</span>\n  <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Main</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>?</p>",
        "id": 301157018,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664339304
    },
    {
        "content": "<p>because if I sort of...\"disconnect\" <code>std</code>'s manifest entry from its <code>inputRev</code>, I don't get the weird behavior. so somehow I'm guessing...if <code>lake build</code> sees <code>main</code>, it decides to update the manifest entry and <code>std</code>, presumably in accordance with something determined by what it saw there, i.e. <code>main</code>?</p>",
        "id": 301157246,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664339565
    },
    {
        "content": "<p>and for whatever it's worth, if i just straight up delete the <code>inputRev</code> key from the <code>std</code> entry in the manifest, I still get an error on <code>import Mathlib</code>, but it's this:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Long Error</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p><code>/Users/thomas/.elan/toolchains/leanprover--lean4---nightly-2022-09-11/bin/lake print-paths Init Mathlib</code> failed:</p>\n<p>stderr:<br>\ninfo: Building Mathlib.Init.Data.Nat.Basic<br>\ninfo: Building Mathlib.Tactic.Alias<br>\ninfo: Building Mathlib.Init.Zero<br>\ninfo: Building Mathlib.Tactic.Spread<br>\ninfo: Building Mathlib.Init.Data.Int.Notation<br>\ninfo: Building Mathlib.Init.Function<br>\ninfo: Building Mathlib.Init.Data.Option.Basic<br>\ninfo: Building Mathlib.Init.Data.Option.Instances<br>\ninfo: Building Mathlib.Lean.Expr.Basic<br>\ninfo: Building Mathlib.Util.MemoFix<br>\ninfo: Building Mathlib.Tactic.Coe<br>\ninfo: Building Mathlib.Data.Char<br>\ninfo: Building Mathlib.Lean.Exception<br>\ninfo: Building Mathlib.Lean.LocalContext<br>\ninfo: Building Mathlib.Logic.Equiv.MfldSimpsAttr<br>\ninfo: Building Mathlib.Mathport.Attributes<br>\ninfo: Building Mathlib.Mathport.Rename<br>\ninfo: Building Mathlib.Tactic.Clear!<br>\ninfo: Building Mathlib.Tactic.ClearExcept<br>\ninfo: Building Mathlib.Tactic.Clear_<br>\ninfo: Building Mathlib.Tactic.Inhabit<br>\ninfo: Building Mathlib.Tactic.LeftRight<br>\ninfo: Building Mathlib.Tactic.TryThis<br>\ninfo: Building Mathlib.Tactic.SudoSetOption<br>\ninfo: Building Mathlib.Tactic.Set<br>\ninfo: Building Mathlib.Tactic.Simps<br>\ninfo: Building Mathlib.Tactic.Substs<br>\ninfo: Building Mathlib.Util.WithWeakNamespace<br>\ninfo: Building Mathlib.Util.Syntax<br>\ninfo: Building Mathlib.Tactic.Constructor<br>\ninfo: Building Mathlib.Tactic.Expect<br>\ninfo: Building Mathlib.Tactic.GuardGoalNums<br>\ninfo: Building Mathlib.Tactic.GuardHypNums<br>\ninfo: Building Mathlib.Tactic.IrreducibleDef<br>\ninfo: Building Mathlib.Tactic.PrintPrefix<br>\ninfo: Building Mathlib.Tactic.Rename<br>\ninfo: Building Mathlib.Tactic.RestateAxiom<br>\ninfo: Building Mathlib.Tactic.SeqFocus<br>\ninfo: Building Mathlib.Tactic.SimpRw<br>\ninfo: Building Mathlib.Tactic.TypeCheck<br>\ninfo: Building Mathlib.Util.Export<br>\ninfo: Building Mathlib.Tactic.Use<br>\ninfo: Building Mathlib.Util.IncludeStr<br>\ninfo: Building Mathlib.Util.Time<br>\ninfo: Building Mathlib.Tactic.RunCmd<br>\ninfo: Building Mathlib.Tactic.Trace<br>\ninfo: Building Mathlib.Tactic.ApplyWith<br>\ninfo: Building Mathlib.Util.Simp<br>\ninfo: Building Mathlib.Mathport.SpecialNames<br>\ninfo: Building Mathlib.Util.Tactic<br>\ninfo: Building Mathlib.Tactic.HelpCmd<br>\ninfo: Building Mathlib.Tactic.InferParam<br>\ninfo: Building Mathlib.Lean.Expr.Traverse<br>\ninfo: Building Mathlib.Tactic.ShowTerm<br>\ninfo: Building Mathlib.Util.WhatsNew<br>\ninfo: Building Mathlib.Logic.Nonempty<br>\ninfo: Building Mathlib.Init.Set<br>\ninfo: Building Mathlib.Data.Option.Defs<br>\ninfo: Building Mathlib.Tactic.Conv<br>\ninfo: Building Mathlib.Tactic.CommandQuote<br>\ninfo: Building Mathlib.Tactic.SwapVar<br>\ninfo: Building Mathlib.Tactic.RenameBVar<br>\ninfo: Building Mathlib.Lean.Expr.ReplaceRec<br>\ninfo: Building Mathlib.Tactic.Cache<br>\ninfo: Building Mathlib.Tactic.Cases<br>\ninfo: Building Mathlib.Tactic.PermuteGoals<br>\ninfo: Building Std<br>\ninfo: Building Mathlib.Lean.Expr<br>\ninfo: Building Mathlib.Tactic.Basic<br>\ninfo: Building Mathlib.Data.Array.Defs<br>\ninfo: Building Mathlib.Tactic.Find<br>\ninfo: Building Mathlib.Tactic.Recover<br>\ninfo: Building Mathlib.Tactic.Core<br>\ninfo: Building Mathlib.Tactic.Have<br>\ninfo: Building Mathlib.Tactic.Simpa<br>\ninfo: Building Mathlib.Tactic.SolveByElim<br>\ninfo: Building Mathlib.Tactic.LibrarySearch<br>\ninfo: Building Mathlib.Tactic.Existsi<br>\ninfo: Building Mathlib.Init.Logic<br>\ninfo: Building Mathlib.Tactic.Replace<br>\ninfo: Building Mathlib.Init.Algebra.Order<br>\ninfo: Building Mathlib.Logic.Equiv.LocalEquiv<br>\ninfo: Building Mathlib.Logic.Basic<br>\ninfo: Building Mathlib.Data.Option.Basic<br>\ninfo: Building Mathlib.Init.Algebra.Functions<br>\ninfo: Building Mathlib.Tactic.PushNeg<br>\ninfo: Building Mathlib.Init.Data.Nat.Lemmas<br>\ninfo: Building Mathlib.Data.Nat.Basic<br>\ninfo: Building Mathlib.Logic.Function.Basic<br>\ninfo: Building Mathlib.Tactic.ByContra<br>\ninfo: Building Mathlib.Data.Equiv.Basic<br>\ninfo: Building Mathlib.Data.Prod<br>\ninfo: Building Mathlib.Data.Subtype<br>\ninfo: Building Mathlib.Data.List.Basic<br>\ninfo: Building Mathlib.Data.Equiv.Functor<br>\ninfo: Building Mathlib.Order.Basic<br>\nerror: &gt; LEAN_PATH=./lean_packages/mathlib3port/build/lib:./lean_packages/mathlib/build/lib:./lean_packages/lean3port/build/lib:./build/lib:./lean_packages/std/build/lib DYLD_LIBRARY_PATH=/Users/thomas/.elan/toolchains/leanprover--lean4---nightly-2022-09-11/lib:./lean_packages/mathlib3port/build/lib:./lean_packages/mathlib/build/lib:./lean_packages/lean3port/build/lib:./build/lib:./lean_packages/std/build/lib:./lean_packages/mathlib/build/lib /Users/thomas/.elan/toolchains/leanprover--lean4---nightly-2022-09-11/bin/lean ./lean_packages/mathlib/././Mathlib/Data/List/Basic.lean -R ./lean_packages/mathlib/./. -o ./lean_packages/mathlib/build/lib/Mathlib/Data/List/Basic.olean -i ./lean_packages/mathlib/build/lib/Mathlib/Data/List/Basic.ilean -c ./lean_packages/mathlib/build/ir/Mathlib/Data/List/Basic.c<br>\nerror: stdout:<br>\n./lean_packages/mathlib/././Mathlib/Data/List/Basic.lean:62:6: error: unknown constant 'length_pos'<br>\n./lean_packages/mathlib/././Mathlib/Data/List/Basic.lean:103:1: error: invalid field notation, type is not of the form (C ...) where C is a constant<br>\n  forall_mem_cons<br>\nhas type<br>\n  ∀ (p : ?m.2849 → Prop) (a : ?m.2849) (l : List ?m.2849),<br>\n    (∀ (x : ?m.2849), x ∈ a :: l → p x) ↔ p a ∧ ∀ (x : ?m.2849), x ∈ l → p x<br>\n./lean_packages/mathlib/././Mathlib/Data/List/Basic.lean:111:0: error: invalid field notation, type is not of the form (C ...) where C is a constant<br>\n  exists_mem_cons<br>\nhas type<br>\n  ∀ (p : ?m.2982 → Prop) (a : ?m.2982) (l : List ?m.2982), (∃ x, x ∈ a :: l ∧ p x) ↔ p a ∨ ∃ x, x ∈ l ∧ p x<br>\n./lean_packages/mathlib/././Mathlib/Data/List/Basic.lean:115:0: error: invalid field notation, type is not of the form (C ...) where C is a constant<br>\n  exists_mem_cons<br>\nhas type<br>\n  ∀ (p : ?m.3060 → Prop) (a : ?m.3060) (l : List ?m.3060), (∃ x, x ∈ a :: l ∧ p x) ↔ p a ∨ ∃ x, x ∈ l ∧ p x<br>\n./lean_packages/mathlib/././Mathlib/Data/List/Basic.lean:159:2: error: invalid projection, structure expected<br>\n  append_right_inj ?m.3424<br>\nhas type<br>\n  ?m.3422 = ?m.3423<br>\n./lean_packages/mathlib/././Mathlib/Data/List/Basic.lean:162:2: error: invalid projection, structure expected<br>\n  append_left_inj ?m.3532<br>\nhas type<br>\n  ?m.3529 = ?m.3530<br>\n./lean_packages/mathlib/././Mathlib/Data/List/Basic.lean:247:55: error: function expected at<br>\n  length_pos_of_ne_nil<br>\nterm has type<br>\n  ?m.14283<br>\n./lean_packages/mathlib/././Mathlib/Data/List/Basic.lean:250:20: error: unsolved goals<br>\nα : Type u_1<br>\nx<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span> : Sort u_2<br>\nlength_pos_of_ne_nil : x<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span><br>\na b : α<br>\nl : List α<br>\nh : a :: b :: l ≠ []<br>\n⊢ Sort u_2</p>\n<p>α : Type u_1<br>\nx<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span> : Sort u_2<br>\nlength_pos_of_ne_nil : x<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span><br>\na b : α<br>\nl : List α<br>\nh : a :: b :: l ≠ []<br>\n⊢ ?m.14656<br>\n./lean_packages/mathlib/././Mathlib/Data/List/Basic.lean:257:75: error: unsolved goals<br>\nα : Type u_1<br>\nx : α<br>\nxs : List α<br>\nn : ℕ<br>\nh : n = length xs<br>\n⊢ Sort ?u.21182</p>\n<p>α : Type u_1<br>\nx : α<br>\nxs : List α<br>\nn : ℕ<br>\nh : n = length xs<br>\n⊢ ?m.21184<br>\n./lean_packages/mathlib/././Mathlib/Data/List/Basic.lean:285:17: error: type mismatch<br>\n  congr_arg (cons ?m.23440) (removeNth_eq_nth_tail ?m.23453 ?m.23454)<br>\nhas type<br>\n  ?m.23440 :: removeNth ?m.23454 ?m.23453 = ?m.23440 :: modifyNthTail tail ?m.23453 ?m.23454 : Prop<br>\nbut is expected to have type<br>\n  removeNth (a :: l) (n + 1) = modifyNthTail tail (n + 1) (a :: l) : Prop<br>\n./lean_packages/mathlib/././Mathlib/Data/List/Basic.lean:411:61: error: type mismatch<br>\n  rfl<br>\nhas type<br>\n  erasep p (a :: l) = erasep p (a :: l) : Prop<br>\nbut is expected to have type<br>\n  erasep p (a :: l) = bif p a then l else a :: erasep p l : Prop<br>\nerror: external command <code>/Users/thomas/.elan/toolchains/leanprover--lean4---nightly-2022-09-11/bin/lean</code> exited with code 1</p>\n</div></div>",
        "id": 301157473,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664339770
    },
    {
        "content": "<p>So <a href=\"https://github.com/leanprover/lake/blob/cabb1223b02c6bf799bf99b4329e6b666e2bbc9a/Lake/Load/Main.lean#L52-L59\">this code</a> looks pretty suspicious</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"k\">let</span> <span class=\"n\">shouldUpdate</span> <span class=\"o\">:=</span>\n        <span class=\"k\">match</span> <span class=\"n\">entry.inputRev</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">depEntry.inputRev</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">none</span><span class=\"o\">,</span>     <span class=\"n\">none</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">entry.rev</span> <span class=\"bp\">!=</span> <span class=\"n\">depEntry.rev</span>\n        <span class=\"bp\">|</span> <span class=\"n\">none</span><span class=\"o\">,</span>     <span class=\"n\">some</span> <span class=\"n\">_</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n        <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">_</span><span class=\"o\">,</span>   <span class=\"n\">none</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n        <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">rev</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">dep</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rev</span> <span class=\"bp\">=</span> <span class=\"n\">dep</span> <span class=\"bp\">∧</span> <span class=\"n\">entry.rev</span> <span class=\"bp\">≠</span> <span class=\"n\">depEntry.rev</span>\n      <span class=\"k\">let</span> <span class=\"n\">contributors</span> <span class=\"o\">:=</span> <span class=\"n\">entry.contributors.insert</span> <span class=\"n\">depPkg.name</span> <span class=\"n\">depEntry.toPersistentPackageEntry</span>\n      <span class=\"n\">modify</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">insert</span> <span class=\"o\">{</span><span class=\"n\">entry</span> <span class=\"k\">with</span> <span class=\"n\">contributors</span><span class=\"o\">,</span> <span class=\"n\">shouldUpdate</span><span class=\"o\">})</span>\n</code></pre></div>",
        "id": 301157603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664339896
    },
    {
        "content": "<p>oooo</p>",
        "id": 301157610,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664339912
    },
    {
        "content": "<p>Note that the function there was passed a <code>shouldUpdate</code> flag which isn't being checked here</p>",
        "id": 301157630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664339944
    },
    {
        "content": "<p><code>shouldUpdate</code> is false when running <code>lake build</code></p>",
        "id": 301157645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664339961
    },
    {
        "content": "<p>From the looks of that match, it seems that it decides to update in response to a mismatch of <code>rev</code> fields in a dependency</p>",
        "id": 301157742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664340058
    },
    {
        "content": "<p>cc: <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span></p>",
        "id": 301157766,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664340118
    },
    {
        "content": "<p>just in case it helps debug things, here's verbose output (<code>lake -v build</code>) for one of the \"weird\" instances, where <code>inputRev</code> is <code>main</code>, and where the <code>rev</code> is mysteriously changed from <code>6488a2...</code> to <code>52c232...</code>. This started with only a modified <code>lean_packages/manifest.json</code> and no other files.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>verbose build</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>info: cloning <a href=\"https://github.com/leanprover-community/mathlib3port\">https://github.com/leanprover-community/mathlib3port</a> to ./lean_packages/mathlib3port<br>\ninfo: &gt; git clone <a href=\"https://github.com/leanprover-community/mathlib3port\">https://github.com/leanprover-community/mathlib3port</a> ./lean_packages/mathlib3port<br>\ninfo: stderr:<br>\nCloning into './lean_packages/mathlib3port'...<br>\ninfo: &gt; git checkout --detach 9d2aa54216553f283e6efe011d4aa71cae0abd50    # in directory ./lean_packages/mathlib3port<br>\ninfo: stderr:<br>\nHEAD is now at 9d2aa542 bump to nightly-2022-09-13<br>\ninfo: cloning <a href=\"https://github.com/leanprover-community/lean3port.git\">https://github.com/leanprover-community/lean3port.git</a> to ./lean_packages/lean3port<br>\ninfo: &gt; git clone <a href=\"https://github.com/leanprover-community/lean3port.git\">https://github.com/leanprover-community/lean3port.git</a> ./lean_packages/lean3port<br>\ninfo: stderr:<br>\nCloning into './lean_packages/lean3port'...<br>\ninfo: &gt; git checkout --detach b73dfeb9e288603ef280d4ccf8dd8d3af7b244fc    # in directory ./lean_packages/lean3port<br>\ninfo: stderr:<br>\nHEAD is now at b73dfeb bump to nightly-2022-09-13<br>\ninfo: cloning <a href=\"https://github.com/leanprover-community/mathlib4.git\">https://github.com/leanprover-community/mathlib4.git</a> to ./lean_packages/mathlib<br>\ninfo: &gt; git clone <a href=\"https://github.com/leanprover-community/mathlib4.git\">https://github.com/leanprover-community/mathlib4.git</a> ./lean_packages/mathlib<br>\ninfo: stderr:<br>\nCloning into './lean_packages/mathlib'...<br>\ninfo: &gt; git checkout --detach dd1ecc5d3aefab6a83767079c7d020f4aa254a24    # in directory ./lean_packages/mathlib<br>\ninfo: stderr:<br>\nHEAD is now at dd1ecc5 chore: bump to 2022-09-11 (<a href=\"https://github.com/leanprover-community/mathlib/pull/406\">#406</a>)<br>\ninfo: cloning <a href=\"https://github.com/leanprover/std4\">https://github.com/leanprover/std4</a> to ./lean_packages/std<br>\ninfo: &gt; git clone <a href=\"https://github.com/leanprover/std4\">https://github.com/leanprover/std4</a> ./lean_packages/std<br>\ninfo: stderr:<br>\nCloning into './lean_packages/std'...<br>\ninfo: &gt; git checkout --detach 52c2324923b7f83e4e9b82ca9c8284f7a86bd3e8    # in directory ./lean_packages/std<br>\ninfo: stderr:<br>\nHEAD is now at 52c2324 feat: use simp trace support in simpNF linter<br>\ninfo: Found dependency <code>Cli</code><br>\n<code>mathlib3port</code> locked <code>master</code> at <code>112b35fc348a4a18d2111ac2c6586163330b4941</code><br>\n<code>mathlib</code> locked <code>master</code> at <code>112b35fc348a4a18d2111ac2c6586163330b4941</code><br>\n<code>lean3port</code> locked <code>master</code> at <code>112b35fc348a4a18d2111ac2c6586163330b4941</code><br>\nUsing <code>master</code> at <code>112b35fc348a4a18d2111ac2c6586163330b4941</code><br>\ninfo: Found dependency <code>leanInk</code><br>\n<code>mathlib3port</code> locked <code>master</code> at <code>439303af06465824588a486f5f9c023ca69979f3</code><br>\n<code>mathlib</code> locked <code>master</code> at <code>439303af06465824588a486f5f9c023ca69979f3</code><br>\n<code>lean3port</code> locked <code>master</code> at <code>439303af06465824588a486f5f9c023ca69979f3</code><br>\nUsing <code>master</code> at <code>439303af06465824588a486f5f9c023ca69979f3</code><br>\ninfo: Found dependency <code>mathlib3port</code><br>\nUsing <code>master</code> at <code>9d2aa54216553f283e6efe011d4aa71cae0abd50</code><br>\ninfo: Found dependency <code>doc-gen4</code><br>\n<code>mathlib3port</code> locked <code>main</code> at <code>a2345380e861332fabecc61591cb274e61163a97</code><br>\n<code>mathlib</code> locked <code>main</code> at <code>a2345380e861332fabecc61591cb274e61163a97</code><br>\n<code>lean3port</code> locked <code>main</code> at <code>a2345380e861332fabecc61591cb274e61163a97</code><br>\nUsing <code>main</code> at <code>a2345380e861332fabecc61591cb274e61163a97</code><br>\ninfo: Found dependency <code>Unicode</code><br>\n<code>mathlib3port</code> locked <code>master</code> at <code>25b32ef69fd6d8ae34300d51dc0b9403ffb1fd29</code><br>\n<code>mathlib</code> locked <code>master</code> at <code>25b32ef69fd6d8ae34300d51dc0b9403ffb1fd29</code><br>\n<code>lean3port</code> locked <code>master</code> at <code>25b32ef69fd6d8ae34300d51dc0b9403ffb1fd29</code><br>\nUsing <code>master</code> at <code>25b32ef69fd6d8ae34300d51dc0b9403ffb1fd29</code><br>\ninfo: Found dependency <code>mathlib</code><br>\n<code>mathlib3port</code> locked <code>dd1ecc5d3aefab6a83767079c7d020f4aa254a24</code> at <code>dd1ecc5d3aefab6a83767079c7d020f4aa254a24</code><br>\n<code>mathlib</code> locked <code>master</code> at <code>ecd37441047e490ff2ad339e16f45bb8b58591bd</code><br>\n<code>lean3port</code> locked <code>dd1ecc5d3aefab6a83767079c7d020f4aa254a24</code> at <code>dd1ecc5d3aefab6a83767079c7d020f4aa254a24</code><br>\nUsing <code>dd1ecc5d3aefab6a83767079c7d020f4aa254a24</code> at <code>dd1ecc5d3aefab6a83767079c7d020f4aa254a24</code><br>\ninfo: Found dependency <code>lean3port</code><br>\n<code>mathlib3port</code> locked <code>b73dfeb9e288603ef280d4ccf8dd8d3af7b244fc</code> at <code>b73dfeb9e288603ef280d4ccf8dd8d3af7b244fc</code><br>\nUsing <code>b73dfeb9e288603ef280d4ccf8dd8d3af7b244fc</code> at <code>b73dfeb9e288603ef280d4ccf8dd8d3af7b244fc</code><br>\ninfo: Found dependency <code>std</code><br>\n<code>mathlib3port</code> locked <code>main</code> at <code>1f3f0630659a96756377610db656253b18a6a7ee</code><br>\n<code>mathlib</code> locked <code>main</code> at <code>1fa9d80bc2991dec80cfa47d2053b45749d28497</code><br>\n<code>lean3port</code> locked <code>main</code> at <code>1f3f0630659a96756377610db656253b18a6a7ee</code><br>\nUsing <code>main</code> at <code>52c2324923b7f83e4e9b82ca9c8284f7a86bd3e8</code><br>\ninfo: Found dependency <code>lake</code><br>\n<code>mathlib3port</code> locked <code>master</code> at <code>6cfb4e3fd7ff700ace8c2cfdb85056d59f321920</code><br>\n<code>mathlib</code> locked <code>master</code> at <code>6cfb4e3fd7ff700ace8c2cfdb85056d59f321920</code><br>\n<code>lean3port</code> locked <code>master</code> at <code>6cfb4e3fd7ff700ace8c2cfdb85056d59f321920</code><br>\nUsing <code>master</code> at <code>6cfb4e3fd7ff700ace8c2cfdb85056d59f321920</code><br>\ninfo: Found dependency <code>CMark</code><br>\n<code>mathlib3port</code> locked <code>master</code> at <code>8c0f9c1b16ee8047813f43b1f92de471782114ff</code><br>\n<code>mathlib</code> locked <code>master</code> at <code>8c0f9c1b16ee8047813f43b1f92de471782114ff</code><br>\n<code>lean3port</code> locked <code>master</code> at <code>8c0f9c1b16ee8047813f43b1f92de471782114ff</code><br>\nUsing <code>master</code> at <code>8c0f9c1b16ee8047813f43b1f92de471782114ff</code><br>\nFetching oleans for Leanbin</p>\n<blockquote>\n<p>curl -L -O <a href=\"https://github.com/leanprover-community/mathport/releases/download/nightly-2022-09-13/lean3-binport.tar.gz\">https://github.com/leanprover-community/mathport/releases/download/nightly-2022-09-13/lean3-binport.tar.gz</a>    # in directory ./lean_packages/lean3port/build/lib<br>\nstderr:<br>\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current<br>\n                                 Dload  Upload   Total   Spent    Left  Speed<br>\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0<br>\n100 5246k  100 5246k    0     0  9690k      0 --:--:-- --:--:-- --:--:-- 9690k<br>\ntar -xzf lean3-binport.tar.gz    # in directory ./lean_packages/lean3port/build/lib<br>\nFetching oleans for Mathbin<br>\ncurl -L -O <a href=\"https://github.com/leanprover-community/mathport/releases/download/nightly-2022-09-13/mathlib3-binport.tar.gz\">https://github.com/leanprover-community/mathport/releases/download/nightly-2022-09-13/mathlib3-binport.tar.gz</a>    # in directory ./lean_packages/mathlib3port/build/lib<br>\nstderr:<br>\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current<br>\n                                 Dload  Upload   Total   Spent    Left  Speed<br>\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0<br>\n100  576M  100  576M    0     0  24.1M      0  0:00:23  0:00:23 --:--:-- 28.0M<br>\ntar -xzf mathlib3-binport.tar.gz    # in directory ./lean_packages/mathlib3port/build/lib<br>\nBuilding Moonshine<br>\nLEAN_PATH=./lean_packages/mathlib3port/build/lib:./lean_packages/mathlib/build/lib:./lean_packages/lean3port/build/lib:./build/lib:./lean_packages/std/build/lib DYLD_LIBRARY_PATH=/Users/thomas/.elan/toolchains/leanprover--lean4---nightly-2022-09-11/lib:./build/lib /Users/thomas/.elan/toolchains/leanprover--lean4---nightly-2022-09-11/bin/lean ./././Moonshine.lean -R ././. -o ./build/lib/Moonshine.olean -i ./build/lib/Moonshine.ilean -c ./build/ir/Moonshine.c<br>\nCompiling Moonshine<br>\nBuilding Main<br>\nLEAN_PATH=./lean_packages/mathlib3port/build/lib:./lean_packages/mathlib/build/lib:./lean_packages/lean3port/build/lib:./build/lib:./lean_packages/std/build/lib DYLD_LIBRARY_PATH=/Users/thomas/.elan/toolchains/leanprover--lean4---nightly-2022-09-11/lib:./build/lib /Users/thomas/.elan/toolchains/leanprover--lean4---nightly-2022-09-11/bin/lean ./././Main.lean -R ././. -o ./build/lib/Main.olean -i ./build/lib/Main.ilean -c ./build/ir/Main.c<br>\nCompiling Main<br>\n/Users/thomas/.elan/toolchains/leanprover--lean4---nightly-2022-09-11/bin/leanc -c -o ./build/ir/Moonshine.o ./build/ir/Moonshine.c -O3 -DNDEBUG<br>\n/Users/thomas/.elan/toolchains/leanprover--lean4---nightly-2022-09-11/bin/leanc -c -o ./build/ir/Main.o ./build/ir/Main.c -O3 -DNDEBUG<br>\nLinking moonshine<br>\n/Users/thomas/.elan/toolchains/leanprover--lean4---nightly-2022-09-11/bin/leanc -o ./build/bin/moonshine ./build/ir/Main.o ./build/ir/Moonshine.o<br>\nstderr:<br>\nld64.lld: warning: /usr/lib/system/libsystem_kernel.dylib has version 12.6.0, which is newer than target minimum of 12.0.0<br>\nld64.lld: warning: /usr/lib/system/libsystem_platform.dylib has version 12.6.0, which is newer than target minimum of 12.0.0<br>\nld64.lld: warning: /usr/lib/system/libsystem_pthread.dylib has version 12.6.0, which is newer than target minimum of 12.0.0</p>\n</blockquote>\n</div></div>",
        "id": 301159203,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664341535
    },
    {
        "content": "<p>One thing I'm noticing: each of the generated <code>lean3port</code>, <code>mathlib</code>, <code>mathlib3port</code> directories within <code>lean_packages</code> have their <em>own</em> <code>lean_packages</code> directories within them, containing nothing but a <code>manifest.json</code> file. Should the <code>rev</code>s in this manifest be reflected at the top level as well? They seem to use rev <code>1f3f0630659a96756377610db656253b18a6a7ee</code> of <code>std</code>, instead of either of the two that have been tried so far.</p>",
        "id": 301302579,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664390437
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/using.20binport.20only/near/301157742\">said</a>:</p>\n<blockquote>\n<p>From the looks of that match, it seems that it decides to update in response to a mismatch of <code>rev</code> fields in a dependency</p>\n</blockquote>\n<p>Yes, that is the goal. See this <a href=\"#narrow/stream/287929-mathlib4/topic/using.20binport.20only/near/301157766\">comment</a> on <a href=\"https://github.com/leanprover-community/lake/pull/120\">lake#120</a> for more information. I think the underlying problem is actually the one mentioned in <a href=\"https://github.com/leanprover-community/lake/pull/119\">lake#119</a> <a href=\"https://github.com/leanprover/lake/issues/119#issuecomment-1249383122\">here</a>.</p>",
        "id": 301317427,
        "sender_full_name": "Mac",
        "timestamp": 1664395654
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> I don't suppose the lake dependency resolution algorithm could be documented somewhere in plain text in the documentation? It seems worth an RFC in case it's not actually doing what we want. Currently I have difficulty reading the code because I know neither what it is supposed to do nor what the invariants of the internal data structures are when processing all the dependencies.</p>",
        "id": 301318131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664395932
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Yeah, this is a good idea. I definitely think that I now need to fix these bugs ASAP (hopefully by this weekend).  While doing so, I can also write-up some doc on how I see it working. Feel free to also create issue requesting the docs on GitHub with anything you want to make sure I include. I can tell you the current approach is a bit haphazard as it has been mostly developed from me addressing <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> 's feature requests.</p>",
        "id": 301318610,
        "sender_full_name": "Mac",
        "timestamp": 1664396106
    },
    {
        "content": "<p>Quick question in regards to something I brought up above: why does the <code>inputRev</code> field exist? The input revision should presumably be in the lakefile.</p>",
        "id": 301318890,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664396214
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <a href=\"https://github.com/leanprover-community/lake/pull/85\">lake#85</a></p>",
        "id": 301319008,
        "sender_full_name": "Mac",
        "timestamp": 1664396260
    }
]