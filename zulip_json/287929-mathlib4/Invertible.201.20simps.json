[
    {
        "content": "<p>Currently we don't have an instance for <code>Invertible (1 : α)</code>; it's just a def. That means that the associated simp lemma can't automatically apply, and we have to <code>have</code> first:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `1` is the inverse of itself -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">invertibleOne</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Invertible</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">invertible_one</span> <span class=\"n\">invertibleOne</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">invOf_one</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Invertible</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"bp\">⅟</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"n\">invOf_eq_right_inv</span> <span class=\"o\">(</span><span class=\"n\">mul_one</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">inv_of_one</span> <span class=\"n\">invOf_one</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">⅟</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- failed to synthesize instance Invertible 1</span>\n</code></pre></div>\n<p>Should it be <code>instance invertibleOne [Monoid α] : Invertible (1 : α) := ...</code> instead? Or is there a reason we don't do this?</p>",
        "id": 320549055,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673386444
    },
    {
        "content": "<p>The issue here is that you can't write <code>⅟(1 : α)</code> in the first place without the instance; this works fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Invertible</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)]:</span> <span class=\"bp\">⅟</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 320549559,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673386636
    },
    {
        "content": "<p>My understanding is that simp will use instances that already exist in the expressions.</p>\n<p>I think this demonstrates it: <em>edit: no it doesn't since <code>h</code> is considered to be an instance inside the <code>by</code> block...</em></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Invertible</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">⅟</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 320549629,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673386670
    },
    {
        "content": "<p>Right, but many times we don't want to introduce <code>[Invertible (1 : α)]</code> in the hypotheses, as we're in the middle of a proof. We want to use (what seems like it should be) the instance for <code>Invertible (1 : α)</code> given by <code>invertibleOne</code></p>",
        "id": 320549823,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673386732
    },
    {
        "content": "<p>Why not do <code>haveI := invertibleOne α</code>?</p>",
        "id": 320550437,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673386938
    },
    {
        "content": "<p>In Lean 3 (or at least I thought so) I thought it was the case that simp lemmas wouldn't try to resynthesize arguments and would instead try to use unification first. That is, I thought this should work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Invertible</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Invertible.invOf</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">--have := ⅟(1 : α) -- fails as expected</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">invOf_one</span><span class=\"o\">]</span> <span class=\"c1\">-- does not use this simp lemma and fails</span>\n</code></pre></div>",
        "id": 320550745,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673387048
    },
    {
        "content": "<p>Ok, yes, this is how Lean 3 worked. Working Lean 3 example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.invertible</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">invertible</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">invertible.inv_of</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">inv_of_one</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 320550940,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673387131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Invertible.201.20simps/near/320550437\">said</a>:</p>\n<blockquote>\n<p>Why not do <code>haveI := invertibleOne α</code>?</p>\n</blockquote>\n<p>Well, it's another step for what seems like it should be immediate—shouldn't lean always <em>know</em> that <code>1</code> is invertible, especially when <code>simp</code>plifying? Everything seems to work when changing <code>def</code> to <code>instance</code>, so I'm just wondering if there's any reason <em>not</em> to make that change.</p>",
        "id": 320550959,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673387139
    },
    {
        "content": "<p>It seems like having a low-priority instance for 1 would make sense to me. Maybe you could look at git blame for the mathlib 3 file and dig through discussion in any relevant PRs to see why it's not a (low-priority) instance?</p>",
        "id": 320551279,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673387273
    },
    {
        "content": "<p>But, just to be clear, in Lean 3 this didn't need to be an instance for the simp lemma to apply.</p>",
        "id": 320551391,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673387300
    },
    {
        "content": "<p>Sounds good...I've only been learning git on an as-needed basis, so I will now go and learn what a git blame is <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 320551454,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673387328
    },
    {
        "content": "<p>A hint, but I have to go, they've got a convenient interface for it on GitHub</p>",
        "id": 320551593,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673387378
    },
    {
        "content": "<p>I was wondering what that button did :)</p>",
        "id": 320551873,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673387491
    },
    {
        "content": "<p>Ok, that was a nice interface! I found this, which seems relevant:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Since</span> <span class=\"bp\">`</span><span class=\"n\">invertible</span> <span class=\"n\">a</span><span class=\"bp\">`</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"bp\">`</span><span class=\"kt\">Prop</span><span class=\"bp\">`</span> <span class=\"o\">(</span><span class=\"n\">but</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"bp\">`</span><span class=\"n\">subsingleton</span><span class=\"bp\">`</span><span class=\"o\">),</span> <span class=\"n\">we</span> <span class=\"k\">have</span> <span class=\"n\">to</span> <span class=\"n\">be</span> <span class=\"n\">careful</span> <span class=\"n\">about</span>\n<span class=\"n\">coherence</span> <span class=\"n\">issues</span><span class=\"o\">:</span> <span class=\"n\">we</span> <span class=\"n\">should</span> <span class=\"n\">avoid</span> <span class=\"n\">having</span> <span class=\"n\">multiple</span> <span class=\"n\">non</span><span class=\"bp\">-</span><span class=\"n\">defeq</span> <span class=\"n\">instances</span> <span class=\"n\">for</span> <span class=\"bp\">`</span><span class=\"n\">invertible</span> <span class=\"n\">a</span><span class=\"bp\">`</span> <span class=\"k\">in</span> <span class=\"n\">the</span>\n<span class=\"n\">same</span> <span class=\"n\">context.</span>  <span class=\"n\">This</span> <span class=\"n\">file</span> <span class=\"n\">plays</span> <span class=\"n\">it</span> <span class=\"n\">safe</span> <span class=\"n\">and</span> <span class=\"n\">uses</span> <span class=\"bp\">`</span><span class=\"kd\">def</span><span class=\"bp\">`</span> <span class=\"n\">rather</span> <span class=\"n\">than</span> <span class=\"bp\">`</span><span class=\"kd\">instance</span><span class=\"bp\">`</span> <span class=\"n\">for</span> <span class=\"n\">most</span> <span class=\"n\">definitions</span><span class=\"o\">,</span>\n<span class=\"n\">users</span> <span class=\"n\">can</span> <span class=\"n\">choose</span> <span class=\"n\">which</span> <span class=\"n\">instances</span> <span class=\"n\">to</span> <span class=\"n\">use</span> <span class=\"n\">at</span> <span class=\"n\">the</span> <span class=\"n\">point</span> <span class=\"n\">of</span> <span class=\"n\">use.</span>\n<span class=\"n\">For</span> <span class=\"kd\">example</span><span class=\"o\">,</span> <span class=\"n\">here's</span> <span class=\"n\">how</span> <span class=\"n\">you</span> <span class=\"n\">can</span> <span class=\"n\">use</span> <span class=\"n\">an</span> <span class=\"bp\">`</span><span class=\"n\">invertible</span> <span class=\"mi\">1</span><span class=\"bp\">`</span> <span class=\"kd\">instance</span><span class=\"o\">:</span>\n<span class=\"bp\">```</span><span class=\"n\">lean</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">something_that_needs_inverses</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">invertible</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kn\">section</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">invertible_one</span>\n<span class=\"kd\">def</span> <span class=\"n\">something_one</span> <span class=\"o\">:=</span> <span class=\"n\">something_that_needs_inverses</span> <span class=\"mi\">1</span>\n<span class=\"kd\">end</span>\n<span class=\"bp\">```</span>\n</code></pre></div>",
        "id": 320551928,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673387515
    },
    {
        "content": "<p>I wonder if those same coherence issues are present in Lean 4...based on the wording it seems likely. But maybe lean 4 has better ways to handle the situation of multiple non-defeq instances?</p>",
        "id": 320552073,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673387555
    },
    {
        "content": "<p>Huh, this ties into the issue in <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/rw.20failing.20to.20rewrite.20coercions.2E.2E.2Ebut.20only.20sometimes\">#mathlib4 &gt; rw failing to rewrite coercions...but only sometimes</a> . Because that congr lemma creates an instance of <code>Invertible 1</code> via <code>Invertible.copy</code>, and since this is unequal to <code>invertibleOne</code>, <code>⅟1</code> doesn't simplify.</p>",
        "id": 320553840,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673388287
    },
    {
        "content": "<p>But...hmmm. this is strange. I would have thought it would pick up on the instance that <em>is</em> there.</p>",
        "id": 320553876,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673388303
    },
    {
        "content": "<p>Here's an example using the <code>congr</code> lemma from that conversation.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[congr]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Invertible.cong</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Invertible</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">⅟</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">Invertible.invOf</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">Invertible.copy</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"n\">_</span> <span class=\"n\">h.symm</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Invertible</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"bp\">⅟</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- unsolved goals ⊢ ⅟1 = 1</span>\n</code></pre></div>",
        "id": 320554719,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673388649
    },
    {
        "content": "<p>I'm not totally sure why following that <code>simp</code> up with <code>rw [invOf_one]</code> results in \"failed to synthesize instance\". Shouldn't we not even need typeclass synthesis, seeing as what we need is already present as an argument of <code>⅟</code>?</p>",
        "id": 320555359,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673388936
    },
    {
        "content": "<p>I wonder if</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">invOf_one</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Invertible</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"bp\">⅟</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>would make more sense.</p>",
        "id": 320555554,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673389000
    },
    {
        "content": "<p>Seems like that change makes the <code>simp</code> work!</p>",
        "id": 320555675,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673389055
    },
    {
        "content": "<p>It also makes more sense to me: why use typeclass synthesis when we can use type inference?</p>",
        "id": 320555795,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673389094
    },
    {
        "content": "<p>I think there might be lots of places in <code>Invertible</code> where this would be a good change—unless it has some terrible effects that I'm not anticipating.</p>",
        "id": 320556007,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673389177
    },
    {
        "content": "<p>It's very hard to rewrite backwards if the argument is implicit</p>",
        "id": 320557426,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673389736
    },
    {
        "content": "<p>Could that be worth it given how much easier this makes it to rewrite forwards?</p>",
        "id": 320558073,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673390025
    },
    {
        "content": "<p>Or, would it be better to have an implicit- using lemma tagged <code>simp</code> and a user-facing one not tagged simp?</p>",
        "id": 320558176,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673390055
    },
    {
        "content": "<p>E.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">invOf_one'</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Invertible</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"bp\">⅟</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"n\">invOf_eq_right_inv</span> <span class=\"o\">(</span><span class=\"n\">mul_one</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">invOf_one</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Invertible</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"bp\">⅟</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"n\">invOf_eq_right_inv</span> <span class=\"o\">(</span><span class=\"n\">mul_one</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 320558233,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673390092
    },
    {
        "content": "<p>Since I'm guessing simp only rewrites forward?</p>",
        "id": 320558280,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673390109
    },
    {
        "content": "<p>My main observations here are:</p>\n<ul>\n<li>The API of <code>Invertible</code> is rather annoying to work with in both Lean 3 and Lean 4</li>\n<li>We really shouldn't do a big (edit: Lean 4) refactor on it mid-port</li>\n</ul>",
        "id": 320558323,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673390131
    },
    {
        "content": "<p>I agree that the approach you describe could work</p>",
        "id": 320558418,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673390167
    },
    {
        "content": "<p>Another option would be to make the <code>Invertible</code> arguments explicit, and then the typeclass version probably isn't need at all</p>",
        "id": 320558538,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673390232
    },
    {
        "content": "<p>If you want to experiment, you could try out such a refactor in Lean 3 and see what breaks</p>",
        "id": 320558583,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673390256
    },
    {
        "content": "<p>Hmm, okay! I'll give it a shot, but I might ad-hoc things a bit for my application at the moment to just get <code>norm_num</code> done ASAP (instead of touching <code>Invertible.lean</code>).</p>",
        "id": 320564156,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673392925
    },
    {
        "content": "<p>While the above approaches hopefully suffice for this situation, I wonder what a general pattern is for dealing with this situation: where a forward rewrite presents all of the info necessary in such a way that type inference ought to be used, but a backwards rewrite would benefit from typeclass synthesis. I feel like there should be a standard way to handle that (maybe there is one already?)</p>",
        "id": 320569502,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673396197
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> Do I remember correctly that you're the one who added the Lean 3 feature where simp would try to first use unification for instance arguments? With some limited testing in this thread, it looks like this feature doesn't yet exist in Lean 4.</p>",
        "id": 320628282,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673423441
    },
    {
        "content": "<p>You remember correctly that I modified <code>simp</code> handling of instances in <a href=\"https://github.com/leanprover-community/lean/pull/659\">lean#659</a>, although it's a bit more subtle than that: <code>instantiate_emetas_fn</code> will loop over all metavariables (i.e. arguments to the <code>simp</code> lemma), trying to synthesize an instance if it is ready according to <code>ready_to_synthesize</code>: the only metavariables in the parameter type are out-params. If the instance is not ready to synthesize, it will proceed to attempt assigning other metas in the hope the previous are assigned in the process, or at least ready for synthesis.</p>",
        "id": 320665628,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1673433601
    },
    {
        "content": "<p>Adjusting <code>simp</code> sounds neat! In the meantime, I tried the approach of duplicating definitions <a href=\"#narrow/stream/287929-mathlib4/topic/Invertible.201.20simps/near/320558233\">above</a> in mathlib3 (the version where I duplicate the whole definition instead of having them refer to each other, since the former is easier to do with regexes...) and nothing broke after changing as many definitions as possible. (That's on the branch <a href=\"https://github.com/leanprover-community/mathlib/tree/invertible-refactor\"><code>invertible-refactor</code></a>.)</p>",
        "id": 320832146,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673490216
    }
]