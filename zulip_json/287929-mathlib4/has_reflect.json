[
    {
        "content": "<p>I was about to start porting <code>data.num.basic</code>, not because it's important, but just to get my hands dirty porting. But immediately there is a <code>deriving has_reflect</code>, and I don't know what the Lean 4 analogue of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_reflect\">docs#has_reflect</a> is. Is it by chance <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.ToExpr#doc\">docs4#Lean.ToExpr</a>?</p>",
        "id": 310239979,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668530049
    },
    {
        "content": "<p>If I use that instead I get the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- default handlers have not been implemented yet, class: 'Lean.ToExpr' types: [PosNum]</span>\n</code></pre></div>\n<p>which I suppose means there is no standard way to create a <code>ToExpr</code> instance via deriving.</p>",
        "id": 310240510,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668530211
    },
    {
        "content": "<p>I think thats correct yes, I'd say the has reflect instance for num probably isn't used much anyway, so its ok to ignore for now.</p>",
        "id": 310246028,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1668531807
    },
    {
        "content": "<p>This feels like it should be an easy default handler to write; all you have to do is turn <code>num.bit0 x</code> into <code> `(num.bit0 %`(x)) </code> etc; while writing the general metaprogram might be annoying right now, writing the special case for just <code>num</code> should be trivial.</p>",
        "id": 310279661,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668542227
    },
    {
        "content": "<p>This feels like it should be an easy default handler to write; all you have to do is turn <code>num.bit0 x</code> into <code> `(num.bit0 %`(x)) </code> etc; while writing the general metaprogram might be annoying right now, writing the special case for just <code>num</code> should be trivial.</p>",
        "id": 310279675,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668542233
    },
    {
        "content": "<p>Sure but if the general case will come eventually and this will never be used what is the point of adding this one special case now?</p>",
        "id": 310280503,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1668542494
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, I'll have a PR in about 20 minutes or so. If you want to add it for <code>PosNum</code> I can try to do the rest based on your example.</p>",
        "id": 310281061,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668542660
    },
    {
        "content": "<p>I don't think that <code>Lean.ToExpr</code> instances are being used at all currently outside the few examples in core. Let's wait until we have a clear sense of what it needs to do, and then implement a derive handler for it. I might add a dummy <code>Lean.ToExpr</code> derive handler which just does nothing so that people don't have to worry about it</p>",
        "id": 310283251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668543390
    },
    {
        "content": "<p>It's used in quote4 a bit I think, not sure how essentially but it makes some sense that it would be helpful there at least</p>",
        "id": 310283692,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1668543545
    },
    {
        "content": "<p>are you sure? I don't see any examples of using <code>ToExpr</code> on arbitrary user-provided types in quote4</p>",
        "id": 310284434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668543788
    },
    {
        "content": "<p>Ah I see, you're not saying that ToExpr isn't used, just that instances do nothing for now? I guess that could be  true</p>",
        "id": 310285063,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1668543998
    },
    {
        "content": "<p>The use of <code>ToExpr</code> inside quote4 is all for a closed class of types, for which things like the fact that it only works on types in <code>Type</code> is not a problem</p>",
        "id": 310285157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668544038
    },
    {
        "content": "<p>for the most part, I find that quote4 itself replaces most uses of <code>has_reflect</code></p>",
        "id": 310285240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668544068
    },
    {
        "content": "<p>but we could have a <code>Qq</code>-powered <code>ToExprQ</code> typeclass that has a better type signature</p>",
        "id": 310285404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668544108
    }
]