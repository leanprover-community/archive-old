[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">nil_union</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nil.union</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.union</span><span class=\"o\">,</span> <span class=\"n\">foldr</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">cons_union</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">union</span> <span class=\"n\">l₂</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">l₁.union</span> <span class=\"n\">l₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">insert</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.union</span><span class=\"o\">,</span> <span class=\"n\">foldr</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Why do these not use union notation? Now they are basically unusable.</p>",
        "id": 320456191,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673359003
    },
    {
        "content": "<p><del>This is a question about mathlib3, right?</del> Looks like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.cons_union#doc\">docs4#List.cons_union</a> used notation in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.cons_union\">docs#list.cons_union</a>. Is this a mathport bug?</p>",
        "id": 320456310,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673359037
    },
    {
        "content": "<p>It looks like a Std bug.</p>",
        "id": 320456955,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673359219
    },
    {
        "content": "<p>This is in <code>Std/Data/List/Lemmas</code> and it's not using any notation.</p>",
        "id": 320457030,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673359247
    },
    {
        "content": "<p>I'm currently just passing the instance to <code>simp</code>. I don't think mathlib uses it too much anyway.</p>",
        "id": 320487723,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673367193
    },
    {
        "content": "<p>I'm not sure I would call it a bug, but we need versions of these theorems that use the notation as well. I'm not even sure the notation is available in that file</p>",
        "id": 320504660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673371840
    },
    {
        "content": "<p>I'd argue we don't need versions that use the <code>.union</code> spelling, as long as we have a lemma to refold <code>union</code> to the notation</p>",
        "id": 320505269,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673372023
    },
    {
        "content": "<p>I mean the notation might not be imported, or even if it is it might not be desirable. This is std we're talking about, programmers won't reach for the funny cup operator when they can call <code>list.union</code></p>",
        "id": 320506037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673372255
    },
    {
        "content": "<p>The notation <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.instUnionList#doc\">docs4#List.instUnionList</a> is also in Std</p>",
        "id": 320506815,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673372490
    },
    {
        "content": "<p>it is, but not all of Std imports every other part</p>",
        "id": 320508578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673372979
    },
    {
        "content": "<p>I don't think it would be a huge deal to have it imported if it isn't already though</p>",
        "id": 320509100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673373115
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I personally don't really care about what Std looks like. But we'll have a naming clash if we want both versions.</p>",
        "id": 320509488,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673373226
    },
    {
        "content": "<p>Why do we want <code>∪</code> notation for <code>List</code>?</p>",
        "id": 320509616,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673373253
    },
    {
        "content": "<p>'cause it's called <code>union</code> I guess?</p>",
        "id": 320509796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673373310
    },
    {
        "content": "<p>I'm neutral on the notation. There are a lot of weird lemmas about list.union that don't really make sense if you think about it like a set union</p>",
        "id": 320509910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673373346
    },
    {
        "content": "<p>like the fact that the left list is a prefix and the right list is a <del>sublist</del> subperm</p>",
        "id": 320509971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673373363
    },
    {
        "content": "<p>I'm okay with eric's suggestion as well, of having a simp lemma to fold the notation and state all the lemmas with the notation</p>",
        "id": 320510577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673373539
    },
    {
        "content": "<p>I'm also fine with removing the notation; I just think having two ways to spell exactly the same thing is a disaster when building a library of theorems.</p>",
        "id": 320510859,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673373614
    },
    {
        "content": "<p>I vote for removing the notation. Unless Std wants to use the notation everywhere.</p>",
        "id": 320515375,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673374955
    },
    {
        "content": "<p>I would never use this notation in programming-stuff. too confusing.</p>",
        "id": 320573513,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673398559
    },
    {
        "content": "<p>We have the same problem for <code>List.insert</code></p>",
        "id": 320675043,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673436686
    },
    {
        "content": "<p>Just <code>simp only [instInsertList]</code></p>",
        "id": 320675279,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673436744
    },
    {
        "content": "<p>After that, everything works.</p>",
        "id": 320675317,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673436758
    },
    {
        "content": "<p>But which is the notation we should be using?</p>",
        "id": 320675374,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673436774
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HasInsert.Insert#doc\">docs4#HasInsert.Insert</a> ?</p>",
        "id": 320675511,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673436807
    },
    {
        "content": "<p>Hmm, that doesn't exist</p>",
        "id": 320675570,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673436823
    },
    {
        "content": "<p>It's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Insert.insert#doc\">docs4#Insert.insert</a></p>",
        "id": 320675655,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673436840
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Insert#doc\">docs4#Insert</a></p>",
        "id": 320675847,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673436895
    },
    {
        "content": "<p>Why did we even introduce <code>has_insert.insert</code>? It's a notation typeclass for something we don't even have notation for</p>",
        "id": 320677888,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673437239
    },
    {
        "content": "<p>Yes it is. The notation is <code>{a, b, c}</code></p>",
        "id": 320678842,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673437387
    },
    {
        "content": "<p>So we need to refactor <code>Std</code> to get rid of all mention of <code>List.insert</code>?</p>",
        "id": 320685817,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673438755
    },
    {
        "content": "<p>I think it's not clear whether Std wants to use notation for Lists or avoid it. But it shouldn't try to do both.</p>",
        "id": 320687929,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673439416
    },
    {
        "content": "<p>Is this blocking the port of <code>Data.List.Perm</code> in a nasty way? Or can you work around it?</p>",
        "id": 320688029,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673439450
    },
    {
        "content": "<p>Using set notation for lists seems misleading at best</p>",
        "id": 320688263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673439524
    },
    {
        "content": "<p>although I think it won't activate unless you use a bunch of <code>insert</code>s on <code>empty</code>, while the simp normal form for the empty list is of course <code>[]</code></p>",
        "id": 320688461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673439581
    },
    {
        "content": "<p>so in the case of insert I'm inclined to rewrite from <code>Insert.insert</code> to <code>List.insert</code></p>",
        "id": 320688802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673439656
    },
    {
        "content": "<p>What about just deleting the <code>Insert</code> instance for list then?</p>",
        "id": 320688970,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673439713
    },
    {
        "content": "<p>or that</p>",
        "id": 320689007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673439722
    },
    {
        "content": "<p>maybe it would be best to try these refactors out in mathlib3 first though</p>",
        "id": 320689116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673439748
    },
    {
        "content": "<p>That's different from the mathlib3 convention where we use <code>has_insert.insert</code> everywhere for lists</p>",
        "id": 320689143,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673439760
    },
    {
        "content": "<p>That's going to be another speedbump for the port.</p>",
        "id": 320689252,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673439795
    },
    {
        "content": "<p>I would rather just <code>simp [instInsertList]</code> and continue.</p>",
        "id": 320689344,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673439826
    },
    {
        "content": "<p>Once <code>Std</code> figures out which of the two options it prefers, we can adjust mathlib</p>",
        "id": 320689487,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673439861
    },
    {
        "content": "<p>Is there a need to make an immediate ruling? I think you can add simp lemmas to work around any impedance mismatch if you want to have a particular behavior for the port</p>",
        "id": 320689757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673439947
    },
    {
        "content": "<p>Right, that's basically what I'm suggesting, I think</p>",
        "id": 320689883,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673439985
    },
    {
        "content": "<p>For the port we'll use <code>List.insert</code> because that's what the lemmas in <code>Std</code> already use. I'll make a PR changing everything I can find</p>",
        "id": 320689938,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673440003
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1487\">https://github.com/leanprover-community/mathlib4/pull/1487</a></p>",
        "id": 320692612,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673440782
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110044\">Chris Hughes</span> <a href=\"#narrow/stream/287929-mathlib4/topic/List.2Eunion/near/320689143\">said</a>:</p>\n<blockquote>\n<p>That's different from the mathlib3 convention where we use <code>has_insert.insert</code> everywhere for lists</p>\n</blockquote>\n<p>Do you have an example? I've never seen <code>insert</code> used on lists before.</p>",
        "id": 320700824,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673443297
    },
    {
        "content": "<p>Seems pretty random; <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.suffix_insert\">docs#list.suffix_insert</a> vs <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.sublist_insert\">docs#list.sublist_insert</a> are right next to each other and use different choices.</p>",
        "id": 320701099,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673443369
    },
    {
        "content": "<p>It looks to me like this is entirely accidental, and the author didn't realize that <code>list.insert</code> was protected so <code>insert x l</code> and <code>l.insert x</code> are not syntactically identical</p>",
        "id": 320701218,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673443422
    }
]