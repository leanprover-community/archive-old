[
    {
        "content": "<p>Could I summon some help with mathlib4's <code>to_additive</code>? I've been porting the bare minimum of the material about <code>OrderedRing</code> that <code>linarith</code> requires, and run into a problem with <code>to_additive</code> that I can't diagnose.</p>\n<p>On the branch <code>semorrison/OrderedRing</code>, when I try to add <code>@[to_additive]</code> to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">one_lt_div'</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span>  <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>(see <a href=\"https://github.com/leanprover-community/mathlib4/pull/455/files#diff-a37508eca2688088ec208fceec66065f69019cfea6bc08f7ae445ab329b0ef98R46\">here</a> I get the error message </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">instHDiv</span>\n<span class=\"n\">argument</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Sub</span> <span class=\"n\">α</span>\n<span class=\"n\">but</span> <span class=\"n\">function</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Div</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">HDiv</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>I'm sure this is a missing or broken <code>@[to_additive]</code> attribute somewhere earlier, but I'm failing to find it.</p>\n<p>If anyone could have a dig around for me that would be wonderful.</p>",
        "id": 302781652,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665119641
    },
    {
        "content": "<p>It sounds like <code>instHDiv</code> needs a <code>to_additive</code> attribute</p>",
        "id": 302781847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665119794
    },
    {
        "content": "<p>I've encountered a similar problem with <code>to_additive</code> in <code>Algebra.Hom.Group</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp, to_additive]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">map_one</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OneHomClass</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>gives the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"bp\">@</span><span class=\"n\">OneHomClass</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span>\n<span class=\"n\">argument</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Zero</span> <span class=\"n\">M</span>\n<span class=\"n\">but</span> <span class=\"n\">function</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">One</span> <span class=\"n\">M</span><span class=\"o\">)]</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">One</span> <span class=\"n\">N</span><span class=\"o\">)]</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"n\">u_3</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Except here, <code>OneHomClass</code> already has the <code>to_additive</code> attribute.</p>",
        "id": 310971304,
        "sender_full_name": "Winston Yin",
        "timestamp": 1668840984
    },
    {
        "content": "<p>Is this on some branch / PR? Probably easier to diagnose in situ.</p>",
        "id": 310971710,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668841329
    },
    {
        "content": "<p>I encountered some errors like this and the fix was to provide <code>to_additive</code> with the additivized declaration name (so </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp, to_additive map_zero]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">map_one</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OneHomClass</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 311020658,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1668865493
    },
    {
        "content": "<p>Looks like I don't have permission to push to mathlib4 yet. Could somebody grant permission please?</p>",
        "id": 311077845,
        "sender_full_name": "Winston Yin",
        "timestamp": 1668899480
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> Thanks for the tip. I managed to remove the error by adding <code>ZeroHomClass</code> to the <code>to_additive</code> attribute of <code>OneHomClass</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive ZeroHomClass]</span>\n<span class=\"kd\">class</span> <span class=\"n\">OneHomClass</span>\n</code></pre></div>\n<p>Is this an indication that <code>to_additive</code>'s heuristic isn't parsing the new naming convention properly?</p>",
        "id": 311078113,
        "sender_full_name": "Winston Yin",
        "timestamp": 1668899704
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416472\">@Winston Yin</span> please provide your github username. (You can also add it to your user profile here on zulip.)</p>",
        "id": 311080077,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668901490
    },
    {
        "content": "<p>winstonyin on GitHub</p>",
        "id": 311084099,
        "sender_full_name": "Winston Yin",
        "timestamp": 1668905044
    },
    {
        "content": "<p>Invite sent.</p>",
        "id": 311085213,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668906105
    },
    {
        "content": "<p>Another issue with <code>to_additive</code>: it seems to be unable to translate <code>MonoidHomClass.toOneHomClass</code> to <code>AddMonoidHomClass.toZeroHomClass</code>, even though <code>MonoidHomClass</code> has been explicitly marked with <code>to_additive AddMonoidHomClass</code>, and <code>OneHomClass</code> with <code>to_additive ZeroHomClass</code>. See <code>map_mul_eq_one</code> in <a href=\"https://github.com/leanprover-community/PR/pull/659\">PR#659</a> &lt;--- how do I link to mathlib4 PRs?</p>",
        "id": 311093839,
        "sender_full_name": "Winston Yin",
        "timestamp": 1668915672
    },
    {
        "content": "<p>Ah. The issue is in <code>ToAdditive.guessNameDict</code>, which has yet to be updated to the new naming convention. <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span></p>",
        "id": 311094068,
        "sender_full_name": "Winston Yin",
        "timestamp": 1668915956
    },
    {
        "content": "<p>There was a recent PR about the naming convention of ToAdditive, I thought this was fixed?</p>",
        "id": 311094124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668915983
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/579\">mathlib4#579</a></p>",
        "id": 311094140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668916013
    },
    {
        "content": "<p>given that <code>guessNameDict</code> doesn't exist after that PR, I'm guessing you haven't merged master in a while</p>",
        "id": 311094217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668916088
    },
    {
        "content": "<p>Thanks for pointing me to this. I'll merge these into my branch</p>",
        "id": 311094229,
        "sender_full_name": "Winston Yin",
        "timestamp": 1668916100
    },
    {
        "content": "<p>A while = 3 days <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 311094250,
        "sender_full_name": "Winston Yin",
        "timestamp": 1668916131
    },
    {
        "content": "<p>lol</p>",
        "id": 311094266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668916165
    },
    {
        "content": "<blockquote>\n<p>Another issue with to_additive: it seems to be unable to translate <code>MonoidHomClass.toOneHomClass</code> to <code>AddMonoidHomClass.toZeroHomClass</code>, even though <code>MonoidHomClass</code> has been explicitly marked with <code>to_additive AddMonoidHomClass</code>, and <code>OneHomClass</code> with <code>to_additive ZeroHomClass</code>. See <code>map_mul_eq_one</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/659\">mathlib4#659</a></p>\n</blockquote>\n<p>Problem still persists after merging :(</p>",
        "id": 311096447,
        "sender_full_name": "Winston Yin",
        "timestamp": 1668918783
    },
    {
        "content": "<p>Adding the following line fixed it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">AddMonoidHomClass.toZeroHomClass</span><span class=\"o\">]</span> <span class=\"n\">MonoidHomClass.toOneHomClass</span>\n</code></pre></div>\n<p>although ideally this should be handled by the <code>to_additive</code> tactic</p>",
        "id": 311098337,
        "sender_full_name": "Winston Yin",
        "timestamp": 1668920897
    },
    {
        "content": "<p>please report an issue, I don't think this is on the high priority list of the maintainers</p>",
        "id": 311098385,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668920996
    },
    {
        "content": "<p>but if you or someone else wants to investigate it, great</p>",
        "id": 311098443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668921029
    },
    {
        "content": "<p>Created issue: <a href=\"https://github.com/leanprover-community/mathlib4/issues/660\">https://github.com/leanprover-community/mathlib4/issues/660</a></p>",
        "id": 311099198,
        "sender_full_name": "Winston Yin",
        "timestamp": 1668921988
    },
    {
        "content": "<p>is this the same problem as <a href=\"#narrow/stream/287929-mathlib4/topic/to_additive.20and.20instances\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/to_additive.20and.20instances</a><br>\nThe error is obviously different, but it might come from the same bug in <code>to_additive</code></p>",
        "id": 311099546,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1668922337
    },
    {
        "content": "<p>I've tried your fix and it does not work, the <code>defLemma</code> linter still complains</p>",
        "id": 311114106,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1668936201
    },
    {
        "content": "<p>but you seem to have no problems with the <code>to_additive</code> version not being an instance</p>",
        "id": 311114130,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1668936226
    }
]