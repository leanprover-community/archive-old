[
    {
        "content": "<p>Is this is a bug in the <code>symm</code> attribute?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Hom.Group</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Equiv.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MulHom.inverse</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₙ*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">Function.LeftInverse</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">Function.RightInverse</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→ₙ*</span> <span class=\"n\">M</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">g</span>\n  <span class=\"n\">map_mul'</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span>\n      <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₂</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h₂</span> <span class=\"n\">y</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">f.map_mul</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">h₁</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">MulEquiv</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">M</span> <span class=\"bp\">≃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"bp\">→ₙ*</span> <span class=\"n\">N</span>\n\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"s2\">\" ≃* \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">MulEquiv</span>\n\n<span class=\"kd\">@[symm]</span>\n<span class=\"c1\">-- @[symm] attribute only applies to lemmas proving x ∼ y → y ∼ x, got {M : Type u_1} →</span>\n<span class=\"c1\">--  {N : Type u_2} → [inst : Mul M] → [inst_1 : Mul N] → M ≃* N → N ≃* M</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo_symm</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">≃*</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">h.toEquiv.symm</span> <span class=\"k\">with</span> <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h.toMulHom.inverse</span> <span class=\"n\">h.toEquiv.symm</span> <span class=\"n\">h.left_inv</span> <span class=\"n\">h.right_inv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 313856976,
        "sender_full_name": "Winston Yin",
        "timestamp": 1670189226
    },
    {
        "content": "<p>The fact that it's a def not a lemma seems not to be relevant -- for example <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Iso.symm#doc\">docs4#CategoryTheory.Iso.symm</a> is a def tagged <code>@[symm]</code> which looks very much like what you are doing (not that we can tell it's tagged <code>@[symm]</code> from the docs any more, unfortunately :-( ). It looks like a bug to me!</p>",
        "id": 313860399,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670192127
    },
    {
        "content": "<p>Submitted issue <a href=\"https://github.com/leanprover-community/mathlib4/pull/855\">mathlib4#855</a></p>",
        "id": 313870411,
        "sender_full_name": "Winston Yin",
        "timestamp": 1670200858
    },
    {
        "content": "<p><code>trans</code> has a similar problem too</p>",
        "id": 313872372,
        "sender_full_name": "Winston Yin",
        "timestamp": 1670202709
    },
    {
        "content": "<p>I'll take a look (I implemented symm).</p>",
        "id": 313872664,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1670202948
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416472\">@Winston Yin</span> <br>\nI managed to narrow this and made a WIP PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/857\">mathlib4#857</a>, which fixes the issue but it is not clear if in a correct way. <br>\nSomebody with more expertise will have to be called in to make some decisions on changing the implementation.</p>",
        "id": 313882748,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1670212149
    },
    {
        "content": "<p>Thank you, Siddhartha! I guess the question is, why did this work in mathlib3 but not mathlib4?</p>",
        "id": 313893501,
        "sender_full_name": "Winston Yin",
        "timestamp": 1670220564
    },
    {
        "content": "<p>The implementation in <code>mathlib4</code> was from scratch, not a port. I guess I made too restrictive assumptions and built a method based on these. The code should be rewritten (using <code>mkAppM'</code>) to allow types to be inferred when flipping.</p>\n<p>Will try in a day or two if nobody else has fixed it (have a bit of a deadline for now).</p>",
        "id": 313906208,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1670227067
    },
    {
        "content": "<p>The Lean 3 implementation didn't really check much: <a href=\"https://github.com/leanprover-community/lean/blob/master/src/library/relation_manager.cpp#L147\">https://github.com/leanprover-community/lean/blob/master/src/library/relation_manager.cpp#L147</a></p>\n<p>It just checks that it takes at least one argument and returns a function application with a constant head.</p>\n<p>The symmetry tactic itself doesn't do anything more than apply whatever's registered as the <code>symm</code> lemma for the given constant. <a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/meta/relation_tactics.lean#L24\">https://github.com/leanprover-community/lean/blob/master/library/init/meta/relation_tactics.lean#L24</a></p>",
        "id": 313935411,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1670237439
    },
    {
        "content": "<p><code>trans</code> lemmas check a bit more, but still it just examines that the last couple arguments are function applications with a constant head: <a href=\"https://github.com/leanprover-community/lean/blob/master/src/library/relation_manager.cpp#L132\">https://github.com/leanprover-community/lean/blob/master/src/library/relation_manager.cpp#L132</a></p>\n<p>That's because every trans lemma gets registered in a table recording triples of constants (\"given this relation and that relation, transitively we can produce such-and-such relation\"). This was important for Lean 3's <code>calc</code> implementation.</p>",
        "id": 313935790,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1670237576
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span>, just letting you know that there is a refactor of symm in <a href=\"https://github.com/leanprover-community/mathlib4/pull/856\">https://github.com/leanprover-community/mathlib4/pull/856</a>.  It looks like it is orthogonal to your <a href=\"https://github.com/leanprover-community/mathlib4/pull/857\">mathlib4#857</a>, but I wanted to give you a heads up.</p>",
        "id": 314145678,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670283117
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Thanks.</p>\n<p>So I will clean up the PR to drop the check in a couple of hours (when I get to my desktop which has the local branch) - it is clearly incorrectly blocking the label in some cases, and not needed anywhere.</p>",
        "id": 314154884,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1670288858
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416472\">@Winston Yin</span> The PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/857\">mathlib4#857</a> fixes your issue (and includes it in a test) by removing the incorrect tests I had introduced during the labelling.</p>",
        "id": 314168452,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1670301174
    }
]