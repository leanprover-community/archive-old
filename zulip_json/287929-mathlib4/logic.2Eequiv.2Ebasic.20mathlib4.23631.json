[
    {
        "content": "<p>We're very close on logic.equiv.basic.</p>",
        "id": 311723831,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669157401
    },
    {
        "content": "<p>The remaining problem is the simpNF linter is unhappy with lemmas like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">sumCompl_apply_symm_of_pos</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">sumCompl</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">Sum.inl</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n  <span class=\"n\">dif_pos</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 311723893,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669157416
    },
    {
        "content": "<p>It doesn't explain why, and just says you'll have to debug it yourself.</p>",
        "id": 311723917,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669157434
    },
    {
        "content": "<p>The current PR has just removed the <code>@[simp]</code> on this lemma (and three others like it), but I'm as yet unconvinced.</p>",
        "id": 311723960,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669157457
    },
    {
        "content": "<p>As long as <code>simp</code> can prove <code>p a</code> itself, it seems this is a perfectly reasonable <code>simp</code> lemma.</p>",
        "id": 311723990,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669157472
    },
    {
        "content": "<p>Or am I forgetting that something about <code>simp</code> has changed in Lean 4, and it is less aggressive about solving side-conditions?</p>",
        "id": 311724046,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669157510
    },
    {
        "content": "<p>can you make a MWE version (no mathlib)?</p>",
        "id": 311724183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669157573
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.Lint</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">Sum.elim</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sum</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Sum.casesOn</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Equiv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n  <span class=\"n\">invFun</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"s2\">\" ≃ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Equiv</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Equiv</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">toFun</span><span class=\"o\">⟩</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">≃</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">e.invFun</span><span class=\"o\">,</span> <span class=\"n\">e.toFun</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sumCompl</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Sum</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"o\">}</span> <span class=\"bp\">≃</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">Sum.elim</span> <span class=\"n\">Subtype.val</span> <span class=\"n\">Subtype.val</span>\n  <span class=\"n\">invFun</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"n\">Sum.inl</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"k\">else</span> <span class=\"n\">Sum.inr</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">sumCompl_apply_symm_of_pos</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">sumCompl</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">Sum.inl</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n  <span class=\"n\">dif_pos</span> <span class=\"n\">h</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span>\n<span class=\"c\">/-</span><span class=\"cm\"> The `simpNF` linter reports:</span>\n<span class=\"cm\">SOME SIMP LEMMAS ARE NOT IN SIMP-NORMAL FORM.</span>\n<span class=\"cm\">see note [simp-normal form] for tips how to debug this.</span>\n<span class=\"cm\">https://leanprover-community.github.io/mathlib_docs/notes.html#simp-normal%20form -/</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">sumCompl_apply_symm_of_pos</span> <span class=\"c\">/-</span><span class=\"cm\"> Left-hand side does not simplify.</span>\n<span class=\"cm\">You need to debug this yourself using `set_option trace.Meta.Tactic.simp.rewrite true` -/</span>\n</code></pre></div>",
        "id": 311725012,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669157950
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">sumCompl</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">Sum.inl</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- fails :-(</span>\n</code></pre></div>\n<p>I can't even make <code>set_option trace.Meta.Tactic.simp.rewrite true</code> do anything. Where am I supposed to be writing this and/or looking at the output?</p>",
        "id": 311726779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669158792
    },
    {
        "content": "<p>The error message is saying that <code>simp</code> does not rewrite with the simp lemma</p>",
        "id": 311727302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669159063
    },
    {
        "content": "<p>so <code>set_option trace.Meta.Tactic.simp.rewrite true</code> will predictably be empty</p>",
        "id": 311727358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669159083
    },
    {
        "content": "<p>fixed in <a href=\"https://github.com/leanprover/std4/commit/68581a4685ce2ae8906f237651b3381d1aaa8b41\"><code>68581a4</code></a></p>",
        "id": 311727914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669159391
    },
    {
        "content": "<p>Oh, it is saying that it can't simplify the LHS, even using the simp lemma itself? I assumed it was about not simplifying with other simp lemmas.</p>",
        "id": 311727946,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669159401
    },
    {
        "content": "<p>not simplifying with other simp lemmas is the <em>good</em> case</p>",
        "id": 311728131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669159487
    },
    {
        "content": "<p>simp lemma LHSs should not simplify when using everything else in the simp set, and they should simplify when using the simp lemma itself</p>",
        "id": 311728224,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669159530
    },
    {
        "content": "<p>Could we change the error message for when they do not simplify when using the simp lemma itself?</p>",
        "id": 311728377,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669159614
    },
    {
        "content": "<p>To be explicit that this is the test that is failing? I missed that in this case.</p>",
        "id": 311728403,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669159628
    },
    {
        "content": "<p>Weird,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">coe_fn_mk</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Equiv.mk</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>\n<p>was omitted in <code>Logic.Equiv.Defs</code>...</p>",
        "id": 311729115,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669159972
    },
    {
        "content": "<p>Where is this simp lemma supposed to find h by the way?</p>",
        "id": 311729375,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669160108
    },
    {
        "content": "<p>it's a conditional rewrite rule, it would normally be proved by recursive application of simp, possibly including hypotheses passed to the original invocation</p>",
        "id": 311729623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669160255
    },
    {
        "content": "<p>the bug here was that it failed to detect that this was a conditional rewrite rule</p>",
        "id": 311729651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669160271
    },
    {
        "content": "<p>Okay, <code>Logic.Equiv.Basic</code> now compiles and lints locally.</p>",
        "id": 311729722,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669160297
    },
    {
        "content": "<p>Review would be great.</p>",
        "id": 311729728,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669160303
    },
    {
        "content": "<p>Hmm, we're not there yet. My fixes for duplicate Coe instances in <code>Logic.Equiv.Defs</code> has broken things in other places.</p>",
        "id": 311742966,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669169021
    },
    {
        "content": "<p>in <code>Order.Monotone</code>,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">monotone_toDual_comp_iff</span> <span class=\"o\">:</span> <span class=\"n\">Monotone</span> <span class=\"o\">(</span><span class=\"n\">toDual</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">Antitone</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Iff.rfl</span>\n</code></pre></div>\n<p>is now failing with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Iff.rfl</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Monotone</span> <span class=\"o\">(</span><span class=\"n\">FunLike.coe</span> <span class=\"n\">toDual</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">Monotone</span> <span class=\"o\">(</span><span class=\"n\">FunLike.coe</span> <span class=\"n\">toDual</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Monotone</span> <span class=\"o\">(</span><span class=\"n\">FunLike.coe</span> <span class=\"n\">toDual</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">Antitone</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>I neither understand why the <code>FunLike.coe</code> is printing here, nor why <code>Iff.rfl</code> doesn't work... :-(</p>",
        "id": 311743063,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669169102
    },
    {
        "content": "<p>I think the <code>FunLike.coe</code> printing might be because it is an under-application? Can you make a MWE? (I think functions with the right arity and implicitness for <code>FunLike.coe</code> and <code>toDual</code> should suffice)</p>",
        "id": 311743237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669169272
    },
    {
        "content": "<p>for the iff.rfl proof it might help to look at <code>set_option trace.Meta.isDefEq true</code></p>",
        "id": 311743354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669169380
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I took a look at this issue, and the reason the iff.rfl proof fails is because <code>Monotone</code> has inferred the original order on beta, not the dual one</p>",
        "id": 311744939,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669170944
    },
    {
        "content": "<p><span aria-label=\"racecar\" class=\"emoji emoji-1f3ce\" role=\"img\" title=\"racecar\">:racecar:</span>, yes</p>",
        "id": 311745331,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669171329
    },
    {
        "content": "<p>Curiously before I took away the duplicate Coe instance for Equiv, this proof was working.</p>",
        "id": 311745343,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669171352
    },
    {
        "content": "<p>Perhaps because the duplicate one was not a coercion to a dependently typed function.</p>",
        "id": 311745364,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669171389
    },
    {
        "content": "<p>And this made it easier for Lean to get the type right?</p>",
        "id": 311745376,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669171405
    },
    {
        "content": "<p>I can add type ascriptions, but it feels like a work-around rather than a solution.</p>",
        "id": 311745500,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669171514
    },
    {
        "content": "<p>Could we have a higher priority <code>CoeFun</code> for <code>FunLike</code>s indexed by a constant type family?</p>",
        "id": 311745701,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669171730
    },
    {
        "content": "<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">MyFunLike</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Secret</span>\n<span class=\"kd\">def</span> <span class=\"n\">Wrapper</span> <span class=\"o\">:=</span> <span class=\"n\">Secret</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Bla</span> <span class=\"bp\">|</span> <span class=\"n\">z</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MyFunLike</span> <span class=\"n\">Bla</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Wrapper</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MyFunLike</span> <span class=\"n\">F</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">CoeFun</span> <span class=\"n\">F</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"n\">where</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">MyFunLike.coe</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Bla.z</span> <span class=\"mi\">0</span> <span class=\"c1\">-- MyFunLike.coe Bla.z 0 : (fun x =&gt; Wrapper) 0</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"k\">#check</span> <span class=\"n\">Bla.z</span> <span class=\"bp\">∘</span> <span class=\"n\">id</span> <span class=\"c1\">-- MyFunLike.coe Bla.z ∘ id : ℤ → Secret</span>\n</code></pre></div>",
        "id": 311746932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669172839
    },
    {
        "content": "<p>So you think this is something that should be fixed in core?</p>",
        "id": 311747197,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669173105
    },
    {
        "content": "<p>yes, there is at least one core bug here</p>",
        "id": 311747260,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669173144
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/631\">mathlib4#631</a>, I have just worked around this issue for now (and left a note pointing to this thread).</p>",
        "id": 311823998,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669209596
    },
    {
        "content": "<p>Shall I post your MWE as a Lean 4 issue, or is it still in your court?</p>",
        "id": 311824146,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669209626
    },
    {
        "content": "<p>Separately, <a href=\"https://github.com/leanprover-community/mathlib4/pull/631\">mathlib4#631</a> now has a green tick, so if someone would like to have a look and/or merge that would be great.</p>",
        "id": 311824218,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669209653
    },
    {
        "content": "<p>(looking now)</p>",
        "id": 311839357,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669214407
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>, <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span>, thanks for all the review comments. Would you mind, where possible, just making the changes? It's twice as much work to have conversations about things.</p>",
        "id": 311863513,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669221700
    },
    {
        "content": "<p>I'll make my changes, all of which are trivial.</p>",
        "id": 311863618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669221728
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 311863835,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669221812
    },
    {
        "content": "<p>I'll deal with min now, unless you already started, <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span></p>",
        "id": 311865293,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1669222271
    },
    {
        "content": "<p>I think I got them.</p>",
        "id": 311869050,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669223440
    },
    {
        "content": "<p>Here's the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> extracted from this branch:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"s2\">\"⟦\"</span> <span class=\"n\">a</span> <span class=\"s2\">\"⟧\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Quotient.mk</span> <span class=\"n\">_</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Function</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">LeftInverse</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">RightInverse</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">LeftInverse</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">hfunext</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">α'</span><span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β'</span> <span class=\"o\">:</span> <span class=\"n\">α'</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β'</span> <span class=\"n\">a</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">α'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">a</span> <span class=\"n\">a'</span><span class=\"o\">,</span> <span class=\"n\">HEq</span> <span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"bp\">→</span> <span class=\"n\">HEq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"n\">a'</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">HEq</span> <span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">subst</span> <span class=\"n\">hα</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">HEq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">HEq.refl</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">=</span> <span class=\"n\">β'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">funext</span> <span class=\"n\">a</span>\n                      <span class=\"n\">exact</span> <span class=\"n\">type_eq_of_heq</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"n\">subst</span> <span class=\"n\">this</span>\n  <span class=\"n\">apply</span> <span class=\"n\">heq_of_eq</span>\n  <span class=\"n\">funext</span> <span class=\"n\">a</span>\n  <span class=\"n\">exact</span> <span class=\"n\">eq_of_heq</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Function</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Subtype</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a1</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">}},</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a1</span> <span class=\"bp\">=</span> <span class=\"n\">a2</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ext_val</span> <span class=\"o\">{</span><span class=\"n\">a1</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">}}</span> <span class=\"o\">:</span> <span class=\"n\">a1.1</span> <span class=\"bp\">=</span> <span class=\"n\">a2.1</span> <span class=\"bp\">→</span> <span class=\"n\">a1</span> <span class=\"bp\">=</span> <span class=\"n\">a2</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Subtype.ext</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Subtype</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Function</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Equiv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n  <span class=\"n\">invFun</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:</span> <span class=\"n\">LeftInverse</span> <span class=\"n\">invFun</span> <span class=\"n\">toFun</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:</span> <span class=\"n\">RightInverse</span> <span class=\"n\">invFun</span> <span class=\"n\">toFun</span>\n\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"s2\">\" ≃ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Equiv</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">subtypeQuotientEquivQuotientSubtype</span> <span class=\"o\">(</span><span class=\"n\">p₁</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">s₁</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"o\">(</span><span class=\"n\">Subtype</span> <span class=\"n\">p₁</span><span class=\"o\">)]</span>\n    <span class=\"o\">(</span><span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">Quotient</span> <span class=\"n\">s₁</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p₁</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">p₂</span> <span class=\"bp\">⟦</span><span class=\"n\">a</span><span class=\"bp\">⟧</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Subtype</span> <span class=\"n\">p₁</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">Setoid.r</span> <span class=\"n\">_</span> <span class=\"n\">s₂</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≈</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p₂</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"bp\">≃</span> <span class=\"n\">Quotient</span> <span class=\"n\">s₂</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Quotient.hrecOn</span> <span class=\"n\">a.1</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">⟦</span><span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hp₂</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h</span><span class=\"o\">⟩</span><span class=\"bp\">⟧</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hab</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hfunext</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Quotient.sound</span> <span class=\"n\">hab</span><span class=\"o\">])</span> <span class=\"k\">fun</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">heq_of_eq</span> <span class=\"o\">(</span><span class=\"n\">Quotient.sound</span> <span class=\"o\">((</span><span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hab</span><span class=\"o\">)))</span>\n      <span class=\"n\">a.2</span>\n  <span class=\"n\">invFun</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Quotient.liftOn</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(⟨</span><span class=\"bp\">⟦</span><span class=\"n\">a.1</span><span class=\"bp\">⟧</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hp₂</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">a.2</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p₂</span> <span class=\"n\">x</span> <span class=\"o\">}))</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hab</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">Subtype.ext_val</span> <span class=\"o\">(</span><span class=\"n\">Quotient.sound</span> <span class=\"o\">((</span><span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hab</span><span class=\"o\">))</span>\n  <span class=\"c1\">-- This fails (but worked in Lean 3), but the next line using `rcases` succeeds:</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Quotient.inductionOn</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"n\">hb</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"n\">ha</span>\n  <span class=\"c1\">-- Needs `import Std.Tactic.RCases`:</span>\n  <span class=\"c1\">-- left_inv t := by rcases t with ⟨a, ha⟩; exact Quotient.inductionOn a (fun b hb =&gt; rfl) ha</span>\n  <span class=\"n\">right_inv</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">Quotient.inductionOn</span> <span class=\"n\">a</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 311869098,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669223461
    },
    {
        "content": "<p>(Sorry, it's not super minimal...)</p>",
        "id": 311869129,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669223475
    },
    {
        "content": "<p>Unless someone has an idea I will post an issue on the Lean 4 repository. If anyone wants to further minimise first, that would be great.</p>",
        "id": 311869253,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669223520
    },
    {
        "content": "<p>For now I'll just put a link to this message at the regression in <a href=\"https://github.com/leanprover-community/mathlib4/pull/631\">mathlib4#631</a>, but let's not otherwise wait.</p>",
        "id": 311869341,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669223542
    },
    {
        "content": "<p>I think in that MWE that <code>left_inv t</code> is meant to be <code>left_inv</code></p>",
        "id": 311875020,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669225603
    },
    {
        "content": "<p>I tried using <code>intro</code> with a pattern match, and it creates two goals. I used <code>Quotient.sound</code> to handle one of them, but then it lead to there being an error on a random other line...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">subtypeQuotientEquivQuotientSubtype</span> <span class=\"o\">(</span><span class=\"n\">p₁</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">s₁</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"o\">(</span><span class=\"n\">Subtype</span> <span class=\"n\">p₁</span><span class=\"o\">)]</span>\n    <span class=\"o\">(</span><span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">Quotient</span> <span class=\"n\">s₁</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p₁</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">p₂</span> <span class=\"bp\">⟦</span><span class=\"n\">a</span><span class=\"bp\">⟧</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Subtype</span> <span class=\"n\">p₁</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">Setoid.r</span> <span class=\"n\">_</span> <span class=\"n\">s₂</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≈</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p₂</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"bp\">≃</span> <span class=\"n\">Quotient</span> <span class=\"n\">s₂</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Quotient.hrecOn</span> <span class=\"n\">a.1</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">⟦</span><span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hp₂</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h</span><span class=\"o\">⟩</span><span class=\"bp\">⟧</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hab</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hfunext</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Quotient.sound</span> <span class=\"n\">hab</span><span class=\"o\">])</span> <span class=\"k\">fun</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"c1\">-- why is there now an error on `rw`??</span>\n        <span class=\"n\">heq_of_eq</span> <span class=\"o\">(</span><span class=\"n\">Quotient.sound</span> <span class=\"o\">((</span><span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hab</span><span class=\"o\">)))</span>\n      <span class=\"n\">a.2</span>\n  <span class=\"n\">invFun</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Quotient.liftOn</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(⟨</span><span class=\"bp\">⟦</span><span class=\"n\">a.1</span><span class=\"bp\">⟧</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hp₂</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">a.2</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p₂</span> <span class=\"n\">x</span> <span class=\"o\">}))</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hab</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">Subtype.ext_val</span> <span class=\"o\">(</span><span class=\"n\">Quotient.sound</span> <span class=\"o\">((</span><span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hab</span><span class=\"o\">))</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"c1\">--fun ⟨a, ha⟩ =&gt; Quotient.inductionOn a (fun b hb =&gt; rfl) ha</span>\n    <span class=\"c1\">-- Workaround:</span>\n    <span class=\"kd\">by</span>\n      <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span>\n      <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Quotient.sound</span> <span class=\"n\">hab</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Quotient.inductionOn</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"n\">hb</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"n\">ha</span>\n  <span class=\"n\">right_inv</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">Quotient.inductionOn</span> <span class=\"n\">a</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 311875196,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669225675
    },
    {
        "content": "<p>I think this is a just a typical elaboration order / metavariables not instantiated yet kind of issue.  If you insert a <code>by exact</code> after <code>left_inv</code> it works.</p>",
        "id": 311892199,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1669230555
    }
]