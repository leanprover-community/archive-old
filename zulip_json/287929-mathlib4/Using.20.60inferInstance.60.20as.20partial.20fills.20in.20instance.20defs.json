[
    {
        "content": "<p>Consider:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"n\">α</span><span class=\"bp\">ˣ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">MulOneClass</span> <span class=\"n\">α</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n    <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ext</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">Inv.inv</span><span class=\"o\">,</span> <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ext</span> <span class=\"n\">u.inv_val</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>In mathlib3, we often refer to explicit instance names when doing such partial fills. In lean4, the anonymous instance names are pretty different, and have to be guessed or retrieved via a <code>#synth</code>. Is there a downside (defeq issues?) to using <code>inferInstance</code> as I have above?</p>",
        "id": 308322578,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1667793433
    },
    {
        "content": "<p>I think it's okay. If anything it's more informative to have the type here than the term! Hopefully also without <code>old_structure_cmd</code> we may be able to omit more of these anyway...?</p>",
        "id": 308322801,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1667793706
    },
    {
        "content": "<p>Side note: you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=inferInstanceAs#doc\">docs4#inferInstanceAs</a> here instead</p>",
        "id": 308371358,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1667821139
    },
    {
        "content": "<p>And you can also use the <code>__ :=</code> shorthand syntax:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"n\">α</span><span class=\"bp\">ˣ</span> <span class=\"n\">where</span>\n  <span class=\"n\">__</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">MulOneClass</span> <span class=\"n\">α</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"c1\">-- ...</span>\n</code></pre></div>",
        "id": 308446439,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667845196
    },
    {
        "content": "<p>Is there any documentation for this syntax?</p>",
        "id": 308446776,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1667845320
    },
    {
        "content": "<p>Of course, but probably not in the place you'd be looking for. <a href=\"https://github.com/leanprover-community/mathlib4/blob/df8292b7dbdb00bfa90d626ba7c83af2eff1ce37/Mathlib/Tactic/Spread.lean#L14-L24\">https://github.com/leanprover-community/mathlib4/blob/df8292b7dbdb00bfa90d626ba7c83af2eff1ce37/Mathlib/Tactic/Spread.lean#L14-L24</a></p>",
        "id": 308447249,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667845476
    },
    {
        "content": "<p>So this is what was denoted by <code>..</code> in Lean 3?</p>",
        "id": 308447377,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1667845538
    },
    {
        "content": "<p>Yeah, it simulates that.</p>",
        "id": 308447617,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667845614
    },
    {
        "content": "<p>(Is there a reason to use this instead of <code>{ e with one := 1 }</code>?)</p>",
        "id": 308483854,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1667859564
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span>, I think the point of this thread is when you don't have a term such as  <code>e</code> readily at hand, and want typeclass search to find it for you.</p>",
        "id": 308484162,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1667859695
    },
    {
        "content": "<p>although that doesn't quite answer the question since <code>inferInstanceAs (MulOneClass αˣ)</code> is exactly such an <code>e</code></p>",
        "id": 308484690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667859869
    },
    {
        "content": "<p>Can you have multiple <code>__</code> operators in a single structure? i.e. is it a generalization of the <code>with</code> syntax?</p>",
        "id": 308484763,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1667859902
    },
    {
        "content": "<p>I believe the answer is that when <code>Mathlib.Tactic.Spread</code> was written structures could only have one explicit source <code>{ e with ... }</code></p>",
        "id": 308484791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667859913
    },
    {
        "content": "<p>this restriction has since been lifted, so it's possible that it is not needed anymore except that the <code>where</code> syntax shown above does not accept explicit sources</p>",
        "id": 308484939,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667859963
    },
    {
        "content": "<p>I wonder if we can merge these syntaxes. I wouldn't mind the <code>{ e with ...}</code> syntax changing, honestly, since it doesn't really suggest that multiple sources can be used (which I think the <code>__ := </code> syntax actually does)</p>",
        "id": 308485608,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1667860245
    },
    {
        "content": "<p>Yes, you can have multiple <code>__ :=</code> fields.</p>",
        "id": 308517186,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667882099
    },
    {
        "content": "<p><code>{ __ := a, __ := b }</code> is desugared into <code>{ a, b with }</code>.  The advantage of <code>__ :=</code> is that you can also use it in <code>where</code>-blocks.</p>",
        "id": 308517222,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667882141
    },
    {
        "content": "<p>(Side note: before multiple explicit sources were allowed, the expansion of <code>__ :=</code> was a lot more complicated.)</p>",
        "id": 308517291,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667882208
    }
]