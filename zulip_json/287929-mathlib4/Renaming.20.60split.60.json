[
    {
        "content": "<p>As you've probably noticed, core Lean has also defined a <code>split</code> tactic now.  Of course, the new tactic does something completely different---<code>split</code> now seems to be a generalization of <code>split_ifs</code>.</p>\n<p>In other words, we should rename the <code>split</code> (≈ <code>constructor</code>) tactic.  Any suggestions for a new name?</p>",
        "id": 257500590,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634201199
    },
    {
        "content": "<p>First suggestions by a random thesaurus:    rip, rent, snag, tear,</p>",
        "id": 257500798,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634201298
    },
    {
        "content": "<p><code>intro</code></p>",
        "id": 257500887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634201346
    },
    {
        "content": "<p>But <code>split</code> worked on the goal.</p>",
        "id": 257500919,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634201364
    },
    {
        "content": "<p><code>intro</code> also works on the goal</p>",
        "id": 257500947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634201382
    },
    {
        "content": "<p>I think if you have <code>P ∧ Q</code> as goal, using <code>intro</code> to split it into pieces is weird from a semantic point of view.</p>",
        "id": 257501054,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634201415
    },
    {
        "content": "<p>why is that? You are literally applying <code>and.intro</code></p>",
        "id": 257501084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634201432
    },
    {
        "content": "<p>alternatively, we could just lean into <code>constructor</code> if the name isn't taken</p>",
        "id": 257501162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634201477
    },
    {
        "content": "<p><code>mk</code>?</p>",
        "id": 257501204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634201495
    },
    {
        "content": "<p>I think <code>intro</code> is a synonym for <code>assume</code> in my mind. Maybe I should decouple that.</p>",
        "id": 257501384,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634201576
    },
    {
        "content": "<p><code>destruct</code>?</p>",
        "id": 257501410,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634201587
    },
    {
        "content": "<p><code>construct</code>?</p>",
        "id": 257501416,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634201591
    },
    {
        "content": "<p>it's a constructor, an introduction rule</p>",
        "id": 257501457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634201616
    },
    {
        "content": "<p>lambda is the introduction rule for pi, which is why <code>intro</code> is called that</p>",
        "id": 257501477,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634201632
    },
    {
        "content": "<p>but it could easily(ish) be generalized to intro'ing arbitrary inductives too</p>",
        "id": 257501580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634201665
    },
    {
        "content": "<p>admittedly, everything gets turned around when working on the goal, so introduction patterns make type operators go away</p>",
        "id": 257501664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634201715
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Renaming.20.60split.60/near/257501162\">said</a>:</p>\n<blockquote>\n<p>alternatively, we could just lean into <code>constructor</code> if the name isn't taken</p>\n</blockquote>\n<p>Is there any difference between <code>constructor</code> and <code>split</code> besides <code>split</code> having a shorter name?</p>",
        "id": 257501846,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634201808
    },
    {
        "content": "<p><code>constructor</code> applies any of the constructors, not just the first</p>",
        "id": 257501867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634201828
    },
    {
        "content": "<p>but I don't find this difference in behavior particularly helpful since it's basically just rejecting some class of inputs that could be reasonably handled</p>",
        "id": 257502088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634201935
    },
    {
        "content": "<p>that is, if you made <code>split</code> an alias to <code>constructor</code> today mathlib would still build</p>",
        "id": 257502162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634201976
    },
    {
        "content": "<p>Can we merge <code>split</code> and <code>split_ifs</code>? It's hard to beat <code>split</code> if it comes to meaningful tactic names: take the goal and split it into subgoals for me.</p>",
        "id": 257502171,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634201980
    },
    {
        "content": "<p><code>split</code> and <code>split_ifs</code> are completely different</p>",
        "id": 257502191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634201991
    },
    {
        "content": "<p>Under the hood.</p>",
        "id": 257502203,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634201997
    },
    {
        "content": "<p>no, they visibly have very different effects</p>",
        "id": 257502271,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634202011
    },
    {
        "content": "<p>if you have <code>(if a then b else c) /\\ d</code> then <code>split</code> turns the goal into <code>if a then b else c</code> and <code>d</code> and <code>split_ifs</code> turns the goal into <code>b /\\ d</code> and <code>c /\\ d</code></p>",
        "id": 257502369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634202054
    },
    {
        "content": "<p>Okay, I'm gonna remove <code>split</code> for now in favor of <code>constructor</code>: <a href=\"https://github.com/leanprover-community/mathlib4/pull/70\">https://github.com/leanprover-community/mathlib4/pull/70</a><br>\nWe can always set up a shorter alias if we find a better name.</p>",
        "id": 257502442,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634202100
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <code>super_split</code> could give me three goals: <code>b</code>, <code>c</code>, and <code>d</code>.</p>",
        "id": 257502547,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634202139
    },
    {
        "content": "<p>no takers for <code>mk</code>? The golfers will love us</p>",
        "id": 257502556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634202145
    },
    {
        "content": "<p>What I like about <code>split</code> is that it's a verb. <code>constructor</code> isn't.</p>",
        "id": 257502625,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634202200
    },
    {
        "content": "<p><del><code>mk</code> is a vrb, I guess.</del> <code>mk</code> s  vrb, gss.</p>",
        "id": 257502665,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634202228
    },
    {
        "content": "<p><code>constr</code>, you get to decide whether it's abbreviating a noun or verb</p>",
        "id": 257502681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634202238
    },
    {
        "content": "<p><code>∧I</code></p>",
        "id": 257502782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634202284
    },
    {
        "content": "<p>If <code>mk</code> takes an optional (space-separated?) list of arguments, like <code>use</code>, I think it will be pretty convenient</p>",
        "id": 257503039,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634202419
    },
    {
        "content": "<p>It would replace <code>rfn</code> (aka <code>refine</code>), right?</p>",
        "id": 257503110,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634202461
    },
    {
        "content": "<p>right</p>",
        "id": 257503125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634202469
    },
    {
        "content": "<p>I almost never use <code>split</code> normally</p>",
        "id": 257503145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634202480
    },
    {
        "content": "<p>But it's very beginner-friendly. Which is why I'm sad to see it go.</p>",
        "id": 257503227,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634202506
    },
    {
        "content": "<p><code>and_intro</code> seems pretty friendly</p>",
        "id": 257503267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634202540
    },
    {
        "content": "<p>You mean <code>split_and</code>?</p>",
        "id": 257503339,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634202588
    },
    {
        "content": "<p>we could do that</p>",
        "id": 257503382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634202603
    },
    {
        "content": "<p>But I think that you main point is that it would be nice to have a very cheap way to switch to term mode. <code>exact</code> is quite long for that.</p>",
        "id": 257503438,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634202633
    },
    {
        "content": "<p>having <code>⟨</code> be an exact-shortcut would be nice</p>",
        "id": 257503493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634202668
    },
    {
        "content": "<p>We could make <code>⟨?left, ?right⟩</code> a tactic, this should be unambiguous.</p>",
        "id": 257503495,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634202669
    },
    {
        "content": "<p><code>by</code> puts you in tactic mode. How do you leave it? With as little chars as possible?</p>",
        "id": 257503498,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634202671
    },
    {
        "content": "<p>did you know that lean 3 has exact-shortcuts too? There is only one though, and it is hard coded: <code>calc</code></p>",
        "id": 257503545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634202708
    },
    {
        "content": "<p><code>⟨</code> would work whenever there is a constructor that you want to use, right? But it's not the general thing.</p>",
        "id": 257503547,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634202709
    },
    {
        "content": "<p><code>calc</code> is not a tactic, but you don't need to write <code>exact</code> first by magic</p>",
        "id": 257503594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634202723
    },
    {
        "content": "<p><code>calc</code> even uses <code>refine</code> these dats (-;</p>",
        "id": 257503602,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634202727
    },
    {
        "content": "<p>We can make most expr-starters be exact-shortcuts, except for identifiers, which are unfortunately quite common</p>",
        "id": 257503712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634202795
    },
    {
        "content": "<p>I don't think we should interpret an unknown tactic identifier as an exact-shortcut because that will cause forward compatibility problems</p>",
        "id": 257503845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634202850
    },
    {
        "content": "<p><code>from</code> is of course also a way to switch to term mode, in lean 3. But it's still 4 chars.</p>",
        "id": 257503851,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634202851
    },
    {
        "content": "<p>Would <code>t</code> or <code>x</code> be too cryptic?</p>",
        "id": 257503878,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634202869
    },
    {
        "content": "<p><code>=</code></p>",
        "id": 257503886,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634202873
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">exact</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">True.intro</span>\n</code></pre></div>",
        "id": 257503890,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634202875
    },
    {
        "content": "<p>That's the best solution, I guess.</p>",
        "id": 257503919,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634202895
    },
    {
        "content": "<p>I'm not sure if this too cryptic though.</p>",
        "id": 257503965,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634202921
    },
    {
        "content": "<p>Like I said, I don't think that's a good idea because tactic names will now compete with variable and constant names. Think about <code>ring</code> for example</p>",
        "id": 257504002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634202942
    },
    {
        "content": "<p>It's Ring, now.</p>",
        "id": 257504018,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634202952
    },
    {
        "content": "<p>checkmate</p>",
        "id": 257504076,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634202963
    },
    {
        "content": "<p>But it's <code>Ring</code> in both cases, right?</p>",
        "id": 257504077,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634202965
    },
    {
        "content": "<p>no, tactics are snake case</p>",
        "id": 257504092,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634202973
    },
    {
        "content": "<p>check_Mate</p>",
        "id": 257504116,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634202986
    },
    {
        "content": "<p>It's also going to interact weirdly with tactic combinators</p>",
        "id": 257504246,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634203066
    },
    {
        "content": "<p>Is it any worse than exact, though?</p>",
        "id": 257504333,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634203094
    },
    {
        "content": "<p>Not sure. I wouldn't be surprised if some parsing oddity shows up like with the <code>-</code> block syntax</p>",
        "id": 257504417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634203143
    },
    {
        "content": "<p>that said, I'm not really too much against the pattern. MM0 has had refine-shortcut exactly like this since the beginning</p>",
        "id": 257504573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634203219
    },
    {
        "content": "<p>There is one unfortunate ambiguity though: <code>by rfl</code></p>",
        "id": 257504815,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634203334
    },
    {
        "content": "<p>luckily <code>rfl</code> means <code>exact rfl</code> in lean 4 so there is no problem</p>",
        "id": 257505011,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634203441
    },
    {
        "content": "<p>Don't forget about the nondeterministic tactics. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>   It could also mean <code>exact Iff.rfl</code>.</p>",
        "id": 257505141,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634203490
    },
    {
        "content": "<p>It also breaks <code>rw [l] at h</code>. <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> <a href=\"https://github.com/leanprover-community/mathlib4/pull/71\">https://github.com/leanprover-community/mathlib4/pull/71</a></p>",
        "id": 257505518,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634203669
    },
    {
        "content": "<p>Did you set the priority right? Tactics should always win</p>",
        "id": 257505624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634203720
    },
    {
        "content": "<p>I hope so.  At least I tried <code>priority := 0</code> and <code>priority := low</code> and it didn't make a difference.</p>",
        "id": 257505666,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634203752
    },
    {
        "content": "<p>The set of leading tactic tokens is known to the system, right? Can we make a custom parser for \"term, but where the first token is not a tactic token\"</p>",
        "id": 257506164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634203887
    },
    {
        "content": "<p>that should also prevent parser issues where a syntactically incorrect tactic backtracks a lot and gets parsed as a term</p>",
        "id": 257506302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634203945
    },
    {
        "content": "<p>If I remove the <code>have</code> above, then it works..</p>",
        "id": 257506304,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634203946
    },
    {
        "content": "<p>what does the bad code look like?</p>",
        "id": 257506367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634203982
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">implies_of_if_pos</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">t</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ite</span> <span class=\"n\">c</span> <span class=\"n\">t</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">hc</span>\n   <span class=\"k\">have</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">ite</span> <span class=\"n\">c</span> <span class=\"n\">t</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">if_pos</span> <span class=\"n\">hc</span>\n   <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">hp</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 257506425,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634204022
    },
    {
        "content": "<p>I think it's treating <code>have</code> as a term</p>",
        "id": 257506525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634204059
    },
    {
        "content": "<p>I agree, but I don't know why.</p>",
        "id": 257506542,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634204069
    },
    {
        "content": "<p>it's a longer match?</p>",
        "id": 257506554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634204076
    },
    {
        "content": "<p>woe is us for making the tactic language look so much like the term language...</p>",
        "id": 257506692,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634204160
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Renaming.20.60split.60/near/257506302\">said</a>:</p>\n<blockquote>\n<p>that should also prevent parser issues where a syntactically incorrect tactic backtracks a lot and gets parsed as a term</p>\n</blockquote>\n<p><span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span>  I  tried a similar strategy in Papyrus. This will cause virtually all tactic syntax errors to turn into very hard to debug term errors. You need some kind of token to enter term mode. I plan on using <code>#</code> in papyrus, and I think it could be a good idea here as well.</p>",
        "id": 257697189,
        "sender_full_name": "Mac",
        "timestamp": 1634304477
    },
    {
        "content": "<p>we already have such a token, it is <code>exact</code></p>",
        "id": 257697305,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634304519
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> yes but that, as mentioned, is quite long</p>",
        "id": 257697351,
        "sender_full_name": "Mac",
        "timestamp": 1634304546
    },
    {
        "content": "<p>I think I like the <code>#</code> suggestion. Writing <code>##ℕ</code> for <code>exact cardinal.mk ℕ</code> will look a bit funny, but besides that, I think it's an excellent symbol for the job.</p>",
        "id": 257698378,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634305027
    },
    {
        "content": "<p>I would put a space after it</p>",
        "id": 257699057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634305309
    },
    {
        "content": "<p>like <code># #ℕ</code></p>",
        "id": 257699147,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634305329
    },
    {
        "content": "<p>Is <code>%</code> a possibility? We are use <code>foo</code> and <code>foo%</code> as a naming scheme for analogous tactics and term-elaborators, so <code>%</code> is going to have a \"this is a term\" connotation already.</p>",
        "id": 257759651,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634329475
    },
    {
        "content": "<p>Shall we backport the decision to use <code>constructor</code> instead of <code>split</code> to mathlib3? If not, we'll need some special casing in mathport to handle the translation, which seems more trouble than it is worth.</p>",
        "id": 262959529,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1638150079
    },
    {
        "content": "<p>Can you say a bit more about what special casing is needed? From reading this thread it just sounds like the name split in lean4 is taken by a different tactic, so split should be renamed to something else in Lean 4, but my understanding of the whole mathport process is that there is an automated source to source translation which handles a lot harder things than just simple renames already, is the goal to have no tactic renames in the process?</p>",
        "id": 262962714,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1638154953
    },
    {
        "content": "<p>I was confused, special casing is trivial: I can (and will shortly) just change <a href=\"https://github.com/leanprover-community/mathport/blob/master/Mathport/Syntax/Translate/Tactic/Lean3.lean#L268\">https://github.com/leanprover-community/mathport/blob/master/Mathport/Syntax/Translate/Tactic/Lean3.lean#L268</a> to say </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[trTactic split]</span> <span class=\"kd\">def</span> <span class=\"n\">trSplit</span> <span class=\"o\">:</span> <span class=\"n\">TacM</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">constructor</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which should do it.</p>",
        "id": 262965275,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1638158876
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathport/pull/59\">https://github.com/leanprover-community/mathport/pull/59</a></p>",
        "id": 262965492,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1638159154
    }
]