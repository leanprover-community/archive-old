[
    {
        "content": "<p>I'm porting <code>Data.Vector.Basic</code> and the mapping from <code>Vector.nth</code> to <code>List.get</code> is foundational, but this was previously spelled <code>List.nthLe</code></p>\n<p>I'd like to get the following working:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Vector</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Vector</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">length_coe</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">l.length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">v.2</span>\n\n<span class=\"c1\">-- deprecate</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">nth_eq_nth_le</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">nth</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">v.toList.nthLe</span> <span class=\"n\">i.1</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">toList_length</span><span class=\"o\">]</span> <span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">i.2</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- replace</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">nth_eq_get</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">nth</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">v.toList.get</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">toList_length</span><span class=\"o\">]</span> <span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">i.2</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Vector</span>\n</code></pre></div>\n<p>I'm getting errors on the first theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">v.property</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">List.length</span> <span class=\"n\">v.val</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>and I don't understand Lean 3 to Lean 4 coercion handling well enough to understand the fix.</p>\n<p>With that in hand, I want to use it to tell the second theorem that I have <code>i: Fin (length (toList v))</code></p>",
        "id": 321944896,
        "sender_full_name": "Arien Malec",
        "timestamp": 1673997430
    },
    {
        "content": "<p>There is no <code>coe</code> function in Lean 4.</p>",
        "id": 321945427,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673997671
    },
    {
        "content": "<p>Lean 4 unfolds coercions, so you can use <code>Subtype.val</code> directly.</p>",
        "id": 321945481,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673997702
    },
    {
        "content": "<p>For other theorems, you need something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.cast\">docs#fin.cast</a></p>",
        "id": 321945633,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673997760
    },
    {
        "content": "<p>Do we have it in Lean 4?</p>",
        "id": 321945663,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673997775
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.cast#doc\">docs4#Fin.cast</a> ?</p>",
        "id": 321947082,
        "sender_full_name": "Arien Malec",
        "timestamp": 1673998462
    },
    {
        "content": "<p>or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.coe_cast#doc\">docs4#Fin.coe_cast</a></p>",
        "id": 321947158,
        "sender_full_name": "Arien Malec",
        "timestamp": 1673998510
    },
    {
        "content": "<p><code>Fin.cast</code></p>",
        "id": 321947419,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673998643
    },
    {
        "content": "<p>It turns out that lemma is seemingly useless. I need a proof that the round trip preserves the length. Hmm.</p>",
        "id": 321956792,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674003758
    },
    {
        "content": "<p>What exactly do you need? I mean, can you post a lemma statement without a proof?</p>",
        "id": 321959399,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674005444
    },
    {
        "content": "<p>I believe with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">length_toList</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">):</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Fin</span> <span class=\"o\">((</span><span class=\"n\">v.toList</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>gets me there?</p>",
        "id": 321969308,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674014020
    },
    {
        "content": "<p>wait...</p>",
        "id": 321969325,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674014037
    },
    {
        "content": "<p>that gets me a type; can I use it in the declaration?</p>",
        "id": 321969413,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674014084
    },
    {
        "content": "<p>Where I'm trying to get is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">nth_eq_get</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">nth</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">v.toList.get</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>So I need to recast <code>i</code>, which is <code>Fin n</code> to <code>Fin (v.toList.length)</code>, so I think I need to prove the above...</p>",
        "id": 321970022,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674014575
    },
    {
        "content": "<p>If I follow your hints on <code>Fin.cast</code>,  I need an <code>Equiv</code> to do that instead...</p>",
        "id": 321970173,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674014703
    },
    {
        "content": "<p>Which brings me full circle back to <code>length_coe</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">length_coe</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">l.length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">v.2</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">vector.length_coe</span> <span class=\"n\">Vector.length_coe</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">length_toList</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">v.toList.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">length_coe</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 321970665,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674015150
    },
    {
        "content": "<p>You can use (not tested)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">length_val</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v.val.length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">v.2</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">length_toList</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v.toList.length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">v.2</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">nth_eq_get</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">v.nth</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">v.toList.get</span> <span class=\"o\">(</span><span class=\"n\">Fin.cast</span> <span class=\"n\">v.length_toList.symm</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 321972456,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674017077
    },
    {
        "content": "<p>BTW, I think that RHS should be the definition of <code>Vector.nth</code> (and it should be called <code>Vector.get</code>).</p>",
        "id": 321972490,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674017133
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Using.20List.2Eget.20in.20Vector.2EBasic/near/321972490\">said</a>:</p>\n<blockquote>\n<p>BTW, I think that RHS should be the definition of <code>Vector.nth</code> (and it should be called <code>Vector.get</code>).</p>\n</blockquote>\n<p>I agree -- was defined upstream of this file, but will do a PR to deprecate <code>nth</code> and <code>#align</code> to <code>get</code></p>",
        "id": 321972589,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674017235
    },
    {
        "content": "<p>You can just replace the definition, no need to deprecate.</p>",
        "id": 321972608,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674017261
    },
    {
        "content": "<p>Just use <code>get</code> instead of <code>nth</code> everywhere and <code>#align vector.nth Vector.get</code></p>",
        "id": 321972658,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674017292
    },
    {
        "content": "<p>Note that <code>Fin.cast</code> preserves <code>val</code>: <code>(Fin.cast h i).val = i.val</code> is a <code>rfl</code>. Can't say the same about <code>Eq.cast</code>.</p>",
        "id": 321972708,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674017350
    },
    {
        "content": "<p>(at least, I'm not sure).</p>",
        "id": 321972727,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674017361
    },
    {
        "content": "<p>Also, I know that definitions that use pattern matching break <code>rfl</code> equalities in Lean 3. If this is the case in Lean 4, then we should avoid them.</p>",
        "id": 321972937,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674017491
    },
    {
        "content": "<p>It's not the case in Lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test_fst</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">test</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">x.1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 321973098,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674017602
    },
    {
        "content": "<p>So, no need to worry about this.</p>",
        "id": 321973111,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674017619
    },
    {
        "content": "<p>I believe this is a side effect of eta for structures (here <code>x</code>).</p>",
        "id": 321989597,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674027747
    }
]