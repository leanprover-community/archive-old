[
    {
        "content": "<p>Im currently working on a package that is meant to expand on lean's current std for lists, but I started considering whether I should add them to lean's std directly. I would like some input. Thank in advance, and also, here is the current <a href=\"https://github.com/crabbo-rave/lean4-Itertools\">repo</a></p>",
        "id": 272550260,
        "sender_full_name": "Joseph O",
        "timestamp": 1645313520
    },
    {
        "content": "<p>My suggestion is to add to mathlib4, for example here -&gt; <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Data/List/Defs.lean\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Data/List/Defs.lean</a></p>",
        "id": 272550463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645313769
    },
    {
        "content": "<p>Ok, will do</p>",
        "id": 272550566,
        "sender_full_name": "Joseph O",
        "timestamp": 1645313890
    },
    {
        "content": "<p>But there are some I think would be important in the core std</p>",
        "id": 272550777,
        "sender_full_name": "Joseph O",
        "timestamp": 1645314230
    },
    {
        "content": "<p>the compiler <code>Std</code>'s purpose is to contain everything that the compiler needs to build itself that doesn't fit in other packages, everything else goes to mathlib 4 for now and will probably find a new home in some \"std-ext\" or whatever at some point.</p>",
        "id": 272551014,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645314532
    },
    {
        "content": "<p>Ok cool</p>",
        "id": 272556973,
        "sender_full_name": "Joseph O",
        "timestamp": 1645321502
    },
    {
        "content": "<p>Im pretty new to this, so I want to ask. Is this an ok docstring?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">`List.choose` filters list `l` of type `List α` with `chooser` which is of type `α → Option β`</span>\n<span class=\"sd\">It keeps the elements where `chooser x` is `some _` and discards the ones that are `none`</span>\n\n<span class=\"sd\">Example:</span>\n<span class=\"sd\">```</span>\n<span class=\"sd\">def oneTwo? : Nat → Option Nat</span>\n<span class=\"sd\">  | 1 =&gt; some 1</span>\n<span class=\"sd\">  | 2 =&gt; some 2</span>\n<span class=\"sd\">  | _ =&gt; none</span>\n\n<span class=\"sd\">[1, 2, 3, 5, 1, 4, 2] |&gt; choose oneTwo? = [1, 2, 1, 2]</span>\n<span class=\"sd\">```</span>\n<span class=\"sd\">-/</span>\n</code></pre></div>",
        "id": 272561257,
        "sender_full_name": "Joseph O",
        "timestamp": 1645326499
    },
    {
        "content": "<p>Can you explain what the beta type does? Does it map to it or ignore the beta value? Your oneTwo? is a version of id, so it's hard to tell.</p>",
        "id": 272562321,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645327951
    },
    {
        "content": "<p><code>l.choose f = l.filter (f · |&gt;.isSome)</code>, so I'm not sure it's a really worthwhile function</p>",
        "id": 272563199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645329067
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/adding.20to.20std\">#general &gt; adding to std</a> by <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span>.</p>",
        "id": 272563272,
        "sender_full_name": "Notification Bot",
        "timestamp": 1645329151
    },
    {
        "content": "<p>the name is also easily confused with other uses of \"choose\" or \"choice\" in mathlib, like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.choose\">docs#fintype.choose</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.choose\">docs#nat.choose</a></p>",
        "id": 272563396,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645329352
    },
    {
        "content": "<p>From the example the behavior could also be <code>filter_map</code>.</p>",
        "id": 272581887,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645352009
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/adding.20to.20std/near/272563199\">said</a>:</p>\n<blockquote>\n<p><code>l.choose f = l.filter (f · |&gt;.isSome)</code>, so I'm not sure it's a really worthwhile function</p>\n</blockquote>\n<p>I guess you are right</p>",
        "id": 272588936,
        "sender_full_name": "Joseph O",
        "timestamp": 1645359770
    },
    {
        "content": "<p>I have found it useful once or twice, when filtering does out a list with a function that returns option</p>",
        "id": 272588975,
        "sender_full_name": "Joseph O",
        "timestamp": 1645359829
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/287929-mathlib4/topic/adding.20to.20std/near/272562321\">said</a>:</p>\n<blockquote>\n<p>Can you explain what the beta type does? Does it map to it or ignore the beta value? Your oneTwo? is a version of id, so it's hard to tell.</p>\n</blockquote>\n<p>I would say that it is ignored</p>",
        "id": 272589079,
        "sender_full_name": "Joseph O",
        "timestamp": 1645359933
    },
    {
        "content": "<p>That detail is probably good to include in your docstring. Think of the docstring as the specification for your code. Of course, there's always the source code itself, but that might change over time as you discover you have to deal ith certain implementation details. But the docstring, especially for such an API function, would likely remain constant.</p>",
        "id": 272589557,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1645360449
    },
    {
        "content": "<p>Ok, thanks</p>",
        "id": 272591913,
        "sender_full_name": "Joseph O",
        "timestamp": 1645363170
    },
    {
        "content": "<p>Do you think this is better?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">`List.choose` filters list `l` of type `List α` with `chooser` which is of type `α → Option β`,</span>\n<span class=\"sd\">yet `β` is ignored.</span>\n<span class=\"sd\">It keeps the elements where `chooser x` is `some _` and discards the ones that are `none`</span>\n</code></pre></div>",
        "id": 272592119,
        "sender_full_name": "Joseph O",
        "timestamp": 1645363417
    },
    {
        "content": "<p>And also, is it just me or does docgen-4 have support for docstrings now?</p>",
        "id": 272592198,
        "sender_full_name": "Joseph O",
        "timestamp": 1645363490
    },
    {
        "content": "<p>Yes it does</p>",
        "id": 272593517,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1645365011
    }
]