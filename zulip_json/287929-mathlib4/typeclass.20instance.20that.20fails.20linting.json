[
    {
        "content": "<p>In <code>Algebra.PUnitInstances</code> I ported an instance for <code>CanonicallyOrderedAddMonoid</code> that I changed from mathport <em>only</em> by adding an manual instance name and marking parameters as implicits.</p>\n<p>It somehow, and uniquely for all the instances in this file, require an argument (of <code>unit</code>) to use, and it fails the <code>impossibleInstance</code> lint</p>\n<p>The definition in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1319\">mathlib4#1319</a> is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">canonicallyOrderedAddMonoid</span><span class=\"o\">:</span> <span class=\"n\">CanonicallyOrderedAddMonoid</span> <span class=\"n\">PUnit</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span>\n        <span class=\"o\">{</span> <span class=\"n\">PUnit.commRing</span><span class=\"o\">,</span> <span class=\"n\">PUnit.partialOrder</span> <span class=\"k\">with</span>\n          <span class=\"n\">exists_add_of_le</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">PUnit.unit</span><span class=\"o\">,</span> <span class=\"n\">Subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩</span><span class=\"bp\">..</span> <span class=\"o\">}</span> <span class=\"bp\">&lt;;&gt;</span>\n      <span class=\"n\">intros</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>As mathport had it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CanonicallyOrderedAddMonoid</span> <span class=\"n\">PUnit</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span>\n        <span class=\"o\">{</span> <span class=\"n\">PUnit.commRing</span><span class=\"o\">,</span> <span class=\"n\">PUnit.completeBooleanAlgebra</span> <span class=\"k\">with</span>\n          <span class=\"n\">exists_add_of_le</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">star</span><span class=\"o\">,</span> <span class=\"n\">Subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩</span><span class=\"bp\">..</span> <span class=\"o\">}</span> <span class=\"bp\">&lt;;&gt;</span>\n      <span class=\"n\">intros</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>Any ideas?</p>",
        "id": 319501216,
        "sender_full_name": "Arien Malec",
        "timestamp": 1672881567
    },
    {
        "content": "<p>I fixed this, but not clear on why/how.</p>",
        "id": 319512603,
        "sender_full_name": "Arien Malec",
        "timestamp": 1672891368
    },
    {
        "content": "<blockquote>\n<p>It somehow, and uniquely for all the instances in this file, require an argument (of unit) to use, and it fails the impossibleInstance lint</p>\n</blockquote>\n<p>What does this mean?</p>",
        "id": 319533771,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672906704
    },
    {
        "content": "<p>Have you tried <code>set_option autoImplicit false</code>?</p>",
        "id": 319538069,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672908864
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/287929-mathlib4/topic/typeclass.20instance.20that.20fails.20linting/near/319533771\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>It somehow, and uniquely for all the instances in this file, require an argument (of unit) to use, and it fails the impossibleInstance lint</p>\n</blockquote>\n<p>What does this mean?</p>\n</blockquote>\n<p>I have no idea what the impossibleInstances lint is or does...</p>",
        "id": 319655785,
        "sender_full_name": "Arien Malec",
        "timestamp": 1672946465
    },
    {
        "content": "<p>but it exists.</p>",
        "id": 319657355,
        "sender_full_name": "Arien Malec",
        "timestamp": 1672946959
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Std/Tactic/Lint/TypeClass.html#Std.Tactic.Lint.impossibleInstance\">https://leanprover-community.github.io/mathlib4_docs/Std/Tactic/Lint/TypeClass.html#Std.Tactic.Lint.impossibleInstance</a></p>",
        "id": 319658215,
        "sender_full_name": "Arien Malec",
        "timestamp": 1672947259
    },
    {
        "content": "<p>If you pull down mathlib4##1319 and change </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">canonicallyOrderedAddMonoid</span><span class=\"o\">:</span> <span class=\"n\">CanonicallyOrderedAddMonoid</span> <span class=\"n\">PUnit</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span>\n        <span class=\"o\">{</span> <span class=\"n\">PUnit.commRing</span><span class=\"o\">,</span>  <span class=\"n\">PUnit.completeBooleanAlgebra</span> <span class=\"k\">with</span>\n          <span class=\"n\">exists_add_of_le</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">unit</span><span class=\"o\">,</span> <span class=\"n\">Subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩</span><span class=\"bp\">..</span> <span class=\"o\">}</span> <span class=\"bp\">&lt;;&gt;</span>\n      <span class=\"n\">intros</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">partialOrdered</span><span class=\"o\">:</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">PUnit</span> <span class=\"n\">where</span>\n  <span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">canonicallyOrderedAddMonoid</span><span class=\"o\">:</span> <span class=\"n\">CanonicallyOrderedAddMonoid</span> <span class=\"n\">PUnit</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span>\n        <span class=\"o\">{</span> <span class=\"n\">PUnit.commRing</span><span class=\"o\">,</span>  <span class=\"n\">PUnit.partialOrdered</span> <span class=\"k\">with</span>\n          <span class=\"n\">exists_add_of_le</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">unit</span><span class=\"o\">,</span> <span class=\"n\">Subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩</span><span class=\"bp\">..</span> <span class=\"o\">}</span> <span class=\"bp\">&lt;;&gt;</span>\n      <span class=\"n\">intros</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>you then get a syntax error later on that requires adding a <code>unit</code> that then triggers the lint.</p>",
        "id": 319661054,
        "sender_full_name": "Arien Malec",
        "timestamp": 1672948212
    },
    {
        "content": "<p>The errors are <code>expected structure</code><br>\nand then the super confusing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">LinearOrderedCancelAddCommMonoid.le_total</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">PUnit</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">PUnit</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 319661520,
        "sender_full_name": "Arien Malec",
        "timestamp": 1672948406
    },
    {
        "content": "<p>I bet if you put pp.all on then the two &lt;= s will look super-different but will be defeq.</p>",
        "id": 319684547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672957921
    },
    {
        "content": "<p>Can try this.  But the major weirdness is why the transformation above leads to a type error that’s solve by inserting a ()</p>",
        "id": 319690201,
        "sender_full_name": "Arien Malec",
        "timestamp": 1672960315
    },
    {
        "content": "<p>The culprit here is <code>variable (y : PUnit)</code> combined with <code>by trivial</code>.  My suggestion would be to remove the <code>variable</code> (and <code>universe</code>) commands in the file.</p>",
        "id": 319693000,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672961673
    },
    {
        "content": "<p>Will eliminate in next push.</p>",
        "id": 319694666,
        "sender_full_name": "Arien Malec",
        "timestamp": 1672962614
    }
]