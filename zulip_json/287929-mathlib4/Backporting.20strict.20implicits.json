[
    {
        "content": "<p>Lean 4 does not support \"strict implicit\" mode any more, that is, <code>@@foo</code>. There are only 40 hits for <code>@@</code> in mathlib, so it seems like a reasonable backport candidate. It's also not particularly hard to support in the porting tool, so we can also not backport.</p>",
        "id": 244825030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625347599
    },
    {
        "content": "<p>Fwiw, I encountered exactly one type where strict implicit binders looked nicer while preparing our lab course, for which the following wrapper seemed adequate:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">StrictImplicitProp</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"o\">(</span><span class=\"n\">StrictImplicitProp</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">StrictImplicitProp.fn</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Env.Adequate</span> <span class=\"o\">(</span><span class=\"n\">ρ</span> <span class=\"o\">:</span> <span class=\"n\">Env</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">State</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">StrictImplicitProp</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">v</span><span class=\"o\">},</span> <span class=\"n\">ρ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"n\">σ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">v</span>\n</code></pre></div>",
        "id": 244845763,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1625382720
    }
]