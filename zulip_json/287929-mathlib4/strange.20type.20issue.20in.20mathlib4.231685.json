[
    {
        "content": "<p>I've been staring at this issue in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1685\">mathlib4#1685</a> for a bit -- I assume there's some obvious implicit issues going on but I've had no luck with the usual working though of implicits, etc.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Card</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">w</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Finite.of_injective_finite_range</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">Finite</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">Finite</span> <span class=\"n\">ι</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Finite.of_injective</span> <span class=\"o\">(</span><span class=\"n\">Set.rangeFactorization</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf.codRestrict</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>gives a host of issues. As far as I can tell, there's no change from mathlib, and this should JustWork(tm)</p>\n<p>The issues are:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Function.Injective.codRestrict</span> <span class=\"bp\">?</span><span class=\"n\">m.671</span> <span class=\"n\">hf</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">hf</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Function.Injective</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Function.Injective</span> <span class=\"bp\">?</span><span class=\"n\">m.669</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">of_injective</span> <span class=\"o\">(</span><span class=\"n\">rangeFactorization</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Function.Injective.codRestrict</span> <span class=\"bp\">?</span><span class=\"n\">m.671</span> <span class=\"bp\">?</span><span class=\"n\">m.701</span><span class=\"o\">)</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">Function.Injective.codRestrict</span> <span class=\"bp\">?</span><span class=\"n\">m.671</span> <span class=\"bp\">?</span><span class=\"n\">m.701</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Function.Injective</span> <span class=\"o\">(</span><span class=\"n\">codRestrict</span> <span class=\"bp\">?</span><span class=\"n\">m.669</span> <span class=\"bp\">?</span><span class=\"n\">m.670</span> <span class=\"bp\">?</span><span class=\"n\">m.671</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Function.Injective</span> <span class=\"o\">(</span><span class=\"n\">rangeFactorization</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 322341967,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674150936
    },
    {
        "content": "<p>(and if you're in the file and have a fix, just push it, please!)</p>",
        "id": 322343317,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674151257
    },
    {
        "content": "<p>I'm not at lean, but I commented on the pr</p>",
        "id": 322348597,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1674152680
    },
    {
        "content": "<p>Thanks, makes sense of the issues I was seeing.</p>",
        "id": 322350529,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674153186
    },
    {
        "content": "<p>I fixed the upstream file in the PR</p>",
        "id": 322356421,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674154969
    }
]