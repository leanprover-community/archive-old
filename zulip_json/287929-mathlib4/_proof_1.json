[
    {
        "content": "<p>In mathlib3 <code>algebra.group.with_one_defs</code> we see <a href=\"https://github.com/leanprover-community/mathlib/blob/246853d54961d0f89ab94e19a76905cd2e1c33f0/src/algebra/group/with_one/defs.lean#L112-L120\">here</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- the `show` statements in the proofs are important, because otherwise the generated lemmas</span>\n<span class=\"c1\">-- `with_one.mul_one_class._proof_{1,2}` have an ill-typed statement after `with_one` is made</span>\n<span class=\"c1\">-- irreducible.</span>\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">mul_one_class</span> <span class=\"o\">(</span><span class=\"n\">with_one</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">),</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"n\">one_mul</span>   <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">with_one</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">option.lift_or_get_is_left_id</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_one</span>   <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">with_one</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">option.lift_or_get_is_right_id</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>It would be nice to test whether these <code>show</code>s are still needed, but I don't know what the analogue of <code>_proof_1</code> is. Are these <code>show</code>s likely to be needed in mathlib4?</p>",
        "id": 313734606,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670102124
    },
    {
        "content": "<p>You can use <code>whatsnew</code> to print all the generated declarations (including proofs, etc).</p>",
        "id": 313752196,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670117349
    }
]