[
    {
        "content": "<p>Another discussion that was brought up on <a href=\"https://github.com/leanprover-community/mathlib4/pull/178\">PR 178</a> is that the <code>swap i</code> tactic doesn't really swap the <code>i</code>-th goal with the first one except for the particular case when <code>i</code> equals <code>2</code>.</p>\n<p>A few ideas have been brought up to make it less confusing:</p>\n<ul>\n<li>Gabriel suggested a different name: <code>pick</code></li>\n<li>Sebastian mentioned Isabelle's <code>prefer</code></li>\n<li>I proposed making <code>swap</code> do a proper interchange of goals (not guaranteed to be consistent with Lean 3 mathlib AFAIK)</li>\n</ul>\n<p>I'm bringing the discussion to Zulip because it's easier to discuss here</p>\n<p>And just to make the trade-off clearer, the tactic name has to make sense even when used without a parameter because the default value is <code>2</code>.</p>",
        "id": 270718509,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643983368
    },
    {
        "content": "<p>I like <code>pick</code>. But in that case I would say that there doesn't have to be a default value.</p>",
        "id": 270719247,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643983661
    },
    {
        "content": "<p>So maybe <code>pick</code> and <code>swap</code> can both exist? Where <code>swap</code> does a proper swap of the goals (with default value <code>2</code>). And <code>pick</code> just moves goal <code>n</code> to the start of the list of goals.</p>",
        "id": 270719370,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643983698
    },
    {
        "content": "<p>That's a good one. Do you think it would be too troublesome to backport this behavior to mathlib?</p>",
        "id": 270719826,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643983912
    },
    {
        "content": "<p>Hmm, I don't know if that's worth it.</p>",
        "id": 270720040,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643984007
    },
    {
        "content": "<p><code>mathport</code> could just translate <code>swap n</code> to <code>pick n</code>, but translate <code>swap</code> to <code>swap</code>.</p>",
        "id": 270720082,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643984026
    },
    {
        "content": "<p>I like the idea of consistency with other systems when the tactics have the same behaviour and we dont have compelling reasons not to, it should make lean code more readable by others and conversely other systems more readable to people familiar with lean</p>",
        "id": 270721973,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643984897
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> do you mean you prefer <code>prefer</code>? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 270722193,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643985009
    },
    {
        "content": "<p>Worth also checking what Coq does in this area then</p>",
        "id": 270722474,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643985179
    },
    {
        "content": "<p>If it has the same behaviour as your new tactics then yes, but if something else (in isabelle or coq for example) is even closer then I preferannly prefer those and preferably not prefer <code>prefer</code></p>",
        "id": 270722477,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643985181
    },
    {
        "content": "<p><code>prefer</code> is a bad name though; it's very hard to guess. I say we stay consistent only where the other systems have made sensible decisions. Same for broken semantics: if, say, Coq <code>swap</code> works like Lean 3 <code>swap</code>, faithfully implementing a <code>swap</code> that doesn't swap still wouldn't be helpful.</p>",
        "id": 270723550,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1643985735
    },
    {
        "content": "<p><code>prefer</code> would make sense in a world where tactics try to apply to later goals if they fail when applied to the first goal. I don't know if that's actually how Isabelle works though.</p>",
        "id": 270723719,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643985826
    },
    {
        "content": "<p>Not automatically, no. I assume the intention is more like \"I prefer to start with this goal, it looks way easier\".</p>",
        "id": 270724092,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1643986001
    },
    {
        "content": "<p>Just to mention these possibilities, even though they're long, <code>pick_goal i</code> or <code>prefer_goal i</code> are super explicit</p>",
        "id": 270724764,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643986325
    },
    {
        "content": "<p>So we'd have</p>\n<ul>\n<li><code>pick_goal i</code></li>\n<li><code>swap_goal i</code></li>\n<li><code>work_on_goal i</code></li>\n</ul>",
        "id": 270724899,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643986385
    },
    {
        "content": "<p>The consensus, however, is that we want those three behaviors. I'm gonna implement them and we can choose names afterwards</p>",
        "id": 270726043,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643986887
    },
    {
        "content": "<p>I like this suggestion--these tactics are probably pretty rare so being explicit has more advantages and less cost. Otherwise <code>pick</code> could sound pretty similar to <code>use</code> or <code>choose</code>.</p>",
        "id": 270726094,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643986906
    },
    {
        "content": "<p>That's exactly what I thought. Or it could even look like some mysterious form of <code>specialize</code></p>\n<p>Let me also include <code>rotate_goals n</code> in the suggested package (instead of <code>rotate</code>)</p>",
        "id": 270726270,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643986967
    },
    {
        "content": "<p>Is the intended behaviour for <code>swap i</code> that it literally swaps the current goal for the <code>ith</code> goal in the queue and vice versa?  So, for example, if I have current goal <code>g1</code> and a list of subsequent goals <code>[g2, g3, g4, g5, ...]</code> then <code>swap 4</code> would leave me with current goal <code>g4</code> and subsequent goals <code>[g2, g3, g1, g5, ...]</code>?  If so, it's not obvious to me (in my limited experience) that this behaviour would be very useful.  Do any other systems have a tactic that does a literal swap like this?</p>",
        "id": 270728475,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1643987914
    },
    {
        "content": "<p>It's indeed a small detail, but we have the chance to make the semantics consistent this time</p>",
        "id": 270730799,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643988960
    },
    {
        "content": "<p>But is there a reason for wanting this behaviour in particular, other than the fact that we currently have a tactic that has been (mis-)named <code>swap</code>?</p>",
        "id": 270731228,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1643989146
    },
    {
        "content": "<p>I don't think so. Ultimately, we could get away just with <code>pick_goal i</code>. And <code>swap_goal</code> or <code>swap</code> would just call <code>pick_goal 2</code></p>",
        "id": 270732313,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643989612
    },
    {
        "content": "<p>FWIW <code>rotate</code> is another of these goal management commands</p>",
        "id": 270735060,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643990679
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60swap.60.20semantics/near/270735060\">said</a>:</p>\n<blockquote>\n<p>FWIW <code>rotate</code> is another of these goal management commands</p>\n</blockquote>\n<p>What do you think about this?</p>\n<blockquote>\n<p>Let me also include rotate_goals n in the suggested package (instead of rotate)</p>\n</blockquote>",
        "id": 270735915,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643991033
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/178\">PR updated</a></p>",
        "id": 270741421,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643993442
    },
    {
        "content": "<p>That was really good input <span class=\"user-mention\" data-user-id=\"422543\">@Stuart Presnell</span>. It simplifies things a lot</p>",
        "id": 270741987,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643993721
    },
    {
        "content": "<p>Just to see what a stack manipulation language chose as words: in Forth, the word for removing the nth element of the stack and putting it on top is called <code>roll</code> (it's a roll of the top n elements). That's to contrast it with <code>rot</code> which is a roll of just the top 3 elements, which is a common operation.  <code>pick</code> copies the nth element to the top. <code>swap</code> swaps the top two elements.</p>",
        "id": 270753731,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643999286
    },
    {
        "content": "<p>Nice. That's what <code>swap</code> does on the current state of the PR. And <code>roll i</code> is accomplished by <code>pick_goal i</code>. I think these two operations should be enough for most use cases when writing proofs.</p>\n<p>Also, do we really need <code>rotate</code>?</p>",
        "id": 270755569,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644000095
    },
    {
        "content": "<p>Actually <code>rotate</code> is useful if I want to say \"this is really ugly and I want to deal with it last\"</p>",
        "id": 270756284,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644000431
    },
    {
        "content": "<p>Yeah, <code>rotate</code> applies to the entire queue, but <code>pick_goal</code> only applies to the front.</p>\n<p>Some more name suggestions to add to your list: <code>roll_goals</code>, <code>lift_goal</code>, <code>raise_goal</code>.</p>",
        "id": 270757937,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644001129
    },
    {
        "content": "<p>For simplicity you should just implement <code>permute_goals σ</code> and let the user do the rest of the work</p>",
        "id": 270758028,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1644001174
    },
    {
        "content": "<p>Even simpler, we only need <code>rotate</code> and <code>swap</code> with no arguments since they generate the symmetric group <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 270758967,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644001587
    }
]