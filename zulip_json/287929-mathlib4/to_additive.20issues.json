[
    {
        "content": "<p><code>to_additive</code> has been through the ringer recently. Let me throw another punch or two.</p>\n<p>In <code>Algebra.Group.Defs</code> the <code>to_additive</code> attributes for <code>HPow</code> are wrong which leads to errors when converting from <code>pow</code> to <code>smul</code> where it complains about <code>HMul.hMul</code>. The first issue is to recognize that the argument reordering is wrong for <code>HPow.hPow</code> (it should be <code>1 5</code>). However, that doesn't lead to a complete fix because <code>Pow</code> is really the heterogeneous <code>HPow</code> under the hood.</p>\n<p>I came up with a fix: Define a heterogeneous scalar multiplication class <code>HSmul</code> with field <code>hSmul</code>, then make <code>•</code> notation for <code>HSmul.hSmul</code> and provide an instance <code>instHSmul</code> to mirror things like <code>instHPow</code>. Of course, we could do the same thing for <code>Vadd</code> if we wanted / needed, but I feel this is less pressing. Then all the translation seems to work.</p>\n<p>This allows the successful(∗) fix of the note lower in this file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- FIXME The lemmas in this section should be done by `to_additive` below, but it fails.</span>\n</code></pre></div>\n<p>What do we think of this? Should I implement it?</p>",
        "id": 311782547,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669195011
    },
    {
        "content": "<p>Regarding the (∗): it actually <em>doesn't</em> work for <code>succ_nsmul</code>, but for a different reason. With the above fix implemented, <code>to_additive</code> fails when trying to additivize <code>pow_succ</code> into <code>succ_nsmul</code> because it sees the <code>1</code> and incorrectly changes it into <code>0</code> (here it is incorrect because it occurs as <code>n + 1</code>, so it really represents <code>n.succ</code>). Note that <code>to_additive</code> in Lean 3 correctly additivizes this declaration.</p>\n<p>This happens despite the fact that there is a note in the file about <code>add_monoid</code>s that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> In the definition, we use `n.succ` instead of `n + 1` in the `nsmul_succ'` and `npow_succ'` fields</span>\n<span class=\"cm\">to make sure that `to_additive` is not confused (otherwise, it would try to convert `1 : ℕ`</span>\n<span class=\"cm\">to `0 : ℕ`). -/</span>\n</code></pre></div>\n<p>Moreover, even though in Lean 4 we still use <code>n.succ</code> in the definition of <code>AddMonoid</code> I think <code>to_additive</code> still manages to see a <code>1</code> somehow and converts it into a <code>0</code> (this is based on trying to port <code>Algebra.Group.InjSurj</code> and noting that with the fix in the previous post, <code>to_additive</code> fails to additivize in certain situations for what I believe to be this reason).</p>",
        "id": 311783905,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669195556
    },
    {
        "content": "<p>What is <code>HPow</code> used for?</p>",
        "id": 311785784,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1669196230
    },
    {
        "content": "<p>Lean 4 core has all kinds of heterogeneous operations <code>HMul</code>, <code>HAdd</code>, <code>HPow</code> and the notations are actually defined on these type classes, not on <code>Mul</code>, <code>Add</code>, and <code>Pow</code>, but the latter have instances of the former, so they inherit the notation.</p>",
        "id": 311786022,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669196305
    },
    {
        "content": "<p>If you wanted, you could use it get it a pow functions <code>ℕ → ℚ → ℝ</code> (with junk values for negative powers). I'm not saying we should do this, only that it's possible.</p>",
        "id": 311786321,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669196415
    },
    {
        "content": "<p>so <code>HSMul</code> is <code>HMul</code>, right?</p>",
        "id": 311786504,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1669196493
    },
    {
        "content": "<p>Well, yes and no? They are essentially the same (i.e., structures with a single function <code>α → β → γ</code>), but their respective functions get different notation <code>•</code> vs. <code>*</code>.</p>",
        "id": 311787006,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669196667
    },
    {
        "content": "<p>So they are the same and / or different in precisely the same ways as <code>HMul</code>, <code>HAdd</code> and <code>HPow</code>.</p>",
        "id": 311787318,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669196794
    },
    {
        "content": "<p>Anyway, I need to go to bed. Hopefully while I sleep a few hours people can discuss this a bit.</p>",
        "id": 311787424,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669196850
    },
    {
        "content": "<p>Just to emphasize one point about why I think we need this type class <code>HSmul</code>: if we don't have it, what is the additivization of <code>instHPow</code> (which is necessary to have)?</p>",
        "id": 311787861,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669197009
    },
    {
        "content": "<p>I'll take a look today. <code>1 : ℕ</code> should not be transformed to <code>0</code> by <code>to_additive</code> for a long time already.</p>",
        "id": 311795179,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669199586
    },
    {
        "content": "<p>I don't think <code>instHPow</code> makes sense in this generality</p>",
        "id": 311798076,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1669200643
    },
    {
        "content": "<p>Did we discuss that we don't want to use <code>HMul</code> for scalar multiplication? If we do, <code>HMul</code> could be the additive analogue of <code>HPow</code>.</p>",
        "id": 311828521,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669211052
    },
    {
        "content": "<p>There are currently multiple issues with not translating multiplicative things on <code>ℕ</code> with additive things (both in the code and in the attributes that are set). <br>\nSince numerals are encoded differently in Lean 4, we need some logic around those.<br>\n<span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>: if I look through a fully elaborated expression, will all natural number literals (<code>Expr.lit</code>) be inside an application of <code>OfNat.ofNat</code>?</p>",
        "id": 311830097,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669211547
    },
    {
        "content": "<p>Floris, I saw the branch <code>to_additive_fixes</code>. FYI: it still is translating <code>1 : ℕ</code> to <code>0</code>. See the offshoot branch <code>j-loreaux/HSmul</code> and look at the first error in <code>Algebra.Group.Defs</code> where it tries to additivize <code>pow_succ</code>.</p>",
        "id": 311846568,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669216585
    },
    {
        "content": "<p>Shouldn't we just create a new type class <code>HSmul</code> for the new notation? It seems better to keep things separate instead of merging them under the hood (i.e., I think it's a bad idea to implement both <code>Smul</code> and <code>Mul</code> in terms of <code>HMul</code>, especially because at some point in time we might want an <em>actual</em> heterogenous multiplication; that is, a heterogenous operation which gets the <code>*</code> notation).</p>",
        "id": 311847281,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669216787
    },
    {
        "content": "<p>Yaël, can you explain why you don't think <code>instHPow</code> makes sense? I don't see any issue with it yet.</p>",
        "id": 311847425,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669216824
    },
    {
        "content": "<blockquote>\n<p>Still todo:</p>\n<ul>\n<li>deal with literals in Nat (see my question here)</li>\n</ul>\n</blockquote>",
        "id": 311847510,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669216850
    },
    {
        "content": "<p>Oh sorry, I misread.</p>",
        "id": 311847631,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669216888
    },
    {
        "content": "<p>I'm fine with keeping <code>mul</code> and <code>smul</code> separate. And if we do, I agree we need an <code>HSmul</code>.</p>",
        "id": 311848013,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669216999
    },
    {
        "content": "<p>I thought the entire point of <code>HMul</code> was to unify <code>mul</code> and <code>smul</code>?</p>",
        "id": 311852550,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1669218407
    },
    {
        "content": "<p>Do we have any use for <code>HMul</code>?</p>",
        "id": 311852643,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1669218452
    },
    {
        "content": "<p>Why would we <em>want</em> to unify them? Unless we're trying to unify notation? Types are cheap.</p>",
        "id": 311856062,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669219451
    },
    {
        "content": "<p>There are two potential reasons to want to unify them. (1) Then we have a reasonable way to write left actions and right actions (I'd like to see bimodules properly handled notationally), (2) there is special elaborator support for HMul, though I don't really know the details (maybe we can use the <code>binop%</code> elaboration helper for an <code>HSmul</code> too? then this wouldn't be an advantage)</p>",
        "id": 311856948,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669219707
    },
    {
        "content": "<p>I don't see why this requires unification. We could accomplish this with an <code>HSmul</code> and it has the added benefit that we keep things separate. We can add the elaboration support if we want of course.</p>",
        "id": 311858296,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669220120
    },
    {
        "content": "<p>But <em>why</em> would we want <code>HSmul</code>? This doesn't represent anything that <code>HMul</code> doesn't represent already.</p>",
        "id": 311858716,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1669220250
    },
    {
        "content": "<p>I'm pushing this for two reasons: (1) I think it will be easier to plug in to <code>to_additive</code>, but perhaps more importantly (2) it safeguards against what I think could be very painful refactors down the road.</p>",
        "id": 311858873,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669220292
    },
    {
        "content": "<p><code>HMul</code> is to <code>Mul</code> what <code>HMul</code> is to <code>SMul</code>.</p>",
        "id": 311858917,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1669220309
    },
    {
        "content": "<p>Disagree.</p>",
        "id": 311858956,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669220324
    },
    {
        "content": "<p>So I don't think we want <code>HPow</code> at all.</p>",
        "id": 311859003,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1669220341
    },
    {
        "content": "<p>Hmul is still for <code>*</code>, but heterogeneous.</p>",
        "id": 311859051,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669220356
    },
    {
        "content": "<p>So long as <code>HSMul</code> is fully generic in the two inputs and the output like <code>HMul</code>, I think I'm on board with it. It's a good way to indicate \"this is an action of some sort\", and I think it should work for both left and right actions.</p>\n<p>(We might still have some <code>HMul</code> instances for certain kinds of actions, like for scalar multiplication on pi types, since that's more of a lift of the scalar using <code>const</code>. Is it a scalar action, or is it a coercion to the pi structure?)</p>",
        "id": 311859757,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669220584
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/to_additive.20issues/near/311858716\">said</a>:</p>\n<blockquote>\n<p>But <em>why</em> would we want <code>HSmul</code>? This doesn't represent anything that <code>HMul</code> doesn't represent already.</p>\n</blockquote>\n<p><code>has_one</code> doesn't represent anything that <code>has_zero</code> doesn't represent already but that's not an argument for removing <code>has_one</code>. We're talking about a notational typeclass here, right?</p>",
        "id": 311860178,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669220715
    },
    {
        "content": "<p>Yes</p>",
        "id": 311860283,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669220757
    },
    {
        "content": "<p>Another thing about <code>mul</code> and <code>smul</code> is that <code>mul</code> is generally associative but <code>smul</code> isn't (usually because of type reasons; but a group acting on itself by conjugation is a nonassociative action, for example).</p>",
        "id": 311860478,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669220802
    },
    {
        "content": "<p>Any idea why the heterogeneous multiplication  <code>HMul</code> was introduced in Lean 4?</p>",
        "id": 311860673,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1669220850
    },
    {
        "content": "<p>I think Leo saw we were using <code>smul</code> and decided to see if it was worth generalising to <code>mul</code>?</p>",
        "id": 311860825,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669220886
    },
    {
        "content": "<p>The examples I've seen are generally scalar multiplication of vectors. When writing programs, it seems like it's also useful for multiplications where you could insert a coercion, but it might be more efficient to use the uncoerced type directly.</p>",
        "id": 311861137,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669220978
    },
    {
        "content": "<p>I think it's fair to say that <code>Hmul (m : Nat) (n : Int) : Int</code> is a very specific kind of <code>smul</code>. And also that there might be some sense in supporting it.</p>",
        "id": 311864661,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1669222050
    },
    {
        "content": "<p>So I can imagine using <code>Hmul</code> for algebras.</p>",
        "id": 311864696,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1669222063
    },
    {
        "content": "<p>But still keeping smul around for general actions.</p>",
        "id": 311864726,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1669222075
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/287929-mathlib4/topic/to_additive.20issues/near/311830097\">said</a>:</p>\n<blockquote>\n<p>If I look through a fully elaborated expression, will all natural number literals (<code>Expr.lit</code>) be inside an application of <code>OfNat.ofNat</code>?</p>\n</blockquote>\n<p>Yes.</p>",
        "id": 311874190,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669225262
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/287929-mathlib4/topic/to_additive.20issues/near/311860673\">said</a>:</p>\n<blockquote>\n<p>Any idea why the heterogeneous multiplication  <code>HMul</code> was introduced in Lean 4?</p>\n</blockquote>\n<p>Matrix multiplication is one obvious place where it would be nice (and the one Leo gave when talking about this new feature).</p>",
        "id": 311880456,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1669227510
    },
    {
        "content": "<p>Just for reference, I can even think now of a situation where I might want <code>HAdd</code>: in operator algebraic K-theory one constructs K_0 (almost) as the Grothendieck group of a semigroup of projections which lie in matrix algebras (of <em>varying</em> sizes) over the algebra in question. So one might want to add something in M_n(A) to something in M_k(A) and get something in M_{n+k}(A).</p>",
        "id": 311901875,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669234748
    },
    {
        "content": "<p>Point being, let's have the heterogeneous versions in general; there's little harm if they never get used.</p>",
        "id": 311902056,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669234822
    },
    {
        "content": "<p>No but you corroborate my point here: We might want <code>HMul</code> and <code>HAdd</code>, but</p>\n<ol>\n<li>they appear in situations similar to <code>smul</code>, so we might as well get rid of <code>smul</code></li>\n<li>Nobody can come up with an actual use case for <code>HPow</code></li>\n</ol>",
        "id": 311913712,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1669240838
    },
    {
        "content": "<p>No, I still disagree with this. My point about <code>HAdd</code> was this: in case you didn't know about operator algebraic K-theory, you <em>might</em> think that <code>HAdd</code> is not necessary (of course, you may have your own examples), but then I gave a counterexample. Look, mathlib has a rule about not overgeneralizing <em>when there is some cost</em>; however, when it's essentially free, and it's conceivable that it has a use, there's no reason not to generalize.</p>\n<p>I believe <code>HPow</code> and <code>HSmul</code> fall into this category. In fact, I already gave a potential use for <code>HPow</code>, you've just ignored it: <code>ℕ → ℚ → ℝ</code>. Again, I'm not arguing that we want that particular <code>HPow</code> instance, only that we might.</p>\n<p>Moreover, I think we should not make things overlap just because it's convenient. So <code>smul</code> should not use <code>HMul</code> under the hood, because the latter is the typeclass for <code>*</code>, not <code>•</code>.</p>",
        "id": 311915642,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669242020
    },
    {
        "content": "<p>The <code>*</code> vs <code>\\bu</code> difference seems quite important. :-)</p>",
        "id": 311915713,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669242098
    },
    {
        "content": "<p>I wouldn't call your example of possible use of <code>HPow</code> \"actual\" <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 311920227,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1669245222
    },
    {
        "content": "<p>My point is not that we shouldn't generalise. My point is that generalising doesn't mean what you claim it does.</p>",
        "id": 311920300,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1669245251
    },
    {
        "content": "<p>Look, I propose creating the <code>HSMul</code> class for now so that I can fix <code>to_additive</code> translating <code>pow</code> to <code>smul</code> without potentially clobbering <code>HMul</code>. If later we wish to change Lean 4 core to remove <code>HPow</code> and we can convince the devs, fine, we can do that when the time comes. Can I have thumbs up or thumbs down from people on this?</p>",
        "id": 311930584,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669254551
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/706\">mathlib4#706</a></p>",
        "id": 311942226,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669265212
    },
    {
        "content": "<p>Sorry, I thought it built properly on my machine, but apparently not. I'll fix it shortly.</p>",
        "id": 311942680,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669265604
    },
    {
        "content": "<p>I have no idea why the <code>abel</code> test is failing on this PR. Help appreciated <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> (of course you're welcome to ignore this ping; it is Thanksgiving after all)</p>",
        "id": 311949896,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669270512
    },
    {
        "content": "<p>Okay, I think I have some idea. I think the issue is that the case matching on <code>abel</code> only handles <code>SMul</code> but now it needs to handle <code>HSMul</code> (in <code>Mathlib.Tactic.Abel.eval</code>). If someone wants to have a go at fixing it, be my guest, but it's bedtime for me.</p>",
        "id": 311952956,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669272618
    },
    {
        "content": "<p>This now has a <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></p>",
        "id": 311961340,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669277207
    }
]