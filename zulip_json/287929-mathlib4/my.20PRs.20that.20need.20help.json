[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1464\">mathlib4#1464</a>: universe issues, should be straightforward for someone who understands universe resolution issues. Mathport complains about suspect translations and proofs later fail due to universe comparison issues.<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/1216\">mathlib4#1216</a>: three issues, one needs a replacement for <code>change</code>…<code>with</code>, one is a proof that's backed into a corner, last is a type resolution issue.<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/1179\">mathlib4#1179</a>:  one proof where the goal state is too unfolded, to fields with motives, and <code>rw</code>s that should work don't, two <code>generalize_proofs</code> that are broken with <code>unknown free variable</code>,  two proofs that also seem to be oddly unfolded, and a <code>by tidy</code> proof where my attempt to replicate the <code>tidy?</code> output gets to the same \"too unfolded\" state.<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/809\">mathlib4#809</a>: I think I should delete this one -- waiting on a <code>higher_order</code> attr, and no work lost.</p>",
        "id": 321395334,
        "sender_full_name": "Arien Malec",
        "timestamp": 1673721096
    },
    {
        "content": "<p>(deleted <a href=\"https://github.com/leanprover-community/mathlib4/pull/809\">mathlib4#809</a>)</p>",
        "id": 321417568,
        "sender_full_name": "Arien Malec",
        "timestamp": 1673737751
    },
    {
        "content": "<p>Just about to get on the tube so thought I'd try one of these on the journey (I don't have internet underground so it's hard to switch branches). <a href=\"https://github.com/leanprover-community/mathlib4/pull/1464\">mathlib4#1464</a> seems to have been put on the queue and then fell off again? Bors failed for some reason? Are <a href=\"https://github.com/leanprover-community/mathlib4/pull/1216\">mathlib4#1216</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/1179\">mathlib4#1179</a> still in the same state as above?</p>",
        "id": 322510926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674220798
    },
    {
        "content": "<p>gaargh does <code>lake exe cache get</code> not work on 1179 because it's too old or something? Can this be fixed by merging master or rebasing master or whatever you're supposed to do? (note: I'll not do it, I'll just look at 1216)</p>",
        "id": 322511319,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674220906
    },
    {
        "content": "<p>1216 (data.seq.computation) I managed to fix one of the errors; I pushed. I'm not sure if I care to diagnose why things had changed; I left a porting note. One issue was that Lean 3 <code>foo._match_1</code> and Lean 4 <code>Foo.match_1</code> had totally different types (I mean widely different) when foo=<code>corec.F</code>, but mathport or you had aligned them anyway.</p>",
        "id": 322536690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674227507
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/my.20PRs.20that.20need.20help/near/322510926\">said</a>:</p>\n<blockquote>\n<p>Just about to get on the tube so thought I'd try one of these on the journey (I don't have internet underground so it's hard to switch branches). <a href=\"https://github.com/leanprover-community/mathlib4/pull/1464\">mathlib4#1464</a> seems to have been put on the queue and then fell off again? Bors failed for some reason? Are <a href=\"https://github.com/leanprover-community/mathlib4/pull/1216\">mathlib4#1216</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/1179\">mathlib4#1179</a> still in the same state as above?</p>\n</blockquote>\n<p>There was a build failure due to failure to get cache, and I rebuilt, but realized I needed to kick bors again</p>",
        "id": 322562485,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674234069
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/my.20PRs.20that.20need.20help/near/322536690\">said</a>:</p>\n<blockquote>\n<p>1216 (data.seq.computation) I managed to fix one of the errors; I pushed. I'm not sure if I care to diagnose why things had changed; I left a porting note. One issue was that Lean 3 <code>foo._match_1</code> and Lean 4 <code>Foo.match_1</code> had totally different types (I mean widely different) when foo=<code>corec.F</code>, but mathport or you had aligned them anyway.</p>\n</blockquote>\n<p><code>_match_1</code> just isn't a thing in Lean 4; I switched to <code>.match_1</code> so I could see what the issues are, but my conclusion was that the whole thing needed to be redone...</p>",
        "id": 322567656,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674235517
    },
    {
        "content": "<p>OK, I fixed one more issue (<code>intros</code> in Lean 3 behaves differently in Lean 4 and requires careful comparison in both sides to get everything right).</p>\n<p>Down to a single issue....</p>",
        "id": 322578481,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674236832
    },
    {
        "content": "<p>I truly don't understand the last issue -- all the types line up, there must be some autoimplicit issues, but none of the tricks I know work....</p>",
        "id": 322583789,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674238043
    },
    {
        "content": "<p>Higher unification is failing in Lean 4 when it worked in Lean 3 -- this seems to be a general regression where unification doesn't work as well in Lean 4. I'm working on a fix.</p>",
        "id": 322603146,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674244428
    },
    {
        "content": "<p>Pushed! <a href=\"https://github.com/leanprover-community/mathlib4/pull/1216\">mathlib4#1216</a> now compiles.</p>",
        "id": 322606504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674245644
    },
    {
        "content": "<p>I'm building <a href=\"https://github.com/leanprover-community/mathlib4/pull/1179\">mathlib4#1179</a> from scratch just like the old days. Does someone who knows the difference between merge and rebase and knows which one is the right one to do, want to merge/rebase master onto that branch, namely <code>feat-port-data.pfun</code>?</p>",
        "id": 322607177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674245877
    },
    {
        "content": "<p>Down to two lints, one [both?] of which is/are incorrect:</p>\n<p>In <code>LiftRelRec.lem</code> the linter complains that in <code>have h := h HC</code>, but <code>h</code> is reverted then intro'd. Seems like a linter bug, but how do I tell the linter to ignore this?</p>\n<p>In <code>lift_rel_pure</code> the linter wants to use <code>lift_rel_pure_right</code> to simplify the rhs of the lemma, but I think the very point of the lemma is to express a core invariance of <code>LiftRel</code> and <code>lift_rel_pure_right</code> is a means to an end here.</p>",
        "id": 322613645,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674248073
    },
    {
        "content": "<p>&amp; now that I think about it, it should probably be <code>liftRel_pure</code> :-)</p>",
        "id": 322619313,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674250112
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"542196\">Arien Malec</span> <a href=\"#narrow/stream/287929-mathlib4/topic/my.20PRs.20that.20need.20help/near/322613645\">said</a>:</p>\n<blockquote>\n<p>In <code>LiftRelRec.lem</code> the linter complains that in <code>have h := h HC</code>, but <code>h</code> is reverted then intro'd. Seems like a linter bug, but how do I tell the linter to ignore this?</p>\n</blockquote>\n<p>The linter was right, actually.</p>",
        "id": 322620816,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674250680
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"542196\">Arien Malec</span> <a href=\"#narrow/stream/287929-mathlib4/topic/my.20PRs.20that.20need.20help/near/322613645\">said</a>:</p>\n<blockquote>\n<p>In <code>lift_rel_pure</code> the linter wants to use <code>lift_rel_pure_right</code> to simplify the rhs of the lemma, but I think the very point of the lemma is to express a core invariance of <code>LiftRel</code> and <code>lift_rel_pure_right</code> is a means to an end here.</p>\n</blockquote>\n<p><code>nolint</code>'d to push to review.</p>",
        "id": 322622018,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674251156
    },
    {
        "content": "<p>For <a href=\"https://github.com/leanprover-community/mathlib4/pull/1179\">mathlib4#1179</a> it might be the case that the reason you had to add <code>noncomputable</code> in the def of <code>fix</code> on line 255 (something to do with WellFounded not reducing? I don't really understand this stuff) is the same reason why the proof of <code>mem_fix_iff</code> 15 lines later doesn't work. The chaos starts right on the first line <code>let ⟨h₁, h₂⟩ := Part.mem_assert_iff.1 h</code> --the lean 4 h_2 has several Eq.ndrec's in which aren't present in Lean 3. I can't figure this one out.</p>",
        "id": 322639477,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674259141
    },
    {
        "content": "<p>It would be great if someone could make this PR work with caching without messing up the git history but I don't know how to do that either.</p>",
        "id": 322639550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674259178
    },
    {
        "content": "<p>It does now...</p>",
        "id": 322639766,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674259277
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span>  did the git magic.</p>",
        "id": 322639808,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674259308
    },
    {
        "content": "<p>Thanks! The issue is that <code>simp [e] at h₃</code> no longer succeeds; the motive is not type correct in mathlib4 presumably because everything is so much more complicated than the corresponding mathlib3 term.</p>",
        "id": 322639924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674259369
    },
    {
        "content": "<p>This is probably the same issue that's borking <code>fixInduction'_stop</code> and <code>fixInduction'_fwd</code></p>",
        "id": 322640073,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674259473
    }
]