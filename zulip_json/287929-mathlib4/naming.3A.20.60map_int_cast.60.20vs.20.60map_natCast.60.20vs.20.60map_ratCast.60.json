[
    {
        "content": "<p>Just when I thought I had somewhat understood the naming conventions, I stumbled upon these three names:</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/2d48a4ee2ad8bc9454c8e11fe1f395565c84353f/Mathlib/Data/Int/Cast/Lemmas.lean#L314\">map_int_cast</a><br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/10507fe5cd9db3424e2ac73c968d6054c17145f5/Mathlib/Data/Nat/Cast/Basic.lean#L225\">map_natCast</a><br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/cfdf43201a61aa3e57566656a27a5da3cf2b6110/Mathlib/Data/Rat/Cast.lean#L459\">map_ratCast</a></p>\n<p>Is this an oversight, or is there a deeper reason why they are not consistent?</p>",
        "id": 319460291,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1672861494
    },
    {
        "content": "<p>Oversight</p>",
        "id": 319462348,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1672862254
    },
    {
        "content": "<p>ok, I will prepare a fix renaming <code>map_int_cast</code> to <code>map_intCast</code> and similar</p>",
        "id": 319464073,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1672862841
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1337\">mathlib4#1337</a></p>",
        "id": 319468128,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1672864344
    },
    {
        "content": "<p>Given that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Cast.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">RingHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"n\">map_natCast</span> <span class=\"n\">f</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>works and <code>map_natCast</code> is tagged simp, why doesn't</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Cast.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">RingHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>\n<p>work?</p>",
        "id": 319712912,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672975151
    },
    {
        "content": "<p>(Encountered while debugging something previously proved with <code>map_bit0</code>.)</p>",
        "id": 319712956,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672975196
    },
    {
        "content": "<p>The head of the expression is a variable, so there is nothing to index this on. This is the same behaviour as in Lean 3.</p>",
        "id": 319724826,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1672986454
    },
    {
        "content": "<p>Interesting, should we remove the simp tag then?</p>",
        "id": 319724937,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672986524
    },
    {
        "content": "<p>And would it be worth adding simp-lemmas for some small numbers,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">map_two</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">RingHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"n\">map_natCast</span> <span class=\"n\">f</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">map_three</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">RingHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n  <span class=\"n\">map_natCast</span> <span class=\"n\">f</span> <span class=\"mi\">3</span>\n</code></pre></div>",
        "id": 319724991,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672986595
    },
    {
        "content": "<p>They aren't going to work any better with <code>simp</code>, so I'm not sure where we'd be using them.</p>",
        "id": 319728277,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1672988860
    },
    {
        "content": "<p>Oh ... the problem is <code>RingHomClass</code>, not <code>Nat.cast</code>?</p>",
        "id": 319728863,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672989168
    },
    {
        "content": "<p>Is the head really a variable? Maybe this is <a href=\"https://github.com/leanprover/lean4/issues/1937\">https://github.com/leanprover/lean4/issues/1937</a> instead?</p>",
        "id": 319733217,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672991716
    },
    {
        "content": "<p>Which apparently has been fixed :-)</p>",
        "id": 319733328,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672991778
    },
    {
        "content": "<p>Yes but I don't know if mathlib4 is on the new version yet.</p>",
        "id": 319733551,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672991917
    },
    {
        "content": "<p>The  head symbol here is <code>FunLike.coe</code></p>",
        "id": 319757112,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673002448
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1397\">mathlib4#1397</a> bumps to the latest nightly, which should bring in the fix for <a href=\"https://github.com/leanprover-community/lean4/pull/1937\">lean4#1937</a>.</p>",
        "id": 319894027,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673057479
    },
    {
        "content": "<p>(anagram not intended...?)</p>",
        "id": 319894034,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673057497
    },
    {
        "content": "<p>That link doesn't work for me?</p>",
        "id": 319898290,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673061189
    }
]