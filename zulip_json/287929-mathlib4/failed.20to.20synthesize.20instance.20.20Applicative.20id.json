[
    {
        "content": "<p>I have a port in progress (<a href=\"https://github.com/leanprover-community/mathlib4/pull/948\">mathlib4#948</a>) that has most of the failures with the above message; it's confusing because the docu for <code>id.mk</code> states that this is <code>Pure</code> for <code>id</code> as an <code>Applicative</code>, but  I don't see an instance definition of <code>Monad</code> etc for <code>id</code> (for <code>Id</code>, yes); these are definitions that worked in Lean 3...</p>",
        "id": 315149386,
        "sender_full_name": "Arien Malec",
        "timestamp": 1670724286
    },
    {
        "content": "<p>In this context (and probably any other one in which <code>id.mk</code> appears) I think it would be appropriate to replace Lean 3 <code>id</code> by Lean 4 <code>Id</code>.</p>",
        "id": 315162930,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670736883
    },
    {
        "content": "<p><code>Id.run</code> I assume provides the <code>id</code>-like identity map?</p>\n<p>Does the documentation for <code>id.mk</code> need changing?</p>",
        "id": 315227483,
        "sender_full_name": "Arien Malec",
        "timestamp": 1670775462
    },
    {
        "content": "<p>No, b/c <code>Id.run</code> has the wrong signature... ugh.</p>",
        "id": 315227866,
        "sender_full_name": "Arien Malec",
        "timestamp": 1670775668
    },
    {
        "content": "<p>I think the docstring of <code>id.mk</code> should be fixed. <code>id</code> is not registered as a monad in Lean 4, <code>Id</code> is.</p>",
        "id": 315228525,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1670776013
    },
    {
        "content": "<p>I'll do a PR here. Now I'm getting mixed up where <code>Id.pure</code> should provide the identity function but Lean 4 complains that <code>Id.pure</code> doesn't exist...</p>",
        "id": 315229253,
        "sender_full_name": "Arien Malec",
        "timestamp": 1670776363
    },
    {
        "content": "<p>In <code>Control.Traversable.Basic</code> I used <code>(pure : α → Id α)</code></p>",
        "id": 315246337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670785620
    },
    {
        "content": "<p>Any downside to solving the problem like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">hasFunctor_id</span> <span class=\"o\">:</span> <span class=\"n\">Functor</span> <span class=\"n\">id</span> <span class=\"n\">where</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"n\">id.mk</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">hasApplicative_id</span><span class=\"o\">:</span> <span class=\"n\">Applicative</span> <span class=\"n\">id</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"n\">id.mk</span>\n  <span class=\"n\">seq</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">())</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">hasMonad_id</span><span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">id</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"n\">id.mk</span>\n  <span class=\"n\">bind</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 315252887,
        "sender_full_name": "Arien Malec",
        "timestamp": 1670790006
    },
    {
        "content": "<p>I think <code>id</code> is intentionally not any of those things--you're supposed to use <code>Id</code> for them instead</p>",
        "id": 315253261,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670790273
    },
    {
        "content": "<p>For future reference, <code>id</code> no longer has a <code>Monad</code> instance. Instead, we have the <code>Id</code>, which specifically acts on <code>Type</code>s and does have a <code>Monad</code> instance. I've changed <code>id.mk</code> to <code>pure</code>, sometimes needing to write <code>(m := Id)</code> to help Lean find <code>Monad Id</code>. With these, <a href=\"https://github.com/leanprover-community/mathlib4/pull/948\">mathlib4#948</a> is now ready, I believe</p>",
        "id": 315719294,
        "sender_full_name": "Winston Yin",
        "timestamp": 1670980794
    },
    {
        "content": "<p>Thanks -- sorry, lost time to work on this but don't think I'd ever have hit on <code>m := Id</code> -- had tried many combinations of <code>Id</code>, <code>pure</code>, etc. to see what stuck.</p>",
        "id": 315725762,
        "sender_full_name": "Arien Malec",
        "timestamp": 1670985379
    }
]