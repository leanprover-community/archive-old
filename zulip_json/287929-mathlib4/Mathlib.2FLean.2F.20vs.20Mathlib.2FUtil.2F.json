[
    {
        "content": "<p>Does anyone have a good way to formulate what belongs in the <code>Mathlib/Lean</code> and <code>Mathlib/Util/</code> directories? I think it would be good to have this straight before we jumble things up too much. :-)</p>\n<p>My attempt:</p>\n<ul>\n<li><code>Mathlib/Lean/</code>: should contain helper functions which live in the <code>Lean</code> namespace, and add functionality (or merely dot-notation) to things defined in core Lean 4. In some sense this is a <code>for_core</code> directory, containing only definitions which are reasonable candidates for moving to the core library.</li>\n<li><code>Mathlib/Util/</code>: user facing commands e.g. <code>library_note</code>, <code>whatsnew</code>, and <code>#time</code>, <em>but also</em> random meta programming tricks, e.g. <code>MemoFix.lean</code> and <code>TermUnsafe.lean</code>.</li>\n<li><code>Mathlib/Tactics/</code>: tactics, with as much as possible of the \"low-level\" stuff that belongs in other directories factored out into those.</li>\n</ul>\n<p>Corrections/suggestions welcome! I can write some <code>README</code>s to reflect any consensus achieved.</p>",
        "id": 290976103,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1658884713
    },
    {
        "content": "<p>I don't know if it is a useful distinction to separate term/tactic/command things in different directories. Often a single file will manifest as things in multiple categories simultaneously, and they all have a fairly similar metaprogramming interface</p>",
        "id": 290976862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1658885392
    },
    {
        "content": "<p>that is, I would be inclined to put user-facing commands in <code>Tactics</code> as well as literal tactics</p>",
        "id": 290976935,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1658885425
    },
    {
        "content": "<p><code>Util</code> is more for tactics that are not intended for the usual proving stuff but are either meta-programming tools like <code>TermUnsafe</code> and <code>MemoFix</code> or debugging commands like <code>#time</code></p>",
        "id": 290976994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1658885487
    },
    {
        "content": "<p><code>library_note</code> is a bit borderline, it's primarily about mathlib organization itself which gives it a bit of \"meta\" feel, but we also expect it to be used throughout the library</p>",
        "id": 290977142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1658885601
    }
]