[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/1353\">mathlib4#1353</a>, we need to prove at some point that two <code>FreeMagma.hom</code> are equal (line 119). With lean3, it was done using <code>ext, rfl</code>. It fails in lean4. The reason appears to be that, with lean4, <code>ext</code> is not using the ext lemma defined just a few lines above (line 78)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[ext, to_additive]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">hom_ext</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">FreeMagma</span> <span class=\"n\">α</span> <span class=\"bp\">→ₙ*</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">of</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">of</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>Indeed, replacing <code>ext</code> in the proof by an explicit call to <code>FreeMagma.hom_ext</code> enables <code>rfl</code> to close the goal. </p>\n<p>Something similar is happening on line 479 where it is necessary to replace <code>ext</code> by  <code>FreeSemigroup.ext</code> to finish the proof.</p>\n<p>Is this normal? Is  the use of generic <code>ext</code> deprecated and one needs to call instead the specific ext lemma?</p>",
        "id": 320078948,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1673186012
    },
    {
        "content": "<p>There are more failing <code>rfl</code> in this PR and all are following an <code>ext</code> or an <code>ext1</code>: see lines 746, 773 and 776</p>",
        "id": 320088738,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1673191476
    },
    {
        "content": "<p>I remember <code>ext</code> in Lean3 depended chose the <code>ext</code> lemma based on the order they were declared in so they had to be declared in the right order. This is a bad design and probably the cause of the breakages in Lean4</p>",
        "id": 320090370,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673192486
    },
    {
        "content": "<p>I don't agree that it was bad design; in practice the right order was the one that always occurred naturally</p>",
        "id": 320093009,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673193992
    },
    {
        "content": "<p>Does it work here if you disable the default ext lemma that it <em>is</em> finding?</p>",
        "id": 320093140,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673194081
    },
    {
        "content": "<p>How do I that?</p>",
        "id": 320093285,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1673194160
    },
    {
        "content": "<p>Something like <code>attribute [-ext] MulHom.ext</code></p>",
        "id": 320093795,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673194424
    },
    {
        "content": "<p>lean doesn't like that: <code>attribute cannot be erased</code></p>",
        "id": 320093923,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1673194499
    },
    {
        "content": "<p>Then you might need to make a mwe by copying out the two ext lemmas and basic theory into a new file</p>",
        "id": 320094431,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673194784
    },
    {
        "content": "<p>Or we should teach lean how to erase it</p>",
        "id": 320094585,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673194833
    },
    {
        "content": "<p>Here is a mwe (well, maybe more a we)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Hom.Equiv.Basic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">FreeMagma</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n  <span class=\"bp\">|</span> <span class=\"n\">of</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">FreeMagma</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">FreeMagma</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">FreeMagma</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">FreeMagma</span> <span class=\"n\">α</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">FreeMagma</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>  <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">FreeMagma</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">FreeMagma.mul</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_eq</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">FreeMagma</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[elab_as_elim]</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">recOnMul</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">FreeMagma</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ih1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">ih2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"n\">FreeMagma.recOn</span> <span class=\"n\">x</span> <span class=\"n\">ih1</span> <span class=\"n\">ih2</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">hom_ext</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">FreeMagma</span> <span class=\"n\">α</span> <span class=\"bp\">→ₙ*</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">of</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">of</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">FunLike.ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span>\n    <span class=\"n\">recOnMul</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">congr_fun</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n      <span class=\"n\">intros</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">liftAux</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">FreeMagma</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n  <span class=\"bp\">|</span> <span class=\"n\">FreeMagma.of</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">liftAux</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">liftAux</span> <span class=\"n\">f</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lift</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">FreeMagma</span> <span class=\"n\">α</span> <span class=\"bp\">→ₙ*</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">liftAux</span> <span class=\"n\">f</span>\n      <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n  <span class=\"n\">invFun</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">F</span> <span class=\"bp\">∘</span> <span class=\"n\">of</span>\n  <span class=\"n\">left_inv</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">right_inv</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span> <span class=\"c1\">-- fails</span>\n    <span class=\"c1\">-- refine hom_ext ?_ -- works</span>\n    <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">FreeMagma</span>\n</code></pre></div>",
        "id": 320096776,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1673196143
    },
    {
        "content": "<p>Does it give any useful message?</p>",
        "id": 320096992,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673196330
    },
    {
        "content": "<p>I am not sure it is useful but here is the error message </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">HEq.rfl</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">HEq</span> <span class=\"bp\">?</span><span class=\"n\">m.4713</span> <span class=\"bp\">?</span><span class=\"n\">m.4713</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">↑</span><span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">liftAux</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">FreeMagma</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">liftAux</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">liftAux</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">})</span>\n          <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">F</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">↑</span><span class=\"n\">F</span> <span class=\"bp\">∘</span> <span class=\"n\">of</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"o\">))</span>\n      <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">↑</span><span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 320097116,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1673196426
    },
    {
        "content": "<p>So I guess it is using <code>FunLike.ext</code> instead of <code>hom_ext</code></p>",
        "id": 320097314,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1673196548
    },
    {
        "content": "<p>Is the error on the <code>ext</code> or the <code>rfl</code>?</p>",
        "id": 320099657,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673198107
    },
    {
        "content": "<blockquote>\n<p>Here is a mwe (well, maybe more a we)</p>\n</blockquote>\n<p>You need to put your own version of <code>MulHom</code> in that MWE too, that doesn't implement <code>FunLike</code></p>",
        "id": 320099726,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673198158
    },
    {
        "content": "<p>(What I'm trying to work out here is whether <code>hom_ext</code> is even a valid ext lemma in Lean4)</p>",
        "id": 320099797,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673198179
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/ext/near/320099657\">said</a>:</p>\n<blockquote>\n<p>Is the error on the <code>ext</code> or the <code>rfl</code>?</p>\n</blockquote>\n<p>The <code>rfl</code> fails to close the goal (see the error message above). The <code>ext</code> does not cause any error.</p>",
        "id": 320099903,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1673198257
    },
    {
        "content": "<p>Oh, I assumed <code>ext</code> did cause an error because you wrote <code>ext -- fails</code>!</p>",
        "id": 320100186,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673198443
    },
    {
        "content": "<p>Sorry, I was not clear. The proof does not complete with <code>ext</code> but completes when you replace it with <code>refine hom_ext ?_</code></p>",
        "id": 320100313,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1673198554
    },
    {
        "content": "<p>Here's a better mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Equiv.Basic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">MulHom</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span>\n  <span class=\"n\">map_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">toFun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">toFun</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">toFun</span> <span class=\"n\">b</span>\n\n<span class=\"c1\">-- fails if you uncomment this line</span>\n<span class=\"c1\">-- @[ext]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">MulHom.ext</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">MulHom</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f.toFun</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g.toFun</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">FreeMagma</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n  <span class=\"bp\">|</span> <span class=\"n\">of</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">FreeMagma</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">FreeMagma</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">FreeMagma</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">FreeMagma</span> <span class=\"n\">α</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">FreeMagma</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>  <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">FreeMagma</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">FreeMagma.mul</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_eq</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">FreeMagma</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[elab_as_elim]</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">recOnMul</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">FreeMagma</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ih1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">ih2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"n\">FreeMagma.recOn</span> <span class=\"n\">x</span> <span class=\"n\">ih1</span> <span class=\"n\">ih2</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">hom_ext</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">MulHom</span> <span class=\"o\">(</span><span class=\"n\">FreeMagma</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f.toFun</span> <span class=\"bp\">∘</span> <span class=\"n\">of</span> <span class=\"bp\">=</span> <span class=\"n\">g.toFun</span> <span class=\"bp\">∘</span> <span class=\"n\">of</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">liftAux</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">FreeMagma</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n  <span class=\"bp\">|</span> <span class=\"n\">FreeMagma.of</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">liftAux</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">liftAux</span> <span class=\"n\">f</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lift</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">MulHom</span> <span class=\"o\">(</span><span class=\"n\">FreeMagma</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">liftAux</span> <span class=\"n\">f</span>\n      <span class=\"n\">map_mul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n  <span class=\"n\">invFun</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">F.toFun</span> <span class=\"bp\">∘</span> <span class=\"n\">of</span>\n  <span class=\"n\">left_inv</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">right_inv</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span> <span class=\"c1\">-- works?</span>\n    <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">FreeMagma</span>\n</code></pre></div>",
        "id": 320100665,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673198818
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 320100684,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673198832
    },
    {
        "content": "<p>So this does seem to be a priority problem of some kind</p>",
        "id": 320100724,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673198859
    },
    {
        "content": "<p>Same story as with simp lemmas I think.  The order of the lemmas in the files no longer reliably influences the order they're tried in.  I think we should add a priority argument to the ext attribute.</p>",
        "id": 320130321,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1673222065
    },
    {
        "content": "<p>It looks to me like <code>ext</code> doesn't understand priority at all?</p>",
        "id": 320130593,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673222353
    },
    {
        "content": "<p>Can you do <code>show_term { ext }</code> or <code>ext?</code> in Lean 4?<br>\nI'd expect some goals previously closed by <code>by { ext, refl }</code> might be closed by <code>rfl</code> alone due to eta defeq.</p>",
        "id": 320155914,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1673245603
    },
    {
        "content": "<p>yes (it's <code>show_term ext</code>)</p>",
        "id": 320171460,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673253492
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/287929-mathlib4/topic/ext/near/320155914\">said</a>:</p>\n<blockquote>\n<p>I'd expect some goals previously closed by <code>by { ext, refl }</code> might be closed by <code>rfl</code> alone due to eta defeq.</p>\n</blockquote>\n<p>This is not the case in <a href=\"https://github.com/leanprover-community/mathlib/pull/1353\">mathlib#1353</a> (unfortunately).</p>",
        "id": 320171733,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1673253622
    },
    {
        "content": "<blockquote>\n<p>Same story as with simp lemmas I think.  The order of the lemmas in the files no longer reliably influences the order they're tried in.  I think we should add a priority argument to the ext attribute.</p>\n</blockquote>\n<p>In the meantime, what should I do about <a href=\"https://github.com/leanprover-community/mathlib/pull/1353\">mathlib#1353</a>? Should I just replace every <code>ext</code> by the explicit <code>ext</code> lemma that should be used?</p>\n<p>Or just wait for <code>ext</code> to be fixed...</p>",
        "id": 320389699,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1673335538
    },
    {
        "content": "<p>Replacing <code>ext</code> by the <code>ext</code> lemmas and leaving porting notes where that happened is fine, I would say.</p>",
        "id": 320394863,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673338026
    },
    {
        "content": "<p>I think it's worth opening an issue about and referencing that in the porting note</p>",
        "id": 320410949,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673344098
    },
    {
        "content": "<p>That way it's easy to clean everything up if we fix it</p>",
        "id": 320410999,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673344122
    },
    {
        "content": "<p>This problem will likely bite us for every lemma tagged with the \"partially applied ext lemma\" note.</p>",
        "id": 320411130,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673344170
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/pull/84\">std4#84</a></p>",
        "id": 320534119,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1673380778
    }
]