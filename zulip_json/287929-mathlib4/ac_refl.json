[
    {
        "content": "<p>In <code>Order.BooleanAlgebra</code>, we encounter a whole pile of proofs <code>by ac_refl</code>. <code>ac_refl</code> uses the machinery that <code>cc</code> develops.  I think we've been punting on <code>cc</code> for a while. Do we have ideas for porting / replacing this?</p>",
        "id": 312977776,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669777343
    },
    {
        "content": "<p>Note that there is a lean 4 tactic by the name <code>ac_rfl</code></p>",
        "id": 312977832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669777396
    },
    {
        "content": "<p>it's a from-scratch implementation though so no promises that it closes the same goals</p>",
        "id": 312977850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669777421
    },
    {
        "content": "<p><code>ac_rfl</code> does in fact work, once you realise the mathlib4's <code>IsAssociative</code> is not the same as <code>Lean.IsAssociative</code>...</p>",
        "id": 312978914,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669778361
    },
    {
        "content": "<p>I am not going to attempt to unify them, just add instances from mathlib's versions to core's versions.</p>",
        "id": 312979143,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669778547
    },
    {
        "content": "<p>It works perfectly in <code>Order.BooleanAlgebra</code>.</p>",
        "id": 312979528,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669778917
    }
]