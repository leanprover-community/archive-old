[
    {
        "content": "<p>I am working on <a href=\"https://github.com/leanprover-community/mathlib4/blob/2bfd48ed1450e0959f5c65bcc5eb66773f27ad21/Mathlib/Data/PNat/Xgcd.lean#L131\"><code>is_special_iff</code></a> for <a href=\"https://github.com/leanprover-community/mathlib4/pull/1408\">#1408</a>.<br>\nThe code is as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">is_special_iff</span> <span class=\"o\">:</span> <span class=\"n\">u.is_special</span> <span class=\"bp\">↔</span> <span class=\"n\">u.is_special'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">is_special</span><span class=\"o\">,</span> <span class=\"n\">is_special'</span><span class=\"o\">]</span>\n  <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"bp\">.</span> <span class=\"n\">simp_arith</span> <span class=\"o\">[</span><span class=\"n\">mul_coe</span> <span class=\"n\">u.w</span> <span class=\"n\">u.z</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">succPNat</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">repeat'</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_eq</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n  <span class=\"bp\">.</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.succ.inj</span>\n    <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"n\">Coe.coe</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">Coe.coe</span> <span class=\"n\">coePNatNat</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.mul_succ</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">u.wp</span><span class=\"o\">),</span> <span class=\"n\">Nat.add_comm</span> <span class=\"n\">_</span> <span class=\"n\">u.zp</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.add_assoc</span> <span class=\"n\">_</span> <span class=\"n\">u.zp</span> <span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_add</span> <span class=\"n\">u.wp</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">pnat.xgcd_type.is_special_iff</span> <span class=\"n\">PNat.XgcdType.is_special_iff</span>\n</code></pre></div>\n<p>I believe that the proof is done, but there is a error <code>application type mismatch</code>, saying that</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>argument has type\n  { x // 0 &lt; x }\nbut function has type\n  ℕ → List ℕ → List ℕ\n</code></pre></div>\n<p>What should be the problem here?</p>",
        "id": 320664723,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1673433263
    },
    {
        "content": "<p>I fixed the error. For some reason <code>simp_arith</code> does not work properly.</p>",
        "id": 320892794,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1673516673
    }
]