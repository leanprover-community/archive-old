[
    {
        "content": "<p>I'd like to kickoff this discussion regarding <code>squeeze_simp</code> and <code>simp?</code>. Some progress has been made on <a href=\"https://github.com/leanprover-community/mathlib/pull/5901\">#5901</a>.</p>\n<p>It's been proposed that <code>simp?</code> could eventually replace <code>squeeze_simp</code>. I like that idea because <code>simp?</code> is shorter and the interrogation mark makes for a good pattern of extracting data from tactics. Also, with Lean 4, <code>simp?</code> would stand as a syntax of its own (it wouldn't necessarily trigger the implementation of <code>simp</code> with a parameter indicating the interrogation mark), so we don't need to change the implementation of <code>simp</code> to accommodate the <code>?</code>.</p>\n<p>Another point mentioned was that <code>squeeze_simp</code> seems to nail some simplifications that <code>simp?</code> doesn't. Are there things that <code>simp?</code> does which <code>squeeze_simp</code> can't? Or is it the case that the Lean 3 behavior of <code>simp?</code> can simply be dropped?</p>",
        "id": 275297499,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647291650
    },
    {
        "content": "<p>I think the only feature of <code>simp?</code> I've cared about is that it's much faster than <code>squeeze_simp</code> - all behavioural differences I've seen were bugs</p>",
        "id": 275300506,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1647293109
    },
    {
        "content": "<p>There is no need for these to be separate tactics. The difference is entirely historical and they have the same spec</p>",
        "id": 275304710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647295778
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/squeeze_simp.20and.20simp.3F/near/275304710\">said</a>:</p>\n<blockquote>\n<p>they have the same spec</p>\n</blockquote>\n<p>Do you mean they're supposed to have the same behavior?</p>",
        "id": 275305458,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647296270
    },
    {
        "content": "<p>yes</p>",
        "id": 275305467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647296276
    },
    {
        "content": "<p>that is, if you are asked \"what does <code>simp?</code> do\" or \"what does <code>squeeze_simp</code> do\" then the answer is the same</p>",
        "id": 275305555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647296325
    },
    {
        "content": "<p><code>simp?</code> is the better name according to our general patterns for tactic naming</p>",
        "id": 275305618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647296362
    },
    {
        "content": "<p>Why is <code>simp?</code> faster (according to <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span>)?</p>",
        "id": 275305716,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647296411
    },
    {
        "content": "<p>because <code>squeeze_simp</code> just runs <code>simp</code> with every subset of arguments to see which work</p>",
        "id": 275305747,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647296442
    },
    {
        "content": "<p><code>simp?</code> is implemented in C++ and instruments <code>simp</code> to report what lemmas it used</p>",
        "id": 275305786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647296482
    },
    {
        "content": "<p>That is definitely the correct implementation strategy, but it has some false negative issues so it can sometimes produce incorrect calls, while <code>squeeze_simp</code> is relying on the observational behavior of <code>simp [lemmas, ...]</code> so it is always correct</p>",
        "id": 275305952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647296577
    },
    {
        "content": "<p>I think both of them have trouble with re-printing the input terms though</p>",
        "id": 275306028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647296631
    },
    {
        "content": "<p>I didn't understand how false negatives would cause incorrect calls. Wouldn't it make the tactic give up when it's actually possible to find a simplification?</p>",
        "id": 275306781,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647297146
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/squeeze_simp.20and.20simp.3F/near/275305952\">said</a>:</p>\n<blockquote>\n<p>That is definitely the correct implementation strategy</p>\n</blockquote>\n<p>Do you mean this for Lean/mathlib 4 as well? Is Lean 4's <code>simp</code> implemented in C++?</p>",
        "id": 275307979,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647297908
    },
    {
        "content": "<p><code>simp?</code> can fail to report that a lemma was used even though it did have an influence on the proof</p>",
        "id": 275308165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647298047
    },
    {
        "content": "<p>Yes, I mean that lean 4 <code>simp?</code> should watch <code>simp</code> to report used lemmas, but without the bugs</p>",
        "id": 275308295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647298120
    },
    {
        "content": "<p>Lean 4 <code>simp</code> is not implemented in C++, it is in lean like most tactics</p>",
        "id": 275308311,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647298132
    },
    {
        "content": "<p>Got it. Is it currently easy to query what <code>simp</code> used in Lean 4?</p>",
        "id": 275308567,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647298303
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/squeeze_simp.20and.20simp.3F/near/275306028\">said</a>:</p>\n<blockquote>\n<p>I think both of them have trouble with re-printing the input terms though</p>\n</blockquote>\n<p>Me and Arthur fixed this for squeeze_simp in lean3 j think, not sure how well roundtripping works in lean4</p>",
        "id": 275309493,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647298896
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/squeeze_simp.20and.20simp.3F/near/275308567\">said</a>:</p>\n<blockquote>\n<p>Got it. Is it currently easy to query what <code>simp</code> used in Lean 4?</p>\n</blockquote>\n<p>Maybe, maybe not, but you can always copy and paste enough of the internal implementation until you have access to the relevant data</p>",
        "id": 275309684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647299035
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> I believe we will need the workaround for dealing with namespaces again</p>",
        "id": 275314447,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647302931
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> when you said that <code>squeeze_simp</code> runs every subset of arguments you didn't mean iterating on the entire power set, right?</p>",
        "id": 275315021,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647303310
    },
    {
        "content": "<p>Were you talking about that linear process of argument elimination that stops when the result of tactic application changes? (I'm not on PC so I can't search code right now)</p>",
        "id": 275315178,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647303446
    },
    {
        "content": "<p>It's finding a minimal working subset, assuming that <code>simp</code> is monotonic wrt its arguments</p>",
        "id": 275315391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647303623
    },
    {
        "content": "<p>I see. I know exactly the function you're referring to</p>",
        "id": 275315425,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647303673
    },
    {
        "content": "<p>which is linear time (or rather <code>O(n)</code> times the performance of <code>simp</code> itself)</p>",
        "id": 275315427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647303676
    },
    {
        "content": "<p>hence <code>squeeze_simp</code> will usually be O(n) times slower than <code>simp?</code></p>",
        "id": 275315442,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647303700
    },
    {
        "content": "<p>Should we aim for minimality with <code>simp?</code> in mathlib4?</p>",
        "id": 275315719,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647303960
    },
    {
        "content": "<p>(should I be worried that <code>simp</code> might be slower in Lean 4 than in Lean 3?)</p>",
        "id": 275316141,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647304374
    },
    {
        "content": "<p>that should really not be the case ever at all</p>",
        "id": 275316280,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647304555
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/squeeze_simp.20and.20simp.3F/near/275315719\">said</a>:</p>\n<blockquote>\n<p>Should we aim for minimality with <code>simp?</code> in mathlib4?</p>\n</blockquote>\n<p>Minimality is not usually a target goal of tactics. I wouldn't say that there are any upper complexity limits except that a tactic that is too complex can be hard to maintain and/or slow, but it's not a big deal if you write a small tactic to begin with and we refine it later</p>",
        "id": 275317241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647305422
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/287929-mathlib4/topic/squeeze_simp.20and.20simp.3F/near/275316280\">said</a>:</p>\n<blockquote>\n<p>that should really not be the case ever at all</p>\n</blockquote>\n<p><code>simp</code> is implemented in Lean 4 itself in Lean 4 and in C++ in Lean 3 so it's plausible</p>",
        "id": 275321460,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647309986
    },
    {
        "content": "<p><code>simp</code> has a more efficient implementation in lean 4 than lean 3, in particular because of its discrimination tree indexing</p>",
        "id": 275322351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647310857
    },
    {
        "content": "<p>By reading <code>simp</code>'s code I'm starting to think that it would be better to have it equipped with a way to report the theorems it used otherwise we will end up with a lot of duplicated code. What do you guys think? The code base is not very short</p>",
        "id": 275363626,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647346161
    },
    {
        "content": "<p>(maybe <code>simp?</code> is not a good tactic to port at the moment)</p>",
        "id": 275363656,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647346194
    },
    {
        "content": "<p>I guess <code>simp?</code> is not used at all in mathlib...</p>",
        "id": 275411716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647367094
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/squeeze_simp.20and.20simp.3F/near/275411716\">said</a>:</p>\n<blockquote>\n<p>I guess <code>simp?</code> is not used at all in mathlib...</p>\n</blockquote>\n<p>I meant <code>simp?</code> as a tactic with the same behavior of <code>squeeze_simp</code> (<a href=\"#narrow/stream/287929-mathlib4/topic/squeeze_simp.20and.20simp.3F/near/275305618\">to catch up</a>)</p>",
        "id": 275412182,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647367269
    },
    {
        "content": "<p>Sure, and I'm pointing out that whilst of course we use it to write new mathlib, the <code>simp?</code> tactic (or variant or whatever it is) itself is not used at all in mathlib master, so if the main goal here is to get mathlib ported then maybe it can wait for a while?</p>",
        "id": 275416560,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647369053
    }
]