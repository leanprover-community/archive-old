[
    {
        "content": "<p>Hi, the following code in <code>Data.Set.Finite</code> leaves metavariables:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Finite</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">show_term</span> <span class=\"o\">{</span> <span class=\"n\">nontriviality</span> <span class=\"n\">α</span><span class=\"bp\">;</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 322890502,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674410266
    },
    {
        "content": "<p>In Lean 3, I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">subsingleton_or_nontrivial</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_inst</span> <span class=\"o\">:</span> <span class=\"n\">subsingleton</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">finite.of_subsingleton</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_inst</span> <span class=\"o\">:</span> <span class=\"n\">nontrivial</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n     <span class=\"n\">_</span><span class=\"o\">[</span><span class=\"n\">subsingleton_or_nontrivial</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">subsingleton_or_nontrivial</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">subsingleton_or_nontrivial</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">_inst</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 322890750,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674410402
    },
    {
        "content": "<p>BTW, why are there 3 <code>subsingleton_or_nontrivial α</code> in the output?</p>",
        "id": 322890815,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674410418
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> You're the authors of <code>nontriviality</code> in Mathlib 4 <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 322892506,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674411552
    },
    {
        "content": "<p>The core issue is <a href=\"https://github.com/leanprover/lean4/pull/2054\">lean4#2054</a>, I posted a workaround in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1769\">mathlib4#1769</a></p>",
        "id": 322907307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674421478
    },
    {
        "content": "<p>Could you add a test, please?</p>",
        "id": 322917032,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674428852
    }
]