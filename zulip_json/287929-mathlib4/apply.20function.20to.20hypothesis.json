[
    {
        "content": "<p>I want to add a function call to both sides of a hypothesis.  I tried <code>apply_fun at</code> but it seems to be picky about how you call it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.List.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.applyFun</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">):</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply_fun</span> <span class=\"n\">List.length</span> <span class=\"n\">at</span> <span class=\"n\">P</span>\n  <span class=\"c1\">-- Error: Can not use `apply_fun` with a dependently typed function.</span>\n</code></pre></div>\n<p>This does work if I replace <code>List.length</code> with <code>@List.length α</code>.  </p>\n<p>II feel like the same thing could be accomplished with just a lemma, but I can't seem to find an appropriate lemma.</p>",
        "id": 320553943,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1673388330
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=congr_arg#doc\">docs4#congr_arg</a> might help.</p>",
        "id": 320554070,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673388379
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"571451\">@Jeremy Salwen</span> If you have time, could you check whether it worked in mathlib3?  This might be an accidental loss of functionality between the mathlib3 and mathlib4 versions of <code>apply_fun</code>.</p>",
        "id": 320557648,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673389816
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"492774\">@Sky Wilshaw</span> The tactic <code>apply_fun</code> is a wrapper for the lemma <code>congr_arg</code>).</p>",
        "id": 320557706,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673389845
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply_fun</span> <span class=\"n\">list.length</span> <span class=\"n\">at</span> <span class=\"n\">P</span>\n</code></pre></div>\n<p>Works in lean 3.</p>",
        "id": 320558156,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1673390045
    },
    {
        "content": "<p>Thanks for checking!  Would you mind opening an issue:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/issues\">https://github.com/leanprover-community/mathlib4/issues</a><br>\nwith the full code snippets (including imports) which work in mathlib3 and don't work in mathlib4?</p>",
        "id": 320558330,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673390137
    },
    {
        "content": "<p>And let's also ping <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, who it seems wrote the mathlib4 <code>apply_fun</code> (<a href=\"https://github.com/leanprover-community/mathlib4/pull/475\">mathlib4#475</a>).</p>",
        "id": 320558499,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673390215
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>  done! <a href=\"https://github.com/leanprover-community/mathlib4/issues/1471\">https://github.com/leanprover-community/mathlib4/issues/1471</a></p>",
        "id": 320564298,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1673393021
    },
    {
        "content": "<p>Fixed in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1476\">mathlib4#1476</a>, although I feel like the extra work being done there perhaps should be done in core in <code>Lean.Meta.mkCongrArg</code>.</p>",
        "id": 320582464,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673405239
    }
]