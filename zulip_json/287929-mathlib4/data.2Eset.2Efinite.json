[
    {
        "content": "<p>I think an interesting graph to took at in order to measure how far we are from porting anything interesting is the import graph of <code>data.set.finite</code>:<br>\n<a href=\"/user_uploads/3121/upsjtgJkvMh7kGixqLQjjbEm/data_set_finite.pdf\">data_set_finite.pdf</a></p>",
        "id": 310297827,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1668548451
    },
    {
        "content": "<p>This is rather depressing but I suspect that a <em>lot</em> of this comes from the fact that <code>data.finite.basic</code> both defines finiteness <em>and</em> tries to provide all possible instances.</p>",
        "id": 310298028,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1668548523
    },
    {
        "content": "<p>In any case, there is certainly no reason why <code>data.set.finite</code> needs all this algebra.</p>",
        "id": 310298160,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1668548566
    },
    {
        "content": "<p>Maybe we should simply port everything and stop worrying, but it's hard to think there is nothing to fix here.</p>",
        "id": 310298521,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1668548686
    },
    {
        "content": "<p>Since the very first filter files import finiteness, we should definitely fix this!  There is no reason for basic topology to import basic algebra.</p>",
        "id": 310298531,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1668548689
    },
    {
        "content": "<p>This is creepy. Heather seems to be spying on my computer and knows how I found about that horrible graph.</p>",
        "id": 310298651,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1668548739
    },
    {
        "content": "<p>Of course I first generated <a href=\"/user_uploads/3121/vBIiZVLWYIQsUkqT3oP7eNTc/filter.pdf\">filter.pdf</a></p>",
        "id": 310298681,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1668548755
    },
    {
        "content": "<p>Perhaps a stupid question: why do the very first filter files import finiteness?</p>",
        "id": 310299385,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668549021
    },
    {
        "content": "<p>Among other reasons, because the cofinite filter is defined in them.  This could be avoided.</p>",
        "id": 310299454,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1668549057
    },
    {
        "content": "<p>I have plans to split up finiteness. I will update you in the next two days.</p>",
        "id": 310299462,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668549061
    },
    {
        "content": "<p>Also, because there are lemmas about Sups of finsets in <code>order.conditionally_complete_lattice</code> (this could be avoided), and <code>order.copy</code> imports <code>conditionally_complete_lattice</code> (this could be avoided), and <code>order.filter.basic</code> imports <code>order.copy</code> (this could be avoided).</p>",
        "id": 310299750,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1668549196
    },
    {
        "content": "<blockquote>\n<p>Perhaps a stupid question: why do the very first filter files import finiteness?</p>\n</blockquote>\n<p>By definition, the set of members of a filter is stable under (binary) intersection. One of the very first consequences you want to state is stability under finite intersections.</p>",
        "id": 310300191,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1668549356
    },
    {
        "content": "<p>And really this isn't only about filters. Stating that a set is finite is a really really basic thing in mathematics.</p>",
        "id": 310300443,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1668549444
    },
    {
        "content": "<p>I remember <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> had plans to make <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.finite\">docs#set.finite</a> be defined in terms of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finite\">docs#finite</a>, so that we could remove the <code>data.fintype.basic</code> dependency of <code>data.set.finite</code> and try to lower these things.</p>\n<p>When I reorganized this module back in May, my goal was to get things thematically in order and to figure out dependencies. An obvious thing to split out now are all the <code>fintype</code> instances for sets -- <code>data.set.finite</code> has long been a mismash of <code>set.finite</code> and things about finite <code>set</code>s.</p>",
        "id": 310300615,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668549503
    },
    {
        "content": "<p>Organizationally, many of the <code>set.finite</code> constructors come from these <code>finite</code> or <code>fintype</code> instances, but these don't have to be in the module that defines <code>set.finite</code></p>",
        "id": 310300720,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668549545
    },
    {
        "content": "<p>Yes, that's exactly my thought.</p>",
        "id": 310300773,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668549570
    },
    {
        "content": "<p>Patrick, sure, finiteness is very basic, but I often consider filters as similarly basic, but your finite intersection argument definitely convinced me.</p>",
        "id": 310300778,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668549572
    },
    {
        "content": "<p>Of course, everyone's favorite definition of a finite set is that every ultrafilter is principal ;)</p>",
        "id": 310301072,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1668549679
    },
    {
        "content": "<p>(Maybe I've been thinking about condensed mathematics too much)</p>",
        "id": 310301398,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1668549800
    },
    {
        "content": "<p>I think that in ZF it's consistent that every ultrafilter on the naturals is principal :-)</p>",
        "id": 310324751,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668562555
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Ultrafilter_(set_theory)#Weaker_statements\">https://en.wikipedia.org/wiki/Ultrafilter_(set_theory)#Weaker_statements</a> says</p>\n<blockquote>\n<p>ZF alone does not even imply that there exists a non-principal ultrafilter on some set.</p>\n</blockquote>",
        "id": 310335265,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1668571695
    },
    {
        "content": "<p>yeah, the ultrafilter lemma is equivalent to the Boolean prime ideal theorem</p>",
        "id": 310337601,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668573348
    },
    {
        "content": "<p>The Wikipedia page says this is strictly weaker than the ultrafilter lemma, but ZF still doesn't imply it.</p>",
        "id": 310338769,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1668574457
    },
    {
        "content": "<p>oooo, interesting!</p>",
        "id": 310345329,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668579617
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/17574\">#17574</a> for the <code>list</code> part of the monster.</p>",
        "id": 310515627,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668638955
    },
    {
        "content": "<p>Beyond <a href=\"https://github.com/leanprover-community/mathlib/pull/17574\">#17574</a>, it looks like half of <code>data.list.basic</code> doesn't depend on any algebra at all, just</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.option.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">logic.nontrivial</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.basic</span>\n</code></pre></div>\n<p>See <a href=\"https://github.com/leanprover-community/mathlib/tree/hrmacbeth-minimal-list\">branch#hrmacbeth-minimal-list</a>.  I have never looked at this file and can't tell whether the algebra-independent half has any coherence or content. Could someone who has comment on whether this split is worthwhile?</p>",
        "id": 310681224,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1668712614
    },
    {
        "content": "<p>(The \"algebra\" in the other half, with imports</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.order.with_zero</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.order.lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.function</span>\n</code></pre></div>\n<p>seems to be mostly addition and subtraction of natural numbers.)</p>",
        "id": 310681348,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1668712656
    },
    {
        "content": "<p>I'm inclined to say that you should have data.nat.basic lemmas available (assuming that doesn't pull in the algebraic hierarchy). That should give you a much bigger fraction of the file</p>",
        "id": 310681803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668712807
    },
    {
        "content": "<p>Currently <code>data.nat.basic</code> imports</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group_with_zero.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.ring.defs</span>\n</code></pre></div>",
        "id": 310681921,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1668712849
    },
    {
        "content": "<p>also note that most of data.nat.basic is in <code>Std</code> now, so it is \"free\" from a untangling-imports perspective (but this hasn't been reflected in lean 3)</p>",
        "id": 310682045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668712893
    },
    {
        "content": "<p>maybe <code>data.nat.basic</code> needs a split then?</p>",
        "id": 310682086,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668712912
    },
    {
        "content": "<p>I'm pretty sure most of <code>data.nat.basic</code> is \"stuff that should have been in core\" (i.e. no dependencies), that's the stuff that is in <code>Std</code> now and which should be split off</p>",
        "id": 310682357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668713007
    },
    {
        "content": "<p>Indeed.  But this is getting clearly into Scott's territory so let's wait til he wakes up.</p>",
        "id": 310682388,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1668713021
    },
    {
        "content": "<p>Oh dear, I don't want my enthusiasm for splitting files to prevent other people splitting files!!!</p>",
        "id": 310719025,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668727611
    },
    {
        "content": "<p>So maybe I should just say: yes, obviously <code>data.nat.basic</code> and <code>data.list.basic</code> deserve splitting, and we should do it real-soon-now. :-)</p>",
        "id": 310719076,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668727657
    },
    {
        "content": "<p>Well I had a split for <code>data.fintype.basic</code> but you got yours out first <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 310722643,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668729120
    },
    {
        "content": "<p>I started a branch aiming to remove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">algebra.group_with_zero.divisibility</span>\n<span class=\"n\">algebra.order.with_zero</span>\n<span class=\"n\">algebra.ring.divisibility</span>\n<span class=\"n\">data.set.basic</span>\n</code></pre></div>\n<p>from the (indirect) imports of <code>data.list.basic</code>.  Progress so far: <a href=\"https://github.com/leanprover-community/mathlib/tree/list-nat-order\">branch#list-nat-order</a></p>\n<p>Is this worth persevering with?</p>",
        "id": 310966484,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1668836052
    },
    {
        "content": "<p>So far so good, so I opened <a href=\"https://github.com/leanprover-community/mathlib/pull/17616\">#17616</a>.</p>",
        "id": 310969580,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1668839376
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/17691\">#17691</a> is another small PR towards untangling finiteness.</p>",
        "id": 311878569,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1669226826
    },
    {
        "content": "<p>Another PR working on the imports of <code>data.list.*</code>: <a href=\"https://github.com/leanprover-community/mathlib/pull/17702\">#17702</a></p>",
        "id": 311924973,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1669248835
    }
]