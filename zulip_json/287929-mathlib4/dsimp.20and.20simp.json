[
    {
        "content": "<p>I think this is different, but I could be wrong. I think the point is that it is <code>h</code> that is being <code>dsimp</code>ed before the <code>simp</code> call.</p>",
        "id": 310678828,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668711881
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">YaÃ«l Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Mathlib4.20porting.20meeting.20series/near/310678666\">said</a>:</p>\n<blockquote>\n<p>That also means <code>simp</code> isn't strictly more powerful than <code>dsimp</code> anymore, right? We really should make a warning about that, then.</p>\n</blockquote>\n<p><code>simp</code> has not been strictly more powerful than <code>dsimp</code> since forever, unless you mean something different by \"strictly more powerful\" than I do. <code>dsimp</code> is able to simplify arguments of dependent functions.</p>",
        "id": 310683471,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1668713394
    },
    {
        "content": "<p>actually I think <code>simp</code> is strictly more powerful in that sense in lean 4, simp will go into \"<code>dsimp</code> mode\" if it can't traverse into a dependent function argument</p>",
        "id": 310684784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668713826
    },
    {
        "content": "<p>but no this does not mean that <code>simp</code> no longer subsumes <code>dsimp</code>, because <code>dsimp</code> got less powerful in exactly the same way</p>",
        "id": 310684987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668713888
    },
    {
        "content": "<p>if you do <code>dsimp [h]</code> well it won't do anything at all because <code>h</code> is a local variable, but if <code>h</code> was a theorem with that type that was proved by <code>rfl</code> then <code>dsimp [h]</code> would have worked and no longer does, and <code>dsimp only at h; dsimp [h]</code> would in theory work but it doesn't make sense to dsimp a global theorem so you would just have to restate the theorem without the bad LHS</p>",
        "id": 310685319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668713998
    }
]