[
    {
        "content": "<p>I've heard the rumour that in the past mathport didn't port line comments. Is that (still) true? I think there are a lot of important comments in mathlib.</p>",
        "id": 262970807,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638166792
    },
    {
        "content": "<p>yes, that's still true. The most important comment that we don't preserve is the head comment, it would be nice to backport something more structured / machine readable for that</p>",
        "id": 262974691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638171580
    },
    {
        "content": "<p>Comments are not preserved at all in the AST, so we lose track of them quickly. It is hard to see how to mix them in too, since the source-to-source translation can be complex and it's not obvious where to put a comment which can appear literally anywhere in the proof</p>",
        "id": 262974785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638171665
    },
    {
        "content": "<p>Hmm, I know that <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> wrote a bunch of complicated proofs that were very well-documented.</p>",
        "id": 262986308,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638179668
    },
    {
        "content": "<p>Naive question: I thought mathport was trying to port tactic proofs directly. Why can't you record the position of the line comment in the (linear) stream of tactic lines that forms the proof?</p>",
        "id": 262986389,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638179725
    },
    {
        "content": "<p>Indeed, I would be a little bit sad if the comments in the proof of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Gromov_Hausdorff.GH_space.topological_space.second_countable_topology\">docs#Gromov_Hausdorff.GH_space.topological_space.second_countable_topology</a>, say, were lost in translation.</p>",
        "id": 262987666,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1638180420
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> As <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> said, the problem is that comments are not preserved in the AST mathport is porting. That is, by the time mathport gets to inspect the syntax of a proof, the comments are already gone. </p>\n<p>However, I wonder if it might be possible to augment the tactic syntax in Lean 3 to support a docstring per tactic. That way such comments could be converted into docstrings and they could be preserved in the AST and ported by mathport. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>,  does that sound feasible?</p>",
        "id": 262988258,
        "sender_full_name": "Mac",
        "timestamp": 1638180733
    },
    {
        "content": "<p>mathport has tweaked lean 3 before. Can't the comments be added to the AST?</p>",
        "id": 262988324,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638180776
    },
    {
        "content": "<p>I would much prefer it if this could be done by actually making them doc comments, i.e. using <code>/--</code></p>",
        "id": 262988341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638180788
    },
    {
        "content": "<p>or maybe some other sigil</p>",
        "id": 262988363,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638180803
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">bla</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">some</span> <span class=\"n\">subproof</span> <span class=\"o\">},</span>\n<span class=\"n\">comment</span> <span class=\"s2\">\"Hello, world\"</span><span class=\"o\">,</span>\n<span class=\"n\">yet_another_tactic</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 262988582,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638180913
    },
    {
        "content": "<p>If we are going to add comments to the AST, it seems like the most logical way to get them is to just use the row/col of existing AST nodes together with the original file text to find whitespace areas, and then grab anything in there that isn't literally a space</p>",
        "id": 262988592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638180915
    },
    {
        "content": "<p>With</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.comment</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.skip</span>\n</code></pre></div>",
        "id": 262988728,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638180971
    },
    {
        "content": "<p>That would certainly work, although it leaves much to be desired on the lean 3 side</p>",
        "id": 262988776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638181002
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/comments/near/262988592\">said</a>:</p>\n<blockquote>\n<p>If we are going to add comments to the AST, it seems like the most logical way to get them is to just use the row/col of existing AST nodes together with the original file text to find whitespace areas, and then grab anything in there that isn't literally a space</p>\n</blockquote>\n<p>That's not too different from what the Lean 4 parser does, and it's also a reasonable strategy in reverse for adding back comments after the fact. It's always better to place comments at roughly the same position as before, perhaps concatenating them with others that are already there, than to lose them.</p>",
        "id": 262989481,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1638181414
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, you could presumably even use <code>comment /-\" Hello world \"-/</code> with that trick</p>",
        "id": 262990450,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638182004
    },
    {
        "content": "<p>Wouldn't that be a regular comment, and hence filtered out?</p>",
        "id": 262990602,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638182081
    },
    {
        "content": "<p>That's a string literal.</p>",
        "id": 262990721,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638182148
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/comments/near/262988341\">said</a>:</p>\n<blockquote>\n<p>I would much prefer it if this could be done by actually making them doc comments, i.e. using <code>/--</code></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Note my suggestion <em>was</em> to make them doc comments.</p>",
        "id": 262991680,
        "sender_full_name": "Mac",
        "timestamp": 1638182828
    }
]