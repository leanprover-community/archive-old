[
    {
        "content": "<p>I have the expression <code>↑1</code> in a couple places in my tactic state, and it looks the same in each place on mouseover: <code>@Nat.cast α NonAssocRing.toNatCast 1 : α</code>.</p>\n<p>They're the same under <code>pp.all true</code>, too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">Nat.cast.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocRing.toNatCast.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toNonAssocRing.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>The problem: in one case, <code>rw [Nat.cast_one]</code> successfully rewrites it—in another, it doesn't. Here's a MWE (up to <code>Invertible</code>).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Invertible</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">Invertible</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">⅟</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">inv</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.cast_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">inv</span> <span class=\"c1\">-- rewrite works (and leaves unsolved goals)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bar'</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">inv</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.cast_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">eq</span> <span class=\"c1\">-- rewrite fails</span>\n</code></pre></div>\n<p>It only seems to happen under <code>⅟</code>—remove that from the type of <code>eq</code> and the problem disappears.</p>\n<p>Does it have something to do with finding the right instances, maybe?</p>",
        "id": 320530538,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673379587
    },
    {
        "content": "<p>Does <code>simp_rw</code> succeed?</p>",
        "id": 320534203,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673380802
    },
    {
        "content": "<p>No, unfortunately.</p>",
        "id": 320534910,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673381024
    },
    {
        "content": "<p>I should give some extra info: the actual error is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">motive</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">type</span> <span class=\"n\">correct</span>\n<span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">eq</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">⅟↑</span><span class=\"mi\">1</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Unit</span>\n</code></pre></div>\n<p>and I don't know what that implies in this context...</p>",
        "id": 320535072,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673381078
    },
    {
        "content": "<p>Does <code>inv</code> really not appear in the context?</p>",
        "id": 320536819,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673381766
    },
    {
        "content": "<p><code>inv</code> does appear in the original context, but it fails nonetheless</p>",
        "id": 320537439,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673382024
    },
    {
        "content": "<p>Here's the initial tactic state:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"n\">α</span>\n<span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">inv</span><span class=\"o\">:</span> <span class=\"n\">Invertible</span> <span class=\"bp\">↑</span><span class=\"mi\">1</span>\n<span class=\"n\">eq</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">⅟↑</span><span class=\"mi\">1</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Unit</span>\n</code></pre></div>",
        "id": 320537449,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673382028
    },
    {
        "content": "<p>The problem is that <code>eq</code> refers to <code>inv</code></p>",
        "id": 320537606,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673382097
    },
    {
        "content": "<p>And you need to rewrite both at once</p>",
        "id": 320537613,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673382102
    },
    {
        "content": "<p>Oh, good catch. Hmmm...how do you actually make that happen?</p>",
        "id": 320538745,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673382503
    },
    {
        "content": "<p>Ideally I'd like to rewrite <code>inv</code>to something new and then be able to rewrite it the same way wherever it appears in some other specified hypothesis</p>",
        "id": 320539088,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673382595
    },
    {
        "content": "<p>I would guess you want to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Invertible.copy\">docs#Invertible.copy</a> to create a <code>inv'</code></p>",
        "id": 320539211,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673382631
    },
    {
        "content": "<p>It looks like we're missing <code>simps</code> on that definition, as you'd then use the lemma it generates</p>",
        "id": 320539521,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673382762
    },
    {
        "content": "<p>Hmm, <code>inv</code> is the one the rewrite works for—I have no trouble producing <code>Invertible 1</code> via <code>Nat.cast_one</code>. But how do I use that to rewrite the <code>inv</code> inside <code>eq</code>?</p>",
        "id": 320540259,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673383084
    },
    {
        "content": "<p>What do you mean by the lemma it generates?</p>",
        "id": 320540313,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673383099
    },
    {
        "content": "<p><code>simps</code> not <code>simp</code>. It genertes the lemma <code>Invertible.invOf_copy</code>, if I'm not mistaken</p>",
        "id": 320540502,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673383196
    },
    {
        "content": "<p>This can be solved with a congruence lemma</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[congr]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Invertible.cong</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Invertible</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">⅟</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">Invertible.invOf</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bar'</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">inv</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.cast_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">eq</span> <span class=\"c1\">-- rewrite succeeds</span>\n</code></pre></div>",
        "id": 320540508,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673383200
    },
    {
        "content": "<p>I'm not sure I wrote this one right</p>",
        "id": 320540569,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673383209
    },
    {
        "content": "<p>If <code>by subst h; assumption</code> is of type <code>Invertible _</code>, then you should use <code>Invertible.copy</code> there</p>",
        "id": 320540620,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673383242
    },
    {
        "content": "<p>Sure, that would be better. In any case, what this is doing is helping <code>simp</code> by telling it \"to do a rewrite for an Inv expression, you can just rewrite its main argument. I'll handle the typeclass instances.\"</p>",
        "id": 320540726,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673383296
    },
    {
        "content": "<p>This didn't work in Lean 3, right?</p>",
        "id": 320540749,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673383311
    },
    {
        "content": "<p>Very likely not. It used a more conservative heuristic for what could be a congr lemma</p>",
        "id": 320540931,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673383376
    },
    {
        "content": "<p>IIRC, it required all term arguments (even instances) to have corresponding eq arguments, but here you've got Mul and One</p>",
        "id": 320541132,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673383445
    },
    {
        "content": "<p>Any idea why keyword arguments don't work here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[congr]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Invertible.cong</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Invertible</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">⅟</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">Invertible.invOf</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:=</span> <span class=\"n\">Invertible.copy</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"n\">_</span> <span class=\"n\">h.symm</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>The error is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"bp\">⅟</span><span class=\"n\">y</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 320541631,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673383658
    },
    {
        "content": "<p>This is great! Feel free to PR, but I can also just slip this in just under <code>Invertible.copy</code> in the <code>norm_num</code> PR I'm working on if that's more convenient and sounds good to everyone.</p>",
        "id": 320543489,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673384340
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span>\n<span class=\"kd\">def</span> <span class=\"n\">f'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">inst</span> <span class=\"o\">:=</span> <span class=\"n\">Int.instRingInt</span><span class=\"o\">)</span> <span class=\"mi\">3</span>\n<span class=\"k\">#eval</span> <span class=\"n\">f'</span> <span class=\"o\">(</span><span class=\"n\">inst</span> <span class=\"o\">:=</span> <span class=\"n\">Int.instRingInt</span><span class=\"o\">)</span> <span class=\"mi\">3</span>\n</code></pre></div>\n<p>It seems to have to do with class fields. This is unexpected to me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Baz</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">bazinst</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Baz</span> <span class=\"n\">Int</span> <span class=\"n\">n</span> <span class=\"n\">where</span>\n  <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">37</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Baz.y</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:=</span> <span class=\"n\">bazinst</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Baz.y 5 : Int</span>\n</code></pre></div>",
        "id": 320543512,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673384348
    },
    {
        "content": "<p>It's unexpected since in <code>Baz.y</code> the argument <code>x</code> is explicit</p>",
        "id": 320543584,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673384379
    }
]