[
    {
        "content": "<p>Small issue -- looks like when porting lean3 <code>funext</code> tactic, mathport just put lean4 <code>funext</code>, which doesn't work -- it should probably (?) be replaced with <code>funext _</code> everywhere it's used</p>",
        "id": 320403673,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673341534
    },
    {
        "content": "<p>what does <code>funext</code> do in lean 3 and lean 4?</p>",
        "id": 320405686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673342287
    },
    {
        "content": "<p>Usually when tactic behavior doesn't match up it is preferable to fix the tactics rather than automate a wide scale usability regression</p>",
        "id": 320405808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673342341
    },
    {
        "content": "<p>unless there is an argument for why the new behavior is better than the old one</p>",
        "id": 320405934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673342400
    },
    {
        "content": "<p>Both are basically equivalent to <code>apply funext; intro</code>, is my impression. lean3 funext would autogenerate a name if none was provided, while lean4 funext requires it. since lean4 <code>intro</code> autogenerates a name, <code>funext</code> should probably be modified to do the same</p>",
        "id": 320406569,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673342593
    },
    {
        "content": "<p>So basically there's a bunch of unhygienic lean 3 code being incorrectly ported</p>",
        "id": 320407036,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673342745
    },
    {
        "content": "<p>(Is there a situation where <code>apply funext; intro _</code> wouldn't work as a translation..? not sure what effect hygiene issues have on porting)</p>",
        "id": 320407221,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673342802
    },
    {
        "content": "<p>There's actually a few unrelated mathport issues cropping up in <code>Data.List.Permutation</code>, should I make new threads or just list them here?</p>",
        "id": 320407577,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673342907
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mathport.20funext/near/320406569\">said</a>:</p>\n<blockquote>\n<p>Both are basically equivalent to <code>apply funext; intro</code>, is my impression. lean3 funext would autogenerate a name if none was provided, while lean4 funext requires it.</p>\n</blockquote>\n<p>I'm asking what <code>funext</code> does, full stop no extra argument</p>",
        "id": 320413500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673344973
    },
    {
        "content": "<p>what do you mean by lean4 funext requires it? Is it an error?</p>",
        "id": 320413562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673344999
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mathport.20funext/near/320407036\">said</a>:</p>\n<blockquote>\n<p>So basically there's a bunch of unhygienic lean 3 code being incorrectly ported</p>\n</blockquote>\n<p>It's not clear to me that hygiene is the issue here. That would only be if follow up code talks about <code>a</code> or something assuming that the introduced name is <code>a</code>; our use of <img alt=\":ahat:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/19435.png\" title=\"ahat\"> in lean 3 addresses most of those cases though</p>",
        "id": 320413862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673345109
    },
    {
        "content": "<p>Not in the case of <code>ext</code>, though. <code>ext</code> gets its name from the variable name that is used in the lambda expression.</p>",
        "id": 320414013,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673345160
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mathport.20funext/near/320407577\">said</a>:</p>\n<blockquote>\n<p>There's actually a few unrelated mathport issues cropping up in <code>Data.List.Permutation</code>, should I make new threads or just list them here?</p>\n</blockquote>\n<p>You can put them in one thread, but the thread should be called Data.List.Permutation in that case</p>",
        "id": 320414081,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673345170
    },
    {
        "content": "<p>And that is unhygienic because those names tend to change when lemmas are moved around.</p>",
        "id": 320414139,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673345192
    },
    {
        "content": "<p>I said most</p>",
        "id": 320414161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673345203
    },
    {
        "content": "<p>lean 4 can do that too (variable names are officially part of the signature now)</p>",
        "id": 320414255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673345243
    },
    {
        "content": "<p>so you should not change the names of variables by moving them, that's a breaking change similar to changing the lemma statement</p>",
        "id": 320414432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673345297
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mathport.20funext/near/320413562\">said</a>:</p>\n<blockquote>\n<p>what do you mean by lean4 funext requires it? Is it an error?</p>\n</blockquote>\n<p>syntax error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">funext</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">funext</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">funext</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">funext</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"bp\">;</span> <span class=\"n\">funext</span> <span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It's a one-line fix :)</p>",
        "id": 320414488,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673345319
    },
    {
        "content": "<p>well that was easy</p>",
        "id": 320414531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673345340
    }
]