[
    {
        "content": "<p>Another failure in an <code>abel</code> proof, the one I was trying to isolate when I discovered<br>\n<a href=\"#narrow/stream/287929-mathlib4/topic/Non-local.20behaviour.20in.20.60abel.60\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Non-local.20behaviour.20in.20.60abel.60</a><br>\nHere I am working on top of Mario's bugfix <a href=\"https://github.com/leanprover-community/mathlib4/pull/1394\">mathlib4#1394</a>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Abel</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">c</span> <span class=\"n\">hc</span>\n  <span class=\"bp\">.</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">.</span> <span class=\"n\">rcases</span> <span class=\"n\">hc</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"o\">⟩</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_add</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_one</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span>  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩</span>\n    <span class=\"n\">use</span> <span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">y</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.cast_sub</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hy</span><span class=\"o\">]</span>\n    <span class=\"n\">abel</span> <span class=\"c1\">-- does not resolve goal</span>\n    <span class=\"n\">done</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">provable_by_abel</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">abel</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">c</span> <span class=\"n\">hc</span>\n  <span class=\"bp\">.</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">.</span> <span class=\"n\">rcases</span> <span class=\"n\">hc</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"o\">⟩</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_add</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">Nat.cast_one</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span>  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩</span>\n    <span class=\"n\">use</span> <span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">y</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.cast_sub</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hy</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">provable_by_abel</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 319893487,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673056938
    },
    {
        "content": "<p>Short version: <code>abel</code> can't resolve the goal, but a lemma which is provable by <code>abel</code> can resolve the goal.</p>\n<p>I have tried to make this example smaller, but it's quite fiddly.</p>\n<p>If you look at the goal state right before the <code>abel</code> call you'll see that some casts are <code>@Nat.cast α AddMonoidWithOne.toNatCast</code> and some casts are <code>@Nat.cast α NonAssocRing.toNatCast</code>, so maybe the <code>rw [Nat.cast_add]</code>, which introduces this casting discrepancy, is the culprit.  And if so, maybe the problem is not <code>abel</code> but our casting yoga.  However, I wasn't able to make a smaller example where <code>abel</code> failed because of a casting discrepancy like that.</p>",
        "id": 319893657,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673057111
    },
    {
        "content": "<p>Also note that neither <code>norm_cast</code> nor <code>push_cast</code> normalize away the <code>AddMonoidWithOne.toNatCast</code>/<code>NonAssocRing.toNatCast</code> discrepancy.</p>",
        "id": 319893894,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673057362
    },
    {
        "content": "<p>Another apparent <code>abel</code> issue -- possibly the same:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Abel</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">-</span> <span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">-</span> <span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">abel</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">-</span> <span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">-</span> <span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">s</span>\n    <span class=\"n\">abel</span> <span class=\"c1\">-- fails</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Again I'm working on top of <a href=\"https://github.com/leanprover-community/mathlib4/pull/1394\">mathlib4#1394</a>.</p>",
        "id": 319895001,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673058301
    },
    {
        "content": "<p>This one looks kind of like yesterday's linarith bug<br>\n<a href=\"#narrow/stream/287929-mathlib4/topic/.E2.9C.94.20linarith.20failure\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/.E2.9C.94.20linarith.20failure</a><br>\nin that it has different behaviour when variables/hypotheses are introduced a proof than when they exist at the start of the proof.</p>",
        "id": 319895060,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673058359
    },
    {
        "content": "<p>it's another missing withMainContext, I pushed a fix to the same PR</p>",
        "id": 319895702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673058918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Thanks!  That indeed fixes the previous issues.</p>\n<p>Do you want to complete an <code>abel</code> fix hat trick?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Abel</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">abel</span>\n  <span class=\"n\">done</span>\n\n<span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">abel</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>(working on top of the latest <a href=\"https://github.com/leanprover-community/mathlib4/pull/1394\">mathlib4#1394</a>).</p>",
        "id": 319897374,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673060427
    },
    {
        "content": "<p>fixed</p>",
        "id": 319897959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673060841
    },
    {
        "content": "<p>Btw, what does <code>reduce the goal before testing for equality</code> mean in your commit message about this fix?</p>",
        "id": 319898146,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673061014
    },
    {
        "content": "<p>the problem was that the goal is not <code>y = x + z - (x - y + z)</code>, it is <code>mdata(noImplicitLambda) (y = x + z - (x - y + z))</code> so we have to remove the mdata node before testing if it is an equality</p>",
        "id": 319898433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673061314
    },
    {
        "content": "<p>it's generally a good idea to use whnfR before anything that literally pattern matches on an expression to skip things like mdata and abbreviations (unless you are specifically looking for the abbreviation or metadata)</p>",
        "id": 319898462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673061354
    },
    {
        "content": "<p>All <code>abel</code> calls in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1304\">mathlib4#1304</a> work now!<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/commit/898249c56c1b5c9c50eaa66a34c15de7cb916b51\">https://github.com/leanprover-community/mathlib4/commit/898249c56c1b5c9c50eaa66a34c15de7cb916b51</a></p>",
        "id": 319898635,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673061501
    }
]