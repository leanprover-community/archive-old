[
    {
        "content": "<p>How should I approach debugging this error?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> The `simpNF` linter reports:</span>\n<span class=\"cm\">SOME SIMP LEMMAS ARE NOT IN SIMP-NORMAL FORM.</span>\n<span class=\"cm\">see note [simp-normal form] for tips how to debug this.</span>\n<span class=\"cm\">https://leanprover-community.github.io/mathlib_docs/notes.html#simp-normal%20form -/</span>\n<span class=\"c1\">-- Mathlib.Logic.Unique</span>\n<span class=\"k\">#check</span> <span class=\"n\">PUnit.default_eq_unit.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"c\">/-</span><span class=\"cm\"> LINTER FAILED:</span>\n<span class=\"cm\">simplify fails on left-hand side:</span>\n<span class=\"cm\">unknown metavariable '?_uniq.152' -/</span>\n<span class=\"n\">make</span><span class=\"o\">:</span> <span class=\"bp\">***</span> <span class=\"o\">[</span><span class=\"n\">GNUmakefile</span><span class=\"o\">:</span><span class=\"mi\">16</span><span class=\"o\">:</span> <span class=\"n\">lint</span><span class=\"o\">]</span> <span class=\"n\">Error</span> <span class=\"mi\">1</span>\n<span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"n\">Process</span> <span class=\"n\">completed</span> <span class=\"k\">with</span> <span class=\"n\">exit</span> <span class=\"n\">code</span> <span class=\"mi\">2</span><span class=\"bp\">.</span>\n</code></pre></div>\n<p>I tried making a new file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">PUnit.default_eq_unit'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"o\">:</span> <span class=\"n\">PUnit</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">PUnit.unit</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>but this just works with no errors.</p>",
        "id": 308754165,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1667988505
    },
    {
        "content": "<p>Is <code>import Mathlib</code> the lean 4 version of <code>import all</code>? What happens if you also do <code>import Std</code>?</p>",
        "id": 308755473,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667988977
    },
    {
        "content": "<p>I understand <code>Mathlib.lean</code> is supposed to import all of the files in <code>Mathlib</code> (and I added my new files to it).</p>\n<p>Adding <code>import Std</code> didn't change behaviour.</p>",
        "id": 308756122,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1667989212
    },
    {
        "content": "<p>This is <a href=\"https://github.com/leanprover-community/mathlib4/pull/559\">mathlib4#559</a>, by the way.</p>",
        "id": 308756147,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1667989222
    },
    {
        "content": "<p>Several mathlib files use <code>import Std</code> so <code>import Mathlib</code> definitely implies <code>import Std</code>. (I think we will at some point want to pivot to using only targeted std imports in mathlib, but for now it helps catch duplicate definition errors and the like when stuff moves from mathlib to std.)</p>",
        "id": 308782015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667999070
    },
    {
        "content": "<p>Here is a way to generate the error in a single file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Conv</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Quot</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Unique</span>\n\n<span class=\"bp\">#</span><span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"o\">:</span> <span class=\"n\">PUnit</span><span class=\"o\">)</span>    <span class=\"c1\">-- fails with `unknown metavariable '?_uniq.1035'`</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span> <span class=\"n\">Mathlib</span> <span class=\"n\">only</span> <span class=\"n\">simpNF</span>\n<span class=\"c1\">-- fails with:</span>\n<span class=\"c\">/-</span><span class=\"cm\"> The `simpNF` linter reports:</span>\n<span class=\"cm\">SOME SIMP LEMMAS ARE NOT IN SIMP-NORMAL FORM.</span>\n<span class=\"cm\">see note [simp-normal form] for tips how to debug this.</span>\n<span class=\"cm\">https://leanprover-community.github.io/mathlib_docs/notes.html#simp-normal%20form -/</span>\n<span class=\"c1\">-- Mathlib.Logic.Unique</span>\n<span class=\"k\">#check</span> <span class=\"n\">PUnit.default_eq_unit</span> <span class=\"c\">/-</span><span class=\"cm\"> LINTER FAILED:</span>\n<span class=\"cm\">simplify fails on left-hand side:</span>\n<span class=\"cm\">unknown metavariable '?_uniq.48' -/</span>\n</code></pre></div>",
        "id": 309100686,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668122551
    },
    {
        "content": "<p>(again, in <a href=\"https://github.com/leanprover-community/mathlib4/pull/559\">mathlib4#559</a>, for <code>Mathlib.Data.Quot</code>)</p>",
        "id": 309100709,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668122566
    },
    {
        "content": "<p>Here's a version which generates the issue on <code>master</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Logic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.Ext</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.Lint</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Conv</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">lift_on_mk</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Quot.liftOn</span> <span class=\"o\">(</span><span class=\"n\">Quot.mk</span> <span class=\"n\">r</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">eq_iff_true_of_subsingleton</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">PUnit.default_eq_unit</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"o\">:</span> <span class=\"n\">PUnit</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">PUnit.unit</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">#</span><span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"o\">:</span> <span class=\"n\">PUnit</span><span class=\"o\">)</span>    <span class=\"c1\">-- fails with `unknown metavariable '?_uniq.1081'`</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span> <span class=\"n\">Mathlib</span> <span class=\"n\">only</span> <span class=\"n\">simpNF</span>\n<span class=\"c1\">-- fails with:</span>\n<span class=\"c\">/-</span><span class=\"cm\"> The `simpNF` linter reports:</span>\n<span class=\"cm\">SOME SIMP LEMMAS ARE NOT IN SIMP-NORMAL FORM.</span>\n<span class=\"cm\">see note [simp-normal form] for tips how to debug this.</span>\n<span class=\"cm\">https://leanprover-community.github.io/mathlib_docs/notes.html#simp-normal%20form -/</span>\n<span class=\"c1\">-- scratch.scratch2</span>\n<span class=\"k\">#check</span> <span class=\"n\">PUnit.default_eq_unit</span> <span class=\"c\">/-</span><span class=\"cm\"> LINTER FAILED:</span>\n<span class=\"cm\">simplify fails on left-hand side:</span>\n<span class=\"cm\">unknown metavariable '?_uniq.48' -/</span>\n</code></pre></div>",
        "id": 309104742,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668124440
    },
    {
        "content": "<p>Here's a mathlib-free version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">liftOn_mk</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Quot.liftOn</span> <span class=\"o\">(</span><span class=\"n\">Quot.mk</span> <span class=\"n\">r</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eq_iff_true_of_subsingleton</span> <span class=\"o\">[</span><span class=\"n\">Subsingleton</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">True</span> <span class=\"o\">:=</span>\n  <span class=\"n\">iff_true</span> <span class=\"n\">_</span> <span class=\"bp\">▸</span> <span class=\"n\">Subsingleton.elim</span> <span class=\"bp\">..</span>\n\n<span class=\"kn\">section</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">eq_iff_true_of_subsingleton</span> <span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">PUnit.default_eq_unit</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"o\">:</span> <span class=\"n\">PUnit</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">PUnit.unit</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"o\">:</span> <span class=\"n\">PUnit</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n<span class=\"c1\">-- unknown metavariable '?_uniq.827'</span>\n</code></pre></div>",
        "id": 309125222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668138954
    },
    {
        "content": "<p>reported as <a href=\"https://github.com/leanprover/lean4/pull/1814\">lean4#1814</a></p>",
        "id": 309125334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668139063
    }
]