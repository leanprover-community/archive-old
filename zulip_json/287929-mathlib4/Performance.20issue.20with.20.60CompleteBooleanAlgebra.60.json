[
    {
        "content": "<p>There seems to be a performance issue with <code>CompleteDistribLattice</code>(ported in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1107\">mathlib4#1107</a>)  that I don't understand: all three instances of it declared in this file take a lot of time (I'd say more than everything else in the file) to compile. If that matters, note that all of them are declared as { someFrameInstance, someCoframeInstance with }. I tried changing the definition of CompleteDistribLattice to just extend both Frame and Coframe, but it didn't make things any better.<br>\nIs this related to the fact that there are a lot of common fields to <code>Frame</code> and <code>Coframe</code>?</p>",
        "id": 316760798,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1671461388
    },
    {
        "content": "<p>That's interesting! It's precisely the instances of <code>CompleteDistribLattice</code> which are orders of magnitude slower than anything else in the file.</p>",
        "id": 316762232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671461774
    },
    {
        "content": "<p>I'll try to minimise one of them, I have some Lean time right now</p>",
        "id": 316762477,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671461848
    },
    {
        "content": "<p>I think the hold-up in the last example might be this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">Function.Injective.completeDistribLattice</span> <span class=\"o\">[</span><span class=\"n\">HasSup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HasInf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SupSet</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">InfSet</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Top</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Bot</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompleteDistribLattice</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">map_sup</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map_inf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">map_supₛ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">supₛ</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⨆</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map_infₛ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">infₛ</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⨅</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">map_top</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">⊤</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map_bot</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">⊥</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CompleteDistribLattice</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Frame</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">hf.frame</span> <span class=\"n\">f</span> <span class=\"n\">map_sup</span> <span class=\"n\">map_inf</span> <span class=\"n\">map_supₛ</span> <span class=\"n\">map_infₛ</span> <span class=\"n\">map_top</span> <span class=\"n\">map_bot</span>\n  <span class=\"k\">let</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Coframe</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">hf.coframe</span> <span class=\"n\">f</span> <span class=\"n\">map_sup</span> <span class=\"n\">map_inf</span> <span class=\"n\">map_supₛ</span> <span class=\"n\">map_infₛ</span> <span class=\"n\">map_top</span> <span class=\"n\">map_bot</span>\n  <span class=\"k\">have</span> <span class=\"n\">moo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n    <span class=\"bp\">@</span><span class=\"n\">LE.le.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Preorder.toLE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">PartialOrder.toPreorder.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">SemilatticeSup.toPartialOrder.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Lattice.toSemilatticeSup.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CompleteLattice.toLattice.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Order.Coframe.toCompleteLattice.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">bar</span><span class=\"o\">))))))</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">inf</span><span class=\"bp\">ᵢ.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CompleteLattice.toInfSet.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Order.Coframe.toCompleteLattice.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">bar</span><span class=\"o\">))</span> <span class=\"n\">α</span>\n        <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">↦</span>\n          <span class=\"bp\">@</span><span class=\"n\">inf</span><span class=\"bp\">ᵢ.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CompleteLattice.toInfSet.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Order.Coframe.toCompleteLattice.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">bar</span><span class=\"o\">))</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Membership.mem.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">Set.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Set.instMembershipSet.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n            <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Membership.mem.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">Set.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Set.instMembershipSet.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">↦</span>\n              <span class=\"bp\">@</span><span class=\"n\">HasSup.sup.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">SemilatticeSup.toHasSup.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Lattice.toSemilatticeSup.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CompleteLattice.toLattice.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Order.Coframe.toCompleteLattice.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">bar</span><span class=\"o\">))))</span>\n                <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HasSup.sup.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">SemilatticeSup.toHasSup.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Lattice.toSemilatticeSup.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CompleteLattice.toLattice.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Order.Coframe.toCompleteLattice.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">bar</span><span class=\"o\">))))</span>\n        <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">InfSet.infₛ.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CompleteLattice.toInfSet.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Order.Coframe.toCompleteLattice.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">bar</span><span class=\"o\">))</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">@</span><span class=\"n\">LE.le.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Preorder.toLE.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">PartialOrder.toPreorder.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">SemilatticeSup.toPartialOrder.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Lattice.toSemilatticeSup.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CompleteLattice.toLattice.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Order.Frame.toCompleteLattice.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Order.Frame.mk.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Order.Frame.toCompleteLattice.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">foo</span><span class=\"o\">)</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Order.Frame.inf_supₛ_le_sup</span><span class=\"bp\">ᵢ</span><span class=\"n\">_inf.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">foo</span><span class=\"o\">))))))))</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">inf</span><span class=\"bp\">ᵢ.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CompleteLattice.toInfSet.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Order.Frame.toCompleteLattice.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Order.Frame.mk.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Order.Frame.toCompleteLattice.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">foo</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Order.Frame.inf_supₛ_le_sup</span><span class=\"bp\">ᵢ</span><span class=\"n\">_inf.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">foo</span><span class=\"o\">))))</span>\n        <span class=\"n\">α</span>\n        <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">↦</span>\n          <span class=\"bp\">@</span><span class=\"n\">inf</span><span class=\"bp\">ᵢ.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CompleteLattice.toInfSet.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Order.Frame.toCompleteLattice.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Order.Frame.mk.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Order.Frame.toCompleteLattice.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">foo</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Order.Frame.inf_supₛ_le_sup</span><span class=\"bp\">ᵢ</span><span class=\"n\">_inf.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">foo</span><span class=\"o\">))))</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Membership.mem.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">Set.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Set.instMembershipSet.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n            <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Membership.mem.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">Set.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Set.instMembershipSet.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">↦</span>\n              <span class=\"bp\">@</span><span class=\"n\">HasSup.sup.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">SemilatticeSup.toHasSup.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Lattice.toSemilatticeSup.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CompleteLattice.toLattice.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Order.Frame.toCompleteLattice.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n                        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Order.Frame.mk.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Order.Frame.toCompleteLattice.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">foo</span><span class=\"o\">)</span>\n                          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Order.Frame.inf_supₛ_le_sup</span><span class=\"bp\">ᵢ</span><span class=\"n\">_inf.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">foo</span><span class=\"o\">))))))</span>\n                <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HasSup.sup.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">SemilatticeSup.toHasSup.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Lattice.toSemilatticeSup.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CompleteLattice.toLattice.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Order.Frame.toCompleteLattice.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Order.Frame.mk.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Order.Frame.toCompleteLattice.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">foo</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Order.Frame.inf_supₛ_le_sup</span><span class=\"bp\">ᵢ</span><span class=\"n\">_inf.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">foo</span><span class=\"o\">))))))</span>\n        <span class=\"n\">a</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">InfSet.infₛ.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CompleteLattice.toInfSet.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Order.Frame.toCompleteLattice.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Order.Frame.mk.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Order.Frame.toCompleteLattice.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">foo</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Order.Frame.inf_supₛ_le_sup</span><span class=\"bp\">ᵢ</span><span class=\"n\">_inf.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">foo</span><span class=\"o\">))))</span>\n          <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"gr\">sorry</span> <span class=\"k\">#exit</span>\n</code></pre></div>\n<p>The <code>rfl</code> near the end is taking a while. It displays as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">((</span><span class=\"bp\">⨅</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">⨅</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">infₛ</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"bp\">⨅</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">⨅</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">infₛ</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 316774855,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671465172
    },
    {
        "content": "<p>So indeed it looks like the problem has to do with the common fields of <code>Frame</code> and <code>Coframe</code>...</p>",
        "id": 316788036,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1671469160
    },
    {
        "content": "<p>Yes the left hand side is full of <code>hf.coframe</code> and the right hand side is full of <code>hf.frame</code>, so maybe it finds a proof of what you are claiming to be the <code>infᵢ_sup_le_sup_infₛ</code> field and then takes a while checking that this proof is actually a proof of the statement it wants.</p>",
        "id": 316792810,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671470541
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CompleteDistribLattice</span> <span class=\"n\">α</span><span class=\"bp\">ᵒᵈ</span> <span class=\"o\">:=</span>\n<span class=\"n\">CompleteDistribLattice.mk</span> <span class=\"o\">(</span><span class=\"n\">OrderDual.coframe.inf</span><span class=\"bp\">ᵢ</span><span class=\"n\">_sup_le_sup_infₛ</span><span class=\"o\">)</span> <span class=\"c1\">-- super-quick</span>\n<span class=\"c1\">--{ @OrderDual.frame α _, @OrderDual.coframe α _ with } -- super-slow</span>\n<span class=\"c1\">--{ OrderDual.frame, OrderDual.coframe with } -- super-slow</span>\n</code></pre></div>",
        "id": 316817990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671479119
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">completeDistribLattice</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">CompleteDistribLattice</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">CompleteDistribLattice</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">CompleteDistribLattice.mk</span> <span class=\"o\">(</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">coframe.inf</span><span class=\"bp\">ᵢ</span><span class=\"n\">_sup_le_sup_infₛ</span><span class=\"o\">)</span> <span class=\"c1\">-- super-quick</span>\n</code></pre></div>",
        "id": 316818573,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671479326
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Pullback a `complete_distrib_lattice` along an injection. -/</span>\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">Function.Injective.completeDistribLattice</span> <span class=\"o\">[</span><span class=\"n\">HasSup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HasInf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SupSet</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">InfSet</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Top</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Bot</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompleteDistribLattice</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">map_sup</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map_inf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">map_supₛ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">supₛ</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⨆</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map_infₛ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">infₛ</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⨅</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">map_top</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">⊤</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map_bot</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">⊥</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CompleteDistribLattice</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">CompleteDistribLattice.mk</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">hf.frame</span> <span class=\"n\">f</span> <span class=\"n\">map_sup</span> <span class=\"n\">map_inf</span> <span class=\"n\">map_supₛ</span> <span class=\"n\">map_infₛ</span> <span class=\"n\">map_top</span> <span class=\"n\">map_bot</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf.coframe</span> <span class=\"n\">f</span> <span class=\"n\">map_sup</span> <span class=\"n\">map_inf</span> <span class=\"n\">map_supₛ</span> <span class=\"n\">map_infₛ</span> <span class=\"n\">map_top</span> <span class=\"n\">map_bot</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inf</span><span class=\"bp\">ᵢ</span><span class=\"n\">_sup_le_sup_infₛ</span>\n</code></pre></div>\n<p>With those proofs, the entire file compiles in the time it was taking to compile one of those declarations with the version currently on GH. So I don't know what's going on. I'll try to minimise again but at least this is a workaround.</p>",
        "id": 316819036,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671479522
    },
    {
        "content": "<p>I've essentially minimised the problem, modulo the fact that I don't understand enough about Lean 4 notation. It's the two bottom declarations. It's too long for Zulip but it can probably be shortened. It's <a href=\"https://gist.github.com/kbuzzard/a97ec40b43cf84559e8d245fc11be236\">here</a>. The <code>mk</code> constructor is quick, the <code>{ }</code> constructor is slow.</p>",
        "id": 316848813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671491413
    },
    {
        "content": "<p>I wonder if the slow-down that <span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> reports in <a href=\"https://github.com/leanprover-community/mathlib/pull/1099\">#1099</a>: <a href=\"https://github.com/leanprover-community/mathlib4/pull/1099#discussion_r1051747996\">https://github.com/leanprover-community/mathlib4/pull/1099#discussion_r1051747996</a> is related.</p>",
        "id": 316851890,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671493218
    },
    {
        "content": "<p>Does using old-style structures (by manually copying all the fields rather than using <code>extends</code>) help at all here?</p>",
        "id": 316852038,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671493319
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/1986\">https://github.com/leanprover/lean4/issues/1986</a></p>",
        "id": 317471123,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671753160
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Performance.20issue.20with.20.60CompleteBooleanAlgebra.60/near/316852038\">said</a>:</p>\n<blockquote>\n<p>Does using old-style structures (by manually copying all the fields rather than using <code>extends</code>) help at all here?</p>\n</blockquote>\n<p>Don't know -- didn't try yet.</p>",
        "id": 317471149,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671753175
    },
    {
        "content": "<p>Wait a minute -- I thought the whole problem with old-style structures was that they caused super-huge terms and we necessarily have to move away from them?</p>",
        "id": 317568358,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671802553
    },
    {
        "content": "<p>Sounds like this would be a good place to test that in practice</p>",
        "id": 317570114,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671803038
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Preorder</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">le</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"n\">le_refl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"c1\">-- failed to synthesize instance LE α</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> you want me to literally define <code>CompleteDistribLattice</code> by writing down all the 37 fields and then manually constructing all the projections to the other structures it used to extend?</p>",
        "id": 318179106,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672188333
    },
    {
        "content": "<p>OK I will allow myself to extend notation typeclasses</p>",
        "id": 318181451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672189862
    },
    {
        "content": "<p>If what you're suggesting is that I write definitions like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Coframe</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">LT</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">HasInf</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">HasSup</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">SupSet</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"n\">InfSet</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Top</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Bot</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">le_refl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n  <span class=\"n\">le_trans</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span>\n  <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n  <span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"n\">le_antisymm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">inf_le_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">inf_le_right</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">le_inf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">⊓</span> <span class=\"n\">c</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">le_sup_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">le_sup_right</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">sup_le</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span>\n  <span class=\"n\">le_supₛ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">supₛ</span> <span class=\"n\">s</span>\n  <span class=\"n\">supₛ_le</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">supₛ</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n  <span class=\"n\">infₛ_le</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">infₛ</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n  <span class=\"n\">le_infₛ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">infₛ</span> <span class=\"n\">s</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">le_top</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"bp\">⊤</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">bot_le</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">⊥</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span>\n  <span class=\"n\">inf</span><span class=\"bp\">ᵢ</span><span class=\"n\">_sup_le_sup_infₛ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">inf</span><span class=\"bp\">ᵢ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">infₛ</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Coframe.toCompleteLattice</span> <span class=\"o\">[</span><span class=\"n\">Coframe</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CompleteLattice</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"o\">‹</span><span class=\"n\">Coframe</span> <span class=\"n\">α</span><span class=\"o\">›</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>instead of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Coframe</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">CompleteLattice</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">inf</span><span class=\"bp\">ᵢ</span><span class=\"n\">_sup_le_sup_infₛ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">inf</span><span class=\"bp\">ᵢ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">infₛ</span> <span class=\"n\">s</span>\n  <span class=\"c1\">-- should be ⨅ b ∈ s but I had problems with notation</span>\n</code></pre></div>\n<p>then yes it fixes the timeout.</p>",
        "id": 318183040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672191177
    },
    {
        "content": "<p>I think this should be pretty much equivalent to the 37 fields version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Coframe</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">CompleteLattice</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">inf</span><span class=\"bp\">ᵢ</span><span class=\"n\">_sup_le_sup_infₛ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">inf</span><span class=\"bp\">ᵢ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">infₛ</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 318183710,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672191745
    },
    {
        "content": "<p>Changing <code>Coframe</code> to that definition makes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">completeDistribLattice'</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">CompleteDistribLattice</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">CompleteDistribLattice</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">CompleteDistribLattice.mk</span> <span class=\"o\">(</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">coframe.inf</span><span class=\"bp\">ᵢ</span><span class=\"n\">_sup_le_sup_infₛ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(the formerly quick instance) now time out.</p>",
        "id": 318185084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672192959
    },
    {
        "content": "<p>Aah! But also changing the definition of <code>Frame</code> to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Frame</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">CompleteLattice</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n</code></pre></div>\n<p>makes both instances quick! Whatever is going on?</p>",
        "id": 318185162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672193043
    },
    {
        "content": "<p>Should these definitions be changed in mathlib master for some reason?</p>",
        "id": 318185213,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672193069
    },
    {
        "content": "<p>Indeed, making the following changes in <code>Mathlib.Order.CompleteBooleanAlgebra</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A frame, aka complete Heyting algebra, is a complete lattice whose `⊓` distributes over `⨆`. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">Order.Frame</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">CompleteLattice</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">inf_supₛ_le_sup</span><span class=\"bp\">ᵢ</span><span class=\"n\">_inf</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">supₛ</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"bp\">⨆</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">order.frame</span> <span class=\"n\">Order.Frame</span>\n\n<span class=\"bp\">...</span>\n\n<span class=\"sd\">/-- A coframe, aka complete Brouwer algebra or complete co-Heyting algebra, is a complete lattice</span>\n<span class=\"sd\">whose `⊔` distributes over `⨅`. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">Order.Coframe</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">CompleteLattice</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">inf</span><span class=\"bp\">ᵢ</span><span class=\"n\">_sup_le_sup_infₛ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⨅</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">infₛ</span> <span class=\"n\">s</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">order.coframe</span> <span class=\"n\">Order.Coframe</span>\n</code></pre></div>\n<p>(both classes now extend <code>LE</code>) makes the file compile very quickly. Prior to this change, the three instances of <code>CompleteDistribLattice</code> defined on lines 264, 267 and 360 each took around 5 seconds of wall clock time to compile (if someone could tell me how to profile a declaration I'd be very interested BTW). With the change they're not obviously any slower than any of the other declarations. What is going on?</p>",
        "id": 318185702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672193554
    },
    {
        "content": "<p>Is there a similar simple change which makes <a href=\"https://github.com/leanprover-community/mathlib4/blob/9f5137938b93a675dbcf4589fd43709369082d64/Mathlib/Algebra/Order/Positive/Field.lean#L42-L46\">this</a> instance in mathlib not need max heartbeats raised to over 300000?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">304000</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrderedCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">Positive.Subtype.inv</span><span class=\"o\">,</span> <span class=\"n\">Positive.linearOrderedCancelCommMonoid</span> <span class=\"k\">with</span>\n    <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Subtype.ext</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">inv_mul_cancel</span> <span class=\"n\">a.2.ne'</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 318186650,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672194498
    },
    {
        "content": "<p>So it sounds like the optimization is to directly extend the notation classes (making them new-style extensions), but then extend all the algebraic structures last (resulting in the fields being manually copied)</p>",
        "id": 318208862,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672214700
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Performance.20issue.20with.20.60CompleteBooleanAlgebra.60/near/318185213\">said</a>:</p>\n<blockquote>\n<p>Should these definitions be changed in mathlib master for some reason?</p>\n</blockquote>\n<p>This change is effectively already there in mathlib3 master (in a slightly stronger form than needed in lean 4) due to <code>old_structure_cmd</code></p>",
        "id": 318219648,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672219834
    },
    {
        "content": "<p>I minimised the <code>LinearOrderedCommGroup</code> slow instance (the one where we have to increase the heartbeats to over 300000) because it's Christmas. The mathlib-free minimisation is <a href=\"https://gist.github.com/kbuzzard/d069121d36a3210bfeaaea33d6391c27\">here</a>. The actual issue in mathlib where we increase the heartbeats is <a href=\"https://github.com/leanprover-community/mathlib4/blob/489f10454a7ae53fdc6a95d2ac237cbc20e69b36/Mathlib/Algebra/Order/Positive/Field.lean#L42-L46\">here</a>. The minimisation is too long to post on Zulip. It took me ages to construct. It would be really nice to have a machine which helped to minimise these things. I don't yet know a workaround.</p>",
        "id": 318353503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672283672
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <a href=\"https://github.com/leanprover-community/mathlib4/pull/1283\">mathlib4#1283</a> also has weird performance issues, would you be interested in looking at it?  This is something that fails slowly rather than succeeding slowly so it is not necessarily the same problem.</p>",
        "id": 319019205,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672675523
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">~/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">build</span> <span class=\"bp\">+</span><span class=\"n\">Mathlib.Algebra.Module.Pi</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Regular</span><span class=\"bp\">/</span><span class=\"n\">Smul.lean</span>\n</code></pre></div>",
        "id": 319022082,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672676562
    },
    {
        "content": "<p>Oh, someone renamed recently, <code>Smul</code> to <code>SMul</code>, and I didn't update after merging master.  Sorry!</p>",
        "id": 319024404,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672677549
    },
    {
        "content": "<p>Now the file is full of errors for me :-(</p>",
        "id": 319028172,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672679300
    },
    {
        "content": "<p>Indeed, I only barely started porting the file.  But it was the (erroring) instance <code>mulActionWithZero</code> that I wanted to ask about.</p>",
        "id": 319029103,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672679728
    },
    {
        "content": "<p>I sorried out some proofs which were causing trouble. On my file (which might not be the same as yours) this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">mulActionWithZero</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MonoidWithZero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n    <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">MulActionWithZero</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">MulActionWithZero</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">MulActionWithZero.mk</span> <span class=\"o\">(</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smulWithZero</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">smul_zero</span> <span class=\"o\">(</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smulWithZero</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">zero_smul</span>\n</code></pre></div>\n<p>is quick if you just want a cheap workaround</p>",
        "id": 319029110,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672679734
    },
    {
        "content": "<p>Do you know why it takes so long to fail?</p>",
        "id": 319029211,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672679787
    },
    {
        "content": "<p>The issue feels to me to be similar to <a href=\"https://github.com/leanprover/lean4/issues/1986\">https://github.com/leanprover/lean4/issues/1986</a> : for example (from that issue)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">completeDistribLattice''</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">CompleteDistribLattice</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">CompleteDistribLattice</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">frame</span><span class=\"o\">,</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">coframe</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>takes a long time and looks kind of the same. I had expected it to succeed though if given long enough so maybe it's not the same (I let it run for ages and it didn't succeed)</p>",
        "id": 319029310,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672679858
    },
    {
        "content": "<p>Actually,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">mulActionWithZero</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MonoidWithZero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n    <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">MulActionWithZero</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">MulActionWithZero</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">mulAction</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smulWithZero</span> <span class=\"n\">α</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>makes it succeed and succeed fast.  Weird!</p>",
        "id": 319029324,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672679865
    },
    {
        "content": "<p>I just came back to tell you this and you'd got there first!</p>",
        "id": 319029743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672680094
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/1BcssMQI8WrN0EyFoPGEE6hZ/instances.png\">instances.png</a><br>\nIt seems to me that typeclass inference does actually get into a loop</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/1BcssMQI8WrN0EyFoPGEE6hZ/instances.png\" title=\"instances.png\"><img src=\"/user_uploads/3121/1BcssMQI8WrN0EyFoPGEE6hZ/instances.png\"></a></div>",
        "id": 319031339,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672680943
    },
    {
        "content": "<p>Ugh.  We should make a mwe, I can't do it today (but if you can, feel free!)</p>",
        "id": 319031496,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672681029
    },
    {
        "content": "<p>I'll do it because the thing I'm supposed to be doing is even more boring!</p>",
        "id": 319031702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672681144
    },
    {
        "content": "<p>By the way,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">{</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">mulAction</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smulWithZero</span> <span class=\"n\">α</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>also succeeds fast, so it's just the <code>Pi.smulWithZero</code> that has issues.</p>",
        "id": 319032021,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672681274
    },
    {
        "content": "<p>What am I doing wrong here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.SMulWithZero</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">SMulWithZero</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">SMulZeroClass</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"c1\">-- works fine</span>\n\n<span class=\"kd\">instance</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smulWithZero</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">SMulWithZero</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"n\">SMulWithZero</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">instSMul</span> <span class=\"k\">with</span>\n    <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">funext</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">SMulZeroClass.smul_zero</span> <span class=\"n\">a</span> <span class=\"c1\">-- fails with error</span>\n    <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">    failed to synthesize instance</span>\n<span class=\"cm\">    SMulZeroClass α (f i)</span>\n<span class=\"cm\">    -/</span>\n    <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 319036815,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672683781
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">funext</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">SMulZeroClass.smul_zero</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"c1\">-- works :-/</span>\n</code></pre></div>\n<p>I don't have a good mental model for why this is failing. Help!</p>",
        "id": 319037159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672683966
    },
    {
        "content": "<p>Regardless of that issue, I've minimised:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Zero.toOfNat0</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"o\">‹</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">›</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Zero.ofOfNat0</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">0</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">One.toOfNat1</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"o\">‹</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">›</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">One.ofOfNat1</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">One</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Nontrivial</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">exists_pair_ne</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MulZeroClass</span> <span class=\"o\">(</span><span class=\"n\">M₀</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">M₀</span><span class=\"o\">,</span> <span class=\"n\">Zero</span> <span class=\"n\">M₀</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M₀</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">mul_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M₀</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddSemigroup</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Add</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- Addition is associative -/</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Semigroup</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">CommSemigroup</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Semigroup</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddCommSemigroup</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">AddSemigroup</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">SemigroupWithZero</span> <span class=\"o\">(</span><span class=\"n\">S₀</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Semigroup</span> <span class=\"n\">S₀</span><span class=\"o\">,</span> <span class=\"n\">MulZeroClass</span> <span class=\"n\">S₀</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MulOneClass</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">One</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">Mul</span> <span class=\"n\">M</span> <span class=\"n\">where</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddZeroClass</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">Add</span> <span class=\"n\">M</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MulZeroOneClass</span> <span class=\"o\">(</span><span class=\"n\">M₀</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">MulOneClass</span> <span class=\"n\">M₀</span><span class=\"o\">,</span> <span class=\"n\">MulZeroClass</span> <span class=\"n\">M₀</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddMonoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">AddSemigroup</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">AddZeroClass</span> <span class=\"n\">M</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Semigroup</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">MulOneClass</span> <span class=\"n\">M</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MonoidWithZero</span> <span class=\"o\">(</span><span class=\"n\">M₀</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Monoid</span> <span class=\"n\">M₀</span><span class=\"o\">,</span> <span class=\"n\">MulZeroOneClass</span> <span class=\"n\">M₀</span><span class=\"o\">,</span> <span class=\"n\">SemigroupWithZero</span> <span class=\"n\">M₀</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">SMul</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">HSMul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">hSMul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instHSMul</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HSMul</span> <span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">hSMul</span> <span class=\"o\">:=</span> <span class=\"n\">SMul.smul</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">73</span> <span class=\"s2\">\" • \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">HSMul.hSMul</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MulAction</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">SMul</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">one_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">y</span> <span class=\"bp\">•</span> <span class=\"n\">b</span>\n\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MulActionWithZero</span> <span class=\"o\">[</span><span class=\"n\">MonoidWithZero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">MulAction</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">where</span>\n  <span class=\"c1\">-- these fields are copied from `SMulWithZero`, as `extends` behaves poorly</span>\n  <span class=\"sd\">/-- Scalar multiplication by any element send `0` to `0`. -/</span>\n  <span class=\"n\">smul_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"sd\">/-- Scalar multiplication by the scalar `0` is `0`. -/</span>\n  <span class=\"n\">zero_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"sd\">/-- Typeclass for scalar multiplication that preserves `0` on the right. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">SMulZeroClass</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- Multiplying `0` by a scalar gives `0` -/</span>\n  <span class=\"n\">smul_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">SMulWithZero</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">SMulZeroClass</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- Scalar multiplication by the scalar `0` is `0`. -/</span>\n  <span class=\"n\">zero_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"n\">MulActionWithZero.toSMulWithZero</span> <span class=\"o\">[</span><span class=\"n\">MonoidWithZero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">MulActionWithZero</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">SMulWithZero</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"k\">Pi</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instZero</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Zero</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">M</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instSMul</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">smulWithZero</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">SMulWithZero</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"n\">SMulWithZero</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">instSMul</span> <span class=\"k\">with</span>\n    <span class=\"c1\">-- Next line fails without @ -- \"faied to synthesize instance `SMulZeroClass α (f i)`\"</span>\n    <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">funext</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">SMulZeroClass.smul_zero</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">a</span>\n    <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">funext</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">SMulWithZero.zero_smul</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">mulAction</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">MulAction</span> <span class=\"n\">α</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"bp\">@</span><span class=\"n\">MulAction</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">•</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n  <span class=\"n\">mul_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">funext</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">MulAction.mul_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"n\">one_smul</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">funext</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">MulAction.one_smul</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">10000</span> <span class=\"c1\">-- consider turning trace off if you make this much bigger</span>\n\n<span class=\"c1\">-- seems to be looping</span>\n<span class=\"kd\">instance</span> <span class=\"n\">mulActionWithZero</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MonoidWithZero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n    <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">MulActionWithZero</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">MulActionWithZero</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n <span class=\"o\">{</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">mulAction</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smulWithZero</span> <span class=\"n\">_</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">...</span>\n<span class=\"cm\">[Meta.synthInstance] 💥 (i : I) → SMulWithZero α (f i) ▶</span>\n\n<span class=\"cm\">[Meta.synthInstance] 💥 (i : I) → SMulWithZero α (f i) ▶</span>\n\n<span class=\"cm\">[Meta.synthInstance] 💥 (i : I) → SMulWithZero α (f i) ▶</span>\n\n<span class=\"cm\">[Meta.synthInstance] 💥 (i : I) → SMulWithZero α (f i) ▶</span>\n\n<span class=\"cm\">[Meta.synthInstance] 💥 (i : I) → SMulWithZero α (f i) ▶</span>\n\n<span class=\"cm\">[Meta.synthInstance] 💥 (i : I) → SMulWithZero α (f i) ▶</span>\n\n<span class=\"cm\">[Meta.synthInstance] 💥 (i : I) → SMulWithZero α ((fun i =&gt; f i) i) ▶</span>\n\n<span class=\"cm\">[Meta.synthInstance] ✅ (i : I) → MulAction α (f i) ▶</span>\n\n<span class=\"cm\">[Meta.synthInstance] 💥 (i : I) → SMulWithZero α ((fun i =&gt; f i) i) ▶</span>\n\n<span class=\"cm\">[Meta.synthInstance] 💥 (i : I) → SMulWithZero α ((fun i =&gt; f i) i) ▶</span>\n\n<span class=\"cm\">[Meta.synthInstance] 💥 (i : I) → SMulWithZero α ((fun i =&gt; f i) i) ▶</span>\n\n<span class=\"cm\">[Meta.synthInstance] ✅ (i : I) → MulAction α (f i) ▶</span>\n\n<span class=\"cm\">[Meta.synthInstance] 💥 (i : I) → SMulWithZero α ((fun i =&gt; f i) i) ▶</span>\n\n<span class=\"cm\">[Meta.synthInstance] 💥 (i : I) → SMulWithZero α ((fun i =&gt; f i) i) ▶</span>\n\n<span class=\"cm\">[Meta.synthInstance] 💥 (i : I) → SMulWithZero α ((fun i =&gt; f i) i) ▶</span>\n\n<span class=\"cm\">[Meta.synthInstance] ✅ (i : I) → MulAction α (f i) ▶</span>\n\n<span class=\"cm\">[Meta.synthInstance] 💥 (i : I) → SMulWithZero α ((fun i =&gt; f i) i) ▶</span>\n\n<span class=\"cm\">[Meta.synthInstance] 💥 (i : I) → SMulWithZero α ((fun i =&gt; f i) i) ▶</span>\n\n<span class=\"cm\">[Meta.synthInstance] 💥 (i : I) → SMulWithZero α ((fun i =&gt; f i) i) ▶</span>\n\n<span class=\"cm\">[Meta.synthInstance] 💥 (i : I) → SMulWithZero α ((fun i =&gt; f i) i) ▶</span>\n\n<span class=\"cm\">...</span>\n\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>I think it's not the same as <a href=\"https://github.com/leanprover/lean4/pull/1986\">lean4#1986</a> because it seems to me to be actually looping.</p>",
        "id": 319087290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672688775
    },
    {
        "content": "<p>I wonder whether the failure to synthesize <code>SMulZeroClass α (f i)</code> above is relevant.</p>",
        "id": 319087565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672688960
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/vZ3ojfJxmvjz4dd8rldT5JcZ/Screenshot-from-2023-01-02-19-54-16.png\">Screenshot-from-2023-01-02-19-54-16.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/vZ3ojfJxmvjz4dd8rldT5JcZ/Screenshot-from-2023-01-02-19-54-16.png\" title=\"Screenshot-from-2023-01-02-19-54-16.png\"><img src=\"/user_uploads/3121/vZ3ojfJxmvjz4dd8rldT5JcZ/Screenshot-from-2023-01-02-19-54-16.png\"></a></div><p>I don't understand that screenshot from the  instance trace. Lean is continually failing to find an instance of <code>SMulWithZero α (f i)</code> and I'm not really used to these new instance logs but does the attached screenshot say that type class inference is failing to solve <code>Zero α</code> because it complains \"no instances for MonoidWithZero α\" despite it being visible in the local context??</p>",
        "id": 319088376,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672689429
    },
    {
        "content": "<p>What's the difference between an explosion and an X emoji?</p>",
        "id": 319088421,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672689464
    },
    {
        "content": "<p>The dramatic effect. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 319088537,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672689513
    },
    {
        "content": "<p>Basically what does this red X mean here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">💥</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SMulWithZero</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SMulWithZero</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">💥</span> <span class=\"n\">apply</span> <span class=\"n\">MulActionWithZero.toSMulWithZero</span> <span class=\"n\">to</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SMulWithZero</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">💥</span> <span class=\"n\">SMulWithZero</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">≟</span> <span class=\"n\">SMulWithZero</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.13709</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.13710</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">Zero</span> <span class=\"n\">α</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">MonoidWithZero</span> <span class=\"n\">α</span> <span class=\"bp\">▶</span>\n</code></pre></div>\n<p>It unfolds to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">Zero</span> <span class=\"n\">α</span> <span class=\"bp\">▼</span>\n        <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">Zero</span> <span class=\"n\">α</span> <span class=\"bp\">▶</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">MonoidWithZero.toZero</span> <span class=\"n\">to</span> <span class=\"n\">Zero</span> <span class=\"n\">α</span> <span class=\"bp\">▶</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">AddMonoid.toZero</span> <span class=\"n\">to</span> <span class=\"n\">Zero</span> <span class=\"n\">α</span> <span class=\"bp\">▶</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">MulZeroOneClass.toZero</span> <span class=\"n\">to</span> <span class=\"n\">Zero</span> <span class=\"n\">α</span> <span class=\"bp\">▶</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">MonoidWithZero.toMulZeroOneClass</span> <span class=\"n\">to</span> <span class=\"n\">MulZeroOneClass</span> <span class=\"n\">α</span> <span class=\"bp\">▶</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">AddZeroClass.toZero</span> <span class=\"n\">to</span> <span class=\"n\">Zero</span> <span class=\"n\">α</span> <span class=\"bp\">▶</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">AddMonoid.toAddZeroClass</span> <span class=\"n\">to</span> <span class=\"n\">AddZeroClass</span> <span class=\"n\">α</span> <span class=\"bp\">▶</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">SemigroupWithZero.toZero</span> <span class=\"n\">to</span> <span class=\"n\">Zero</span> <span class=\"n\">α</span> <span class=\"bp\">▶</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">MonoidWithZero.toSemigroupWithZero</span> <span class=\"n\">to</span> <span class=\"n\">SemigroupWithZero</span> <span class=\"n\">α</span> <span class=\"bp\">▶</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">MulZeroClass.toZero</span> <span class=\"n\">to</span> <span class=\"n\">Zero</span> <span class=\"n\">α</span> <span class=\"bp\">▶</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">MulZeroOneClass.toMulZeroClass</span> <span class=\"n\">to</span> <span class=\"n\">MulZeroClass</span> <span class=\"n\">α</span> <span class=\"bp\">▶</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">SemigroupWithZero.toMulZeroClass</span> <span class=\"n\">to</span> <span class=\"n\">MulZeroClass</span> <span class=\"n\">α</span> <span class=\"bp\">▶</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Zero.ofOfNat0</span> <span class=\"n\">to</span> <span class=\"n\">Zero</span> <span class=\"n\">α</span> <span class=\"bp\">▶</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Zero.toOfNat0</span> <span class=\"n\">to</span> <span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"mi\">0</span> <span class=\"bp\">▶</span>\n</code></pre></div>\n<p>Why does a fistful of ticks lead to a cross?</p>",
        "id": 319088719,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672689641
    },
    {
        "content": "<p>Are those <code>▶</code>s things you can unfold further? maybe there are subsequent failures on those branches?</p>",
        "id": 319089904,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672690316
    },
    {
        "content": "<p>though I don't understand that because it looks like e.g. <code>apply @MonoidWithZero.toMulZeroOneClass to MulZeroOneClass α</code> arose from the previous line</p>",
        "id": 319089981,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672690337
    },
    {
        "content": "<p>Yes you can unfold them all; in my screenshot I unfold one of the ticks and it looks like it's failing with \"no instances for MonoidWithZero alpha\" despite there being one in the local context.</p>",
        "id": 319090023,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672690365
    },
    {
        "content": "<p>I posted the mathlib-free MWE above if you want to experiment.</p>",
        "id": 319090081,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672690402
    },
    {
        "content": "<p>Well that's odd</p>",
        "id": 319090672,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672690795
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/wrhk72aoGrdaQY-v6h0JilTW/Screenshot-from-2023-01-02-20-21-51.png\">Screenshot-from-2023-01-02-20-21-51.png</a> <br>\nIt's right there on your left Lean!</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/wrhk72aoGrdaQY-v6h0JilTW/Screenshot-from-2023-01-02-20-21-51.png\" title=\"Screenshot-from-2023-01-02-20-21-51.png\"><img src=\"/user_uploads/3121/wrhk72aoGrdaQY-v6h0JilTW/Screenshot-from-2023-01-02-20-21-51.png\"></a></div>",
        "id": 319090920,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672690937
    },
    {
        "content": "<p>Wow, this is crazy.  Thanks for minimizing Kevin.</p>",
        "id": 319094211,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672693113
    }
]