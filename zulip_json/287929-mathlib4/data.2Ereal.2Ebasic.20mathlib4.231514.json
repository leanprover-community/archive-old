[
    {
        "content": "<p>I probably won't have much time today, so if anyone wants to help with <a href=\"https://github.com/leanprover-community/mathlib4/pull/1514\">mathlib4#1514</a>, go ahead!</p>",
        "id": 321113732,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673602024
    },
    {
        "content": "<p>I got it building except that (locally) I sorried all the proofs in the CommRing instance.<br>\nSomewhat inclined to just manually port the new proof from <a href=\"https://github.com/leanprover-community/mathlib/pull/8146\">#8146</a></p>",
        "id": 321149613,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673613309
    },
    {
        "content": "<p>presumably a version of <a href=\"https://github.com/leanprover-community/mathlib/pull/8146\">#8146</a> that doesn't change the defeq of pow?</p>",
        "id": 321155468,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673614931
    },
    {
        "content": "<p>Or has your opinion changed in between the comment there and the comment here?</p>",
        "id": 321155624,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673614982
    },
    {
        "content": "<p>Right, I was trying to figure out what my opinion was about smul</p>",
        "id": 321156192,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673615157
    },
    {
        "content": "<p>The timeouts in that PR are currently caused by the smul change, but it's not clear to me whether the problem is the defeq change or the syntactic change</p>",
        "id": 321156600,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673615252
    },
    {
        "content": "<p>I haven't yet had a chance to fix them, but I know how to fix the problem if it's syntactic</p>",
        "id": 321156858,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673615317
    },
    {
        "content": "<p>I think my opinion about <code>smul</code> is it's reasonable to change the definition, but maybe more practical not to.</p>",
        "id": 321168814,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673618612
    },
    {
        "content": "<p>I added a construction of CommRing in the style of <a href=\"https://github.com/leanprover-community/mathlib/pull/8146\">#8146</a> but now the rest of the file is very slow/timing out.<br>\nMaybe related to <a href=\"https://github.com/leanprover/lean4/pull/2003\">lean4#2003</a>?</p>",
        "id": 321199942,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673626572
    },
    {
        "content": "<p>I'm not going to have time to work on this over the weekend, so someone else should feel free to take over.</p>",
        "id": 321200039,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673626604
    },
    {
        "content": "<p>Can we write the construction of <code>CommRing</code> instance (and maybe others) in a workaround manner so that the file speeds up again?</p>",
        "id": 321570881,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673850962
    },
    {
        "content": "<p>It seems like I managed to fix everything except the very last theorem <code>cauSeq_converges</code> which gets lost on the first line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>If anyone want to take a look, please go ahead</p>",
        "id": 321595327,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673861450
    },
    {
        "content": "<p>I'm gonna try merging master, who knows</p>",
        "id": 321595625,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673861533
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/data.2Ereal.2Ebasic.20mathlib4.231514/near/321595625\">said</a>:</p>\n<blockquote>\n<p>I'm gonna try merging master, who knows</p>\n</blockquote>\n<p>Did not help</p>",
        "id": 321596974,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673861932
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/data.2Ereal.2Ebasic.20mathlib4.231514/near/321595327\">said</a>:</p>\n<blockquote>\n<p>It seems like I managed to fix everything except the very last theorem <code>cauSeq_converges</code> which gets lost on the first line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>If anyone want to take a look, please go ahead</p>\n</blockquote>\n<p>What's the error there? I ran into an error on that line in mathlib 3 after a refactor</p>",
        "id": 321601840,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673863539
    },
    {
        "content": "<p>The solution was to add <code>one := 1</code> etc explicitly</p>",
        "id": 321601952,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673863565
    },
    {
        "content": "<p>Times out</p>",
        "id": 321601953,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673863567
    },
    {
        "content": "<p>I redid the definition of <code>CommRing</code> in the original style and now the rest of the file is fine</p>",
        "id": 321688226,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673889765
    },
    {
        "content": "<p>Johan and I looked into the timeouts today, they were complicated, but definitely related in part to <a href=\"https://github.com/leanprover/lean4/pull/2003\">lean4#2003</a></p>",
        "id": 321688326,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673889805
    },
    {
        "content": "<p>It seems that Lean has a much easier time unifying instances when they are syntactically constructors, rather than complicated function things (even though there is no apparent reason why this should matter)</p>",
        "id": 321688449,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673889844
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Data.Real.Basic is now passing except for the test file; I think you mentioned something about this somewhere?</p>",
        "id": 321695775,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673892854
    },
    {
        "content": "<p>I think it's a trivial syntax error</p>",
        "id": 321696318,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673893087
    },
    {
        "content": "<p>The thing I mentioned before was fixed by adding the <code>unsafe</code> keyword</p>",
        "id": 321696348,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673893096
    },
    {
        "content": "<p>ah ok</p>",
        "id": 321696568,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673893189
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/287929-mathlib4/topic/data.2Ereal.2Ebasic.20mathlib4.231514/near/321688449\">said</a>:</p>\n<blockquote>\n<p>It seems that Lean has a much easier time unifying instances when they are syntactically constructors, rather than complicated function things (even though there is no apparent reason why this should matter)</p>\n</blockquote>\n<p>Maybe this is the <a href=\"https://github.com/leanprover/lean4/pull/2003\">lean4#2003</a> issue again?<br>\n<a href=\"#narrow/stream/287929-mathlib4/topic/port.20benchmark/near/320915653\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/port.20benchmark/near/320915653</a><br>\ncc <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span></p>",
        "id": 321717380,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673902867
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/287929-mathlib4/topic/data.2Ereal.2Ebasic.20mathlib4.231514/near/321688449\">said</a>:</p>\n<blockquote>\n<p>It seems that Lean has a much easier time unifying instances when they are syntactically constructors, rather than complicated function things (even though there is no apparent reason why this should matter)</p>\n</blockquote>\n<p>In lean 3 we had this issue too , and solved it with <code>{ one := 1, .. fancy_constructor }</code>. Did that not work when porting this file?</p>",
        "id": 321717612,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673903006
    },
    {
        "content": "<p>Or phrased another way; is that not syntactically a constructor?</p>",
        "id": 321717652,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673903032
    },
    {
        "content": "<p>hmm I only tried the <code>where one := 1; __ := fancy_constructor</code> form</p>",
        "id": 321717970,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673903206
    },
    {
        "content": "<p>Does <code>__</code> mean something different?</p>",
        "id": 321718411,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673903507
    },
    {
        "content": "<p>I don't know</p>",
        "id": 321718808,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673903745
    },
    {
        "content": "<p>there's too many of these notations</p>",
        "id": 321718817,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673903750
    },
    {
        "content": "<p>also <code>with</code></p>",
        "id": 321719038,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673903876
    },
    {
        "content": "<p><code>__ := s</code> should be identical to using <code>s with</code>, it's a mathlib/std addition to instance syntax to allow using the <code>s with</code> notation in <code>where</code> blocks</p>",
        "id": 321724540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673906900
    },
    {
        "content": "<p><code>.. s</code> is gone, but you can write <code>{ s, t with }</code> if you want to mix multiple sources into an instance</p>",
        "id": 321724561,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673906915
    },
    {
        "content": "<p>And all of these desugar to constructor applications?</p>",
        "id": 321731302,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673911164
    },
    {
        "content": "<p>In this file, a whole bunch of instances got named, even though there were no names in the mathport output.</p>",
        "id": 321775016,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673943625
    },
    {
        "content": "<p>Is that intentional? Should we do it consistently?</p>",
        "id": 321775034,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673943634
    },
    {
        "content": "<p>Or shall we remove all the names again?</p>",
        "id": 321775052,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673943640
    },
    {
        "content": "<p>(I just pushed a fix for the test in <code>test/Real</code>. So I hope this will be ready to go in the nearish future.)</p>",
        "id": 321775111,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673943667
    },
    {
        "content": "<p>CI is happy now</p>",
        "id": 321777284,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673944531
    },
    {
        "content": "<p><code>where [...] __ := s</code> desugared to a let</p>",
        "id": 321777499,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673944596
    },
    {
        "content": "<p>I probably named them because they were referred to by name and the autogenerated ones can get ridiculous (or if they were near other instances I was naming)</p>",
        "id": 321777581,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673944629
    },
    {
        "content": "<p>I'm reviewing now</p>",
        "id": 321780399,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673945692
    },
    {
        "content": "<p>Good to go, I think</p>",
        "id": 321781143,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673945981
    }
]