[
    {
        "content": "<p>In mathlib3 we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">prefix</span> <span class=\"bp\">`!`</span><span class=\"o\">:</span><span class=\"mi\">90</span> <span class=\"o\">:=</span> <span class=\"n\">bnot</span>\n</code></pre></div>\n<p>In core Lean 4 we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[inheritDoc]</span> <span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"!\"</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"mi\">40</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">not</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>and as a result the following works in Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.bool.basic</span> <span class=\"c1\">-- just for ! notation</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bnot_not_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">},</span> <span class=\"bp\">¬!</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">dec_trivial</span><span class=\"bp\">`</span> <span class=\"n\">works</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bnot_ne</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">!</span><span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">bnot_not_eq</span>\n</code></pre></div>\n<p>but in Lean 4 this doesn't work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Init.Notation</span> <span class=\"c1\">-- for ! notation</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bnot_not_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">},</span> <span class=\"bp\">¬!</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bnot_ne</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">!</span><span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">bnot_not_eq</span> <span class=\"c1\">-- fails</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch</span>\n<span class=\"cm\">  bnot_not_eq</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  ¬(!decide (?m.238 = ?m.239)) = true ↔ ?m.238 = ?m.239 : Prop</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  (!decide (a ≠ b)) = true ↔ a = b : Prop</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>because things are being parsed differently. What do I do?</p>",
        "id": 305405669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666372475
    },
    {
        "content": "<p>mathport should be inserting parentheses as necessary to make the definition work out with the new precedences. You should also put in parentheses where necessary to make the statement equivalent to the lean 3 version</p>",
        "id": 305440887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666385578
    },
    {
        "content": "<p>although if you think the precedence change is in error you could also open an issue on lean 4</p>",
        "id": 305440945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666385597
    }
]