[
    {
        "content": "<p>Could we tone down the <code>unusedVariables</code> linter? It forbids me naming a variable I don't call by name even if it appears in other hypotheses.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"bp\">↦</span> <span class=\"n\">ha</span>\n<span class=\"c1\">-- unused variable `a` [linter.unusedVariables]</span>\n</code></pre></div>\n<p>I think that's a reasonable use case, as naming the variable makes the infoview nicer.</p>",
        "id": 319600501,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672929895
    },
    {
        "content": "<p>I think you're intended to use a name that starts with an underscore if you want to name an unused variable.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_a</span> <span class=\"n\">ha</span> <span class=\"bp\">↦</span> <span class=\"n\">ha</span>\n</code></pre></div>",
        "id": 319610416,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1672932760
    },
    {
        "content": "<p>I really don't like this <code>unusedVariables</code> linter for the following reasons.</p>\n<ul>\n<li>It makes the tactic state much less readable if I revisit a proof.</li>\n<li>Sometimes the names of variables gives information about the role they play. e.g. <code>hx</code> is about <code>x</code> and <code>G</code> is a group. </li>\n<li>Now that we have can give implicit arguments explicitly with <code>List.nil (α := G)</code>, we should try to make sure the names are nice.</li>\n<li>Although we can use underscores to name variables, $things£ _are _more_ -difficult'' to_ _read_ -with +-punctuation_ &amp;everywhere'</li>\n<li>We don't gain anything by using underscores.</li>\n</ul>\n<p>What do other people think?</p>",
        "id": 322771804,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1674329632
    },
    {
        "content": "<p>I think that maybe it should have an option so that it only complains about genuinely unused variables, like the mathlib3 linter.</p>",
        "id": 322772087,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674329818
    },
    {
        "content": "<p>A variable is not unused if it appears implicitly.</p>",
        "id": 322772111,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674329843
    },
    {
        "content": "<p>by using underscores do you mean using <code>_G</code> instead of <code>G</code> for unused variables to turn off the lint?</p>",
        "id": 322772310,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674329994
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/287929-mathlib4/topic/unusedVariables/near/322772310\">said</a>:</p>\n<blockquote>\n<p>by using underscores do you mean using <code>_G</code> instead of <code>G</code> for unused variables to turn off the lint?</p>\n</blockquote>\n<p>Yes</p>",
        "id": 322772350,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1674330004
    },
    {
        "content": "<p>My feeling when writing lean 3 code is that sometimes I'm very happy to put in the <code>_</code>s and sometimes I just want to put in the variable names even if they're not needed, because I've used g and h above so many times and I want to call them g and h again in the code even if the unification algorithm can figure them out.</p>",
        "id": 322772451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674330100
    },
    {
        "content": "<p>for programming it's a pretty essential lint, but I can see mathlib wanting to turn it off/make it less aggressive</p>",
        "id": 322772529,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674330144
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span> can you explain why it is essential in its current form?</p>",
        "id": 322772823,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674330341
    },
    {
        "content": "<p>Example: when you're programming with side-effects inside some stateful monad, you may forget to do something with a variable that's provided to the function. The linter is a straightforward mitigation of such issue</p>",
        "id": 322774517,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674331497
    },
    {
        "content": "<p>This is a real example: we had a hidden bug that we hadn't seen until this linter came up. We were encoding data from some types into a generic data format. Suppose you have <code>inductive X | x : Nat -&gt; Nat -&gt; X</code> and you want to put those two <code>Nat</code>s inside an array like <code>#[.nat a, .nat b]</code>. We simply forgot to add <code>b</code> and the linter flagged that <code>b</code> wasn't being used for anything.</p>\n<p>The actual example wasn't so simple, so it was hard to see with the naked eye. But the computer sees everything <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 322774961,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674331799
    },
    {
        "content": "<p>I don't think this really applies in mathlib then I guess, unless they're genuinely not used at all even implicitly. We don't have bugs because we prove everything and definitions tend not to be very long anyway.</p>",
        "id": 322777817,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1674334044
    },
    {
        "content": "<p>Yes, I recall finding at least 3 issues when we first applied the linter to mathlib. It wasn't only meta stuff, some defs were wrong too</p>",
        "id": 322778387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674334446
    },
    {
        "content": "<p>also unused haves</p>",
        "id": 322778410,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674334463
    },
    {
        "content": "<p>I think it is a valuable lint, even for mathlib</p>",
        "id": 322778441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674334494
    },
    {
        "content": "<blockquote>\n<p>We don't have bugs because we prove everything</p>\n</blockquote>\n<p>This is not really true, I've written about this elsewhere. We don't prove everything either, and what about the theorems themselves? We don't prove that the statements are done correctly so some sanity checking is good</p>",
        "id": 322778709,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674334723
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/unusedVariables/near/322778387\">said</a>:</p>\n<blockquote>\n<p>Yes, I recall finding at least 3 issues when we first applied the linter to mathlib. It wasn't only meta stuff, some defs were wrong too</p>\n</blockquote>\n<p>What were the issues?</p>",
        "id": 322780921,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1674336638
    },
    {
        "content": "<p>referring to the wrong / a shadowed variable in definitions usually</p>",
        "id": 322780943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674336666
    },
    {
        "content": "<p>I didn't keep track, I can dig them up</p>",
        "id": 322780954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674336682
    },
    {
        "content": "<p>So the actual <code>a</code> was genuinely unused and not used implicitly?</p>",
        "id": 322780962,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1674336702
    },
    {
        "content": "<p>yes</p>",
        "id": 322780967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674336708
    },
    {
        "content": "<p>if it is used implicitly it will usually not be marked by the linter</p>",
        "id": 322780971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674336720
    },
    {
        "content": "<p>The lean4 linter does trigger for variables used implicitly.</p>",
        "id": 322781031,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1674336751
    },
    {
        "content": "<p>I'm all for the linter in the case where the variables are not used at all.</p>",
        "id": 322781048,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1674336777
    },
    {
        "content": "<p>For most of the issues you flagged above, you should just use leading underscore</p>",
        "id": 322781059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674336787
    },
    {
        "content": "<p>But that makes it less readable. This is important. What do we gain with this linter?</p>",
        "id": 322781077,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1674336819
    },
    {
        "content": "<p>I disagree that this conveys no useful information - it says that the variable is intentionally unused</p>",
        "id": 322781084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674336829
    },
    {
        "content": "<p>once you know what it means it's not particularly hard to read</p>",
        "id": 322781129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674336853
    },
    {
        "content": "<p>the point of the linter is to have an extra check on unused variables, saying \"are you sure you wanted to ignore this variable?\"</p>",
        "id": 322781181,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674336916
    },
    {
        "content": "<p>because in a not insignificant fraction of cases this is a symptom of a mistake or bug</p>",
        "id": 322781193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674336947
    },
    {
        "content": "<p>When porting we just use a script to get rid of the errors so I'm not sure we think about if we did want to ignore it</p>",
        "id": 322781249,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1674336966
    },
    {
        "content": "<p>I would not use that script until at least glancing over the warnings to make sure that they are what I wanted</p>",
        "id": 322781268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674337015
    },
    {
        "content": "<p>We just don't have time for that when porting. A lot of the time I port without understanding stuff very much. I can't usefully perform this check.</p>",
        "id": 322781408,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1674337133
    },
    {
        "content": "<p>but the chances of real issues in ported code is somewhat lower than new code</p>",
        "id": 322781423,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674337146
    },
    {
        "content": "<p>so in this particular case I am more okay than I would normally be with auto-fixing unused variable warnings</p>",
        "id": 322781532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674337254
    },
    {
        "content": "<p>for a lot of warning classes it defeats the point to auto-fix them without any human intervention</p>",
        "id": 322781596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674337317
    },
    {
        "content": "<p>(some warning classes like <code>unnecessarySeqFocus</code> can totally be auto-fixed and aren't right now only because of tooling limitations)</p>",
        "id": 322781664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674337361
    },
    {
        "content": "<p>Actually, that one is auto-fixed by <code>./scripts/fix-lints.py</code>.</p>",
        "id": 322818230,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674370441
    }
]