[
    {
        "content": "<p>I haven't thought about mathlib4 for a while but now my teaching for this term is quietening down I wanted to see the state of mathlib4; but I don't know how to get it running any more. I don't know what a lakefile is etc. I've pulled from origin and now I just seem to have orange bars. Can someone get me back up to speed? Maybe it would be good to have a brief description in the README about how to get this package running, or perhaps a link to the relevant docs in the lean 4 ecosystem, if such docs exist? Sorry for such a noob question. I don't even know how to compile oleans -- <code>lean --make src</code> doesn't seem to work any more (and might never have done with Lean 4, I don't remember what little I knew over the summer when I was writing Lean 4 code).</p>",
        "id": 259170810,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635287155
    },
    {
        "content": "<p><code>lake build</code> should be all you need. I will write some README later today.</p>",
        "id": 259170933,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1635287232
    },
    {
        "content": "<p>You may want to check your VSCode Lean4 extension is up to date as well, as it changed a bit when <code>lake</code> came along.</p>",
        "id": 259170983,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1635287272
    },
    {
        "content": "<p>Oh many thanks for the prompt response! I'll see if I have <code>lake</code></p>",
        "id": 259171185,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635287361
    },
    {
        "content": "<p>I suspect there is not a lot of hand-porting to be done at the moment; although I think feel free to do some for practice! Really tactics are what mathlib4 needs at the moment.</p>",
        "id": 259171232,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1635287384
    },
    {
        "content": "<p>Unfortunately at the moment <code>mathport</code> takes a few hours to run, although it is close to up-to-date with mathlib4, and the build process has been simplified in the last few days. I'm hoping soon to have CI for mathport, and easily downloaded artifacts, so the barrier to looking at what it produces can be much lower. That said, what it produces is still full of errors. :-)</p>",
        "id": 259171431,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1635287507
    },
    {
        "content": "<p>I get <code>command 'lake' not found</code> as I suspected I would -- where do I get this?</p>",
        "id": 259171706,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635287661
    },
    {
        "content": "<p>I had to re-install <code>elan</code> to get it to work</p>",
        "id": 259171725,
        "sender_full_name": "David Renshaw",
        "timestamp": 1635287677
    },
    {
        "content": "<p>As for the extension, VS Code seems to be telling me I have v0.0.41. Is this the right version? I don't know how to check. I don't know anything :-)</p>",
        "id": 259171788,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635287753
    },
    {
        "content": "<p>Aah great, <code>elan update</code> has given me <code>lake</code></p>",
        "id": 259171899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635287819
    },
    {
        "content": "<p>woohoo I'm up and running! Thanks Scott and David!</p>",
        "id": 259171927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635287845
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/getting.20mathlib.20running/near/259171788\">said</a>:</p>\n<blockquote>\n<p>As for the extension, VS Code seems to be telling me I have v0.0.41. Is this the right version? I don't know how to check. I don't know anything :-)</p>\n</blockquote>\n<p>A decent lazy way to answer this is to check that the last version on the vscode lean releases page matches: <a href=\"https://github.com/leanprover/vscode-lean4/releases\">https://github.com/leanprover/vscode-lean4/releases</a></p>\n<p>(It does, so you're good!)</p>",
        "id": 259173738,
        "sender_full_name": "Julian Berman",
        "timestamp": 1635289171
    },
    {
        "content": "<p>mathlib4 doesn't build on latest Lean4 at the minute correct? I know its lean-toolchain file lists an earlier version, so that's me being lazy, but just to be sure, I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"bp\">/</span><span class=\"n\">opt</span><span class=\"bp\">/</span><span class=\"n\">homebrew</span><span class=\"bp\">/</span><span class=\"n\">Cellar</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">@</span><span class=\"mi\">4</span><span class=\"bp\">/</span><span class=\"n\">HEAD</span><span class=\"bp\">-</span><span class=\"n\">d5e05f3</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lean</span> <span class=\"bp\">-</span><span class=\"n\">R</span> <span class=\"bp\">./.</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">Cache.olean</span> <span class=\"bp\">././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">Cache.lean</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">/</span><span class=\"n\">opt</span><span class=\"bp\">/</span><span class=\"n\">homebrew</span><span class=\"bp\">/</span><span class=\"n\">Cellar</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">@</span><span class=\"mi\">4</span><span class=\"bp\">/</span><span class=\"n\">HEAD</span><span class=\"bp\">-</span><span class=\"n\">d5e05f3</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lean</span> <span class=\"n\">exited</span> <span class=\"k\">with</span> <span class=\"n\">status</span> <span class=\"mi\">1</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">build</span> <span class=\"n\">failed</span>\n<span class=\"bp\">././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">Cache.lean</span><span class=\"o\">:</span><span class=\"mi\">72</span><span class=\"o\">:</span><span class=\"mi\">16</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">IO.asTask</span>\n    <span class=\"o\">(</span><span class=\"n\">EIO.toIO'</span>\n      <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">metaCtx</span> <span class=\"o\">:=</span>\n        <span class=\"o\">{</span> <span class=\"n\">config</span> <span class=\"o\">:=</span>\n            <span class=\"o\">{</span> <span class=\"n\">foApprox</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">ctxApprox</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">quasiPatternApprox</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">constApprox</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n              <span class=\"n\">isDefEqStuckEx</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">transparency</span> <span class=\"o\">:=</span> <span class=\"n\">TransparencyMode.default</span><span class=\"o\">,</span> <span class=\"n\">zetaNonDep</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">trackZeta</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n              <span class=\"n\">unificationHints</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">proofIrrelevance</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">assignSyntheticOpaque</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n              <span class=\"n\">ignoreLevelMVarDepth</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">offsetCnstrs</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">},</span>\n          <span class=\"n\">lctx</span> <span class=\"o\">:=</span>\n            <span class=\"o\">{</span> <span class=\"n\">fvarIdToDecl</span> <span class=\"o\">:=</span>\n                <span class=\"o\">{</span> <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"n\">Std.PersistentHashMap.Node.entries</span> <span class=\"n\">Std.PersistentHashMap.mkEmptyEntriesArray</span><span class=\"o\">,</span> <span class=\"n\">size</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">},</span>\n              <span class=\"n\">decls</span> <span class=\"o\">:=</span>\n                <span class=\"o\">{</span> <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"n\">Std.PersistentArrayNode.node</span> <span class=\"o\">(</span><span class=\"n\">Array.mkEmpty</span> <span class=\"o\">(</span><span class=\"n\">USize.toNat</span> <span class=\"n\">Std.PersistentArray.branching</span><span class=\"o\">)),</span>\n                  <span class=\"n\">tail</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mkEmpty</span> <span class=\"o\">(</span><span class=\"n\">USize.toNat</span> <span class=\"n\">Std.PersistentArray.branching</span><span class=\"o\">),</span> <span class=\"n\">size</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n                  <span class=\"n\">shift</span> <span class=\"o\">:=</span> <span class=\"n\">Std.PersistentArray.initShift</span><span class=\"o\">,</span> <span class=\"n\">tailOff</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n          <span class=\"n\">localInstances</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[],</span> <span class=\"n\">defEqCtx</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">synthPendingDepth</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">metaState</span> <span class=\"o\">:=</span>\n        <span class=\"o\">{</span> <span class=\"n\">mctx</span> <span class=\"o\">:=</span>\n            <span class=\"o\">{</span> <span class=\"n\">depth</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">mvarCounter</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n              <span class=\"n\">lDepth</span> <span class=\"o\">:=</span>\n                <span class=\"o\">{</span> <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"n\">Std.PersistentHashMap.Node.entries</span> <span class=\"n\">Std.PersistentHashMap.mkEmptyEntriesArray</span><span class=\"o\">,</span> <span class=\"n\">size</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">},</span>\n              <span class=\"n\">decls</span> <span class=\"o\">:=</span>\n                <span class=\"o\">{</span> <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"n\">Std.PersistentHashMap.Node.entries</span> <span class=\"n\">Std.PersistentHashMap.mkEmptyEntriesArray</span><span class=\"o\">,</span> <span class=\"n\">size</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">},</span>\n              <span class=\"n\">userNames</span> <span class=\"o\">:=</span>\n                <span class=\"o\">{</span> <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"n\">Std.PersistentHashMap.Node.entries</span> <span class=\"n\">Std.PersistentHashMap.mkEmptyEntriesArray</span><span class=\"o\">,</span> <span class=\"n\">size</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">},</span>\n              <span class=\"n\">lAssignment</span> <span class=\"o\">:=</span>\n                <span class=\"o\">{</span> <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"n\">Std.PersistentHashMap.Node.entries</span> <span class=\"n\">Std.PersistentHashMap.mkEmptyEntriesArray</span><span class=\"o\">,</span> <span class=\"n\">size</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">},</span>\n              <span class=\"n\">eAssignment</span> <span class=\"o\">:=</span>\n                <span class=\"o\">{</span> <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"n\">Std.PersistentHashMap.Node.entries</span> <span class=\"n\">Std.PersistentHashMap.mkEmptyEntriesArray</span><span class=\"o\">,</span> <span class=\"n\">size</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">},</span>\n              <span class=\"n\">dAssignment</span> <span class=\"o\">:=</span>\n                <span class=\"o\">{</span> <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"n\">Std.PersistentHashMap.Node.entries</span> <span class=\"n\">Std.PersistentHashMap.mkEmptyEntriesArray</span><span class=\"o\">,</span> <span class=\"n\">size</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n          <span class=\"n\">cache</span> <span class=\"o\">:=</span>\n            <span class=\"o\">{</span> <span class=\"n\">inferType</span> <span class=\"o\">:=</span>\n                <span class=\"o\">{</span> <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"n\">Std.PersistentHashMap.Node.entries</span> <span class=\"n\">Std.PersistentHashMap.mkEmptyEntriesArray</span><span class=\"o\">,</span> <span class=\"n\">size</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">},</span>\n              <span class=\"n\">funInfo</span> <span class=\"o\">:=</span>\n                <span class=\"o\">{</span> <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"n\">Std.PersistentHashMap.Node.entries</span> <span class=\"n\">Std.PersistentHashMap.mkEmptyEntriesArray</span><span class=\"o\">,</span> <span class=\"n\">size</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">},</span>\n              <span class=\"n\">synthInstance</span> <span class=\"o\">:=</span>\n                <span class=\"o\">{</span> <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"n\">Std.PersistentHashMap.Node.entries</span> <span class=\"n\">Std.PersistentHashMap.mkEmptyEntriesArray</span><span class=\"o\">,</span> <span class=\"n\">size</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">},</span>\n              <span class=\"n\">whnfDefault</span> <span class=\"o\">:=</span>\n                <span class=\"o\">{</span> <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"n\">Std.PersistentHashMap.Node.entries</span> <span class=\"n\">Std.PersistentHashMap.mkEmptyEntriesArray</span><span class=\"o\">,</span> <span class=\"n\">size</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">},</span>\n              <span class=\"n\">whnfAll</span> <span class=\"o\">:=</span>\n                <span class=\"o\">{</span> <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"n\">Std.PersistentHashMap.Node.entries</span> <span class=\"n\">Std.PersistentHashMap.mkEmptyEntriesArray</span><span class=\"o\">,</span> <span class=\"n\">size</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">},</span>\n              <span class=\"n\">defEqDefault</span> <span class=\"o\">:=</span>\n                <span class=\"o\">{</span> <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"n\">Std.PersistentHashMap.Node.entries</span> <span class=\"n\">Std.PersistentHashMap.mkEmptyEntriesArray</span><span class=\"o\">,</span> <span class=\"n\">size</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">},</span>\n              <span class=\"n\">defEqAll</span> <span class=\"o\">:=</span>\n                <span class=\"o\">{</span> <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"n\">Std.PersistentHashMap.Node.entries</span> <span class=\"n\">Std.PersistentHashMap.mkEmptyEntriesArray</span><span class=\"o\">,</span> <span class=\"n\">size</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n          <span class=\"n\">zetaFVarIds</span> <span class=\"o\">:=</span> <span class=\"bp\">∅</span><span class=\"o\">,</span>\n          <span class=\"n\">postponed</span> <span class=\"o\">:=</span>\n            <span class=\"o\">{</span> <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"n\">Std.PersistentArrayNode.node</span> <span class=\"o\">(</span><span class=\"n\">Array.mkEmpty</span> <span class=\"o\">(</span><span class=\"n\">USize.toNat</span> <span class=\"n\">Std.PersistentArray.branching</span><span class=\"o\">)),</span>\n              <span class=\"n\">tail</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mkEmpty</span> <span class=\"o\">(</span><span class=\"n\">USize.toNat</span> <span class=\"n\">Std.PersistentArray.branching</span><span class=\"o\">),</span> <span class=\"n\">size</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n              <span class=\"n\">shift</span> <span class=\"o\">:=</span> <span class=\"n\">Std.PersistentArray.initShift</span><span class=\"o\">,</span> <span class=\"n\">tailOff</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span> <span class=\"o\">}</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">coreCtx</span> <span class=\"o\">:=</span>\n        <span class=\"o\">{</span> <span class=\"n\">options</span> <span class=\"o\">:=</span> <span class=\"n\">options</span><span class=\"o\">,</span> <span class=\"n\">currRecDepth</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">maxRecDepth</span> <span class=\"o\">:=</span> <span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">ref</span> <span class=\"o\">:=</span> <span class=\"n\">Syntax.missing</span><span class=\"o\">,</span>\n          <span class=\"n\">currNamespace</span> <span class=\"o\">:=</span> <span class=\"n\">Name.anonymous</span><span class=\"o\">,</span> <span class=\"n\">openDecls</span> <span class=\"o\">:=</span> <span class=\"o\">[],</span> <span class=\"n\">initHeartbeats</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n          <span class=\"n\">maxHeartbeats</span> <span class=\"o\">:=</span> <span class=\"n\">Core.getMaxHeartbeats</span> <span class=\"n\">options</span> <span class=\"o\">}</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">coreState</span> <span class=\"o\">:=</span>\n        <span class=\"o\">{</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">nextMacroScope</span> <span class=\"o\">:=</span> <span class=\"n\">firstFrontendMacroScope</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">ngen</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">namePrefix</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">_uniq</span><span class=\"o\">,</span> <span class=\"n\">idx</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"o\">},</span>\n          <span class=\"n\">traceState</span> <span class=\"o\">:=</span>\n            <span class=\"o\">{</span> <span class=\"n\">enabled</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span>\n              <span class=\"n\">traces</span> <span class=\"o\">:=</span>\n                <span class=\"o\">{</span> <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"n\">Std.PersistentArrayNode.node</span> <span class=\"o\">(</span><span class=\"n\">Array.mkEmpty</span> <span class=\"o\">(</span><span class=\"n\">USize.toNat</span> <span class=\"n\">Std.PersistentArray.branching</span><span class=\"o\">)),</span>\n                  <span class=\"n\">tail</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mkEmpty</span> <span class=\"o\">(</span><span class=\"n\">USize.toNat</span> <span class=\"n\">Std.PersistentArray.branching</span><span class=\"o\">),</span> <span class=\"n\">size</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n                  <span class=\"n\">shift</span> <span class=\"o\">:=</span> <span class=\"n\">Std.PersistentArray.initShift</span><span class=\"o\">,</span> <span class=\"n\">tailOff</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span><span class=\"bp\">;</span>\n      <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span>\n          <span class=\"n\">StateRefT'.run</span>\n              <span class=\"o\">(</span><span class=\"n\">StateRefT'.run</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.788</span> <span class=\"n\">metaCtx</span> <span class=\"n\">metaState</span> <span class=\"n\">coreCtx</span> <span class=\"n\">coreState</span><span class=\"o\">))</span>\n                <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.789</span> <span class=\"n\">metaCtx</span> <span class=\"n\">metaState</span> <span class=\"n\">coreCtx</span> <span class=\"n\">coreState</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.790</span> <span class=\"n\">metaCtx</span> <span class=\"n\">metaState</span> <span class=\"n\">coreCtx</span> <span class=\"n\">coreState</span><span class=\"o\">))</span>\n              <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.791</span> <span class=\"n\">metaCtx</span> <span class=\"n\">metaState</span> <span class=\"n\">coreCtx</span> <span class=\"n\">coreState</span><span class=\"o\">)</span>\n        <span class=\"n\">pure</span> <span class=\"n\">a.fst.fst</span><span class=\"o\">))</span>\n    <span class=\"n\">Task.Priority.default</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">BaseIO</span> <span class=\"o\">(</span><span class=\"n\">Task</span> <span class=\"o\">(</span><span class=\"n\">Except</span> <span class=\"n\">IO.Error</span> <span class=\"o\">(</span><span class=\"n\">Except</span> <span class=\"n\">Exception</span> <span class=\"n\">α</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Task</span> <span class=\"o\">(</span><span class=\"n\">Except</span> <span class=\"n\">IO.Error</span> <span class=\"o\">(</span><span class=\"n\">Except</span> <span class=\"n\">Exception</span> <span class=\"n\">α</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>on latest lean4 HEAD?</p>",
        "id": 260699141,
        "sender_full_name": "Julian Berman",
        "timestamp": 1636396233
    },
    {
        "content": "<p>OK never mind, me being less lazy and compiling that version confirms it works fine there, ok.</p>",
        "id": 260700363,
        "sender_full_name": "Julian Berman",
        "timestamp": 1636396837
    },
    {
        "content": "<p>Feel free to send a PR updating mathlib4 to new versions of Lean 4, whenever you do this!</p>",
        "id": 260718717,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1636405451
    },
    {
        "content": "<p>I was a few things deep on the yak stack but happy to do so otherwise in general, good to hear it's welcome.</p>",
        "id": 260718993,
        "sender_full_name": "Julian Berman",
        "timestamp": 1636405568
    }
]