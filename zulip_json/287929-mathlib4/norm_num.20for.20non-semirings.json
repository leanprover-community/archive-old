[
    {
        "content": "<p>Given the new way numerals work in lean 4 it seems to me that goals like <code>1 + 2 = 3</code> now make sense and are true in an arbitrary <code>AddMonoidWithOne</code>.<br>\nTo me this looks in scope for <code>norm_num</code> (though <code>norm_cast</code> works here for now), but it seems <code>norm_num</code> can't currently handle them.<br>\n<span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> do you think that <code>norm_num</code> should do this? And how hard would it be to extend/modify it to do so?</p>",
        "id": 308145432,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1667656896
    },
    {
        "content": "<p>You don't even want to assume commutativity of addition in your base monoid? Is that really <code>norm_num</code>'s job? Maybe...</p>",
        "id": 308174199,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667672455
    },
    {
        "content": "<p><code>norm_num</code> might be able to handle these, as long as all of the theorems are true for the same typeclass it doesn't matter too much what it is</p>",
        "id": 308177866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667675327
    },
    {
        "content": "<p>The main theorems we need are <code>Nat.cast_add</code> and <code>Nat.cast_mul</code></p>",
        "id": 308177923,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667675366
    },
    {
        "content": "<p>...hm, <code>cast_mul</code> is an issue for <code>AddMonoidWithOne</code></p>",
        "id": 308179311,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667676410
    },
    {
        "content": "<p>Where does <code>cast_mul</code> come into play here?</p>",
        "id": 308181655,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667678163
    },
    {
        "content": "<p>in the proof of multiplication</p>",
        "id": 308182520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667678841
    },
    {
        "content": "<p>Actually it wasn't so bad. You have to assume <code>Semiring</code> for multiplication but we already do a similar thing for negation</p>",
        "id": 308184020,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667680053
    },
    {
        "content": "<p>so yes, this works now</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n  <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddMonoidWithOne</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n  <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 308184055,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667680073
    }
]