[
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"326056\" href=\"/#narrow/stream/326056-ICERM22-after-party/topic/List.20of.20tactic.20status.20descriptions\">#ICERM22 after party &gt; List of tactic status descriptions</a> by <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span>.</p>",
        "id": 290641933,
        "sender_full_name": "Notification Bot",
        "timestamp": 1658622979
    },
    {
        "content": "<p>For those just tuning in, this is a thread we generated at the after-party meeting in Providence this past week, which contains a bunch of useful information about who claimed which tactics to port. I hope to keep this thread going so I've moved it to the public <a class=\"stream\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4\">#mathlib4</a> stream, and if you would like to claim a tactic please post about it on this thread to avoid duplicated work. Also post here if you are learning lean 4 metaprogramming and would like me to assign you a tactic to work on.</p>",
        "id": 290642010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1658623166
    },
    {
        "content": "<p>Just wanted to mention that PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/253\">https://github.com/leanprover-community/mathlib4/pull/253</a> has an \"awaiting author\" label (I am the author) but I believe I have addressed all comments. For <a href=\"https://github.com/leanprover-community/mathlib4/pull/336\">https://github.com/leanprover-community/mathlib4/pull/336</a> I am waiting for reviewers to weigh in on an issue, otherwise things are done from my side.</p>",
        "id": 290668301,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1658663189
    },
    {
        "content": "<p>In mathlib the author just changes the tags themselves when they're ready (maybe it's the same with mathlib4)</p>",
        "id": 290674432,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658666234
    },
    {
        "content": "<p>So I was told, but I don't seem to find a way to remove the label. It may be that it is only maintainers who can add/remove labels, or I am just missing something.</p>",
        "id": 290681932,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1658671333
    },
    {
        "content": "<p>Indeed Github documentation says: \"Anyone with triage access to a repository can apply and dismiss labels.\" I believe I do not have this access.</p>",
        "id": 290682024,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1658671447
    },
    {
        "content": "<p>Hello! May I have push access to <code>mathlib4</code>?</p>",
        "id": 290709661,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1658712034
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span> and <span class=\"user-mention\" data-user-id=\"355764\">@Hanting Zhang</span>, I have given you both write access to the mathlib4 repository, so you can open branches and modify labels on PRs.</p>",
        "id": 290715791,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1658719517
    },
    {
        "content": "<p>Thanks a lot</p>",
        "id": 290715797,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1658719556
    },
    {
        "content": "<p>Don't seem to see the appropriate settings button still. My username is <code>siddhartha-gadgil</code>. <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> can you confirm this is the account added?</p>",
        "id": 290722930,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1658729823
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span>  is this the stream the mathlib mentees should use?</p>",
        "id": 296672318,
        "sender_full_name": "Sarah Smith",
        "timestamp": 1662055811
    },
    {
        "content": "<p>The videos from the LftCM afterparty are here: <a href=\"https://brown.hosted.panopto.com/Panopto/Pages/Sessions/List.aspx#folderID=%22560ce8fa-8eb7-46e9-9d30-aed70102a92b%22\">https://brown.hosted.panopto.com/Panopto/Pages/Sessions/List.aspx#folderID=%22560ce8fa-8eb7-46e9-9d30-aed70102a92b%22</a></p>",
        "id": 296672799,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1662055994
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span> <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> <span class=\"user-mention\" data-user-id=\"355764\">@Hanting Zhang</span> <span class=\"user-mention\" data-user-id=\"367155\">@Yevhenii Diomidov</span> <span class=\"user-mention\" data-user-id=\"315434\">@Andrés Goens</span> <span class=\"user-mention\" data-user-id=\"113071\">@Etienne Laurin</span> <span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> <span class=\"user-mention\" data-user-id=\"493306\">@Nathan Temple</span> <span class=\"user-mention\" data-user-id=\"330967\">@Wrenna Robson</span>  here is the Zulip stream we mentioned earlier we can use for mentee/mentor discussions</p>",
        "id": 296692328,
        "sender_full_name": "Sarah Smith",
        "timestamp": 1662063070
    },
    {
        "content": "<p>Thank you very much to all those people and their mentors! <span aria-label=\"praise\" class=\"emoji emoji-1f64c\" role=\"img\" title=\"praise\">:praise:</span></p>",
        "id": 296692514,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662063162
    },
    {
        "content": "<p>Here is a link to view the recording of our mathlib port mentee session today: <a href=\"https://microsoft-my.sharepoint.com/:v:/p/smithsarah/Ee8R0tMZ86NHlCzbBsZNPIQB5YUUVMOxAxOzYhfYWrKQIQ?e=ZB4j3K\">https://microsoft-my.sharepoint.com/:v:/p/smithsarah/Ee8R0tMZ86NHlCzbBsZNPIQB5YUUVMOxAxOzYhfYWrKQIQ?e=ZB4j3K</a></p>\n<p>And helpful links that were shared:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Mathport/Syntax.lean\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Mathport/Syntax.lean</a><br>\n<a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book\">https://github.com/arthurpaulino/lean4-metaprogramming-book</a><br>\n<a href=\"https://github.com/leanprover-community/mathlib4#build-instructions\">https://github.com/leanprover-community/mathlib4#build-instructions</a><br>\n<a href=\"https://leanprover.github.io/lean4/doc/functions.html#syntax-sugar-for-simple-lambda-expressions\">https://leanprover.github.io/lean4/doc/functions.html#syntax-sugar-for-simple-lambda-expressions</a><br>\n<a href=\"https://github.com/leanprover-community/mathlib3port/\">https://github.com/leanprover-community/mathlib3port/</a></p>\n<p>And Mario and Gabriel's tips for the next week!</p>\n<ol>\n<li>install lean4, lake and the whole infrastructure</li>\n<li>Make sure you can build mathlib 4</li>\n<li>pick one of the tactics that already exist, read it and try to understand what it does</li>\n<li>read the metaprogramming book</li>\n<li>use Zulip stream to communicate and collaborate!</li>\n<li>we'll do another tactic demo next week!</li>\n</ol>",
        "id": 296694161,
        "sender_full_name": "Sarah Smith",
        "timestamp": 1662063923
    },
    {
        "content": "<p>Many thanks for recording these! It's great for those of us who would really like to learn more about it but don't have enough free time to join in just yet.</p>",
        "id": 296694415,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1662064035
    },
    {
        "content": "<p>Hi All, does anyone have any other directions for building mathlib 4?  I'm in VS Code in Windows with Lean 4 installed, but the directions in <a href=\"https://github.com/leanprover-community/mathlib4#build-instructions\">https://github.com/leanprover-community/mathlib4#build-instructions</a> don't seem to work there.</p>",
        "id": 296711178,
        "sender_full_name": "Nathan Temple",
        "timestamp": 1662072314
    },
    {
        "content": "<p>What issues are you having</p>",
        "id": 296712899,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1662073440
    },
    {
        "content": "<p>How might I get invited to future such meetings? Do I need to fill out the \"mentee sign-up\" form?</p>",
        "id": 296742906,
        "sender_full_name": "David Renshaw",
        "timestamp": 1662086007
    },
    {
        "content": "<p>yes, this is how we all got invited</p>",
        "id": 296743510,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1662086641
    },
    {
        "content": "<p>I'm going to simplify <code>wlog</code> in mathlib, so that it will become trivial to port.</p>",
        "id": 296820580,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1662125475
    },
    {
        "content": "<p>Or at least, I'll make an attempt to do that.</p>",
        "id": 296820615,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1662125490
    },
    {
        "content": "<p>Some of you asked me on Thursday about easy tasks to get started with:</p>\n<ul>\n<li><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> : can you please finish <a href=\"https://github.com/leanprover-community/mathlib4/pull/318\">mathlib4#318</a>?  I've added a failing test case.  I think <code>Meta.check</code> is the right function to use here.</li>\n<li><span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span>:  can you please check out <code>mapply</code>?  (read through <a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book/blob/master/md/main/metam.md#metavariable-depth\">https://github.com/arthurpaulino/lean4-metaprogramming-book/blob/master/md/main/metam.md#metavariable-depth</a>)</li>\n<li><span class=\"user-mention\" data-user-id=\"493306\">@Nathan Temple</span>: can you please give porting <code>econstructor</code> a try?</li>\n<li><span class=\"user-mention\" data-user-id=\"330967\">@Wrenna Robson</span>: can you please do <code>infer_auto_param</code>? (If you search <a href=\"https://github.com/leanprover-community/mathport/\">mathport</a>, you'll see how this tactic used to be called in Lean 3.)</li>\n</ul>",
        "id": 296873871,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1662143015
    },
    {
        "content": "<p>I'll give it a go!</p>",
        "id": 296879108,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1662145140
    },
    {
        "content": "<p>Hi folks! Could you please add me to the list of mentees interested in sessions on tactics (<a href=\"mailto:lakesare@gmail.com\">lakesare@gmail.com</a>).<br>\nI'll be working on user widgets, but I want to understand the internals of tactics/implement some lean3-&gt;lean4 transitions before I start.</p>",
        "id": 297101967,
        "sender_full_name": "Evgenia Karunus",
        "timestamp": 1662298305
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"480079\">Evgenia Karunus</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20porting.20assignments/near/297101967\">said</a>:</p>\n<blockquote>\n<p>Hi folks! Could you please add me to the list of mentees interested in sessions on tactics (<a href=\"mailto:lakesare@gmail.com\">lakesare@gmail.com</a>).<br>\nI'll be working on user widgets, but I want to understand the internals of tactics/implement some lean3-&gt;lean4 transitions before I start.</p>\n</blockquote>\n<p>Just added you to the meeting Evgenia! Could you fill out the mentee application as well so we have it recorded? thank you :) <a href=\"https://docs.google.com/forms/d/e/1FAIpQLSfMfNqRTUCLcNPRvU6l4Y86H-mhPCS0AXoMmcjQEyXqw9Mhdg/viewform?usp=sf_link\">https://docs.google.com/forms/d/e/1FAIpQLSfMfNqRTUCLcNPRvU6l4Y86H-mhPCS0AXoMmcjQEyXqw9Mhdg/viewform?usp=sf_link</a></p>",
        "id": 297678243,
        "sender_full_name": "Sarah Smith",
        "timestamp": 1662586889
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> was it <code>apply_auto_param</code> before?</p>",
        "id": 297748869,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1662633597
    },
    {
        "content": "<p>yes</p>",
        "id": 297748962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1662633616
    },
    {
        "content": "<p>Is today's meeting right now or in an hour from now?</p>",
        "id": 297813885,
        "sender_full_name": "David Renshaw",
        "timestamp": 1662652893
    },
    {
        "content": "<p>It's supposed to be now but it can't get into the teams meeting either.</p>",
        "id": 297814062,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1662652937
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 297814071,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1662652940
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/vscode-lean4/issues/76#issuecomment-1146324355\">https://github.com/leanprover/vscode-lean4/issues/76#issuecomment-1146324355</a></p>",
        "id": 297816803,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1662653796
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> <span class=\"user-mention\" data-user-id=\"243791\">@David Renshaw</span> <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> <span class=\"user-mention\" data-user-id=\"384542\">@Justus Springer</span> <span class=\"user-mention\" data-user-id=\"353800\">@Luca Ferranti</span> <span class=\"user-mention\" data-user-id=\"443984\">@Newell Jensen</span> <span class=\"user-mention\" data-user-id=\"411579\">@Sam van G</span> <span class=\"user-mention\" data-user-id=\"355764\">@Hanting Zhang</span></p>",
        "id": 297820481,
        "sender_full_name": "Sarah Smith",
        "timestamp": 1662654878
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"504487\">@Sarah Smith</span></p>",
        "id": 297823175,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1662655700
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> I think <a href=\"https://github.com/leanprover-community/mathlib4/pull/318\">mathlib4#318</a> is finished now. I plan to start on porting <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#contrapose\">tactic#contrapose</a> unless you have a different suggestion.</p>",
        "id": 297828010,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1662657295
    },
    {
        "content": "<p>Ok, I think we had a misunderstanding about the failure case.  But otherwise looks good.</p>",
        "id": 297828667,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1662657519
    },
    {
        "content": "<p><code>contrapose</code> is a good choice</p>",
        "id": 297828694,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1662657528
    },
    {
        "content": "<p>Oh I see what you mean. My apologies.</p>",
        "id": 297829360,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1662657759
    },
    {
        "content": "<p><code>existsi</code> was really easy, essentially removing the <code>try trivial</code> from <code>use</code>. PR is here <a href=\"https://github.com/leanprover-community/mathlib4/pull/405\">mathlib4#405</a> - I don't remember what you said about the workflow, but I could not push to a non-master branch of mathlib4</p>",
        "id": 297887215,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1662679623
    },
    {
        "content": "<p>Btw: I continued my work today on the <code>simps</code> attribute porting on a branch: <a href=\"https://github.com/leanprover-community/mathlib4/blob/simpsAttrImpl/Mathlib/Tactic/Simps.lean\">https://github.com/leanprover-community/mathlib4/blob/simpsAttrImpl/Mathlib/Tactic/Simps.lean</a> (it's still a giant mess)</p>",
        "id": 297891722,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1662683261
    },
    {
        "content": "<p>I'm looking at <code>SolveByElim</code> right now, which is missing a lot of features from the original <code>solve_by_elim</code> in lean 3. Would it be okay if I try to work on that? Tagging <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> since he ported the minimal version.</p>",
        "id": 297907252,
        "sender_full_name": "Justus Springer",
        "timestamp": 1662700592
    },
    {
        "content": "<p>I'm not sure how successful I'm going to be though.</p>",
        "id": 297907295,
        "sender_full_name": "Justus Springer",
        "timestamp": 1662700674
    },
    {
        "content": "<p>Yes, that would be great! I'm hoping to restart working on mathlib4 tactics<br>\nsoon, and this is high on my list.</p>\n<p>It's fairly important that we try to follow the same behavior as the<br>\nmathlib3 version, as various other tactics, e.g. library search and tidy,<br>\ncall it internally.</p>",
        "id": 297908737,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1662702035
    },
    {
        "content": "<p>Hi Mathlib Mentees! Here's the recording from yesterday's meeting, where Gabriel showed another tactic demo. Also, these links have a set expiration for 28 days, so you may want to download it if you want to keep it. I also may upload them to GitHub to keep them around longer? TBD <a href=\"https://microsoft-my.sharepoint.com/:v:/p/smithsarah/EWNtVpOCRARBh0vHxCExYwUBGc8avQQMahrcQtsEDY6vOw?e=fYkDOQ\">https://microsoft-my.sharepoint.com/:v:/p/smithsarah/EWNtVpOCRARBh0vHxCExYwUBGc8avQQMahrcQtsEDY6vOw?e=fYkDOQ</a></p>",
        "id": 298066198,
        "sender_full_name": "Sarah Smith",
        "timestamp": 1662764662
    },
    {
        "content": "<p>Uploading these to youtube could be good too?</p>",
        "id": 298649780,
        "sender_full_name": "Evgenia Karunus",
        "timestamp": 1663096138
    },
    {
        "content": "<p>Hereby, I claim <code>dsimp</code> and <code>guardLHS</code> for <code>conv</code>.</p>",
        "id": 299012621,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1663261129
    },
    {
        "content": "<p>I was looking at <code>generalize_proofs</code> <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 299012889,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663261219
    },
    {
        "content": "<p>Hi! I took a look at <code>abstract</code>, there's a dozen uses of it in mathlib3, but only one with an <code>id</code> and some places it is just used as a fancy <code>dsimp</code>. The others are for performance I think, I'm not sure those are still needed in lean4.</p>",
        "id": 299016016,
        "sender_full_name": "Etienne Laurin",
        "timestamp": 1663262298
    },
    {
        "content": "<p>Does</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Lean</span> <span class=\"c\">/-</span><span class=\"cm\"> MOVE THIS -/</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">MVarId</span>\n\n<span class=\"sd\">/-- `asserts g l` asserts all the tuples in `l`,</span>\n<span class=\"sd\">where `l` is a list of tuples of the form `(name, type, val)`.</span>\n<span class=\"sd\">It returns the resulting goal.</span>\n\n<span class=\"sd\">The first element in the list `l` will be asserted first,</span>\n<span class=\"sd\">and the last element in the list `l` will be asserted last.</span>\n<span class=\"sd\">In particular, the last element will correspond to the outmost lambda</span>\n<span class=\"sd\">in the goal that is returned. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">asserts</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Name</span> <span class=\"bp\">×</span> <span class=\"n\">Expr</span> <span class=\"bp\">×</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">MVarId</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">g</span>\n<span class=\"bp\">|</span> <span class=\"o\">((</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">ty</span><span class=\"o\">,</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">g₁</span> <span class=\"bp\">←</span> <span class=\"n\">g.assert</span> <span class=\"n\">n</span> <span class=\"n\">ty</span> <span class=\"n\">val</span>\n  <span class=\"n\">asserts</span> <span class=\"n\">g₁</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">MVarId</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Lean</span>\n</code></pre></div>\n<p>already exist? If not, where should I put it?</p>",
        "id": 299020060,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663263755
    },
    {
        "content": "<p>You can put it in mathlib for now</p>",
        "id": 299021059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663264096
    },
    {
        "content": "<p>And where in mathlib?</p>",
        "id": 299021254,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663264179
    },
    {
        "content": "<p>Sorry for this ultra late reply. I think this is a suitable place:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/tree/master/Mathlib/Util\">https://github.com/leanprover-community/mathlib4/tree/master/Mathlib/Util</a></p>",
        "id": 299076352,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1663292402
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"323441\">@mathlib mentees</span> this week we're asking mentees to <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Mathport/Syntax.lean\">choose a tactic</a> and try out porting it yourself! <span aria-label=\"computer\" class=\"emoji emoji-1f4bb\" role=\"img\" title=\"computer\">:computer:</span>  message here which one you're working on so there's not duplicate efforts, and next week we'll all share how it's going! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 299206075,
        "sender_full_name": "Sarah Smith",
        "timestamp": 1663348330
    },
    {
        "content": "<p>I'd like to take on the <code>#explode</code> command eventually (in ~2 weeks). Do I understand it right that it's marked as <code>S</code> because it doesn't directly prevent the port, but we would still like it in Mathlib 4?<br>\nAnd would you advise I take a more straightforward/tested tactic marked with <code>E</code> before I start with <code>#explode</code>?</p>",
        "id": 299235665,
        "sender_full_name": "Evgenia Karunus",
        "timestamp": 1663359667
    },
    {
        "content": "<p>The <code>#explode</code> tactic is marked <code>S</code> like all other <code>#</code> commands because they are intended for temporary use only and hence they won't appear in a final product library like mathlib. But that doesn't mean they aren't useful, only that they aren't needed for the port. All the tactics, including the <code>S</code> ones, are on the todo list for mathlib 4</p>",
        "id": 299236499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663360021
    },
    {
        "content": "<p>I would classify <code>#explode</code> as being on the larger end of <code>M</code>edium size</p>",
        "id": 299236614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663360078
    },
    {
        "content": "<p>but I think there might be some bikeshedding on the UI design aspects, which could make it more complicated</p>",
        "id": 299236800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663360144
    },
    {
        "content": "<p>mathlib4 has <code>#explode_widget</code> as well for doing the same thing in the widget view; we probably want something closer to that</p>",
        "id": 299236879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663360181
    },
    {
        "content": "<p>For an easy tactic, what about the documentation commands <code>copy_doc_string</code>, <code>add_tactic_doc</code>, <code>add_decl_doc</code>? I think the last one has already been implemented in core, so you just have to check that the behavior is sufficient and then PR to remove it from the list</p>",
        "id": 299237691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663360514
    },
    {
        "content": "<p>Aha, then I'll start with <code>copy_doc_string</code>, <code>add_tactic_doc</code>, <code>add_decl_doc</code> commands; and look into <code>#explode</code> once I'm done with these.</p>",
        "id": 299239556,
        "sender_full_name": "Evgenia Karunus",
        "timestamp": 1663361446
    },
    {
        "content": "<p>I could start looking at one of <code>apply, fapply, eapply, apply_with, mapply, rfl, symm, trans, fsplit</code> if nobody else has picked any of these (didn't see any PRs on mathlib4 gh) also in the next couple weeks.  My main problem is I am having too much fun playing with learning Lean 3 that I haven't spent anytime, apart from watching Rob's metaprogramming youtube series, on tactics.</p>",
        "id": 299245933,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1663364785
    },
    {
        "content": "<p><code>symm</code> and <code>trans</code> are taken: <a href=\"https://github.com/leanprover-community/mathlib4/pull/253\">mathlib4#253</a></p>",
        "id": 299246528,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1663365113
    },
    {
        "content": "<p>the plan with the group of primed tactics is to deal with the problem upstream and make them unnecessary</p>",
        "id": 299246601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663365131
    },
    {
        "content": "<p>I would like a version of lean 3 <code>refl</code> though (now <code>rfl</code>)</p>",
        "id": 299246653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663365168
    },
    {
        "content": "<p>I really don't have a preference since I am new to this and any low hanging fruit to get the ball rolling is probably the best thing.  I don't mind if I am assigned one.</p>",
        "id": 299246953,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1663365334
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  so feel free to assign me something if you wish ;)</p>",
        "id": 299247285,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1663365518
    },
    {
        "content": "<p>well, you said <code>rfl</code> and we don't have that one yet, at least not like the lean 3 one</p>",
        "id": 299247662,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663365745
    },
    {
        "content": "<p>so have at it</p>",
        "id": 299247680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663365757
    },
    {
        "content": "<p>Sounds good, watching the mentor session vids now to get up to speed.</p>",
        "id": 299247733,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1663365800
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20porting.20assignments/near/299246653\">said</a>:</p>\n<blockquote>\n<p>I would like a version of lean 3 <code>refl</code> though (now <code>rfl</code>)</p>\n</blockquote>\n<p>So this new tactic will be called <code>rfl</code>, the same name as what is used in term mode?</p>",
        "id": 299249990,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1663367003
    },
    {
        "content": "<p>yes, the tactic already exists but it only does <code>apply rfl</code> instead of applying any reflexivity theorem tagged with <code>@[refl]</code></p>",
        "id": 299264900,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663380490
    },
    {
        "content": "<p>Did we want to call the tactic <code>rfl</code> in lean 4 rather than <code>refl</code> as we have in lean 3 (is what I was alluding to)?  <code>refl</code> is a short version of <code>reflexivity</code> and didn't know if we wanted to create the new tactic in lean 4 in a similar manner that lean 3 does it.</p>",
        "id": 299265128,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1663380734
    },
    {
        "content": "<p>it's called <code>rfl</code> now</p>",
        "id": 299265167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663380832
    },
    {
        "content": "<p>I am sorry that I've not had time as I hoped in the last couple weeks. What's the best way to catch up/what ports are open to do?</p>",
        "id": 299528089,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1663578788
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> are you still working on <code>filter_upwards</code>?</p>",
        "id": 299641172,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1663619803
    },
    {
        "content": "<p>Sorry, I completely forgot to open a PR at the end of the second week at Providence. It is basically ready but I may need to update it and then open the PR. Btw I think I announced that I would work on zify but it never went further than just thinking about it so if it’s not already done anyone should feel free to work on it</p>",
        "id": 299644058,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1663621066
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20porting.20assignments/near/299528089\">said</a>:</p>\n<blockquote>\n<p>I am sorry that I've not had time as I hoped in the last couple weeks. What's the best way to catch up/what ports are open to do?</p>\n</blockquote>\n<p>Hi Wrenna, no worries <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> glad to see you back! Watch/re-watch the demo session links up above if you need, and then claim a tactic from the list <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Mathport/Syntax.lean\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Mathport/Syntax.lean</a> to start attempting your own port.  Try to make sure it's not already claimed by someone else, so search if there's already an open PR on the tactic or if someone's staked claim here in this topic stream</p>",
        "id": 299646066,
        "sender_full_name": "Sarah Smith",
        "timestamp": 1663621939
    },
    {
        "content": "<p>FYI: <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> created</p>\n<blockquote>\n<p>tactic porting tracking issue <a href=\"https://github.com/leanprover-community/mathlib4/pull/430\">mathlib4#430</a></p>\n</blockquote>",
        "id": 299762677,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663684616
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"504487\">@Sarah Smith</span> great, I'll try to catch up</p>",
        "id": 299798564,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1663690677
    },
    {
        "content": "<p>Re: the tracking issue. I'm planning later today to go through this thread and record \"claims\" in that issue. So far the information contained in that issue only reflects PRs that exist on github, and some private communication.</p>",
        "id": 299859393,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1663714238
    },
    {
        "content": "<p>Okay, I think I've now gone through this thread and reflected everything in the issue.</p>",
        "id": 299864630,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1663717871
    },
    {
        "content": "<p>Of course, in many cases someone will have claimed a tactic and either found it's too difficult, they don't have time, have lost interest, etc. Please don't hesitate to take your name off something if appropriate, no explanation required!!</p>",
        "id": 299864680,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1663717917
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"443984\">@Newell Jensen</span>, <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>, <span class=\"user-mention\" data-user-id=\"384542\">@Justus Springer</span>, <span class=\"user-mention\" data-user-id=\"480079\">@Evgenia Karunus</span>, <span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span>, <span class=\"user-mention\" data-user-id=\"330967\">@Wrenna Robson</span>, <span class=\"user-mention\" data-user-id=\"303889\">@Alena Gusakov</span>, <span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span>, when I was creating the tracking issue I discovered that you didn't have write access to the mathlib4 repository, so I've sent you all invitations.</p>\n<p>This should make it easier to make PRs (because you can push non-master branches direct to the repository), and it enables you to edit issues and labels on PRs.</p>",
        "id": 299864786,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1663718030
    },
    {
        "content": "<p><code>guard_target</code> for <code>conv</code> is in <code>std4</code> now, so this can be removed from the list - I had issues building mathlib4 after a <code>lake update</code>, therefore I couldn't PR that myself</p>\n<p>Edit: oh, this got edited in already - I guess I should open my email account before replying to stuff in zulip..</p>",
        "id": 299876705,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1663728441
    },
    {
        "content": "<p>but <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> can you give me write-access to mathlib4 as well?</p>",
        "id": 299877235,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1663729072
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span>, invitation sent.</p>",
        "id": 299877994,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1663729804
    },
    {
        "content": "<p>Thank you very much for this work Scott, I think it's very useful!</p>",
        "id": 299899950,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1663746061
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> the open issue is awesome, I'll try to help keep it accurate as well. for lines like this with multiple similar tactics listed, I assume your thinking is that it makes sense for them to be worked on as a bundle? field / have_field / apply_field</p>",
        "id": 300030335,
        "sender_full_name": "Sarah Smith",
        "timestamp": 1663790430
    },
    {
        "content": "<p>yes</p>",
        "id": 300030417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663790463
    },
    {
        "content": "<p>Could I also have write-access to mathlib4? My github username is <code>tb65536</code>. Thanks!</p>",
        "id": 300257566,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1663885214
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20porting.20assignments/near/299644058\">said</a>:</p>\n<blockquote>\n<p>Sorry, I completely forgot to open a PR at the end of the second week at Providence. It is basically ready but I may need to update it and then open the PR. Btw I think I announced that I would work on zify but it never went further than just thinking about it so if it’s not already done anyone should feel free to work on it</p>\n</blockquote>\n<p>it doesn't look to bad, so I will try to do it</p>",
        "id": 300257864,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1663885394
    },
    {
        "content": "<p>I posted a <a href=\"https://github.com/leanprover-community/mathlib4/issues/430#issuecomment-1255672630\">sorted list of tactic occurrences in mathlib</a> on the github issue to help with prioritization</p>",
        "id": 300269203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663891617
    },
    {
        "content": "<p>Is there any reason that <code>polyrith</code> isn't in the list of tactics to be ported?  Curious if <span class=\"user-mention\" data-user-id=\"452188\">@Dhruv Bhatia</span>  the original author is thinking to port this to Lean 4 or not.  If not, I would like to claim this one.</p>",
        "id": 300269672,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1663891910
    },
    {
        "content": "<p><code>polyrith</code> was added after the list was created. New tactics from mathlib are periodically added to the file; this is what the \"modifies-tactic-syntax\" mathlib tag on PRs is for</p>",
        "id": 300270820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663892572
    },
    {
        "content": "<p>sorry for missing yesterday meeting. Looking at the available (easy, since I'm no guru yet) tactics, I could start working on <code>ring</code>, I'll start drafting a PR this weekend. Also can I get write access to mathlib4, my handle is <code>lucaferranti</code></p>",
        "id": 300290667,
        "sender_full_name": "Luca Ferranti",
        "timestamp": 1663910556
    },
    {
        "content": "<p>what does \"conv mode\" mean?</p>",
        "id": 300290683,
        "sender_full_name": "Luca Ferranti",
        "timestamp": 1663910588
    },
    {
        "content": "<p><code>polyrith</code> will definitely be ported at some point in time. But it isn't a tactic that occurs in mathlib proofs, because it is self-replacing. So it isn't prio 1.</p>",
        "id": 300290795,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663910699
    },
    {
        "content": "<p>We do need <code>linear_combination</code>, right? that probably does make sense only if we have ported <code>ring</code></p>",
        "id": 300291195,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1663911055
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20porting.20assignments/near/300290795\">said</a>:</p>\n<blockquote>\n<p><code>polyrith</code> will definitely be ported at some point in time. But it isn't a tactic that occurs in mathlib proofs, because it is self-replacing. So it isn't prio 1.</p>\n</blockquote>\n<p>Yeah, understood but still want to claim it <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 300291592,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1663911431
    },
    {
        "content": "<p>But <code>ring</code> is already ported!</p>",
        "id": 300291596,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663911436
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20porting.20assignments/near/300291195\">said</a>:</p>\n<blockquote>\n<p>We do need <code>linear_combination</code>, right? that probably does make sense only if we have ported <code>ring</code></p>\n</blockquote>\n<p>Yeah there is a list of things needed before hand so obviously need to get those done first.</p>",
        "id": 300291614,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1663911468
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"443984\">Newell Jensen</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20porting.20assignments/near/300291592\">said</a>:</p>\n<blockquote>\n<p>Yeah, understood but still want to claim it <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>\n</blockquote>\n<p>Saying this in partial jest, I am mostly just intrigued by the fact that it interfaces with Sage and the possibilities that can have for other things.</p>",
        "id": 300291778,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1663911607
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"353800\">Luca Ferranti</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20porting.20assignments/near/300290683\">said</a>:</p>\n<blockquote>\n<p>what does \"conv mode\" mean?</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/extras/conv.html\">conv</a></p>",
        "id": 300296139,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1663915091
    },
    {
        "content": "<p>it's totally okay to pick one of the <code>S</code> tactics to work on, especially if it takes lean in a new direction (these are the <code>N</code> tactics). <code>polyrith</code> is definitely an <code>N</code> tactic</p>",
        "id": 300297279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663915865
    },
    {
        "content": "<p><code>ring</code> is only half-ported though right? Doesn't it only handle semi-rings right now?</p>",
        "id": 300471293,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663980900
    },
    {
        "content": "<p>I mean, semi-ring manipulations, no negatives.</p>",
        "id": 300471323,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663980941
    },
    {
        "content": "<p>it's semi-<code>ring</code></p>",
        "id": 300472131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663981729
    },
    {
        "content": "<p>hellooo <span class=\"user-group-mention\" data-user-group-id=\"323441\">@mathlib mentees</span> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> we were thinking this week it would be fun to do some light pair programming at the meeting. Does anyone want to volunteer to share their screen and show what they've been working on? It's totally ok to go if you're stuck or lost on what to do next (or how to start!!), in fact that's even better for everyone to learn, we want to help! Give a  <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> react here if you want to share on Thursday, or message me if you have questions! <span aria-label=\"dancing\" class=\"emoji emoji-1f57a\" role=\"img\" title=\"dancing\">:dancing:</span> <span aria-label=\"dancer\" class=\"emoji emoji-1f483\" role=\"img\" title=\"dancer\">:dancer:</span> <span aria-label=\"boom\" class=\"emoji emoji-1f4a5\" role=\"img\" title=\"boom\">:boom:</span></p>",
        "id": 300909973,
        "sender_full_name": "Sarah Smith",
        "timestamp": 1664231502
    },
    {
        "content": "<p>I just encountered a nice little sub-problem that might be nice to do pair programming on, so I'm happy to volunteer.</p>",
        "id": 301450037,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1664460845
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span> this stream is what the mathlib mentees are using to discuss</p>",
        "id": 301488394,
        "sender_full_name": "Sarah Smith",
        "timestamp": 1664471221
    },
    {
        "content": "<p>big thanks to <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> and <span class=\"user-mention\" data-user-id=\"443984\">@Newell Jensen</span> for sharing their tactics this week and pair programming in the mentee meeting, so many found it useful to watch! <span class=\"user-mention\" data-user-id=\"315434\">@Andrés Goens</span> you mentioned you're willing to share next week, do we have 1 or 2 more volunteers? There's some brand new mentees so even pair programming a fresh tactic from scratch would be helpful  <span aria-label=\"nerd\" class=\"emoji emoji-1f913\" role=\"img\" title=\"nerd\">:nerd:</span> <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 301491285,
        "sender_full_name": "Sarah Smith",
        "timestamp": 1664472017
    },
    {
        "content": "<p>I’ll volunteer! We’ll see what I can figure out by next week 😁</p>",
        "id": 301491511,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664472094
    },
    {
        "content": "<p>Sorry for not showing up, I am very much occupied with other obligations. I hope I'll find some time to start working on <code>zify</code> (how is that pronounced btw? 'zee-fee' or 'zett-i-fei' or something completely different?) on the weekend and hopefully have something presentable for the next meeting.</p>",
        "id": 301496615,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1664473542
    },
    {
        "content": "<blockquote>\n<p>how is that pronounced btw?</p>\n</blockquote>\n<p>it's up to your interpretation :)</p>",
        "id": 301499623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664474420
    },
    {
        "content": "<p>My minds voice always says \"ziffy\". But I guess it should be <code>zettify</code> or <code>zee-ify</code> (depending on where you live/were born).</p>",
        "id": 301506517,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1664476446
    },
    {
        "content": "<p>I read it as \"zee-ify\". I've lived in the US for too long :P</p>",
        "id": 301518061,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1664480435
    },
    {
        "content": "<p>To make it just a tiny bit easier to browse tactics to port, I'd like to edit <a href=\"https://github.com/leanprover-community/mathlib4/issues/430\">#430</a> so that each tactic is prefixed by its difficulty (e.g. <code>[E]</code>) and links to its entry in the mathlib docs. (That way you wouldn't have to look back and forth to <code>Syntax.lean</code> to find the difficulty, and could see if it had been claimed at the same time.)</p>\n<p>Would it be ok to give me edit access to that issue somehow so I can do that (or would doing so be a whole thing/involve giving me \"too many\" permissions)? If so, I'm thorimur on github. :)</p>",
        "id": 301530849,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664485134
    },
    {
        "content": "<p>what's your github handle?</p>",
        "id": 301532173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664485679
    },
    {
        "content": "<p>thorimur</p>",
        "id": 301532274,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664485708
    },
    {
        "content": "<p>invite sent</p>",
        "id": 301532321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664485730
    },
    {
        "content": "<p>Ok great, thanks :)</p>",
        "id": 301532344,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664485738
    },
    {
        "content": "<p>Is there a quick automatic way to get the full name of a tactic, either within lean or otherwise? e.g. to produce <code>tactic.interactive.assoc_rw</code> from <code>assoc_rw</code>?</p>",
        "id": 301535234,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664486990
    },
    {
        "content": "<p>yes, prepend <code>tactic.interactive.</code></p>",
        "id": 301555240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664498707
    },
    {
        "content": "<p>if you mean lean 3</p>",
        "id": 301555256,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664498716
    },
    {
        "content": "<p>all lean 3 tactics are required to be in that namespace</p>",
        "id": 301555278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664498740
    },
    {
        "content": "<p>Some of them seem not to be, such as <code>op_induction</code></p>",
        "id": 301557249,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664500456
    },
    {
        "content": "<p>(among others)</p>",
        "id": 301557254,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664500461
    },
    {
        "content": "<p>Should <code>simp_intro</code> be <code>simp_intros</code>? I can't seem to find <code>simp_intro</code> in mathlib3</p>",
        "id": 301559851,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664502637
    },
    {
        "content": "<p>Ah. Those tactics are special... In lean 3 you are allowed to write elements of the <code>tactic unit</code> monad directly in a <code>by</code> block, and this is sometimes used to call \"non-interactive\" tactics that can be in any namespace</p>",
        "id": 301559887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664502669
    },
    {
        "content": "<p><code>simp_intro</code> is lean 3 <code>simp_intros</code> indeed. I'm taking the opportunity to normalize some of the names</p>",
        "id": 301559996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664502743
    },
    {
        "content": "<p>Mathport handles the tactic renames / syntactic changes</p>",
        "id": 301560038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664502784
    },
    {
        "content": "<p>ah okay! so are the snake case strings in <code>Syntax.lean</code> \"new\" names for lean 4, and not the old lean 3 names?</p>",
        "id": 301560132,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664502856
    },
    {
        "content": "<p>yes</p>",
        "id": 301560135,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664502861
    },
    {
        "content": "<p>cool! is there a list of other normalizations? could be useful in general, I imagine</p>",
        "id": 301560162,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664502902
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathport/blob/master/Mathport/Syntax/Translate/Tactic/Lean3.lean#L424-L431\">https://github.com/leanprover-community/mathport/blob/master/Mathport/Syntax/Translate/Tactic/Lean3.lean#L424-L431</a></p>\n<p>Here is where you can see the renaming happen: notice that it is spelled <code>simp_intros</code> in the attribute at the top (that's the lean 3 name) and <code>simp_intro</code> in the syntax quotation (that's the lean 4 name)</p>",
        "id": 301560163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664502903
    },
    {
        "content": "<p>that also handles stuff like: in lean 3 the config argument comes at the end, in lean 4 it comes at the beginning in a <code>(config := ...)</code> wrapper</p>",
        "id": 301560276,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664503004
    },
    {
        "content": "<p>So because we have this syntax transformation tool we have significant latitude to make the lean 4 tactic equivalent more lean-4-ish syntactically</p>",
        "id": 301560316,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664503061
    },
    {
        "content": "<p>Gotcha, neat! I do feel like having a mapping somewhere of lean 3 things to their lean 4 equivalents will be useful outside of mathport as well...e.g. I'm guessing the mathlib3 docs will eventually be updated to point to the corresponding thing in the mathlib4 docs (and vice versa)</p>",
        "id": 301560429,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664503144
    },
    {
        "content": "<p>I don't think we want that to live in the official docs, but an on-the-side cheat sheet would be useful in the mid to late stage of porting</p>",
        "id": 301560527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664503211
    },
    {
        "content": "<p>Won't people still want to know what the lean 4 correspondent is if they're used to using lean 3? I'm imagining a user who's used to calling something one name in lean 3 and doesn't know what to call it in lean 4</p>",
        "id": 301565609,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664507819
    },
    {
        "content": "<p>While I'm at it, I could also sort this list of tactics by the priorities/occurrences given in <a href=\"https://github.com/leanprover-community/mathlib4/issues/430#issuecomment-1255672630\">the most recent comment</a>, and also split them up by unclaimed, claimed, and finished...does this sound like a good idea?</p>",
        "id": 301568582,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664511336
    },
    {
        "content": "<p>Also, there are three attributes marked as \"stub\" difficulty but included in the main list—I'm guessing these should be in the stub section instead, right? (<code>intro</code>, <code>interactive</code>, <code>protect_proj</code>)</p>",
        "id": 301569453,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664512311
    },
    {
        "content": "<p>Best not to re-sort them for now. They are in the same order as the Syntax.lean file</p>",
        "id": 301570085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664513033
    },
    {
        "content": "<p><code>interactive</code> should actually be removed entirely, we're not planning to port it. <code>protect_proj</code> shouldn't be marked S, we need to handle it but we're not going to do so by implementing it in mathlib4 as the comment indicates</p>",
        "id": 301570181,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664513158
    },
    {
        "content": "<p><code>intro</code> is an S for now, we may not want to port it at all</p>",
        "id": 301570223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664513197
    },
    {
        "content": "<p>Gotcha, I'll omit <code>interactive</code>, turn <code>protect_proj</code> into <code>?</code>-difficulty for now, and move <code>intro</code> to the stub section (unless something different is desired)</p>",
        "id": 301573411,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664515973
    },
    {
        "content": "<p>Just wondering, why is it important that they stay in the same order as the Syntax.lean file? The two things I can imagine are 1) the ability to match up the difficulty (but I'll be including the difficulty next to each entry in the issue, so this won't be necessary) 2) there might be some effect on the Syntax.lean file depending on what happens in the issue. (I notice the stubs are out of order though?)</p>\n<p>I wish markdown had sortable tables...then we wouldn't have to choose an order :)</p>\n<p>I'll post the edit tomorrow!</p>",
        "id": 301573427,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664515985
    },
    {
        "content": "<p>Ok, <a href=\"https://github.com/leanprover-community/mathlib4/issues/430\">posted</a>! In the future, if we do choose to make it a prioritized list, feel free to ping me—it should be pretty easy to sort it with the code I've written to generate the formatting and links.</p>\n<p>Also let me know if there are any opinions on the icons/emojis/formatting used for the status and for the difficulty; currently, I just use the letters in <code>Syntax.lean</code> for difficulty, but it would be likewise very easy to change everything systematically, e.g. to some visually distinct emojis.</p>",
        "id": 301760472,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664590324
    },
    {
        "content": "<p>ok, I’m going to try <code>ring1</code> / <code>ring1!</code> :)</p>",
        "id": 301956677,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1664730670
    },
    {
        "content": "<p>This is just a checkup for people who are currently marked as claiming a tactic: Are you still working on the tactic / interested in retaining the claim? If it turned out to be harder than you expected / out of your depth, or you don't have time to work on it, I would recommend not holding on the claim, since it means others won't work on it either which might delay matters. If you have already have some partial progress or are preparing a PR then of course you should keep the claim though. No explanation is required either way, this is just making sure our information is up to date.</p>\n<p>Please reply to this message with a <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> if you are still working on the tactic and <span aria-label=\"-1\" class=\"emoji emoji-1f44e\" role=\"img\" title=\"-1\">:-1:</span> if you would like others to work on it instead (you can follow up with a message if you would like to have something else assigned to you). Reply with <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> if you would like to work on someone else's tactic (e.g. you know how you could implement it) and are holding off because of the claim.</p>",
        "id": 302774129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665111630
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> and <span class=\"user-mention\" data-user-id=\"330967\">@Wrenna Robson</span> , are you still working on <code>infer_auto_param</code>?</p>",
        "id": 302774134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665111635
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span>, are you still working on <code>try_for</code>?</p>",
        "id": 302774137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665111640
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303889\">@Alena Gusakov</span> , are you still working on <code>convert</code> / <code>convert_to</code>?</p>",
        "id": 302774151,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665111652
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> , are you still working on <code>lift</code>?</p>",
        "id": 302774156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665111657
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> , are you still working on <code>tfae_have</code> / <code>tfae_finish</code>?</p>",
        "id": 302774164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665111663
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> , are you still working on <code>apply_fun</code>?</p>",
        "id": 302774167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665111666
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> , are you still working on <code>group</code>?</p>",
        "id": 302774174,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665111671
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> and <span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span> , are you still working on <code>zify</code>?</p>",
        "id": 302774176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665111675
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"355764\">@Hanting Zhang</span> , are you still working on <code>nth_rw</code>?</p>",
        "id": 302774177,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665111679
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> , are you still working on <code>filter_upwards</code>?</p>",
        "id": 302774181,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665111683
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> , are you still working on <code>norm_num</code> / <code>norm_num1</code> conv mode?</p>",
        "id": 302774184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665111686
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"480079\">@Evgenia Karunus</span> , are you still working on <code>copy_doc_string</code> / <code>add_decl_doc</code> / <code>add_tactic_doc</code>?</p>",
        "id": 302774185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665111690
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"384542\">@Justus Springer</span> , are you still working on <code>solve_by_elim</code>?</p>",
        "id": 302774187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665111693
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> , are you still working on <code>extract_goal</code>?</p>",
        "id": 302774190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665111698
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303889\">@Alena Gusakov</span> , are you still working on <code>guard_tags</code>?</p>",
        "id": 302774192,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665111703
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"480079\">@Evgenia Karunus</span> , are you still working on <code>#explode</code>?</p>",
        "id": 302774195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665111707
    },
    {
        "content": "<p>No, I'm afraid I've been ill with Covid and then had other commitments. I don't think I'm going to successfully juggle this around my new internship.</p>",
        "id": 302783448,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1665121126
    },
    {
        "content": "<p>I will release my hold on <code>lift</code> for now. I might return to it in the near future.<br>\nThe refactor of <code>lift</code> in mathlib3 has been merged. This should make it quite a bit easier to port to mathlib4.</p>",
        "id": 302784093,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665121673
    },
    {
        "content": "<p>Remember, these aren't <em>commitments</em>, it's totally fine to work on other stuff. The purpose of keeping track here is only to avoid duplicated work since a bunch of people are working on a bunch of little tasks.</p>",
        "id": 302786225,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665123164
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20porting.20assignments/near/299237691\">said</a>:</p>\n<blockquote>\n<p>For an easy tactic, what about the documentation commands <code>copy_doc_string</code>, <code>add_tactic_doc</code>, <code>add_decl_doc</code>? I think the last one has already been implemented in core, so you just have to check that the behavior is sufficient and then PR to remove it from the list</p>\n</blockquote>\n<p>What do you mean by the <code>core</code> here, Lean 4 itself? (This commit? <a href=\"https://github.com/leanprover/lean4/commit/2c0de29dfda46e1cf2995cedd3934fe548cd9901#diff-3ce51f25fd5254dcc48457b22dfec73e612f5973c1811f7b60df29b95e2810efL36\">https://github.com/leanprover/lean4/commit/2c0de29dfda46e1cf2995cedd3934fe548cd9901#diff-3ce51f25fd5254dcc48457b22dfec73e612f5973c1811f7b60df29b95e2810efL36</a>)  <br>\nDo some of these tactics belong to Lean 4?</p>",
        "id": 302796859,
        "sender_full_name": "Evgenia Karunus",
        "timestamp": 1665129106
    },
    {
        "content": "<p>yes</p>",
        "id": 302798069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665129655
    },
    {
        "content": "<p>\"lean core\" means the lean4 repo</p>",
        "id": 302798097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665129670
    },
    {
        "content": "<p>It is simpler not to try to work out what should go in core at this point. Most tactics you write here should go in mathlib4, and if they become useful in lean core then they can be migrated to std4 or core later</p>",
        "id": 302798338,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665129754
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> No, I've abandoned <code>norm_num</code> / <code>norm_mul</code>, <code>tfae_have</code> / <code>tfae_finish</code>, <code>try_for</code>.</p>",
        "id": 302810712,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1665134771
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20porting.20assignments/near/302774176\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> and <span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> , are you still working on <code>zify</code>?</p>\n</blockquote>\n<p>I am very sorry, I have been busy with moving. I'll try to find time to make some progress that is presentable (I actually have some questions that I wanted to ask yesterday, but I couldn't make it. I'll ask them in the evening). In case <code>zify</code> and <code>qify</code> are blocking something, someone else should do them, but it seems to me that we will not switch to Lean4 next week.</p>",
        "id": 302818754,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1665137972
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20porting.20assignments/near/302774177\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"355764\">Hanting Zhang</span> , are you still working on <code>nth_rw</code>?</p>\n</blockquote>\n<p>I think you said Leo wanted to implement it in core so I dropped it</p>",
        "id": 302941158,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1665180318
    },
    {
        "content": "<p>That work is done now: it can be implemented in terms of the <code>pattern (occs := n)</code> conv</p>",
        "id": 302941722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665180627
    },
    {
        "content": "<p>there is still some work to be done to match the interface of <code>nth_rw</code> so would you like to pick it up again <span class=\"user-mention\" data-user-id=\"355764\">@Hanting Zhang</span> ?</p>",
        "id": 302941799,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665180681
    },
    {
        "content": "<p>No it's ok, someone else can pick it up <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 302943462,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1665181678
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20porting.20assignments/near/302774192\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"303889\">Alena Gusakov</span> , are you still working on <code>guard_tags</code>?</p>\n</blockquote>\n<p>So I guess this got lost in the stream but I linked someone else's PR, it looks like they had already done <code>guard_tags</code> so I haven't worked on it since</p>",
        "id": 303049569,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1665253058
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303889\">Alena Gusakov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20porting.20assignments/near/290309874\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/326056-ICERM22-after-party/topic/List.20of.20tactic.20status.20descriptions/near/290006860\">said</a>:</p>\n<blockquote>\n<p><code>guard_tags</code>: goal tagging has changed in Lean 4, now more common to see \"tagged goals\". For example, after an induction. Used for <code>case</code>.  So maybe the syntax needs to be one ident rather than a list of idents. <span class=\"user-mention silent\" data-user-id=\"303889\">Alena Gusakov</span></p>\n</blockquote>\n<p>I should've checked the PRs sooner. It looks like someone already took care of this: <a href=\"https://github.com/leanprover-community/mathlib4/pull/258\">https://github.com/leanprover-community/mathlib4/pull/258</a></p>\n</blockquote>",
        "id": 303049693,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1665253113
    },
    {
        "content": "<p>I've noted that <code>guard_tags</code> is in the PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/258\">https://github.com/leanprover-community/mathlib4/pull/258</a>.</p>",
        "id": 303070140,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665268911
    },
    {
        "content": "<p>I'll officially try <code>tauto</code>! Even though it's <strong><code>B</code></strong>ig and I'm still just getting started, I feel like I know what it should do abstractly, which makes it a lot more tackleable. However, if anyone else would like to work on it in tandem, let me know—I'm more than open to collaborating! :)</p>",
        "id": 303076618,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1665275268
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I was looking to start <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#generalize\">tactic#generalize</a>, but I wanted to ask if you think there will be any particular obstructions to watch for. it's defined here: <a href=\"https://github.com/leanprover-community/lean/blob/283f6ed8083ab4dd7c36300f31816c5cb793f2f7/library/init/meta/interactive.lean#L503\">https://github.com/leanprover-community/lean/blob/283f6ed8083ab4dd7c36300f31816c5cb793f2f7/library/init/meta/interactive.lean#L503</a> and doesn't look terribly complicated.</p>",
        "id": 303288521,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1665418419
    },
    {
        "content": "<p>There is already <a href=\"https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Meta/Tactic/Generalize.lean\">https://github.com/leanprover/lean4/blob/e44fd19074259018b9ddcbdb00209492416bc8ac/src/Lean/Meta/Tactic/Generalize.lean</a> in core btw. But I don't know if it is feature complete with the lean 3 one right now</p>",
        "id": 303291056,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665419417
    },
    {
        "content": "<p>yes, I just noticed that (and it's not actually on mathport list). I was originally looking at <code>generalizes</code>, but that is used only 2 places.</p>",
        "id": 303291336,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1665419524
    },
    {
        "content": "<p>What about just avoiding porting things (at least for now) that are rarely used by removing occurrences of them in mathlib? For example, if I could get rid of those two <code>generalizes</code> uses, would it be fine to just mark it with an <code>S</code>?</p>",
        "id": 303291534,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1665419611
    },
    {
        "content": "<p>I've been working under the assumption that that's a productive way to go for some tactics (e.g. <a href=\"https://github.com/leanprover-community/mathlib/pull/16839\">#16839</a>).<br>\nWith <code>generalizes</code> though it seems like it might not be too annoying to understand and implement (as a macro using <code>generalize</code> even?), and I think there are probably a bunch more places in mathlib where it could be used but isn't (grepping for <code>generalize .*\\n *generalize </code> finds 5 or so) so probably either would be an ok solution?</p>",
        "id": 303292750,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665420054
    },
    {
        "content": "<p>Saying that, I can't even find the two uses you mention, where are they?</p>",
        "id": 303293126,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665420201
    },
    {
        "content": "<p>Ok a macro seems too simplistic, so I'm certainly leaning towards the \"mark it with S\" approach assuming the two uses can be replaced</p>",
        "id": 303293667,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665420457
    },
    {
        "content": "<p>Core <code>generalize</code> now seems to correctly handle multiple generalisations with dependencies between the generalised terms:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n.succ</span> <span class=\"n\">f.succ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">n.succ</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">f.succ</span> <span class=\"bp\">=</span> <span class=\"n\">g</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">    P : (n : Nat) → Fin n → Prop</span>\n<span class=\"cm\">    n : Nat</span>\n<span class=\"cm\">    f : Fin n</span>\n<span class=\"cm\">    m : Nat</span>\n<span class=\"cm\">    g : Fin m</span>\n<span class=\"cm\">    hm : Nat.succ n = m</span>\n<span class=\"cm\">    hg : HEq (Fin.succ f) g</span>\n<span class=\"cm\">    ⊢ P m g</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Support for this sort of thing is why I wrote <code>generalizes</code> back then, so if that's not a concern any more, it shouldn't need porting.</p>",
        "id": 303294435,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1665420796
    },
    {
        "content": "<p>I actually am having trouble finding the two places as well. My count came from Mario's breakdown at the bottom of the tactic portion issue.</p>",
        "id": 303294437,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1665420798
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20porting.20assignments/near/303294435\">said</a>:</p>\n<blockquote>\n<p>Core <code>generalize</code> now seems to correctly handle multiple generalisations with dependencies between the generalised terms:<br>\nSupport for this sort of thing is why I wrote <code>generalizes</code> back then, so if that's not a concern any more, it shouldn't need porting.</p>\n</blockquote>\n<p>Well it still \"needs porting\", but the result of a finding like this is generally that mathport needs to be updated to translate <code>generalizes</code> into <code>generalize</code> , and then the <code>generalizes</code> line can be removed from the syntax file. That's one way to \"finish\" a tactic</p>",
        "id": 303306663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665425888
    },
    {
        "content": "<p>(Although with only two uses a backport removal is also an option)</p>",
        "id": 303306705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665425915
    },
    {
        "content": "<p>The two uses are both false positives: one for a variable named <code>generalizes</code> inside the <code>induction'</code> tactic and one for <code>generalizes'</code> inside the implementation of <code>generalizes</code> (I guess regex end-of-word matching allows quotes, so there are probably many other false positives of the same kind with primed tactics.)</p>",
        "id": 303307886,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665426543
    },
    {
        "content": "<p>(<code>induction'</code> internally uses <code>generalizes</code>, but <code>induction'</code> is also unused in mathlib afair. We use it for the Hitchhiker's Guide and are therefore porting it, but that doesn't need to concern mathport.)</p>",
        "id": 303386692,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1665479252
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"504487\">Sarah Smith</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20porting.20assignments/near/296694161\">said</a>:</p>\n<blockquote>\n<p>Here is a link to view the recording of our mathlib port mentee session today: <a href=\"https://microsoft-my.sharepoint.com/:v:/p/smithsarah/Ee8R0tMZ86NHlCzbBsZNPIQB5YUUVMOxAxOzYhfYWrKQIQ?e=ZB4j3K\">https://microsoft-my.sharepoint.com/:v:/p/smithsarah/Ee8R0tMZ86NHlCzbBsZNPIQB5YUUVMOxAxOzYhfYWrKQIQ?e=ZB4j3K</a></p>\n</blockquote>\n<p>Uh the link has expired, could someone please share the video with me? (Also - did <span class=\"user-mention\" data-user-id=\"504487\">@Sarah Smith</span> end up uploading them to github?)</p>",
        "id": 303407925,
        "sender_full_name": "Evgenia Karunus",
        "timestamp": 1665488198
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"480079\">@Evgenia Karunus</span> Uploaded the two I have to my Google Drive.  Hope that helps. <a href=\"https://drive.google.com/drive/folders/1iWBsDGJX-NngMw-U-PLkN7r1d_cPKcfo?usp=sharing\">vids</a></p>",
        "id": 303494429,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1665512445
    },
    {
        "content": "<p>We could host these videos on the mathlib youtube channel, presumably as private (i.e. URL required to view) videos.</p>",
        "id": 303532462,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665528206
    },
    {
        "content": "<p>(Sorry I couldn't make it to the current meeting; unfortunately I haven't been feeling too well. Hopefully I'll be there next week :) )</p>",
        "id": 303881002,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1665679900
    },
    {
        "content": "<p>Claiming <code>apply_normed</code>.  I updated the tactic sheet.</p>",
        "id": 303892246,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1665683503
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <code>apply_normed</code> is actually in <code>tactic/norm_num.lean</code> within <code>mathlib</code>, so probably should check with you first that you are also not covering this in your current work on <code>norm_num</code>.</p>",
        "id": 303901375,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1665686757
    },
    {
        "content": "<p>no that's fine</p>",
        "id": 303901460,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665686775
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> any issues with having separate files for this then?</p>",
        "id": 303901556,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1665686805
    },
    {
        "content": "<p>you probably want to put it in the same file as well, if there are any conflicts I can clean it up</p>",
        "id": 303901587,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665686816
    },
    {
        "content": "<p>Do I understand it right that <code>doc_string</code> <a href=\"https://github.com/leanprover-community/lean/search?l=C%2B%2B&amp;q=doc_string\">is defined</a> in C++ in Lean 3, and it's <a href=\"https://github.com/leanprover/lean4/search?q=doc_string\">not yet defined</a> in Lean 4?<br>\nWhat's a good approach here, should I copypaste C++ <code>doc_string</code> code from Lean 3 to Lean 4?</p>",
        "id": 304241532,
        "sender_full_name": "Evgenia Karunus",
        "timestamp": 1665865990
    },
    {
        "content": "<p>no, that is a function that returns the doc string on the definition</p>",
        "id": 304263698,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665889427
    },
    {
        "content": "<p>your search isn't finding anything because stuff is camel cased in lean 4</p>",
        "id": 304263753,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665889472
    },
    {
        "content": "<p>and also because github search sucks</p>",
        "id": 304263757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665889481
    },
    {
        "content": "<p>relevant hits include <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.addDocString#src\">src4#Lean.addDocString</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.findDocString?#src\">src4#Lean.findDocString?</a></p>",
        "id": 304263803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665889557
    },
    {
        "content": "<p>Ah! Very nice, thanks.</p>",
        "id": 304307876,
        "sender_full_name": "Evgenia Karunus",
        "timestamp": 1665926176
    },
    {
        "content": "<p>Is the mentor session happening today? I can't connect to the meeting it seems, I've been in the waiting room for a few minutes</p>",
        "id": 305186330,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1666282712
    },
    {
        "content": "<p>I hereby claim <code>split_ifs</code>. I hope to put up a PR for it before too long.</p>",
        "id": 305440145,
        "sender_full_name": "David Renshaw",
        "timestamp": 1666385247
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, could you please take a look at this PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/494/files\">https://github.com/leanprover-community/mathlib4/pull/494/files</a>:</p>\n<ol>\n<li>Is there a way to write the elab insides better than I did?</li>\n<li>What's the appropriate test for this kind of code, I imagine executing <code>copy_doc_string hi → one two</code>, and then checking whether <code>findDocString? env one</code> returns the appropriate docstring? Inside what kind of method would I assert this so that Lean tests validate this automatically?</li>\n</ol>",
        "id": 305740216,
        "sender_full_name": "Evgenia Karunus",
        "timestamp": 1666581870
    },
    {
        "content": "<p>The implementation of the command looks good. To test, you could indeed use <code>findDocString?</code>. Just do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"n\">guard</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">findDocString</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"bp\">``</span><span class=\"n\">one</span> <span class=\"bp\">==</span> <span class=\"n\">some</span> <span class=\"s2\">\"my amazing docstring\"</span>\n  <span class=\"n\">guard</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">findDocString</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"bp\">``</span><span class=\"n\">two</span> <span class=\"bp\">==</span> <span class=\"n\">some</span> <span class=\"s2\">\"my amazing docstring\"</span>\n</code></pre></div>",
        "id": 305740627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666582227
    },
    {
        "content": "<p>On second thought though I think we might not want this command at all, since lean 4 now has the <code>inherit_doc</code> attribute which is used to express this kind of docstring copying. Mathport could translate <code>copy_doc_string hi → one two</code> to <code>attribute [inherit_doc hi] one two</code></p>",
        "id": 305740721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666582304
    },
    {
        "content": "<p>although there may be restrictions on whether you can put docstrings on a foreign definition this way</p>",
        "id": 305740799,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666582330
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, do I understand it right that the main purpose of <code>add_tactic_doc</code> is setting the <code>tactic_doc</code> attribute to some methods, so that <strong>doc-gen</strong> can call <code>get_tactic_doc_entries</code> (<a href=\"https://github.com/leanprover-community/doc-gen/blob/master/src/export_json.lean#L453\">https://github.com/leanprover-community/doc-gen/blob/master/src/export_json.lean#L453</a>) and generate html docs from those?<br>\nSo if I port <code>add_tactic_doc</code> to mathlib 4, I'd want to port all accompanying methods used in <strong>doc-gen</strong> (<code>get_tactic_doc_entries</code>, <code>to_json</code>, <code>to_string</code>)?</p>",
        "id": 305930652,
        "sender_full_name": "Evgenia Karunus",
        "timestamp": 1666654109
    },
    {
        "content": "<p>Yes that would be nice, although hopefully it is not too much work (<code>to_json</code> is just a <code>deriving Json</code> on the struct in all likelihood). You should implement it as an environment extension: look for <code>register*Extension</code> in mathlib4 for examples</p>",
        "id": 305931060,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666654292
    },
    {
        "content": "<p>I'm willing to take a (hopefully short) break from <code>tauto</code> (which so far has been a lot of reading to try to figure out how best to proceed—I want an algorithm I'm sure works!) to try <code>refine_struct</code> and/or <code>pi_instance</code> if no one else would like to try them at this time!</p>\n<p>Where did we land on <code>refine_struct</code>? (I seem to remember last week it was mentioned that <code>refine_struct</code> wasn't used, but I can find quite a few occurrences of it in mathlib.)</p>",
        "id": 306728099,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1666983323
    },
    {
        "content": "<p>What I said at the last meeting is that <code>refine_struct</code> is not used <em>in isolation</em>, it is always followed by <code>pi_instance_derive_field</code></p>",
        "id": 306769660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667002314
    },
    {
        "content": "<p>oops, that is in fact what I meant to say I could find <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> while most are indeed followed by <code>pi_instance_derive_field</code>, a fair number aren’t. though I’m not sure whether the ones that aren’t just as well <em>could</em> be.</p>",
        "id": 306775084,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1667007497
    },
    {
        "content": "<p>If nobody objects, I would do <code>convert_to</code> and <code>ac_change</code>.</p>",
        "id": 306783052,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1667015519
    },
    {
        "content": "<p>Hopefully <code>convert_to</code> is quite straightforward: <code>convert</code> is already in. I'd love to have <code>ac_refl</code>, as already we've encountered missing it in porting files.</p>",
        "id": 306791737,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1667024367
    },
    {
        "content": "<p>For some reason I thought you also did <code>ac_refl</code>..</p>",
        "id": 306792270,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1667024875
    },
    {
        "content": "<p>There is an <code>ac_rfl</code> in core due to <span class=\"user-mention\" data-user-id=\"235513\">@Daniel Fabian</span>, see <a href=\"https://github.com/leanprover/lean4/blob/c672046767611565b84729db06a7c416625591b4/src/Lean/Meta/Tactic/AC/Main.lean\">https://github.com/leanprover/lean4/blob/c672046767611565b84729db06a7c416625591b4/src/Lean/Meta/Tactic/AC/Main.lean</a></p>",
        "id": 307175049,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1667241402
    },
    {
        "content": "<p>Unfortunately the relationship between that <code>ac_rfl</code> tactic and the mathlib tactic is not clear. We might be able to just check it off the list but we should create test cases and make sure it has the right functionality first.</p>",
        "id": 307177393,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667242177
    },
    {
        "content": "<p>Yes it seems there are some problems, or at least a disconnect between <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsAssociative#doc\">docs4#IsAssociative</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.IsAssociative#doc\">docs4#Lean.IsAssociative</a></p>",
        "id": 307180179,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1667243005
    },
    {
        "content": "<p>Likewise with <code>IsCommutative</code> and <code>IsIdempotent</code></p>",
        "id": 307180379,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1667243063
    },
    {
        "content": "<p>The fix for that is to add an instance <code>[IsAssociative f] : Lean.IsAssociative f</code></p>",
        "id": 307203458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667250876
    },
    {
        "content": "<p>Sure, my point is that its rather strange that we have two classes doing exactly the same thing</p>",
        "id": 307205621,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1667251740
    },
    {
        "content": "<p>The instances</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">IsAssociative</span> <span class=\"n\">R</span> <span class=\"n\">op</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Lean.IsAssociative</span> <span class=\"n\">op</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"k\">with</span><span class=\"o\">}</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">IsCommutative</span> <span class=\"n\">R</span> <span class=\"n\">op</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Lean.IsCommutative</span> <span class=\"n\">op</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"k\">with</span><span class=\"o\">}</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">IsIdempotent</span> <span class=\"n\">R</span> <span class=\"n\">op</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Lean.IsIdempotent</span> <span class=\"n\">op</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"k\">with</span><span class=\"o\">}</span>\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Semigroup</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">IsAssociative</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">*</span> <span class=\"bp\">.</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">assoc</span> <span class=\"o\">:=</span> <span class=\"n\">mul_assoc</span><span class=\"o\">}</span>\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">CommSemigroup</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">IsCommutative</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">*</span> <span class=\"bp\">.</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">comm</span> <span class=\"o\">:=</span> <span class=\"n\">mul_comm</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>give me a <code>ac_rfl</code> that works ok with goals in mathlib <code>Ring</code>s</p>",
        "id": 307205740,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1667251793
    },
    {
        "content": "<p>I've put up a PR at <a href=\"https://github.com/leanprover-community/mathlib4/pull/526\">mathlib4#526</a> for the port of <code>linarith</code>.</p>\n<p>There are still some remaining issues, but the core functionality, and many tests, are working. Tomorrow I'll write up a TODO list of things that should happen before and/or after merging this PR.</p>",
        "id": 307252276,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1667282789
    },
    {
        "content": "<p>the <code>ac_rfl</code> is meant to be part of a much more complex rewriting modulo ac. The way you'd go about it is using an ac normalization, matching in that transformed world and then use <code>ac_rfl</code> to justify your matching. That said, it's quite a lot of work and fairly complex. So far, I didn't get to the matching and rewriting parts, yet. Not least due a change in my personal circumstances that make it hard for me to contribute much code these days. However, <code>ac_rfl</code> is useful in its own right. All you need is to provide a combination of <code>Lean.IsAssociative</code>, <code>Lean.IsCommutative</code>, <code>Lean.IsNeutral</code> and <code>Lean.IsIdempotent</code> and it'll use them to synthesize a proof. The nice thing is that your proof is short, using kernel computation instead of huge proof terms.</p>\n<p>If anyone wants a bit of info how it works, just reach out.</p>\n<p>(Also I had to add the <code>Lean.IsAssociative</code>, <code>Lean.IsCommutative</code>, <code>Lean.IsNeutral</code> and <code>Lean.IsIdempotent</code> because they are used for <code>ac_rfl</code> and we don't have a mathlib dependecy)</p>",
        "id": 307315593,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1667310755
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"235513\">@Daniel Fabian</span> I'd definitely be interested in having some implementation rewriting modulo AC and would be willing to work on it a bit. Do you have a roadmap or reference you were looking at for that? I found some relevant prior work in Coq, that I think is now <a href=\"https://github.com/coq-community/aac-tactics\">https://github.com/coq-community/aac-tactics</a>. Was that the sort of approach you were thinking of or did you have a different design in mind?</p>",
        "id": 307524190,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1667396205
    },
    {
        "content": "<p>no, the idea was quite along the quoted paper. In fact we took plenty of inspiration from there. They explain the general idea that you need a matching algorithm, rewriting and then you use <code>ac_rfl</code> to justify your steps. </p>\n<p>One thing we do differently from the paper if memory serves, is that we don't deal with multiple operators at once in the kernel, but rather in the meta program. This allows us to have a somewhat simpler theorem (only dealing with one operator at a time) and it allows us to also use <code>ac_rfl</code>in types, inside binders, etc. </p>\n<p>The next step would then be something that implements ac <em>matching</em>, i.e. find a substitution such that after substituting the terms are identical modulo ac.</p>\n<p>And finally, we'll want to do rewriting in the various subexpressions that constituted the match which in turn will have to be justified by a few <code>ac_rfl</code> calls.</p>",
        "id": 307546303,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1667401670
    },
    {
        "content": "<p>one design goal here is to never <em>normalize</em>, but rather leave the user term as intact as possible. So we'd only replace the specific subterms that were rewritten, but wouldn't change brackets, orders of things, etc.</p>",
        "id": 307546708,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1667401761
    },
    {
        "content": "<p>FYI: I won't be able to make it to the tactic porting session because I'm attending the FLAIM conference ( <a href=\"https://indico.math.cnrs.fr/event/8087/\">https://indico.math.cnrs.fr/event/8087/</a> )</p>",
        "id": 307558193,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1667404607
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span>, thanks for doing <code>zify</code> in <a href=\"https://github.com/leanprover-community/mathlib/pull/517\">#517</a>. However for <code>linarith</code> I need the \"plumbing\" part as well as the \"porcelain\". Could I tempt you into providing <code>zify_proof</code> from mathlib3 as well?</p>",
        "id": 307651240,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1667445916
    },
    {
        "content": "<p>(This isn't holding up <code>linarith</code>, but we'll need it to implement the <code>natToInt</code> preprocessor which is essential for <code>linarith</code> working over <code>ℕ</code>.)</p>",
        "id": 307651275,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1667445960
    },
    {
        "content": "<p>it doesn't look that bad, but I will not have time for that in the next few days.</p>",
        "id": 307658927,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1667452509
    },
    {
        "content": "<p>I'm almost finished implementing <code>refine_struct</code> functionality, but just realized I never officially claimed it! I'll also claim <code>pi_instance</code> while I'm at it. :)</p>",
        "id": 309083750,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1668115811
    },
    {
        "content": "<p>I'm looking at <code>solve_by_elim</code> now. I updated the <a href=\"https://github.com/leanprover-community/mathlib4/issues/430#issue-1378750164\">github issue</a>.</p>",
        "id": 310448978,
        "sender_full_name": "David Renshaw",
        "timestamp": 1668616282
    },
    {
        "content": "<p><code>add_tactic_doc</code> question: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/doc_commands.lean#L186-L188\">these 3 lines</a> add a declaration (e.g. <code>tactic_doc.hole_command.hi</code>) and add the docstring we derived to that declaration. Is there still a reason you can think of to do this in the Mathlib 4 version if we could use <code>SimplePersistentEnvExtension</code> and just store the declaration &amp; the accompanying docstring in the environment?</p>",
        "id": 310554829,
        "sender_full_name": "Evgenia Karunus",
        "timestamp": 1668668841
    },
    {
        "content": "<p>yes, we should just use an environment extension here.</p>",
        "id": 310555061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668668977
    },
    {
        "content": "<p>Can someone who knows how to write tactics have a look at <a href=\"https://github.com/leanprover-community/mathlib4/pull/627\">mathlib4#627</a>? I've ported <code>Algebra.Order.Hom.Basic</code>, but at the end there an extension for the <code>positivity</code> tactic, and I don't know anything about metaprogramming. Thanks!</p>",
        "id": 310664174,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668707327
    },
    {
        "content": "<p>Oh I can try having a look.</p>",
        "id": 310676919,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668711364
    },
    {
        "content": "<p>What's the plan for tests? <code>test.positivity</code> can't be ported because it requires a bunch more files, but of course we should have the test before all extensions are ported.</p>",
        "id": 310676934,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668711369
    },
    {
        "content": "<p>My suggestion: do a partial port of <code>test.positivity</code> with the tests we can do already and leave the rest in a comment saying that they need <code>X</code> theory files ported in order to work.</p>",
        "id": 310678109,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668711685
    },
    {
        "content": "<p>comment out any tactic code for now. Those are handled with a separate PR</p>",
        "id": 310679493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668712060
    },
    {
        "content": "<p>we port tactics as they become necessary / according to how important they are, not based on when they show up in the import hierarchy</p>",
        "id": 310679687,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668712111
    },
    {
        "content": "<p>also, we already have <code>test.positivity</code>, and half of the tests are indeed commented out. Those serve as indication that we aren't done yet, and PRs that add more extensions uncomment the tests</p>",
        "id": 310679984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668712191
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20porting.20assignments/near/309083750\">said</a>:</p>\n<blockquote>\n<p>I'm almost finished implementing <code>refine_struct</code> functionality, but just realized I never officially claimed it! I'll also claim <code>pi_instance</code> while I'm at it. :)</p>\n</blockquote>\n<p>Any news on those? It looks like I'll need them for <a href=\"https://github.com/leanprover-community/mathlib4/pull/642\">mathlib4#642</a></p>",
        "id": 310924088,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1668806738
    },
    {
        "content": "<p>Yep! I’m writing docstrings so that the <code>refine_struct</code> functionality can pass linting on the branch <code>thorimur/refine_struct-via-StructInst</code> of mathlib4; it currently works, but there are a couple of syntax/design choices we might want to tweak, then it’ll be done.</p>\n<p>I’ll see if I can get the <code>pi_instance</code> functionality done in the next few days!</p>",
        "id": 311080327,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1668901772
    },
    {
        "content": "<p>Hi, since I finished all my metaprogramming assignments, I want to port another tactic. Is there anything that is nontrivial, but not too big? I was looking at <code>mono</code> and <code>nth_rewrite</code>, but they still seem at bit scary</p>",
        "id": 311921922,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1669246341
    },
    {
        "content": "<p>Presumably <code>cc</code> also looks scary? I only mention it because I just wrote about 15 lines of lean 4 code when porting a file when in lean 3 it just said <code>cc</code></p>",
        "id": 311922106,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669246524
    },
    {
        "content": "<p><code>cc</code> looks even worse</p>",
        "id": 311922329,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1669246701
    },
    {
        "content": "<p>I bet you could do <code>nth_rewrite</code> by now!</p>",
        "id": 311923302,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1669247522
    },
    {
        "content": "<p>How about <code>apply_assumption</code>? It came up in a file and I was just going to circumvent it for now.</p>",
        "id": 311923944,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669248042
    },
    {
        "content": "<p>oh, you could get this testcase of <code>solve_by_elim</code> working: <a href=\"https://github.com/leanprover-community/mathlib4/blob/f017f329a16e78f031a193107cb7fbdb866d0d22/test/SolveByElim.lean#L57-L59\">https://github.com/leanprover-community/mathlib4/blob/f017f329a16e78f031a193107cb7fbdb866d0d22/test/SolveByElim.lean#L57-L59</a></p>",
        "id": 311924413,
        "sender_full_name": "David Renshaw",
        "timestamp": 1669248325
    },
    {
        "content": "<p>the missing piece is trying <code>symm</code> on assumptions</p>",
        "id": 311924431,
        "sender_full_name": "David Renshaw",
        "timestamp": 1669248348
    },
    {
        "content": "<p>this is related to <code>apply_assumption</code></p>",
        "id": 311924445,
        "sender_full_name": "David Renshaw",
        "timestamp": 1669248361
    },
    {
        "content": "<p>thanks for the suggestions, I can look into the <code>solve_by_elim</code> issue (and I claim <code>nth_rewrite</code> for now)</p>",
        "id": 311927440,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1669251152
    },
    {
        "content": "<p>[deleted]</p>",
        "id": 311930600,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669254577
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20porting.20assignments/near/311923944\">said</a>:</p>\n<blockquote>\n<p>How about <code>apply_assumption</code>? It came up in a file and I was just going to circumvent it for now.</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/708\">mathlib4#708</a> for the trivial version.</p>",
        "id": 312017385,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1669297136
    },
    {
        "content": "<p>Jireh, if you need any of the additional features right away, please let me know</p>",
        "id": 312028410,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1669300371
    },
    {
        "content": "<p>Thanks! It won't be until tomorrow that I will check it.</p>",
        "id": 312029418,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669300662
    },
    {
        "content": "<p>no need to hurry - I have enough metaprogramming projects for now</p>",
        "id": 312085778,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1669324833
    },
    {
        "content": "<p>Hi, I ported the non-tactic part of <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#lift\">tactic#lift</a>, see <a href=\"https://github.com/leanprover-community/mathlib4/pull/723\">mathlib4#723</a>. What should I read about porting tactic code? I forgot (almost) everything we were taught in summer.</p>",
        "id": 312122750,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669357293
    },
    {
        "content": "<p>The best places to start are probably reading other tactics in `mathlib4, the <a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book\">Metaprogramming in Lean 4</a> book (which doesn't actually explain much about tactic-rewriting per-se, it is more about the internals), and there are a handful of videos on the <a href=\"https://www.youtube.com/channel/UCWe5B7Ikr0AI9727doEUxPg/videos\">youtube channel</a>.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"channel\" href=\"https://www.youtube.com/channel/UCWe5B7Ikr0AI9727doEUxPg/videos\"><img src=\"https://uploads.zulipusercontent.net/1476da0df5fee77805dce548fc04444608bb654b/68747470733a2f2f692e7974696d672e636f6d2f76692f6368616e6e656c2f64656661756c742e6a7067\"></a></div>",
        "id": 312223934,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669394341
    },
    {
        "content": "<p>I've noticed that <code>inhabit</code> in Mathlib4 does the <code>Prop</code>/<code>Type</code> cases incorrectly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">tmp</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">inhabit</span> <span class=\"n\">α</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span>\n  <span class=\"n\">assumption</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">tmp</span>\n<span class=\"c1\">-- 'tmp' depends on axioms: [Classical.choice]</span>\n</code></pre></div>",
        "id": 312296629,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669442202
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 312383578,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669487520
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 312383677,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669487569
    },
    {
        "content": "<p>linarith has finally arrived in mathlib4! :-)</p>",
        "id": 312737674,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669676532
    },
    {
        "content": "<p>That's a milestone! Great job!</p>",
        "id": 312781186,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1669706481
    },
    {
        "content": "<p>This is fantastic news!</p>",
        "id": 312784648,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1669708347
    },
    {
        "content": "<p>Did you find a way to compile it so that we can figure out whether it's faster than in Lean 3?</p>",
        "id": 312784762,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1669708432
    },
    {
        "content": "<p>No, I don't know how to do this. (I haven't tried.)</p>",
        "id": 312893256,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669742536
    },
    {
        "content": "<p>We should also be sure that the implementation doesn't have any subtle performance issues first before comparing, e.g <a href=\"https://github.com/leanprover-community/mathlib4/pull/694\">mathlib4#694</a> or analogous issues may affect linarith still</p>",
        "id": 312893615,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1669742638
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> Apologies for the delay—I didn't have the time over the past holiday week that I thought I would! I've started working on <code>pi_instance</code> again, and hope to have it done within a few days from <em>now</em>, which should hopefully be a more reliable estimate now that things are back to normal.</p>",
        "id": 312978359,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1669777859
    },
    {
        "content": "<p>Thanks for letting me know. I'm not blocked on this anymore, though</p>",
        "id": 312992879,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1669788730
    },
    {
        "content": "<p>Note that there were some bugs in the Lean3 version of <code>pi_instance</code>.</p>",
        "id": 313005672,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669795772
    },
    {
        "content": "<p>I remember that we had to explicitly provide all data fields to avoid extra <code>id</code>s or something like that in the generated fields.</p>",
        "id": 313005787,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669795809
    },
    {
        "content": "<p>Thanks, I’ll keep an eye out for that! iirc (from what I’ve read of the code/tests) that might actually have come from <code>refine_struct</code>, which is used in <code>pi_instance</code>. so hopefully that issue will be automatically solved since we’re porting <code>refine_struct</code>’s functionality in a different way!</p>",
        "id": 313009486,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1669797392
    },
    {
        "content": "<p>AFAIR, in one of the versions the tactic in fact failed to generate data fields, and was recovering them by unification. I don't remember if this was fixed.</p>",
        "id": 313426073,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669956158
    },
    {
        "content": "<p>nlinarith has arrived as well now, if anyone would like to abuse it and report failures. :-)</p>",
        "id": 313554189,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670003251
    },
    {
        "content": "<p>We have a few high priority tactics <span aria-label=\"fire\" class=\"emoji emoji-1f525\" role=\"img\" title=\"fire\">:fire:</span> still in need of porting before the end of the year. Is anyone available to jump in and help us out on these remaining items? We would really appreciate it! <span aria-label=\"star struck\" class=\"emoji emoji-1f929\" role=\"img\" title=\"star struck\">:star_struck:</span> </p>\n<ol>\n<li>polyrith, interval cases, slim_check (front end)</li>\n<li>adding these options to apply_rules:<br>\n     a) at the step where newly-created goals are checked against the list of hypotheses, check against a specified list of hypotheses rather than all hypotheses, see<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/d032ed1dcb4e8b3fcc07c8fc92e0a7423b732b87/src/tactic/core.lean#L1029\">https://github.com/leanprover-community/mathlib/blob/d032ed1dcb4e8b3fcc07c8fc92e0a7423b732b87/src/tactic/core.lean#L1029</a><br>\n     b) where hypotheses have a natural symmetry (e.g. equality hypotheses), check against the symms of the hypotheses as well as the hypotheses themselves</li>\n</ol>",
        "id": 313711324,
        "sender_full_name": "Sarah Smith",
        "timestamp": 1670086028
    },
    {
        "content": "<p>I could be mistaken, but I don't think polyrith is high priority because it's a self-replacing tactic.</p>",
        "id": 313714632,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1670088119
    },
    {
        "content": "<p>\"High-priority\" here is for a certain definition of priority :) It includes requests that people planning to teach next semester with Lean 4 (including <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> and myself) have made.</p>",
        "id": 313714932,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670088247
    },
    {
        "content": "<p>Aha, gotcha.</p>",
        "id": 313714956,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1670088266
    },
    {
        "content": "<p>To clarify on the request for <code>apply_rules</code> (2a), the request is to have support for <code>apply_rules only [X, Y, Z]</code>, which will not use other local hypotheses. Possibly also support for <code>apply_rules [-X, -Y, Z]</code>to omit particular local hypotheses.</p>",
        "id": 313719369,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670091021
    },
    {
        "content": "<p>You guys are very brave! I'm teaching next semester with Lean 3 and I'm telling everyone that this will be the last time I'm doing it.</p>",
        "id": 313726729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670095906
    },
    {
        "content": "<p>Re: <code>apply_rules</code>, I am doing a big refactor of <code>solve_by_elim</code> during my interminable plane flights and layovers. I suspect that I can reimplement <code>apply_rules</code> as a thin layer around <code>solve_by_elim</code> with appropriate options, and then we should get the asked-for goodies for free.</p>",
        "id": 313752458,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670117558
    },
    {
        "content": "<p>I had the <code>symm</code> feature for <code>solve_by_elim</code> on my list, is that included in your refactor?</p>",
        "id": 313752585,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1670117684
    },
    {
        "content": "<p>I haven't done it yet.</p>",
        "id": 313752623,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670117735
    },
    {
        "content": "<p>But I have another long flight to go. :-)</p>",
        "id": 313752626,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670117741
    },
    {
        "content": "<p>However a simultaneous refactor will definitely not work, as I've rewritten most lines by now.</p>",
        "id": 313752652,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670117762
    },
    {
        "content": "<p>I'll PR whatever state it is in tomorrow.</p>",
        "id": 313752683,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670117769
    },
    {
        "content": "<p>if you want to do it, feel free. if not I will wait until your refactors are done</p>",
        "id": 313752817,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1670117941
    },
    {
        "content": "<p>I've just stumbled upon <code>@[mono]</code> and I wonder whether we have to port the tactic or aesop can replace it.</p>",
        "id": 316185305,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1671163746
    },
    {
        "content": "<p>After a quick look at <code>mono</code>, it seems like Aesop could probably replace terminal <code>mono*</code> calls, but not non-terminal <code>mono</code> calls. <code>ac_mono*</code> would be tricky but maybe doable.</p>",
        "id": 316258985,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1671195407
    },
    {
        "content": "<p>Is anyone working on porting <code>lift</code>? If not, I could have a go at it.</p>",
        "id": 316507246,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1671308868
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> ?</p>",
        "id": 316509308,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671310286
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/723\">mathlib4#723</a> : seems like it's mostly done in case you want to get it to build again.</p>",
        "id": 316515586,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1671314889
    },
    {
        "content": "<p>(double posting to look for help) <code>positivity</code> and <code>norm_num</code>  can now be finished with <code>data.rat.order</code> ported! Is anyone interested in picking these two tactics up? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>   <a href=\"#narrow/stream/287929-mathlib4/topic/port.20progress/near/317273090\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/port.20progress/near/317273090</a></p>",
        "id": 317273587,
        "sender_full_name": "Sarah Smith",
        "timestamp": 1671670060
    },
    {
        "content": "<p>Does <code>ring</code> also need some updates, now that <code>data.rat.order</code> is in?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Rat.Order</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">u</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">unsolved goals</span>\n<span class=\"cm\">u: ℚ</span>\n<span class=\"cm\">⊢ u / 2 * 2 = u</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>This worked in mathlib3.  cc <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 317612734,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671816529
    },
    {
        "content": "<p>yes</p>",
        "id": 317614293,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671817152
    },
    {
        "content": "<p>I see that <code>ring</code> imports <code>norm_num</code>.  Will the <code>rat</code> functionality for <code>norm_num</code> (i.e. <a href=\"https://github.com/leanprover-community/mathlib4/pull/1102\">mathlib4#1102</a>) be enough, or is there more work required beyond that?</p>",
        "id": 317616591,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671818027
    },
    {
        "content": "<p>a bit more work is required, because ring has to recognize that <code>u / 2</code> means <code>1/2 * u</code></p>",
        "id": 317616994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671818197
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/1189\">mathlib4#1189</a> to record this.</p>",
        "id": 317618486,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671818792
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20porting.20assignments/near/316515586\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/723\">mathlib4#723</a> : seems like it's mostly done in case you want to get it to build again.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> Feel free to adopt the <code>lift</code> tactic.</p>",
        "id": 317994208,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1672080906
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"504487\">@Sarah Smith</span> reached out to me about porting the remaining <code>norm_num</code> <code>Rat</code>-dependent functionality, and now that I'm a bit more familiar with <code>norm_num</code>, I'm interested in taking it on (<a href=\"https://github.com/leanprover-community/mathlib4/pull/1102\">mathlib4#1102</a>).</p>\n<p>But: is the specific functionality we still need to port outlined anywhere? Are we following <code>mathlib</code> at all? The implementation looks...a bit different. If anyone already knows what specific extensions we need, that would be a great help.</p>\n<p>(Or, if part of the task is to figure out new ones for mathlib4 such that all the examples work, I'm happy to try that!)</p>",
        "id": 319873742,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673044036
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 319876905,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1673045498
    },
    {
        "content": "<p>The main changes are:</p>\n<ul>\n<li>norm_num should be using <code>Rat</code> instead of <code>Int</code> for representing constants</li>\n<li>we need an evaluator for division and inverse</li>\n</ul>",
        "id": 319886800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673051731
    }
]