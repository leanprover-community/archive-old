[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/938\">mathlib4#938</a>, which is on the critical path, is down to one annoying error, which I wouldn't mind some help with.</p>",
        "id": 315698772,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670970357
    },
    {
        "content": "<p>We get to a point where the goal is <code>¬↑(k + 2) &lt; (2 : ℤ)</code>, and the translated proof is <code>by decide</code>, but this doesn't work, with <code>expected type must not contain free or meta variables</code>. Trying instead <code>by revert k; decide</code> gives <code>failed to synthesize  Decidable (∀ (k : ℕ), ↑(k + 2) &lt; 2 → 0 ≤ ↑(k + 2) → ¬↑(k + 2) &lt; 2)</code>.</p>",
        "id": 315698960,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670970439
    },
    {
        "content": "<p>Happy to have either a fix/explanation of how to get <code>decide</code> working there, or any arbitrary workaround.</p>",
        "id": 315698986,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670970457
    },
    {
        "content": "<p>Yeah that error is a bit patronizing.  I wonder if we should just add a <code>decide!</code> tactic.</p>",
        "id": 315699790,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1670970771
    },
    {
        "content": "<p>Presumably this worked before because <code>int.lt</code> was defined inductively in a way that made it always true?</p>",
        "id": 315700974,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670971318
    },
    {
        "content": "<p>it's still defined like that</p>",
        "id": 315701965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670971768
    },
    {
        "content": "<p><code>decide</code> just doesn't want to try reducing an open term to <code>ofTrue</code></p>",
        "id": 315701997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670971788
    },
    {
        "content": "<p>FYI we already have a <code>decide!</code> tactic</p>",
        "id": 315702068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670971805
    },
    {
        "content": "<p>it reverts everything before calling <code>decide</code></p>",
        "id": 315702094,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670971818
    },
    {
        "content": "<p>I think we should just remove the error message, and instead only use that check to enable the fast path</p>",
        "id": 315702179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670971860
    },
    {
        "content": "<p>The more immediate question here is that <code>decide!</code> is not working either, and this is what I would like help with.</p>",
        "id": 315703903,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670972567
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">emod_two_eq_zero_or_one</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">abs_of_nonneg</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">)</span> <span class=\"bp\">▸</span> <span class=\"n\">Int.emod_lt</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">Int.emod_nonneg</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">)</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h₁</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">_</span> <span class=\"o\">,</span><span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">_</span> <span class=\"o\">,</span><span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"n\">h</span> <span class=\"bp\">$</span> <span class=\"n\">False.elim</span> <span class=\"bp\">$</span> <span class=\"n\">h₁.not_le</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.cast_add</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">le_add_iff_nonneg_left</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">NonNeg.mk</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h₁</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h₁</span>\n</code></pre></div>\n<p>is a proof if you want to keep the port moving while you worry about decidability.</p>",
        "id": 315704551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670972828
    },
    {
        "content": "<p>I made an issue for this, linked to it, and will merge the PR now.</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/issues/994\">https://github.com/leanprover-community/mathlib4/issues/994</a></p>",
        "id": 315706131,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670973504
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> The `simpNF` linter reports:</span>\n<span class=\"cm\">SOME SIMP LEMMAS ARE NOT IN SIMP-NORMAL FORM.</span>\n<span class=\"cm\">see note [simp-normal form] for tips how to debug this.</span>\n<span class=\"cm\">https://leanprover-community.github.io/mathlib_docs/notes.html#simp-normal%20form -/</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">natAbs_dvd_iff_dvd</span> <span class=\"c\">/-</span><span class=\"cm\"> Left-hand side simplifies from</span>\n<span class=\"cm\">  natAbs a ∣ natAbs b</span>\n<span class=\"cm\">to</span>\n<span class=\"cm\">  (match a with</span>\n<span class=\"cm\">  | ofNat m =&gt; m</span>\n<span class=\"cm\">  | -[m+1] =&gt; Nat.succ m) ∣</span>\n<span class=\"cm\">  match b with</span>\n<span class=\"cm\">  | ofNat m =&gt; m</span>\n<span class=\"cm\">  | -[m+1] =&gt; Nat.succ m</span>\n<span class=\"cm\">using</span>\n<span class=\"cm\">  simp only [Int.natAbs]</span>\n<span class=\"cm\">Try to change the left-hand side to the simplified term!</span>\n<span class=\"cm\"> -/</span>\n</code></pre></div>",
        "id": 315707389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670974076
    },
    {
        "content": "<p><code>natAbs a</code> gets \"simplified\" to that mess??</p>",
        "id": 315707476,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670974102
    },
    {
        "content": "<p>Did someone tag <code>Int.natAbs</code> with <code>simp</code>?</p>",
        "id": 315707530,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670974132
    },
    {
        "content": "<p>Yes, it seems <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> did 3 days ago.</p>",
        "id": 315707602,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670974169
    },
    {
        "content": "<p>In Lean 3, it meant constructor applications would get simplified. Did that change in Lean 4?</p>",
        "id": 315707753,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670974232
    },
    {
        "content": "<p>Yes.</p>",
        "id": 315707951,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670974331
    },
    {
        "content": "<p>This (PR) is fixed now.</p>",
        "id": 315707960,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670974337
    },
    {
        "content": "<p>Well that's my new lean 4 fact of the day</p>",
        "id": 315708194,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670974448
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EInt.2EOrder.2EBasic/near/315707602\">said</a>:</p>\n<blockquote>\n<p>Yes, it seems <span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> did 3 days ago.</p>\n</blockquote>\n<p>I blame mathport, I only changed it from <code>nat_abs</code> :)</p>",
        "id": 315737614,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1670994910
    },
    {
        "content": "<p>Yeah it's the change in behaviour which spiked us.</p>",
        "id": 315756692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671005348
    }
]