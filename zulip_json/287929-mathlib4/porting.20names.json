[
    {
        "content": "<p>What is our intention fixing up names from <code>mathport</code>s output? e.g. currently <code>mathport</code> changes the typeclass <code>is_empty</code> to <code>IsEmpty</code> (great!), but then leaves the name of lemmas like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">is_empty_ulift</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">IsEmpty</span> <span class=\"o\">(</span><span class=\"n\">ULift</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">IsEmpty</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>as they were.</p>\n<p>I'm hoping/proposing that for now we <em>don't</em> manually change the names of these lemmas as porting happens, for compatibility between files.</p>\n<p>One day (TM) we can hope for nice code helpers to do renaming across the whole library, right? :-)</p>",
        "id": 303389061,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665480180
    },
    {
        "content": "<p>Another view on this question is: should we plan to improve mathport's name translation, or should we declare it canonical for now?</p>",
        "id": 303389651,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665480406
    },
    {
        "content": "<p>there are certainly issues in mathport name translation where it can't possibly know how a name should be chunked up. Common cases of this are when a theorem about <code>my_foo</code> and <code>my_bar</code> was called <code>my_foo_eq_my_bar</code> and the functions were renamed to <code>myFoo</code> and <code>myBar</code> so the theorem should now be <code>myFoo_eq_myBar</code>. Given that there might also be definitions <code>my</code> and <code>foo</code> this is just a fundamentally ambiguous problem</p>",
        "id": 303396595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665483387
    },
    {
        "content": "<p>check out the names of the lemmas for the interactions of <code>filter</code>, <code>map</code> and <code>filter_map</code> <span aria-label=\"bangbang\" class=\"emoji emoji-203c\" role=\"img\" title=\"bangbang\">:bangbang:</span></p>",
        "id": 303396703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665483442
    },
    {
        "content": "<p>I think we shouldn't gratuitously change the names, but on the other hand if we're going to do a name translation we should be allowed to do it on the spot and accommodate later uses with an <code>#align</code> annotation</p>",
        "id": 303397039,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665483587
    },
    {
        "content": "<p>Sorry, what is an <code>#align</code> annotation?</p>",
        "id": 303443431,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1665496635
    },
    {
        "content": "<p>see <a href=\"https://leanprover-community.github.io/blog/posts/intro-to-mathport/\">https://leanprover-community.github.io/blog/posts/intro-to-mathport/</a><br>\nand <a href=\"https://github.com/leanprover-community/mathlib4/blob/1203930f75e86aa6260e8c1b9e5b5fbeed7656b7/Mathlib/Mathport/Rename.lean#L34\">https://github.com/leanprover-community/mathlib4/blob/1203930f75e86aa6260e8c1b9e5b5fbeed7656b7/Mathlib/Mathport/Rename.lean#L34</a></p>",
        "id": 303448826,
        "sender_full_name": "David Renshaw",
        "timestamp": 1665498123
    }
]