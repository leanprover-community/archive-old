[
    {
        "content": "<p>Can we make \"Try this\" work in the Lean4 VScode? Maybe there are plans to have a better solution in the future, but I think it's really useful to have a tmp fix as well.</p>",
        "id": 319751401,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673000103
    },
    {
        "content": "<p>Doesn't even have to be via the extension. If someone knows how to make it work via some other snippet, or so.</p>",
        "id": 319751457,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673000125
    },
    {
        "content": "<p>I hadn't even realised that it wasn't working!  I've had mysterious output before from <code>library_search</code> and <code>abel</code> and I guess that would explain it.</p>",
        "id": 319830068,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673027414
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> should make the call on whether it would be good to introduce a short term solution here</p>",
        "id": 319879796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673047079
    },
    {
        "content": "<p>In the meantime here is one short-term solution:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Widget.UserWidget</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Widget</span>\n\n<span class=\"kd\">@[widget]</span>\n<span class=\"kd\">def</span> <span class=\"n\">tryThisWidget</span> <span class=\"o\">:</span> <span class=\"n\">UserWidgetDefinition</span> <span class=\"n\">where</span>\n    <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Try this\"</span>\n    <span class=\"n\">javascript</span> <span class=\"o\">:=</span> <span class=\"s2\">\"</span>\n<span class=\"s2\">        import * as React from 'react'</span>\n<span class=\"s2\">        import { EditorContext } from '@leanprover/infoview'</span>\n<span class=\"s2\">        const e = React.createElement</span>\n\n<span class=\"s2\">        /**</span>\n<span class=\"s2\">         * @typedef TryThisProps</span>\n<span class=\"s2\">         * @type {object}</span>\n<span class=\"s2\">         * @property {DocumentPosition} pos - where the text cursor is.</span>\n<span class=\"s2\">         * @property {TextEdit} edit - the edit to apply.</span>\n<span class=\"s2\">         */</span>\n<span class=\"s2\">        export default function({pos, edit}) {</span>\n<span class=\"s2\">            const textDocEdit = {</span>\n<span class=\"s2\">                textDocument: {</span>\n<span class=\"s2\">                    uri: pos.uri,</span>\n<span class=\"s2\">                    version: null</span>\n<span class=\"s2\">                },</span>\n<span class=\"s2\">                edits: [edit]</span>\n<span class=\"s2\">            }</span>\n<span class=\"s2\">            const ec = React.useContext(EditorContext)</span>\n<span class=\"s2\">            const aProps = {</span>\n<span class=\"s2\">                className: 'link pointer dim',</span>\n<span class=\"s2\">                onClick: () =&gt; {</span>\n<span class=\"s2\">                    const workspaceEdit = {</span>\n<span class=\"s2\">                        documentChanges: [textDocEdit]</span>\n<span class=\"s2\">                    }</span>\n<span class=\"s2\">                    console.log(workspaceEdit)</span>\n<span class=\"s2\">                    ec.api.applyEdit(workspaceEdit)</span>\n<span class=\"s2\">                }</span>\n<span class=\"s2\">            }</span>\n<span class=\"s2\">            return e('a', aProps, `Try this: ${edit.newText}`)</span>\n<span class=\"s2\">        }</span>\n<span class=\"s2\">    \"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Lean.FileMap.utf8RangeToLspRange</span> <span class=\"o\">(</span><span class=\"n\">text</span> <span class=\"o\">:</span> <span class=\"n\">FileMap</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">:</span> <span class=\"n\">String.Range</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Lsp.Range</span> <span class=\"n\">where</span>\n    <span class=\"n\">start</span> <span class=\"o\">:=</span> <span class=\"n\">text.utf8PosToLspPos</span> <span class=\"n\">range.start</span>\n    <span class=\"bp\">«</span><span class=\"kd\">end</span><span class=\"bp\">»</span> <span class=\"o\">:=</span> <span class=\"n\">text.utf8PosToLspPos</span> <span class=\"n\">range.stop</span>\n\n<span class=\"sd\">/-- Call this from a tactic or other metaprogram in order to display a \"Try this\" link in the infoview</span>\n<span class=\"sd\">when the cursor is on `ref`. When clicked, the link will replace `replaceRef` with `newText`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">saveTryThis</span> <span class=\"o\">(</span><span class=\"n\">ref</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">newText</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">replaceRef</span> <span class=\"o\">:=</span> <span class=\"n\">ref</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">range</span> <span class=\"o\">:=</span> <span class=\"n\">replaceRef.getRange</span><span class=\"bp\">?</span> <span class=\"bp\">|</span>\n        <span class=\"n\">throwError</span> <span class=\"s2\">\"No position associated with syntax '{replaceRef}'. Is it synthetic?\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">text</span> <span class=\"bp\">←</span> <span class=\"n\">getFileMap</span>\n    <span class=\"k\">let</span> <span class=\"n\">textEdit</span> <span class=\"o\">:</span> <span class=\"n\">Lsp.TextEdit</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">range</span> <span class=\"o\">:=</span> <span class=\"n\">text.utf8RangeToLspRange</span> <span class=\"n\">range</span><span class=\"o\">,</span> <span class=\"n\">newText</span> <span class=\"o\">}</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"Try this: {newText}\"</span>\n    <span class=\"n\">saveWidgetInfo</span>\n        <span class=\"bp\">``</span><span class=\"n\">tryThisWidget</span>\n        <span class=\"o\">(</span><span class=\"n\">Json.mkObj</span> <span class=\"o\">[</span>\n            <span class=\"o\">(</span><span class=\"s2\">\"edit\"</span><span class=\"o\">,</span> <span class=\"n\">toJson</span> <span class=\"n\">textEdit</span><span class=\"o\">)</span>\n        <span class=\"o\">])</span>\n        <span class=\"n\">ref</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"secretlyrfl\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">ref</span> <span class=\"bp\">←</span> <span class=\"n\">getRef</span>\n    <span class=\"n\">saveTryThis</span> <span class=\"n\">ref</span> <span class=\"s2\">\"rfl\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">secretlyrfl</span>\n</code></pre></div>",
        "id": 319902672,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1673064869
    },
    {
        "content": "<p>One issue is that this comes up with a non-clickable message, and a separate yes-clickable panel in the infoview. A proper solution would be good but is a little technically involved (a <code>MessageData.ofWidget</code> constructor).</p>",
        "id": 319902875,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1673065090
    }
]