[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib3port/blob/25aba9a00dd0c7af7df362a275829ce34ac8dd48/Mathbin/Algebra/Ring/Opposite.lean#L81-L85\">https://github.com/leanprover-community/mathlib3port/blob/25aba9a00dd0c7af7df362a275829ce34ac8dd48/Mathbin/Algebra/Ring/Opposite.lean#L81-L85</a>, we see</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NoZeroDivisors</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">NoZeroDivisors</span>\n      <span class=\"n\">α</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">where</span> <span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">*</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>which has extraneous <code>x</code> and <code>y</code> on the third line because those are implicit arguments. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is this something mathport could improve?</p>",
        "id": 315593947,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1670939095
    },
    {
        "content": "<p>no, this is the implicit lambda change and it's hard to tell from the input syntax that it is being triggered</p>",
        "id": 315594339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670939170
    },
    {
        "content": "<p>This happens whenever lean 3 uses <code>\\lam x y,</code> to introduce variables in <code>\\forall {x y : foo}, ...</code></p>",
        "id": 315594469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670939210
    },
    {
        "content": "<p>Indeed this comes from <code>\\lam x y</code> in the lean 3 code.</p>",
        "id": 315594783,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1670939293
    },
    {
        "content": "<p>I'm trying to add an explanation to the porting wiki. Is the following accurate enough to do more good than harm?</p>\n<blockquote>\n<p>* If you get an error message containing \"the following variables have been introduced by the implicit lambda feature\", it may be that the Lean 3 code contained a proof term with a lambda introducing an implicit argument and this confused mathport. For instance you could have in Lean 3 <code>example := ∀ {n : ℕ}, ... := λ n, bar</code> which becomes in Lean 4 <code>example := ∀ {n : Nat}, ... := bar</code>.</p>\n</blockquote>",
        "id": 315596477,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1670939792
    }
]