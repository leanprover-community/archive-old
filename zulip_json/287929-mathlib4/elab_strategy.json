[
    {
        "content": "<p>Is there a Lean 4 analog of the <code>elab_strategy</code> attribute? What should we do of it while porting?</p>",
        "id": 319165284,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1672742242
    },
    {
        "content": "<p>I don't exactly know what it does but purely based on naming it sounds like elab_as_elim might be?</p>",
        "id": 319167639,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1672743223
    },
    {
        "content": "<p>I  don't think <code>elab_strategy</code> is ever supposed to be used, the docstring is \"internal attribute for the elaborator strategy for a given constant\"</p>",
        "id": 319170192,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672744181
    },
    {
        "content": "<p>I think it's a bit like the <code>_simp_cache</code> attribute; it's added by other attributes to help out metaprograms, but not intended to be applied by the user.</p>",
        "id": 319170359,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672744236
    },
    {
        "content": "<p>Why not backport removing the attribute and see if anything breaks?</p>",
        "id": 319170380,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672744245
    },
    {
        "content": "<p>There are exactly <a href=\"https://github.com/leanprover-community/mathlib/blob/44b58b42794e5abe2bf86397c38e26b587e07e59/src/data/fin/basic.lean#L1240-L1257\">two uses</a> of <code>elab_strategy</code> in mathlib, in <code>data/fin/basic</code>. Removing that attribute does break <em>statements</em> in the same file.</p>",
        "id": 319192755,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1672751908
    },
    {
        "content": "<p>Maybe <code>@[elab_as_eliminator, elab_strategy]</code> means \"attach the <code>elab_as_eliminator</code> attribute but overwrite the implementation details with the default strategy\"?</p>",
        "id": 319193187,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672752067
    },
    {
        "content": "<p>Debugging with <code>#print</code>, it seems that <code>@[elab_as_eliminator, elab_strategy]</code> means the same as <code>@[elab_strategy]</code> which means <code>@[elab_simple]</code></p>",
        "id": 319193869,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672752271
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>, do you remember why <a href=\"https://github.com/leanprover-community/mathlib/pull/8876/files#r1060583368\">you wrote this</a>?</p>",
        "id": 319194351,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672752412
    },
    {
        "content": "<p>I just sent <a href=\"https://github.com/leanprover-community/mathlib/pull/18049\">#18049</a> and <a href=\"https://github.com/leanprover-community/mathlib/pull/18050\">#18050</a> to CI. Let's see if one of them builds.</p>",
        "id": 319194608,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1672752494
    },
    {
        "content": "<p>I think it was to do with Jordan Holder but I might not habe used it in the end</p>",
        "id": 319202364,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1672754885
    },
    {
        "content": "<p>Both PRs passed CI. Eric expressed a preference for <a href=\"https://github.com/leanprover-community/mathlib/pull/18049\">#18049</a> and delegated so I'll merge this tonight if nobody complains in the next couple of hours.</p>",
        "id": 319240963,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1672766009
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I see no harm in merging right now.</p>",
        "id": 319242154,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672766374
    }
]