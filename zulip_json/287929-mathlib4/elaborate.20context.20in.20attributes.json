[
    {
        "content": "<p>The <code>@[simps]</code> attribute has configuration options. I saw that there is a <code>declare_config_elab</code> command to automatically define a functions that elaborates configuration options. However, this lives in <code>TermElabM</code>, but the code that is executed when executing attributes is in <code>AttrM</code> (<code>= CoreM</code>).<br>\nI tried to use this in <code>@[simps]</code> in a very naive way, but (probably unsurprisingly) that doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_config_elab</span> <span class=\"n\">elabSimpsConfig</span> <span class=\"n\">Simps.Config</span>\n<span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span>\n<span class=\"n\">initialize</span> <span class=\"n\">simpsAttr</span> <span class=\"o\">:</span> <span class=\"n\">ParametricAttribute</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"bp\">←</span>\n  <span class=\"n\">registerParametricAttribute</span> <span class=\"o\">{</span>\n    <span class=\"n\">getParam</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span>\n    <span class=\"bp\">|</span> <span class=\"n\">nm</span><span class=\"o\">,</span> <span class=\"n\">stx</span><span class=\"bp\">@`</span><span class=\"o\">(</span><span class=\"n\">attr</span><span class=\"bp\">|</span><span class=\"n\">simps</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">?%$</span><span class=\"n\">trc</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">c</span><span class=\"o\">)]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">ids</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">cfg</span> <span class=\"bp\">←</span> <span class=\"k\">match</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">{}</span>\n        <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">MetaM.run'</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">TermElabM.run'</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">elabSimpsConfig</span> <span class=\"n\">c</span>\n<span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>What is the right way to do this?<br>\nRelevant PR: <a href=\"https://github.com/leanprover-community/mathlib4/pull/445\">mathlib4#445</a></p>",
        "id": 303904607,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1665687774
    },
    {
        "content": "<p>Btw: <code>@[simps]</code> passes most tests that do not have configuration options.</p>",
        "id": 303904663,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1665687794
    },
    {
        "content": "<p>I recently had cause to run a (fairly elaborate) <code>TermElabM</code> inside <code>AttrM</code> for the norm_num attribute. Perhaps it can give you some ideas</p>",
        "id": 303909662,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665689680
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/2df4e5015eafec1e9d3ca5516a7d6e4f9286e26d/Mathlib/Tactic/NormNum/Core.lean#L156-L162\">https://github.com/leanprover-community/mathlib4/blob/2df4e5015eafec1e9d3ca5516a7d6e4f9286e26d/Mathlib/Tactic/NormNum/Core.lean#L156-L162</a></p>",
        "id": 303909779,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665689731
    },
    {
        "content": "<p>That said I think what you wrote should more or less work; the only part that is going to cause problems if you forget it is <code>withSaveInfoContext</code>, which will make stuff like term goals show up inside the span of the config</p>",
        "id": 303910462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665690017
    },
    {
        "content": "<p>Whenever I add a configuration option to <code>@[simps]</code> (e.g. <code>@[simps (config := {fullyApplied := false})]</code>) I get the errors</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>declaration uses 'sorry'\n\ncannot evaluate code because 'sorryAx' uses 'sorry' and/or contains errors\n</code></pre></div>\n<p>Any ideas what causes this? The errors are in <code>test/Simps</code> of <a href=\"https://github.com/leanprover-community/mathlib4/pull/445\">mathlib4#445</a>.</p>",
        "id": 303917935,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1665692848
    },
    {
        "content": "<p>It's hard to compare your code to mine, since I don't know what parts are already handled by <code>declare_config_elab</code>.</p>",
        "id": 303918463,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1665693029
    },
    {
        "content": "<p>Ah, it's a TSyntax \"type error\"</p>",
        "id": 303918575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665693067
    },
    {
        "content": "<p>Oh, maybe the problem is that <code>elabSimpConfigCore</code> expects an optional configuration...</p>",
        "id": 303918578,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1665693070
    },
    {
        "content": "<p><code>elabSyntaxConfig</code> takes an <code>optConfig</code> directly</p>",
        "id": 303918606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665693082
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">simpsArgsRest</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Tactic.config</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">*</span>\n<span class=\"bp\">...</span>\n      <span class=\"k\">let</span> <span class=\"n\">cfg</span> <span class=\"bp\">←</span> <span class=\"n\">MetaM.run'</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">TermElabM.run'</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">elabSimpsConfig</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">][</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 303919403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665693398
    },
    {
        "content": "<p>Ok, that works! Thanks!<br>\nIs there a way to give the <code>stx[2][0]</code> a name in <code> `(attr|simps $[?%$trc]? $[(config := $c)]? $[$ids]*)</code>? <br>\nDoes it correspond to the whole <code>$[(config := $c)]?</code>?</p>",
        "id": 303919833,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1665693598
    },
    {
        "content": "<p>not that I know of</p>",
        "id": 303922853,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665694867
    },
    {
        "content": "<p>indeed it does</p>",
        "id": 303922875,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665694876
    },
    {
        "content": "<p>you could construct a config syntax from <code>c</code> but that seems wasteful</p>",
        "id": 303922967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665694920
    }
]