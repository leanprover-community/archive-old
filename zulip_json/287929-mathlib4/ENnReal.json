[
    {
        "content": "<p>This is coming up in comments already: what is the mathlib4 capitalisation of <code>ennreal</code>? I think it is probably <code>ENnReal</code>, but ... It's going to be weird whatever we do.</p>",
        "id": 312281556,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669426357
    },
    {
        "content": "<p>Shouldn't non-neg get the LT/LE treatment?</p>",
        "id": 312282003,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1669426859
    },
    {
        "content": "<p>It seems like the naming convention needs to make a distinction between initialisms (such as LT, LE, NE) and abbreviations (such as Eq, Comm). If ENN is an initialism for Extended Non-Negative then it would make sense to capitalize all letters.</p>",
        "id": 312282850,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1669427754
    },
    {
        "content": "<p>Okay! I like that more.</p>",
        "id": 312283371,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669428143
    },
    {
        "content": "<p>maybe one day we can fix the <code>Ne</code> in core. :-)</p>",
        "id": 312283383,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669428160
    },
    {
        "content": "<p>Why not just <code>Ennreal</code>?</p>",
        "id": 312310911,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1669453700
    },
    {
        "content": "<p>I think you know the reason. You just don't agree with it.</p>",
        "id": 312311572,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1669454104
    },
    {
        "content": "<p><code>EnNrEaL</code> /s</p>",
        "id": 312323122,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669460039
    },
    {
        "content": "<p>I understand we have a new naming convention, but we should seriously consider whether it's appropriate when mathlib names are already settled as one atom.</p>",
        "id": 312332863,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1669464300
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"560559\">Richard Osborn</span> <a href=\"#narrow/stream/287929-mathlib4/topic/ENnReal/near/312282850\">said</a>:</p>\n<blockquote>\n<p>It seems like the naming convention needs to make a distinction between initialisms (such as LT, LE, NE) and abbreviations (such as Eq, Comm). If ENN is an initialism for Extended Non-Negative then it would make sense to capitalize all letters.</p>\n</blockquote>\n<p>One informal rule that I see occasionally in programming is to decapitalize longer initialisms, especially when they can be understood without every letter being capitalized. E.g. <code>IDProvider</code> may stay as such, but <code>JSONProvider</code> is converted to <code>JsonProvider</code>. I believe that this makes it easier to identify the separate words in a name.</p>\n<p>Personally, I usually only fully capitalize initialisms of two characters, and decapitalize everything that's longer. However, in Lean 4 core there is a precedent for decapatilizing all initialisms, e.g. <a href=\"https://github.com/leanprover/lean4/tree/master/src/Lean/Data\">JSON, XML and LSP</a> or <a href=\"https://github.com/leanprover/lean4/search?q=id\">ID</a>. Types like <code>RBMap</code> are still fully capitalized though, which makes me think that capitalizing initialisms of length 2 is fine.<br>\nApplying this rule here would lead to <code>EnnReal</code>.</p>\n<p>Edit: Ah, ID is obviously also an abbreviation and not an initialism, so it makes sense that it's capitalized differently from <code>RBMap</code>.</p>",
        "id": 312343990,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1669469315
    },
    {
        "content": "<p>Usually in programming you don't have initialism which are suffices of one another; the <code>EnnReal</code> and <code>NNReal</code> produced with your heuristic feel rather inconsistent.</p>",
        "id": 312347096,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669470659
    },
    {
        "content": "<p><code>ENNReal</code>/<code>NNReal</code> seems like the best choice to me, since it preserves the fact you can swap between the two by adding/removing a single character</p>",
        "id": 312347291,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669470756
    },
    {
        "content": "<p>It is probably just me not accustomed to the new naming convention, but I still find it a bit of a pain to distinguish abbreviations from acronyms and <code>Prop</code>s from <code>Type</code>s when naming and using stuff for a non-native english speaker / non type-theorist.</p>",
        "id": 312352128,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1669471639
    },
    {
        "content": "<p>What exactly does this new convention bring us? It seems like it makes clashes much less likely, but we were not running out of names.</p>",
        "id": 312357872,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1669474285
    },
    {
        "content": "<p>I actually <em>prefer</em> ENNReal to ennreal or any other variant. When I was new to mathlib I was trying to familiarize myself with the library and the initialism didn't immediately jump out to me, so it would probably be helpful for newcomers (or those with only a passing interest) to more easily distinguish this.</p>",
        "id": 312359134,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669474888
    },
    {
        "content": "<p>Types start with capital letters, terms start with small letters. The type/term distinction is something which new users have to learn and this makes it easier</p>",
        "id": 312360439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669475520
    },
    {
        "content": "<p>But what does initialism bring us? This is a linguistically blurry line. I'm sure \"radar\" is some maths object out there and we'll want to call it <code>Radar</code> (assuming it's a type), but the new convention argues for <code>RaDAR</code>.</p>",
        "id": 312360985,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1669475777
    },
    {
        "content": "<p>Similarly, it wants us to call a \"laser\" type <code>LASER</code>, not <code>Laser</code>.</p>",
        "id": 312361091,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1669475847
    },
    {
        "content": "<p>I'm just not interested in this argument. Telling the core Lean people that their ideas are not what you want is not a helpful way to proceed. We have a port to do.</p>",
        "id": 312361224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669475897
    },
    {
        "content": "<p>How is what the core Lean people's opinion relevant here? We are deciding on a mathlib naming convention, not a Lean naming convention.</p>",
        "id": 312361338,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1669475956
    },
    {
        "content": "<p>My opinion is that we should resynthesize all initials in type names as being part of the radical.</p>",
        "id": 312361428,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1669475988
    },
    {
        "content": "<p>But many times whether something is a Type or a Prop is an implementation detail. For example, <code>full</code> is a <code>Type</code>, <code>faithful</code> is a <code>Prop</code>, <code>is_limit</code> is a <code>Type</code>, <code>is_pullback</code> is a <code>Prop</code>, <code>is_split_mono</code> is a <code>Prop</code>, <code>is_left_adjoint</code> is a <code>Type</code> etc.</p>",
        "id": 312361881,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1669476170
    },
    {
        "content": "<p>Do we really want <code>FullSpec</code> and <code>faithful_spec</code>?</p>",
        "id": 312361924,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1669476192
    },
    {
        "content": "<p>Yaël, we should <em>definitely</em> align mathlib naming conventions (at least overall) with Lean core.</p>",
        "id": 312364156,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669477054
    },
    {
        "content": "<p>Why though? There's no shame in admitting that a naming convention used by the core library doesn't scale to a million lines maths library.</p>",
        "id": 312368949,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1669479316
    },
    {
        "content": "<p>A few reasons:</p>\n<ol>\n<li>Consistency</li>\n<li>We use things from Core and <code>Std</code></li>\n<li>It helps with disambiguation</li>\n</ol>\n<p>If at certain points we need to make exceptions, then that can be considered.</p>",
        "id": 312369938,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669479828
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/287929-mathlib4/topic/ENnReal/near/312361881\">said</a>:</p>\n<blockquote>\n<p>But many times whether something is a Type or a Prop is an implementation detail. For example, <code>full</code> is a <code>Type</code>, <code>faithful</code> is a <code>Prop</code>, <code>is_limit</code> is a <code>Type</code>, <code>is_pullback</code> is a <code>Prop</code>, <code>is_split_mono</code> is a <code>Prop</code>, <code>is_left_adjoint</code> is a <code>Type</code> etc.</p>\n</blockquote>\n<p>This seems like a separate naming issue. To me, it makes sense to have <code>faithful</code> renamed to <code>is_faithful</code> precisely since it is a <code>Prop</code>. Similarly, <code>is_limit</code> should just be named <code>limit</code> (or <code>Limit</code> in mathlib4). It seems reasonable to have a distinction between <code>Type</code> and <code>Prop</code>.</p>",
        "id": 312371447,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1669480599
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"439483\">Andrew Yang</span> <a href=\"#narrow/stream/287929-mathlib4/topic/ENnReal/near/312361924\">said</a>:</p>\n<blockquote>\n<p>Do we really want <code>FullSpec</code> and <code>faithful_spec</code>?</p>\n</blockquote>\n<p>The big benefit is that we will be able to tell from the name whether it is a type or a prop!</p>",
        "id": 312371745,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1669480721
    },
    {
        "content": "<p>\"Standards are like toothbrushes. Everybody wants one but nobody wants to use anyone else's.\" -- Connie Morella</p>",
        "id": 312374006,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669481969
    },
    {
        "content": "<p>I should probably mention that under the current naming convention all the examples listed are classes, so they would be translated into <code>Full</code>, <code>Faithful</code>, <code>Limit</code>, <code>Pullback</code>, <code>SplitMono</code>, and <code>LeftAdjoint</code>.</p>",
        "id": 312380484,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1669485657
    },
    {
        "content": "<p>Does it not matter whether the <code>class</code> is a predicate or data-carrying? That's a pity.</p>",
        "id": 312382775,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1669487012
    },
    {
        "content": "<p>It doesn't make sense to remove <code>is</code> from <code>is_noun</code>. It changes the meaning completely and the <code>noun</code> version is probably already in use for the other thing.</p>",
        "id": 312548504,
        "sender_full_name": "Reid Barton",
        "timestamp": 1669605440
    },
    {
        "content": "<p>e.g. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.left_adjoint\">docs#category_theory.left_adjoint</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.is_left_adjoint\">docs#category_theory.is_left_adjoint</a></p>",
        "id": 312548591,
        "sender_full_name": "Reid Barton",
        "timestamp": 1669605508
    },
    {
        "content": "<p>But it seems like this is the naming convention used by the core, and we seem to have decided to follow it no matter what.</p>",
        "id": 312548874,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1669605765
    },
    {
        "content": "<p>In your example, they will be named <code>CategoryTheory.leftAdjoint</code> and <code>CategoryTheory.LeftAdjoint</code>, so there won't be a name collision in this case.</p>",
        "id": 312548877,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1669605769
    },
    {
        "content": "<p>No, that doesn't sound right.</p>",
        "id": 312548911,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669605817
    },
    {
        "content": "<p>My understanding was that these were just changing to <code>LeftAdjoint</code> and <code>IsLeftAdjoint</code>, and then if you wanted to construct a <code>LeftAdjoint</code> for a <code>Foo</code> it would probably be called <code>Foo.leftAdjoint</code>.</p>",
        "id": 312549033,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669605935
    },
    {
        "content": "<p>What is the suggestion that <code>category_theory.left_adjoint</code> should become <code>CategoryTheory.leftAdjoint</code> based on?</p>",
        "id": 312549109,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669605979
    },
    {
        "content": "<p>It is <code>(D ⥤ C) -&gt; (C ⥤ D)</code> which is a term and should be <code>lowerCamelCase</code> if I didn't misunderstand the naming convention?</p>",
        "id": 312549146,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1669606044
    },
    {
        "content": "<p>There are even two things <code>left_adjoint</code> could mean:</p>\n<ul>\n<li><code>left_adjoint C D</code> = type of all left adjoints from <code>C</code> to <code>D</code></li>\n<li><code>left_adjoint F</code> = the left adjoint of a functor <code>F</code></li>\n</ul>\n<p>Distinguishing these through capitalization could be sensible. But the <code>is_</code> prefix is an important part of the English meaning, we can't just drop it.</p>",
        "id": 312549150,
        "sender_full_name": "Reid Barton",
        "timestamp": 1669606055
    },
    {
        "content": "<p>In <code>is_adjective</code>, the <code>is_</code> is redundant.</p>",
        "id": 312549153,
        "sender_full_name": "Reid Barton",
        "timestamp": 1669606070
    },
    {
        "content": "<p>Oh, sorry, I'm wrong, and didn't actually read the examples.</p>",
        "id": 312549208,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669606116
    },
    {
        "content": "<p>I agree about <code>category_theory.left_adjoint</code> changing to <code>CategoryTheory.leftAdjoint</code>. It is not a type, but a thing you do to a functor equipped with a typeclass. (Yes, crappy design, but that's not the topic today. :-)</p>",
        "id": 312549252,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669606191
    },
    {
        "content": "<p>I don't mind <code>left_adjoint</code> becoming <code>leftAdjoint</code>, but <code>is_left_adjoint</code> cannot be called <code>LeftAdjoint</code>.</p>",
        "id": 312549378,
        "sender_full_name": "Reid Barton",
        "timestamp": 1669606236
    },
    {
        "content": "<p>Same for <code>is_limit</code></p>",
        "id": 312549385,
        "sender_full_name": "Reid Barton",
        "timestamp": 1669606248
    },
    {
        "content": "<p>(I guess \"adjoint\" maybe isn't the best possible example, considering that in ordinary English it is actually an adjective.)</p>",
        "id": 312549423,
        "sender_full_name": "Reid Barton",
        "timestamp": 1669606311
    },
    {
        "content": "<p>Where did this \"we're getting rid of <code>is_</code>\" start? We're getting rid of <code>has_</code> for notational typeclasses to match core, but I'm not sure that there was any plan to go beyond that.</p>",
        "id": 312549431,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669606321
    },
    {
        "content": "<p>examples being <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_lawful_monad\">docs#is_lawful_monad</a> -&gt; <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LawfulMonad#doc\">docs4#LawfulMonad</a> I guess?</p>",
        "id": 312549501,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1669606374
    },
    {
        "content": "<p>I think the category theory library is a bit special in that it uses nouns as types for bundled structures, as in normal mathematical English, rather than as classes containing only structure. For example <code>M : category_theory.monad C</code> means that <code>M</code> is a monad (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.monad\">docs#category_theory.monad</a>; compare <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monad\">docs#monad</a>).</p>",
        "id": 312550304,
        "sender_full_name": "Reid Barton",
        "timestamp": 1669607286
    },
    {
        "content": "<p>Lean 4 is sort of inconsistent here: <code>is_lawful_foo</code> mostly maps to <code>LawfulFoo</code>, but <code>IsLawfulSingleton</code> is a thing</p>",
        "id": 312550310,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669607294
    },
    {
        "content": "<p>Is there a clean standard for when <code>is_foo</code>/<code>has_foo</code> should/should not be replaced by <code>Foo</code>?</p>",
        "id": 312550336,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669607341
    },
    {
        "content": "<p>I kind of think <code>is_lawful_foo</code> is a <code>Foo</code>-scoped version of <code>is_lawful</code>.</p>",
        "id": 312550366,
        "sender_full_name": "Reid Barton",
        "timestamp": 1669607390
    },
    {
        "content": "<p>If you're already writing <code>foo X</code> to mean \"X is a foo\" (e.g. <code>foo</code> = <code>group</code>) then <code>LawfulFoo X</code> seems fine.</p>",
        "id": 312550460,
        "sender_full_name": "Reid Barton",
        "timestamp": 1669607465
    },
    {
        "content": "<p>By the way, <code>is_limit</code> will be translated to <code>IsLimit</code> regardless. It is not a typeclass.</p>",
        "id": 312550966,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1669607978
    },
    {
        "content": "<p>Oh it never occurred to me that <code>is_left_adjoint</code> might be a type class.</p>",
        "id": 312551255,
        "sender_full_name": "Reid Barton",
        "timestamp": 1669608205
    },
    {
        "content": "<blockquote>\n<p>If you're already writing <code>foo X</code> to mean \"X is a foo\" (e.g. <code>foo</code> = <code>group</code>) then <code>LawfulFoo X</code> seems fine.</p>\n</blockquote>\n<p>In those cases, does <code>Foo X</code> mean that <code>X</code> carries a <code>Foo</code> structure, and <code>g : Foo X</code> is the actual <code>Foo</code> as data? If so I think that’s qualitatively different than <code>LawfulFoo X : Prop</code> (which is what we see in e.g. <code>LawfulMonad</code>)</p>",
        "id": 312551931,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1669608694
    },
    {
        "content": "<p>(if not, though, then I agree :) )</p>",
        "id": 312552013,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1669608740
    },
    {
        "content": "<p>There are around 40 classes already ported as \"IsThing\", so there isn't a strong push to drop \"is\" from class names. It sounds like there are arguments for both sides.</p>",
        "id": 312552514,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1669609021
    },
    {
        "content": "<p>I agree that for classes it's a bit murkier as you don't tend to name inhabitants of a class.</p>",
        "id": 312554200,
        "sender_full_name": "Reid Barton",
        "timestamp": 1669610352
    },
    {
        "content": "<p>I made updates in the wiki to clarify the case of <code>def Foo: Type := sorry</code>, and toned down the Lean 4 typeclass section. It would be helpful to replace the \"&lt;?&gt;\" there.</p>",
        "id": 312557299,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669613016
    },
    {
        "content": "<p><code>LawfulMonad</code> is a mistake we haven't corrected yet. It should definitely have an <code>Is</code>.</p>",
        "id": 312581831,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669626453
    }
]