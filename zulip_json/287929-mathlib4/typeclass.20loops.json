[
    {
        "content": "<p>I was experimenting with making <code>OrderDual</code> a structure, to see if it helped with the issue reported <a href=\"https://github.com/leanprover-community/mathlib4/pull/1099#discussion_r1051747996\">here</a> and noted <a href=\"https://github.com/leanprover-community/mathlib4/blob/71723d8bddec4ec20864b84941e36ebb4827ac47/Mathlib/Order/GaloisConnection.lean#L862-L863\">here</a>. In doing so I noticed that the declaration in question, namely <code>def liftSemilatticeInf [SemilatticeInf β] (gi : GaloisCoinsertion l u) : SemilatticeInf α :=</code>, actually has some proofs being proofs of the fields for <code>SemilatticeInf αᵒᵈᵒᵈ</code>, and we make it home because of defeq abuse. This made me wonder whether we should instead be defining <code>def liftSemilatticeInf [SemilatticeInf βᵒᵈ] (gi : GaloisCoinsertion l u) : SemilatticeInf αᵒᵈ :=</code> so we can avoid this defeq abuse. However the problem with this approach is that whilst Mathlib4 can <a href=\"https://github.com/leanprover-community/mathlib4/blob/71723d8bddec4ec20864b84941e36ebb4827ac47/Mathlib/Order/Basic.lean#L696\">infer <code>PartialOrder αᵒᵈ</code> from <code>PartialOrder α</code></a>, right now it can't currently infer <code>PartialOrder α</code> from <code>PartialOrder αᵒᵈ</code>. In Lean 3 I think this would be a bad instance because it would loop. Is this instance OK in Lean 4 though? I vaguely remember promises that loops would be fine.</p>",
        "id": 318017851,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672099665
    },
    {
        "content": "<p>This might work for partial_order, but once you get to typeclasses with Sup and Inf, the resultant loop will not be defeq</p>",
        "id": 318018027,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672099831
    },
    {
        "content": "<p>So I don't think this is a pattern we should encourage in general</p>",
        "id": 318018108,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672099933
    },
    {
        "content": "<p>And if we're not going to use it generally, you can just use a def for the one place you actually need it; inside the <code>liftSemilatticeInf</code> lemma</p>",
        "id": 318018129,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672099969
    }
]