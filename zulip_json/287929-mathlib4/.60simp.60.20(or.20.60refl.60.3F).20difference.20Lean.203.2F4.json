[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Lean 3</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>In Lean 3, if <code>simp</code> finds a rewrite, it might use the Lean 3 <code>rw</code> tactic to do the rewrite, and <code>rw</code> tries <code>refl</code> which closes goals of the form <code>X &lt;-&gt; X</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Lean 4</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>In Lean 4 none of these work, although if you replace <code>&lt;-&gt;</code> by <code>=</code> then they <em>all</em> succeed, even the middle one which fails in Lean 3.</p>\n<p>Is it worth opening an issue for this? As Heather suggested, it seems to be different to the congr issue in the other thread.</p>",
        "id": 314704503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670514257
    },
    {
        "content": "<p>Just to be clear:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Lean 4</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>In Lean 4 the <code>rfl</code> tactic only tries <code>eq.refl</code>, and it looks like <code>rw</code> tries this weakened <code>rfl</code> tactic, and <code>simp</code> tries <code>rw</code>, so this results in a divergence of behaviour with <code>simp</code>.</p>",
        "id": 314705960,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670514698
    },
    {
        "content": "<p>Note that one relevant difference in lean 4 is that <code>iff_self</code> is no longer part of the \"simp only nothing\" list</p>",
        "id": 314706249,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670514770
    },
    {
        "content": "<p>only <code>eq_self</code> is used when you don't specify any simp lemmas</p>",
        "id": 314706332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670514794
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Lean 3</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 314707104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670514988
    },
    {
        "content": "<p>pretty sure that's a bug</p>",
        "id": 314707402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670515072
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60simp.60.20.28or.20.60refl.60.3F.29.20difference.20Lean.203.2F4/near/314706249\">said</a>:</p>\n<blockquote>\n<p>Note that one relevant difference in lean 4 is that <code>iff_self</code> is no longer part of the \"simp only nothing\" list</p>\n</blockquote>\n<p>What's the reason for this?  It seems like it would be desirable to keep <code>iff_self</code> on that list, if it doesn't break anything.</p>",
        "id": 314707536,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670515094
    },
    {
        "content": "<p>I think it just got lost in the shuffle</p>",
        "id": 314707638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670515121
    },
    {
        "content": "<p>my example indicates it's not part of the simp only nothing list in lean 3 either.</p>",
        "id": 314707939,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670515204
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n<span class=\"k\">#print</span> <span class=\"n\">T</span>\n<span class=\"c1\">-- theorem T : ∀ (P Q : Prop), P = Q → (P ↔ Q) :=</span>\n<span class=\"c1\">-- λ (P Q : Prop) (h : P = Q),</span>\n<span class=\"c1\">--   (id_tag tactic.id_tag.simp</span>\n<span class=\"c1\">--      ((λ (a a_1 : Prop) (e_1 : a = a_1) (b b_1 : Prop) (e_2 : b = b_1), congr (congr_arg iff e_1) e_2) P Q h Q Q</span>\n<span class=\"c1\">--         (eq.refl Q))).mpr</span>\n<span class=\"c1\">--     (iff.refl Q)</span>\n</code></pre></div>\n<p>note the <code>iff.refl</code></p>",
        "id": 314708036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670515232
    },
    {
        "content": "<p>Here's a fun one: (lean 3)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 314708425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670515317
    },
    {
        "content": "<p>I think in lean 3, simp can close goals by reducing them to any of <code>true</code>, <code>x = x</code> or <code>x &lt;-&gt; x</code> but the simp only nothing list is actually empty, while in lean 4 there is only one terminal goal <code>True</code>, but the simp only nothing list contains <code>(x = x) = True</code> (but not <code>(x &lt;-&gt; x) = True</code>).</p>",
        "id": 314709084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670515497
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60simp.60.20.28or.20.60refl.60.3F.29.20difference.20Lean.203.2F4/near/314707638\">said</a>:</p>\n<blockquote>\n<p>I think it just got lost in the shuffle</p>\n</blockquote>\n<p>Would it be reasonable to open a Lean 4 issue asking for <code>iff_self</code> to join the simp only nothing list?</p>",
        "id": 314709210,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670515529
    },
    {
        "content": "<p>sure</p>",
        "id": 314709231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670515534
    },
    {
        "content": "<p>it's actually a one line change</p>",
        "id": 314709275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670515547
    },
    {
        "content": "<p>there is literally a list, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Tactic.simpOnlyBuiltins#src\">src4#Lean.Elab.Tactic.simpOnlyBuiltins</a></p>",
        "id": 314709436,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670515588
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/1933\">https://github.com/leanprover/lean4/issues/1933</a></p>",
        "id": 314709891,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670515711
    },
    {
        "content": "<p>here's an example to show the difference between a simp only nothing lemma and a terminal goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Lean 3</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"c1\">-- no simplification</span>\n\n<span class=\"c1\">-- Lean 4</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"c1\">-- simplifies to ⊢ p True</span>\n</code></pre></div>",
        "id": 314710205,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670515804
    },
    {
        "content": "<p>I think the bug in the case where lean 3 doesn't close <code>P &lt;-&gt; P</code> is that it throws the error saying that it performed no simplification before doing the test to see that it has reduced the goal to a terminal goal, meaning that if no simplification applies but the goal is already terminal it fails instead of closing the goal</p>",
        "id": 314710644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670515936
    },
    {
        "content": "<p>The discussion above also featured this discovery:<br>\n<span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60simp.60.20.28or.20.60refl.60.3F.29.20difference.20Lean.203.2F4/near/314690679\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">False</span> <span class=\"bp\">↔</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>fails in Lean 4, but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">false</span> <span class=\"bp\">↔</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span>\n</code></pre></div>\n<p>succeeds in Lean 3.</p>\n</blockquote>\n<p>Does anything need to be done here?</p>",
        "id": 314716303,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670517512
    },
    {
        "content": "<p>I think that works if you have the right stuff imported</p>",
        "id": 314724427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670519869
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">False</span> <span class=\"bp\">↔</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 314724656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670519936
    },
    {
        "content": "<p>The zero import <code>rfl</code> tactic is just <code>apply Eq.refl</code></p>",
        "id": 314724770,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670519966
    },
    {
        "content": "<p>And in Lean 3 the zero import <code>refl</code> tactic was more powerful?</p>",
        "id": 314725305,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670520114
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- lean 3</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span> <span class=\"c1\">-- works</span>\n<span class=\"k\">#print</span> <span class=\"n\">iff.refl</span> <span class=\"c1\">-- tagged with `@[refl]` in core</span>\n</code></pre></div>",
        "id": 314747607,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670525648
    },
    {
        "content": "<p>In Lean 4 this capability is added in <a href=\"https://github.com/leanprover/std4/blob/01992b1846d5f2d1191b22032a67485d739ed8ff/Std/Tactic/Basic.lean#L38\">Std.Tactic.Basic</a>.  So maybe it's just a matter of reorganization -- a feature that was moved into std to streamline core.</p>",
        "id": 314748037,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670525778
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span>\n\n<span class=\"kd\">@[refl]</span> <span class=\"kd\">lemma</span> <span class=\"n\">r.refl</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">or.inl</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span>\n</code></pre></div>",
        "id": 314748083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670525797
    },
    {
        "content": "<p>The Lean 3 way to do this was via the <code>@[refl]</code> attribute. Do we have this?</p>",
        "id": 314748204,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670525848
    },
    {
        "content": "<p>With the right imports...</p>",
        "id": 314774594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670534656
    },
    {
        "content": "<p>Our goal in porting the tactics has been to make everything available again <em>if</em> you import the tactics. It has never been to make the zero-import experience the same, because that is just comparing lean 3 core to lean 4 core and these are different in many ways</p>",
        "id": 314774942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670534773
    },
    {
        "content": "<p>the <code>@[refl]</code> attribute is a mathlib feature now</p>",
        "id": 314775082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670534839
    },
    {
        "content": "<p>and it plugs into the <code>rfl</code> tactic which is available but much weaker in core</p>",
        "id": 314775128,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670534862
    },
    {
        "content": "<p>Scott's Lean 4 PR <a href=\"https://github.com/leanprover/lean4/pull/1936\">https://github.com/leanprover/lean4/pull/1936</a> would add <code>iff_self</code> to the simp only nothing set, but for the meantime, since this is a common issue, I added it to the porting wiki.</p>",
        "id": 314900258,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670594309
    }
]