[
    {
        "content": "<p>Bleurgh <code>and_self</code> is Proppy in core Lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">and_self</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">propext</span> <span class=\"o\">⟨(</span><span class=\"bp\">·.</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩⟩</span>\n</code></pre></div>\n<p>but that's <code>And</code> not <code>and</code>! What do I call</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">and_self</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>in mathlib4?</p>",
        "id": 305912921,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666645204
    },
    {
        "content": "<p><code>Bool.and_self</code>?</p>",
        "id": 305913324,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666645378
    },
    {
        "content": "<p>And can I tell #align that?</p>",
        "id": 305913529,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666645472
    },
    {
        "content": "<p>oh lol it's already there :-)</p>",
        "id": 305913596,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666645505
    },
    {
        "content": "<p>Yeah, increasingly, grepping for <code>#align.*myWeirdlyNamedTheorem</code> is going to be part of the workflow...</p>",
        "id": 305914214,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666645771
    }
]