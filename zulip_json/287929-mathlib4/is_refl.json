[
    {
        "content": "<p>Do we have an analogue in Lean4 of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_refl\">docs#is_refl</a>? If no, should it be added to mathlib4?</p>",
        "id": 304345406,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665949449
    },
    {
        "content": "<p><code>init.algebra.classes</code> hasn't been ported so far, but I've bumped into it a few times. When I encountered an <code>is_trans R</code> I just switched to using <code>Trans R R R</code>, and it seemed to work fine. See <a href=\"https://github.com/leanprover-community/mathlib4/pull/467\">mathlib4#467</a>.</p>",
        "id": 304355181,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665957878
    },
    {
        "content": "<p>In the same PR, I encountered an <code>IsSymmOp</code>, and I just refactored to not use it at all.</p>",
        "id": 304355323,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665957987
    },
    {
        "content": "<p>That is, so far I have punted on porting <code>init.algebra.classes</code>. It isn't used a whole lot in mathlib, and maybe it would be nice to be rid of it. On the other hand, it may be easiest to just port it for now.</p>",
        "id": 304355380,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665958034
    },
    {
        "content": "<p>Alternatively, we perhaps could ask our mathlib refactoring experts if someone could try remove it as a dependency in mathlib3, to see how it goes.</p>",
        "id": 304355418,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665958077
    },
    {
        "content": "<p>I think we can declare that <code>data.prod.basic</code> is fully blocked by this issue since it has 50 lines that are all about those classes from <code>init.algebra.classes</code>.</p>",
        "id": 304538954,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1666034090
    },
    {
        "content": "<p>I'm ready to port that file if this is what our porting experts recommend. It's no fun at all but I don't expect any fun so low in the import hierarchy (the whole thing blocked now is about lex ordering <span aria-label=\"zzz\" class=\"emoji emoji-1f4a4\" role=\"img\" title=\"zzz\">:zzz:</span> )</p>",
        "id": 304539291,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1666034206
    },
    {
        "content": "<p>I would suggest copying over the mathport stuff unmodified (except possibly for style changes), then comment them out and write TODO and link to an issue</p>",
        "id": 304544765,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666036031
    },
    {
        "content": "<p>since presumably we can get away with just not having those theorems. We can revisit if a \"real\" theorem needs them</p>",
        "id": 304544988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666036096
    },
    {
        "content": "<p>I wouldn't make this a blocker for being able to mark the file as \"done\" as long as the theorems are still recorded in the file. Alternatively we can just port it like Scott suggests, or backport remove it</p>",
        "id": 304545466,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666036248
    },
    {
        "content": "<p>Actually backport removing it (or at least investigating what this would sacrifice) seems like the most fruitful approach. This is really just a trivial refactor and there is no need to do it as part of the port</p>",
        "id": 304545686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666036314
    },
    {
        "content": "<p>Actually, looking more closely, <code>init.algebra.classes</code> is used way more than I expected. Why don't we just port it?</p>",
        "id": 304576757,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666047955
    },
    {
        "content": "<p>I think the classes need to be handled case by case</p>",
        "id": 304577257,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666048191
    },
    {
        "content": "<p>I tried out porting it as is, it's not too bad. <a href=\"https://github.com/leanprover-community/mathlib4/pull/476\">mathlib4#476</a>. I left one section out as a couldn't be bothered repairing notation, and it isn't used.</p>",
        "id": 304579699,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666049244
    },
    {
        "content": "<p>I agree this file really needs to be cleaned up and reduced to what we actually use. But ... I don't really want to block other stuff on that.</p>",
        "id": 304579764,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666049278
    },
    {
        "content": "<p>What are the alternatives? We could analyse mathlib3 to determine which of these classes are actually used, and only port those?</p>",
        "id": 304580490,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666049640
    },
    {
        "content": "<ul>\n<li><code>is_symm_op</code>: unused except for some instances</li>\n<li><code>is_commutative</code>: used a fair amount via some theorems about folds (also assuming <code>is_associative</code>)</li>\n<li><code>is_associative</code>: ditto, also used in <code>noncomm_fold</code></li>\n<li><code>is_left_id</code>, <code>is_right_id</code>: unused except in the mathlib class <code>is_unital</code> and in <code>mono</code> (which looks like it could use <code>is_unital</code>)</li>\n<li><code>is_left_null</code>, <code>is_right_null</code>: unused</li>\n<li><code>is_left_cancel</code>, <code>is_right_cancel</code>: unused except for instances</li>\n<li><code>is_idempotent</code>: this one is actually used to prove things not directly about <code>is_idempotent</code></li>\n<li><code>is_left_distrib</code>, <code>is_right_distrib</code>, <code>is_left_inv</code>, <code>is_right_inv</code>, <code>is_cond_left_inv</code>, <code>is_cond_right_inv</code>: unused</li>\n<li><code>is_distinct</code>: unused (although we reinvented this one as <code>nontrivial</code>)</li>\n<li><code>is_irrefl</code>, <code>is_refl</code>, <code>is_symm</code>, <code>is_trans</code>: significant usage</li>\n<li><code>is_asymm</code>, <code>is_antisymm</code>, <code>is_total</code>, <code>is_strict_order</code>: a lot of uses but all in order theory and it's unclear how much could not be transferred to another typeclass</li>\n<li><code>is_preorder</code>: unused except for instances (except <code>antisymmetrization</code>, maybe it could be transferred)</li>\n<li><code>is_total_preorder</code>, <code>is_partial_order</code>: unused except for instances</li>\n<li><code>is_linear_order</code>: unused except for instances</li>\n<li><code>is_equiv</code>: unused except for instances (most uses can use <code>equivalence</code> instead)</li>\n<li><code>is_per</code>: unused</li>\n<li><code>is_incomp_trans</code>: unused</li>\n<li><code>is_strict_weak_order</code>: significant usage (most of it on <code>rbmap</code>, could be transferred)</li>\n<li><code>is_trichotomous</code>: some usage</li>\n<li><code>is_strict_total_order</code>: looks like the only usage is in <code>rbmap</code> again</li>\n</ul>",
        "id": 304580695,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666049745
    },
    {
        "content": "<p>What I think we could do is to first move as much as possible from lean3 core to mathlib, then remove unused things from mathlib</p>",
        "id": 304580834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666049805
    },
    {
        "content": "<p>I don't think it will be hard to port this file at all, but it's a bunch of long-unused stuff and we will reimagine most of these classes anyway</p>",
        "id": 304580884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666049837
    },
    {
        "content": "<p>I think most of the uses are just the result of people grabbing the nearest thing that looks relevant</p>",
        "id": 304581016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666049900
    },
    {
        "content": "<p>And yes, this isn't port-blocking in any way. Porting everything except stuff that is hard seems like a good approach to get it over and done with</p>",
        "id": 304581127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666049963
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/is_refl/near/304580834\">said</a>:</p>\n<blockquote>\n<p>What I think we could do is to first move as much as possible from lean3 core to mathlib, then remove unused things from mathlib</p>\n</blockquote>\n<p>Okay, but aren't the alternatives today:</p>\n<ul>\n<li>Port <code>Init/Algebra/Classes.lean</code> as is (e.g. as in <a href=\"https://github.com/leanprover-community/mathlib4/pull/476\">mathlib4#476</a>), and then <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> gets on with <code>Data/Prod/Basic.lean</code>, and later someone removes the unused classes from <code>Init/Algebra/Classes.lean</code> (in mathlib4).</li>\n<li>Someone does this move from lean3 core to mathlib, then removes unused things, and then we port to mathlib4.</li>\n</ul>\n<p>It seems like the two are mutually exclusive.</p>",
        "id": 304583911,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666051398
    },
    {
        "content": "<p>Maybe a good compromise is that we port as is, except I copy and paste your analysis of what is and isn't used into the \"Porting notes\" section of the doc-string. :-)</p>",
        "id": 304583982,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666051442
    },
    {
        "content": "<p>I don't think they are mutually exclusive. This file is simple enough that I would put it in the category of things that can be modified even after they are \"frozen\" since the corresponding fixup on the mathlib4 side is easy</p>",
        "id": 304584159,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666051515
    },
    {
        "content": "<p>That is, I suggest we do your first option for now, and if someone is interested to do the backport side then we can update mathlib4 after it lands</p>",
        "id": 304584328,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666051591
    }
]