[
    {
        "content": "<p>Hello,<br>\nDuring the past few days, I have worked on some basic group theory in Lean 4, and since there is an open debate on how to port algebra to Lean 4, I thought that some things that I have done in my repo might be interesting. The main point is that I have tried a slightly different approach than that of mathlib 3, and I also used some of the new features of Lean 4 : improved coercion and notations.<br>\nAll this is detailed in the _readme_ of my repo (which I don't paste right here to not flood the channel)</p>\n<p>Hope you will find this interesting !</p>\n<p><strong>REPO : <a href=\"https://github.com/thejohncrafter/playlean4\">https://github.com/thejohncrafter/playlean4</a> </strong></p>",
        "id": 238480748,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1620828976
    },
    {
        "content": "<p>So you have fully bundled groups? I think that there are some problems which the Coq people experience with this approach and which we don't have in Lean, but I don't know what these problems are.</p>",
        "id": 240051043,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621863024
    },
    {
        "content": "<p>I'm far from having group theory, but what I got looks promising to me (yet I don't believe it is mathlib-worthy for the moment, it is still possible that I hit a wall at some point). The main problem that I encountered as of now is the way Lean handles notation, and it can be solved with metaprogramming, but I didn't experiment enough to be sure my approach is viable.</p>\n<hr>\n<p>Here's a more detail :</p>\n<p>I have fairly complicated objects that I'm able to define easily enough, for instance <a href=\"https://github.com/thejohncrafter/playlean4/blob/26f68644637181a98273281d70b046f04f927ccd/Playlean4/Group/LRClasses.lean#L35-L47\">cosets and canonical actions on cosets</a>. This allows me to prove that <a href=\"https://github.com/thejohncrafter/playlean4/blob/26f68644637181a98273281d70b046f04f927ccd/Playlean4/Group/Normal.lean\">a subgroup is normal iff it is the kernel of a morphism</a>.<br>\nIf you look at the code (by the way, according  to the timestamps, you missed my latest commit where I entierely move the laws of groups <em>outside of any typeclass</em>), everything is pretty straightforward : no complicated management of instances/corecions/anything (that's mainly thanks to Lean 4 <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>).<br>\nA great part of the code is actually just definitions of namespaces and instantiations of objects. Yet at the moment I have to perform <a href=\"https://github.com/thejohncrafter/playlean4/blob/26f68644637181a98273281d70b046f04f927ccd/Playlean4/Group/Basic.lean#L29-L33\">hacks like here</a> too often, which is a pain and means my approach is not \"mathlib-worthy\" for now, but this could easily be solved by metaprogramming, and maybe a hint of hacking in Lean (hopefully...).<br>\nThere is one other problem that I can't avoid (and that may actually be structurally unavoidable) : I often have to refer explicitly to some instance of <code>Group</code> when I do things that are not obvious enough to Lean. See <a href=\"https://github.com/thejohncrafter/playlean4/blob/26f68644637181a98273281d70b046f04f927ccd/Playlean4/Group/Basic.lean#L36\">here</a>, where I have to use explicitly <code>grp.invertible</code> instead of <code>invertible</code>. That is because (I guess) when I only use <code>invertible</code> Lean can't know which group law I want  to refer to (even though, in this context, there obviously is only one possible law), so it asks for an explicit call.</p>",
        "id": 241534613,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1622813354
    },
    {
        "content": "<p>Without having thought about it much, it seems odd to bundle <code>1</code> but not <code>(*)</code> into <code>Group</code>.</p>",
        "id": 241537226,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622814583
    },
    {
        "content": "<p>I do this because <code>1</code> is uniquely defined once we have a group law. Same for <code>inverse</code>, it is unique so I can just make <code>Group</code> give it to me once I give the law.<br>\nThe other, more trivial benefit is that I do not need to add an argument like <code>one  : G</code> each time I instantiate a group, but doing it wouldn't actually be a problem modulo metaprogramming.<br>\nBut sure, this is a bit unnatural if we consider the full algebraic hierarchy : for instance we might want to specify the unit alongside the law when we're dealing with monoids :)</p>",
        "id": 241559427,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1622823692
    }
]