[
    {
        "content": "<p>There are two bugs in meta utilities in the Data.List.Infix port.</p>\n<p>The first is that the alias:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">alias</span> <span class=\"n\">instDecidableOr</span> <span class=\"bp\">←</span> <span class=\"n\">Or.decidable</span>\n</code></pre></div>\n<p>in <code>Mathlib.Init.Logic</code> seems to produce <code>Or.decidable</code> as a noncomputable instance even though the <code>instDecidableOr</code> is very much computable. This makes the following instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">decidableSuffix</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"bp\">&lt;</span><span class=\"o\">:</span><span class=\"bp\">+</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">l₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isTrue</span> <span class=\"o\">⟨</span><span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"n\">append_nil</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l₁</span><span class=\"o\">,</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isFalse</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">Sublist.length_le</span> <span class=\"bp\">∘</span> <span class=\"n\">isSuffix.sublist</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">l₁</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">l₂</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">@</span><span class=\"n\">decidable_of_decidable_of_iff</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Or.decidable</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">l₁.decidableSuffix</span> <span class=\"n\">l₂</span><span class=\"o\">))</span> <span class=\"n\">suffix_cons_iff.symm</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">decidableSuffix</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">l₁</span><span class=\"o\">,</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Or the following simpler example instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">}[</span><span class=\"n\">Decidable</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Or.decidable</span>\n</code></pre></div>\n<p>Demanded to be marked as noncomputable, just using the <code>instDecidableOr</code> does work out though.</p>\n<p>Furthermore the file contains the alias:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">eq_nil_of_infix_nil</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;</span><span class=\"o\">:</span><span class=\"bp\">+</span><span class=\"o\">:</span> <span class=\"o\">[])</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span>\n  <span class=\"n\">eq_nil_of_sublist_nil</span> <span class=\"n\">h.sublist</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">list.eq_nil_of_infix_nil</span> <span class=\"n\">List.eq_nil_of_infix_nil</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">infix_nil_iff</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;</span><span class=\"o\">:</span><span class=\"bp\">+</span><span class=\"o\">:</span> <span class=\"o\">[]</span> <span class=\"bp\">↔</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eq_nil_of_sublist_nil</span> <span class=\"n\">h.sublist</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">infix_rfl</span><span class=\"o\">⟩</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">list.infix_nil_iff</span> <span class=\"n\">List.infix_nil_iff</span>\n\n<span class=\"n\">alias</span> <span class=\"n\">infix_nil_iff</span> <span class=\"bp\">↔</span> <span class=\"n\">eq_nil_of_infix_nil</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>Which produces:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"kd\">constant</span> <span class=\"n\">has</span> <span class=\"n\">already</span> <span class=\"n\">been</span> <span class=\"n\">declared</span> <span class=\"bp\">'</span><span class=\"n\">List.eq_nil_of_infix_nil'</span>\n</code></pre></div>\n<p>Which is understandable I guess? I'm not quite sure why the two things are aliased anyways? Shall I just delete this alias or am I understanding the purpose of it wrong? For some reason this does not seem to error in Lean 3.</p>\n<p>And apart from that the question with shall I use <code>List.get</code> instead of <code>List.nthLe</code> like the linter tells me? Or do we want to keep those theorems on <code>nthLe</code> around for now?</p>",
        "id": 319649645,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672944423
    },
    {
        "content": "<p>In Lean 3, <code>alias</code> silently did nothing if the declaration already existed: <a href=\"#narrow/stream/113488-general/topic/alias.20silently.20succeeds.20when.20name.20already.20exists\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/alias.20silently.20succeeds.20when.20name.20already.20exists</a></p>",
        "id": 319653659,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1672945717
    },
    {
        "content": "<p>Based on marios answer it sounds like I should basically delete the alias then right?</p>",
        "id": 319653826,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672945787
    },
    {
        "content": "<p>Yes, you can delete the alias.</p>",
        "id": 319654248,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1672945924
    }
]