[
    {
        "content": "<p>The default definitions of <code>seqLeft</code> and <code>seqRight</code> have changed relative to Lean 3, which makes constructing instances of <code>LawfulApplicative</code> or <code>LawfulMonad</code> nontrivial. I posted a brief analysis at <a href=\"https://github.com/leanprover-community/mathlib4/pull/1178#issuecomment-1364114605\">https://github.com/leanprover-community/mathlib4/pull/1178#issuecomment-1364114605</a></p>",
        "id": 317608944,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671815005
    },
    {
        "content": "<p>I think we should add some lemmas somewhere that prove the <code>seqLeft_eq</code> and <code>seqRight_eq</code> laws, given sufficient lawfulness hypotheses -- not sure quite how they should look, yet.</p>",
        "id": 317610114,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671815432
    },
    {
        "content": "<p>There is a smart constructor for LawfulMonad in std</p>",
        "id": 317611566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671816027
    },
    {
        "content": "<p>usage is like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Classes.LawfulMonad</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"n\">Option</span> <span class=\"o\">:=</span> <span class=\"n\">LawfulMonad.mk'</span>\n  <span class=\"o\">(</span><span class=\"n\">id_map</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">pure_bind</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">bind_assoc</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">bind_pure_comp</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and the fields default in the same way as the lean 3 <code>is_lawful_monad</code></p>",
        "id": 317611842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671816171
    }
]