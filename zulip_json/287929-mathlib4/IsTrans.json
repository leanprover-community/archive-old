[
    {
        "content": "<p>Should we migrate from <code>IsTrans</code> to <code>Trans</code>?</p>",
        "id": 320864595,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673506171
    },
    {
        "content": "<p>E.g., by using</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">abbreviation</span> <span class=\"n\">IsTrans</span> <span class=\"n\">α</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">Trans</span> <span class=\"n\">r</span> <span class=\"n\">r</span> <span class=\"n\">r</span>\n</code></pre></div>",
        "id": 320864724,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673506232
    },
    {
        "content": "<p><code>Trans</code> is used, e.g., by <code>calc</code> and tactic <code>trans</code></p>",
        "id": 320875884,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673511502
    },
    {
        "content": "<p>With this definition Lean fails to extend <code>IsTrans α r</code> saying that it's not a class.</p>",
        "id": 320877161,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673511969
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> What should I do?</p>",
        "id": 320877186,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673511982
    },
    {
        "content": "<p>Make it <code>class IsTrans α r extends Trans r r r</code> and add a loop instance <code>[IsTrans α r] : Trans r r r</code>?</p>",
        "id": 320877327,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673512040
    },
    {
        "content": "<p>Or something else?</p>",
        "id": 320877356,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673512049
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 321028938,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673555615
    },
    {
        "content": "<p>I think there's <code>class abbrev IsTrans α r := Trans r r r</code>.</p>",
        "id": 321059891,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1673569176
    },
    {
        "content": "<p>It seems that <code>Trans</code> is not in <code>Prop</code>.</p>",
        "id": 321077595,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673581486
    },
    {
        "content": "<p>So, I see 2 options.</p>\n<ul>\n<li>Add an instance <code>[IsTrans α r] : Trans r r r</code> and a linter that bans other <code>Trans r r r</code> instances.</li>\n<li>Add both instances <code>[IsTrans α r] : Trans r r r</code> and <code>[Trans r r r] : IsTrans α r</code> and hope that Lean 4 is good with instance loops.</li>\n</ul>",
        "id": 321077765,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673581599
    },
    {
        "content": "<p>Lean 4 is good with this kind of instance loop.</p>",
        "id": 321079897,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1673583207
    },
    {
        "content": "<p>Related issue: since <code>calc</code> doesn't unfold <code>Trans</code> instances, an <code>Equiv</code> defined using <code>calc</code> uses <code>Trans.trans</code>, not <code>Equiv.trans</code>.</p>",
        "id": 321079909,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673583224
    },
    {
        "content": "<p>Ah, I don't think much thought has gone into non-Prop <code>Trans</code> instances.</p>",
        "id": 321079993,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1673583300
    },
    {
        "content": "<p>While the results are defeq, <code>simp</code> doesn't work on the result.</p>",
        "id": 321080026,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673583340
    },
    {
        "content": "<p>Of course, we can drop <code>Equiv.trans</code> and use <code>Trans.trans</code> instead.</p>",
        "id": 321080089,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673583382
    },
    {
        "content": "<p>But this way we can't use dot notation.</p>",
        "id": 321080096,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673583393
    },
    {
        "content": "<p>One more question: can we unexport <code>Trans.trans</code>? In many cases, our <code>_root_.trans</code> is more useful.</p>",
        "id": 321080231,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673583529
    },
    {
        "content": "<p>I understand that <code>Trans.trans</code> is more general but in many cases it's not useful outside of <code>calc</code>. E.g., we can't write <code>apply Trans.trans h</code> and expect Lean to figure out the type of the second argument.</p>",
        "id": 321083603,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673586396
    },
    {
        "content": "<p>I added instances <code>IsTrans α r → Trans r r r</code> and <code>Trans r r r → IsTrans α r</code>, and now I have to add <code>_root_</code> here and there.</p>",
        "id": 321084400,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673587108
    },
    {
        "content": "<p>These collisions are new because without these instances, one of two <code>trans</code> did not apply.</p>",
        "id": 321085208,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673587778
    },
    {
        "content": "<p>BTW, am I right that Lean 4 <code>calc</code> can't handle <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Hom/Equiv/Basic.html#MulEquiv.trans\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Hom/Equiv/Basic.html#MulEquiv.trans</a>?</p>",
        "id": 321114317,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673602205
    },
    {
        "content": "<p>The only class-based solution that I can think of is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Trans</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">trans</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span>\n</code></pre></div>\n<p>with instances like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Trans</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">le_trans</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Trans</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">≃*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">≃*</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">≃*</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">MulEquiv.trans</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>\n</code></pre></div>",
        "id": 321115556,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673602612
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Who is the right person to talk about <code>calc</code> support for <code>MulEquiv</code> etc?</p>",
        "id": 321531616,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673816841
    },
    {
        "content": "<p>It's a core PR, but I don't think it has any special prerequisites</p>",
        "id": 321531717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673816925
    },
    {
        "content": "<p>but you should be aware that <span class=\"user-mention\" data-user-id=\"380302\">@Adrien Champion</span> 's PR might affect how <code>calc</code> works because it needs the ability to add a refl step at the beginning</p>",
        "id": 321531753,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673816981
    },
    {
        "content": "<p>(I wouldn't mind if we found another way to do it though)</p>",
        "id": 321531834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673817041
    },
    {
        "content": "<p>the issue is that the new syntax has an (optional) extra LHS term at the beginning which we have to fit into the inequality chain</p>",
        "id": 321531888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673817109
    },
    {
        "content": "<p>I wanted to discuss what should be done before trying to do something.</p>",
        "id": 321531892,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673817117
    },
    {
        "content": "<p>Where can I read about the new syntax?</p>",
        "id": 321531944,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673817135
    },
    {
        "content": "<p>Also, that more general instance will have problems with the <code>Trans Eq R R</code> and <code>Trans R Eq R</code> instances</p>",
        "id": 321531964,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673817155
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/.60calc.60.20indentation\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.60calc.60.20indentation</a></p>",
        "id": 321531994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673817186
    },
    {
        "content": "<p>We can have general instances <code>Trans (a = b) (R b c) (R a b)</code> and <code>Trans (R a b) (b = c) (R a c)</code>. For <code>MulEquiv</code>s etc, we can't have <code>M = N → N ≃* P → M ≃* P</code> anyway because the first equality says nothing about <code>[Mul M]</code> and <code>[Mul N]</code>.</p>",
        "id": 321532250,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673817419
    }
]