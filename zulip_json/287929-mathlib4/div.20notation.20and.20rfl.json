[
    {
        "content": "<p>Why doesn't the following work in Lean 4?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">Int.div</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>I'm trying to close a goal of this form, where <code>b</code> is replaced by some complicated expression, and I'm confused by why this isn't closed by <code>rfl</code>.</p>",
        "id": 317060682,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1671579784
    },
    {
        "content": "<p><code> example (a b : ℤ) : a / b = Int.ediv a b := rfl</code></p>",
        "id": 317060785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671579845
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/341532-lean4-dev/topic/.5BRFC.5D.20Int.2Ediv.20convention\">https://leanprover.zulipchat.com/#narrow/stream/341532-lean4-dev/topic/.5BRFC.5D.20Int.2Ediv.20convention</a></p>",
        "id": 317060816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671579876
    },
    {
        "content": "<p>Hopefully this will be resolved soon, with <code>Int.ediv</code> getting renamed to <code>Int.div</code> and moved to core</p>",
        "id": 317060856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671579908
    },
    {
        "content": "<p>I see. I'm working on Data.Rat.Lemmas and several things that used to be <code>rfl</code> in mathlib3 break in mathlib4 because of that, since some definitions about rational numbers rely on <code>Int.div</code> rather than <code>Int.ediv</code> (<code>Rat.normalize</code> and <code>Rat.mul</code> specifically). Should I try to refactor these definitions to use <code>Int.ediv</code> instead?</p>",
        "id": 317074796,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1671590222
    },
    {
        "content": "<p>Yes.</p>",
        "id": 317081271,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671596080
    },
    {
        "content": "<p>Rename the lemmas to mention <code>ediv</code>. The notation <code>/.</code> correctly points to <code>ediv</code>.</p>",
        "id": 317081284,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671596109
    },
    {
        "content": "<p>So these lemmas in <code>Algebra.EuclideanDomain.Instances</code> are no longer true:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Int.negSucc_mod_ofNat</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">Int.negSucc</span> <span class=\"n\">m</span> <span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"n\">ofNat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">ofNat</span> <span class=\"o\">(</span><span class=\"n\">m.succ</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Int.negSucc_mod_negSucc</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">Int.negSucc</span> <span class=\"n\">m</span> <span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"n\">negSucc</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">ofNat</span> <span class=\"o\">(</span><span class=\"n\">m.succ</span> <span class=\"bp\">%</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>What is the expected path forward?</p>",
        "id": 317118496,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671616237
    },
    {
        "content": "<p>Did we change <code>%</code> to <code>emod</code> or just <code>/</code> to <code>ediv</code>?</p>",
        "id": 317120676,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1671616942
    },
    {
        "content": "<p>Both</p>",
        "id": 317120765,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671616973
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"329754\">Antoine Labelle</span> <a href=\"#narrow/stream/287929-mathlib4/topic/div.20notation.20and.20rfl/near/317074796\">said</a>:</p>\n<blockquote>\n<p>I see. I'm working on Data.Rat.Lemmas and several things that used to be <code>rfl</code> in mathlib3 break in mathlib4 because of that, since some definitions about rational numbers rely on <code>Int.div</code> rather than <code>Int.ediv</code> (<code>Rat.normalize</code> and <code>Rat.mul</code> specifically). Should I try to refactor these definitions to use <code>Int.ediv</code> instead?</p>\n</blockquote>\n<p>No, you should use the API lemmas that are stated in terms of Int.ediv</p>",
        "id": 317157659,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671629220
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/div.20notation.20and.20rfl/near/317157659\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"329754\">Antoine Labelle</span> <a href=\"#narrow/stream/287929-mathlib4/topic/div.20notation.20and.20rfl/near/317074796\">said</a>:</p>\n<blockquote>\n<p>I see. I'm working on Data.Rat.Lemmas and several things that used to be <code>rfl</code> in mathlib3 break in mathlib4 because of that, since some definitions about rational numbers rely on <code>Int.div</code> rather than <code>Int.ediv</code> (<code>Rat.normalize</code> and <code>Rat.mul</code> specifically). Should I try to refactor these definitions to use <code>Int.ediv</code> instead?</p>\n</blockquote>\n<p>No, you should use the API lemmas that are stated in terms of Int.ediv</p>\n</blockquote>\n<p>Hmm well the file I'm working on is the one with a lot of the API lemmas, and several mathlib3 proofs need to unfold the definitions.</p>",
        "id": 317275419,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1671671578
    },
    {
        "content": "<p>The lemmas I'm talking about already exist in Std</p>",
        "id": 317275991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671672118
    }
]