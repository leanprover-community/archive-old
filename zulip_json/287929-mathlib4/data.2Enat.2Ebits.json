[
    {
        "content": "<p>Hi, I noticed that <code>data.nat.bits</code> is ready for porting and I would like to port it. In the [linked message] (<a href=\"#narrow/stream/287929-mathlib4/topic/data.2Eset.2Ebasic/near/314081134\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/data.2Eset.2Ebasic/near/314081134</a>) <span class=\"user-mention\" data-user-id=\"492774\">@Sky Wilshaw</span> mentions that there are some changes between lean 3 and 4 regarding <code>bit0</code> and <code>bit1</code>. I would be grateful for any help with knowing what these changes are and how this affects the port. Thanks in advance.</p>",
        "id": 314084324,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1670260919
    },
    {
        "content": "<p>Additionally, I can't seem to follow step 4  of the porting process of claiming the file (no permission to edit wiki). Is it absolutely essential that I do this?</p>",
        "id": 314088923,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1670262349
    },
    {
        "content": "<p><code>bit0</code> and <code>bit1</code> are now deprecated and this file is being ignored. It will probably end up in core/std and I'm not sure it's used too much in mathlib. If you tell us your github userid and ping <code>@maintainers</code> without the quotes then someone will give you push access to the wiki file. Sorry for the confusion. Right now most porters are mathlib3 contributors! Thanks for joining us!</p>",
        "id": 314112248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670269772
    },
    {
        "content": "<p>Hi everyone,<br>\nSo after the discussion in port progress (see : <a href=\"#narrow/stream/287929-mathlib4/topic/port.20progress/near/316239933\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/port.20progress/near/316239933</a>), I started porting <code>data.nat.bits</code>. The following happened in sequence.</p>\n<ol>\n<li>I opened <code>data.nat.bits</code> and after correcting mathbin to mathlib, I found a number of identifiers such as <code>bodd</code>, <code>bit _ _ </code>, <code>bodd_bit</code> etc that lean couldn't find definitions for.</li>\n<li>I looked at the corresponding mathlib3 file and documentations and traced these identifiers to <a href=\"https://github.com/leanprover-community/lean/blob/53e8520d8964c7632989880372d91ba0cecbaf00/library/init/data/nat/bitwise.lean#L24\">init.data.nat.bitwise</a> </li>\n<li>I looked for the corresponding lean 4 file <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Data/Nat/Bitwise.lean\">Init.Data.Nat.Bitwise</a>. This file looks completely different from the lean3 file. </li>\n</ol>\n<p>Now I can think of a few different ways, to fix this:</p>\n<ol>\n<li>Write replacement definitions myself. </li>\n<li>Try replacing them with the new definitions in <code>Init.Data.Nat.Div</code>. </li>\n</ol>\n<p>From a porting perspective, it seems to make sense to just add new <code>def</code>s for  these missing names, and leave the existing declarations of <code>data.nat.bits</code> untouched. If this is to be done, where should these new <code>def</code>s be added. </p>\n<p>Is there a simpler fix?</p>",
        "id": 316286195,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671202543
    },
    {
        "content": "<p>Definitions that were removed from the lean core should be added to <code>Mathlib/Init/Data/Nat/Div</code>. They are in <code>lean3port</code> (partly broken as in <code>mathlib3port</code>)</p>",
        "id": 316287999,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1671203043
    },
    {
        "content": "<p>So one has to port partly from <code>lean3port</code> and partly from <code>mathlib3port</code>.</p>",
        "id": 316288246,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1671203096
    },
    {
        "content": "<p>Okay, in this case, I will have to add <code>init.data.nat.bitwise</code> and see if there are still dependencies on <code>init.data.nat.div</code></p>",
        "id": 316289549,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671203469
    },
    {
        "content": "<p>In this file I see a lot of <code>tt</code> and <code>ff</code>, are these in any way distinct from <code>true</code> and <code>false</code>?</p>",
        "id": 316294862,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671204815
    },
    {
        "content": "<p>The problem is they produce redundant case distinctions as far as lean 4 goes.</p>",
        "id": 316295531,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671204967
    },
    {
        "content": "<p><code>tt</code> is lean3 syntax for <code>true</code></p>",
        "id": 316296670,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1671205255
    },
    {
        "content": "<p>ah okay. that makes a lot of sense now. lean3port appears to have left many of these untouched for very good reasons.</p>",
        "id": 316297241,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671205404
    },
    {
        "content": "<p>what is the xor operator for <code>Bool</code> in lean 4? Currently xor defaults to Nat.xor (because there is such an instance in <code>Init.Data.Nat.Bitwise</code> (the one not inside mathlib4)</p>",
        "id": 316320716,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671211693
    },
    {
        "content": "<p>In Lean 3, it's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bxor\">docs#bxor</a>. Does <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=BXor#doc\">docs4#BXor</a> hit anything?</p>",
        "id": 316320870,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671211747
    },
    {
        "content": "<p>unfortunately no.</p>",
        "id": 316320950,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671211775
    },
    {
        "content": "<p>My best bet right now  seems to be to define my own Boolean Xor.   Quite a few identifiers there are undefined. My next issue is going to be with <code>bit0</code> and <code>bit1</code>.</p>",
        "id": 316321475,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671211921
    },
    {
        "content": "<p>But from a library design standpoint, and language consistency standpoint, this is not ideal</p>",
        "id": 316321602,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671211947
    },
    {
        "content": "<p>I remember now why I'm getting a déjà vu feeling about your questions... We moved the xor stuff to <code>data.nat.bits</code> because I didn't figure out how to port them in <a href=\"https://github.com/leanprover-community/mathlib4/pull/729\">mathlib4#729</a> :)</p>",
        "id": 316321926,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1671212054
    },
    {
        "content": "<p>If we put the boolean xor in <code>data.nat.bits</code> :</p>\n<ol>\n<li>We will have a circular dependency between <code>data.nat.bits</code> and <code>Init.Data.Nat.Bitwise</code></li>\n<li>We have inconsistent naming. Why should operations for <code>Bool</code> be hidden inside a <code>Nat</code> related file</li>\n</ol>",
        "id": 316322395,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671212203
    },
    {
        "content": "<p>What is the suggested fix? Should I define the boolean xor  inside <code>Init.Data.Nat.Bitwise</code>?</p>",
        "id": 316323636,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671212582
    },
    {
        "content": "<p>Is there no <code>Bool.defs</code> file?</p>",
        "id": 316323802,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671212638
    },
    {
        "content": "<p>Found an <code>xor</code> inside <code>Bool.Basic</code></p>",
        "id": 316324239,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671212763
    },
    {
        "content": "<p>Is there a way to make a qualified import so that  I can use it instead of <code>Nat.xor</code>?</p>",
        "id": 316324540,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671212855
    },
    {
        "content": "<p>more specifically, is <code>abbrev bxor = xor</code> which seems to do the trick okay? Should the name be hidden somehow?</p>",
        "id": 316325016,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671212998
    },
    {
        "content": "<p><a href=\"#narrow/stream/287929-mathlib4/topic/status.20of.20data.2Enat.2Ebits/near/313758405\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/status.20of.20data.2Enat.2Ebits/near/313758405</a></p>",
        "id": 316325381,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671213076
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"542196\">Arien Malec</span> <a href=\"#narrow/stream/287929-mathlib4/topic/data.2Enat.2Ebits/near/316325381\">said</a>:</p>\n<blockquote>\n<p><a href=\"#narrow/stream/287929-mathlib4/topic/status.20of.20data.2Enat.2Ebits/near/313758405\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/status.20of.20data.2Enat.2Ebits/near/313758405</a></p>\n</blockquote>\n<p>There was an update to this : <a href=\"#narrow/stream/287929-mathlib4/topic/port.20progress/near/316239933\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/port.20progress/near/316239933</a></p>",
        "id": 316325619,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671213135
    },
    {
        "content": "<p>Hmm. I didn't see <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  weigh in there... My understanding is that the reason <code>bit0</code>/<code>bit1</code> appear all over <code>mathlib</code> is because they are central to binary representation in Lean 3, but bitwise operations are going to be done differently in Lean 4</p>",
        "id": 316326624,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671213365
    },
    {
        "content": "<p>And otherwise <code>bit0</code>/<code>bit1</code> are incomplete ways of spelling <code>even</code> and <code>odd</code> which will get ported in <code>algebra.parity</code></p>",
        "id": 316326939,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671213458
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"542196\">Arien Malec</span> <a href=\"#narrow/stream/287929-mathlib4/topic/data.2Enat.2Ebits/near/316326624\">said</a>:</p>\n<blockquote>\n<p>Hmm. I didn't see <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span>  weigh in there... My understanding is that the reason <code>bit0</code>/<code>bit1</code> appear all over <code>mathlib</code> is because they are central to binary representation in Lean 3, but bitwise operations are going to be done differently in Lean 4</p>\n</blockquote>\n<p>My understanding is that this is holding up the port process. It makes sense to separate the porting process from these fixes. Avoids all sorts of deadlocks. The file can be deprecated or perhaps some renaming done as soon as the necessary changes to <code>std</code> are made.</p>",
        "id": 316326963,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671213469
    },
    {
        "content": "<p>fair enough....</p>",
        "id": 316327143,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671213502
    },
    {
        "content": "<p>For now I think defining abbreviations </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">bit0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">bit1</span> <span class=\"o\">:=</span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>is the quickest fix</p>",
        "id": 316327674,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671213643
    },
    {
        "content": "<p>@experts : Is this acceptable for now?</p>",
        "id": 316327805,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671213679
    },
    {
        "content": "<p>Then, in order to meet this requirement (<a href=\"#narrow/stream/287929-mathlib4/topic/port.20progress/near/316275723\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/port.20progress/near/316275723</a>) <br>\nI manually change occurrences of <code>bit0</code> and <code>bit1</code> to <code>0</code> and <code>1</code> respectively, in all statements (but not proofs)</p>",
        "id": 316328357,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671213832
    },
    {
        "content": "<p>I don't understand. That means you will be writing a bunch of useless lemmas that don't have mathlib counterparts.</p>",
        "id": 316328542,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671213885
    },
    {
        "content": "<p>Why don't you just keep the current meaning of <code>bit0</code> and <code>bit1</code>?</p>",
        "id": 316328607,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671213906
    },
    {
        "content": "<p>Currently <code>bit0</code> and <code>bit1</code> have no meaning in <code>lean4</code>.  Giving them the same meaning would mean writing all these instances here : <br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/init/core.html#bit0\">https://leanprover-community.github.io/mathlib_docs/init/core.html#bit0</a></p>",
        "id": 316329172,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671214073
    },
    {
        "content": "<p>What instances do you mean? I see none in there.</p>",
        "id": 316329389,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671214123
    },
    {
        "content": "<p>Oh, you mean typeclass arguments?</p>",
        "id": 316329486,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671214151
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/data.2Enat.2Ebits/near/316329389\">said</a>:</p>\n<blockquote>\n<p>What instances do you mean? I see none in there.</p>\n</blockquote>\n<p>Yes</p>",
        "id": 316329553,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671214168
    },
    {
        "content": "<p>Then please do.</p>",
        "id": 316329834,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671214249
    },
    {
        "content": "<p>Okay, I'll do that. I just realised my abbrevs wont work on some of them anyway. This will go inside <code>Init.Data.Nat.Bitwise</code></p>",
        "id": 316330276,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671214393
    },
    {
        "content": "<p>Found <code>bit0</code> and <code>bit1</code> in <code>Mathlib.Init.ZeroOne</code></p>",
        "id": 316334909,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671215756
    },
    {
        "content": "<p>A good way to find everything is <code>import Mathlib</code>.</p>",
        "id": 316343160,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671218448
    },
    {
        "content": "<p>or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=bit0#doc\">docs4#bit0</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=bit1#doc\">docs4#bit1</a>.</p>",
        "id": 316343418,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1671218550
    },
    {
        "content": "<p>(and you can send messages to yourself on Zulip if you want to experiment with other docs4# stuff)</p>",
        "id": 316343545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671218611
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466334\">@Shreyas Srinivas</span> I'm confused about what you wrote:<br>\n<span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/287929-mathlib4/topic/data.2Enat.2Ebits/near/316327674\">said</a>:</p>\n<blockquote>\n<p>For now I think defining abbreviations </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">bit0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">bit1</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>is the quickest fix</p>\n</blockquote>\n<p>Do you realize that this isn't what <code>bit0</code> and <code>bit1</code> mean? <code>bit0 x = x + x</code></p>",
        "id": 316343569,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1671218625
    },
    {
        "content": "<p>Consider that canceled</p>",
        "id": 316343664,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671218646
    },
    {
        "content": "<p>I said that two seconds before I read the definition</p>",
        "id": 316343744,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671218677
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/data.2Enat.2Ebits/near/316343545\">said</a>:</p>\n<blockquote>\n<p>(and you can send messages to yourself on Zulip if you want to experiment with other docs4# stuff)</p>\n</blockquote>\n<p>Talking to yourself on zulip is one of those things that's much more helpful than you'd think <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 316343778,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671218690
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 316343836,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671218714
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/287929-mathlib4/topic/data.2Enat.2Ebits/near/316334909\">said</a>:</p>\n<blockquote>\n<p>Found <code>bit0</code> and <code>bit1</code> in <code>Mathlib.Init.ZeroOne</code></p>\n</blockquote>\n<p>Using this now</p>",
        "id": 316343887,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671218741
    },
    {
        "content": "<p>I am encountering a number of errors with the <code>cases</code> tactic in <code>Init.data.nat.bitwise</code> . The documentation says that the tactic basically expands objects of an inductive type along each of its constructors, in order to a case-by-case analysis. By that definition the proofs look like they ought to work. Basically lean complains that the definition is not really inductive on objects of the <code>Bool</code> type</p>\n<p>Before I individually tackle these proofs and fix them, is there a known issue? Are there standard fixes?</p>",
        "id": 316347514,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671220103
    },
    {
        "content": "<p>Can you give a mwe?</p>",
        "id": 316348724,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671220531
    },
    {
        "content": "<p>mwe?</p>",
        "id": 316348859,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671220565
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> . That's the best way to ask a question on this site.</p>",
        "id": 316349005,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671220623
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">def</span> <span class=\"n\">boddDiv2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">boddDiv2</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">div2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">boddDiv2</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bodd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">boddDiv2</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">bodd_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bodd</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">bodd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">bodd</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">unfold</span> <span class=\"n\">boddDiv2</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">boddDiv2</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">fst</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 316349621,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671220824
    },
    {
        "content": "<p>fails at <code>cases fst</code>. This is directly from the library with <code>abbrev \\N = Nat</code> and <code>open Nat</code></p>",
        "id": 316349702,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671220853
    },
    {
        "content": "<p>There is no <code>fst</code>. There is a <code>fst✝</code> but that is inaccessible.</p>",
        "id": 316350571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671221147
    },
    {
        "content": "<p>But why does it work in lean 3 (from where, modulo lean3port, the code came)? and what's the typical fix?</p>",
        "id": 316350708,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671221185
    },
    {
        "content": "<p>Does <code>cases' fst with fst fst</code> work?</p>",
        "id": 316351150,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1671221335
    },
    {
        "content": "<p>In Lean 3 there were no inaccessible terms. You are using the code generated by the porting program, right? <code>mathlib3port</code> and <code>lean3port</code>?</p>",
        "id": 316351217,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671221366
    },
    {
        "content": "<p>Lean 3 introduced more (accessible) names automatically</p>",
        "id": 316351284,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1671221396
    },
    {
        "content": "<p>yeah</p>",
        "id": 316351296,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671221402
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/data.2Enat.2Ebits/near/316351150\">said</a>:</p>\n<blockquote>\n<p>Does <code>cases' fst with fst fst</code> work?</p>\n</blockquote>\n<p><code>cases'</code> is an unknown tactic (playground link : <a href=\"https://lean.math.hhu.de/#code=import%20Mathlib%0A%0Aabbrev%20%E2%84%95%20%3A%3D%20Nat%0Aopen%20Nat%0Adef%20boddDiv2%20%3A%20%E2%84%95%20%E2%86%92%20Bool%20%C3%97%20%E2%84%95%0A%20%20%7C%200%20%3D%3E%20(false%2C%200)%0A%20%20%7C%20succ%20n%20%3D%3E%0A%20%20%20%20match%20boddDiv2%20n%20with%0A%20%20%20%20%7C%20(false%2C%20m)%20%3D%3E%20(true%2C%20m)%0A%20%20%20%20%7C%20(true%2C%20m)%20%3D%3E%20(false%2C%20succ%20m)%0A%0A%0Adef%20div2%20(n%20%3A%20%E2%84%95)%20%3A%20%E2%84%95%20%3A%3D%0A%20%20(boddDiv2%20n).2%0A%0Adef%20bodd%20(n%20%3A%20%E2%84%95)%20%3A%20Bool%20%3A%3D%0A%20%20(boddDiv2%20n).1%0A%0A%0A%40%5Bsimp%5D%0Atheorem%20bodd_succ%20(n%20%3A%20%E2%84%95)%20%3A%20bodd%20(succ%20n)%20%3D%20not%20(bodd%20n)%20%3A%3D%20by%0A%20%20unfold%20bodd%20%3C%3B%3E%20unfold%20boddDiv2%20%3C%3B%3E%20cases%20boddDiv2%20n%20%3C%3B%3E%20cases'%20fst%20with%20fst%20fst%20%3C%3B%3E%20rfl%0A\">https://lean.math.hhu.de/#code=import%20Mathlib%0A%0Aabbrev%20%E2%84%95%20%3A%3D%20Nat%0Aopen%20Nat%0Adef%20boddDiv2%20%3A%20%E2%84%95%20%E2%86%92%20Bool%20%C3%97%20%E2%84%95%0A%20%20%7C%200%20%3D%3E%20(false%2C%200)%0A%20%20%7C%20succ%20n%20%3D%3E%0A%20%20%20%20match%20boddDiv2%20n%20with%0A%20%20%20%20%7C%20(false%2C%20m)%20%3D%3E%20(true%2C%20m)%0A%20%20%20%20%7C%20(true%2C%20m)%20%3D%3E%20(false%2C%20succ%20m)%0A%0A%0Adef%20div2%20(n%20%3A%20%E2%84%95)%20%3A%20%E2%84%95%20%3A%3D%0A%20%20(boddDiv2%20n).2%0A%0Adef%20bodd%20(n%20%3A%20%E2%84%95)%20%3A%20Bool%20%3A%3D%0A%20%20(boddDiv2%20n).1%0A%0A%0A%40%5Bsimp%5D%0Atheorem%20bodd_succ%20(n%20%3A%20%E2%84%95)%20%3A%20bodd%20(succ%20n)%20%3D%20not%20(bodd%20n)%20%3A%3D%20by%0A%20%20unfold%20bodd%20%3C%3B%3E%20unfold%20boddDiv2%20%3C%3B%3E%20cases%20boddDiv2%20n%20%3C%3B%3E%20cases'%20fst%20with%20fst%20fst%20%3C%3B%3E%20rfl%0A</a>)</p>",
        "id": 316351670,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671221543
    },
    {
        "content": "<p>You can get it with <code>import Mathlib.Tactic.Cases</code>. The problem seems to be that the definitions of <code>boddDiv2</code> generated by the equation compilers in Lean 3 and Lean 4 are different.</p>",
        "id": 316352519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671221896
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- lean 3</span>\n<span class=\"kn\">import</span> <span class=\"n\">logic.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">bodd_succ'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bodd</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">bnot</span> <span class=\"o\">(</span><span class=\"n\">bodd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">bodd</span> <span class=\"n\">bodd_div2</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">bodd_div2</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  ⊢ (bodd_div2._match_1 (fst, snd)).fst = bnot (fst, snd).fst -/</span>\n  <span class=\"n\">cases</span> <span class=\"n\">fst</span><span class=\"bp\">;</span>\n  <span class=\"n\">refl</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- lean 4</span>\n\n<span class=\"c1\">-- ... your code omitted</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">bodd_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bodd</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">bodd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">bodd</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">boddDiv2</span>\n  <span class=\"n\">cases</span> <span class=\"n\">boddDiv2</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  ⊢ (match x✝ with</span>\n<span class=\"cm\">    | (false, m) =&gt; (true, m)</span>\n<span class=\"cm\">    | (true, m) =&gt; (false, succ m)).fst =</span>\n<span class=\"cm\">  !(match n with</span>\n<span class=\"cm\">      | 0 =&gt; (false, 0)</span>\n<span class=\"cm\">      | succ n =&gt;</span>\n<span class=\"cm\">        match boddDiv2 n with</span>\n<span class=\"cm\">        | (false, m) =&gt; (true, m)</span>\n<span class=\"cm\">        | (true, m) =&gt; (false, succ m)).fst</span>\n<span class=\"cm\">        -/</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"n\">fst</span> <span class=\"n\">snd</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">fst</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n    <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 316353148,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671222150
    },
    {
        "content": "<p>Thanks. it is interesting that one can use a match inside a tactic like that</p>",
        "id": 316353910,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671222454
    },
    {
        "content": "<p>also, in many of the induction proofs. the <code>cases</code> clause seems unnecessary where <code>simp</code> is used for the base case of the induction</p>",
        "id": 316354190,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671222573
    },
    {
        "content": "<p>This is very interesting</p>",
        "id": 316354205,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671222579
    },
    {
        "content": "<p>An update:  <br>\nI am still manually weeding out errors in <code>Init.Data.Nat.Bitwise</code> of which there were a considerable number in the beginning. </p>\n<ol>\n<li>A number of errors can be traced to inaccessible variables. I have removed those with <code>rename_i</code>.</li>\n<li>A number of errors arise from the <code>rw</code> tactic. Some are removed by applying <code>simp</code> instead. Others get removed when I introduce that part of the proof in a have statement. My goal tomorrow is to identify more of these cases and narrow them down</li>\n<li>I would be grateful for any help with <code>binaryRec</code>, <code>theorem bodd_succ</code> and <code>theorem div2_succ</code>.</li>\n</ol>\n<p>You can see the current state on the latest commit in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1075\">mathlib4#1075</a>.</p>",
        "id": 316533766,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671330172
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  I saw your comment on the issue. I will do this tomorrow. Is there a simple way to move the PR or is a fresh one required?</p>",
        "id": 316533895,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671330361
    },
    {
        "content": "<p>In addition, <code>Data.Nat.Bits</code> is less than half the size of <code>Bitwise</code> and has tiny proofs for the most part. So hopefully once this file is done, <code>data.nat.bits</code> will follow soon.</p>",
        "id": 316534793,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671331377
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466334\">@Shreyas Srinivas</span> <br>\nOne way to make a PR from a branch is to merge your PR (which is into a mathlib4 branch) and then make a PR from there. But after that it is better to just push to the branch on mathlib4 by changing the git remote (or checking it out) otherwise changes made by others will cause a mess.</p>",
        "id": 316544221,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1671341625
    },
    {
        "content": "<p>New PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/1095\">mathlib4#1095</a></p>",
        "id": 316581555,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671366951
    },
    {
        "content": "<p>Need some help with tactics:<br>\nI have the following tactic state:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span>\n<span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"mi\">0</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">bit</span> <span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"n\">h'</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">false</span> <span class=\"mi\">0</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">z</span>\n<span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">Bool</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">bit</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">bf</span><span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"n\">n0</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n<span class=\"n\">e</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">bit</span> <span class=\"n\">false</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">e</span><span class=\"bp\">✝</span> <span class=\"bp\">=</span> <span class=\"n\">z</span>\n</code></pre></div>\n<p>For context, there is a theorem <code>bit_zero</code> that says <code>bit false 0 = 0</code>. I applied <code>rw</code> on <code>e^{\\dagger}</code> to get <code>e</code>. I was under the impression that I could use proof irrelevance to show the goal. How do I get there?</p>",
        "id": 316643623,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671402468
    },
    {
        "content": "<p>Is there such a way?</p>",
        "id": 316644969,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671403587
    },
    {
        "content": "<p>Your goal shouldn't contain inaccessible terms, they're inaccessible. How did the dagger term appear? You should have named it when it did</p>",
        "id": 316646140,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671404550
    },
    {
        "content": "<p>The goal looked like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span>\n<span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"mi\">0</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">bit</span> <span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"n\">h'</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">false</span> <span class=\"mi\">0</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">z</span>\n<span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">Bool</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">bit</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">bf</span><span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"n\">n0</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n<span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">bit</span> <span class=\"n\">false</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">z</span>\n</code></pre></div>\n<p>Then I applied<br>\n<code>rw [bit_zero] at e</code><br>\nThis gave the goal you see there</p>",
        "id": 316646270,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671404667
    },
    {
        "content": "<p>Okay, I think I found the mistake. <code>C</code> does not return a value of type <code>Prop</code></p>",
        "id": 316646976,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671405319
    },
    {
        "content": "<p>are there limits on how deep <code>rw</code> can look and replace terms in lean4? I see instances where <code>rw</code> should work per the basic idea that it takes equalities and replaces instances of LHS with RHS, but it doesn't do so.</p>",
        "id": 316648023,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671406251
    },
    {
        "content": "<p>The lean3port version of the proof makes it clear that the same <code>rw</code>'s actually work in lean3</p>",
        "id": 316648235,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671406478
    },
    {
        "content": "<p>Update + Help Needed:</p>\n<ol>\n<li>Update : I have reduced the errors in <code>Init.Data.Nat.Bitwise</code> to about 5 theorems.</li>\n<li>Help needed : I need help with the proof of <code>test_bit_bitwise</code>. Producing an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> is next to impossible because of the dependency chain. </li>\n</ol>\n<p>Specifically : in commit <a href=\"https://github.com/leanprover-community/mathlib4/pull/1095/commits/b1cac6a15b860e7e4420fa021de72dfc596caf06\">https://github.com/leanprover-community/mathlib4/pull/1095/commits/b1cac6a15b860e7e4420fa021de72dfc596caf06</a><br>\n(This is the top commit on this branch <code>data_nat_bits</code> right now ). </p>\n<p>In lines <strong>544</strong> and <strong>540</strong>, I have reduced the goal to <code>testBit (succ n) (succ k) = true</code> and <code>testBit (succ n) (succ k) = false </code> respectively.<br>\nThese are the cases I generated using the line <code>cases testBit (succ n) (succ k)</code> (line <strong>534</strong>)  in the first place, so it seems that trivially these goals should be true (by the case distinction). I am not sure how to make this claim a proof</p>",
        "id": 316864788,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671502305
    },
    {
        "content": "<p>A screenshot if it helps :<br>\n<a href=\"/user_uploads/3121/sV7dR4Rq8VbXxZYcc0LhsGOM/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/sV7dR4Rq8VbXxZYcc0LhsGOM/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/sV7dR4Rq8VbXxZYcc0LhsGOM/image.png\"></a></div>",
        "id": 316865460,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671502845
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466334\">@Shreyas Srinivas</span> Just to clarify, is the proof also supposed to have a <code>succ.succ</code> case?</p>",
        "id": 316876042,
        "sender_full_name": "Anand Rao",
        "timestamp": 1671512439
    },
    {
        "content": "<p>Here is the code: <a href=\"https://github.com/leanprover-community/mathlib4/pull/1095/commits/feedbe3a84e06d4a190d3289420a664926c97981\">https://github.com/leanprover-community/mathlib4/pull/1095/commits/feedbe3a84e06d4a190d3289420a664926c97981</a></p>",
        "id": 316877349,
        "sender_full_name": "Anand Rao",
        "timestamp": 1671513564
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303675\">Anand Rao</span> <a href=\"#narrow/stream/287929-mathlib4/topic/data.2Enat.2Ebits/near/316876042\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> I have pushed a fix for <code>test_bit_bitwise</code>, following <a href=\"https://github.com/leanprover-community/lean/blob/53e8520d8964c7632989880372d91ba0cecbaf00/library/init/data/nat/bitwise.lean#L273\">this Lean3 proof</a>.</p>\n</blockquote>\n<p>That is where is started. It seemed it wouldn't work, which is how I ended up with the long proof.</p>",
        "id": 316883955,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671518518
    },
    {
        "content": "<p>It works thanks</p>",
        "id": 316886575,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671520078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466334\">@Shreyas Srinivas</span>,  <span class=\"user-mention\" data-user-id=\"303675\">@Anand Rao</span>, anyone else working on <code>Data.Nat.Bits</code>.</p>\n<p>I don't think it was a good idea to start translating proofs that were about mathlib3's <code>bitwise</code> into proofs about Lean 4's <code>bitwise</code>. </p>\n<p>We just don't care, for the purpose of getting the port done, what Lean 4 thinks <code>bitwise</code> means. We just copy across the mathlib3 bitwise, call it <code>bitwise'</code> to avoid a name collision, and get on with it.</p>\n<p>I've done this, and removed all the errors in <code>Mathlib.Init.Dat.Nat.Bitwise</code>.</p>\n<p>What I want to do next is to change all the theorems you've written in terms of (Lean 4's) <code>bitwise</code> back into theorems about (mathlib3's) <code>bitwise'</code>. This will obviate the need for the sorried <code>bitwise_eq_bitwise'</code> I added, because nothing in this file will mention <code>bitwise</code> itself.</p>\n<p>However doing so seems like if might be reverting a bunch of your work, so I wanted to discuss this first.</p>",
        "id": 316916451,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671531833
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/data.2Enat.2Ebits/near/316916451\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span>,  <span class=\"user-mention silent\" data-user-id=\"303675\">Anand Rao</span>, anyone else working on <code>Data.Nat.Bits</code>.</p>\n<p>I don't think it was a good idea to start translating proofs that were about mathlib3's <code>bitwise</code> into proofs about Lean 4's <code>bitwise</code>. </p>\n<p>We just don't care, for the purpose of getting the port done, what Lean 4 thinks <code>bitwise</code> means. We just copy across the mathlib3 bitwise, call it <code>bitwise'</code> to avoid a name collision, and get on with it.</p>\n<p>I've done this, and removed all the errors in <code>Mathlib.Init.Dat.Nat.Bitwise</code>.</p>\n<p>What I want to do next is to change all the theorems you've written in terms of (Lean 4's) <code>bitwise</code> back into theorems about (mathlib3's) <code>bitwise'</code>. This will obviate the need for the sorried <code>bitwise_eq_bitwise'</code> I added, because nothing in this file will mention <code>bitwise</code> itself.</p>\n<p>However doing so seems like if might be reverting a bunch of your work, so I wanted to discuss this first.</p>\n</blockquote>\n<p>I had to undo a substantial number of errors arising from rw, simp, cases etc. Undoing all that work might mean starting with 70 odd errors again (took me 3.5 days to bring it all down)</p>",
        "id": 316916883,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671531972
    },
    {
        "content": "<p>So I would like to understand what this entails</p>",
        "id": 316917048,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671532044
    },
    {
        "content": "<p>In terms of errors that might creep back in</p>",
        "id": 316917062,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671532052
    },
    {
        "content": "<p>Hopefully just:</p>\n<ol>\n<li>comment out <code>bitwise_eq_bitwise'</code></li>\n<li>see which theorems break</li>\n<li>change their statements to being about <code>bitwise'</code> rather than <code>bitwise</code></li>\n<li>replace your new proofs with the proofs that mathport provides in <code>lean3port</code></li>\n</ol>",
        "id": 316917266,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671532114
    },
    {
        "content": "<p>I think step two is only <code>bitwise_zero_left</code> and <code>bitwise_zero_right</code>.</p>",
        "id": 316917375,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671532162
    },
    {
        "content": "<p>Further, if it indeed doesn't matter and you have fixed all the errors (as I recall, there were errors in 4 or 5 theorems as of 9 hours ago), is there a reason to change it now?</p>",
        "id": 316917849,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671532331
    },
    {
        "content": "<p>What's the trade off between making this change vs proving bitiwise_eq_bitwise'</p>",
        "id": 316918338,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671532542
    },
    {
        "content": "<p>My change fixed all the errors, at the expense of one sorry, namely <code>bitwise_eq_bitwise'</code></p>",
        "id": 316918441,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671532581
    },
    {
        "content": "<p>I just pushed another change that postpones that later in the file, and it only needed to make the definitions of <code>lor</code> and <code>land</code> match up.</p>",
        "id": 316918503,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671532606
    },
    {
        "content": "<p>I don't really want this to hold up other stuff. I propose we just define <code>lor'</code> and <code>land'</code> the mathlib3 way too. These are barely used later in mathlib.</p>",
        "id": 316918677,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671532681
    },
    {
        "content": "<p>Okay. As a beginner, I guess I am okay with changes as long as I don't have to redo the error fixing for several hours more</p>",
        "id": 316918928,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671532768
    },
    {
        "content": "<p>Hopefully this does not require significant refactoring downstream. All the occurrences of <code>bitwise</code> might have to be replaced with <code>bitwise'</code>. Is this something that should be recorded on the port wiki?</p>",
        "id": 316919367,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671532906
    },
    {
        "content": "<p>All done.</p>",
        "id": 316919725,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671533022
    },
    {
        "content": "<p>No, we don't have to record this at all.</p>",
        "id": 316919744,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671533028
    },
    {
        "content": "<p>The <code>#align nat.bitwise Nat.bitwise'</code> will do the translation automatically in all downstream files.</p>",
        "id": 316919774,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671533041
    },
    {
        "content": "<p>Okay. I will get started on <code>data.nat.bits</code> then</p>",
        "id": 316919920,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671533083
    },
    {
        "content": "<p><code>Mathlib.Init.Data.Nat.Bitwise</code> is error and sorry free (but all in terms of mathlib3 definitions, no contact at all with Lean 4's <code>bitwise</code>.)</p>",
        "id": 316919941,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671533091
    },
    {
        "content": "<p>I left a <code>-- Porting note</code> explaining that if one wants to merge these, you should start with the theorem <code>bitwise_eq_bitwise'</code>, which I stated, but left commented out.</p>",
        "id": 316920011,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671533118
    },
    {
        "content": "<p>Should I change the name of the theorem <code>bitwise_bit_aux</code> to <code>bitwise'_bit_aux</code>?</p>",
        "id": 316920468,
        "sender_full_name": "Anand Rao",
        "timestamp": 1671533270
    },
    {
        "content": "<p>So I will leave that untouched for now and use the file as is. I guess as long as it is error free bitwise_bit_aux needs no further changes?</p>",
        "id": 316920794,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671533379
    },
    {
        "content": "<p>Yes, <code>bitwise_bit_aux</code> does not need any changes. I was only suggesting the renaming to keep it consistent with the rest of the file.</p>",
        "id": 316921496,
        "sender_full_name": "Anand Rao",
        "timestamp": 1671533613
    },
    {
        "content": "<p>Ah okay. I'll take care of that, once I get to my office</p>",
        "id": 316921786,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671533700
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/287929-mathlib4/topic/data.2Enat.2Ebits/near/316864788\">said</a>:</p>\n<blockquote>\n<p>Update + Help Needed:</p>\n<ol>\n<li>Update : I have reduced the errors in <code>Init.Data.Nat.Bitwise</code> to about 5 theorems.</li>\n<li>Help needed : I need help with the proof of <code>test_bit_bitwise</code>. Producing an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> is next to impossible because of the dependency chain. </li>\n</ol>\n<p>Specifically : in commit <a href=\"https://github.com/leanprover-community/mathlib4/pull/1095/commits/b1cac6a15b860e7e4420fa021de72dfc596caf06\">https://github.com/leanprover-community/mathlib4/pull/1095/commits/b1cac6a15b860e7e4420fa021de72dfc596caf06</a><br>\n(This is the top commit on this branch <code>data_nat_bits</code> right now ). </p>\n<p>In lines <strong>544</strong> and <strong>540</strong>, I have reduced the goal to <code>testBit (succ n) (succ k) = true</code> and <code>testBit (succ n) (succ k) = false </code> respectively.<br>\nThese are the cases I generated using the line <code>cases testBit (succ n) (succ k)</code> (line <strong>534</strong>)  in the first place, so it seems that trivially these goals should be true (by the case distinction). I am not sure how to make this claim a proof</p>\n</blockquote>\n<p>For port purposes, this question got resolved. But I am curious about this: if you use <code>cases x</code> on some bool <code>x</code>, then presumably you have one case for <code>x</code> being <code>true</code> and another for <code>x </code> being <code>false</code>. So how do you show a goal like  <code>x = true</code> and <code>x=false</code> in the respective cases. <code>rfl</code> did not work for me, but I can guess that this was because of the absence of an explicit hypothesis to this effect. What's the solution then?</p>",
        "id": 316926411,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671535182
    },
    {
        "content": "<p>Can you give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? Usually in this case I would expect such a goal to be replaced by <code>true = true</code>!</p>",
        "id": 316926793,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671535304
    },
    {
        "content": "<p>You may be looking for <code>cases h : x</code> or <code>cases' h : x</code>. Read the doc-strings for those two tactics.</p>",
        "id": 316926907,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671535332
    },
    {
        "content": "<p><code>Data.Nat.Bits</code> is down to one annoying error about casts, where I'm forgetting how to use <code>HEq</code>, as usual.</p>",
        "id": 316926976,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671535355
    },
    {
        "content": "<p>do you want help with the proof? what's the theorem / goal?</p>",
        "id": 316927447,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671535512
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/data.2Enat.2Ebits/near/316927447\">said</a>:</p>\n<blockquote>\n<p>do you want help with the proof? what's the theorem / goal?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> : directed to me or <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> ?</p>",
        "id": 316927561,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671535554
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span></p>",
        "id": 316927582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671535560
    },
    {
        "content": "<p>I think scott already gave you the clue for your issue</p>",
        "id": 316927664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671535578
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">bitCasesOn_bit</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">bit</span> <span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">bitCasesOn</span> <span class=\"o\">(</span><span class=\"n\">bit</span> <span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">H</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">eq_of_heq</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">eq_rec_heq</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bodd_bit</span><span class=\"o\">,</span> <span class=\"n\">div2_bit</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>is the last sorry.</p>",
        "id": 316927698,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671535595
    },
    {
        "content": "<p>The <code>eq_rec_heq</code> is giving a dud goal full of mvars.</p>",
        "id": 316927717,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671535609
    },
    {
        "content": "<p>Presumably because bitCasesOn, <del>defined via pattern matching</del>, has changed slightly, and Lean can't see an <code>eq.rec</code>.</p>",
        "id": 316927871,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671535668
    },
    {
        "content": "<p>if I'm reading the proof correctly it first introduces an HEq and then turns it into an equality with eq.rec of stuff</p>",
        "id": 316927993,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671535705
    },
    {
        "content": "<p>Maybe we just need to give the motive for the <code>eq_rec_heq</code>?</p>",
        "id": 316928021,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671535719
    },
    {
        "content": "<p>Do you have a mathlib-free mwe?</p>",
        "id": 316928054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671535735
    },
    {
        "content": "<p>I assume bitCasesOn is the only new thing here</p>",
        "id": 316928094,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671535748
    },
    {
        "content": "<p>oh and <code>bit</code></p>",
        "id": 316928119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671535755
    },
    {
        "content": "<p>This is in <code>Mathlib.Data.Nat.Bits</code></p>",
        "id": 316928169,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671535772
    },
    {
        "content": "<p>on branch <code>data_nat_bits</code></p>",
        "id": 316928179,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671535778
    },
    {
        "content": "<p>yes but that will take 10 minutes ;)</p>",
        "id": 316928231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671535800
    },
    {
        "content": "<p><code>eq_of_heq &lt;| (eq_rec_heq (φ := fun x =&gt; x) _ _).trans</code></p>",
        "id": 316930980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671536727
    },
    {
        "content": "<p>I guess it took 10 minutes anyway</p>",
        "id": 316931028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671536744
    },
    {
        "content": "<p>Okay, can you explain how the <code>phi := </code> is helping?</p>",
        "id": 316931383,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671536859
    },
    {
        "content": "<p>I suggest you change the definition of <code>bitCasesOn</code> to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bitCasesOn</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">bit</span> <span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">bit_decomp</span> <span class=\"n\">n</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span> <span class=\"bp\">..</span>\n</code></pre></div>\n<p>though if the proof is going to depend on how it's written</p>",
        "id": 316931475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671536884
    },
    {
        "content": "<p>as a bonus, you don't need to specify the motive in that case</p>",
        "id": 316931522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671536899
    },
    {
        "content": "<p>Nice! I still don't understand, though. :-)</p>",
        "id": 316931810,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671536997
    },
    {
        "content": "<p>But perhaps I should sleep, in any case.</p>",
        "id": 316931822,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671537002
    },
    {
        "content": "<p>it's what you suspected: lean can't figure out the motive here, because <code>eq_rec_heq</code> isn't stated for arbitrary motive (which would be solved by unification), it is actually a lambda which drops one of the arguments:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.explicit</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"k\">#print</span> <span class=\"n\">eq_rec_heq</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">eq_rec_heq.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">φ</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n  <span class=\"bp\">@</span><span class=\"n\">HEq</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span> <span class=\"n\">φ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">a'</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Eq.recOn</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span> <span class=\"n\">φ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">a'</span> <span class=\"n\">h</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">eqRec_heq</span>\n</code></pre></div>",
        "id": 316931833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671537002
    },
    {
        "content": "<p>Ah, I saw that <code>(fun x x_1 ↦ φ x)</code> at one point, and thought it was weird, but didn't follow it up.</p>",
        "id": 316932034,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671537060
    },
    {
        "content": "<p>coupled with the fact that <code>bitCasesOn</code> doesn't use <code>Eq.recOn</code>, it uses <code>Eq.mpr</code>, I suspect it's throwing lean into confusion</p>",
        "id": 316932109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671537083
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 316959947,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671545659
    },
    {
        "content": "<p>What are the rules for writing documentation strings? At the moment there are 21 linting errors in <code>Init...Bitwise</code> alone of the form <br>\n<code>/- definition missing documentation string -/</code></p>",
        "id": 316960164,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671545724
    },
    {
        "content": "<p>Please try to write docstrings as best you can. My guess is that this was a file from core Lean 3 if the mathlib4 name starts <code>Init</code>, and core Lean 3 was not being linted for docstrings (so the linter is only picking up on this now), but docstrings are invaluable. A simple sentence suffices. If you're not sure what to write then please ask for help.</p>",
        "id": 316960704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671545861
    },
    {
        "content": "<p>And there is one linter error that complains that <code>simp</code> can prove this lemma using <code>simp only ....</code>. Of course the original proofs are not using <code>simp</code> but <code>unfold</code>s and <code>rw</code>s</p>",
        "id": 316960922,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671545911
    },
    {
        "content": "<p>Lean 4 <code>simp</code> is sometimes better than Lean 3. If the linter is telling you that <code>simp</code> can prove it then you don't have to change the proof to <code>by simp</code> but please remove the <code>@[simp]</code> attribute and make a porting note saying that in mathlib3 this was <code>simp</code>. That should placate the linter.</p>",
        "id": 316961183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671545989
    },
    {
        "content": "<p>One last linter error. Lean is complaining about some unused <code>have</code> that I can't see anywhere.<br>\nMore specifics:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">Nat.binary_rec_zero</span> <span class=\"c\">/-</span><span class=\"cm\"> unnecessary have this : n' &lt; 0 -/</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">Nat.binary_rec_eq</span> <span class=\"c\">/-</span><span class=\"cm\"> unnecessary have this : n' &lt; Nat.bit b n -/</span>\n</code></pre></div>\n<p>Unfortunately, there doesn't seem to be such <code>have</code>s anywhere. What would cause this? I have searched across the file for such patterns.</p>",
        "id": 316990743,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671554238
    },
    {
        "content": "<p>I just encountered the same error in another file.</p>",
        "id": 316990934,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671554286
    },
    {
        "content": "<p><a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EInt.2EGcd.20-.20NormNum/near/316990729\">here</a></p>",
        "id": 316990969,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671554298
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/287929-mathlib4/topic/data.2Enat.2Ebits/near/316990934\">said</a>:</p>\n<blockquote>\n<p>I just encountered the same error in another file.</p>\n</blockquote>\n<p>I checked if it might be happening because of a tactic unfolding a definition which contains <code>have</code>s that are unnecessary for some particular instantiation. But this does not seem to be the case, otherwise the file-wide pattern search would have returned something</p>",
        "id": 316991789,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671554557
    },
    {
        "content": "<p>I've resolved this now, see discussion at <a href=\"#narrow/stream/348111-std4/topic/spurious.20.60unusedHavesSuffices.60.20linter.20error.3F\">https://leanprover.zulipchat.com/#narrow/stream/348111-std4/topic/spurious.20.60unusedHavesSuffices.60.20linter.20error.3F</a></p>",
        "id": 317052899,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671575949
    }
]