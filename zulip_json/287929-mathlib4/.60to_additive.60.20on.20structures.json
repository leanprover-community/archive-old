[
    {
        "content": "<p>What is the right way to invoke the <code>to_additive</code> tactic now?<br>\nConsider:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.ToAdditive</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Units</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">AddUnits</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">AddUnits</span><span class=\"o\">]</span> <span class=\"n\">Units</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">Units</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">Units.val</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"o\">(</span><span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">Units</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"o\">(</span><span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">AddUnits</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"c1\">-- failed to synthesize</span>\n</code></pre></div>\n<p>The <code>AddUnits</code> mapping isn't an automatic one (the current tactic code assumes all lower case, iiuc). Separately, I don't think the <code>instance</code> is firing -- as seen by the failure to synthesize.</p>",
        "id": 308324318,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1667795040
    },
    {
        "content": "<p><code>to_additive</code> still has some kinks to work out for lean 4 last I checked. It's not a high priority for me right now but it would be good if someone found the time to look at the failure cases</p>",
        "id": 308324719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667795369
    },
    {
        "content": "<p>It was basically directly ported but lean 4 handles several things differently and the casing convention is different meaning that the old code isn't doing the right thing</p>",
        "id": 308324795,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667795407
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/549\">mathlib4#549</a> as WIP to stress-test <code>to_additive</code></p>",
        "id": 308325032,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1667795683
    }
]