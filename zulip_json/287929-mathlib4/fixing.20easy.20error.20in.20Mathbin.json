[
    {
        "content": "<p>So the autoport suggests this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">Symmetric.iff</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Symmetric</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">H</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">H</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Symmetric.flip_eq</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Symmetric</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">flip</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n  <span class=\"n\">funext₂</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">propext</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">h.Iff</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>and the thing I want to flag is that the very end of the proof contains <code>h.Iff</code> which here should be <code>h.iff</code> if the previous theorem is anything to go by. My understanding is that <code>Symmetric.iff</code> is correctly named and the porting program has incorrectly changed <code>h.iff</code> into <code>h.Iff</code>. But what do I do as the manual porter? Do I just change <code>h.Iff</code> to <code>h.iff</code> and move on? Am I supposed to <code>#align</code> something to ensure that this never happens again? Or will this happen again regardless of what I do? Or have I misunderstood and I should be doing something else?</p>",
        "id": 310377245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668594460
    },
    {
        "content": "<p>this is an issue due to mathport not having enough context to resolve the name</p>",
        "id": 310378627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668594903
    },
    {
        "content": "<p>it would be nice to fix but it's not easy</p>",
        "id": 310378692,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668594923
    },
    {
        "content": "<p>As a porter, you should just fix it. The reason it is being capitalized is because mathport guesses that it could be a reference to the global constant <code>iff -&gt; Iff</code></p>",
        "id": 310378742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668594940
    }
]