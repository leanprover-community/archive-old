[
    {
        "content": "<p>I think this kind of issues has already been reported and they are Lean 4 formatter issues instead of mathport issue but let me make sure I'm not missing something. Mathport write things like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NoZeroDivisors</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">NoZeroDivisors</span>\n      <span class=\"n\">α</span><span class=\"bp\">ᵃᵒᵖ</span> <span class=\"n\">where</span> <span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">*</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Or.imp</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hx</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unop_injective</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hy</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unop_injective</span> <span class=\"n\">hy</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"n\">α</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">op_injective</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which doesn't work (with a super confusing error message) but changing the code layout to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NoZeroDivisors</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">NoZeroDivisors</span> <span class=\"n\">α</span><span class=\"bp\">ᵃᵒᵖ</span> <span class=\"n\">where</span>\n<span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">*</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Or.imp</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hx</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unop_injective</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hy</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unop_injective</span> <span class=\"n\">hy</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"n\">α</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">op_injective</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>fixes everything.</p>",
        "id": 315600598,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1670940906
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/1945\">https://github.com/leanprover/lean4/pull/1945</a>!</p>",
        "id": 315601335,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670941095
    }
]