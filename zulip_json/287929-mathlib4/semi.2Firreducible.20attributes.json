[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/18164\">#18164</a> tracks occurences of <code>attribute [semireducible]</code> and <code>attribute [irreducible]</code> as discussed yesterday in the porting meeting.</p>",
        "id": 321147491,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673612639
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/18165\">#18165</a> contains the script that generated the list</p>",
        "id": 321147576,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673612658
    },
    {
        "content": "<p>Since I have important boring things to do, I started on this instead, in the branch <a href=\"https://github.com/leanprover-community/mathlib/tree/SG_no_irreducible\">branch#SG_no_irreducible</a>. Anyone can contribute there, of course.</p>\n<p>A question: <code>with_one α</code> is currently defined as a type copy of <code>option α</code>, which is made irreducible after the fact. Is it more Lean 4/port compatible to convert it to a single field structure?</p>",
        "id": 321150266,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1673613503
    },
    {
        "content": "<p>What goes wrong if we drop the irreducible attributes without replacement?</p>",
        "id": 321153715,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673614506
    },
    {
        "content": "<p>In fact <code>with_one α</code> is already ported, and the <code>irreducible</code> attribute is indeed just dropped. Is it going to create a mess where API of option leaks everywhere? Just for the record, here is one definition in the file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">unone</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">with_one</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">with_bot.unbot</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n</code></pre></div>\n<p>Yes, it's abusing defeqs in every possible way (including the fact that <code>with_bot α</code> is yet another copy of <code>option α</code>).</p>",
        "id": 321154983,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1673614811
    },
    {
        "content": "<p>And the current Mathlib4 proof is the same:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">unone</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">WithOne</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">WithBot.unbot</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n</code></pre></div>",
        "id": 321155123,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1673614849
    },
    {
        "content": "<p>Also they should really be called <code>.get</code>, shouldn't they?</p>",
        "id": 321155258,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673614887
    },
    {
        "content": "<p>Those are only leaks if someone unfolds <code>unone</code></p>",
        "id": 321157022,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673615373
    },
    {
        "content": "<p><del>Arguably we could solve that by wrapping all such defs in a <code>do_not_unfold_me</code> alias for <code>id</code></del> I guess a <code>withOne.ofWithBot</code> alias for <code>id</code> is probably a better solution there</p>",
        "id": 321157131,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673615403
    },
    {
        "content": "<p>For the lemmas it doesn't matter as long as the statements don't leak</p>",
        "id": 321157230,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673615417
    },
    {
        "content": "<p>I was involved with writing the Lean 3 API for some of the with_ stuff and I remember leaks being a real problem, but I might have been writing crappy code. I don't know whether we should (a) just press on (b) change the definition in Lean 4 or (c) change the definition in Lean 3 first.</p>\n<p>There's a chance that the <code>irreducible</code> attribute is dropped in mathlib4 because the porting program was just silently ignoring <code>attribute [irreducible] foo</code> lines.</p>",
        "id": 321233716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673636108
    },
    {
        "content": "<p>I don't think the porting program silently ignores many things, usually it generates comments that humans then ignore</p>",
        "id": 321234272,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673636252
    },
    {
        "content": "<p>I think that in the <code>attribute [irreducible]</code> case it was in the past silently ignoring this (that was my understanding of what Mario told me, but I might have misunderstood)</p>",
        "id": 321234576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673636318
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/18168\">#18168</a> removes a few of them. Only easy cases: move the attribute to the definition, and unfold the definition when needed in proofs.</p>",
        "id": 321323246,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1673689302
    }
]