[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Hom.Group</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Equiv.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Pi.Algebra</span> <span class=\"c1\">-- commenting this out makes #synth below work</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">MulEquiv</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">M</span> <span class=\"bp\">≃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"bp\">→ₙ*</span> <span class=\"n\">N</span>\n\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"s2\">\" ≃* \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">MulEquiv</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MulEquivClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">outParam</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Mul</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">outParam</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Mul</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">EquivLike</span> <span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">where</span>\n  <span class=\"n\">map_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">MulEquivClass</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MulHomClass</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">h.coe</span><span class=\"o\">,</span> <span class=\"n\">coe_injective'</span> <span class=\"o\">:=</span> <span class=\"n\">FunLike.coe_injective'</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MulEquivClass</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">≃*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f.toFun</span>\n  <span class=\"n\">inv</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f.invFun</span>\n  <span class=\"n\">left_inv</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f.left_inv</span>\n  <span class=\"n\">right_inv</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f.right_inv</span>\n  <span class=\"n\">coe_injective'</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">cases</span> <span class=\"n\">f</span>\n    <span class=\"n\">cases</span> <span class=\"n\">g</span>\n    <span class=\"n\">congr</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Equiv.coe_fn_injective</span> <span class=\"n\">h₁</span>\n  <span class=\"n\">map_mul</span> <span class=\"o\">:=</span> <span class=\"n\">MulEquiv.map_mul'</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">MulHomClass</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">≃*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"c1\">-- succeeds/fails depending on Mathlib.Data.Pi.Algebra</span>\n</code></pre></div>",
        "id": 312747221,
        "sender_full_name": "Winston Yin",
        "timestamp": 1669681866
    },
    {
        "content": "<p>Something in the recently merged <code>Data.Pi.Algebra</code> causes some typeclass problems to end in a timeout. How can I debug this?</p>",
        "id": 312747267,
        "sender_full_name": "Winston Yin",
        "timestamp": 1669681919
    },
    {
        "content": "<p>(For <code>Algebra.Hom.Group</code> one would need to merge <a href=\"https://github.com/leanprover-community/mathlib4/pull/659\">mathlib4#659</a>)</p>",
        "id": 312747885,
        "sender_full_name": "Winston Yin",
        "timestamp": 1669682376
    },
    {
        "content": "<p>If I <code>set_option trace.Meta.synthInstance true</code>, it just tells me my <code>MulHomClass</code> typeclass problem has exploded <span aria-label=\"boom\" class=\"emoji emoji-1f4a5\" role=\"img\" title=\"boom\">:boom:</span>, and then the VSCode Infoview crashed</p>",
        "id": 312748883,
        "sender_full_name": "Winston Yin",
        "timestamp": 1669683116
    },
    {
        "content": "<p>Random guess, is that maybe a problem of instance priorities? I ported that file. it's been lying around in review for a while, I think instance priority wasn't available at all when I started it.<br>\nCan debug this later today!</p>",
        "id": 312780482,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1669706021
    },
    {
        "content": "<p>Thanks for looking into this. I don't really understand instance priorities yet, so I would love it if you found a fix and could help me understand it!</p>",
        "id": 312781418,
        "sender_full_name": "Winston Yin",
        "timestamp": 1669706639
    },
    {
        "content": "<p>The error seems to come from the <code>MulHomClass</code> in <code>Algebra.Hom.Group</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">MulHomClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">Mul</span> <span class=\"n\">N</span><span class=\"o\">)]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">N</span> <span class=\"n\">where</span> <span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>If <code>(M N : Type _)</code> are not marked with <code>outParam</code>, then your example works fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">MulHomClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">Mul</span> <span class=\"n\">N</span><span class=\"o\">)]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">N</span> <span class=\"n\">where</span> <span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Since they are marked with <code>outParam</code> it tries to find <code>MulHomClass (M ≃* N) ?m.10225 ?m.10226</code> and then tries literally everything for the two unknowns (which schould be <code>M N</code>), starting with things like <code>MulHomClass (M ≃* N) N Rat</code> and other non-sense.</p>\n<p>The reason that <code>Data.Pi.Algebra</code> causes a timeout is that  it ends up trying something like <code>MulHomClass (M ≃* N) N (?m.10699 →ₙ* ?m.10700)</code> at which point it would fail without <code>Pi.instMul</code>, but with it, it goes mayham.</p>\n<p>Lean 3 code was:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">mul_hom_class</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">fun_like</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>So I guess my question is why does it seem that the <code>outParam</code> should move from <code>M, N</code> to <code>Mul M, Mul N</code> in Lean4? I know very little about <code>outParam</code></p>",
        "id": 312806007,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1669716300
    },
    {
        "content": "<p>(I added this comment to <a href=\"https://github.com/leanprover-community/mathlib4/pull/659\">mathlib4#659</a> but I don't know for sure if that's the correct approach)</p>",
        "id": 312810149,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1669717672
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416472\">Winston Yin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/typeclass.20timeout/near/312748883\">said</a>:</p>\n<blockquote>\n<p>If I <code>set_option trace.Meta.synthInstance true</code>, it just tells me my <code>MulHomClass</code> typeclass problem has exploded <span aria-label=\"boom\" class=\"emoji emoji-1f4a5\" role=\"img\" title=\"boom\">:boom:</span>, and then the VSCode Infoview crashed</p>\n</blockquote>\n<p>As for the debugging, I used</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">800</span>\n</code></pre></div>\n<p>that avoids the crash you mentioned :)</p>",
        "id": 312811005,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1669717876
    },
    {
        "content": "<p>Above problem still persists in <a href=\"https://github.com/leanprover-community/mathlib4/pull/835\">mathlib4#835</a>, after <a href=\"https://github.com/leanprover/lean4/pull/1901\">lean4#1901</a> and <a href=\"https://github.com/leanprover/lean4/pull/1907\">lean4#1907</a> <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 313649305,
        "sender_full_name": "Winston Yin",
        "timestamp": 1670057403
    },
    {
        "content": "<p>Those <code>outParam</code>s on <code>M</code> and <code>N</code> should definition be there, I think there is another thread on this</p>",
        "id": 313673853,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670068699
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 313682204,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670072412
    },
    {
        "content": "<p>This typeclass timeout is still a problem at <a href=\"https://github.com/leanprover-community/mathlib4/pull/835\">mathlib4#835</a>. <span class=\"user-mention\" data-user-id=\"385895\">@Jon Eugster</span> has suggested a fix above, but it just doesn't make sense to me (and causes other errors).</p>",
        "id": 314165245,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670298138
    },
    {
        "content": "<p>The typeclass search spiralling out of control can be viewed at <a href=\"https://gist.github.com/semorrison/2d5249762d6ea4ed6b07cf0b555acd32\">https://gist.github.com/semorrison/2d5249762d6ea4ed6b07cf0b555acd32</a></p>",
        "id": 314165249,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670298158
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>, if you'd have a chance to look at this sometime...?</p>",
        "id": 314165273,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670298199
    },
    {
        "content": "<p>Can we merge <a href=\"https://github.com/leanprover-community/mathlib4/pull/865\">mathlib4#865</a> first and then see what the linter has to say?</p>",
        "id": 314166662,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1670299679
    },
    {
        "content": "<p>Your conversation with Mario there is tangential right, and merging doesn't need to wait for it?</p>",
        "id": 314166826,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670299799
    },
    {
        "content": "<p>I'm trying out the combination of <a href=\"https://github.com/leanprover-community/mathlib4/pull/865\">mathlib4#865</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/835\">mathlib4#835</a> on branch <code>hom_equiv_basic_2</code>.</p>",
        "id": 314167196,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670300053
    },
    {
        "content": "<p>Yeah, nobody has objected to the PR yet.  All the objectionable parts are already merged in std4 after all. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 314168377,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1670301095
    },
    {
        "content": "<p>Okay, so</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.FunLike.Equiv</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddEquivClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">EquivLike</span> <span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">where</span>\n  <span class=\"n\">map_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">b</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span>\n</code></pre></div>\n<p>now says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> The `dangerousInstance` linter reports:</span>\n<span class=\"cm\">SOME INSTANCES ARE DANGEROUS</span>\n<span class=\"cm\">During type-class search, they produce subgoals like `Group ?M`.</span>\n<span class=\"cm\">Try marking the dangerous arguments as implicit instead. -/</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">AddEquivClass.toEquivLike</span> <span class=\"c\">/-</span><span class=\"cm\"> generates subgoals with metavariables: argument 4 inst✝¹ : Add</span>\n<span class=\"cm\">  ?A, argument 5 inst✝ : Add ?B -/</span>\n</code></pre></div>",
        "id": 314173235,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670304867
    },
    {
        "content": "<p>It needs to be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">AddEquivClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">EquivLike</span> <span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">where</span>\n</code></pre></div>",
        "id": 314173969,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1670305509
    },
    {
        "content": "<p>Hooray, that, and changing a few arguments to implicits later, solves all the problems in this PR.</p>",
        "id": 314176346,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670307206
    },
    {
        "content": "<p>... besides a bunch of linting problems, if anyone feels like tackling those. :-)</p>",
        "id": 314177069,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670307933
    },
    {
        "content": "<p>writing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">MulEquivClass</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MulHomClass</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>instead of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">MulEquivClass</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MulHomClass</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>is definitely a trick I didn't know about, cool <span aria-label=\"partying face\" class=\"emoji emoji-1f973\" role=\"img\" title=\"partying face\">:partying_face:</span></p>",
        "id": 314182806,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1670311718
    },
    {
        "content": "<p>Didn't we use to do that all the time in Lean 3, but then typeclass search changed and now it has basically no effect there?</p>",
        "id": 314185114,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670313053
    },
    {
        "content": "<p>I ported Algebra.Hom.Group and kept a few of these <code>{ _ : Mul A}</code> in there. Not needed anymore?</p>",
        "id": 314185375,
        "sender_full_name": "Winston Yin",
        "timestamp": 1670313206
    },
    {
        "content": "<p>Really? But looking at the last PR by Scott it seems that's been done in about 3-4 places? and in the above mwe it is one way to synth the instance.<br>\nI'd be curious to understand things better :)</p>",
        "id": 314185783,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1670313439
    }
]