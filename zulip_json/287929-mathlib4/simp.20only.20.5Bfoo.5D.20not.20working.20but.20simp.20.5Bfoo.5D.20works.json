[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/1154\">mathlib4#1154</a> I have a couple of proofs that should be  <code>rw [foo]</code> or <code>simp only  [foo]</code> but I don't get closure except through <code>simp [foo]</code></p>\n<p>For example, in theorem <code>one</code>, I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ab</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">•</span> <span class=\"n\">b</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>which should be a simple <code>rw [one_mul, one_mul] at ab</code> but isn't because coercions? Here <code>simp only [one_mul] at ab</code> doesn't  work, but <code>simp [one_mul] at ab</code> does.</p>\n<p>Setting <code>pp.all true</code></p>\n<p>gives me the terrifying tactic state</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ab</span><span class=\"o\">:</span> <span class=\"n\">M</span>\n<span class=\"n\">ab</span><span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Eq.</span><span class=\"o\">{</span><span class=\"n\">u_2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">M</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HSMul.hSMul.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHSMul.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">MulAction.toSMul.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">One.toOfNat1.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Monoid.toOne.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)))</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HSMul.hSMul.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHSMul.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">MulAction.toSMul.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">One.toOfNat1.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Monoid.toOne.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)))</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">@</span><span class=\"n\">Eq.</span><span class=\"o\">{</span><span class=\"n\">u_2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 317232159,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671650451
    },
    {
        "content": "<p>I don't think you've been around long enough if you think that's terrifying. Didn't I post a 25 line pp.all output earlier today? ;-)</p>",
        "id": 317236404,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671652035
    },
    {
        "content": "<p>Try making the explicit <code>one_mul</code> term you want to rewrite using <code>@one_mul</code> and feeding in all the non-instances, and then compare.</p>",
        "id": 317236667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671652129
    },
    {
        "content": "<p>Well I've been exposed to C++ template errors, so nothing's really terrifying.</p>",
        "id": 317236691,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671652137
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/simp.20only.20.5Bfoo.5D.20not.20working.20but.20simp.20.5Bfoo.5D.20works/near/317236667\">said</a>:</p>\n<blockquote>\n<p>Try making the explicit <code>one_mul</code> term you want to rewrite using <code>@one_mul</code> and feeding in all the non-instances, and then compare.</p>\n</blockquote>\n<p>If I understand this, I'm getting issues where <code>rw</code> isn't seeing the full type applied to <code>a</code> here.</p>\n<p>But I'm probably not understanding \"feeding in all the non-instances\"</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"bp\">@</span><span class=\"n\">one_mul</span> <span class=\"n\">M</span> <span class=\"n\">a</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">a</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">MulOneClass</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n</code></pre></div>\n<p>If I'm understanding correctly, <code>a</code> is <code>MulAction</code> which should give <code>rw</code> what it needs?</p>",
        "id": 317240123,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671653375
    },
    {
        "content": "<p>there is a typeclass instance there, you should skip over it with <code>@one_mul M _ a</code></p>",
        "id": 317240245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671653411
    },
    {
        "content": "<p>Making progress,  now I'm at <code>failed to synthesize instance MulOneClass M</code> :-)</p>",
        "id": 317242153,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671654078
    },
    {
        "content": "<p>shouldn't it be <code>rw [one_smul, one_smul]</code>? or am I missing some detail</p>",
        "id": 317242733,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1671654289
    },
    {
        "content": "<p>Sometimes the obvious fix is the right one...</p>",
        "id": 317242974,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671654373
    }
]