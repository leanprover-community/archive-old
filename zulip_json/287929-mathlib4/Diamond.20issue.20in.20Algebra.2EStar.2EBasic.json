[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/1331\">mathlib4#1331</a>, a diamond issue has showed up that has me stumped. Here's a MWE of the problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Ring.Aut</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">StarRing'</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">NonUnitalSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">starGizmo</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">StarRing'</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">starGizmo_foo</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">StarRing'</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">starGizmo</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>  <span class=\"o\">:=</span> <span class=\"n\">rfl</span>    <span class=\"c1\">-- failed to synthesize instance StarRing' R</span>\n</code></pre></div>\n<p>If we unpack this a bit, we find out that Lean is failing to unify <code>@StarRing' R NonUnitalCommSemiring.toNonUnitalSemiring</code> with <code>@StarRing' R NonUnitalRing.toNonUnitalSemiring</code>. It's easy to check that these two are in fact defeq. I don't know what's going on; perhaps <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> or <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> could have a look...?</p>",
        "id": 319487321,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1672872717
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span></p>",
        "id": 319487346,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1672872723
    },
    {
        "content": "<p>Are you sure they're defeq?</p>",
        "id": 319490815,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672874582
    },
    {
        "content": "<p>This looks like something that is only true because of structure eta, and a problem that we didn't have in lean 3 due to the use of old flat structures</p>",
        "id": 319490877,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672874633
    },
    {
        "content": "<p>This works, at any rate:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">StarRing'</span> <span class=\"n\">R</span> <span class=\"n\">NonUnitalCommSemiring.toNonUnitalSemiring</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">@</span><span class=\"n\">StarRing'</span> <span class=\"n\">R</span> <span class=\"n\">NonUnitalRing.toNonUnitalSemiring</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 319491136,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1672874808
    },
    {
        "content": "<p>If they're not defeq, seems like it would break the whole linear/semilinear map setup.</p>",
        "id": 319491204,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672874854
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Diamond.20issue.20in.20Algebra.2EStar.2EBasic/near/319490877\">said</a>:</p>\n<blockquote>\n<p>This looks like something that is only true because of structure eta, and a problem that we didn't have in lean 3 due to the use of old flat structures</p>\n</blockquote>\n<p>Structural eta is a defeq in Lean4</p>",
        "id": 319494471,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1672876927
    },
    {
        "content": "<p>Indeed; my unfounded hunch was that somehow it's a \"lesser\" defeq that can't be applied in all cases</p>",
        "id": 319498000,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672879369
    }
]