[
    {
        "content": "<p>Hi all, I'm considering posing the porting of <code>conv</code> and the creation of a more interactive \"code action\" for the Lean Info View widget (in which you could just select the focussed subterm with a mouse click) as a Bachelor's thesis. Do you think this is a good idea? What's the current status of <code>conv</code> in mathlib4?</p>",
        "id": 271547797,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1644570635
    },
    {
        "content": "<p><code>conv</code> mode already exists in lean 4 core in some form, but I'm not sure about the widget support</p>",
        "id": 271548536,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644571084
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">âˆ€</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">arg</span> <span class=\"mi\">1</span>\n    <span class=\"n\">enter</span> <span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"o\">]</span>\n  <span class=\"n\">trace_state</span>\n</code></pre></div>",
        "id": 271549042,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644571381
    },
    {
        "content": "<p>Yes, just dicovered that, seems to work pretty well actually! :)</p>",
        "id": 271549046,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1644571384
    },
    {
        "content": "<p>I'm not so sure about the choice of <code>|-</code> for the goal sigil; in lean 3 it was <code>|</code> but that might not be super clear either</p>",
        "id": 271549181,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644571452
    },
    {
        "content": "<p>It should be distinguishable at least</p>",
        "id": 271549208,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1644571468
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/tiqsigQUBkSFnrz8fZ5M-JuQ/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/tiqsigQUBkSFnrz8fZ5M-JuQ/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/tiqsigQUBkSFnrz8fZ5M-JuQ/image.png\"></a></div>",
        "id": 271551826,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1644572763
    },
    {
        "content": "<p>It always shows <code>Prop</code> for the \"root\" term</p>",
        "id": 271551954,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1644572844
    },
    {
        "content": "<p>Ooh, this is a bug in two ways: it should be Nat instead of Prop, and it should be @OfNat.ofNat ... instead of 2.</p>",
        "id": 271552154,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644572953
    },
    {
        "content": "<p>Oh, fun! In fact, <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> and I have been considering prototyping exactly this (subterm selection to work with <code>conv</code> and <code>rw</code>) on the widgets side but the work had not begun in earnest. Since we would have to focus on the infrastructure, having a student around to write some of the user-facing parts would certainly help :)</p>",
        "id": 272057902,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1644970651
    },
    {
        "content": "<p>The student has since decided to go for another project unfortunately :( But maybe <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  and I will get some interested students out of our course in the summer term.</p>",
        "id": 272089993,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1645002762
    },
    {
        "content": "<p>I would totally love to have an interactive <code>conv</code>, in particular have commands simplify, factor, expand etc. like in Mathematica. The you could select a term in some ring and transform it to desirable form.</p>\n<p>Also I'm working on symbolic differentiation in Lean and this would be super useful for more user friendly experience.</p>",
        "id": 272656636,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1645432715
    },
    {
        "content": "<p>To turn a term of a ring into a required form in Lean 3 I usually use <code>rw (show current_term = required_form, by ring)</code>. No <code>conv</code> needed!</p>",
        "id": 272657577,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645433249
    },
    {
        "content": "<p>But for example if I want to turn polynomial to its Horner form. I do not know what the final coefficients are. I want the computer to figure that out i.e. scenarios where you do not know the explicit <code>required_form</code> or it is too long to type.</p>",
        "id": 272665059,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1645437311
    },
    {
        "content": "<p>In mathlib3 <code>ring_nf</code> would do this for you, I'm not sure how far Mathlib4's has progressed yet though</p>",
        "id": 272666532,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1645437965
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.28interactive.29.20conv.20mode/near/272057902\">said</a>:</p>\n<blockquote>\n<p>Oh, fun! In fact, <span class=\"user-mention silent\" data-user-id=\"121918\">Edward Ayers</span> and I have been considering prototyping exactly this (subterm selection to work with <code>conv</code> and <code>rw</code>) on the widgets side but the work had not begun in earnest. Since we would have to focus on the infrastructure, having a student around to write some of the user-facing parts would certainly help :)</p>\n</blockquote>\n<p>What's the status of this, <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> and <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> ? I do now have an interested student to work on it :)</p>",
        "id": 279381995,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1650359159
    },
    {
        "content": "<p>We've got all the infrastructure set up for Lean to send javascript to and from the infoview. We need to get that merged in to vscode-lean4 and also release a utility library. We haven't done any work on the actual interactive conv mode yet so now would be a great time for the interested student to start working on it <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 279422602,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1650381182
    },
    {
        "content": "<p>Sounds great!</p>",
        "id": 279527483,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1650452687
    },
    {
        "content": "<p>Is there any infrastructure to modify the document syntax tree yet? (To insert the appropriate <code>congr</code> and <code>skip</code> calls)</p>",
        "id": 279527563,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1650452745
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110789\">@Jakob von Raumer</span>  On the typescript side, we have <a href=\"https://github.com/leanprover/vscode-lean4/blob/ee082190162ee5e7f5d3f4fd86c63c74643de74f/lean4-infoview-api/src/infoviewApi.ts#L52\"><code>insertText</code></a>. On the server side, there is LSP's <a href=\"https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspace_applyEdit\"><code>applyEdit</code></a>. We do not currently have <code>Syntax</code>-aware infrastructure, i.e. an ability to modify files at the AST level and then have the edited text be pretty-printed AST, which would be safer (i.e. it wouldn't be as easy to insert nonsensical text that doesn't parse). Developing this could be a part of the project, but it could also probably get away with just direct string manipulation (Lean 3 just does this).</p>\n<p>Do you have a timeline for when the project would be happening? We are currently working to release an MVP of the necessary APIs and some documentation.</p>",
        "id": 279941068,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1650741322
    },
    {
        "content": "<p>Bachelor projects have duration of 3mo usually but it's possible to stretch it a bit. Getting it to work is definitely more important than hygiene</p>",
        "id": 279984346,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1650811519
    },
    {
        "content": "<p>He's starting next week, but he's first gonna get into the codebase and into Lean as a programming language itself</p>",
        "id": 279984470,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1650811782
    },
    {
        "content": "<p>Can you give us starting points in <code>vscode-lean4</code> and Lean itself? What are the directories we should be looking at first?</p>",
        "id": 280177943,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1650962613
    },
    {
        "content": "<p>Probably the easiest entry point at the moment is this <a href=\"https://github.com/Vtec234/npm-widget/tree/demo\">demo</a> branch.  It contains examples of user widgets with the UI written in Typescript (<code>widget/</code> folder) and the server-side implemented using an <code>@[rpc]</code> attribute. Note that for the UI to work, you need to install the <code>.vsix</code> from the root folder which contains a custom build of <code>vscode-lean4</code> (from <a href=\"https://github.com/Vtec234/vscode-lean4/tree/rpc-loader\">this branch</a>; we will PR it eventually, but for now installing that is the way to go). You can also try it in Gitpod.</p>",
        "id": 280238901,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1650992292
    },
    {
        "content": "<p>Thanks a bunch, that's super useful to us <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span> /cc <span class=\"user-mention\" data-user-id=\"497000\">@Robin BÃ¶hne</span></p>",
        "id": 280480227,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1651146292
    }
]