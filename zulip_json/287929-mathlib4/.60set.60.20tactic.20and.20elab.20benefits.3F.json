[
    {
        "content": "<p>Hi! In trying to learn Lean 4 metaprogramming, I've been working on porting the <code>set</code> tactic. I have a solution that (seems like it) works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"o\">)</span> <span class=\"s2\">\"set \"</span> <span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"s2\">\" : \"</span> <span class=\"n\">term</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"s2\">\" := \"</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"s2\">\" with \"</span> <span class=\"s2\">\"←\"</span><span class=\"bp\">?</span> <span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">set</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">pv</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">let</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">pv</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"n\">id</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">pv</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"bp\">|`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">set</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">tp</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">pv</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">let</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">tp</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">pv</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"n\">try</span> <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"n\">id</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">pv</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"bp\">|`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">set</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">tp</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">pv</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">let</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">tp</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">pv</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"n\">id</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">pv</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"bp\">*;</span> <span class=\"k\">have</span> <span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">pv</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"bp\">|`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">set</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">pv</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">let</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">pv</span><span class=\"bp\">;</span> <span class=\"k\">have</span> <span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">pv</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"n\">id</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">pv</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"bp\">|`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">set</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">tp</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">pv</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"k\">with</span> <span class=\"bp\">←$</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">let</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">tp</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">pv</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"n\">id</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">pv</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"bp\">*;</span> <span class=\"k\">have</span> <span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">pv</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"bp\">|`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">set</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">pv</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"k\">with</span> <span class=\"bp\">←$</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">let</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">pv</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"n\">id</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">pv</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"bp\">*;</span> <span class=\"k\">have</span> <span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">pv</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I've spent way longer than I care to admit trying to write it with <code>elab_rules</code> and defining my own functions for adding to the context, changing variable names, etc. But the solution above is infinitely simpler, albeit a little ungraceful and probably written redundantly. So I'm wondering if there's a benefit to using an elaborator here, as apposed to a macro.<br>\nAlso any criticism of this solution is very much welcome : )</p>",
        "id": 275020635,
        "sender_full_name": "Ian Benway",
        "timestamp": 1647025991
    },
    {
        "content": "<p>You can use <code>$[]?</code> in the syntax quotations:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">set</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"o\">[:</span> <span class=\"bp\">$</span><span class=\"n\">tp</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">pv</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n</code></pre></div>\n<p>Not sure how to match the ← though, see my question in the simpa thread.</p>",
        "id": 275021550,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647026452
    },
    {
        "content": "<p>Thanks! With the answer to that question in the simpa thread, I thought I'd be able to do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">set</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"o\">[:</span> <span class=\"bp\">$</span><span class=\"n\">tp</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">pv</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">rev</span><span class=\"bp\">?</span><span class=\"o\">:(</span><span class=\"bp\">&amp;</span><span class=\"s2\">\"←\"</span><span class=\"o\">)]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">set</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"o\">[:</span> <span class=\"bp\">$</span><span class=\"n\">tp</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">pv</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">rev</span><span class=\"bp\">?</span><span class=\"o\">:(</span><span class=\"bp\">&amp;</span><span class=\"s2\">\"←\"</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n</code></pre></div>\n<p>But I get the same error for both (<code>expected ')'</code>).</p>",
        "id": 275113197,
        "sender_full_name": "Ian Benway",
        "timestamp": 1647113534
    },
    {
        "content": "<p>This syntax does not exist: <code>:(&amp;\"←\")</code>. See the \"simpa\" thread for how to optionally insert a token, without testing it should be something like <code>$[←%$rev?]?</code></p>",
        "id": 275115477,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647116654
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> why did you say that it was a misuse in the \"simpa\" thread? If this is the case, I think we could have a proper way of doing so</p>",
        "id": 275116249,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647117811
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> Mostly because I did not have this use case in mind while implementing the feature. One should keep in mind that this will also copy the source position from the token, which is the original use case, but this is of course also true for \"regular\" antiquotations, in a way.</p>",
        "id": 275144709,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647165249
    },
    {
        "content": "<p>This is super helpful! Could I please get permission to push what I have as a branch to Mathlib4? Github username: Beanway144</p>",
        "id": 275996191,
        "sender_full_name": "Ian Benway",
        "timestamp": 1647823512
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"462786\">@Ian Benway</span> the Mathlib4 repo is not completely set yet (<code>master</code> branch is not protected, CI is not setup etc) but in the meantime you can open a PR from a fork to start off the process</p>",
        "id": 275997466,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647825331
    },
    {
        "content": "<p>I see! I'm new to using github on a larger scale, but I think I've made one here: <a href=\"https://github.com/leanprover-community/mathlib4/pull/242\">https://github.com/leanprover-community/mathlib4/pull/242</a></p>",
        "id": 275998814,
        "sender_full_name": "Ian Benway",
        "timestamp": 1647827488
    },
    {
        "content": "<p>Getting a bug on <a href=\"https://github.com/leanprover-community/mathlib4/pull/242\">mathlib4#242</a> where <code>rw</code> solves the goal if it can via <code>rfl</code>. Like,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">set</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>solves the goal. Is there a way around this?</p>",
        "id": 276126831,
        "sender_full_name": "Ian Benway",
        "timestamp": 1647905167
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"462786\">@Ian Benway</span> Try this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"bp\">|`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">set</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">!%$</span><span class=\"n\">rw</span><span class=\"bp\">?</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"o\">[:</span> <span class=\"bp\">$</span><span class=\"n\">tp</span><span class=\"bp\">?</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">pv</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">←%$</span><span class=\"n\">rev</span><span class=\"bp\">?</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"bp\">?</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">te</span><span class=\"o\">,</span> <span class=\"n\">pv</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"k\">match</span> <span class=\"n\">tp</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">te</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n      <span class=\"k\">let</span> <span class=\"n\">pv</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">pv</span> <span class=\"n\">te</span>\n      <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">te</span><span class=\"o\">,</span> <span class=\"n\">pv</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span>   <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">pv</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">pv</span> <span class=\"n\">none</span>\n      <span class=\"k\">let</span> <span class=\"n\">te</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">pv</span>\n      <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">te</span><span class=\"o\">,</span> <span class=\"n\">pv</span><span class=\"o\">)</span>\n    <span class=\"n\">defineV</span> <span class=\"n\">a.getId</span> <span class=\"n\">te</span> <span class=\"n\">pv</span>\n  <span class=\"k\">if</span> <span class=\"n\">rw</span><span class=\"bp\">?.</span><span class=\"n\">isNone</span> <span class=\"k\">then</span>\n    <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">try</span> <span class=\"n\">rewrite</span> <span class=\"o\">[(</span><span class=\"n\">id</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">pv</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">))</span>\n\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">rev</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">none</span><span class=\"o\">))</span>   <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">have</span> <span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">pv</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">have</span> <span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">pv</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>                       <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 276132046,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647910166
    },
    {
        "content": "<p>Oh, nice! So changing <code>rw</code> to <code>rewrite</code> works. So is <code>rw</code> just <code>rewrite</code>, but it tries to solve via <code>rfl</code>?<br>\nAlso, thank you again! Change is pushed and ready for review.</p>",
        "id": 276133328,
        "sender_full_name": "Ian Benway",
        "timestamp": 1647911684
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"462786\">Ian Benway</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60set.60.20tactic.20and.20elab.20benefits.3F/near/276133328\">said</a>:</p>\n<blockquote>\n<p>So is <code>rw</code> just <code>rewrite</code>, but it tries to solve via <code>rfl</code>?</p>\n</blockquote>\n<p>I don't know if that's the only difference <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 276133486,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647911900
    },
    {
        "content": "<p>Oh, that is unfortunate. In lean 3 these two are identical, and I don't want to teach this difference</p>",
        "id": 276136251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647915344
    },
    {
        "content": "<p>but indeed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">rewriteSeq</span><span class=\"o\">)</span> <span class=\"s2\">\"rewrite \"</span> <span class=\"o\">(</span><span class=\"n\">config</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">rwRuleSeq</span> <span class=\"o\">(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">rwSeq</span><span class=\"o\">)</span> <span class=\"s2\">\"rw \"</span> <span class=\"o\">(</span><span class=\"n\">config</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">rwRuleSeq</span> <span class=\"o\">(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rwWithRfl</span> <span class=\"o\">(</span><span class=\"n\">kind</span> <span class=\"o\">:</span> <span class=\"n\">SyntaxNodeKind</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MacroM</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- We show the `rfl` state on `]`</span>\n  <span class=\"k\">let</span> <span class=\"n\">seq</span>   <span class=\"o\">:=</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">rbrak</span> <span class=\"o\">:=</span> <span class=\"n\">seq</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- Replace `]` token with one without position information in the expanded tactic</span>\n  <span class=\"k\">let</span> <span class=\"n\">seq</span>   <span class=\"o\">:=</span> <span class=\"n\">seq.setArg</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">mkAtom</span> <span class=\"s2\">\"]\"</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">tac</span>   <span class=\"o\">:=</span> <span class=\"n\">stx.setKind</span> <span class=\"n\">kind</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">setArg</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">mkAtomFrom</span> <span class=\"n\">stx</span> <span class=\"n\">atom</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">setArg</span> <span class=\"mi\">2</span> <span class=\"n\">seq</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">with_reducible</span> <span class=\"n\">rfl</span><span class=\"bp\">%$</span><span class=\"n\">rbrak</span><span class=\"o\">))</span>\n\n<span class=\"kd\">@[macro rwSeq]</span> <span class=\"kd\">def</span> <span class=\"n\">expandRwSeq</span> <span class=\"o\">:</span> <span class=\"n\">Macro</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rwWithRfl</span> <span class=\"bp\">``</span><span class=\"n\">Lean.Parser.Tactic.rewriteSeq</span> <span class=\"s2\">\"rewrite\"</span>\n</code></pre></div>\n<p>This  says that <code>rw [a, b, c]</code> is equivalent to <code>rewrite [a, b, c]; try (with_reducible rfl)</code> (modulo some messing about with token positions for better error messages)</p>",
        "id": 276136361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647915464
    },
    {
        "content": "<p>The difference was introduced <a href=\"https://github.com/leanprover/lean4/commit/40e51270f5a40247c2ff405ca7bc3b3821ba01ee\">here</a> but it doesn't look very intentional</p>",
        "id": 276136684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647915775
    },
    {
        "content": "<p>I remember reading about some slow <code>rfl</code>s. Are those real or just noise in my memory? And if they're real, isn't it worrisome that every <code>rw</code> tries <code>rfl</code>?</p>",
        "id": 276141725,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647921897
    },
    {
        "content": "<p>that's why it is <code>with_reducible rfl</code> instead of just <code>rfl</code></p>",
        "id": 276141950,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647922229
    },
    {
        "content": "<p>What's the difference?</p>",
        "id": 276141965,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647922294
    },
    {
        "content": "<p><code>with_reducible rfl</code> only unfolds reducible definitions when checking defeq</p>",
        "id": 276142483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647923046
    },
    {
        "content": "<p>See also the unresolved <a href=\"#narrow/stream/270676-lean4/topic/Kinds.20of.20goals.20closed.20by.20rw.2Fsimp.20only.2Fsimp\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Kinds.20of.20goals.20closed.20by.20rw.2Fsimp.20only.2Fsimp</a></p>",
        "id": 276158068,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647939149
    },
    {
        "content": "<p>This looks a bit strange: <code>example : a = a := by rw []</code></p>",
        "id": 276375919,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648058515
    },
    {
        "content": "<p>I'm pretty sure there are lots of strange ways to prove <code>rfl</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tauto</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">finish</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">solve_by_elim</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">constructor</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">econstructor</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">fconstructor</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">split</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat.add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">a</span> <span class=\"bp\">⊢</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp_intros</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">congr'</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">triv</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">trivial</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ac_refl</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[]</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[]</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">erw</span> <span class=\"o\">[]</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cc</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">subst_vars</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">any_goals</span> <span class=\"o\">{</span> <span class=\"n\">cc</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">rfl.trans</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">existsi</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 276381228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648060762
    },
    {
        "content": "<p>the <code>hint</code> tactic will even give you a variety of items from this list</p>",
        "id": 276381425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648060836
    },
    {
        "content": "<p>And this is just in the core library &amp; tactics. If you use mathlib you can derive it from quadratic reciprocity with some care</p>",
        "id": 276381825,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648061005
    }
]