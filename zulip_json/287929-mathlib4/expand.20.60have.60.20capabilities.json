[
    {
        "content": "<p>I wanna try to implement <a href=\"#narrow/stream/287929-mathlib4/topic/.60replace.60.20tactic/near/275522296\">unstructured <code>have</code></a> but I will need some guidance.</p>\n<p>I have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"have \"</span> <span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" dont_wanna_do_this \"</span> <span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">elabTermEnsuringType</span> <span class=\"n\">p</span> <span class=\"n\">t</span>\n  <span class=\"n\">liftMetaTactic</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mvarIdNew</span> <span class=\"bp\">←</span> <span class=\"n\">assert</span> <span class=\"n\">mvarId</span> <span class=\"n\">id.getId</span> <span class=\"n\">t</span> <span class=\"n\">p</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mvarIdNew</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">intro1P</span> <span class=\"n\">mvarIdNew</span>\n    <span class=\"n\">return</span> <span class=\"o\">[</span><span class=\"n\">mvarIdNew</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"n\">dont_wanna_do_this</span> <span class=\"mi\">5</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>\n<p>Instead of providing a term of the given type, I want to turn that type into a new goal (and add it to the list of goals).</p>\n<p>So I have two questions:</p>\n<ul>\n<li>How can I add <code>h : Nat</code> to the context without relying on <code>assert</code> (nor on a given term of <code>Nat</code>)?</li>\n<li>How can I add <code>⊢ Nat</code> as a new goal?</li>\n</ul>",
        "id": 275569867,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647461084
    },
    {
        "content": "<p>(aside: I object to the term \"unstructured\", since all uses of this tactic in mathlib are quite structured)</p>",
        "id": 275569973,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647461159
    },
    {
        "content": "<p>it's a version of <code>have</code> that keeps the proof inside the same tactic block</p>",
        "id": 275570082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647461197
    },
    {
        "content": "<p>Yeah I don't understand why \"unstructured\" either. I'm just mimicking what's on the <code>Mathport/Syntax.lean</code> file</p>",
        "id": 275570162,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647461236
    },
    {
        "content": "<p>I'm confused why you have the <code>dont_wanna_do_this</code> part</p>",
        "id": 275570345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647461312
    },
    {
        "content": "<p>why aren't you just using the syntax as is?</p>",
        "id": 275570366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647461328
    },
    {
        "content": "<p>I just want to be explicit that I don't want to rely on <code>p</code>. With my current knowledge, the only way that I know how to add <code>h : Nat</code> to the context is through <code>assert</code>. And it relies on a term of the given type</p>",
        "id": 275570509,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647461407
    },
    {
        "content": "<p>You can use <code>assert</code>, you just create a new metavariable with the desired type and pass it to <code>assert</code> and also put it in the goal list</p>",
        "id": 275570556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647461438
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">  Convert the given goal `Ctx |- target` into `Ctx |- type -&gt; target`.</span>\n<span class=\"sd\">  It assumes `val` has type `type` -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">assert</span> <span class=\"o\">(</span><span class=\"n\">mvarId</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">MVarId</span>\n</code></pre></div>\n<p>How can I create an <code>Expr</code> of type <code>type</code> at this point? Isn't this the whole theorem proving challenge?</p>",
        "id": 275570739,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647461533
    },
    {
        "content": "<p>(I'm talking about the 4th argument <code>val</code>)</p>",
        "id": 275570764,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647461555
    },
    {
        "content": "<p>I would appreciate a hint without much spoiling, if possible :)</p>",
        "id": 275570936,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647461614
    },
    {
        "content": "<p>Huh, wait, something clicked in my head. Let me try something</p>",
        "id": 275571662,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647461863
    },
    {
        "content": "<p>Alright, I think I got it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"have \"</span> <span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"n\">t</span>\n  <span class=\"n\">liftMetaTactic</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mvarIdNew</span> <span class=\"bp\">←</span> <span class=\"n\">assert</span> <span class=\"n\">mvarId</span> <span class=\"n\">id.getId</span> <span class=\"n\">t</span> <span class=\"n\">p</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mvarIdNew</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">intro1P</span> <span class=\"n\">mvarIdNew</span>\n    <span class=\"n\">return</span> <span class=\"o\">[</span><span class=\"n\">p.mvarId</span><span class=\"bp\">!</span><span class=\"o\">,</span> <span class=\"n\">mvarIdNew</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">goals</span> <span class=\"bp\">←</span> <span class=\"n\">getUnsolvedGoals</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"mi\">5</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>Please let me know if this is too naive (of course I still need to generalize an optional identifier if the user wants to store on <code>this</code>)</p>",
        "id": 275577169,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647464752
    },
    {
        "content": "<p>I don't see a <em>clear</em> advantage of this except for being able to change the goals order as in:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">swap</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"mi\">5</span>\n</code></pre></div>\n<p>Are there other benefits? I thought about being able to add tags to the subgoals. Maybe that can be useful to make proofs more organized with <code>case &lt;tag&gt; =&gt; tacSeq</code>?</p>",
        "id": 275581498,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647467094
    },
    {
        "content": "<p>you want the first two lines to be in the <code>liftMetaTactic</code> block, that also sets the context</p>",
        "id": 275581522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647467107
    },
    {
        "content": "<p>the version that changes goals order is already a thing, that's <code>suffices</code></p>",
        "id": 275581568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647467134
    },
    {
        "content": "<p>you should name the subgoals as well, I think it makes sense for the mvar to be named the same as the identifier</p>",
        "id": 275581702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647467195
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/expand.20.60have.60.20capabilities/near/275581522\">said</a>:</p>\n<blockquote>\n<p>you want the first two lines to be in the <code>liftMetaTactic</code> block, that also sets the context</p>\n</blockquote>\n<p>I can do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"have \"</span> <span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"n\">liftMetaTactic</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"n\">t</span>\n    <span class=\"k\">let</span> <span class=\"n\">mvarIdNew</span> <span class=\"bp\">←</span> <span class=\"n\">assert</span> <span class=\"n\">mvarId</span> <span class=\"n\">id.getId</span> <span class=\"n\">t</span> <span class=\"n\">p</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mvarIdNew</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">intro1P</span> <span class=\"n\">mvarIdNew</span>\n    <span class=\"n\">return</span> <span class=\"o\">[</span><span class=\"n\">p.mvarId</span><span class=\"bp\">!</span><span class=\"o\">,</span> <span class=\"n\">mvarIdNew</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>But <code>elabTerm</code> can't be executed in <code>MetaM</code>. Unless I'm doing something wrong</p>",
        "id": 275581764,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647467234
    },
    {
        "content": "<p>At least in lean 3, opening another tactic block via <code>have : foo := by { }</code> instead of <code>have : foo, { }</code> meant that the two blocks could not share metavariables - everything has to be solved in the nested block</p>",
        "id": 275581832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647467273
    },
    {
        "content": "<p>This is already happening:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">·</span> <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span>\n    <span class=\"n\">exact</span> <span class=\"mi\">5</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">q</span> <span class=\"c1\">-- unknown identifier 'q'</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 275582188,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647467448
    },
    {
        "content": "<p>what are you showing?</p>",
        "id": 275582230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647467474
    },
    {
        "content": "<p>I'm not sure if <code>withMainContext</code> needs to be called before the <code>elabTerm</code>; to test that you should try referencing a variable in another goal..?</p>",
        "id": 275582387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647467557
    },
    {
        "content": "<p>but also, you should be using the original syntax with <code>haveIdLhs</code> instead of <code>\"have \" ident \" : \" term</code></p>",
        "id": 275582548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647467660
    },
    {
        "content": "<p>those produce different syntax trees</p>",
        "id": 275582576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647467685
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/expand.20.60have.60.20capabilities/near/275582387\">said</a>:</p>\n<blockquote>\n<p>I'm not sure if <code>withMainContext</code> needs to be called before the <code>elabTerm</code>; to test that you should try referencing a variable in another goal..?</p>\n</blockquote>\n<p>The variables don't seem to be shared among goals:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">∧</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"k\">have</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  ⊢ String</span>\n<span class=\"cm\">  w : String</span>\n<span class=\"cm\">  ⊢ ℕ</span>\n<span class=\"cm\">  case left</span>\n<span class=\"cm\">  h : ℕ</span>\n<span class=\"cm\">  ⊢ true = true</span>\n<span class=\"cm\">  case right</span>\n<span class=\"cm\">  ⊢ true = true</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 275582908,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647467888
    },
    {
        "content": "<p>I think I am misunderstanding what you're saying</p>",
        "id": 275583485,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647468229
    },
    {
        "content": "<p>The question is whether the elaboration of the type is occurring in the right context, because tactics operate on a bunch of goals and different goals have different variables in them and hence elaborate terms differently</p>",
        "id": 275584403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647468906
    },
    {
        "content": "<p>Hmm, even with <code>withMainContext</code> it's still possible to do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"have \"</span> <span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n    <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">id.getId</span>\n    <span class=\"n\">liftMetaTactic</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"n\">userName</span> <span class=\"o\">:=</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n      <span class=\"k\">let</span> <span class=\"n\">mvarIdNew</span> <span class=\"bp\">←</span> <span class=\"n\">assert</span> <span class=\"n\">mvarId</span> <span class=\"n\">name</span> <span class=\"n\">t</span> <span class=\"n\">p</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mvarIdNew</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">intro1P</span> <span class=\"n\">mvarIdNew</span>\n      <span class=\"n\">return</span> <span class=\"o\">[</span><span class=\"n\">p.mvarId</span><span class=\"bp\">!</span><span class=\"o\">,</span> <span class=\"n\">mvarIdNew</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">∧</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">case</span> <span class=\"n\">h1</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h2</span> <span class=\"c1\">-- this works, but is it desired?</span>\n  <span class=\"n\">case</span> <span class=\"n\">h2</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">exact</span> <span class=\"s2\">\"\"</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 275584782,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647469190
    },
    {
        "content": "<p>I will upgrade the syntax to <code>haveIdLhs</code> after I get this POC working nicely</p>",
        "id": 275585415,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647469647
    },
    {
        "content": "<p>That all seems to be working as intended</p>",
        "id": 275587379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647471167
    },
    {
        "content": "<p><code>withMainContext</code> doesn't seem to make a difference</p>",
        "id": 275587392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647471183
    },
    {
        "content": "<p>the question is about free variables in <code>t</code> and where they come from</p>",
        "id": 275587410,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647471200
    },
    {
        "content": "<p>so you need an example with a dependent type instead of just <code>String</code></p>",
        "id": 275587426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647471219
    },
    {
        "content": "<p>like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"have \"</span> <span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- withMainContext do</span>\n    <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n    <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">id.getId</span>\n    <span class=\"n\">liftMetaTactic</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"n\">userName</span> <span class=\"o\">:=</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n      <span class=\"k\">let</span> <span class=\"n\">mvarIdNew</span> <span class=\"bp\">←</span> <span class=\"n\">assert</span> <span class=\"n\">mvarId</span> <span class=\"n\">name</span> <span class=\"n\">t</span> <span class=\"n\">p</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mvarIdNew</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">intro1P</span> <span class=\"n\">mvarIdNew</span>\n      <span class=\"n\">return</span> <span class=\"o\">[</span><span class=\"n\">p.mvarId</span><span class=\"bp\">!</span><span class=\"o\">,</span> <span class=\"n\">mvarIdNew</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">h1</span> <span class=\"bp\">=</span> <span class=\"n\">h1</span> <span class=\"c1\">-- fail</span>\n</code></pre></div>",
        "id": 275587536,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647471325
    },
    {
        "content": "<p>More progress:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"have \"</span> <span class=\"o\">(</span><span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"s2\">\" this \"</span><span class=\"bp\">?</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"s2\">\" as \"</span> <span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">haveDef</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n    <span class=\"k\">let</span> <span class=\"n\">caseName</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">i</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">none</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">name</span>\n      <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">i.getId</span>\n    <span class=\"n\">liftMetaTactic</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"n\">userName</span> <span class=\"o\">:=</span> <span class=\"n\">caseName</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n      <span class=\"k\">let</span> <span class=\"n\">mvarIdNew</span> <span class=\"bp\">←</span> <span class=\"n\">assert</span> <span class=\"n\">mvarId</span> <span class=\"n\">name</span> <span class=\"n\">t</span> <span class=\"n\">p</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mvarIdNew</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">intro1P</span> <span class=\"n\">mvarIdNew</span>\n      <span class=\"n\">return</span> <span class=\"o\">[</span><span class=\"n\">p.mvarId</span><span class=\"bp\">!</span><span class=\"o\">,</span> <span class=\"n\">mvarIdNew</span><span class=\"o\">]</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"k\">have</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">as</span> <span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">haveDef</span> <span class=\"n\">h.getId</span> <span class=\"n\">t</span> <span class=\"n\">i</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"k\">have</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">as</span> <span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">haveDef</span> <span class=\"bp\">`</span><span class=\"n\">this</span>   <span class=\"n\">t</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"n\">as</span> <span class=\"n\">h_two_mul</span>\n  <span class=\"n\">on_goal</span> <span class=\"bp\">-</span><span class=\"mi\">1</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_assoc</span><span class=\"o\">]</span> <span class=\"c1\">-- targeting the final goal</span>\n  <span class=\"n\">case</span> <span class=\"n\">h_two_mul</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ring</span>\n</code></pre></div>\n<p>With this syntax it's possible to name the subgoals with <code>as &lt;name&gt;</code></p>",
        "id": 275596339,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647478798
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> Seems like <code>have h this : foo</code> is legal syntax</p>",
        "id": 275596509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647478895
    },
    {
        "content": "<p>I don't think the <code>as</code> thing is necessary, people won't be using the case name in most cases and the given identifier seems as good a name as any</p>",
        "id": 275596586,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647478944
    },
    {
        "content": "<p>not to mention that it's not entirely clear if it will play well with the <code>haveIdLhs</code> parser</p>",
        "id": 275596608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647478967
    },
    {
        "content": "<p>Btw I'm having some troubles with the <code>haveIdLhs</code> parser</p>",
        "id": 275596644,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647479023
    },
    {
        "content": "<p>care to share?</p>",
        "id": 275596834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647479218
    },
    {
        "content": "<p>Apparently it's not allowed to say <code>have this : Nat</code> with it</p>",
        "id": 275596954,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647479370
    },
    {
        "content": "<p>that's true, although it's not obvious we need to do anything about it</p>",
        "id": 275597035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647479447
    },
    {
        "content": "<p>you can just write <code>have : </code> instead</p>",
        "id": 275597040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647479457
    },
    {
        "content": "<p>If you want to make <code>this</code> acceptable in that position then probably it should be a lean core change</p>",
        "id": 275597063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647479492
    },
    {
        "content": "<p>I'm not really sure why <code>this</code> became a keyword in the first place, besides perhaps some tactic that forgot to use <code>&amp;\"this\"</code> instead of <code>\"this\"</code> in the syntax. <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> do you know?</p>",
        "id": 275597157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647479619
    },
    {
        "content": "<p>Alright, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"have \"</span> <span class=\"n\">Parser.Term.haveIdLhs</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">haveDef</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n    <span class=\"n\">liftMetaTactic</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"n\">userName</span> <span class=\"o\">:=</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n      <span class=\"k\">let</span> <span class=\"n\">mvarIdNew</span> <span class=\"bp\">←</span> <span class=\"n\">assert</span> <span class=\"n\">mvarId</span> <span class=\"n\">name</span> <span class=\"n\">t</span> <span class=\"n\">p</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mvarIdNew</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">intro1P</span> <span class=\"n\">mvarIdNew</span>\n      <span class=\"n\">return</span> <span class=\"o\">[</span><span class=\"n\">p.mvarId</span><span class=\"bp\">!</span><span class=\"o\">,</span> <span class=\"n\">mvarIdNew</span><span class=\"o\">]</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"k\">have</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"bp\">?</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">h</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">haveDef</span> <span class=\"bp\">`</span><span class=\"n\">this</span> <span class=\"n\">t</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">haveDef</span> <span class=\"n\">h.getId</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n  <span class=\"n\">on_goal</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_assoc</span><span class=\"o\">]</span> <span class=\"c1\">-- targeting the final goal</span>\n  <span class=\"n\">case</span> <span class=\"n\">h'</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">ring</span>\n</code></pre></div>\n<p>Is that <code>elab_rule</code> enough?</p>",
        "id": 275597335,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647479767
    },
    {
        "content": "<p>you aren't covering the <code>have $[$h?:ident]?</code> case</p>",
        "id": 275597364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647479818
    },
    {
        "content": "<p>Without expliciting a type?</p>",
        "id": 275597457,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647479907
    },
    {
        "content": "<p>right</p>",
        "id": 275597461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647479913
    },
    {
        "content": "<p>What is supposed to happen in this case?</p>",
        "id": 275597473,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647479933
    },
    {
        "content": "<p>the type is a metavariable (not added as a goal)</p>",
        "id": 275597505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647479999
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- 2 goals</span>\n  <span class=\"c1\">-- ⊢ ?m_1</span>\n\n  <span class=\"c1\">-- h : ?m_1</span>\n  <span class=\"c1\">-- ⊢ true</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275597591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647480061
    },
    {
        "content": "<p>the lean 4 syntax also allows binders between the identifier and the colon, although it is lower priority since lean 3 doesn't support this</p>",
        "id": 275597623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647480114
    },
    {
        "content": "<p>How come it's not added as a goal? I see \"2 goals\" in your example after <code>have h</code></p>",
        "id": 275601252,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647484383
    },
    {
        "content": "<p>This seems to work, but for some reason I'm being required to put a semicolon after <code>have</code>:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/232\">https://github.com/leanprover-community/mathlib4/pull/232</a></p>\n<p>Help is appreciated <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 275603522,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647487384
    },
    {
        "content": "<p>FYI you can match both cases of have at once using <code>   | `(tactic|have $[$n:ident]? $[: $t:term]?) =&gt; haveDef n t</code></p>",
        "id": 275603649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647487532
    },
    {
        "content": "<p>I tried that, but it gave me an error</p>",
        "id": 275603723,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647487610
    },
    {
        "content": "<p>I think it's related to the semicolon issue. The syntax tree might have some issue</p>",
        "id": 275603744,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647487645
    },
    {
        "content": "<p>We might need a way to say \"no line break allowed\". Something similar to <code>noWs</code>, which forbids spaces</p>",
        "id": 275603814,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647487703
    },
    {
        "content": "<p>Most parsers use <code>colGt</code> when parsing trailing idents for exactly this reason. This fixes the issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Lean.Parser.Term.haveIdLhs'</span> <span class=\"o\">:=</span>\n  <span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">many</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"bp\">&gt;&gt;</span>\n    <span class=\"n\">checkColGt</span> <span class=\"s2\">\"expected to be indented\"</span> <span class=\"bp\">&gt;&gt;</span>\n    <span class=\"o\">(</span><span class=\"n\">simpleBinderWithoutType</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">bracketedBinder</span><span class=\"o\">)))</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">optType</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab.Tactic</span> <span class=\"n\">Meta</span> <span class=\"n\">Parser.Term</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"have \"</span> <span class=\"n\">haveIdLhs'</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"k\">have</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">none</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"n\">this</span>\n      <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n.getId</span>\n    <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">mkFreshTypeMVar</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n    <span class=\"n\">liftMetaTactic</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"n\">userName</span> <span class=\"o\">:=</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n      <span class=\"k\">let</span> <span class=\"n\">mvarIdNew</span> <span class=\"bp\">←</span> <span class=\"n\">assert</span> <span class=\"n\">mvarId</span> <span class=\"n\">name</span> <span class=\"n\">t</span> <span class=\"n\">p</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mvarIdNew</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">intro1P</span> <span class=\"n\">mvarIdNew</span>\n      <span class=\"n\">return</span> <span class=\"o\">[</span><span class=\"n\">p.mvarId</span><span class=\"bp\">!</span><span class=\"o\">,</span> <span class=\"n\">mvarIdNew</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"mi\">5</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 275603921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647487830
    },
    {
        "content": "<p>Hmm, I don't understand it yet but I'm glad it solved the issue!<br>\nWill adjust the PR tomorrow</p>",
        "id": 275604062,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647488050
    },
    {
        "content": "<p>Thank you :D</p>",
        "id": 275604099,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647488118
    },
    {
        "content": "<p>The problem is that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span>\n    <span class=\"n\">simp</span>\n</code></pre></div>\n<p>is interpreted as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">simp</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 275604102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647488122
    },
    {
        "content": "<p>and without the indentation fix,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>\n<p>is also interpreted that way</p>",
        "id": 275604119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647488156
    },
    {
        "content": "<p>Can't we just forbid linebreaks after <code>haveIdLhs</code>?</p>",
        "id": 275604202,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647488269
    },
    {
        "content": "<p>(is it even possible to do so?)</p>",
        "id": 275604255,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647488306
    },
    {
        "content": "<p>This way we wouldn't need to redefine the whole syntax</p>",
        "id": 275604266,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647488333
    },
    {
        "content": "<p>well, this is arguably an issue in core</p>",
        "id": 275605202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647489667
    },
    {
        "content": "<p>it's also not a good idea to forbid linebreaks generally because not all uses  fit on a line</p>",
        "id": 275605222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647489717
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/expand.20.60have.60.20capabilities/near/275597157\">said</a>:</p>\n<blockquote>\n<p>I'm not really sure why <code>this</code> became a keyword in the first place, besides perhaps some tactic that forgot to use <code>&amp;\"this\"</code> instead of <code>\"this\"</code> in the syntax. <span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> do you know?</p>\n</blockquote>\n<p>I don't think you can use <code>&amp;</code> in leading position. But it also looks like a bad idea, since it would make it easy to introduce a variable <code>this</code> that then can't be referenced.</p>",
        "id": 275624485,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647508800
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I can't understand your comment. Why is <code>this</code> not like any other ident name? You should be able to just use it like <code>this + 2</code>.</p>",
        "id": 275668319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647530053
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/821\">https://github.com/leanprover/lean4/issues/821</a></p>",
        "id": 275668549,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647530151
    },
    {
        "content": "<p>In short, because <code>this</code> bindings are not regular, it cannot be a regular identifier</p>",
        "id": 275670310,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647530750
    },
    {
        "content": "<p>I remember times in which the well-behaved metavariable names helped me make sense of what was going on:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- 2 goals</span>\n  <span class=\"c1\">-- ⊢ ?m_1</span>\n\n  <span class=\"c1\">-- h : ?m_1</span>\n  <span class=\"c1\">-- ⊢ true</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But with this implementation in Lean 4, they are named after some \"arbitrarily\" high number:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  case h</span>\n<span class=\"cm\">  ⊢ ?m.2156</span>\n<span class=\"cm\">  h : ?m.2156</span>\n<span class=\"cm\">  ⊢ True</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>\n<p>Should I worry about this?</p>",
        "id": 275672464,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647531474
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/287929-mathlib4/topic/expand.20.60have.60.20capabilities/near/275670310\">said</a>:</p>\n<blockquote>\n<p>In short, because <code>this</code> bindings are not regular, it cannot be a regular identifier</p>\n</blockquote>\n<p>I don't really understand the hygiene system, but can't <code>have := ...; this</code> be treated exactly like <code>have this := ...; this</code>? That is, the <code>have</code> introduces an invisible <code>this</code> token suitably marked up with hygiene stuff so that the second <code>this</code> resolves</p>",
        "id": 275672876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647531623
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> No, that's a general issue with mvar printing not related to <code>have</code></p>",
        "id": 275673128,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647531720
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/expand.20.60have.60.20capabilities/near/275672876\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/287929-mathlib4/topic/expand.20.60have.60.20capabilities/near/275670310\">said</a>:</p>\n<blockquote>\n<p>In short, because <code>this</code> bindings are not regular, it cannot be a regular identifier</p>\n</blockquote>\n<p>I don't really understand the hygiene system, but can't <code>have := ...; this</code> be treated exactly like <code>have this := ...; this</code>? That is, the <code>have</code> introduces an invisible <code>this</code> token suitably marked up with hygiene stuff so that the second <code>this</code> resolves</p>\n</blockquote>\n<p>Hygiene happens when the quotation is evaluated, i.e. when the syntax tree is constructed. The <code>this</code> binding does not exist at that point in any form.</p>",
        "id": 275673448,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647531807
    },
    {
        "content": "<p>I think there are other tactics that want to have this \"invisible <code>this</code>\" behavior for other names too</p>",
        "id": 275673486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647531817
    },
    {
        "content": "<p>The <code>have</code> exists though, can't it be marked up somehow?</p>",
        "id": 275673621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647531851
    },
    {
        "content": "<p>that is, we are syntactically at a point where we know it is <code>have</code> and that it needs a <code>this</code></p>",
        "id": 275673691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647531875
    },
    {
        "content": "<p>Well, this is a specific property of the Lean hygiene algorithm that is different in e.g. Racket: only identifiers are annotated with hygiene information, so we can't just say \"introduce <code>this</code> with the same scope as the <code>have</code> keyword\"</p>",
        "id": 275674013,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647531986
    },
    {
        "content": "<p>I'm relatively happy with the <code>this</code> design so far, it makes it completely clear that it does not follow the standard identifier scoping</p>",
        "id": 275674075,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647532008
    },
    {
        "content": "<p>I'm not sure the original issue is all that important though. Is there a reason I should care if I don't write things like that in syntax quotations? i.e. as a regular user how does this affect me?</p>",
        "id": 275674080,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647532010
    },
    {
        "content": "<p><code>let this := 1</code> is a syntax error. This makes me unhappy as a user</p>",
        "id": 275674259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647532075
    },
    {
        "content": "<p>and there are lots of other places that accept every ident but not <code>this</code></p>",
        "id": 275674357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647532100
    },
    {
        "content": "<p><code>let this</code> is not a syntax error</p>",
        "id": 275674568,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647532184
    },
    {
        "content": "<p>I thought it was, perhaps <code>fun this =&gt; ...</code>?</p>",
        "id": 275674693,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647532219
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/expand.20.60have.60.20capabilities/near/275674259\">said</a>:</p>\n<blockquote>\n<p><code>let this := 1</code> is a syntax error. This makes me unhappy as a user</p>\n</blockquote>\n<p>I had made it possible with a <a href=\"https://github.com/leanprover-community/mathlib4/blob/f626009af06d8e4d6f29ed20af10c60279dbfd0b/Mathlib/Tactic/Replace.lean#L12\">custom syntax</a> for the <code>replace</code> tactic: <a href=\"https://github.com/leanprover-community/mathlib4/blob/f626009af06d8e4d6f29ed20af10c60279dbfd0b/test/Replace.lean#L45\">link</a></p>",
        "id": 275674815,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647532269
    },
    {
        "content": "<p><code>#check fun this =&gt; 1</code> results in a weird error</p>",
        "id": 275674831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647532276
    },
    {
        "content": "<p>Hah, that should probably be a special case in the <code>match</code> elaborator. We shouldn't even elaborate a match in this case.</p>",
        "id": 275675107,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647532364
    },
    {
        "content": "<p>But going back to the question of why you should care about the fix: in Lean 3 you assume that you can lift arbitrary tactic snippets into a helper tactic, no? In Lean 4 that would involve a syntax quotation, so the fix makes sure <code>this</code> still works in the helper.</p>",
        "id": 275675366,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647532452
    },
    {
        "content": "<p>Now Lean 4 actually doesn't let you lift <em>arbitrary</em> snippets exactly because of hygiene, but without the fix, using <code>this</code> even completely internal to the helper would not work.</p>",
        "id": 275675588,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647532535
    },
    {
        "content": "<p>I find that using identifiers of any kinds in syntax quotations does the wrong thing and I always use <code>$(mkIdent `foo)</code></p>",
        "id": 275675589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647532535
    },
    {
        "content": "<p>which probably makes me a bad person</p>",
        "id": 275675629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647532549
    },
    {
        "content": "<p>I guess you don't perceive them as separate scopes then. Which makes sense coming from Lean 3, but I'd hope that's not the natural assumption to make without that background.</p>",
        "id": 275676015,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647532660
    },
    {
        "content": "<p>I don't really know what that means. I want a <code>foo</code> in my expression</p>",
        "id": 275676126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647532688
    },
    {
        "content": "<p>and writing <code>foo</code> doesn't give me that</p>",
        "id": 275676152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647532698
    },
    {
        "content": "<p>Such that it is visible to the outside?</p>",
        "id": 275676196,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647532713
    },
    {
        "content": "<p>such that the identifier is called <code>foo</code></p>",
        "id": 275676218,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647532725
    },
    {
        "content": "<p>my model of identifiers is probably not hygienic, I just think of them as names and everything else scares me</p>",
        "id": 275676595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647532816
    },
    {
        "content": "<p>(I exaggerate, but hygienic identifiers are significantly more complex to deal with as a tactic author)</p>",
        "id": 275676778,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647532854
    },
    {
        "content": "<p>I think that hygiene is most important for macro tactics and other \"simple\" expansions where you aren't doing anything except shuffling syntax around and using syntax quotations</p>",
        "id": 275677669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647533005
    },
    {
        "content": "<p>I can't say much without a specific example. But the whole point of hygiene is to make scoping in metaprograms behave like you would expect in regular programs. If a variable reference in a helper function doesn't bind to a variable of that name in the caller, then the same should be true for a helper tactic.</p>",
        "id": 275677681,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647533007
    },
    {
        "content": "<p>I am usually writing <code>elab</code> tactics where very little is done using syntax quotations, and there it seems that hygiene is only an interference</p>",
        "id": 275677881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647533050
    },
    {
        "content": "<p>An example might be Arthur's <code>have</code> tactic above; what does it need to do to handle <code>this</code> correctly?</p>",
        "id": 275678446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647533131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/expand.20.60have.60.20capabilities/near/275678446\">said</a>:</p>\n<blockquote>\n<p>An example might be Arthur's <code>have</code> tactic above; what does it need to do to handle <code>this</code> correctly?</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/f626009af06d8e4d6f29ed20af10c60279dbfd0b/Mathlib/Tactic/Replace.lean#L14\">This code</a> did it. But it relied on that custom syntax</p>",
        "id": 275678921,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647533229
    },
    {
        "content": "<p>Here's a proposal: an <code>invisibleThis</code> parser that parses nothing and yields a hygienic <code>this</code> ident</p>",
        "id": 275679189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647533278
    },
    {
        "content": "<p>then <code>have</code> and friends can use <code>\"have\" (ident &lt;|&gt; invisibleThis) ...</code></p>",
        "id": 275679417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647533307
    },
    {
        "content": "<p>(or better yet, <code>invisible(`this)</code> since that way you can use other names too)</p>",
        "id": 275679574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647533343
    },
    {
        "content": "<p>That would make <code>have := 1; this</code> and <code>have this := 1; this</code> produce the exact same <code>Syntax</code></p>",
        "id": 275680274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647533458
    },
    {
        "content": "<p>(which is not currently the case btw, the second one adds a match)</p>",
        "id": 275680329,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647533472
    },
    {
        "content": "<p><code>implicit(`this)</code> also works as a name</p>",
        "id": 275680732,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647533572
    },
    {
        "content": "<p>You can use <code>(ident &lt;|&gt; Lean.termThis)</code>, though perhaps you had something different in mind</p>",
        "id": 275682429,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647534005
    },
    {
        "content": "<p>I'm talking about making the binder special and making <code>this</code> a regular identifier again</p>",
        "id": 275682583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647534051
    },
    {
        "content": "<p>The reason <code>have := 1; this</code> doesn't work is because the second <code>this</code> gets marked up with hygiene information local to the scope and the first one doesn't, because it doesn't exist. To fix this we can have a parser that inserts a <code>this</code> token exactly as though the extra characters <code> this</code> were present in the original string</p>",
        "id": 275683003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647534161
    },
    {
        "content": "<p>The one fundamental rule of the parser is that the token sequence in the returned syntax tree is identical to the input</p>",
        "id": 275683531,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647534261
    },
    {
        "content": "<p>Okay, then it's not a proper token but instead a <code>node Parser.implicit._0.metadata #[]</code> or something</p>",
        "id": 275683858,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647534337
    },
    {
        "content": "<p>it's your choice where you want to stuff the metadata</p>",
        "id": 275683911,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647534357
    },
    {
        "content": "<p>That would work for the parser, but we would have to adjust the hygiene algorithm. It sounds a bit messy.</p>",
        "id": 275686909,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647534999
    },
    {
        "content": "<p>For what it's worth, it would be nice if the desired tactic could be implemented purely as a macro. This comes close, but the case with the missing type adds it as an additional goal.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"have \"</span> <span class=\"o\">(</span><span class=\"n\">colGt</span> <span class=\"n\">term</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"s2\">\" : \"</span> <span class=\"n\">colGt</span> <span class=\"n\">term</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">have</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">have</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">have</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">$</span><span class=\"o\">[:</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">have</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">$</span><span class=\"o\">[:</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 275691529,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647536024
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/287929-mathlib4/topic/expand.20.60have.60.20capabilities/near/275691529\">said</a>:</p>\n<blockquote>\n<p>but the case with the missing type adds it as an additional goal</p>\n</blockquote>\n<p>How come? Even if I provide the term? I would like Lean to elaborate the type for me in that case</p>",
        "id": 275693516,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647536576
    },
    {
        "content": "<p>No, only if it can't be inferred</p>",
        "id": 275693920,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647536657
    },
    {
        "content": "<p>Wait, I thought the point of the tactic was that you <em>don't</em> provide the term <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 275694084,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647536723
    },
    {
        "content": "<p>This no longer works <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"mi\">5</span> <span class=\"c1\">-- invalid universe level, ?u.2348 is not greater than 0</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 275694973,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647536938
    },
    {
        "content": "<p>Ah, the goals are in the wrong order</p>",
        "id": 275695743,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647537225
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 275698085,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647538198
    },
    {
        "content": "<p>Let's bring <a href=\"https://github.com/leanprover-community/mathlib4/pull/232#discussion_r829252422\">the discussion</a> here.<br>\nWhat should I do with the syntax?</p>",
        "id": 275706181,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647541851
    },
    {
        "content": "<p>Do you know how to support the binders?</p>",
        "id": 275706410,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647541959
    },
    {
        "content": "<p>I still don't know what binders are <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 275706453,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647541981
    },
    {
        "content": "<p>if  you can support the entire tactic that would be ideal</p>",
        "id": 275706464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647541988
    },
    {
        "content": "<p>The idea is that <code>have foo x := x + 1</code> should define a function like <code>have foo := fun x =&gt; x + 1</code></p>",
        "id": 275706550,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647542031
    },
    {
        "content": "<p><code>have foo x : x &lt; x + 1</code> would produce a proof of <code>foo : (x : Nat) -&gt; x &lt; x + 1</code> on one branch and a proof obligation <code>x : nat |- x &lt; x + 1</code> on the other (note that <code>x</code> is already introduced)</p>",
        "id": 275706721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647542101
    },
    {
        "content": "<p>So If i have more than one identifier it will always define a function?</p>",
        "id": 275706948,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647542206
    },
    {
        "content": "<p>(using the first identifier as the function name and the others as parameters)</p>",
        "id": 275707030,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647542248
    },
    {
        "content": "<p>yes, the syntax is an ident followed by a list of <code>x</code> or <code>(x)</code> or <code>(x : ty)</code></p>",
        "id": 275707087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647542271
    },
    {
        "content": "<p>1 ident =&gt; current behavior<br>\n2+ ident =&gt; function</p>",
        "id": 275707231,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647542317
    },
    {
        "content": "<p>I can do that</p>",
        "id": 275707243,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647542323
    },
    {
        "content": "<p>it's not a separate case, really</p>",
        "id": 275707257,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647542330
    },
    {
        "content": "<p>the <code>haveIdLhs</code> parser gives you the list of binders and the name separately</p>",
        "id": 275707314,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647542364
    },
    {
        "content": "<p><code>have foo := x + 1</code><br>\n<code>have foo x := x + 1</code><br>\nAre those the same case?</p>",
        "id": 275707534,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647542470
    },
    {
        "content": "<p>yes, the first one has binders <code>[]</code> and the second has binders <code>[x]</code></p>",
        "id": 275707570,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647542492
    },
    {
        "content": "<p>and <code>have foo x y</code> would have binders <code>[x, y]</code></p>",
        "id": 275707592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647542507
    },
    {
        "content": "<p>and <code>have (x : ty)</code> would have binders <code>[(x : ty)]</code> and no ident (i.e. <code>this</code>)</p>",
        "id": 275707705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647542552
    },
    {
        "content": "<p>the parser handles all this already</p>",
        "id": 275707720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647542565
    },
    {
        "content": "<p>I will try it later</p>",
        "id": 275707769,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647542595
    },
    {
        "content": "<p>is there an example of these binders handling?</p>",
        "id": 275707837,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647542638
    },
    {
        "content": "<p><code>intro</code> tactic, or <code>let</code></p>",
        "id": 275708351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647542876
    },
    {
        "content": "<p>you might just be able to delegate to regular <code>have</code></p>",
        "id": 275708443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647542903
    },
    {
        "content": "<p>delegating to regular <code>have</code> has the same issue from Sebastian's macro</p>",
        "id": 275807046,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647612430
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I'm not sure I fully understood what you meant in the lean4 stream. This is my current code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Lean.Parser.Term.haveIdLhs'</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"o\">:=</span>\n  <span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">many</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"bp\">&gt;&gt;</span>\n    <span class=\"n\">checkColGt</span> <span class=\"s2\">\"expected to be indented\"</span> <span class=\"bp\">&gt;&gt;</span>\n    <span class=\"o\">(</span><span class=\"n\">simpleBinderWithoutType</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">bracketedBinder</span><span class=\"o\">)))</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">optType</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Lean.Parser.Term.letIdLhs'</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ident</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">notFollowedBy</span> <span class=\"o\">(</span><span class=\"n\">checkNoWsBefore</span> <span class=\"s2\">\"\"</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"s2\">\"[\"</span><span class=\"o\">)</span>\n    <span class=\"s2\">\"space is required before instance '[...]' binders to distinguish them from array updates `let x[i] := e; ...`\"</span> <span class=\"bp\">&gt;&gt;</span>\n      <span class=\"n\">many</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">checkColGt</span> <span class=\"s2\">\"expected to be indented\"</span> <span class=\"bp\">&gt;&gt;</span>\n        <span class=\"o\">(</span><span class=\"n\">simpleBinderWithoutType</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">bracketedBinder</span><span class=\"o\">))</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">optType</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab.Tactic</span> <span class=\"n\">Meta</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"have \"</span> <span class=\"n\">Parser.Term.haveIdLhs'</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"let \"</span>  <span class=\"n\">Parser.Term.letIdLhs'</span>  <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">addToContext</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">keepTerm</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">declFn</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">keepTerm</span> <span class=\"k\">then</span> <span class=\"n\">define</span> <span class=\"k\">else</span> <span class=\"n\">assert</span>\n  <span class=\"n\">liftMetaTactic</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"n\">userName</span> <span class=\"o\">:=</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n    <span class=\"k\">let</span> <span class=\"n\">mvarIdNew</span> <span class=\"bp\">←</span> <span class=\"n\">declFn</span> <span class=\"n\">mvarId</span> <span class=\"n\">name</span> <span class=\"n\">t</span> <span class=\"n\">p</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mvarIdNew</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">intro1P</span> <span class=\"n\">mvarIdNew</span>\n    <span class=\"n\">return</span> <span class=\"o\">[</span><span class=\"n\">p.mvarId</span><span class=\"bp\">!</span><span class=\"o\">,</span> <span class=\"n\">mvarIdNew</span><span class=\"o\">]</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">elabType</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Elab.TermElabM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">mkFreshTypeMVar</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"k\">have</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"n\">this</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n.getId</span>\n  <span class=\"n\">addToContext</span> <span class=\"n\">name</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">elabType</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"k\">have</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">bs</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"o\">[:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.elabBinders</span> <span class=\"n\">bs</span> <span class=\"bp\">$</span>\n      <span class=\"k\">fun</span> <span class=\"n\">es</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">mkForallFVars</span> <span class=\"n\">es</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">elabType</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n    <span class=\"n\">addToContext</span> <span class=\"n\">n.getId</span> <span class=\"n\">e</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"k\">let</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"o\">[:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span>       <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"n\">addToContext</span> <span class=\"n\">n.getId</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">elabType</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"k\">let</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">bs</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"o\">[:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.elabBinders</span> <span class=\"n\">bs</span> <span class=\"bp\">$</span>\n      <span class=\"k\">fun</span> <span class=\"n\">es</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">mkForallFVars</span> <span class=\"n\">es</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">elabType</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n    <span class=\"n\">addToContext</span> <span class=\"n\">n.getId</span> <span class=\"n\">e</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 275846647,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647629325
    },
    {
        "content": "<p>I'm tackling <code>let</code> and <code>have</code> in the same file because there's a lot of code that can be reused</p>",
        "id": 275846687,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647629351
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>should produce goals</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">f</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|-</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|-</span> <span class=\"n\">goal</span>\n</code></pre></div>",
        "id": 275846839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647629433
    },
    {
        "content": "<p>I think that means that you have to inline <code>addToContext</code> and move some things around</p>",
        "id": 275846963,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647629514
    },
    {
        "content": "<p>Alright. Another question: is there another elab_rule I am missing?</p>",
        "id": 275847406,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647629728
    },
    {
        "content": "<p>IIRC the behavior is different if you put more than one symtax node in the same elab_rules</p>",
        "id": 275848492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647630212
    },
    {
        "content": "<p>so I think you want <code>have</code> and <code>let</code> to be separate</p>",
        "id": 275848533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647630233
    },
    {
        "content": "<p>also I think you should be matching <code>(tactic| have $[$n:ident $bs*]? $[: $t:term]?)</code></p>",
        "id": 275848730,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647630326
    },
    {
        "content": "<p>which is the only case</p>",
        "id": 275848878,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647630389
    },
    {
        "content": "<p>Nice, tyvm <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 275848937,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647630429
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/expand.20.60have.60.20capabilities/near/275846839\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>should produce goals</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">f</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|-</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|-</span> <span class=\"n\">goal</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I don't know how to make it possible. I thought about a hacky solution performing <code>intro x</code> multiple times (depending on the number of binders and their types)</p>",
        "id": 275869429,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647641886
    },
    {
        "content": "<p>Hmm, maybe not \"hacky\", but kinda inefficient</p>",
        "id": 275869485,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647641944
    },
    {
        "content": "<p>Okay I think it turned out pretty good actually: <a href=\"https://github.com/leanprover-community/mathlib4/pull/232\">mathlib4#232</a></p>",
        "id": 275876322,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647647762
    }
]