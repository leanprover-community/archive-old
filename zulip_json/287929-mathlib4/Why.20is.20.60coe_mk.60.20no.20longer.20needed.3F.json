[
    {
        "content": "<p>I need help fixing the <code>map_mul'</code> field in <code>conj</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1111\">#1111</a>. In the mathlib3 proof, the <code>simp</code> tactic uses <code>mul_equiv.coe_mk</code> to simplify a big mess where a <code>mul_equiv</code> defined explicitly is applied to an argument. In mathlib4, the lemma <code>mul_equiv.coe_mk</code> doesn't exist, in fact, there is a porting note saying that it is no longer needed. However the big mess doesn't get simplified by the simp anymore and the proof of <code>map_mul'</code> now fails. What is supposed to be the alternative to <code>mul_equiv.coe_mk</code> that makes this proof work?</p>",
        "id": 316825686,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1671481699
    },
    {
        "content": "<p>In fact the <code>simp</code> now gives the following error :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">simp'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">nested</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">whnf'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">200000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 316825909,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1671481776
    },
    {
        "content": "<p>if simp says that then you marked something as a simp lemma (globally or in the invocation) which is causing it to loop</p>",
        "id": 316828937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671482985
    },
    {
        "content": "<p>Hmm, well if I replace <code>simp [mul_assoc]</code>with <code>simp only [mul_assoc, eq_self_iff_true, MulAut.mul_apply, mul_left_inj]</code>(which is what <code>simp? [mul_assoc]</code>generate in mathlib3 minus <code>mul_equiv.coe_mk</code>) I no longer have this deterministic timeout error but the big mess still doesn't get simplified.</p>",
        "id": 316838878,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1671487278
    },
    {
        "content": "<p>Is it one of those situations where <code>coe_mk</code> used to be syntactic tautology but now we have <code>funlike</code> and it isn't?</p>",
        "id": 316849479,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671491766
    },
    {
        "content": "<p>If you add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">_root_.MulEquiv.coe_mk</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">_root_.MulEquiv.mk</span> <span class=\"n\">e</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>then <code>simp [MulAut]</code> turns the goal into</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 316852974,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671493854
    },
    {
        "content": "<p>I don't know why people are saying these <code>simp</code> lemmas aren't needed; since <code>funlike</code> I think they are.</p>",
        "id": 316853020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671493899
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">_root_.MulEquiv.coe_mk_apply</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">):</span>\n    <span class=\"o\">(</span><span class=\"n\">_root_.MulEquiv.mk</span> <span class=\"n\">e</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>(<code>_root_</code> just because you're in the MulAut namespace) and then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">map_mul'</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_inv_rev</span><span class=\"o\">,</span> <span class=\"n\">MulEquiv.coe_mk_apply</span><span class=\"o\">,</span> <span class=\"n\">Equiv.coe_fn_mk</span><span class=\"o\">,</span> <span class=\"n\">mul_apply</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">inv_mul_cancel_left</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>solves the goal.</p>",
        "id": 316853514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671494264
    }
]