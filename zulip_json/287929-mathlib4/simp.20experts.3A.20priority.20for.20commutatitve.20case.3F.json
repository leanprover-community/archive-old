[
    {
        "content": "<p>I was fixing a few issues in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1331\">mathlib4#1331</a> for Algebra.Star.Basic and while one could be fixed, I do not know if the fix will have the correct behaviour or I have gamed the linter. Could some <code>simp</code> expert please take a look.</p>\n<p>The issue is that there is a field <code>star_mul : ∀ r s : R, star (r * s) = star s * star r</code> and a theorem in the commutative case which avoids the skew:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">star_mul'</span> <span class=\"o\">[</span><span class=\"n\">CommSemigroup</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">StarSemigroup</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">star</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">star</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">star</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>Both are marked <code>simp</code>. The linter complained that the left-hand side of <code>star_mul'</code> simplifies to <code>star y * star x</code>, which is because of the above field. I fixed this by moving the attribute statement to after the theorem.</p>",
        "id": 319918062,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1673078797
    },
    {
        "content": "<p>Looks good to me. Happily <code>star_mul'</code> still has higher priority, apparently.</p>",
        "id": 319921155,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673080725
    },
    {
        "content": "<p>My understanding is that the order in which <code>simp</code> tries things is completely nondeterministic and might change if we add some other lemma elsewhere?</p>",
        "id": 319957903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673098518
    },
    {
        "content": "<p>no, it's not that nondeterministic. It's a well defined order, it's just a little hard to think about since it involves the structure of the term and the order of declarations</p>",
        "id": 319977785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673106669
    },
    {
        "content": "<p>it should be relatively stable to new simp lemma additions</p>",
        "id": 319977805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673106689
    },
    {
        "content": "<p>If you want a specific simp lemma to have higher priority then why not give it higher priority though?</p>",
        "id": 319983651,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673110003
    },
    {
        "content": "<p>By giving it a priority explicitly, you're saying \"make this higher priority than every lemma in every other file\"</p>",
        "id": 319985056,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673110706
    },
    {
        "content": "<p>... except that this only matters for other lemmas whose LHS has head <code>star</code>, right?</p>",
        "id": 319985119,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673110755
    },
    {
        "content": "<p>Sure, but chance are that if there are lemmas like that in docstream files, those want to be higher priority than any of the lemmas in star.basic</p>",
        "id": 319985360,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673110889
    },
    {
        "content": "<p>If our simp set is confluent (which is wishful thinking, I know), this won't matter.</p>",
        "id": 319985615,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673111040
    },
    {
        "content": "<p>Other lemmas that match <code>star (r * s)</code>?</p>",
        "id": 319988070,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673112523
    },
    {
        "content": "<p>How many could there be?</p>",
        "id": 319988084,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673112535
    },
    {
        "content": "<p>By <code>simp_nf</code>, none. But the point is that possibly another simplification could happen instead.</p>",
        "id": 319988299,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673112665
    },
    {
        "content": "<p>For example, <code>star (1 * a) ↦ star 1 * star a ↦ 1 * star a ↦ star a</code> vs <code>star (1 * a) ↦ star a</code>. Increasing the priority of  <code>star_mul</code> will make simp always take the first path (which is fine IMHO).</p>",
        "id": 319988411,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673112752
    },
    {
        "content": "<p>My comment is more of a general one that if we start putting explicit priorities on everything we end up with a <code>20 GOTO 10</code>-style mess</p>",
        "id": 319994310,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673116413
    },
    {
        "content": "<p>I'd prefer it if we could just write <code>assert_simp_priority old_lemma &lt; new_lemma</code> or something to confirm relative priorities are what we intend, and keep our existing heuristic-based priority</p>",
        "id": 319994430,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673116476
    },
    {
        "content": "<p>I agree that priorities aren't a <em>great</em> way to express what we mean, but relying on undocumented simp behavior to get the order we want (which is only described on zulip) seems worse</p>",
        "id": 320003515,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673123150
    },
    {
        "content": "<p>Is <code>priority</code> documented anywhere but on zulip?</p>",
        "id": 320004030,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673123554
    },
    {
        "content": "<p>Is that a serious question?</p>",
        "id": 320004251,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673123749
    },
    {
        "content": "<p>Partially, yes; I'm curious whether <code>simp</code> knows anything about <code>priority</code>, or if it just acts as an override on \"order of declarations\" when asking  \"give me all the declarations with this attribute\"</p>",
        "id": 320004733,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673124155
    }
]