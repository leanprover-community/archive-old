[
    {
        "content": "<p>How can I look under the hood and debug a <code>maximum recursion depth has been reached</code> error when using <code>simp</code>? My wme is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.FunLike.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">P</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">MulHom</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">toFun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">toFun</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">toFun</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"s2\">\" →ₙ* \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">MulHom</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MulHomClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">&lt;|</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">outParam</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">outParam</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Mul</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">N</span> <span class=\"n\">where</span>\n  <span class=\"n\">map_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">MulHom.mulHomClass</span> <span class=\"o\">:</span> <span class=\"n\">MulHomClass</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→ₙ*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">MulHom.toFun</span>\n  <span class=\"n\">coe_injective'</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">f</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">g</span><span class=\"bp\">;</span> <span class=\"n\">congr</span>\n  <span class=\"n\">map_mul</span> <span class=\"o\">:=</span> <span class=\"n\">MulHom.map_mul'</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">map_mul</span> <span class=\"o\">[</span><span class=\"n\">MulHomClass</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"n\">MulHomClass.map_mul</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MulHom.comp</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→ₙ*</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hmn</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₙ*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₙ*</span> <span class=\"n\">P</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">hnp</span> <span class=\"bp\">∘</span> <span class=\"n\">hmn</span>\n  <span class=\"n\">map_mul'</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n<span class=\"c1\">-- works: by simp only [Function.comp_apply, map_mul]</span>\n</code></pre></div>",
        "id": 311210065,
        "sender_full_name": "Winston Yin",
        "timestamp": 1669001781
    },
    {
        "content": "<p><code>set_option trace.Meta.Tactic.simp.rewrite true</code> has some profitable things to say on this example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">FunLike.coe_eq_coe_fn</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">FunLike.coe</span> <span class=\"bp\">==&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">FunLike.coe</span> <span class=\"n\">f</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">FunLike.coe_eq_coe_fn</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">FunLike.coe</span> <span class=\"bp\">==&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">FunLike.coe</span> <span class=\"n\">f</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">FunLike.coe_eq_coe_fn</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">FunLike.coe</span> <span class=\"bp\">==&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">FunLike.coe</span> <span class=\"n\">f</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"bp\">@</span><span class=\"n\">FunLike.coe_eq_coe_fn</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">FunLike.coe</span> <span class=\"bp\">==&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">FunLike.coe</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 311210472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669002182
    },
    {
        "content": "<p><code>coe_eq_coe_fn</code> is a bad simp lemma because it uses <code>FunLike.coe</code> on the RHS again (instead of using <code>coe</code> like in lean 3)</p>",
        "id": 311210558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669002249
    }
]