[
    {
        "content": "<p>The Lean 4 implementation of <code>List.subset</code> makes the bound argument a regular implicit instead of a weak implicit as it was in vanilla mathilb.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- The new one</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">subset</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l₁</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l₂</span>\n</code></pre></div>\n<p>This causes some issues that feel like they shouldn't be there; is this a holdover from when weak implicits were supposedly not going to be in Lean 4, or is there a more concrete reason for the change? As an example,  this unintuitive failure the <code>exact</code> tactic when the hypothesis exactly matches the goal even with pp set to all:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">⊆</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">l</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">l</span> <span class=\"bp\">⊆</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">l</span>\n\n<span class=\"n\">exact</span> <span class=\"n\">h2</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch</span>\n<span class=\"cm\">  h2</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  ?m.2183 ∈ l → ?m.2183 ∈ x :: y :: l : Prop</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  l ⊆ x :: y :: l : Prop</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>With the pp set to all:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Subset.subset</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instSubsetList</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">List.cons</span> <span class=\"n\">α</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">List.cons</span> <span class=\"n\">α</span> <span class=\"n\">y</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">@</span><span class=\"n\">Subset.subset</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instSubsetList</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">List.cons</span> <span class=\"n\">α</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">List.cons</span> <span class=\"n\">α</span> <span class=\"n\">y</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n\n<span class=\"n\">exact</span> <span class=\"n\">h2</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch</span>\n<span class=\"cm\">  @h2 ?m.2183</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  @Mem.mem α (List α) (@instMemList α) ?m.2183 l →</span>\n<span class=\"cm\">    @Mem.mem α (List α) (@instMemList α) ?m.2183 (@List.cons ?m.2139 x (@List.cons ?m.2141 y l)) : Prop</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  @Subset.subset (List α) (@instSubsetList α) l (@List.cons α x (@List.cons α y l)) : Prop</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 254993967,
        "sender_full_name": "Chris B",
        "timestamp": 1632720002
    },
    {
        "content": "<p>I would guess it is a holdover. I tried it out switching to <code>{{ ... }}</code>, and after a few fixes everything works.</p>",
        "id": 254998003,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632723088
    },
    {
        "content": "<p>Let me know if you'd like me to make a PR.</p>",
        "id": 254998011,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632723097
    },
    {
        "content": "<p>Sure, thanks. It came up in the context of porting the basics for list permutation and multisets, so if you don't get around to it I'll include it in those.</p>",
        "id": 254998197,
        "sender_full_name": "Chris B",
        "timestamp": 1632723225
    }
]