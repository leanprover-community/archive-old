[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n   <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"mi\">89</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span>\n   <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"mi\">89</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n  <span class=\"c1\">-- The presence of this lemma causes the `congr` below to fail.</span>\n  <span class=\"c1\">-- The proof works if I comment this out.</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"mi\">89</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"mi\">90</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n  <span class=\"n\">congr</span> <span class=\"c1\">-- maximum recursion depth has been reached</span>\n  <span class=\"n\">funext</span>\n  <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 322619083,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674250029
    },
    {
        "content": "<p>the exactly analogous lean 3 code works without a problem</p>",
        "id": 322619304,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674250106
    },
    {
        "content": "<p>(This came up here: <a href=\"https://github.com/dwrensha/math-puzzles-in-lean4/commit/a3fb8f0df595030dde7b914672f189cbe98871b8\">https://github.com/dwrensha/math-puzzles-in-lean4/commit/a3fb8f0df595030dde7b914672f189cbe98871b8</a> )</p>",
        "id": 322619659,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674250223
    },
    {
        "content": "<p>It succeeds if I turn off <code>closePost</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">:=</span> <span class=\"n\">congrPrime</span><span class=\"o\">)</span> <span class=\"s2\">\"congr'\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span><span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">congr'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">Lean.Elab.Tactic.liftMetaTactic</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mvarId.congrN</span> <span class=\"o\">(</span><span class=\"n\">closePost</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 322632508,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674255336
    },
    {
        "content": "<p>It looks to me like this <code>isDefEq</code> is where the recursion depth gets exceeded: <a href=\"https://github.com/leanprover/lean4/blob/a125a36bcc79a28963ed5786f94c5d97648a8f99/src/Lean/Meta/Tactic/Assumption.lean#L15\">https://github.com/leanprover/lean4/blob/a125a36bcc79a28963ed5786f94c5d97648a8f99/src/Lean/Meta/Tactic/Assumption.lean#L15</a></p>",
        "id": 322634859,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674256472
    },
    {
        "content": "<p>Is there a reason that <code>isDefEq</code> would have trouble with expressions like <code>∑ i in Finset.range 89, ((i:ℤ) + 1)</code> ?</p>",
        "id": 322634994,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674256535
    },
    {
        "content": "<p>you can use <code>with_reducible congr</code> to avoid the more expensive defeq check</p>",
        "id": 322645463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674262590
    },
    {
        "content": "<p>The current implementation tries a weak refl before descending into subterms, and a strong refl if we don't have any better ideas. The strong refl can potentially explode if you have a big definition stack and similar looking terms</p>",
        "id": 322645581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674262682
    },
    {
        "content": "<p>the same thing presumably happens if you attempt to prove the goal using <code>exact h</code></p>",
        "id": 322645650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674262710
    },
    {
        "content": "<p>yep</p>",
        "id": 322645700,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674262746
    },
    {
        "content": "<p>I believe this design was lifted straight from lean 3, so perhaps the difference is not in <code>congr</code> but in some <code>@[irreducible]</code> markings?</p>",
        "id": 322645739,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674262778
    },
    {
        "content": "<p>yeah, my hypothesis is that something about finsets is less opaque than it was in lean 3</p>",
        "id": 322645837,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674262819
    },
    {
        "content": "<p><code>with_reducible</code> makes it work: <a href=\"https://github.com/dwrensha/math-puzzles-in-lean4/commit/f0f50f570e6f1f2b5f3ba024cbce89c43a63371b\">https://github.com/dwrensha/math-puzzles-in-lean4/commit/f0f50f570e6f1f2b5f3ba024cbce89c43a63371b</a></p>",
        "id": 322646029,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674262924
    }
]