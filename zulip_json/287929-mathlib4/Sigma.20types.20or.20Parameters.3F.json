[
    {
        "content": "<p>I'm doing a bit of Order Theory, hoping to make connections with pointless topology at a later stage.<br>\nAt first, I thought there was no fundamental difference between defining partial orders as:<br>\n<code>class PartialOrder (space : Type u) := (le := space -&gt; space -&gt; Prop) (reflexive : ...) (transitive: ...) (antisymmetric: ...)</code><br>\nor as<br>\n<code>class PartialOrder := (space : Type u) (le := space -&gt; space -&gt; Prop) (reflexive : ...) (transitive: ...) (antisymmetric: ...)</code></p>\n<p>Furthermore, I was happy to go along with the first, because it allows us to write<br>\n<code>class PartialOrder (space : Type u) extends LE space := (reflexive : ...) (transitive: ...) (antisymmetric: ...)</code><br>\ngiving nice $\\leq$ notation in the mix.</p>\n<p>However... when I next tried a bit of category theory defining<br>\n<code> class Category := (Obj : Type u) (Morph: Obj -&gt; Obj -&gt; Type v) (Conc : Morph -&gt; Morph -&gt; Morph) (Id : Obj -&gt; Morph)</code></p>\n<p>And subsequently try to prove that Partial Orders as Obj are a Category (with order preserving maps defined as Morph and concatenation of functions as Conc and identity as Id), the first definition does not typecheck while the second one does. The reason for this is that the first definition is a Type u -&gt; Type u : Type u+1, while the second one is a Sigma type. </p>\n<p>In ordinary terms, the first definition is \"parameterized\" (the space over which we have defined the partial order is a parameter of the class) while the second definition has the space as a given field. Practically, in the second definition there is a projection <a href=\"http://PartialOrder.space\">PartialOrder.space</a> that gives you the space, which does not exist in the first definition.</p>\n<p>Of course, this does in principle not stop me from using the Category definition, since I can use <code>Sigma space, Partial Order space</code> as a suitable type for Obj. However it does raise the question: <strong>How do we determine which of the two definitions is preferable for a library like Mathlib4? When is one type of definition preferred over the other? I imagine it really depends on what your goal is... </strong>.</p>\n<p>I hope it's clear what I mean.<br>\nCurious to hear your thoughts...</p>",
        "id": 313088995,
        "sender_full_name": "Pieter Cuijpers",
        "timestamp": 1669823176
    },
    {
        "content": "<p>Note that in mathlib we have both: see <code>category</code> for the unbundled version, and <code>Cat</code> for the bundled version.</p>",
        "id": 313089959,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669823459
    },
    {
        "content": "<p>Essentially, when the subject of your argument is elements of a structure, it is more convenient to have unbundled structures, and when the subject is relationships between such structures, it is more convenient to have the bundled structures.</p>",
        "id": 313090321,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669823541
    },
    {
        "content": "<p>We have gained a lot of experience on this in mathlib 3: we have e.g. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/partial_order\">docs#partial_order</a> for generic use throughout most of the library, and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/PartialOrder\">docs#PartialOrder</a> for the category of partial orders.</p>",
        "id": 313090327,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669823542
    },
    {
        "content": "<p>Ah cool, I suspected there should be knowledge embedded here. I haven't really looked at Mathlib 3 yet. Just started with theorem provers a few months ago and decided on Lean4 since \"things seem to be going that way\". So I \"made do\" with what was in Mathlib4 as a source of inspiration and am now mostly defining my own structures as part of the learning process. Ultimately, I can see myself contributing to Mathlib4, so whenever I can I try to think about \"how it should be done\" next to \"how I would do it\".</p>",
        "id": 313091305,
        "sender_full_name": "Pieter Cuijpers",
        "timestamp": 1669823764
    },
    {
        "content": "<p>Do I understand correctly that category_theory.bundled basically performs the Sigma construction I mentioned above, but then for arbitrary constructions?</p>",
        "id": 313092075,
        "sender_full_name": "Pieter Cuijpers",
        "timestamp": 1669823971
    },
    {
        "content": "<p>correct</p>",
        "id": 313093643,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669824312
    }
]