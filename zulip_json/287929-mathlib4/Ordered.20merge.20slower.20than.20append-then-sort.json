[
    {
        "content": "<p>Hmm. I have arrays on the order of 1000s of elements, which are already ordered and I want to merge them into an ordered array. As a temporary hack I was appending them together, then sorting. This was too slow. I've tried to speed it up, but my code is quite a bit slower.</p>\n<p>I suspect the <code>append</code> is better optimized and dwarfing my code. Any suggestions?</p>\n<p>The obviously correct reference.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">as.append</span> <span class=\"n\">bs</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">heapSort</span> <span class=\"o\">(</span><span class=\"n\">hash</span> <span class=\"bp\">.</span> <span class=\"bp\">&lt;</span> <span class=\"n\">hash</span> <span class=\"bp\">.</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The should-be-faster code. <code>@[specialize]</code> helped a little. Adding the bounds proofs did not have any effect.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[specialize]</span> <span class=\"kd\">def</span> <span class=\"n\">ordered_merge</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">cs</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mkEmpty</span> <span class=\"o\">(</span><span class=\"n\">as.size</span> <span class=\"bp\">+</span> <span class=\"n\">bs.size</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">left</span> <span class=\"o\">:</span> <span class=\"n\">USize</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">right</span> <span class=\"o\">:</span> <span class=\"n\">USize</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n    <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"o\">[:</span> <span class=\"n\">as.size</span> <span class=\"bp\">+</span> <span class=\"n\">bs.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n        <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">left.toNat</span> <span class=\"bp\">&lt;</span> <span class=\"n\">as.size</span> <span class=\"k\">then</span>\n            <span class=\"k\">if</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">right.toNat</span> <span class=\"bp\">&lt;</span> <span class=\"n\">bs.size</span> <span class=\"k\">then</span>\n                <span class=\"k\">if</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">as.uget</span> <span class=\"n\">left</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bs.uget</span> <span class=\"n\">right</span> <span class=\"n\">h'</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n                    <span class=\"n\">cs</span> <span class=\"o\">:=</span> <span class=\"n\">cs.push</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">as.uget</span> <span class=\"n\">left</span> <span class=\"n\">h</span>\n                    <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">left</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n                <span class=\"k\">else</span>\n                    <span class=\"n\">cs</span> <span class=\"o\">:=</span> <span class=\"n\">cs.push</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">bs.uget</span> <span class=\"n\">right</span> <span class=\"n\">h'</span>\n                    <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"n\">right</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n            <span class=\"k\">else</span>\n                <span class=\"n\">cs</span> <span class=\"o\">:=</span> <span class=\"n\">cs.append</span> <span class=\"n\">as</span><span class=\"o\">[</span><span class=\"n\">left.toNat</span> <span class=\"o\">:]</span>\n                <span class=\"n\">break</span>\n        <span class=\"k\">else</span>\n            <span class=\"n\">cs</span> <span class=\"o\">:=</span> <span class=\"n\">cs.append</span> <span class=\"n\">bs</span><span class=\"o\">[</span><span class=\"n\">right.toNat</span> <span class=\"o\">:]</span>\n            <span class=\"n\">break</span>\n\n    <span class=\"n\">cs</span>\n</code></pre></div>",
        "id": 266619236,
        "sender_full_name": "Sofia",
        "timestamp": 1641137793
    },
    {
        "content": "<p><code>append</code> on <code>Array</code> is indeed better optimized because it uses a C implementation under the hood so you will have a hard time keeping up with that in Lean i suppose </p>\n<p>Out of curiosity, how are you measuring performance here? Do you have some cool setup for that or do you just time the execution of the binary?</p>",
        "id": 266620062,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1641139080
    },
    {
        "content": "<p>I'm using <code>timeit</code> in Lean and looking at the process in htop. When it has many threads, it is building those arrays. When it uses only one, it is doing the merges.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">new</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">timeit</span> <span class=\"s2\">\"join\"</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">new</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n    <span class=\"n\">for</span> <span class=\"n\">t</span> <span class=\"k\">in</span> <span class=\"n\">tasks</span> <span class=\"k\">do</span>\n        <span class=\"n\">new</span> <span class=\"o\">:=</span> <span class=\"n\">new.ordered_merge</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span> <span class=\"n\">IO.ofExcept</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span> <span class=\"n\">IO.wait</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hash</span> <span class=\"bp\">.</span> <span class=\"bp\">&lt;</span> <span class=\"n\">hash</span> <span class=\"bp\">.</span><span class=\"o\">)</span>\n    <span class=\"n\">new</span>\n</code></pre></div>",
        "id": 266620290,
        "sender_full_name": "Sofia",
        "timestamp": 1641139272
    },
    {
        "content": "<p>Hmm. Looking at that part of the code again, I recall I was just doing append before in that loop, then doing the sort on the outside.</p>",
        "id": 266620313,
        "sender_full_name": "Sofia",
        "timestamp": 1641139308
    },
    {
        "content": "<p>That'd further amplify the append vs. iteration significantly.</p>",
        "id": 266620365,
        "sender_full_name": "Sofia",
        "timestamp": 1641139351
    },
    {
        "content": "<p>I don't think the <code>append</code> is implemented in C? Following back the implementation, it is all Lean. A little implemented with unsafe, but that is still Lean.</p>",
        "id": 266620510,
        "sender_full_name": "Sofia",
        "timestamp": 1641139548
    },
    {
        "content": "<p>Ahhh it was <code>Array.push</code> that is implemented in C right...I always mix those two up.</p>",
        "id": 266620580,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1641139627
    },
    {
        "content": "<p>Getting a nice speed up by just appending them and doing in-place swaps instead.</p>",
        "id": 266621134,
        "sender_full_name": "Sofia",
        "timestamp": 1641140285
    },
    {
        "content": "<p>But I think there is a bug so...</p>",
        "id": 266621139,
        "sender_full_name": "Sofia",
        "timestamp": 1641140297
    },
    {
        "content": "<p>Yeah.. it isn't interleaving them o.o</p>",
        "id": 266621226,
        "sender_full_name": "Sofia",
        "timestamp": 1641140419
    },
    {
        "content": "<p>Ah.</p>",
        "id": 266621252,
        "sender_full_name": "Sofia",
        "timestamp": 1641140478
    },
    {
        "content": "<p>Tired.. should really be sleeping and not doing silly things like figuring out how to merge sorted lists.. Anyway, I already have a \"gallop\" function (stolen shamelessly from <a href=\"https://docs.rs/datafrog\">https://docs.rs/datafrog</a>) so I'm using that to find runs, then merge over runs. This improves performance at least.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[specialize]</span> <span class=\"kd\">def</span> <span class=\"n\">ordered_merge</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">cs</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mkEmpty</span> <span class=\"o\">(</span><span class=\"n\">as.size</span> <span class=\"bp\">+</span> <span class=\"n\">bs.size</span><span class=\"o\">)</span>\n\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n    <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">as.size</span> <span class=\"bp\">+</span> <span class=\"n\">bs.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n        <span class=\"k\">if</span> <span class=\"n\">l</span> <span class=\"bp\">&gt;=</span> <span class=\"n\">as.size</span> <span class=\"k\">then</span>\n            <span class=\"n\">cs</span> <span class=\"o\">:=</span> <span class=\"n\">cs.append</span> <span class=\"n\">bs</span><span class=\"o\">[</span><span class=\"n\">r</span><span class=\"o\">:]</span>\n            <span class=\"n\">break</span>\n        <span class=\"k\">if</span> <span class=\"n\">r</span> <span class=\"bp\">&gt;=</span> <span class=\"n\">bs.size</span> <span class=\"k\">then</span>\n            <span class=\"n\">cs</span> <span class=\"o\">:=</span> <span class=\"n\">cs.append</span> <span class=\"n\">as</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">:]</span>\n            <span class=\"n\">break</span>\n\n        <span class=\"k\">let</span> <span class=\"n\">l'</span> <span class=\"o\">:=</span> <span class=\"n\">as.gallop</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">.</span> <span class=\"n\">bs</span><span class=\"o\">[</span><span class=\"n\">r.min</span> <span class=\"o\">(</span><span class=\"n\">bs.size</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)])</span> <span class=\"n\">l</span>\n        <span class=\"k\">let</span> <span class=\"n\">r'</span> <span class=\"o\">:=</span> <span class=\"n\">bs.gallop</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">.</span> <span class=\"n\">as</span><span class=\"o\">[</span><span class=\"n\">l'.min</span> <span class=\"o\">(</span><span class=\"n\">as.size</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)])</span> <span class=\"n\">r</span>\n        <span class=\"n\">cs</span> <span class=\"o\">:=</span> <span class=\"n\">cs.append</span> <span class=\"n\">as</span><span class=\"o\">[</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">l'</span><span class=\"o\">]</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">append</span> <span class=\"n\">bs</span><span class=\"o\">[</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">r'</span><span class=\"o\">]</span>\n        <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">l'</span>\n        <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">r'</span>\n\n    <span class=\"n\">cs</span>\n</code></pre></div>",
        "id": 266624735,
        "sender_full_name": "Sofia",
        "timestamp": 1641145311
    },
    {
        "content": "<p>By faster I meant compared to my other code. Yet this is still slower than the \"naive\" <code>cs : = as.append bs |&gt;.heapSort</code> which doesn't even exploit the fact these are sorted. But at least gets to append many steps first to amortize it.</p>",
        "id": 266624874,
        "sender_full_name": "Sofia",
        "timestamp": 1641145477
    },
    {
        "content": "<p>Will try making that a k-way ordered merge tomorrow... or another time. Unless anyone else wants to take a stab. &lt;3</p>",
        "id": 266625053,
        "sender_full_name": "Sofia",
        "timestamp": 1641145708
    },
    {
        "content": "<p>This should suffice to complete the above code.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Hashable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Hashable</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">ar</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ar.foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hash</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">gallop</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"bp\">@&amp;</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">stop</span> <span class=\"o\">:=</span> <span class=\"n\">arr.size</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">stop</span> <span class=\"o\">:=</span> <span class=\"n\">stop.min</span> <span class=\"n\">arr.size</span>\n\n    <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">leap_left</span> <span class=\"n\">step</span> <span class=\"n\">index</span> <span class=\"o\">:=</span>\n        <span class=\"k\">if</span> <span class=\"n\">step</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n            <span class=\"k\">if</span> <span class=\"n\">index</span> <span class=\"bp\">+</span> <span class=\"n\">step</span> <span class=\"bp\">&lt;</span> <span class=\"n\">stop</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">index</span> <span class=\"bp\">+</span> <span class=\"n\">step</span><span class=\"o\">]</span> <span class=\"k\">then</span>\n                <span class=\"n\">leap_left</span> <span class=\"o\">(</span><span class=\"n\">step</span> <span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"bp\">+</span> <span class=\"n\">step</span><span class=\"o\">)</span>\n            <span class=\"k\">else</span>\n                <span class=\"n\">leap_left</span> <span class=\"o\">(</span><span class=\"n\">step</span> <span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">index</span>\n        <span class=\"k\">else</span>\n            <span class=\"n\">index</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n    <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">leap_right</span> <span class=\"n\">step</span> <span class=\"n\">index</span> <span class=\"o\">:=</span>\n        <span class=\"k\">if</span> <span class=\"n\">index</span> <span class=\"bp\">+</span> <span class=\"n\">step</span> <span class=\"bp\">&lt;</span> <span class=\"n\">stop</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">index</span> <span class=\"bp\">+</span> <span class=\"n\">step</span><span class=\"o\">]</span> <span class=\"k\">then</span>\n            <span class=\"n\">leap_right</span> <span class=\"o\">(</span><span class=\"n\">step</span> <span class=\"bp\">&lt;&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"bp\">+</span> <span class=\"n\">step</span><span class=\"o\">)</span>\n        <span class=\"k\">else</span>\n            <span class=\"n\">leap_left</span> <span class=\"o\">(</span><span class=\"n\">step</span> <span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">index</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">arr.size</span> <span class=\"bp\">&gt;</span> <span class=\"n\">start</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">start</span><span class=\"o\">]</span> <span class=\"k\">then</span>\n        <span class=\"n\">leap_right</span> <span class=\"mi\">1</span> <span class=\"n\">start</span>\n    <span class=\"k\">else</span>\n        <span class=\"n\">start</span>\n</code></pre></div>",
        "id": 266625070,
        "sender_full_name": "Sofia",
        "timestamp": 1641145777
    },
    {
        "content": "<p>An invariant for that order function in the last merge function. <code>(hash . &lt;= hash .)</code> is necessary, not just <code>&lt;</code>.</p>",
        "id": 266625163,
        "sender_full_name": "Sofia",
        "timestamp": 1641145909
    },
    {
        "content": "<p>I can't reproduce your performance problems at all.  You're probably getting non-deterministic results from using tasks and then attribute it to the merging algorithm.  This is the benchmark I've run:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.BinaryHeap</span>\n\n<span class=\"kd\">@[specialize]</span> <span class=\"kd\">def</span> <span class=\"n\">ordered_merge</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">cs</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mkEmpty</span> <span class=\"o\">(</span><span class=\"n\">as.size</span> <span class=\"bp\">+</span> <span class=\"n\">bs.size</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">left</span> <span class=\"o\">:</span> <span class=\"n\">USize</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">right</span> <span class=\"o\">:</span> <span class=\"n\">USize</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n    <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"o\">[:</span> <span class=\"n\">as.size</span> <span class=\"bp\">+</span> <span class=\"n\">bs.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n        <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">left.toNat</span> <span class=\"bp\">&lt;</span> <span class=\"n\">as.size</span> <span class=\"k\">then</span>\n            <span class=\"k\">if</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">right.toNat</span> <span class=\"bp\">&lt;</span> <span class=\"n\">bs.size</span> <span class=\"k\">then</span>\n                <span class=\"k\">if</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">as.uget</span> <span class=\"n\">left</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bs.uget</span> <span class=\"n\">right</span> <span class=\"n\">h'</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n                    <span class=\"n\">cs</span> <span class=\"o\">:=</span> <span class=\"n\">cs.push</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">as.uget</span> <span class=\"n\">left</span> <span class=\"n\">h</span>\n                    <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">left</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n                <span class=\"k\">else</span>\n                    <span class=\"n\">cs</span> <span class=\"o\">:=</span> <span class=\"n\">cs.push</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">bs.uget</span> <span class=\"n\">right</span> <span class=\"n\">h'</span>\n                    <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"n\">right</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n            <span class=\"k\">else</span>\n                <span class=\"n\">cs</span> <span class=\"o\">:=</span> <span class=\"n\">cs.append</span> <span class=\"n\">as</span><span class=\"o\">[</span><span class=\"n\">left.toNat</span> <span class=\"o\">:]</span>\n                <span class=\"n\">break</span>\n        <span class=\"k\">else</span>\n            <span class=\"n\">cs</span> <span class=\"o\">:=</span> <span class=\"n\">cs.append</span> <span class=\"n\">bs</span><span class=\"o\">[</span><span class=\"n\">right.toNat</span> <span class=\"o\">:]</span>\n            <span class=\"n\">break</span>\n\n    <span class=\"n\">cs</span>\n\n<span class=\"kd\">@[specialize]</span>\n<span class=\"kd\">def</span> <span class=\"n\">heapSortMerge</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">as</span> <span class=\"bp\">++</span> <span class=\"n\">bs</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">heapSort</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">@[specialize]</span>\n<span class=\"kd\">def</span> <span class=\"n\">quickSortMerge</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">as</span> <span class=\"bp\">++</span> <span class=\"n\">bs</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">qsort</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">List.range</span> <span class=\"mi\">100000</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toArray</span>\n<span class=\"kd\">def</span> <span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">List.range</span> <span class=\"mi\">100000</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toArray</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">timeit</span> <span class=\"s2\">\"heapSortMerge\"</span> <span class=\"k\">do</span> <span class=\"o\">()</span><span class=\"bp\">;</span> <span class=\"n\">heapSortMerge</span> <span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">size</span> <span class=\"c1\">-- 2.82s</span>\n<span class=\"k\">#eval</span> <span class=\"n\">timeit</span> <span class=\"s2\">\"ordered_merge\"</span> <span class=\"k\">do</span> <span class=\"o\">()</span><span class=\"bp\">;</span> <span class=\"n\">ordered_merge</span> <span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">size</span> <span class=\"c1\">-- 185ms</span>\n<span class=\"k\">#eval</span> <span class=\"n\">timeit</span> <span class=\"s2\">\"quickSortMerge\"</span> <span class=\"k\">do</span> <span class=\"o\">()</span><span class=\"bp\">;</span> <span class=\"n\">quickSortMerge</span> <span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">size</span> <span class=\"c1\">-- stack overflow</span>\n</code></pre></div>",
        "id": 266625312,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641146113
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Nice benchmark! However as mentioned above I noticed the real problem with the comparison. The heap sort method was deferred after appending many of these arrays. Thus the fair comparison would be a k-way merge.</p>",
        "id": 266625384,
        "sender_full_name": "Sofia",
        "timestamp": 1641146216
    },
    {
        "content": "<p>Other issues that I could see are:<br>\n1) Maybe your <code>hash</code> function is expensive<br>\n2) You're repeatedly merging arrays in a loop.  This is quadratic in the size of the <code>tasks</code> array.</p>",
        "id": 266625402,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641146246
    },
    {
        "content": "<p>(2) is yes, until the k-way merge. The hash is Lean's normal hash which is cheap.</p>",
        "id": 266625459,
        "sender_full_name": "Sofia",
        "timestamp": 1641146300
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> For my comparison, I see the deferred heap sort at 24s and the quadratic 2-way merge as 30s. I expect the k-way merge to be a lot better here.</p>",
        "id": 266625602,
        "sender_full_name": "Sofia",
        "timestamp": 1641146458
    },
    {
        "content": "<p>Either way I really need to get some sleep... I'd appreciate any further suggestions. &lt;3</p>",
        "id": 266625668,
        "sender_full_name": "Sofia",
        "timestamp": 1641146526
    }
]