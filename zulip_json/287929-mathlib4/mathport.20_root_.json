[
    {
        "content": "<p>I've noticed that mathport generates incorrect <code>#align</code> when a theorem uses the <code>_root_</code> namespace. For example, it tries to do <code>is_unit._root_.is_unit_map_of_left_inverse</code> when it should be <code>is_unit_map_of_left_inverse</code>. What would be the right place to submit an issue for this?</p>",
        "id": 312413814,
        "sender_full_name": "Winston Yin",
        "timestamp": 1669512429
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathport/\">https://github.com/leanprover-community/mathport/</a></p>",
        "id": 312414837,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1669513523
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathport/blob/f071992a732b95d49b75111dfbdd9cdd9cd371dc/Mathport/Syntax/Translate/Command.lean#L240\">https://github.com/leanprover-community/mathport/blob/f071992a732b95d49b75111dfbdd9cdd9cd371dc/Mathport/Syntax/Translate/Command.lean#L240</a></p>",
        "id": 312414960,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1669513677
    },
    {
        "content": "<p>I also notice this.</p>",
        "id": 323092803,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674499685
    },
    {
        "content": "<p>Does mathport understand _root_ at all?</p>",
        "id": 323092847,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674499700
    },
    {
        "content": "<p>I see more and more lemmas that used <code>lemma _root_.foo</code> in mathlib 3, that got translated into <code>lemma foo</code> in mathlib 4</p>",
        "id": 323095929,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674500602
    },
    {
        "content": "<p>It's probably not a huge deal but it would be more correct to preserve it</p>",
        "id": 323096008,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674500622
    },
    {
        "content": "<p>we could calculate whether <code>_root_</code> is needed and use it only then, but I worry that this will cause a huge disruption if it happens to get a namespace declaration wrong</p>",
        "id": 323096344,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674500716
    },
    {
        "content": "<p>Then again, you can already see the result of mathport's perspective of what the namespace is in the generated <code>#align</code> statements, and I don't think those need bulk modification that often</p>",
        "id": 323096751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674500816
    },
    {
        "content": "<p>hmm, is the idea that mathport doesn't know what name the user actually wrote in a <code>def</code> in mathlib 3, and it has to reverse engineer it from the new constant?</p>",
        "id": 323103149,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674502841
    },
    {
        "content": "<p>No, mathport also knows what the user wrote and so an alternative would be to preserve the <code>_root_</code>ness of the original definition instead of resolving and unresolving the name</p>",
        "id": 323106826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674504039
    },
    {
        "content": "<p>If we can do it correctly, I think it would be better to just use it when necessary. We don't preserve lean 3 parentheses either</p>",
        "id": 323107004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674504090
    },
    {
        "content": "<p>I'm sort of guessing at what is happening because I saw some names that were (inadvertently?) moved into whatever namespace was open at the time, but I didn't look into how that happened. Certainly, there are many other names that do use <code>_root_</code></p>",
        "id": 323107160,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674504134
    },
    {
        "content": "<p>an example where it would make a difference is if the lean 3 file had</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kd\">def</span> <span class=\"n\">_root_.bar</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">A</span>\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kd\">def</span> <span class=\"n\">_root_.b</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n<span class=\"kd\">def</span> <span class=\"n\">_root_.A.c</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span>\n<span class=\"kd\">end</span> <span class=\"n\">A</span>\n</code></pre></div>\n<p>then the translated version would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">A</span>\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kd\">def</span> <span class=\"n\">_root_.b</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n<span class=\"kd\">def</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span>\n<span class=\"kd\">end</span> <span class=\"n\">A</span>\n</code></pre></div>\n<p>if we reconstruct <code>_root_</code>ness</p>",
        "id": 323107419,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674504220
    },
    {
        "content": "<p>Right now mathport just never uses <code>_root_</code>, which is definitely wrong</p>",
        "id": 323107713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674504306
    },
    {
        "content": "<p>it has a heuristic for aligning short names that involves removing the same number of namespaces on both fully qualified names, which can have weird behavior if the lean 3 name is in an unrelated namespace because of use of <code>_root_</code></p>",
        "id": 323107963,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674504377
    },
    {
        "content": "<p>OK that might explain some of what I saw</p>",
        "id": 323108352,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674504503
    }
]