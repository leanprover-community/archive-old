[
    {
        "content": "<p>I started porting <code>group_theory.subsemigroup.operations</code>. It turns out that coercion of an <code>order_iso</code> to a function yields</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">RelIso.toRelEmbedding</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toEmbedding</span>\n</code></pre></div>\n<p>where the outer <code>↑</code> is <code>FunLike.coe</code>.</p>",
        "id": 317644350,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1671831352
    },
    {
        "content": "<p>Why does it happen? What is the proper fix?</p>",
        "id": 317644510,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1671831476
    },
    {
        "content": "<p>It means there is a shortcut instance that needs removing, I think</p>",
        "id": 317653502,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671836789
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 317653529,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671836807
    },
    {
        "content": "<p>Should I remove most of <code>CoeFun</code> instances?</p>",
        "id": 317655773,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1671838450
    },
    {
        "content": "<p>I can't find the one causing the problem now</p>",
        "id": 317690576,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671872105
    },
    {
        "content": "<p>I found it, fixing.</p>",
        "id": 317742890,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1671897088
    },
    {
        "content": "<p>What are our plans about <code>CoeFun</code>? I can update <a href=\"https://github.com/leanprover-community/mathlib4/pull/1219\">https://github.com/leanprover-community/mathlib4/pull/1219</a> to work with <code>master</code> but I don't want to spend time on this if it won't get merged.</p>",
        "id": 319996484,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673117856
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 319996556,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673117887
    },
    {
        "content": "<p>That patch looks generally like the right thing to do to me</p>",
        "id": 320000977,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673121083
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  was not happy about it, so I'm waiting for him. Also, we didn't hear from <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>  about this.</p>",
        "id": 320007816,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673126864
    },
    {
        "content": "<p>Happy new year!  I think <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> is doing the right thing here.  If we want <code>FunLike</code>, then we need to use <code>FunLike.coe</code> everywhere.</p>",
        "id": 320350728,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1673306828
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Happy new year! Why exactly Lean 4 doesn't unfold <code>FunLike.coe</code>? It seems that Lean unfolds it for a <code>MulEquiv</code>.</p>",
        "id": 320786278,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673467182
    },
    {
        "content": "<p>If it gets unfolded then it must be because of a <code>CoeFun</code> instance.</p>",
        "id": 320786447,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1673467221
    },
    {
        "content": "<p>Could you please have a look at <a href=\"https://github.com/leanprover-community/mathlib4/tree/YK-coe-fn\">https://github.com/leanprover-community/mathlib4/tree/YK-coe-fn</a> ? I can't find any relevant <code>CoeFun</code> instance.</p>",
        "id": 320787365,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673467523
    },
    {
        "content": "<p>But RHS of <code>MulEquiv.coe_toMulHom</code> unfolds to <code>f.toEquiv.toFun</code></p>",
        "id": 320787564,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673467582
    },
    {
        "content": "<p>Should we drop all the custom <code>to*Hom</code> functions in favor of one generic <code>*Hom.of [*HomClass F M N]</code> per <code>*Hom</code>?</p>",
        "id": 320811974,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673477183
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/CoeFun/near/320787564\">said</a>:</p>\n<blockquote>\n<p>But RHS of <code>MulEquiv.coe_toMulHom</code> unfolds to <code>f.toEquiv.toFun</code></p>\n</blockquote>\n<p>I'm not sure I can repro that.  <code>coe_toMulHome</code> has <code>FunLike.coe</code> on both sides for me.</p>",
        "id": 320828713,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1673487236
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/CoeFun/near/320811974\">said</a>:</p>\n<blockquote>\n<p>Should we drop all the custom <code>to*Hom</code> functions in favor of one generic <code>*Hom.of [*HomClass F M N]</code> per <code>*Hom</code>?</p>\n</blockquote>\n<p>That is an interesting refactoring.  But we should probably wait until after the port with that.</p>",
        "id": 320828800,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1673487289
    },
    {
        "content": "<p>We can't drop the <code>to*Hom</code> functions, can we? They're generated by the <code>structure</code> keyword</p>",
        "id": 320830793,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673489009
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/CoeFun/near/320787564\">said</a>:</p>\n<blockquote>\n<p>But RHS of <code>MulEquiv.coe_toMulHom</code> unfolds to <code>f.toEquiv.toFun</code></p>\n</blockquote>\n<p>I would guess that this is a transitive coercion kicking in, that we probably don't want</p>",
        "id": 320830864,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673489049
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/CoeFun/near/320811974\">said</a>:</p>\n<blockquote>\n<p>one generic <code>*Hom.of [*HomClass F M N]</code> per <code>*Hom</code>?</p>\n</blockquote>\n<p>This already exists, it's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_hom.has_coe_t\">docs#add_hom.has_coe_t</a> etc</p>",
        "id": 320831021,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673489172
    },
    {
        "content": "<p>But to make Lean4 happy we probably need to give those functions new names thare aren't just <code>coe</code></p>",
        "id": 320831046,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673489199
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/CoeFun/near/320830793\">said</a>:</p>\n<blockquote>\n<p>We can't drop the <code>to*Hom</code> functions, can we? They're generated by the <code>structure</code> keyword</p>\n</blockquote>\n<p>Ah, you're right.  And they probably appear in structure instances without us being able to do anything about that.</p>",
        "id": 320831115,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1673489266
    },
    {
        "content": "<p>Hmm, I looked at two files, <code>Algebra.Group.WithOne.Basic</code> and <code>Data.Real.CauSeq</code> and they both built with minor (non-coe related) fixes.  Not sure what the issue here is.</p>",
        "id": 320833053,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1673491074
    },
    {
        "content": "<p>Probably, there was a problem with cached oleans.</p>",
        "id": 320856567,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673500522
    }
]