[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/981\">#981</a> I am porting <code>data/int/gcd</code>. The only errors left are in the section relative to `NormNum. Can someone who knows tactic writing have a quick look? Thanks!</p>",
        "id": 316759733,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671461067
    },
    {
        "content": "<p>This is actually the <code>int.gcd</code> norm_num extension, so I guess it's not surprising that mathport produces garbage.  I guess this is a task for <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ?</p>",
        "id": 316840231,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671487909
    },
    {
        "content": "<p>yep, comment the section out completely and leave a TODO</p>",
        "id": 316840350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671487955
    },
    {
        "content": "<p>There is a linter error I don't understand:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">The</span> <span class=\"bp\">`</span><span class=\"n\">unusedHavesSuffices</span><span class=\"bp\">`</span> <span class=\"n\">linter</span> <span class=\"n\">reports</span><span class=\"o\">:</span>\n<span class=\"n\">THE</span> <span class=\"n\">FOLLOWING</span> <span class=\"n\">DECLARATIONS</span> <span class=\"n\">HAVE</span> <span class=\"n\">INEFFECTUAL</span> <span class=\"n\">TERM</span> <span class=\"n\">MODE</span> <span class=\"n\">HAVE</span><span class=\"bp\">/</span><span class=\"n\">SUFFICES</span> <span class=\"n\">BLOCKS.</span> <span class=\"n\">In</span> <span class=\"n\">the</span> <span class=\"n\">case</span> <span class=\"n\">of</span> <span class=\"bp\">`</span><span class=\"k\">have</span><span class=\"bp\">`</span> <span class=\"n\">this</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">term</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"bp\">`</span><span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">bar</span><span class=\"bp\">`</span> <span class=\"n\">where</span> <span class=\"bp\">`</span><span class=\"n\">bar</span><span class=\"bp\">`</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">refer</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">foo</span><span class=\"bp\">`.</span> <span class=\"n\">Such</span> <span class=\"n\">statements</span> <span class=\"k\">have</span> <span class=\"n\">no</span> <span class=\"n\">effect</span> <span class=\"n\">on</span> <span class=\"n\">the</span> <span class=\"n\">generated</span> <span class=\"n\">proof</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"n\">can</span> <span class=\"n\">just</span> <span class=\"n\">be</span> <span class=\"n\">replaced</span> <span class=\"kd\">by</span> <span class=\"bp\">`</span><span class=\"n\">bar</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"k\">in</span> <span class=\"n\">addition</span> <span class=\"n\">to</span> <span class=\"n\">being</span> <span class=\"n\">ineffectual</span><span class=\"o\">,</span> <span class=\"n\">they</span> <span class=\"n\">may</span> <span class=\"n\">make</span> <span class=\"n\">unnecessary</span> <span class=\"n\">assumptions</span> <span class=\"k\">in</span> <span class=\"n\">proofs</span> <span class=\"n\">appear</span> <span class=\"n\">as</span> <span class=\"k\">if</span> <span class=\"n\">they</span> <span class=\"n\">are</span> <span class=\"n\">used.</span> <span class=\"n\">For</span> <span class=\"bp\">`</span><span class=\"k\">suffices</span><span class=\"bp\">`</span> <span class=\"n\">this</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">term</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"bp\">`</span><span class=\"k\">suffices</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">proof_of_goal</span><span class=\"o\">,</span> <span class=\"n\">proof_of_foo</span><span class=\"bp\">`</span> <span class=\"n\">where</span> <span class=\"bp\">`</span><span class=\"n\">proof_of_goal</span><span class=\"bp\">`</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">refer</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">foo</span><span class=\"bp\">`.</span> <span class=\"n\">Such</span> <span class=\"n\">statements</span> <span class=\"k\">have</span> <span class=\"n\">no</span> <span class=\"n\">effect</span> <span class=\"n\">on</span> <span class=\"n\">the</span> <span class=\"n\">generated</span> <span class=\"n\">proof</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"n\">can</span> <span class=\"n\">just</span> <span class=\"n\">be</span> <span class=\"n\">replaced</span> <span class=\"kd\">by</span> <span class=\"bp\">`</span><span class=\"n\">proof_of_goal</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"k\">in</span> <span class=\"n\">addition</span> <span class=\"n\">to</span> <span class=\"n\">being</span> <span class=\"n\">ineffectual</span><span class=\"o\">,</span> <span class=\"n\">they</span> <span class=\"n\">may</span> <span class=\"n\">make</span> <span class=\"n\">unnecessary</span> <span class=\"n\">assumptions</span> <span class=\"k\">in</span> <span class=\"n\">proofs</span> <span class=\"n\">appear</span> <span class=\"n\">as</span> <span class=\"k\">if</span> <span class=\"n\">they</span> <span class=\"n\">are</span> <span class=\"n\">used.</span>  <span class=\"bp\">-/</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">Nat.gcd_b_zero_right</span> <span class=\"c\">/-</span><span class=\"cm\"> unnecessary have this : 0 % Nat.succ n✝ &lt; Nat.succ n✝ -/</span>\n</code></pre></div>\n<p>where <code>gcd_b_zero_right</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">gcd_b_zero_right</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">gcdB</span> <span class=\"n\">s</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">gcdB</span> <span class=\"n\">xgcd</span>\n  <span class=\"n\">induction</span> <span class=\"n\">s</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">rfl</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">xgcdAux</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>There is no <code>have</code> or <code>suffice</code>, so I don't really know what do to.</p>",
        "id": 316990729,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671554233
    },
    {
        "content": "<p>Ha ha, this is quite funny. I think the problem is here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Helper function for the extended GCD algorithm (`nat.xgcd`). -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">xgcdAux</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">r'</span><span class=\"o\">,</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">t'</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">r'</span><span class=\"o\">,</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">t'</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">r'</span><span class=\"o\">,</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">t'</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">r'</span> <span class=\"bp\">%</span> <span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">mod_lt</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">succ_pos</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">gt</span>\n    <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">r'</span> <span class=\"bp\">/</span> <span class=\"n\">succ</span> <span class=\"n\">k</span>\n    <span class=\"n\">xgcdAux</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">%</span> <span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s'</span> <span class=\"bp\">-</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t'</span> <span class=\"bp\">-</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>There's a <code>have</code> there, which is necessary in general, and is presumably embedded in the term. But sometimes when the definition is being used, in the application the <code>have</code> is not necessary so the linter complains :-)</p>",
        "id": 316999311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671556935
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EInt.2EGcd.20-.20NormNum/near/316999311\">said</a>:</p>\n<blockquote>\n<p>Ha ha, this is quite funny. I think the problem is here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Helper function for the extended GCD algorithm (`nat.xgcd`). -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">xgcdAux</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">r'</span><span class=\"o\">,</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">t'</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">r'</span><span class=\"o\">,</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">t'</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">r'</span><span class=\"o\">,</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">t'</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">r'</span> <span class=\"bp\">%</span> <span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">mod_lt</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">succ_pos</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">gt</span>\n    <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">r'</span> <span class=\"bp\">/</span> <span class=\"n\">succ</span> <span class=\"n\">k</span>\n    <span class=\"n\">xgcdAux</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">%</span> <span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s'</span> <span class=\"bp\">-</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t'</span> <span class=\"bp\">-</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>There's a <code>have</code> there, which is necessary in general, and is presumably embedded in the term. But sometimes when the definition is being used, in the application the <code>have</code> is not necessary so the linter complains :-)</p>\n</blockquote>\n<p><a href=\"#narrow/stream/287929-mathlib4/topic/data.2Enat.2Ebits/near/316991789\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/data.2Enat.2Ebits/near/316991789</a></p>",
        "id": 317000421,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671557274
    },
    {
        "content": "<p>In any case, how do we tell the linter that this is fine?</p>",
        "id": 317000586,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671557323
    },
    {
        "content": "<p>Well you can use the <code>nolint</code> attribute, but it might be worth running the example past the linter experts I guess?</p>",
        "id": 317001902,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671557715
    },
    {
        "content": "<p><a href=\"#narrow/stream/348111-std4/topic/spurious.20.60unusedHavesSuffices.60.20linter.20error.3F/near/317002149\">https://leanprover.zulipchat.com/#narrow/stream/348111-std4/topic/spurious.20.60unusedHavesSuffices.60.20linter.20error.3F/near/317002149</a></p>",
        "id": 317002180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671557801
    }
]