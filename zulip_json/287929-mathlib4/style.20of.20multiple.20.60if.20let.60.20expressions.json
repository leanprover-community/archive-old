[
    {
        "content": "<p>I want to use the following pattern:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">e1</span> <span class=\"k\">then</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">e2</span> <span class=\"n\">x</span> <span class=\"k\">then</span>\n    <span class=\"n\">r1</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">r2</span>\n<span class=\"k\">else</span>\n  <span class=\"n\">r2</span>\n</code></pre></div>\n<p>However, <code>r2</code> is a large term, so I don't want to write it twice. What is the preferred format to write this? The following is not great:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">e1</span> <span class=\"k\">then</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">e2</span> <span class=\"n\">x</span> <span class=\"k\">then</span>\n    <span class=\"n\">some</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">r1</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">none</span>\n<span class=\"k\">else</span>\n  <span class=\"n\">none</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getD</span> <span class=\"n\">r2</span>\n</code></pre></div>\n<p>Of course, it would be nice if we could write something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">e1</span>\n   <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">e2</span> <span class=\"n\">x</span> <span class=\"k\">then</span>\n  <span class=\"n\">r1</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"k\">else</span>\n  <span class=\"n\">r2</span>\n</code></pre></div>",
        "id": 312858118,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669732992
    },
    {
        "content": "<p>You can do this at least:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">e1</span> <span class=\"n\">e2</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">e1</span><span class=\"o\">,</span> <span class=\"n\">e2</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n    <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">none</span>\n</code></pre></div>",
        "id": 312859397,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669733357
    },
    {
        "content": "<p>Note that in my example <code>e2</code> is applied to <code>x</code>.</p>",
        "id": 312859552,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669733406
    },
    {
        "content": "<p>You can also do (heh)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">e1</span> <span class=\"k\">then</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">e2</span> <span class=\"n\">x</span> <span class=\"k\">then</span>\n      <span class=\"n\">return</span> <span class=\"n\">r1</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"n\">r2</span>\n</code></pre></div>",
        "id": 312860058,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669733548
    },
    {
        "content": "<p>I think it would be great if lean 4 had lean 3 style multiple lets (in general but also in if let)<br>\ne.g. in lean 3 we could do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>but last I checked this wasn't possible in lean 4?</p>",
        "id": 312860092,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1669733559
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I was just writing that one! It seems like a reasonable construct to me, if a little surprising if you don't know the pattern.)</p>",
        "id": 312860416,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669733651
    },
    {
        "content": "<p>If someone doesn't know the pattern, they should wonder about the highlighted <code>return</code> and hover over it!</p>",
        "id": 312860564,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669733699
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> That's just <code>let a := 1; let b := 2 * a; b</code>, <code>if let</code> is a bit of a different beast</p>",
        "id": 312860733,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669733739
    },
    {
        "content": "<p>That is a nice pattern <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>. I realize that the rest of the function I was editing would also be much nicer inside an <code>Id.run do</code>.</p>",
        "id": 312861106,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669733827
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> sure the simple let version of my request is just a simple macro over let, but I believe it would make sense within <code>if let</code> too for situations like this: A comma separated list of assignments, where the if only succeeds if all the patterns can be matched giving access to the new variables in the match and nothing in the else statement.</p>",
        "id": 312862471,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1669734167
    },
    {
        "content": "<p>I think of <code>Id.run</code> as \"go into imperative DSL mode\". Some things are just nicer to express with control flow operators, loops and (locally) mutable variables.</p>",
        "id": 312862558,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1669734189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> You might like <a href=\"https://github.com/leanprover/lean4/issues/1894\">https://github.com/leanprover/lean4/issues/1894</a>, which proposes something even more general</p>",
        "id": 312873532,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669737283
    }
]