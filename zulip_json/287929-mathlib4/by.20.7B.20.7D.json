[
    {
        "content": "<p>What's the equivalent of one-line <code>by { }</code> proofs?</p>",
        "id": 313714736,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670088153
    },
    {
        "content": "<p>just leave out the braces?</p>",
        "id": 313714793,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670088187
    },
    {
        "content": "<p><code>by X; Y &lt;;&gt; Z</code></p>",
        "id": 313714805,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670088197
    },
    {
        "content": "<p>And use <code>;</code></p>",
        "id": 313714813,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1670088201
    },
    {
        "content": "<p>Not a MWE but is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>supposed to work?</p>",
        "id": 313714937,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670088253
    },
    {
        "content": "<p>Seems syntactically valid.</p>",
        "id": 313715424,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1670088569
    },
    {
        "content": "<p>Fails in <a href=\"https://github.com/leanprover-community/mathlib4/pull/840\">mathlib4#840</a> but you're welcome to prove me wrong!</p>",
        "id": 313715702,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670088678
    },
    {
        "content": "<p>It was a different problem.</p>",
        "id": 313715735,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670088704
    },
    {
        "content": "<p>simpa has changed behaviour slightly, I've pushed a fix</p>",
        "id": 313715744,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670088712
    },
    {
        "content": "<p>Note <code>A; B</code> no longer means \"do B to all goals from A\"</p>",
        "id": 313715804,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670088740
    },
    {
        "content": "<p>for that you need <code>&lt;;&gt;</code></p>",
        "id": 313715806,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670088744
    },
    {
        "content": "<p>Then, the other change is that <code>simpa using h</code> will fail it if simplifies <code>h</code> to <code>False</code>. You have to change this just to <code>simp at h</code>.</p>",
        "id": 313715873,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670088784
    },
    {
        "content": "<p>Yeah, I thought so too, so I tried <code>; ... &lt;:&gt;</code>, but you did <code>&lt;;&gt; ... ;</code> instead?</p>",
        "id": 313715883,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670088788
    },
    {
        "content": "<p>Wait sorry, why does simplifying it to <code>False</code> make it fail?</p>",
        "id": 313715922,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670088822
    },
    {
        "content": "<p>In  your case, the <code>simpa using h</code> was doing something pretty weird: there were two goals open. It killed the first one during the <code>simp at h</code> stage, and then tried <code>exact h</code> on the second goal, but by then <code>h</code> wasn't in scope anymore (rather: there was an <code>h</code> in scope, but a different one)</p>",
        "id": 313716010,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670088849
    },
    {
        "content": "<p>Because if <code>simp at h</code> reduces <code>h</code> to <code>False</code> it will immediately close the goal.</p>",
        "id": 313716044,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670088873
    },
    {
        "content": "<p>and <code>simpa</code> is currently not smart enough to realise it shouldn't try assumption.</p>",
        "id": 313716076,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670088890
    },
    {
        "content": "<p>This should be fixed; someone needs to make a PR to <code>std</code>, where <code>simpa</code> now lives.</p>",
        "id": 313716113,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670088922
    },
    {
        "content": "<p>(The reason I knew something weird was happening with the goals was that the error message had a tombstone next to the h, indicating it wasn't the <code>h</code> I thought it was.)</p>",
        "id": 313716219,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670088984
    },
    {
        "content": "<p>That calls for more questions than it answers :^)</p>\n<ol>\n<li>Haven't we fixed the fact that <code>simpa</code> doesn't focus on one goal?</li>\n<li>Can't we use the same name for different hypotheses through goals anymore? I thought it was a great, if not hacky, feature, as that means you can run the same proof in parallel when doing a case bash.</li>\n</ol>",
        "id": 313716223,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670088987
    },
    {
        "content": "<p><del>Oh I guess that answers 1</del> actually no, we are talking about different things. But I still don't see why the <code>h</code> in the second goal was a different <code>h</code>. It was introduced with the same lambda.</p>",
        "id": 313716274,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670089033
    },
    {
        "content": "<p>sort of... :-) There are two different <code>h</code>s here. When you use <code>&lt;;&gt;</code> it correctly uses the correct <code>h</code> in each branch of the proof (see the fix I pushed). However when <code>simpa using h</code> did something wonky switching from one goal to another, Lean correctly detected that it was talking about the wrong <code>h</code>!</p>",
        "id": 313716457,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670089129
    },
    {
        "content": "<p>There's certainly a problem in <code>simpa</code>, but Lean 4 handled the bad instructions it received well.</p>",
        "id": 313716497,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670089158
    },
    {
        "content": "<p>Oh, I had some recent fixes to <code>simpa</code> but apparently they weren't pushed. Is there a MWE for the issue you folks are talking about so I can see if this issue has already been fixed?</p>",
        "id": 313754706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670119848
    },
    {
        "content": "<p>(It appears I can't even look at the original PR, since it was force-pushed away. Please don't do that to issues which have been permalinked to zulip.)</p>",
        "id": 313754833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670119972
    },
    {
        "content": "<p>Yes you can. I just force-pushed over Ruben's fix as I had a better fix in local, but the first commit still has the error mentioned here.</p>",
        "id": 313755079,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670120170
    },
    {
        "content": "<p>can you please MWE it?</p>",
        "id": 313755543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670120584
    },
    {
        "content": "<p>I don't even see <code>simpa</code> in the code</p>",
        "id": 313755673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670120736
    },
    {
        "content": "<p>Actually, reading Scott's description of the issue I'm pretty sure it's exactly what I was trying to fix, so I think I'll just leave it at that.</p>",
        "id": 313756178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670121217
    },
    {
        "content": "<p>Ah sorry, actually Scott answered <a href=\"https://github.com/leanprover-community/mathlib/pull/839\">#839</a> on this thread that was about <a href=\"https://github.com/leanprover-community/mathlib/pull/840\">#840</a>. <a href=\"https://github.com/leanprover-community/mathlib/pull/839\">#839</a> is where the failing <code>simpa</code> is.</p>",
        "id": 313790271,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670150225
    }
]