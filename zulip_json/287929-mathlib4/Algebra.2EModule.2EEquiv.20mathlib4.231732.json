[
    {
        "content": "<p>I have the issue that we can't infer <code>FunLike (M ≃ₛₗ[σ] M₂) M (fun _ =&gt; M₂)</code> anymore, which I think might either be because, as <code>#lint</code> says, there's something wrong with the <code>instance : SemilinearEquivClass (M ≃ₛₗ[σ] M₂) σ M M₂</code> or, as the trace says, type class inference is running into some really weird dead end:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">Module.EndCat</span>\n          <span class=\"o\">(</span><span class=\"n\">Module.EndCat</span>\n            <span class=\"o\">(</span><span class=\"n\">Module.EndCat</span>\n              <span class=\"o\">(</span><span class=\"n\">Module.EndCat</span>\n                <span class=\"o\">(</span><span class=\"n\">Module.EndCat</span>\n                  <span class=\"o\">(</span><span class=\"n\">Module.EndCat</span>\n                    <span class=\"o\">(</span><span class=\"n\">Module.EndCat</span>\n                      <span class=\"o\">(</span><span class=\"n\">Module.EndCat</span>\n                        <span class=\"o\">(</span><span class=\"n\">Module.EndCat</span> <span class=\"o\">(</span><span class=\"n\">Module.EndCat</span> <span class=\"o\">(</span><span class=\"n\">Module.EndCat</span> <span class=\"o\">(</span><span class=\"n\">Module.EndCat</span> <span class=\"o\">(</span><span class=\"n\">Module.EndCat</span> <span class=\"n\">ℕ</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"n\">M₂</span><span class=\"o\">)</span>\n                        <span class=\"n\">M₂</span><span class=\"o\">)</span>\n                      <span class=\"n\">M₂</span><span class=\"o\">)</span>\n                    <span class=\"n\">M₂</span><span class=\"o\">)</span>\n                  <span class=\"n\">M₂</span><span class=\"o\">)</span>\n                <span class=\"n\">M₂</span><span class=\"o\">)</span>\n              <span class=\"n\">M₂</span><span class=\"o\">)</span>\n            <span class=\"n\">M₂</span><span class=\"o\">)</span>\n          <span class=\"n\">M₂</span><span class=\"o\">)</span>\n<span class=\"bp\">````</span>\n</code></pre></div>",
        "id": 322979337,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1674468304
    },
    {
        "content": "<p>Looks like <code>@LinearMap.applyModule</code> shouldn't be an instance, then?</p>",
        "id": 322984948,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1674469786
    },
    {
        "content": "<p>I suppose most instances on <code>Module.EndCat</code> are going to give issues since it's merely an <code>abbrev</code>. So probably we'll have to make <code>EndCat</code> <code>@[irreducible]</code>?</p>",
        "id": 322988084,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1674470721
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.applyModule#doc\">docs4#LinearMap.applyModule</a> doesn't need to be an instance on <code>EndCat</code> if that's causing problems'; the instance would have been fine in Lean 3 on <code>M →ₗ[R] M</code> too</p>",
        "id": 322989787,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674471285
    },
    {
        "content": "<p>also <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.EndCat#doc\">docs4#Module.EndCat</a> is a porting error, and should be called <code>Module.End</code> to match <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Monoid.End#doc\">docs4#Monoid.End</a> (<a href=\"https://github.com/leanprover-community/mathlib4/pull/1778\">https://github.com/leanprover-community/mathlib4/pull/1778</a>)</p>",
        "id": 322990688,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674471592
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Algebra.2EModule.2EEquiv.20mathlib4.231732/near/322989787\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.applyModule#doc\">docs4#LinearMap.applyModule</a> doesn't need to be an instance on <code>EndCat</code> if that's causing problems'; the instance would have been fine in Lean 3 on <code>M →ₗ[R] M</code> too</p>\n</blockquote>\n<p>That's not it, changing it to <code>M →ₗ[R] M</code> gives the same chain</p>",
        "id": 322999961,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1674474513
    },
    {
        "content": "<p>It's good to know that the <code>abbrev</code> isn't the cause. This instance wasn't a problem in Lean 3...</p>",
        "id": 323000124,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674474581
    },
    {
        "content": "<p>Maybe it's the other problem I described above and it only runs into the dead end because it does not find the correct instance before.</p>",
        "id": 323001933,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1674475154
    },
    {
        "content": "<p>So why is <code>instance : SemilinearEquivClass (M ≃ₛₗ[σ] M₂) σ M</code>, according to <code>#lint</code>, causing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">SemilinearEquivClass.instSemilinearMapClass</span> <span class=\"c\">/-</span><span class=\"cm\"> generates subgoals with metavariables: argument 6 inst✝⁷ : Semiring</span>\n<span class=\"cm\">  ?R, argument 7 inst✝⁶ : Semiring</span>\n<span class=\"cm\">  ?S, argument 8 inst✝⁵ : AddCommMonoid</span>\n<span class=\"cm\">  ?M, argument 9 inst✝⁴ : AddCommMonoid ?M₂, argument 14 inst✝¹ : RingHomInvPair ?σ ?σ' -/</span>\n</code></pre></div>",
        "id": 323002118,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1674475203
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110789\">Jakob von Raumer</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Algebra.2EModule.2EEquiv.20mathlib4.231732/near/323001933\">said</a>:</p>\n<blockquote>\n<p>Maybe it's the other problem I described above and it only runs into the dead end because it does not find the correct instance before.</p>\n</blockquote>\n<p>Oh wait, that can't really be the case becaus it successfully infers <code>EmbeddingLike (M ≃ₛₗ[σ] M₂) M M₂</code></p>",
        "id": 323002516,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1674475323
    },
    {
        "content": "<p>I think I solved those issues by adding a <code>FunLike</code> instance which hopefully is not a doublet</p>",
        "id": 323025564,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1674482178
    },
    {
        "content": "<p>What's the new instance?</p>",
        "id": 323033888,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674484152
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">FunLike</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">≃ₛₗ</span><span class=\"o\">[</span><span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨(</span><span class=\"bp\">·.</span><span class=\"n\">toFun</span><span class=\"o\">),</span>\n  <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">toLinearMap_injective</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">FunLike.coe_injective</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span> <span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 323039207,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1674485450
    },
    {
        "content": "<p>That's a bad instance, because it unfolds to the wrong thing</p>",
        "id": 323045624,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674486919
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">FunLike</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">≃ₛₗ</span><span class=\"o\">[</span><span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">FunLike.coe</span><span class=\"o\">,</span>\n  <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">toLinearMap_injective</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">FunLike.coe_injective</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span> <span class=\"o\">⟩</span>\n</code></pre></div>\n<p>would be ok</p>",
        "id": 323045712,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674486937
    },
    {
        "content": "<p>Your suggestion only makes sense if there's already a <code>FunLike</code> instance.</p>",
        "id": 323058017,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1674490000
    },
    {
        "content": "<p>There might or might not be one, but adding one definitely solves type inferernce running into the <span aria-label=\"end\" class=\"emoji emoji-1f51a\" role=\"img\" title=\"end\">:end:</span> <span aria-label=\"cat\" class=\"emoji emoji-1f408\" role=\"img\" title=\"cat\">:cat:</span>  problem</p>",
        "id": 323058876,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1674490205
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110789\">Jakob von Raumer</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Algebra.2EModule.2EEquiv.20mathlib4.231732/near/323058017\">said</a>:</p>\n<blockquote>\n<p>Your suggestion only makes sense if there's already a <code>FunLike</code> instance.</p>\n</blockquote>\n<p>There is, via <code>SemilinearEquivClass.instSemilinearMapClass</code></p>",
        "id": 323059172,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674490284
    },
    {
        "content": "<p>Perhaps providing the <code>SemilinearMapClass</code> instance directly helps?</p>",
        "id": 323059204,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674490294
    },
    {
        "content": "<p>That doesn't have the problem of unfolding badly like your approach does</p>",
        "id": 323059266,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674490313
    },
    {
        "content": "<p>I still don't really get whether the <code>EndCat</code> dead end and the <code>FunLike</code> instance not being found are two separate issues or just one</p>",
        "id": 323059940,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1674490487
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Algebra.2EModule.2EEquiv.20mathlib4.231732/near/323059204\">said</a>:</p>\n<blockquote>\n<p>Perhaps providing the <code>SemilinearMapClass</code> instance directly helps?</p>\n</blockquote>\n<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">FunLike</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">≃ₛₗ</span><span class=\"o\">[</span><span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">EmbeddingLike.toFunLike</span>\n</code></pre></div>",
        "id": 323103292,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1674502887
    },
    {
        "content": "<p>That looks safe to me</p>",
        "id": 323123664,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674510245
    },
    {
        "content": "<p>Still bad that it's needed at all to not descent into the <code>EndCat</code> stuff</p>",
        "id": 323228545,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1674560485
    },
    {
        "content": "<p>We had this type of shortcut instance in Lean3, implemented in the style you suggested earlier</p>",
        "id": 323231820,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674561488
    },
    {
        "content": "<p>For now we've just removed all those shortcuts because they mean the wrong thing with the new <code>coe</code></p>",
        "id": 323231870,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674561505
    },
    {
        "content": "<p>But maybe we should instead be replacing them with shortcuts in the style of your most recent suggestion</p>",
        "id": 323231921,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674561520
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110789\">@Jakob von Raumer</span> Note that <code>EndCat</code> was an oopsie by mathport. It should just be called <code>End</code>. This has been fixed in <code>master</code>.</p>",
        "id": 323232311,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674561625
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.End#doc\">docs4#Module.End</a>)</p>",
        "id": 323232561,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674561698
    },
    {
        "content": "<p>But right now, in Lean 3 we don't require any short cut, or am I missing something?</p>",
        "id": 323232786,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1674561754
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Thanks, just using it as a catchy name for the issue described at the start of the thread here <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 323232893,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1674561786
    },
    {
        "content": "<p>When <code>trace.Meta.synthInstance</code> says <code>apply X to Y</code>, then <code>Y</code> must have been a subgoal before, right? Because I don't know why it attempts to solve <code>Module (Module.EndCat ?m.64808 M₂) M₂</code> in the first place, that is obviously a bad subgoal to have with that metavar.</p>",
        "id": 323284079,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1674574644
    },
    {
        "content": "<p>Okay, the error is definitely not in <code>Algebra.Module.Equiv</code> itself: Inferring <code>FunLike (R →+* S) R fun a =&gt; S</code> runs into the same <span aria-label=\"cat\" class=\"emoji emoji-1f408\" role=\"img\" title=\"cat\">:cat:</span> issue</p>",
        "id": 323313444,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1674582072
    },
    {
        "content": "<p>Does the error message actually mention <code>Cat</code>? Can you give a mwe?</p>",
        "id": 323313915,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674582209
    },
    {
        "content": "<p>Took me a while to actually get the message to display, since it's too big to handle, but it does not mention the cat, instead it gets worked up in this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.addMonoid</span> <span class=\"n\">to</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">ℕ</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">ℕ</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">ℕ</span> <span class=\"n\">of</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">ℕ</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">ℕ</span><span class=\"bp\">ᵒᵈ</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">ℕ</span><span class=\"bp\">ᵒᵈ</span> <span class=\"n\">of</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">ℕ</span><span class=\"bp\">ᵒᵈᵒᵈ</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">ℕ</span><span class=\"bp\">ᵒᵈᵒᵈ</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">ℕ</span><span class=\"bp\">ᵒᵈᵒᵈ</span> <span class=\"n\">of</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">ℕ</span><span class=\"bp\">ᵒᵈᵒᵈᵒᵈ</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">ℕ</span><span class=\"bp\">ᵒᵈᵒᵈᵒᵈ</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">ℕ</span><span class=\"bp\">ᵒᵈᵒᵈᵒᵈ</span> <span class=\"n\">of</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">ℕ</span><span class=\"bp\">ᵒᵈᵒᵈᵒᵈᵒᵈ</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">ℕ</span><span class=\"bp\">ᵒᵈᵒᵈᵒᵈᵒᵈ</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">ℕ</span><span class=\"bp\">ᵒᵈᵒᵈᵒᵈᵒᵈ</span> <span class=\"n\">of</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">ℕ</span><span class=\"bp\">ᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈ</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">ℕ</span><span class=\"bp\">ᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈ</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">ℕ</span><span class=\"bp\">ᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈ</span> <span class=\"n\">of</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">ℕ</span><span class=\"bp\">ᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈ</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">ℕ</span><span class=\"bp\">ᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈ</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">ℕ</span><span class=\"bp\">ᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈ</span> <span class=\"n\">of</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">ℕ</span><span class=\"bp\">ᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈ</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">ℕ</span><span class=\"bp\">ᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈ</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">ℕ</span><span class=\"bp\">ᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈ</span> <span class=\"n\">of</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">ℕ</span><span class=\"bp\">ᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈ</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">ℕ</span><span class=\"bp\">ᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈ</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">ℕ</span><span class=\"bp\">ᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈ</span> <span class=\"n\">of</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">ℕ</span><span class=\"bp\">ᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈ</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">ℕ</span><span class=\"bp\">ᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈ</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">ℕ</span><span class=\"bp\">ᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈ</span> <span class=\"n\">of</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">ℕ</span><span class=\"bp\">ᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈᵒᵈ</span> <span class=\"bp\">▶</span>\n</code></pre></div>",
        "id": 323315664,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1674582682
    },
    {
        "content": "<p>Aha, all is good at the top of the file, but this instance seems to break it already:</p>",
        "id": 323316355,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1674582845
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">RingHomInvPair</span> <span class=\"n\">σ</span> <span class=\"n\">σ'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">RingHomInvPair</span> <span class=\"n\">σ'</span> <span class=\"n\">σ</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">SemilinearEquivClass</span> <span class=\"n\">F</span> <span class=\"n\">σ</span> <span class=\"n\">M</span> <span class=\"n\">M₂</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SemilinearMapClass</span> <span class=\"n\">F</span> <span class=\"n\">σ</span> <span class=\"n\">M</span> <span class=\"n\">M₂</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n    <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">s.coe</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M₂</span><span class=\"o\">)</span>\n    <span class=\"n\">coe_injective'</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">FunLike.coe_injective</span> <span class=\"n\">F</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 323316388,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1674582854
    },
    {
        "content": "<p>I thin I'm close to getting what's wrong</p>",
        "id": 323317088,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1674583047
    },
    {
        "content": "<p>Nah I don't</p>",
        "id": 323318279,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1674583354
    },
    {
        "content": "<p>But I guess it's just that the linter's warning that the instance is dangerious is on point...</p>",
        "id": 323319640,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1674583734
    },
    {
        "content": "<p><code>-- </code>σ'<code> becomes a metavariable, but it's OK since it's an outparam</code> the comment above it says</p>",
        "id": 323326629,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1674585590
    }
]