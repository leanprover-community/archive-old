[
    {
        "content": "<p>I think I've gotten the PR for this file (<a href=\"https://github.com/leanprover-community/mathlib4/pull/912\">mathlib4#912</a>) to a best place I can get it, but I think the remaining issues that prevent it from compiling are a little over my head:</p>\n<p>1) At the <code>to_additive</code> declaration for the <code>DivInvMonoid</code> instance, Lean has a pretty spooky  error:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>(kernel) invalid projection\n  inst✝.1\n</code></pre></div>\n<p>This leads to the next few <code>to_additive</code> instances failing as well, with other unknown constant errors.</p>\n<p>2) In the <code>AddHom.mulOp</code>, <code>AddMonoidHom.mulOp</code>, and <code>AddEquiv.mulOp</code> the proofs of <code>left_inv</code> and <code>right_inv</code> complain that there are no relevant <code>ext</code> lemmas <a href=\"https://github.com/leanprover-community/mathlib4/blob/7b319c63d941e3aaae79295bf9ab65977447735b/Mathlib/Algebra/Group/Opposite.lean#L425\">here</a>,  <a href=\"https://github.com/leanprover-community/mathlib4/blob/7b319c63d941e3aaae79295bf9ab65977447735b/Mathlib/Algebra/Group/Opposite.lean#L473\">here</a>, and <a href=\"https://github.com/leanprover-community/mathlib4/blob/7b319c63d941e3aaae79295bf9ab65977447735b/Mathlib/Algebra/Group/Opposite.lean#L506\">here</a>... My hypothesis is that this might be because of  some issue between the interaction of the <code>to_additive</code> and <code>ext</code>attributes.</p>\n<p>In Lean 3, <code>trace.ext</code> says that it's using <code>add_hom.ext</code>, which is a <code>to_additive</code> version of <code>mul_hom.ext</code> which exists, and is tagged with <code>ext</code> in Lean 4 <a href=\"https://github.com/leanprover-community/mathlib4/blob/a461e549ebaac0c9b6a83969bcaa982bff6adafc/Mathlib/Algebra/Hom/Group.lean#L601\">here</a>.  In fact I can get the proofs to work by applying the relevant ext lemmas by hand, for example </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n  <span class=\"n\">left_inv</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">AddMonoidHom.ext</span>\n    <span class=\"n\">intro</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">MulOpposite.op</span><span class=\"o\">,</span> <span class=\"n\">MulOpposite.unop</span><span class=\"o\">]</span>\n    <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>(though it's kind of interesting that just <code>apply &lt;ext lemma&gt; ; simp</code> doesn't work by itself, unlike the original proofs)</p>\n<p>Beyond things that are preventing the file from compiling, there were a few  recurring mathport issues/changes in tactic behavior that I've noticed, and I wanted to touch on them as well:</p>\n<p>1) Even though there's a<br>\n<code>#align function.injective.add_semigroup Function.Injective.addSemigroup</code><br>\nmathport still translated <code>unop_injective.add_semigroup</code> to <code>unop_injective.AddSemiGroup</code>. Not sure if I should expect anything else, or if some <code>#align</code>s aren't triggering?</p>\n<p>2) Mathport had a lot of issues with instance names, so I had to do a lot of <code>MulOpposite.semigroup</code> -&gt; <code>instSemigroupMulOpposite</code> translations by hand. Is there a way of aligning instance declarations to make this easier in the future? (Or is it bad practice to even refer to an instance by name? It seems wrong)</p>\n<p>3) There were a few places in the Lean 3 file which were placed in the root namespace explicitly  (<code>_root_.semiconj_by_op</code> for <a href=\"https://github.com/leanprover-community/mathlib4/blob/6939cd47b65f80a8fe0a3af42889cbd061532044/Mathlib/Algebra/Group/Opposite.lean#L186\">example</a>). But mathport lost the <code>_root_</code> in translation, and placed the lemmas in the wrong namespace as a result. </p>\n<p>4) There were a few situations where the Lean 3 proof could finish with a <code>rw</code> or a <code>simp</code>, but I had to add in an extra <code>rfl</code> at the end. I think I've seen this brought up in other threads, but I wanted to make sure I didn't do anything wrong.</p>\n<p>Finally, a small divergence between Lean 3 and Lean 4's way of dealing with namespaces:</p>\n<p>MWE</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo.num</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar.num</span> <span class=\"o\">:=</span> <span class=\"mi\">6</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">bar</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo.add</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">num</span>\n</code></pre></div>\n<p>In Lean 4 the <code>num</code> in <code>foo.add</code> gets resolved to <code>foo.num</code>, but in Lean 3  (in the equivalent file) the <code>num</code> in <code>foo.add</code>gets resolved to <code>bar.num</code>. </p>\n<p>This caused a bunch of places where I had to explicitly add in the fully qualified name of a symbol (<code>MulOpposite.op</code> and <code>MulOpposite.unop</code>) because there was already an <code>op</code> and <code>unop</code> in the namespace (<code>MulHom.op</code> for example).</p>\n<p>Sorry for the long message, but a lot of stuff came up in this file and I wanted to get feedback about it!</p>",
        "id": 314918128,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1670599311
    },
    {
        "content": "<p>2) It seems that <code>MulOpposite.semigroup</code> is the desired instance name, so that seems ok, or not? See <a href=\"#narrow/stream/287929-mathlib4/topic/Relying.20on.20instance.20names\">Zulip discussion</a></p>",
        "id": 314919470,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1670599597
    },
    {
        "content": "<p>1) I haven't fully tracked down the <code>to_additive</code> issue, but it is caused by using the default field for <code>div</code> in this function. <br>\nAdding <code>div := fun x y =&gt; x * y⁻¹</code> will make the error go away.<br>\nI expect that the elaborator for these default fields is creating a term that is non-standard in some way (that maybe we have to special-case in <code>to_additive</code>).</p>",
        "id": 314947416,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1670607987
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/leanprover-community/mathlib/pull/939\">#939</a> to track the issue</p>",
        "id": 314947935,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1670608124
    },
    {
        "content": "<p>There are <code>to_additive</code> problems in the Port of <code>Algebra.Order.LatticeGroup</code>. Are these related?</p>",
        "id": 314949513,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1670608594
    },
    {
        "content": "<p>link to PR/branch/file?</p>",
        "id": 314949809,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1670608683
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/934\">mathlib4#934</a></p>",
        "id": 314950556,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1670608912
    },
    {
        "content": "<p>Looking at the error on Github, that looks unrelated. It looks like a missing <code>@[to_additive]</code> attribute, or a bug in the implementation of how to_additive deals with internally generated lemmas.</p>",
        "id": 314951009,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1670609034
    },
    {
        "content": "<p>There indeed seems to be a auxiliary generated lemma <code>Mathlib.Algebra.Order.Group.Defs._auxLemma.5</code> that is not additivized. <br>\nInterestingly, this declaration does <em>not</em> exist at the bottom of the file <code>Algebra.Order.Group.Defs</code>, despite what the name suggests...<br>\nYou can check this yourself using</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span>\n<span class=\"kd\">run_cmd</span> <span class=\"n\">liftCoreM</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">let</span> <span class=\"n\">nm</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">mkNum</span> <span class=\"bp\">`</span><span class=\"n\">Mathlib.Algebra.Order.Group.Defs._auxLemma</span> <span class=\"mi\">5</span>\n  <span class=\"k\">let</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">env.find</span><span class=\"bp\">?</span> <span class=\"n\">nm</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{d.isSome}\"</span>\n</code></pre></div>\n<p>(this maybe needs <code>import Mathlib.Tactic.RunCmd</code>)<br>\nI'm wondering if this is because when we apply <code>to_additive</code> to a declaration where the additive version already exists.<br>\nI don't have any time anymore today to investigate further. I'll try again next week (or maybe this weekend).</p>",
        "id": 314953520,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1670609811
    },
    {
        "content": "<p>This might have to do with the fact that equation lemmas are no longer generated eagerly, which means that they can end up getting created in downstream files when <code>simp</code> wants to use the definition</p>",
        "id": 314957180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670610948
    },
    {
        "content": "<p>I recall discussing this a while ago and I think we need to implement and enable an option to autogenerate definitional equations eagerly in all of mathlib</p>",
        "id": 314957350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670611000
    },
    {
        "content": "<p>but this is an interesting issue caused by it, it was supposed to be only a performance concern</p>",
        "id": 314957531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670611059
    },
    {
        "content": "<p>I can add the <code>div := fun x y =&gt; x * y⁻¹</code> to fix the <code>to_additive</code> issue and add a porting note for now. </p>\n<p>Any thoughts on the other observations? </p>\n<ul>\n<li>Issues with the interaction between <code>ext</code> and <code>to_additive</code></li>\n<li>aligning instance names</li>\n<li>Divergence in behavior between Lean 3 and Lean 4 namespaces</li>\n</ul>\n<p>And then mathport issues</p>\n<ul>\n<li>Aligning instance names</li>\n<li>Dropping <code>_root_</code></li>\n</ul>\n<p>Sorry the original message was so long, I just didn't want to make a new stream for each issue I encountered in the file.</p>",
        "id": 315140198,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1670716814
    },
    {
        "content": "<p>The divergence in behaviour between Lean 3 and Lean 4 namespaces is well-known and intentional. I opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/950\">mathlib4#950</a> to track the <code>ext</code> v <code>to_additive</code> issue.</p>",
        "id": 315204065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670764012
    },
    {
        "content": "<p>Issue 1 is fixed in <a href=\"https://github.com/leanprover-community/mathlib4/pull/952\">mathlib4#952</a></p>",
        "id": 315226972,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1670775139
    },
    {
        "content": "<p>I investigated the issue in <code>LatticeGroup</code>.<br>\nWhenever you tag an <code>iff</code> with <code>@[simp]</code>, an auxiliary declaration is added to the environment that is the same lemma but with <code>=</code> instead of <code>iff</code>. This auxiliary declaration is used by <code>simp</code> to rewrite.<br>\nSo if you tag something with <code>@[simp, to_additive]</code> we do get both of these auxiliary declarations, but they are not related to each other by the <code>to_additive</code> dictionary (so we don't translate the multiplicative one to the additive one).<br>\nThe interface for <code>simp</code> (in the form of <code>addSimpTheorem</code>) is not giving too much information about the simp lemmas it added, but I'll try to find a hacky fix.</p>",
        "id": 316069465,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1671118289
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Algebra.2EGroup.2EOpposite/near/314957180\">said</a>:</p>\n<blockquote>\n<p>This might have to do with the fact that equation lemmas are no longer generated eagerly, which means that they can end up getting created in downstream files when <code>simp</code> wants to use the definition</p>\n</blockquote>\n<p>The implementation of <code>@[to_additive]</code> does generate the equation lemmas for everything involved with <code>@[to_additive]</code> eagerly, by running</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">srcEqns</span><span class=\"bp\">?</span> <span class=\"bp\">←</span> <span class=\"n\">MetaM.run'</span> <span class=\"o\">(</span><span class=\"n\">getEqnsFor</span><span class=\"bp\">?</span> <span class=\"n\">src</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">tgtEqns</span><span class=\"bp\">?</span> <span class=\"bp\">←</span> <span class=\"n\">MetaM.run'</span> <span class=\"o\">(</span><span class=\"n\">getEqnsFor</span><span class=\"bp\">?</span> <span class=\"n\">tgt</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and then translating from the former to the latter.</p>",
        "id": 316069800,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1671118365
    },
    {
        "content": "<p>The best solution I can find is to replace <code>@[simp, to_additive]</code> by <code>@[to_additive (attr := simp)]</code> from now on. If we do that, we can go a little bit into the internals of the <code>simp</code> attribute to see what auxiliary <code>simp</code> lemmas are generated for the multiplicative and additive versions of the lemmas, and insert a translation between them.</p>\n<p>This has an additional advantage if we do the same for all other attributes so that we also write e.g. <code>@[to_additive (attr := ext)]</code>. Then we don't have to copy attributes from the multiplicative version to the additive version anymore (the hard part of that is figuring out which attributes were given to the multiplicative version). </p>\n<p>Maybe it's even possible to use the attribute parser to parse the arguments of other attributes, but that might be tricky.</p>",
        "id": 316083253,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1671121652
    }
]