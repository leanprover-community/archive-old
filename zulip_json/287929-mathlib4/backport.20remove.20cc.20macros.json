[
    {
        "content": "<p>Just testing the waters in advance of doing the work: What do people think about removing the <code>cc_proof</code>, <code>ac_app</code> and <code>perm_ac</code> macros from lean 3? These macros are constructed by the <code>cc</code> and <code>ac_refl</code> tactics as a kind of \"delayed proof\", which can be expanded by calling the <code>expand()</code> function; I believe <code>#print</code> and the lean export both do this. Since this mechanism is reserved for lean 3 builtin tactics, it is rarely used, and most other tactics that could in principle benefit from it like <code>norm_num</code> and <code>ring</code> instead just construct the whole proof when the tactic is called, rather than delaying to proof export time.</p>",
        "id": 250855761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630019847
    },
    {
        "content": "<p>Sounds good to me.</p>",
        "id": 250860697,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1630023737
    },
    {
        "content": "<p>I'm not sure how complicated this is, but if it doesn't require too much hacking in C++ you could delegate it out, too. (e.g. I could try.)</p>",
        "id": 250860777,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1630023828
    },
    {
        "content": "<p>My impression, without having looked into it much, is that we should basically do the equivalent of calling <code>expand()</code> on the macro when we are about to emit the macro call</p>",
        "id": 250861243,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630024217
    },
    {
        "content": "<p>so it should just be some shuffling around of function calls</p>",
        "id": 250861258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630024236
    },
    {
        "content": "<p>Expanding the macros seems 100% ok to me.  The more interesting issue is what we do about <code>by cc</code> proofs in the port.</p>",
        "id": 250896722,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1630051105
    },
    {
        "content": "<p>I would like us to double down on more and more advanced tactics in lean 4, so certainly the port is going to optimistically translate <code>cc</code> to <code>cc</code></p>",
        "id": 250897909,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630051812
    },
    {
        "content": "<p>I'm hoping that we can also get things like <code>super</code>, <code>auto</code>, <code>cbv</code> and tactics from isabelle like <code>approximation</code> and <code>real_asymp</code></p>",
        "id": 250897973,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630051861
    },
    {
        "content": "<p>I'm not completely sure, but I believe the cc tactic in Lean 3 already expands the macro.</p>",
        "id": 250898189,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1630051996
    },
    {
        "content": "<p>The only things we should be migrating away from are tactics that are going to need to be rewritten in a different way in order to address issues in the original implementation; <code>omega</code> and <code>finish</code> come to mind</p>",
        "id": 250898197,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630052002
    },
    {
        "content": "<p>but I would like us to have something that fits in roughly the same space in lean 4</p>",
        "id": 250898231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630052025
    },
    {
        "content": "<p>afair, most <code>omega</code> uses got removed for now, so porting <code>omega</code> can be done later</p>",
        "id": 250899548,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1630052839
    },
    {
        "content": "<p>I guess <code>finish</code> proofs are more common but we could very well get rid of them quickly.</p>",
        "id": 250905967,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1630056694
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/backport.20remove.20cc.20macros/near/250897973\">said</a>:</p>\n<blockquote>\n<p>I'm hoping that we can also get things like <code>super</code>, <code>auto</code>, <code>cbv</code> and tactics from isabelle like <code>approximation</code> and <code>real_asymp</code></p>\n</blockquote>\n<p>Can you expand on \"we can get\"? Do you mean you intend to work on them? Or do you claim someone should do it?</p>",
        "id": 250906079,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1630056747
    },
    {
        "content": "<p>For me personally, it's a thing I would like to work on at some point but it's not a particularly high / short term priority. I would say it's just a few extra tactics on the list of ~100 tactics we need to write in lean 4</p>",
        "id": 250941433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630075226
    },
    {
        "content": "<p>In fact, we don't use <code>omega</code> at all in mathlib now. I'm even tempted to drop it from mathlib in preparation for the port. (I realise the whole <code>tactic</code> directory isn't being automatically ported, so it's not actually \"in the way\".)</p>",
        "id": 250941900,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1630075440
    },
    {
        "content": "<p>That seems unnecessarily hostile to projects that depend on mathlib</p>",
        "id": 250943969,
        "sender_full_name": "Reid Barton",
        "timestamp": 1630076187
    }
]