[
    {
        "content": "<p>Probably many rough edges still, but it seems to be working. The release at <a href=\"https://github.com/leanprover/mathport/releases/tag/v0.0.0.0\">https://github.com/leanprover/mathport/releases/tag/v0.0.0.0</a> now includes \"fake\" lake packages for <code>Lean3</code> and <code>Mathbin</code>. Note: I changed the name from <code>Mathlib</code> to <code>Mathbin</code> to avoid confusion with the existing mathlib4 package. Unless I left a stray reference to my filesystem somewhere by accident, the following should work:</p>\n<ul>\n<li>download the release</li>\n<li>create a new directory <code>TestMathbin</code> with:</li>\n</ul>\n<ol>\n<li><code>package.lean</code></li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake.Package</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">System</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">package</span> <span class=\"o\">:</span> <span class=\"n\">Lake.PackageConfig</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s2\">\"TestMathbin\"</span>\n  <span class=\"n\">version</span> <span class=\"o\">:=</span> <span class=\"s2\">\"0.1\"</span>\n  <span class=\"n\">dependencies</span> <span class=\"o\">:=</span> <span class=\"o\">[</span>\n    <span class=\"o\">{</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Mathbin\"</span><span class=\"o\">,</span> <span class=\"n\">src</span> <span class=\"o\">:=</span> <span class=\"n\">Lake.Source.path</span> <span class=\"o\">(</span><span class=\"n\">FilePath.mk</span> <span class=\"s2\">\"&lt;path-to-Lib4&gt;/Mathbin\"</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n  <span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<ol start=\"2\">\n<li><code>TestMathbin.lean</code> with (say) something like:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathbin</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Semiring</span>\n<span class=\"bp\">#</span><span class=\"n\">lookup3</span> <span class=\"n\">semiring</span>\n<span class=\"k\">#check</span> <span class=\"n\">Semiring_'</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n</code></pre></div>\n<ol start=\"3\">\n<li><code>lean-toolchain</code> with <code>leanprover/lean4:nightly-2021-09-24</code></li>\n</ol>\n<ul>\n<li><code>lake build</code> should successfully run and print out a few things</li>\n<li>It should also show the LEAN_PATH it used, which can then be used to have the right emacs/vscode setup. For now, I suggest putting <code>export MATHBIN_PATH=&lt;that path&gt;</code> into <code>~/.bashrc</code> and then e.g. <code>LEAN_PATH=$MATHBIN_PATH emacs . &amp;</code></li>\n</ul>\n<p>The main <em>known</em> rough edge is that we aren't getting errors when Mathport declares new syntax that shadows syntax in Mathlib4. So, some tactics might work when importing <code>Mathlib</code> alone but fail when <code>Mathbin</code> is imported as well. The solution is just to manually remove the syntax declaration from Mathport (e.g. from <a href=\"https://github.com/leanprover/mathport/blob/master/Mathport/Prelude/Syntax.lean#L144\">https://github.com/leanprover/mathport/blob/master/Mathport/Prelude/Syntax.lean#L144</a>).</p>\n<p>One other rough edge: due to new name clashes introduced by a weird idiosyncracy of the import graph, I could no longer just add <code>'</code> at the end of a name to avoid clashes. So, for now I add the more cumbersome <code>_'</code> as in <code>Semiring_'</code> above.</p>",
        "id": 255109389,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632772237
    },
    {
        "content": "<p>Oh and there are many rough edges arises from the old-vs-new structure clashes. For example, there is no instance yet for <code>Semiring_'</code> implying <code>Semiring</code>.</p>",
        "id": 255109800,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632772422
    },
    {
        "content": "<p>(in the process of fixing a few other loose ends...)</p>",
        "id": 255113772,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632774064
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"230999\">@Daniel Selsam</span> You may want to mention which revision of Lake you are using. Especially since you are neither using the latest stable release (i.e. <code>v2.1.0</code>) nor <code>master</code>.</p>",
        "id": 255116752,
        "sender_full_name": "Mac",
        "timestamp": 1632775409
    },
    {
        "content": "<p>Thanks. I see, I hadn't noticed how active lake development has been recently. I am currently using the arbitrary 67470479deaf9f3abe6777c1fb973d7cdbd94182. I will upgrade to v2.1.0 soon (would need to re-run the pipeline to test it).</p>",
        "id": 255117177,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632775578
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"230999\">@Daniel Selsam</span> you are actually using a commit <strong><em>after</em></strong> v2.1.0 (glob support came afterwards), so the only option for upgrading currently is <code>master</code>.</p>",
        "id": 255117513,
        "sender_full_name": "Mac",
        "timestamp": 1632775717
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"230999\">@Daniel Selsam</span> what is that idiosyncrasy of the import graph? Can we just fix it in mathlib?</p>",
        "id": 255150943,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632795560
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mathport.20depending.20on.20mathlib/near/255150943\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"230999\">Daniel Selsam</span> what is that idiosyncrasy of the import graph? Can we just fix it in mathlib?</p>\n</blockquote>\n<p>If I recall, the issue I hit was related to <code>mul_right_cancel</code>, but there might be more that will only be exposed after fixing that one. I can re-run without the <code>_'</code> change but my guess from grepping is that one of these doesn't import an upstream one:</p>\n<p>src/algebra/group/defs.lean:164:lemma mul_right_cancel<br>\nsrc/algebra/group_with_zero/defs.lean:88:lemma mul_right_cancel' <br>\nsrc/algebra/ordered_monoid_lemmas.lean:373:lemma mul_right_cancel''</p>\n<p>We can also fix the issue by having a special case in <code>mathport</code> that only uses <code>_'</code> for names in a list.</p>",
        "id": 255151477,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632796076
    },
    {
        "content": "<p>Are you assuming that adding a <code>'</code> will make it not collide? Mathlib uses names involving <code>'</code>, so you should instead recursively add <code>'</code> until it is not colliding</p>",
        "id": 255151587,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632796181
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mathport.20depending.20on.20mathlib/near/255151587\">said</a>:</p>\n<blockquote>\n<p>Are you assuming that adding a <code>'</code> will make it not collide? Mathlib uses names involving <code>'</code>, so you should instead recursively add <code>'</code> until it is not colliding</p>\n</blockquote>\n<p>I was recursively adding <code>'</code>. The problem is that <code>foo</code> might translate to <code>Foo'</code>, but a <code>foo'</code> in mathlib that doesn't import the original <code>foo</code> might translate to <code>Foo'</code> as well. Basically, the recursive <code>'</code>-adding is only relative to the current environment when the declaration is being processed.</p>",
        "id": 255151712,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632796263
    },
    {
        "content": "<p>can we give a local name override?</p>",
        "id": 255151805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632796333
    },
    {
        "content": "<p>Alternatively, can we lint for this in mathlib? Make sure that wherever <code>foo'</code> is declared, <code>foo</code> is already in the environment?</p>",
        "id": 255151835,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632796362
    },
    {
        "content": "<p>I don't think we should demand that in mathlib, but it would be good to collect the list of violators anyway so that mathport can special case them</p>",
        "id": 255151874,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632796407
    },
    {
        "content": "<p>It's not like it hurts us overall to do some cleaning up of the <code>foo'</code> messes we have in mathlib. :-)</p>",
        "id": 255151885,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632796415
    },
    {
        "content": "<p>This example seems like a pretty good argument for why that might occur: group and group_with_zero don't directly need each other, but they need to be importable together so one of the names dodges the other</p>",
        "id": 255151951,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632796459
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mathport.20depending.20on.20mathlib/near/255151835\">said</a>:</p>\n<blockquote>\n<p>Alternatively, can we lint for this in mathlib? Make sure that wherever <code>foo'</code> is declared, <code>foo</code> is already in the environment?</p>\n</blockquote>\n<p>It might not work if mathlib3 and mathlib4 differ in relevant ways. Recall that I did not hit this issue until mathport started depending on mathlib4. If there is interest I can re-run without <code>_'</code> and figure out exactly what is going wrong.</p>",
        "id": 255151953,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632796462
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mathport.20depending.20on.20mathlib/near/255151805\">said</a>:</p>\n<blockquote>\n<p>can we give a local name override?</p>\n</blockquote>\n<p>Do you mean in mathport? Yes, there is a map in the configuration file for forced renames.</p>",
        "id": 255151981,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632796496
    },
    {
        "content": "<p>How did mathlib4 affect this issue? Why didn't you hit this already in mathlib?</p>",
        "id": 255151997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632796512
    },
    {
        "content": "<p>Ah, because mathlib3's <code>mul_right_cancel</code> probably clashes with the mathlib4 one, and so became a <code>mul_right_cancel'</code>, causing a cascade.</p>",
        "id": 255152083,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632796584
    },
    {
        "content": "<p>I am guessing that before, there were no clashes, and so each of the declarations kept their original names.</p>",
        "id": 255152111,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632796613
    },
    {
        "content": "<p>that sounds like an issue with missing alignments</p>",
        "id": 255152124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632796622
    },
    {
        "content": "<p>presumably we want mathlib3's <code>mul_right_cancel</code> to become mathlib4's <code>mul_right_cancel</code></p>",
        "id": 255152147,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632796642
    },
    {
        "content": "<p>aren't the underlying classes implemented differently? we haven't tackled the non-defeq-alignment yet at all.</p>",
        "id": 255152233,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632796704
    },
    {
        "content": "<p>Even if they are, we want them to align</p>",
        "id": 255152245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632796723
    },
    {
        "content": "<p>we could backport if needed</p>",
        "id": 255152267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632796748
    },
    {
        "content": "<p>how well can we handle just failing when the non-defeq causes problems, without breaking the build?</p>",
        "id": 255152359,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632796812
    },
    {
        "content": "<p>the build is pretty robust, but everything downstream of a failed decl will fail as well. I could handle theorems differently, so if the decl fails it falls back on trying it as an axiom before giving up.</p>",
        "id": 255152613,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632797032
    },
    {
        "content": "<p>is it possible to use strategic <code>sorry</code> to recover from failed subterms?</p>",
        "id": 255152686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632797077
    },
    {
        "content": "<p>One possibility is to record that you know a certain alignment is non-defeq, and then whenever that alignment is used you just use <code>sorry</code> instead of creating a known bad term</p>",
        "id": 255152765,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632797161
    },
    {
        "content": "<blockquote>\n<p>is it possible to use strategic sorry to recover from failed subterms?</p>\n</blockquote>\n<p>It would not be straightforward in the current design, since I am only getting a kernel error (<a href=\"https://github.com/leanprover/mathport/blob/master/Mathport/Binary/Apply.lean#L47\">https://github.com/leanprover/mathport/blob/master/Mathport/Binary/Apply.lean#L47</a>) which doesn't return any kind of position information.</p>",
        "id": 255152825,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632797174
    },
    {
        "content": "<p>so the alignment would only be used in e.g. synport</p>",
        "id": 255152850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632797192
    },
    {
        "content": "<p>Or I suppose you could try to use the alignment at first, and if it fails then fall back to the <code>sorry</code> approach</p>",
        "id": 255152942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632797255
    },
    {
        "content": "<p>I don't know what the best path is. Nailing non-def-eq alignment will probably be a lot of work (at best), and may not be that relevant if the port goes bottom-up anyway. If we go bottom-up, synport matters much more than binport. We could even refactor so synport only imports mathlib4 oleans instead of binport oleans.</p>",
        "id": 255153255,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632797504
    },
    {
        "content": "<p>There's also the argument that having <code>mul_right_cancel</code> and <code>mul_right_cancel'</code> in the first place is confusing as anything. It requires the humans to maintain an internal lookup table of \"number of primes\" to \"mathematical context\". I'd be much happier personally with either <code>mul_right_cancel_with_zero</code> or <code>group_with_zero.mul_right_cancel</code>.</p>",
        "id": 255153421,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632797642
    },
    {
        "content": "<p>I'm sympathetic to this but it seems to penalize use of <code>group_with_zero.mul_right_cancel</code> far too much</p>",
        "id": 255153543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632797724
    },
    {
        "content": "<p>So I'd just advocate making whatever changes to mathlib make life easiest for binport+synport.</p>",
        "id": 255153565,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632797746
    },
    {
        "content": "<p>what about <code>mul_right_cancel\\0</code>?</p>",
        "id": 255153576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632797751
    },
    {
        "content": "<p>Great!</p>",
        "id": 255153580,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632797757
    },
    {
        "content": "<p>I'm sympathetic to this but it seems to penalize use of <code>group_with_zero.mul_right_cancel</code> far too much</p>",
        "id": 255153628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632797772
    },
    {
        "content": "<p>what about <code>mul_right_cancel₀</code>?</p>",
        "id": 255153631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632797775
    },
    {
        "content": "<p>I think if the two of you say \"this will make life easier for us\", that can trump anything else.</p>",
        "id": 255153633,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632797775
    },
    {
        "content": "<p>We could also refactor/extend synport so that every proof is replaced by <code>sorry /- proof in comments -/</code>. Then the port could be two passes:</p>\n<ol>\n<li>[bottom-up] get the synported files to elaborate in bottom-up order, which will require diagnosing a bunch of not-yet-exhausted elaborator mismatch issues</li>\n<li>[parallel] removing the sorries in parallel</li>\n</ol>",
        "id": 255153747,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632797892
    },
    {
        "content": "<p>We are working on automation to help with (2), but (1) is essentially unblocked already.</p>",
        "id": 255153773,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632797932
    },
    {
        "content": "<p>One way to achieve (1) is to declare a <code>def'</code> command that ignores its proof argument</p>",
        "id": 255153943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632798029
    },
    {
        "content": "<p>Nice. <code>theorem_ax</code>?</p>",
        "id": 255153985,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632798066
    },
    {
        "content": "<p>or even does something more interesting, for example: try to elaborate <code>type := proof</code>, fall back on <code>type := sorry</code>, then on <code>sorry := sorry</code></p>",
        "id": 255154018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632798112
    },
    {
        "content": "<p>and use info/warn to indicate how successful it was</p>",
        "id": 255154081,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632798135
    },
    {
        "content": "<p>I like the idea that it does its best, but I think it would be disastrous not to have the invariant that all non-proofs were correct. How about only for theorems, and only trying the <code>type := sorry</code> fallback?</p>",
        "id": 255154148,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632798209
    },
    {
        "content": "<p>(and warning if it needed to falllback on sorry, as you suggested)</p>",
        "id": 255154169,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632798236
    },
    {
        "content": "<p>If the type uses tactics or something that doesn't exist we're screwed anyway</p>",
        "id": 255154225,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632798250
    },
    {
        "content": "<p>the point here is to keep going no matter what</p>",
        "id": 255154237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632798267
    },
    {
        "content": "<p>I was suggesting that (1) be a manual process of touching up the synported files in bottom-up order until they elaborate modulo sorried-proofs.</p>",
        "id": 255154257,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632798294
    },
    {
        "content": "<p>So, when hitting a type with a NYI tactic, somebody would write the tactic at that point before moving on.</p>",
        "id": 255154294,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632798331
    },
    {
        "content": "<p>and individual failures might not be a big problem, depending on how much they are used downstream</p>",
        "id": 255154364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632798372
    },
    {
        "content": "<p>obviously it's something we would prefer not to deal with but a full stop somewhere in the middle seems like the worst possible response to an error</p>",
        "id": 255154393,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632798414
    },
    {
        "content": "<p>Maybe, but I think it would be a disaster if somebody is trying to do (1) on a file, and struggling for 30m before realizing that the problem is due to some sorry in a definition in a file they have never heard of.</p>",
        "id": 255154403,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632798424
    },
    {
        "content": "<p>How many tactics are used in types/defs? We could also just implement those before we start (1).</p>",
        "id": 255154435,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632798463
    },
    {
        "content": "<p>maybe we can highlight uses of a definition that we know to be broken?</p>",
        "id": 255154438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632798464
    },
    {
        "content": "<p>we probably won't have to do anything special anyway, if the <code>theorem_ax</code> command reports the errors it encounters during elaboration</p>",
        "id": 255154527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632798544
    },
    {
        "content": "<p>I am still a little skeptical that we couldn't just implement most/all the necessary tactics for types/defs ahead of time.</p>",
        "id": 255154573,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632798596
    },
    {
        "content": "<p>if you mouse over a definition and it says the type is <code>sorry</code> that should be a pretty strong indicator that something is wrong upstream</p>",
        "id": 255154579,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632798601
    },
    {
        "content": "<blockquote>\n<p>I am still a little skeptical that we couldn't just implement most/all the necessary tactics for types/defs ahead of time.</p>\n</blockquote>\n<p>I think we can and should, but the best way to find and prioritize those tactics is to have a source file that indicates what needs to be done</p>",
        "id": 255154671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632798676
    },
    {
        "content": "<p>There are going to be lots of genuine errors that have nothing to do with upstream sorries, e.g. due to failure to synthesize or timeouts in isDefEq. It might take some work to notice that a synthesis call failed because some sorry emerged deep in the trace.</p>",
        "id": 255154675,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632798683
    },
    {
        "content": "<p>I agree that this situation is not great, but it's probably the best we can do after an upstream failure. The situation where those files are just completely broken and you can't even look at them is worse</p>",
        "id": 255154887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632798853
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mathport.20depending.20on.20mathlib/near/255154671\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I am still a little skeptical that we couldn't just implement most/all the necessary tactics for types/defs ahead of time.</p>\n</blockquote>\n<p>I think we can and should, but the best way to find and prioritize those tactics is to have a source file that indicates what needs to be done</p>\n</blockquote>\n<p>I will defer to you two on how best to find/prioritize these. I assumed (perhaps incorrectly) that there was a short, known list of tactics used in defs/types, or if not known, at least findable on the lean3 side.</p>",
        "id": 255154912,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632798902
    },
    {
        "content": "<p>it should be possible to instrument synport to gather this data</p>",
        "id": 255154935,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632798931
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mathport.20depending.20on.20mathlib/near/255154887\">said</a>:</p>\n<blockquote>\n<p>I agree that this situation is not great, but it's probably the best we can do after an upstream failure. The situation where those files are just completely broken and you can't even look at them is worse</p>\n</blockquote>\n<p>I am fine with having some people plow past sorries in defs/types and keep porting bottom-up, as long as they are adequately informed of the risk that subtle problems might turn out to be caused by upstream sorries.</p>",
        "id": 255155131,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632799095
    },
    {
        "content": "<p>Hopefully <a href=\"https://github.com/leanprover-community/mathlib/issues/9424\">#9424</a> will help a bit.</p>",
        "id": 255172527,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632813491
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 255172743,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632813610
    },
    {
        "content": "<p>Let's wait for CI, and then merge it.</p>",
        "id": 255172761,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1632813620
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"230999\">@Daniel Selsam</span> would you mind documenting somewhere how to run the pipeline? I'd like to get up to speed on this!</p>\n<p>I got as far as building <code>lake</code> from source, and cloning <code>https://github.com/leanprover/mathport</code>, but I'm not too sure what to do next. None of the <code>make</code> targets seem to work. I tried running <code>lake build</code> / <code>lake build-lib</code> / <code>lake build-bin</code> in various of the subdirectories that have <code>lakefile.lean</code> files, but without further success.</p>",
        "id": 255351772,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632898873
    },
    {
        "content": "<p>last I checked, <code>lake build-bin</code> in the root directory should work</p>",
        "id": 255356969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632902014
    },
    {
        "content": "<p>nevermind, I can't build master</p>",
        "id": 255357523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632902373
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> I get the following on mathport master / lake master:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">build</span><span class=\"bp\">-</span><span class=\"n\">bin</span>\n<span class=\"bp\">./</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">could</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"n\">native</span> <span class=\"n\">implementation</span> <span class=\"n\">of</span> <span class=\"n\">external</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">UInt64.ofNatCore'</span> <span class=\"o\">(</span><span class=\"n\">symbols</span> <span class=\"bp\">'</span><span class=\"n\">l_UInt64_ofNatCore___boxed'</span> <span class=\"n\">or</span> <span class=\"bp\">'</span><span class=\"n\">l_UInt64_ofNatCore'</span><span class=\"o\">)</span>\n<span class=\"bp\">./</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"kn\">namespace</span> <span class=\"bp\">'</span><span class=\"n\">Lake'</span>\n<span class=\"bp\">./</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"sc\">'→'</span><span class=\"o\">,</span> <span class=\"bp\">'-&gt;'</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">package</span> <span class=\"n\">configuration</span> <span class=\"o\">(</span><span class=\"n\">at</span> <span class=\"bp\">./</span><span class=\"n\">lakefile.lean</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">errors</span>\n</code></pre></div>",
        "id": 255357657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632902423
    },
    {
        "content": "<p>Sorry, should have been clearer. <code>lake build-bin</code> in the root directory does indeed work for me (to build mathport), but I then don't know how to actually run <code>mathport</code> to process mathlib3.</p>",
        "id": 255358560,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632902950
    },
    {
        "content": "<p>(In particular, I don't get the error that you just reported, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>.)</p>",
        "id": 255358773,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632903061
    },
    {
        "content": "<p>I believe the invocation is something like <code>LEAN_PATH=Lib4 build/bin/Mathport config.json Mathlib::all</code></p>",
        "id": 255358946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632903163
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=</span><span class=\"n\">Lib4</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">Mathport</span> <span class=\"n\">config.json</span> <span class=\"n\">Mathlib</span><span class=\"o\">::</span><span class=\"n\">all</span>\n<span class=\"o\">[</span><span class=\"n\">paths</span><span class=\"o\">]</span> <span class=\"o\">[{</span> <span class=\"n\">package</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Mathlib\"</span><span class=\"o\">,</span> <span class=\"n\">mod3</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">all</span> <span class=\"o\">}]</span>\n<span class=\"o\">[</span><span class=\"n\">visit</span><span class=\"o\">]</span> <span class=\"o\">{</span> <span class=\"n\">package</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Mathlib\"</span><span class=\"o\">,</span> <span class=\"n\">mod3</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">all</span> <span class=\"o\">}</span>\n<span class=\"n\">PANIC</span> <span class=\"n\">at</span> <span class=\"n\">Std.HashMap.find</span><span class=\"bp\">!</span> <span class=\"n\">Std.Data.HashMap</span><span class=\"o\">:</span><span class=\"mi\">177</span><span class=\"o\">:</span><span class=\"mi\">14</span><span class=\"o\">:</span> <span class=\"n\">key</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">map</span>\n<span class=\"n\">uncaught</span> <span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">all.tlean</span>\n</code></pre></div>",
        "id": 255359694,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632903597
    },
    {
        "content": "<p>You need to get the tleans from the mathport release or build them from mathlib</p>",
        "id": 255359891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632903702
    },
    {
        "content": "<p>How do I build them?</p>",
        "id": 255359985,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632903737
    },
    {
        "content": "<p>I think it's something like <code>lean --make --tlean</code></p>",
        "id": 255360009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632903754
    },
    {
        "content": "<p>from the makefile:</p>\n<div class=\"codehilite\" data-code-language=\"Makefile\"><pre><span></span><code>    <span class=\"nv\">LEAN_PATH</span><span class=\"o\">=</span><span class=\"k\">$(</span>LEAN3_LIB<span class=\"k\">)</span>:<span class=\"k\">$(</span>MATHLIB3_SRC<span class=\"k\">)</span>  <span class=\"k\">$(</span>LEAN3_BIN<span class=\"k\">)</span>/lean --make --recursive --ast   <span class=\"k\">$(</span>MATHLIB3_SRC<span class=\"k\">)</span>\n    <span class=\"nv\">LEAN_PATH</span><span class=\"o\">=</span><span class=\"k\">$(</span>LEAN3_LIB<span class=\"k\">)</span>:<span class=\"k\">$(</span>MATHLIB3_SRC<span class=\"k\">)</span>  <span class=\"k\">$(</span>LEAN3_BIN<span class=\"k\">)</span>/lean --make --recursive --tlean <span class=\"k\">$(</span>MATHLIB3_SRC<span class=\"k\">)</span>\n    cp -r <span class=\"k\">$(</span>MATHLIB3_SRC<span class=\"k\">)</span> PreData/Mathlib3\n</code></pre></div>",
        "id": 255360102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632903821
    },
    {
        "content": "<p>oh, I see, the makefile isn't meant to work unless you set <code>LEAN3_BIN</code> manually?</p>",
        "id": 255360412,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632903953
    },
    {
        "content": "<p>You don't have to copy mathlib into <code>PreData/Mathlib3</code> if you modify the <code>config.json</code> file to point at the directory containing <code>.ast.json</code> and <code>.tlean</code> files for mathlib</p>",
        "id": 255360494,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632903979
    },
    {
        "content": "<p>I guess, I don't use the makefile myself since I think Daniel's setup is too specific</p>",
        "id": 255360552,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632904023
    },
    {
        "content": "<p>I'm just following it as the only source for knowing how mathport is meant to be used. :-)</p>",
        "id": 255360597,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632904051
    },
    {
        "content": "<p>it looks like <code>LEAN3_BIN</code>, <code>LEAN3_PKG</code> and <code>MATHLIB3_SRC</code> at least need to be set externally</p>",
        "id": 255360839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632904160
    },
    {
        "content": "<p>I would just set them in the makefile</p>",
        "id": 255360873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632904180
    },
    {
        "content": "<p>It seems strange to even set LEAN3_BIN. Better would just be to change into the right directory and call <code>lean</code>, and let <code>elan</code> pick up the relevant version?</p>",
        "id": 255361355,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632904379
    },
    {
        "content": "<p>I think daniel has this all set up to call master versions of everything</p>",
        "id": 255361417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632904414
    },
    {
        "content": "<p>Is <code>MATHLIB3_SRC</code> intended to be an external copy of mathlib? There's no part of the build script that takes care of pulling mathlib3?</p>",
        "id": 255361451,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632904434
    },
    {
        "content": "<p>yes, it's mathlib master</p>",
        "id": 255361569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632904480
    },
    {
        "content": "<p>nothing pulls mathlib3 because it's tied to his local copy</p>",
        "id": 255361773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632904572
    },
    {
        "content": "<p>I think this setup is a bad idea because it's bad for reproducibility, but it's changed a lot recently and I can't quite keep track where it is at</p>",
        "id": 255361922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632904654
    },
    {
        "content": "<p>Ok. Maybe timezones will mesh and I'll be online at the same time as Daniel. :-)</p>",
        "id": 255362158,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632904760
    },
    {
        "content": "<p>It would be great if I could clone <code>mathport</code>, read the README, and then run one command to go do a complete run of mathport on the current mathlib3. I was hoping I could update the README file myself to explain this, but it looks like it will take a bit more time.</p>",
        "id": 255362370,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632904850
    },
    {
        "content": "<p>The mathlib steps should work as long as you have any lean/mathlib install</p>",
        "id": 255362565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632904926
    },
    {
        "content": "<p>that is <code>lean --make --recursive --ast </code> from the <code>src</code> folder in mathlib</p>",
        "id": 255362649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632904969
    },
    {
        "content": "<p>You might be able to run ast and tlean at the same time, which should be a lot faster</p>",
        "id": 255362766,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632905032
    },
    {
        "content": "<p><code>lean --make --recursive --ast --tlean</code></p>",
        "id": 255362854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632905062
    },
    {
        "content": "<p>Ok. I'll try that later, then see if I can get it working all inside mathport.</p>",
        "id": 255362861,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632905067
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mathport.20depending.20on.20mathlib/near/255351772\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"230999\">Daniel Selsam</span> would you mind documenting somewhere how to run the pipeline? I'd like to get up to speed on this!</p>\n</blockquote>\n<p>Yes, and sorry for the headaches you already suffered trying to run it. I had a Dockerfile to do exactly this not so long ago (<a href=\"https://github.com/leanprover/mathport/blob/bfef2071f38728e00a9016e1c547146278469365/docker/Dockerfile\">https://github.com/leanprover/mathport/blob/bfef2071f38728e00a9016e1c547146278469365/docker/Dockerfile</a>) but it went slightly stale so I removed it temporarily. I will revive it this morning.</p>",
        "id": 255396001,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632921218
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I haven't re-run the pipeline in a while, and sadly there is some staleness currently in the Makefile. I will re-run and fix right now.</p>",
        "id": 255399822,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632922574
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mathport.20depending.20on.20mathlib/near/255357657\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> I get the following on mathport master / lake master:</p>\n</blockquote>\n<p>Are you still having trouble? If so, it seems like the issue is that your Lean and Lake versions are probably not aligned with one another. You can verify if this is the case by running <code>lake self-check</code>. If it returns nothing everything is order, if it errors out, then you have problem with version alignment.</p>",
        "id": 255438863,
        "sender_full_name": "Mac",
        "timestamp": 1632936249
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"230999\">Daniel Selsam</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mathport.20depending.20on.20mathlib/near/255399822\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> I haven't re-run the pipeline in a while, and sadly there is some staleness currently in the Makefile. I will re-run and fix right now.</p>\n</blockquote>\n<p>I fixed a bunch of little issues, pushed, re-ran, and posted the lean3 export data, the lean4 output packages, and the logs to <a href=\"https://github.com/leanprover/mathport/releases/tag/v0.0.0.0\">https://github.com/leanprover/mathport/releases/tag/v0.0.0.0</a></p>\n<p>For now, in the absence of CI, I would recommend against trying to re-run this yourself and instead just using the releases (and bugging me to re-run whenever there is an important change in one of the many repositories involved).</p>",
        "id": 255447902,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632939507
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"230999\">@Daniel Selsam</span> You may wish to update the commit the <code>v0.0.0.0</code> tag points to as it currently references one from July 27 which I am sure is not using what is described in the release. <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 255465689,
        "sender_full_name": "Mac",
        "timestamp": 1632946079
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mathport.20depending.20on.20mathlib/near/255465689\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"230999\">Daniel Selsam</span> You may wish to update the commit the <code>v0.0.0.0</code> tag points to as it currently references one from July 27 which I am sure is not using what is described in the release. <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>\n</blockquote>\n<p>Thanks. I have found it (albeit only slightly) convenient to continue updating the same release, so for now I just added the mathport commit to the release description (<a href=\"https://github.com/leanprover/mathport/releases/tag/v0.0.0.0\">https://github.com/leanprover/mathport/releases/tag/v0.0.0.0</a>).</p>",
        "id": 255466095,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632946251
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"230999\">@Daniel Selsam</span>, the new release doesn't seem to include any olean files in the <code>.tar.gz</code>.</p>",
        "id": 255502173,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632964787
    },
    {
        "content": "<p>Do you mean Lean4 oleans or Lean3 oleans? I know they don't contain Lean3 oleans (do you need them?) but I thought they contained the mathported Lean4 oleans.</p>",
        "id": 255502326,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632964902
    },
    {
        "content": "<p>No oleans at all.</p>",
        "id": 255502405,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632964958
    },
    {
        "content": "<p>Sorry, something is wrong.</p>",
        "id": 255502447,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632965010
    },
    {
        "content": "<p>It's just VSCode hiding them from me, sorry. :-(</p>",
        "id": 255502548,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632965071
    },
    {
        "content": "<p>I am having another problem, however, that perhaps is real: when I run <code>lake build</code>, I get lots of errors of the form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">write</span> <span class=\"bp\">'./</span><span class=\"n\">Lib4</span><span class=\"bp\">/</span><span class=\"n\">Mathbin</span><span class=\"bp\">/./../</span><span class=\"n\">leanbin</span><span class=\"bp\">/./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathport</span><span class=\"bp\">/./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">NormNum.olean'</span><span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"n\">No</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span>\n</code></pre></div>",
        "id": 255502579,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632965107
    },
    {
        "content": "<p>They are there, but perhaps a little hidden (inside a directory that is usually git-ignored)</p>",
        "id": 255502582,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632965110
    },
    {
        "content": "<p>This is perhaps a case sensitivity issue.</p>",
        "id": 255502600,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632965130
    },
    {
        "content": "<p>I have <code>./Lib4/mathbin/</code>, not <code>./Lib4/Mathbin/</code>.</p>",
        "id": 255502625,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632965154
    },
    {
        "content": "<p>Where are you running <code>lake build</code>? Give me a minute, I will post a <code>.tar.gz</code> of my \"TestImport\" lake project.</p>",
        "id": 255502721,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632965237
    },
    {
        "content": "<p>Ah, great, I was just preparing a git repo with the same purpose. :-)</p>",
        "id": 255502741,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632965256
    },
    {
        "content": "<p>In fact, the case sensitivity issues appear to cut both ways: instead of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">./</span><span class=\"n\">Lib4</span><span class=\"bp\">/</span><span class=\"n\">Mathbin</span><span class=\"bp\">/./../</span><span class=\"n\">leanbin</span><span class=\"bp\">/./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathport</span><span class=\"bp\">/./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span>\n</code></pre></div>\n<p>I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">./</span><span class=\"n\">Lib4</span><span class=\"bp\">/</span><span class=\"n\">mathbin</span><span class=\"bp\">/./../</span><span class=\"n\">leanbin</span><span class=\"bp\">/./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathport</span><span class=\"bp\">/./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span>\n       <span class=\"bp\">^</span>                                                             <span class=\"bp\">^</span>\n</code></pre></div>",
        "id": 255502815,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632965305
    },
    {
        "content": "<p>I'm running <code>lake build</code> in a directory that contains <code>Lib4</code>, <code>PreData</code>, and <code>Logs</code>, which were creating by unpacking your release file.</p>",
        "id": 255502921,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632965403
    },
    {
        "content": "<p>Here: <a href=\"/user_uploads/3121/H5xkr1l0SJq2gcU9V5Y7bB4C/TestImportMathbin.tar.gz\">TestImportMathbin.tar.gz</a>. You should only need to change the path to liquidbin in the lakefile, and then <code>lake build</code> should work and print out something about semirings.  If this doesn't work, can you please double-check your lake version against the one in the release description, and also please try downloading the release again (just in case you downloaded in a small window earlier today with a different tar file sitting in the same release)?</p>",
        "id": 255503028,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632965510
    },
    {
        "content": "<p>(I only changed all the package names to be lowercase earlier today, so it is probably just some thing in the pipeline that is a tiny bit stale)</p>",
        "id": 255503129,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632965593
    },
    {
        "content": "<p>Oh also, I am not sure how smart <code>lake</code> is currently regarding stale package dependencies. You might also try removing all <code>lean_packages</code> directories in all the relevant folders.</p>",
        "id": 255503387,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632965818
    },
    {
        "content": "<p>Okay, after rebuilding <code>lake</code> at <code>edda065c2fca1495709f9f6c0ad493524b25c574</code>, discarding everything and starting over, running <code>lake build</code> from a directory containing <code>Lib4</code> and the contents of your <code>TestImportMathbin.tar.gz</code>, I still get error messages like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">write</span> <span class=\"bp\">'././</span><span class=\"n\">Lib4</span><span class=\"bp\">/</span><span class=\"n\">liquidbin</span><span class=\"bp\">/./../</span><span class=\"n\">mathbin</span><span class=\"bp\">/./../</span><span class=\"n\">leanbin</span><span class=\"bp\">/./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathport</span><span class=\"bp\">/./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">Basic.olean'</span><span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"n\">No</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span>\n</code></pre></div>\n<p>I'm not sure what's going on. As far as I can see that directory, and indeed that file, exist.</p>",
        "id": 255505975,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632967873
    },
    {
        "content": "<p>For hopefully complete reproducibility, my setup is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">clone</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"bp\">-</span><span class=\"n\">mathport</span>\n<span class=\"n\">cd</span> <span class=\"n\">test</span><span class=\"bp\">-</span><span class=\"n\">mathport</span>\n<span class=\"n\">make</span>\n</code></pre></div>",
        "id": 255506176,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632968033
    },
    {
        "content": "<p>I guess that doesn't reproduce compiling <code>lake</code>.</p>",
        "id": 255506331,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632968136
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I have observed a lot of Heisenbug-like issues similar to the one you just posted, that I think are related to <code>lake</code>. Can you just try continuing to type <code>lake build</code> in the <code>TestImportMathbin</code> directory? I just tried from scratch and it took four consecutives builds to work for me.</p>",
        "id": 255506430,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632968188
    },
    {
        "content": "<p>Oh dear -- I just checked, and <code>lake</code> is spawning about a dozen separate <code>lean</code> processes. That can't be good. Perhaps these <code>failed to write</code> errors are contentions between different <code>lean</code> processes trying to do the same thing.</p>",
        "id": 255506676,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632968382
    },
    {
        "content": "<p>(Would also be consistent with Heisenbugs.)</p>",
        "id": 255506752,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632968423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mathport.20depending.20on.20mathlib/near/255506676\">said</a>:</p>\n<blockquote>\n<p>Oh dear -- I just checked, and <code>lake</code> is spawning about a dozen separate <code>lean</code> processes. That can't be good. Perhaps these <code>failed to write</code> errors are contentions between different <code>lean</code> processes trying to do the same thing.</p>\n</blockquote>\n<p>CC: <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span></p>",
        "id": 255506875,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632968533
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Were you able to get TestImportMathbin to work eventually? If so, can you please confirm that by copying the LEAN_PATH that lake prints out, you can import from your editor as well?</p>",
        "id": 255506942,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632968600
    },
    {
        "content": "<p>Still running <code>lake build</code> repeatedly to see if it stabilises. Some of the stray Lean processes keep running after <code>lake</code> returns to the command line, so I'm waiting for those to end too. Bit of a slow process. :-)</p>",
        "id": 255507055,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632968677
    },
    {
        "content": "<p>Oh, exciting variety of errors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">libc</span><span class=\"bp\">++</span><span class=\"n\">abi.dylib</span><span class=\"o\">:</span> <span class=\"n\">terminating</span> <span class=\"k\">with</span> <span class=\"n\">uncaught</span> <span class=\"n\">exception</span> <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">__1</span><span class=\"o\">::</span><span class=\"n\">system_error</span><span class=\"o\">:</span> <span class=\"n\">mutex</span> <span class=\"n\">lock</span> <span class=\"n\">failed</span><span class=\"o\">:</span> <span class=\"n\">Invalid</span> <span class=\"n\">argument</span>\n</code></pre></div>",
        "id": 255507722,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632969191
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"230999\">@Daniel Selsam</span>  <code>lake</code> tries to build as many modules as it can in parallel, so spawning many <code>lean</code> processes can be reasonable. While I have encountered some Hisenbugs of my own with <code>lake</code>, I suspect that they are actually <code>lean</code> bugs that emerge when many <code>lean</code> process are trying to load the same <code>.olean</code>s.  I have mostly ignored them because, as Hisenbugs, I have no clue how to debug them. The Hisenbugs I have encountered also only seem to appear one Windows (further my suspicion that is due to some race condition with memory mapped oleans).</p>\n<p>However, the bugs I have seen are not like yours <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> , so I am not quite sure what is going wrong there. Though again, as <code>lake</code> itself is not trying to acquire any locks directly, I would expect either <code>lean</code> has a bug or I am someone violating an invariant of  some <code>lean</code> function that I was not aware of.</p>",
        "id": 255508306,
        "sender_full_name": "Mac",
        "timestamp": 1632969663
    },
    {
        "content": "<p>(I'm on macos here.)</p>",
        "id": 255508411,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632969726
    },
    {
        "content": "<p>(I'm on linux :))</p>",
        "id": 255508421,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1632969735
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span>, I don't know anything yet about how <code>lake</code> is working: is it starting a separate <code>lean</code> process for each <code>.lean</code> file that needs to be compiled to an <code>.olean</code>?</p>",
        "id": 255508483,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632969811
    },
    {
        "content": "<p>Would you be interested in trying </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">clone</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"bp\">-</span><span class=\"n\">mathport</span>\n<span class=\"n\">cd</span> <span class=\"n\">test</span><span class=\"bp\">-</span><span class=\"n\">mathport</span>\n<span class=\"n\">make</span>\n</code></pre></div>\n<p>to see if you can reproduce?</p>",
        "id": 255508585,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632969875
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mathport.20depending.20on.20mathlib/near/255508483\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span>, I don't know anything yet about how <code>lake</code> is working: is it starting a separate <code>lean</code> process for each <code>.lean</code> file that needs to be compiled to an <code>.olean</code>?</p>\n</blockquote>\n<p>That's how lean 4 works - it does separate compilation and relies on the build tool to orchestrate the calls</p>",
        "id": 255508895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632970131
    },
    {
        "content": "<p>Great, that's what I thought. I'm just trying to guess how there could be a contention on an <code>.olean</code> file in this setup.</p>",
        "id": 255509076,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632970288
    },
    {
        "content": "<p>Note for me this is a pretty reliable heisenbug: <code>lake build</code> is failing every time, albeit with different error messages on different runs.</p>",
        "id": 255509242,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632970443
    },
    {
        "content": "<p>I think this might be something to do with it: it seems <code>lake</code> is updating the same dependency multiple times:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">mathlib</span><span class=\"o\">:</span> <span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">dselsam</span><span class=\"bp\">/</span><span class=\"n\">mathlib4.git</span> <span class=\"n\">to</span> <span class=\"bp\">././</span><span class=\"n\">Lib4</span><span class=\"bp\">/</span><span class=\"n\">liquidbin</span><span class=\"bp\">/./../</span><span class=\"n\">mathbin</span><span class=\"bp\">/./../</span><span class=\"n\">leanbin</span><span class=\"bp\">/./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span>\n<span class=\"n\">mathport</span><span class=\"o\">:</span> <span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">mathport.git</span> <span class=\"n\">to</span> <span class=\"bp\">././</span><span class=\"n\">Lib4</span><span class=\"bp\">/</span><span class=\"n\">liquidbin</span><span class=\"bp\">/./../</span><span class=\"n\">mathbin</span><span class=\"bp\">/./../</span><span class=\"n\">leanbin</span><span class=\"bp\">/./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathport</span>\n<span class=\"n\">mathlib</span><span class=\"o\">:</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">update</span> <span class=\"bp\">././</span><span class=\"n\">Lib4</span><span class=\"bp\">/</span><span class=\"n\">liquidbin</span><span class=\"bp\">/./../</span><span class=\"n\">mathbin</span><span class=\"bp\">/./../</span><span class=\"n\">leanbin</span><span class=\"bp\">/./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span> <span class=\"n\">to</span> <span class=\"n\">revision</span> <span class=\"n\">lake</span>\n<span class=\"n\">mathport</span><span class=\"o\">:</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">update</span> <span class=\"bp\">././</span><span class=\"n\">Lib4</span><span class=\"bp\">/</span><span class=\"n\">liquidbin</span><span class=\"bp\">/./../</span><span class=\"n\">mathbin</span><span class=\"bp\">/./../</span><span class=\"n\">leanbin</span><span class=\"bp\">/./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathport</span> <span class=\"n\">to</span> <span class=\"n\">revision</span> <span class=\"n\">master</span>\n<span class=\"n\">mathlib</span><span class=\"o\">:</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">update</span> <span class=\"bp\">././</span><span class=\"n\">Lib4</span><span class=\"bp\">/</span><span class=\"n\">liquidbin</span><span class=\"bp\">/./../</span><span class=\"n\">mathbin</span><span class=\"bp\">/./../</span><span class=\"n\">leanbin</span><span class=\"bp\">/./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span> <span class=\"n\">to</span> <span class=\"n\">revision</span> <span class=\"n\">lake</span>\n<span class=\"n\">mathport</span><span class=\"o\">:</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">update</span> <span class=\"bp\">././</span><span class=\"n\">Lib4</span><span class=\"bp\">/</span><span class=\"n\">liquidbin</span><span class=\"bp\">/./../</span><span class=\"n\">mathbin</span><span class=\"bp\">/./../</span><span class=\"n\">leanbin</span><span class=\"bp\">/./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathport</span> <span class=\"n\">to</span> <span class=\"n\">revision</span> <span class=\"n\">master</span>\n<span class=\"n\">mathlib</span><span class=\"o\">:</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">update</span> <span class=\"bp\">././</span><span class=\"n\">Lib4</span><span class=\"bp\">/</span><span class=\"n\">liquidbin</span><span class=\"bp\">/./../</span><span class=\"n\">mathbin</span><span class=\"bp\">/./../</span><span class=\"n\">leanbin</span><span class=\"bp\">/./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span> <span class=\"n\">to</span> <span class=\"n\">revision</span> <span class=\"n\">lake</span>\n<span class=\"n\">mathport</span><span class=\"o\">:</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">update</span> <span class=\"bp\">././</span><span class=\"n\">Lib4</span><span class=\"bp\">/</span><span class=\"n\">liquidbin</span><span class=\"bp\">/./../</span><span class=\"n\">mathbin</span><span class=\"bp\">/./../</span><span class=\"n\">leanbin</span><span class=\"bp\">/./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathport</span> <span class=\"n\">to</span> <span class=\"n\">revision</span> <span class=\"n\">master</span>\n<span class=\"n\">mathlib</span><span class=\"o\">:</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">update</span> <span class=\"bp\">././</span><span class=\"n\">Lib4</span><span class=\"bp\">/</span><span class=\"n\">liquidbin</span><span class=\"bp\">/./../</span><span class=\"n\">mathbin</span><span class=\"bp\">/./../</span><span class=\"n\">leanbin</span><span class=\"bp\">/./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span> <span class=\"n\">to</span> <span class=\"n\">revision</span> <span class=\"n\">lake</span>\n<span class=\"n\">mathport</span><span class=\"o\">:</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">update</span> <span class=\"bp\">././</span><span class=\"n\">Lib4</span><span class=\"bp\">/</span><span class=\"n\">liquidbin</span><span class=\"bp\">/./../</span><span class=\"n\">mathbin</span><span class=\"bp\">/./../</span><span class=\"n\">leanbin</span><span class=\"bp\">/./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathport</span> <span class=\"n\">to</span> <span class=\"n\">revision</span> <span class=\"n\">master</span>\n<span class=\"n\">mathlib</span><span class=\"o\">:</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">update</span> <span class=\"bp\">././</span><span class=\"n\">Lib4</span><span class=\"bp\">/</span><span class=\"n\">liquidbin</span><span class=\"bp\">/./../</span><span class=\"n\">mathbin</span><span class=\"bp\">/./../</span><span class=\"n\">leanbin</span><span class=\"bp\">/./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathport</span><span class=\"bp\">/./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span> <span class=\"n\">to</span> <span class=\"n\">revision</span> <span class=\"n\">lake</span>\n<span class=\"n\">mathlib</span><span class=\"o\">:</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">update</span> <span class=\"bp\">././</span><span class=\"n\">Lib4</span><span class=\"bp\">/</span><span class=\"n\">liquidbin</span><span class=\"bp\">/./../</span><span class=\"n\">mathbin</span><span class=\"bp\">/./../</span><span class=\"n\">leanbin</span><span class=\"bp\">/./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span> <span class=\"n\">to</span> <span class=\"n\">revision</span> <span class=\"n\">lake</span>\n<span class=\"n\">mathport</span><span class=\"o\">:</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">update</span> <span class=\"bp\">././</span><span class=\"n\">Lib4</span><span class=\"bp\">/</span><span class=\"n\">liquidbin</span><span class=\"bp\">/./../</span><span class=\"n\">mathbin</span><span class=\"bp\">/./../</span><span class=\"n\">leanbin</span><span class=\"bp\">/./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathport</span> <span class=\"n\">to</span> <span class=\"n\">revision</span> <span class=\"n\">master</span>\n<span class=\"n\">mathlib</span><span class=\"o\">:</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">update</span> <span class=\"bp\">././</span><span class=\"n\">Lib4</span><span class=\"bp\">/</span><span class=\"n\">liquidbin</span><span class=\"bp\">/./../</span><span class=\"n\">mathbin</span><span class=\"bp\">/./../</span><span class=\"n\">leanbin</span><span class=\"bp\">/./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span> <span class=\"n\">to</span> <span class=\"n\">revision</span> <span class=\"n\">lake</span>\n<span class=\"n\">mathport</span><span class=\"o\">:</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">update</span> <span class=\"bp\">././</span><span class=\"n\">Lib4</span><span class=\"bp\">/</span><span class=\"n\">liquidbin</span><span class=\"bp\">/./../</span><span class=\"n\">mathbin</span><span class=\"bp\">/./../</span><span class=\"n\">leanbin</span><span class=\"bp\">/./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathport</span> <span class=\"n\">to</span> <span class=\"n\">revision</span> <span class=\"n\">master</span>\n<span class=\"n\">mathlib</span><span class=\"o\">:</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">update</span> <span class=\"bp\">././</span><span class=\"n\">Lib4</span><span class=\"bp\">/</span><span class=\"n\">liquidbin</span><span class=\"bp\">/./../</span><span class=\"n\">mathbin</span><span class=\"bp\">/./../</span><span class=\"n\">leanbin</span><span class=\"bp\">/./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathport</span><span class=\"bp\">/./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span> <span class=\"n\">to</span> <span class=\"n\">revision</span> <span class=\"n\">lake</span>\n<span class=\"n\">mathlib</span><span class=\"o\">:</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">update</span> <span class=\"bp\">././</span><span class=\"n\">Lib4</span><span class=\"bp\">/</span><span class=\"n\">liquidbin</span><span class=\"bp\">/./../</span><span class=\"n\">mathbin</span><span class=\"bp\">/./../</span><span class=\"n\">leanbin</span><span class=\"bp\">/./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathport</span><span class=\"bp\">/./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span> <span class=\"n\">to</span> <span class=\"n\">revision</span> <span class=\"n\">lake</span>\n<span class=\"n\">mathlib</span><span class=\"o\">:</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">update</span> <span class=\"bp\">././</span><span class=\"n\">Lib4</span><span class=\"bp\">/</span><span class=\"n\">liquidbin</span><span class=\"bp\">/./../</span><span class=\"n\">mathbin</span><span class=\"bp\">/./../</span><span class=\"n\">leanbin</span><span class=\"bp\">/./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span> <span class=\"n\">to</span> <span class=\"n\">revision</span> <span class=\"n\">lake</span>\n</code></pre></div>",
        "id": 255515824,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632976200
    },
    {
        "content": "<p>I've snipped out interspersed output of the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=././</span><span class=\"n\">Lib4</span><span class=\"bp\">/</span><span class=\"n\">liquidbin</span><span class=\"bp\">/./../</span><span class=\"n\">mathbin</span><span class=\"bp\">/./../</span><span class=\"n\">leanbin</span><span class=\"bp\">/./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"n\">lean</span> <span class=\"bp\">-</span><span class=\"n\">R</span> <span class=\"bp\">././</span><span class=\"n\">Lib4</span><span class=\"bp\">/</span><span class=\"n\">liquidbin</span><span class=\"bp\">/./../</span><span class=\"n\">mathbin</span><span class=\"bp\">/./../</span><span class=\"n\">leanbin</span><span class=\"bp\">/./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/./.</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"bp\">././</span><span class=\"n\">Lib4</span><span class=\"bp\">/</span><span class=\"n\">liquidbin</span><span class=\"bp\">/./../</span><span class=\"n\">mathbin</span><span class=\"bp\">/./../</span><span class=\"n\">leanbin</span><span class=\"bp\">/./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Ring</span><span class=\"bp\">/</span><span class=\"n\">Basic.olean</span> <span class=\"bp\">-</span><span class=\"n\">c</span> <span class=\"bp\">././</span><span class=\"n\">Lib4</span><span class=\"bp\">/</span><span class=\"n\">liquidbin</span><span class=\"bp\">/./../</span><span class=\"n\">mathbin</span><span class=\"bp\">/./../</span><span class=\"n\">leanbin</span><span class=\"bp\">/./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Ring</span><span class=\"bp\">/</span><span class=\"n\">Basic.c</span> <span class=\"bp\">././</span><span class=\"n\">Lib4</span><span class=\"bp\">/</span><span class=\"n\">liquidbin</span><span class=\"bp\">/./../</span><span class=\"n\">mathbin</span><span class=\"bp\">/./../</span><span class=\"n\">leanbin</span><span class=\"bp\">/./</span><span class=\"n\">lean_packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Ring</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span>\n</code></pre></div>",
        "id": 255515884,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632976228
    },
    {
        "content": "<p>@Mac, this <code>Dockerfile</code> also reproduces the problem.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">FROM</span> <span class=\"n\">ubuntu</span>\n\n<span class=\"n\">USER</span> <span class=\"n\">root</span>\n\n<span class=\"bp\">#</span> <span class=\"n\">Set</span> <span class=\"n\">timezone</span> <span class=\"n\">to</span> <span class=\"n\">UTC</span> <span class=\"n\">to</span> <span class=\"n\">avoid</span> <span class=\"n\">prompts</span> <span class=\"k\">from</span> <span class=\"n\">tzdata.</span>\n<span class=\"n\">RUN</span> <span class=\"n\">TZ</span><span class=\"bp\">=</span><span class=\"n\">UTC</span> <span class=\"n\">ln</span> <span class=\"bp\">-</span><span class=\"n\">snf</span> <span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">share</span><span class=\"bp\">/</span><span class=\"n\">zoneinfo</span><span class=\"bp\">/$</span><span class=\"n\">TZ</span> <span class=\"bp\">/</span><span class=\"n\">etc</span><span class=\"bp\">/</span><span class=\"n\">localtime</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">echo</span> <span class=\"bp\">$</span><span class=\"n\">TZ</span> <span class=\"bp\">&gt;</span> <span class=\"bp\">/</span><span class=\"n\">etc</span><span class=\"bp\">/</span><span class=\"n\">timezone</span>\n<span class=\"bp\">#</span> <span class=\"n\">Install</span> <span class=\"n\">prerequisites.</span>\n<span class=\"n\">RUN</span> <span class=\"n\">apt</span><span class=\"bp\">-</span><span class=\"n\">get</span> <span class=\"n\">update</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"bp\">\\</span>\n    <span class=\"bp\">#</span> <span class=\"n\">Lean4</span> <span class=\"n\">prerequisites</span><span class=\"o\">:</span>\n    <span class=\"n\">apt</span><span class=\"bp\">-</span><span class=\"n\">get</span> <span class=\"n\">install</span> <span class=\"bp\">-</span><span class=\"n\">y</span> <span class=\"n\">git</span> <span class=\"n\">libgmp</span><span class=\"bp\">-</span><span class=\"n\">dev</span> <span class=\"n\">cmake</span> <span class=\"n\">ccache</span> <span class=\"n\">gcc</span><span class=\"bp\">-</span><span class=\"mi\">10</span> <span class=\"n\">g</span><span class=\"bp\">++-</span><span class=\"mi\">10</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"bp\">\\</span>\n    <span class=\"n\">apt</span><span class=\"bp\">-</span><span class=\"n\">get</span> <span class=\"n\">clean</span>\n<span class=\"bp\">#</span> <span class=\"n\">We</span> <span class=\"n\">need</span> <span class=\"n\">curl</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"n\">elan</span>\n<span class=\"n\">RUN</span> <span class=\"n\">apt</span><span class=\"bp\">-</span><span class=\"n\">get</span> <span class=\"n\">install</span> <span class=\"bp\">-</span><span class=\"n\">y</span> <span class=\"n\">curl</span>\n<span class=\"bp\">#</span> <span class=\"n\">Lake</span> <span class=\"n\">additionally</span> <span class=\"n\">requires</span> <span class=\"n\">some</span> <span class=\"n\">header</span> <span class=\"n\">files</span> <span class=\"n\">for</span> <span class=\"n\">the</span> <span class=\"n\">compiler</span><span class=\"o\">:</span>\n<span class=\"n\">RUN</span> <span class=\"n\">apt</span><span class=\"bp\">-</span><span class=\"n\">get</span> <span class=\"n\">install</span> <span class=\"bp\">-</span><span class=\"n\">y</span> <span class=\"n\">build</span><span class=\"bp\">-</span><span class=\"n\">essential</span>\n\n<span class=\"bp\">#</span> <span class=\"n\">create</span> <span class=\"n\">a</span> <span class=\"n\">non</span><span class=\"bp\">-</span><span class=\"n\">root</span> <span class=\"n\">user</span>\n<span class=\"n\">RUN</span> <span class=\"n\">useradd</span> <span class=\"bp\">-</span><span class=\"n\">m</span> <span class=\"n\">lean</span>\n\n<span class=\"n\">USER</span> <span class=\"n\">lean</span>\n<span class=\"n\">WORKDIR</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">lean</span>\n\n<span class=\"n\">SHELL</span> <span class=\"o\">[</span><span class=\"s2\">\"/bin/bash\"</span><span class=\"o\">,</span> <span class=\"s2\">\"-c\"</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">entrypoint</span> <span class=\"n\">to</span> <span class=\"n\">be</span> <span class=\"n\">a</span> <span class=\"n\">login</span> <span class=\"n\">shell</span><span class=\"o\">,</span> <span class=\"n\">so</span> <span class=\"n\">everything</span> <span class=\"n\">is</span> <span class=\"n\">on</span> <span class=\"n\">the</span> <span class=\"n\">PATH</span>\n<span class=\"n\">ENTRYPOINT</span> <span class=\"o\">[</span><span class=\"s2\">\"/bin/bash\"</span><span class=\"o\">,</span> <span class=\"s2\">\"-l\"</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span> <span class=\"n\">make</span> <span class=\"n\">sure</span> <span class=\"n\">binaries</span> <span class=\"n\">are</span> <span class=\"n\">available</span> <span class=\"n\">even</span> <span class=\"k\">in</span> <span class=\"n\">non</span><span class=\"bp\">-</span><span class=\"n\">login</span> <span class=\"n\">shells</span>\n<span class=\"n\">ENV</span> <span class=\"n\">PATH</span><span class=\"bp\">=</span><span class=\"s2\">\"/home/lean/.elan/bin:/home/lean/.local/bin:$PATH\"</span>\n\n<span class=\"bp\">#</span> <span class=\"n\">install</span> <span class=\"n\">elan</span>\n<span class=\"n\">RUN</span> <span class=\"n\">curl</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">raw.githubusercontent.com</span><span class=\"bp\">/</span><span class=\"n\">Kha</span><span class=\"bp\">/</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">master</span><span class=\"bp\">/</span><span class=\"n\">elan</span><span class=\"bp\">-</span><span class=\"n\">init.sh</span> <span class=\"bp\">-</span><span class=\"n\">sSf</span> <span class=\"bp\">|</span> <span class=\"n\">sh</span> <span class=\"bp\">-</span><span class=\"n\">s</span> <span class=\"c1\">-- -y &amp;&amp; \\</span>\n    <span class=\"bp\">.</span> <span class=\"bp\">~/.</span><span class=\"n\">profile</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"bp\">\\</span>\n    <span class=\"n\">elan</span> <span class=\"n\">toolchain</span> <span class=\"n\">uninstall</span> <span class=\"n\">stable</span>\n\n<span class=\"n\">RUN</span> <span class=\"n\">git</span> <span class=\"n\">clone</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lake</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"bp\">\\</span>\n    <span class=\"n\">cd</span> <span class=\"n\">lake</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"bp\">\\</span>\n    <span class=\"bp\">./</span><span class=\"n\">build.sh</span>\n\n<span class=\"n\">ENV</span> <span class=\"n\">PATH</span><span class=\"bp\">=</span><span class=\"s2\">\"/home/lean/lake/build/bin/:$PATH\"</span>\n\n<span class=\"bp\">#</span> <span class=\"n\">Clone</span> <span class=\"n\">the</span> <span class=\"bp\">`</span><span class=\"n\">test</span><span class=\"bp\">-</span><span class=\"n\">mathport</span><span class=\"bp\">`</span> <span class=\"n\">repository.</span>\n<span class=\"n\">RUN</span> <span class=\"n\">git</span> <span class=\"n\">clone</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"bp\">-</span><span class=\"n\">mathport</span>\n<span class=\"n\">WORKDIR</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"bp\">-</span><span class=\"n\">mathport</span>\n\n<span class=\"n\">RUN</span> <span class=\"n\">make</span> <span class=\"n\">download</span><span class=\"bp\">-</span><span class=\"n\">release</span>\n<span class=\"n\">RUN</span> <span class=\"n\">lake</span> <span class=\"n\">build</span>\n</code></pre></div>",
        "id": 255517081,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632977331
    },
    {
        "content": "<p>(Perhaps it's better to remove the last line, then create a terminal in the generated image and run <code>lake build</code> by hand.)</p>",
        "id": 255517126,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632977369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I'll try to take a look at this and debug what I can tomorrow (i.e., in ~10-12 hours).</p>",
        "id": 255520072,
        "sender_full_name": "Mac",
        "timestamp": 1632979868
    },
    {
        "content": "<p>Thanks. If there's anything I should try out or investigate, please tell me. I know no one likes a heisenbug. :-(</p>",
        "id": 255520107,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632979910
    },
    {
        "content": "<p>is it possible / does it help to run in single threaded mode?</p>",
        "id": 255520185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632979964
    },
    {
        "content": "<p>not even sure if lake has an option for that</p>",
        "id": 255520210,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632979987
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> that is not possible with <code>lake</code> currently</p>",
        "id": 255520216,
        "sender_full_name": "Mac",
        "timestamp": 1632979993
    },
    {
        "content": "<p><code>lake -j 1</code> says it doesn't know about <code>-j</code>.</p>",
        "id": 255520217,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632979994
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> FYI here are a few other issues I hit with Lake. I didn't take the time to make repros in case they are easy to fix, but happy to if it would help:</p>\n<ul>\n<li><code>lake clean</code> throws an error if build directory doesn't exist yet</li>\n<li>I sometimes need to manually link against a lean dependency, despite it being listed as a dependency</li>\n<li>when depending on a cpp project, I need to manually extend CPATH to include the include directory of the relevant lean version</li>\n<li>lake doesn't seem to return an error when builds fail. This one has burned me a bunch of times, because I usually have commands like <code>make &amp;&amp; reset &amp;&amp; do-thing-that-might-fail-in-20m</code>. And then it fails in 20m for the same reason it failed last time and I don't even see the compiler errors.</li>\n<li>minor/cosmetic: <code>lake build bin</code> silently doesn't build the binary, same with build lib. This causes the same kind of issue as the previous point where I don't know my binary is stale.</li>\n</ul>",
        "id": 255579335,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1633010644
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"230999\">Daniel Selsam</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mathport.20depending.20on.20mathlib/near/255579335\">said</a>:</p>\n<blockquote>\n<ul>\n<li><code>lake clean</code> throws an error if build directory doesn't exist yet</li>\n</ul>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> is that how <code>IO.removeDirAll</code> is intended to work? I was under the impression it was served as a <code>rm -rf</code> not a <code>rm -r</code> (i.e., it be the inverse of <code>IO.createDIrAll</code>). I can of course fix this (by checking the directory exists), but I just wanted to verify that this was the intent for <code>IO.removeDirAll</code> (and if so, that should also probably be included in the comment for the function).</p>",
        "id": 255632959,
        "sender_full_name": "Mac",
        "timestamp": 1633029954
    },
    {
        "content": "<p>Sounds like a bug</p>",
        "id": 255633484,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633030146
    },
    {
        "content": "<p>Wait no I misunderstood, even the argument path does not exist? I'd expect it to fail then, yes. I'd have to check if the corresponding Rust API, and others, does so as well.</p>",
        "id": 255634488,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633030526
    },
    {
        "content": "<p>Technically speaking, the act of removal cannot succeed if the thing to be removed does not exist</p>",
        "id": 255634607,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633030565
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> okay, makes sense, just wanted to verify</p>",
        "id": 255634705,
        "sender_full_name": "Mac",
        "timestamp": 1633030609
    },
    {
        "content": "<p>For real fun, see <a href=\"https://github.com/rust-lang/rust/issues/29497\">https://github.com/rust-lang/rust/issues/29497</a></p>",
        "id": 255634929,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633030685
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"230999\">Daniel Selsam</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mathport.20depending.20on.20mathlib/near/255579335\">said</a>:</p>\n<blockquote>\n<ul>\n<li>I sometimes need to manually link against a lean dependency, despite it being listed as a dependency</li>\n<li>when depending on a cpp project, I need to manually extend CPATH to include the include directory of the relevant lean version</li>\n</ul>\n</blockquote>\n<p>Could you make issues for these two? I need a mwe for the first one to figure out what is happening there and the later is a feature request that I will need to decide how (and if) I will address it.</p>",
        "id": 255665959,
        "sender_full_name": "Mac",
        "timestamp": 1633044814
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mathport.20depending.20on.20mathlib/near/255665959\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"230999\">Daniel Selsam</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mathport.20depending.20on.20mathlib/near/255579335\">said</a>:</p>\n<blockquote>\n<ul>\n<li>I sometimes need to manually link against a lean dependency, despite it being listed as a dependency</li>\n<li>when depending on a cpp project, I need to manually extend CPATH to include the include directory of the relevant lean version</li>\n</ul>\n</blockquote>\n<p>Could you make issues for these two? I need a mwe for the first one to figure out what is happening there and the later is a feature request that I will need to decide how (and if) I will address it.</p>\n</blockquote>\n<p>I will try. The second is easy but the first is triggered by a complex project currently.</p>",
        "id": 255666347,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1633045047
    },
    {
        "content": "<p>I made <a href=\"https://github.com/leanprover/lake/issues/17\">https://github.com/leanprover/lake/issues/17</a> to track my problem with running <code>lake build</code> on the mathport artifacts.</p>",
        "id": 255667515,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633045741
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"230999\">Daniel Selsam</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mathport.20depending.20on.20mathlib/near/255579335\">said</a>:</p>\n<blockquote>\n<ul>\n<li><code>lake clean</code> throws an error if build directory doesn't exist yet</li>\n<li>lake doesn't seem to return an error when builds fail. This one has burned me a bunch of times, because I usually have commands like <code>make &amp;&amp; reset &amp;&amp; do-thing-that-might-fail-in-20m</code>. And then it fails in 20m for the same reason it failed last time and I don't even see the compiler errors.</li>\n<li>minor/cosmetic: <code>lake build bin</code> silently doesn't build the binary, same with build lib. This causes the same kind of issue as the previous point where I don't know my binary is stale.</li>\n</ul>\n</blockquote>\n<p>These 3 are now fixed in master.</p>",
        "id": 255672089,
        "sender_full_name": "Mac",
        "timestamp": 1633048725
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mathport.20depending.20on.20mathlib/near/255665959\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"230999\">Daniel Selsam</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mathport.20depending.20on.20mathlib/near/255579335\">said</a>:</p>\n<blockquote>\n<ul>\n<li>I sometimes need to manually link against a lean dependency, despite it being listed as a dependency</li>\n</ul>\n</blockquote>\n<p>I need a mwe for the first one to figure out what is happening there</p>\n</blockquote>\n<p>Unfortunately, I can now remove the extra linking argument in my project and it still builds. I have no idea how to reproduce it any more. Maybe it was accidentally fixed in a lake commit between what I am running now and what I was running when I hit the error.</p>",
        "id": 255672460,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1633049020
    }
]