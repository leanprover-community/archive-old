[
    {
        "content": "<p>The following are <code>#align</code>ed in <code>Mathlib/Init/Control/Combinators.lean</code> - is that right?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">list.mmap'</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">unit</span>\n<span class=\"kd\">def</span> <span class=\"n\">mapM'</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 313369657,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1669926359
    },
    {
        "content": "<p>I might have slipped in an extra apostrophe somewhere</p>",
        "id": 313379142,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1669929453
    },
    {
        "content": "<p>Yes, usually the primed versions are the \"return nothing\" versions.</p>",
        "id": 313380115,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669929808
    },
    {
        "content": "<p>really? not the Haskell convention of lazy vs strict?</p>",
        "id": 313547121,
        "sender_full_name": "Arien Malec",
        "timestamp": 1670001299
    },
    {
        "content": "<p>Nope. There's no such distinction here.</p>",
        "id": 313549166,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670001857
    },
    {
        "content": "<p>The naming convention for \"return nothing\" map functions is <code>forM</code></p>",
        "id": 313552076,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670002667
    },
    {
        "content": "<p>e.g <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.forM#doc\">docs4#List.forM</a></p>",
        "id": 313552198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670002697
    },
    {
        "content": "<p>Is there a \"return nothing\" version of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.foldrM#doc\">docs4#List.foldrM</a> / <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.foldrm\">docs#list.foldrm</a>?</p>",
        "id": 313552978,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670002906
    },
    {
        "content": "<p>No, I don't think there is a more efficient implementation than <code>l.reverse.forM ...</code> anyway</p>",
        "id": 313553186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670002967
    },
    {
        "content": "<p>actually I guess <code>foldrM</code> is a bit more different than that</p>",
        "id": 313553582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670003071
    },
    {
        "content": "<p>Unlike <code>discard &lt;| mapM</code>, I don't really see the advantage of having a separate function for <code>discard &lt;| foldrM</code> since you have to construct the final state <code>s</code> anyway because you have to pass it through the list</p>",
        "id": 313553776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670003127
    },
    {
        "content": "<p>Haskell uses underlines for the \"return nothing\" version, iirc.</p>",
        "id": 313792686,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1670151758
    }
]