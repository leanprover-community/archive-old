[
    {
        "content": "<p>In</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `LeftInverse g f` means that g is a left inverse to f. That is, `g ∘ f = id`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">LeftInverse</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n\n<span class=\"sd\">/-- `RightInverse g f` means that g is a right inverse to f. That is, `f ∘ g = id`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">RightInverse</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">LeftInverse</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n\n<span class=\"sd\">/-- `α ≃ β` is the type of functions from `α → β` with a two-sided inverse. -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Equiv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n  <span class=\"n\">invFun</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:</span> <span class=\"n\">LeftInverse</span> <span class=\"n\">invFun</span> <span class=\"n\">toFun</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:</span> <span class=\"n\">RightInverse</span> <span class=\"n\">invFun</span> <span class=\"n\">toFun</span>\n\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"s2\">\" ≃ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Equiv</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Equiv</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">toFun</span><span class=\"o\">⟩</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">≃</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">e.invFun</span><span class=\"o\">,</span> <span class=\"n\">e.toFun</span><span class=\"o\">,</span> <span class=\"n\">e.right_inv</span><span class=\"o\">,</span> <span class=\"n\">e.left_inv</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">apply_symm_apply</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">e.symm</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>The goal at the final <code>_</code> pretty prints as <code>toFun e (toFun (Equiv.symm e) x) = x</code> rather than just as <code>e (e.symm x)</code>. That is, it doesn't use either the coercion or the dot notation in pretty printing. I hadn't really noticed this before. What can we do about this?</p>",
        "id": 310973163,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668842780
    },
    {
        "content": "<p>Does <code>attribute [coe] Equiv.toFun</code> help?</p>",
        "id": 311006420,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668859371
    },
    {
        "content": "<p>No, that results in <code>toFun e x</code> being printed as <code>↑x</code>, which isn't what we want at all. <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>, do you know if we have a solution for this?</p>",
        "id": 311722696,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669156845
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/113488-general/topic/Please.20stop.20adding.20generalized.20API.20around.20coercions/near/311508319\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Please.20stop.20adding.20generalized.20API.20around.20coercions/near/311508319</a></p>",
        "id": 311723956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669157454
    },
    {
        "content": "<p>You should probably implement <code>FunLike</code> for <code>Equiv</code>.</p>",
        "id": 311723980,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1669157468
    },
    {
        "content": "<p>We have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">EquivLike</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">toFun</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">invFun</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">left_inv</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">right_inv</span>\n  <span class=\"n\">coe_injective'</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">e₁</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">e₂</span><span class=\"bp\">;</span> <span class=\"n\">congr</span>\n</code></pre></div>",
        "id": 311725226,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669158039
    },
    {
        "content": "<p>it already has it <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span></p>",
        "id": 311725242,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1669158048
    },
    {
        "content": "<p>Oh, so maybe we need to <em>remove</em> the <code>instance : CoeFun (α ≃ β) fun _ =&gt; α → β := ⟨toFun⟩</code> that comes immediately afterwards.</p>",
        "id": 311725505,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669158148
    },
    {
        "content": "<p>That causes a few errors, but it's clear the coercion already exists.</p>",
        "id": 311725540,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669158163
    },
    {
        "content": "<p>Right, we want all function coercions of <code>FunLike</code> things to be <code>FunLike.coe</code>.</p>",
        "id": 311726611,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1669158688
    },
    {
        "content": "<p>Things are looking better. Still one error. I had to add <code>Simps.apply</code> in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- See Note [custom simps projection] -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Simps.apply</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">e</span>\n<span class=\"kd\">def</span> <span class=\"n\">Simps.symm_apply</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">e.symm</span>\n</code></pre></div>",
        "id": 311727088,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669158961
    },
    {
        "content": "<p>Does it lint yet?</p>",
        "id": 311727230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669159009
    },
    {
        "content": "<p>Adding</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">left_inv'</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Function.LeftInverse</span> <span class=\"n\">e.symm</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">e.left_inv</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">right_inv'</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Function.RightInverse</span> <span class=\"n\">e.symm</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">e.right_inv</span>\n</code></pre></div>\n<p>(i.e. written in terms of the coercions) allows fixing the last errors.</p>",
        "id": 311727835,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669159329
    },
    {
        "content": "<p>This explains some weird issues I was seeing in <a href=\"https://github.com/leanprover-community/Mathlib4/pull/674\">Mathlib4#674</a></p>",
        "id": 311733381,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669162313
    },
    {
        "content": "<p>The coe delaborator bug has been fixed in Std</p>",
        "id": 311736855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669164506
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/pretty.20printing.20Equiv/near/311727835\">said</a>:</p>\n<blockquote>\n<p>Adding</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">left_inv'</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Function.LeftInverse</span> <span class=\"n\">e.symm</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">e.left_inv</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">right_inv'</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Function.RightInverse</span> <span class=\"n\">e.symm</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">e.right_inv</span>\n</code></pre></div>\n<p>(i.e. written in terms of the coercions) allows fixing the last errors.</p>\n</blockquote>\n<p>I'm pretty sure we already have those lemmas with different names</p>",
        "id": 317940212,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672053608
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.left_inverse_symm\">docs#equiv.left_inverse_symm</a></p>",
        "id": 317940365,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672053687
    }
]