[
    {
        "content": "<p>We could stick that on <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instOfNat#doc\">docs4#instOfNat</a> I guess</p>",
        "id": 319680855,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672956229
    },
    {
        "content": "<p>Unfortunately <code>Data.Fin.Basic</code> is now full of workarounds for what we had before, so it's a bit tricky for me to test out my change</p>",
        "id": 319681021,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672956305
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EFin.2EBasic.20.28mathlib4.231084.29/near/317450264\">said</a>:</p>\n<blockquote>\n<p>Is that true? Lean 3 didn't use mod here so it was irrelevant how it was defined</p>\n</blockquote>\n<p>I misdiagnosed this; the cause is that in Lean3, this is true:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat.mod</span> <span class=\"mi\">0</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>but in Lean4, it's not</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat.mod</span> <span class=\"mi\">0</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>What prevents us using the Lean3 definition of mod here?</p>",
        "id": 319683008,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672957229
    },
    {
        "content": "<p>For comparison, the two definitions are (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.mod\">docs#nat.mod</a>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">mod_core</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">fuel</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">mod_core</span> <span class=\"n\">fuel</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">mod</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat.mod_core</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.mod#doc\">docs4#Nat.mod</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">mod</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">@&amp;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"k\">then</span>\n    <span class=\"n\">Nat.mod</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">y</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">x</span>\n<span class=\"n\">decreasing_by</span> <span class=\"n\">apply</span> <span class=\"n\">div_rec_lemma</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n</code></pre></div>",
        "id": 319683088,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672957272
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.mod#doc\">docs4#Nat.mod</a> -- bleurgh it's in core</p>",
        "id": 319683360,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672957390
    },
    {
        "content": "<p>Yeah, so I guess my question should have been \"would MSR care if we pushed for the definition we used to have?\"</p>",
        "id": 319683557,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672957463
    },
    {
        "content": "<p>Because if we have the old definition, then <code>Fin.val 0 = 0</code> is true by rfl</p>",
        "id": 319683619,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672957494
    },
    {
        "content": "<p>Actually we used to have the lean 4 definition in lean 3 (definition by well founded recursion), it was refactored in community lean because the fuel based definition evaluates by rfl and in decidable instances</p>",
        "id": 319684674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672957972
    },
    {
        "content": "<p>Is that an argument for doing the same in Lean4, or is the claim that Lean4 achieves those goals without the refactor?</p>",
        "id": 319684775,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672958017
    },
    {
        "content": "<p>lean4 does not achieve those goals without the refactor, but also refactoring everything to avoid well founded recursion is not a sustainable solution</p>",
        "id": 319684896,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672958059
    },
    {
        "content": "<p>div/mod just happen to be especially important definitions</p>",
        "id": 319684957,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672958086
    },
    {
        "content": "<p>I think we would rather have a solution which allows well founded recursions to compute by rfl, without unfolding proofs</p>",
        "id": 319685028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672958118
    },
    {
        "content": "<p>Is there any disadvantage to the Lean3 spelling?</p>",
        "id": 319685065,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672958147
    },
    {
        "content": "<p>it's not as good for the compiler, although in this particular case that's probably not a problem since the definition is overridden anyway</p>",
        "id": 319685162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672958183
    },
    {
        "content": "<p>right now the main disadvantage seems to be that it's not the same as the lean 4 spelling. What is the motivation behind changing the definition?</p>",
        "id": 319685175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672958189
    },
    {
        "content": "<p>you don't want the compiled code to actually have a fuel variable</p>",
        "id": 319685182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672958198
    },
    {
        "content": "<p>Kevin, are you asking what my motivation is for changing it back or Leo's for the version that's different from Lean3?</p>",
        "id": 319685210,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672958216
    },
    {
        "content": "<p>I guess I'm asking why Leo changed it but I guess actually he didn't change it, we changed it.</p>",
        "id": 319685340,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672958281
    },
    {
        "content": "<p>I think the only difficulty in changing the definition In Lean4 to match Lean3 is we have to reprove <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.mod_eq#doc\">docs4#Nat.mod_eq</a>; and that's only difficult because I've never written a Lean4 proof before</p>",
        "id": 319686081,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672958579
    },
    {
        "content": "<p>What does the <code>@&amp; Nat</code> mean in the definition? Is this to do with <code>@[extern]</code>?</p>",
        "id": 319686408,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672958719
    },
    {
        "content": "<p>it's a borrow annotation, these are only relevant for <code>@[extern]</code>s</p>",
        "id": 319686471,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672958746
    },
    {
        "content": "<p>It does not make any type theoretic difference, it's just meta data in an Expr tree</p>",
        "id": 319686553,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672958766
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EFin.2EBasic.20.28mathlib4.231084.29/near/319686081\">said</a>:</p>\n<blockquote>\n<p>I think the only difficulty in changing the definition In Lean4 to match Lean3 is we have to reprove <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.mod_eq#doc\">docs4#Nat.mod_eq</a>; and that's only difficult because I've never written a Lean4 proof before</p>\n</blockquote>\n<p>Isn't that proof in lean 3 already? You should be able to use the mathported lean 3 proof</p>",
        "id": 319686805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672958889
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.mod_eq\">docs#nat.mod_eq</a> doesn't exist</p>",
        "id": 319686821,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672958899
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.mod_def\">docs#nat.mod_def</a></p>",
        "id": 319686877,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672958923
    },
    {
        "content": "<p>I wonder if we can make a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.mod_eq#doc\">align#nat.mod_def</a> linkifier</p>",
        "id": 319687023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672958991
    },
    {
        "content": "<p>How can I find the mathport output? Based on what you said in the meeting, mathport removes its own output once someone ports it</p>",
        "id": 319687144,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672959024
    },
    {
        "content": "<p>it's in the <a href=\"https://github.com/leanprover-community/mathlib3port\">mathlib3port</a> repo</p>",
        "id": 319687189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672959047
    },
    {
        "content": "<p>Do I have to go back to an old commit?</p>",
        "id": 319687228,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672959061
    },
    {
        "content": "<p>Or does \"mathport output\" not mean the same thing as \"stuff in mathlib3port\"?</p>",
        "id": 319687276,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672959085
    },
    {
        "content": "<p>I'm confused by the question. mathport output means stuff in mathlib3port, but you will see the <code>#print</code>s in new (post-port) commits, not old ones</p>",
        "id": 319687395,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672959128
    },
    {
        "content": "<p>Either way, I found the code at <a href=\"https://github.com/leanprover-community/lean3port/blob/master/Leanbin/Init/Data/Nat/Lemmas.lean#L1318-L1345\">https://github.com/leanprover-community/lean3port/blob/master/Leanbin/Init/Data/Nat/Lemmas.lean#L1318-L1345</a></p>",
        "id": 319687698,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672959248
    },
    {
        "content": "<p>The <code>·</code> syntax is unfortunately causing trouble</p>",
        "id": 319687768,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672959278
    },
    {
        "content": "<p>what trouble?</p>",
        "id": 319688104,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672959423
    },
    {
        "content": "<p>I get \"expected command\" if  I paste that output in the file in coer</p>",
        "id": 319688334,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672959509
    },
    {
        "content": "<p>I would guess it's using syntax that isn't available yet there</p>",
        "id": 319688347,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672959518
    },
    {
        "content": "<p>the dot syntax is available in core, but <code>induction'</code> isn't</p>",
        "id": 319688745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672959683
    },
    {
        "content": "<p>everything else looks ok</p>",
        "id": 319688798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672959713
    },
    {
        "content": "<p>24 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/Nat.2Emod.200.20n.20.3D.200.20no.20longer.20true.20by.20rfl\">#mathlib4 &gt; Nat.mod 0 n = 0 no longer true by rfl</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 319695132,
        "sender_full_name": "Notification Bot",
        "timestamp": 1672962886
    },
    {
        "content": "<p>This file is now error free, except for the last 10 lines:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Note that here we are disabling the \"safety\" of reflected, to allow us to reuse `nat.mk_numeral`.</span>\n<span class=\"c1\">-- The usual way to provide the required `reflected` instance would be via rewriting to prove that</span>\n<span class=\"c1\">-- the expression we use here is equivalent.</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"n\">semireducible</span><span class=\"o\">]</span> <span class=\"n\">reflected</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">instance</span> <span class=\"n\">reflect</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">has_reflect</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">finZeroElim</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">nat.mk_numeral</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"n\">q</span><span class=\"o\">((</span><span class=\"kd\">by</span> <span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n.succ</span><span class=\"o\">)))</span>\n        <span class=\"n\">q</span><span class=\"o\">((</span><span class=\"kd\">by</span> <span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n.succ</span><span class=\"o\">)))</span> <span class=\"n\">q</span><span class=\"o\">((</span><span class=\"kd\">by</span> <span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n.succ</span><span class=\"o\">)))</span> <span class=\"bp\">∘</span>\n      <span class=\"n\">Fin.val</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">fin.reflect</span> <span class=\"n\">fin.reflect</span>\n</code></pre></div>",
        "id": 319754712,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673001513
    },
    {
        "content": "<p><code>#lookup3 has_reflect</code> doesn't give me output. What is the Lean 4 equivalent of <code>has_reflect</code>?</p>",
        "id": 319754754,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673001537
    },
    {
        "content": "<p>meta code = ignore</p>",
        "id": 319754930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673001610
    },
    {
        "content": "<p>just remove it</p>",
        "id": 319754980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673001632
    },
    {
        "content": "<p>(we should <code>#noalign has_reflect</code> to make this clearer)</p>",
        "id": 319755061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673001670
    },
    {
        "content": "<p>Where should we <code>#noalign</code> ?</p>",
        "id": 319755369,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673001792
    },
    {
        "content": "<p>same place as the lean 3 definition</p>",
        "id": 319755545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673001851
    },
    {
        "content": "<p>which is core, I guess?</p>",
        "id": 319755597,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673001876
    },
    {
        "content": "<p>Somehow <code>Mathlib.Init</code> is really hard for people to discover</p>",
        "id": 319755654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673001899
    },
    {
        "content": "<p>actually it's probably in the meta code in init so there is probably a heading for it in <code>Mathlib.Init.Align</code></p>",
        "id": 319755753,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673001938
    },
    {
        "content": "<p>Is the convention to <code>#noalign</code> <code>Fin.reflect</code> too?</p>",
        "id": 319756111,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673002053
    },
    {
        "content": "<p>instances are usually not aligned unless they are referred to by name in lean 3</p>",
        "id": 319756536,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673002205
    },
    {
        "content": "<p>The <code>reflect</code> instances seem to always be given explicit names</p>",
        "id": 319757168,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673002472
    },
    {
        "content": "<p>If we don't align instances, doesn't that mean we can't use mathport to check if we ported them?</p>",
        "id": 319757240,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673002503
    },
    {
        "content": "<p>mathport currently can't provide <code>#align</code> statements for instances even if it wanted to because it doesn't know the instance naming convention</p>",
        "id": 319757845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673002700
    },
    {
        "content": "<p>Doesn't understand the mathlib3 or mathlib4 conventions?</p>",
        "id": 319758452,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673002948
    },
    {
        "content": "<p>Presumably it has access to the mathlib3 name by inspection?</p>",
        "id": 319758482,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673002965
    },
    {
        "content": "<p>it doesn't</p>",
        "id": 319758652,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673003030
    },
    {
        "content": "<p>it's part of a general class of issues due to the fact that we don't know for a given syntax which declarations correspond to it, unless we have something like an identifier <code>foo</code> in <code>def foo</code> to give us a hint where to look</p>",
        "id": 319758802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673003087
    },
    {
        "content": "<p>I'd like to fix this by adding some landmarks in the tlean file corresponding to the beginning of a new command</p>",
        "id": 319758907,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673003131
    },
    {
        "content": "<p>so that we can say that everything between one landmark and the next is \"owned\" by that command and synport can combine that with the AST info to list all the <code>#align</code> commands needed</p>",
        "id": 319759057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673003191
    },
    {
        "content": "<p>that will fix <code>to_additive</code>, <code>simps</code>, <code>alias</code> and lots of other commands that add declarations in a weird way</p>",
        "id": 319759108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673003218
    },
    {
        "content": "<p>There are four simpNF linting errors left.</p>",
        "id": 319762501,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673004536
    },
    {
        "content": "<p>With two, the linter claimes <code>simp can prove this</code>. But if you try <code>by simp</code> then it actually fails.</p>",
        "id": 319762563,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673004559
    },
    {
        "content": "<p>Can we minimise and open a std4 issue if there is not already an issue? I remember writing one at some point but then not tracking it</p>",
        "id": 319763019,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673004723
    },
    {
        "content": "<p>I dunno how to do that. If some expert can take a look at these final four errors, that would be great.</p>",
        "id": 319763878,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673005042
    },
    {
        "content": "<p>Is there any reason to keep the AdHoc version around:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/1084/files#diff-c18192a96f99c01756605bb84a74796b3842d271b2afed5aa23f62a241853dc9\">https://github.com/leanprover-community/mathlib4/pull/1084/files#diff-c18192a96f99c01756605bb84a74796b3842d271b2afed5aa23f62a241853dc9</a></p>",
        "id": 319797667,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673017051
    },
    {
        "content": "<p>I would be happy to ditch it.</p>",
        "id": 319797691,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673017058
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 319798039,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673017148
    },
    {
        "content": "<p>I have no opinion</p>",
        "id": 319798874,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673017342
    },
    {
        "content": "<p>I think you created the file. So if you don't care, let's remove it.</p>",
        "id": 319798944,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673017363
    },
    {
        "content": "<p>Looks like it dates back to <a href=\"https://github.com/leanprover-community/mathlib4/pull/84\">mathlib4#84</a>, but Scott moved some things there in my <a href=\"https://github.com/leanprover-community/mathlib4/pull/729\">mathlib4#729</a></p>",
        "id": 319800105,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673017763
    },
    {
        "content": "<p>Well, if someone needs it, we know where to find it.</p>",
        "id": 319800261,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673017820
    },
    {
        "content": "<p>There's a weird CI build failure: <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/3856247402/jobs/6572230703\">https://github.com/leanprover-community/mathlib4/actions/runs/3856247402/jobs/6572230703</a></p>\n<p>I can't reproduce it locally</p>",
        "id": 319800335,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673017852
    },
    {
        "content": "<p>Ooh, actually I can reproduce. But I'm very surprised by the fact that this PR breaks <code> Mathlib.Testing.SlimCheck.Sampleable</code></p>",
        "id": 319800623,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673017943
    },
    {
        "content": "<p>Maybe that depended on the ad hoc port?</p>",
        "id": 319800950,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673018049
    },
    {
        "content": "<p>In a pretty bad way, if that's the case</p>",
        "id": 319800983,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673018064
    },
    {
        "content": "<p><code>Mathlib.Mathport.Syntax</code> is also broken, it seems</p>",
        "id": 319801339,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673018174
    },
    {
        "content": "<p>Ooh, maybe it isn't, and the output in the logs was just garbled up</p>",
        "id": 319801772,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673018329
    },
    {
        "content": "<p>I have to stop for a bit. If someone else wants to fix these, that would be great.</p>",
        "id": 319805661,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673019646
    },
    {
        "content": "<p>The broken files seem to be</p>\n<ul>\n<li><code>Mathlib.Testing.SlimCheck.Sampleable</code></li>\n<li><code>Mathlib.Data.UInt</code></li>\n</ul>",
        "id": 319805783,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673019687
    },
    {
        "content": "<p>The AdHoc port contains</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">AddMonoidWithOne</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">__</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">AddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n  <span class=\"n\">natCast</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Fin.ofNat'</span> <span class=\"n\">n</span> <span class=\"n\">Fin.size_positive'</span>\n  <span class=\"n\">natCast_zero</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">natCast_succ</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">Fin.ofNat'_succ</span>\n</code></pre></div>\n<p>whereas the ported files has</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">AddMonoidWithOne</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">Fin.addCommMonoid</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">natCast</span> <span class=\"o\">:=</span> <span class=\"n\">Fin.ofNat</span>\n    <span class=\"n\">natCast_zero</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">natCast_succ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eq_of_veq</span> <span class=\"o\">(</span><span class=\"n\">add_mod</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 319926027,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673083706
    },
    {
        "content": "<p>This causes trouble in <code>Mathlib.Data.UInt</code>.</p>",
        "id": 319926047,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673083716
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> what do we do?</p>",
        "id": 319926054,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673083726
    },
    {
        "content": "<p>Didn't the ad hoc port mention this in a comment?</p>",
        "id": 319926116,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673083763
    },
    {
        "content": "<p>Ooh, maybe it did...</p>",
        "id": 319926160,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673083788
    },
    {
        "content": "<p>the adhoc port version seems more flexible. Don't we have something like this in <code>data.zmod</code>?</p>",
        "id": 319926244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673083810
    },
    {
        "content": "<p>could we maybe try a backport?</p>",
        "id": 319926275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673083836
    },
    {
        "content": "<p>Alternatively, do we need the uint code right now?</p>",
        "id": 319926313,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673083876
    },
    {
        "content": "<p>We don't (for mathlib), but it is likely to move to std so we should try not to make any decisions mutually exclusive with it</p>",
        "id": 319926425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673083927
    },
    {
        "content": "<p>Ok, I'll switch to the nonempty instance and add a porting note.</p>",
        "id": 319926469,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673083952
    },
    {
        "content": "<p>I've pulled in some of the stuff from the AdHoc port</p>",
        "id": 319929475,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673085525
    },
    {
        "content": "<p>But <code>Data.UInt</code> still has errors</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">genIntDeclars</span> <span class=\"n\">UInt8</span>\n<span class=\"n\">genIntDeclars</span> <span class=\"n\">UInt16</span>\n<span class=\"n\">genIntDeclars</span> <span class=\"n\">UInt32</span>\n<span class=\"n\">genIntDeclars</span> <span class=\"n\">UInt64</span>\n<span class=\"n\">genIntDeclars</span> <span class=\"n\">USize</span>\n</code></pre></div>",
        "id": 319929513,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673085548
    },
    {
        "content": "<p>This is some macro with pretty mysterious error reporting.</p>",
        "id": 319929555,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673085561
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Could you please take a look? I have no clue at all what we want this file to look like.</p>",
        "id": 319929742,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673085616
    },
    {
        "content": "<p>I believe the macro is just a fancy copy-paste which proves the same theorems for each size of integer</p>",
        "id": 319930105,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673085775
    },
    {
        "content": "<p>a trick to get better error messages is to find/replace <code>$typeName</code> with <code>UInt8</code> and then remove the syntax quotation and macro declaration to make it just a bunch of regular definitions</p>",
        "id": 319930475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673085948
    },
    {
        "content": "<p>I can't really help with the error message without more context though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- set_option hygiene false</span>\n<span class=\"c1\">-- /-- `genIntDeclars UInt8` generates a `CommRing UInt8` instance.  -/</span>\n<span class=\"c1\">-- local macro \"genIntDeclars\" typeName:ident : command =&gt; do</span>\n<span class=\"c1\">--   `(</span>\n    <span class=\"kn\">namespace</span> <span class=\"n\">UInt8</span>\n      <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">size</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n        <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"n\">Fin.ofNat'</span> <span class=\"mi\">0</span> <span class=\"n\">size_positive</span>\n\n      <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">AddSemigroup</span> <span class=\"n\">UInt8</span> <span class=\"n\">where</span>\n        <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">AddSemigroup.add_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">]</span>\n\n      <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">AddCommSemigroup</span> <span class=\"n\">UInt8</span> <span class=\"n\">where</span>\n        <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">AddCommSemigroup.add_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">]</span>\n\n      <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Semigroup</span> <span class=\"n\">UInt8</span> <span class=\"n\">where</span>\n        <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Semigroup.mul_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>we get some errors here saying it can't find <code>?a + ?b + ?c</code>, I guess some typeclasses have been redefined or something</p>",
        "id": 319930953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673086170
    },
    {
        "content": "<p>I got everything working by using a less weird proof for those instances, the only thing that is still broken is here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"n\">UInt8</span> <span class=\"n\">where</span>\n        <span class=\"n\">sub_eq_add_neg</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"n\">congrArg</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">sub_eq_add_neg</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n        <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">eq_of_val_eq</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">neg_def</span><span class=\"o\">,</span> <span class=\"n\">add_def</span><span class=\"o\">,</span> <span class=\"n\">zero_def</span><span class=\"o\">]</span>\n        <span class=\"n\">intCast</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Int.cast</span> <span class=\"n\">n</span><span class=\"o\">⟩</span>\n        <span class=\"n\">intCast_ofNat</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n        <span class=\"n\">intCast_negSucc</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>the <code>⟨Int.cast n⟩</code> doesn't work because it is looking for <code>IntCast (Fin size)</code> where <code>size</code> is <code>UInt8.size</code>, i.e. 256</p>",
        "id": 319932481,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673086902
    },
    {
        "content": "<p>Previously this worked because of a previous instance of <code>Inhabited (Fin size)</code> together with the instance you mentioned above</p>",
        "id": 319932585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673086932
    },
    {
        "content": "<p>So maybe we need to grab even more from the AdHoc port?</p>",
        "id": 319932590,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673086936
    },
    {
        "content": "<p>I'm not sure what you did exactly to the instances, but we need to know that <code>Fin n</code> is a ring when <code>n &gt; 0</code></p>",
        "id": 319932669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673086979
    },
    {
        "content": "<p>we need to spell <code>n &gt; 0</code> somehow but it can't be <code>n := n' + 1</code> because we want to use things like <code>UInt8.size</code> which are not syntactically of that form</p>",
        "id": 319932758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673087023
    },
    {
        "content": "<p>The way that was used in the adhoc file was <code>Nonempty (Fin n)</code></p>",
        "id": 319932823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673087048
    },
    {
        "content": "<p>we can also use <code>Fact (0 &lt; n)</code> once that is ported</p>",
        "id": 319932838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673087060
    },
    {
        "content": "<p>I think I did <code>CommSemiRing</code></p>",
        "id": 319932928,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673087125
    },
    {
        "content": "<p>So that will explain the failure.</p>",
        "id": 319932941,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673087133
    },
    {
        "content": "<p>I pushed my fixes for everything other than the missing <code>Ring (Fin n)</code> instance</p>",
        "id": 319933178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673087252
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EFin.2EBasic.20.28mathlib4.231084.29/near/319929742\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> Could you please take a look? I have no clue at all what we want this file to look like.</p>\n</blockquote>\n<p>I added the macro after doing the original version of <code>Fin</code> some time ago when a lot of things were still in the experimentation phase. The convenience factor was that you wouldn't have to track down every integer size when there was a change/experiment implicating one of the items in the macro or its dependencies.</p>\n<p>FWIW I agree with Mario that once you guys are relatively happy with the interface for the UInt types, the UX is probably nicer if there are individual non-macro definitions. Rust left these kinds of macro invocations in the source and it is frustrating sometimes to be directed to that in the docs.</p>",
        "id": 319933266,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1673087288
    },
    {
        "content": "<p>I was thinking the macro could be improved by doing it all in one command, something like <code>run_cmd for typeName in [`UInt8, ...] do elabCommand `(...)</code> since I think the error messages will go to the right place in that case</p>",
        "id": 319933441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673087377
    },
    {
        "content": "<p>or we can declare a fancier macro-macro to fix the error messages</p>",
        "id": 319933564,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673087412
    },
    {
        "content": "<p>in principle there isn't anything stopping this kind of pattern from being just as usable as any other command</p>",
        "id": 319933646,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673087458
    },
    {
        "content": "<p>it's just not worth investing too much on a macro that is used only once</p>",
        "id": 319933805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673087528
    },
    {
        "content": "<p>I'll look into improving the macro.</p>",
        "id": 319933858,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1673087561
    },
    {
        "content": "<p>Another related work is <code>@[to_additive]</code>, which is also doing a similar copy paste job. We could have a version of <code>to_additive</code> which replaces <code>UInt8</code> stuff by <code>UIntN</code></p>",
        "id": 319934470,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673087874
    },
    {
        "content": "<p>Hurray! Errors are gone</p>",
        "id": 319935012,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673088140
    },
    {
        "content": "<p>CI gives a green <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></p>",
        "id": 319944461,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673092411
    },
    {
        "content": "<p>Does that adhoc port AddMonoidWirhOne instance create a diamond with the OfNat instance in core?</p>",
        "id": 319945660,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673092965
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I have absolutely no clue.</p>",
        "id": 319957005,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673098092
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EFin.2EBasic.20.28mathlib4.231084.29/near/319926275\">said</a>:</p>\n<blockquote>\n<p>could we maybe try a backport?</p>\n</blockquote>\n<p>I really think we should do this, rather than doing the refactor in the port and hoping that it won't cause us trouble later. If we do all the hard work refactoring in Lean3, then mathport will do all the lean4 work for us. If we do the refactoring in Lean4, we won't know whether it works everywhere until the port is done</p>",
        "id": 320021923,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673139302
    },
    {
        "content": "<p>I'm not yet convinced that we should switch to <code>Nonempty (Fin n)</code> in the first place.<br>\n<span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Why is the ad hoc port of <code>Data/UInt.lean</code> doing something different from the Lean 3 version of the file?</p>",
        "id": 320041644,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673159348
    },
    {
        "content": "<p>again, if we only have an instance of <code>Fin (n + 1)</code> then <code>Fin size</code> doesn't work</p>",
        "id": 320041661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673159383
    },
    {
        "content": "<p><code>Data.UInt</code> is a new file, not a port</p>",
        "id": 320041666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673159399
    },
    {
        "content": "<p><code>UInt8</code> didn't exist in lean 3</p>",
        "id": 320041722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673159417
    },
    {
        "content": "<p>I'm not saying we need to use <code>Nonempty (Fin n)</code>, but we need something isomorphic to it: <code>Inhabited (Fin n)</code>, <code>Fact (0 &lt; n)</code>, <code>NeZero n</code> are all possible alternatives</p>",
        "id": 320041853,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673159533
    },
    {
        "content": "<p>that is, a typeclass on <code>n</code> that says it is not zero</p>",
        "id": 320041866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673159550
    },
    {
        "content": "<p>otherwise you get things like this (using the lean 4 core instance, which is defined for <code>Fin (n+1)</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">UInt8.size</span><span class=\"o\">)</span>\n<span class=\"c1\">-- failed to synthesize instance</span>\n<span class=\"c1\">--   OfNat (Fin UInt8.size) 1</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"c1\">-- failed to synthesize instance</span>\n<span class=\"c1\">--   OfNat (Fin UInt8.size) 1</span>\n</code></pre></div>",
        "id": 320041990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673159754
    },
    {
        "content": "<p>Can we delete <code>UInt</code> and add it back (along with the needed refactor) after the port? It sounds like the ad hoc stuff just gets in the way of porting here</p>",
        "id": 320056946,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673172577
    },
    {
        "content": "<p>I don't think this is a constructive approach to new lean 4 features. This is like saying we can't be bothered to implement <code>ByteString</code> theorems because it wasn't there in lean 3</p>",
        "id": 320057871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673173215
    },
    {
        "content": "<p>If anything, the file is a candidate to move to std, but that doesn't solve any of the problems you are talking about and I don't want mathlib to make it impossible to have this file</p>",
        "id": 320057969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673173297
    },
    {
        "content": "<p>this is not an ad hoc port, it is a new file</p>",
        "id": 320058018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673173323
    },
    {
        "content": "<p>I don't think we should spend any time thinking about ByteString theorems until the port is done</p>",
        "id": 320058823,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673173927
    },
    {
        "content": "<p>I don't think it is mathlib's call to say what other projects are doing</p>",
        "id": 320059247,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673174260
    },
    {
        "content": "<p>you are talking about restricting not just mathlib but also core/std here</p>",
        "id": 320059336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673174299
    },
    {
        "content": "<p>you may as well say lean 4 itself is getting in the way of the port. Which I suppose is true but overcoming those hurdles is exactly the point of porting</p>",
        "id": 320059408,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673174380
    },
    {
        "content": "<p>We have new primitives now. We need to deal with it</p>",
        "id": 320059547,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673174481
    },
    {
        "content": "<p>I think the thing that I don't get here is why mathlib4 <em>during its porting stage</em> needs to provide any theorems about <code>UintXX</code></p>",
        "id": 320062791,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673176656
    },
    {
        "content": "<p>Generalizing things in a way that works with new Lean4 primitives (from core / std) is great, but if those primitives aren't used anywhere in mathlib then why bother solving that before the port is done?</p>",
        "id": 320062880,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673176703
    },
    {
        "content": "<p>I am totally fine with moving this file out of mathlib. But if it moves to std we'll have the same theorems and the same instances causing the same problems. Maybe it will be easier to handle the problem if it is considered \"out of our hands\" in that way, but it's mostly just a shell game. But I don't want us to drop the theorems without replacement or moving them somewhere upstream, and I don't want std picking up said theorems to make it incompatible with mathlib, so in the end we still have to deal with the fallout.</p>",
        "id": 320072092,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673182173
    },
    {
        "content": "<blockquote>\n<p>in the end we still have to deal with the fallout.</p>\n</blockquote>\n<p>I completely agree; I just think mid-port is not the time to do this because it risks creating fallout for the &gt;80% of mathlib that we haven't tried to port yet</p>",
        "id": 320073945,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673183213
    },
    {
        "content": "<p>Is there anyone who has the time and energy to attempt to backport this refactor of <code>Fin n</code> to mathlib3?</p>",
        "id": 320172598,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673253996
    },
    {
        "content": "<p>I'll give it a go. What do I have to do?</p>",
        "id": 320173412,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673254311
    },
    {
        "content": "<p>The instances for <code>Fin n</code> being a ring or having numerals etc should depend on an instance of <code>ne_zero n</code>, rather than being hard-coded to <code>Fin (n+1)</code></p>",
        "id": 320176462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673255334
    },
    {
        "content": "<p>I think the relevant code is partly in core which is one of the reasons it wasn't refactored earlier</p>",
        "id": 320176556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673255365
    },
    {
        "content": "<p>Since <code>ne_zero</code> is not available in core, I think we can also use <code>nonempty (fin n)</code>.</p>",
        "id": 320177281,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673255648
    },
    {
        "content": "<p>That shouldn't make too much of a difference.</p>",
        "id": 320177319,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673255670
    },
    {
        "content": "<p>One thing to note is that the it sounds like in Lean 4 we're going to end up with a <code>Fin n.succ</code> instance in core, and a <code>Fin n</code> instance in mathlib</p>",
        "id": 320177614,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673255802
    },
    {
        "content": "<p>I think they'll be defeq so this isn't an issue</p>",
        "id": 320177684,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673255825
    },
    {
        "content": "<p>But it means that we don't need to backport to lean 3 core, only to mathlib 3</p>",
        "id": 320177712,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673255838
    },
    {
        "content": "<p>Could I just add the <code>ne_zero</code> instance in mathlib and make sure it's defeq?</p>",
        "id": 320179673,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673256506
    },
    {
        "content": "<p>And leave core alone?</p>",
        "id": 320179692,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673256513
    },
    {
        "content": "<p>I think that's what Eric is suggesting.</p>",
        "id": 320180296,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673256745
    },
    {
        "content": "<p>The only slight downside of that approach is that the lemmas in core like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.val_zero\">docs#fin.val_zero</a> refer to the weaker instance. I think we ignore those lemmas anyway though.</p>",
        "id": 320188915,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673259432
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/18107\">https://github.com/leanprover-community/mathlib/pull/18107</a></p>",
        "id": 320198224,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673262337
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> Thanks a lot! Did you already test locally whether it compiles?</p>",
        "id": 320198714,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673262509
    },
    {
        "content": "<p>No</p>",
        "id": 320198737,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673262517
    },
    {
        "content": "<p>Also, can't you golf <code>one_mul</code> using <code>mul_comm</code>?</p>",
        "id": 320198753,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673262522
    },
    {
        "content": "<p>I know the data/fin folder compiles though</p>",
        "id": 320198828,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673262546
    },
    {
        "content": "<p>A while back, I started this refactor, <a href=\"https://github.com/leanprover-community/mathlib/tree/pechersky/fin-nontrivial\">branch#pechersky/fin-nontrivial</a></p>",
        "id": 320214473,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1673267567
    },
    {
        "content": "<p>The PR now builds locally</p>",
        "id": 320226044,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673271084
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EFin.2EBasic.20.28mathlib4.231084.29/near/320214473\">said</a>:</p>\n<blockquote>\n<p>A while back, I started this refactor, <a href=\"https://github.com/leanprover-community/mathlib/tree/pechersky/fin-nontrivial\">branch#pechersky/fin-nontrivial</a></p>\n</blockquote>\n<p><a href=\"#narrow/stream/113488-general/topic/Generalizing.20fin.20away.20from.20.28n.20.2B.201.29/near/292340551\">Here's</a> the previous discussion</p>",
        "id": 320227244,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673271430
    },
    {
        "content": "<p>I had vague recollections of objections, but it seems that all of them are resolved by <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ne_zero\">docs#ne_zero</a> now existing</p>",
        "id": 320227632,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673271532
    },
    {
        "content": "<p>I've almost fixed <code>norm_num</code> to fix the tests that are breaking <a href=\"https://github.com/leanprover-community/mathlib/pull/18107\">#18107</a>. However one of the tests uses <code>guard_target</code> which tests alpha equivalence of expressions so it is a very tough test to pass because all the instances have to be equal up to alpha equivalence. Is there a more sensible version of <code>guard_target</code>?</p>",
        "id": 320258684,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673279198
    },
    {
        "content": "<p>Would de-instancing the core instances (either in <code>data/fin/basic.lean</code> or in the test) help with that?</p>",
        "id": 320261658,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673279910
    },
    {
        "content": "<p>Not really. There was a difference in the <code>ne_zero</code> instance for some numeral as well.</p>",
        "id": 320263663,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673280410
    },
    {
        "content": "<p>I just made a <code>guard_target\\_2</code> that unfolded reducibles.</p>",
        "id": 320263734,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673280435
    },
    {
        "content": "<p><code>guard_target</code> is configurable to use either syntactic equality, alpha equiv, reducible defeq, or regular defeq. If it is not reasonable to ask for alpha equiv then you should just downgrade the test to whnfR</p>",
        "id": 320274483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673282995
    },
    {
        "content": "<p>(Oh, is this lean 3 you are talking about? In lean 3 there are other variants of <code>guard_target</code> which offer these different matching behaviors)</p>",
        "id": 320274726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673283054
    },
    {
        "content": "<p>I couldn't find the one with the behaviour I wanted</p>",
        "id": 320283751,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673285485
    },
    {
        "content": "<p>You probably want either <code>guard_target_mod_implicit</code> or <code>guard_target'</code></p>",
        "id": 320284665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673285750
    },
    {
        "content": "<p>I think <code>guard_target_mod_implicit</code> is the closest I guess.</p>",
        "id": 320285959,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673286116
    },
    {
        "content": "<p>By the way, how does expression matching work on instances. Will it match if it's a different path to the same instance as long as its defeq or something close to that?</p>",
        "id": 320286204,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673286185
    },
    {
        "content": "<p>IIRC expression matching matches the exact term</p>",
        "id": 320286254,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673286203
    },
    {
        "content": "<p>Or they can be unified I suppose</p>",
        "id": 320286264,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673286206
    },
    {
        "content": "<p>So instances are never something you should match on</p>",
        "id": 320286283,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673286212
    },
    {
        "content": "<p>Then this <code>norm_fin</code> is kind of flaky</p>",
        "id": 320286321,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673286224
    },
    {
        "content": "<p>What I'd recommend is matching with a wildcard <code>%%inst</code>, then <a href=\"https://leanprover-community.github.io/mathlib_docs/find/unify\">docs#unify</a> <code>inst</code> with the expected instance to check it's a sensible one</p>",
        "id": 320286503,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673286264
    },
    {
        "content": "<p>(or maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_defeq\">docs#is_defeq</a>, I don't remember the difference)</p>",
        "id": 320286595,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673286294
    },
    {
        "content": "<p>In lean 3 there are a fair number of tactics that match on instances, to decide whether to do the nat thing or the int thing. I'm not sure it's worth changing them at this point</p>",
        "id": 320287034,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673286416
    },
    {
        "content": "<p>Can you point to one?</p>",
        "id": 320287093,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673286436
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.norm_fin.match_fin/src\">src#tactic.norm_fin.match_fin</a> is probably what Chris is talking about</p>",
        "id": 320287499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673286559
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.norm_num.eval_cast/src\">src#tactic.norm_num.eval_cast</a></p>",
        "id": 320287716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673286620
    },
    {
        "content": "<p>That's going to fail if the term is instead <code>fin.add_monoid_with_one.to_has_one</code>, right?</p>",
        "id": 320287727,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673286623
    },
    {
        "content": "<p>Or does <code>norm_num</code> canonize the instances first?</p>",
        "id": 320287768,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673286639
    },
    {
        "content": "<p>yes, it will fail</p>",
        "id": 320287999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673286707
    },
    {
        "content": "<p>I'm not saying this is great, I'm saying that lean 4 fixes this issue so let's just not worry about it as long as mathlib isn't broken</p>",
        "id": 320288203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673286747
    },
    {
        "content": "<p>Yep, here's a repro:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.norm_fin</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.defs</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_lt</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid_with_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">foo</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span> <span class=\"c1\">-- fail</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"c1\">-- ok</span>\n</code></pre></div>",
        "id": 320288682,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673286880
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/18107\">#18107</a> is now broken by a deterministic timeout in <code>ring_theory/adjoin_root</code></p>",
        "id": 320387078,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673334293
    },
    {
        "content": "<p>Seems <code>@[simps]</code> of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/adjoin_root.power_basis_aux'\">docs#adjoin_root.power_basis_aux'</a> should be removed.</p>",
        "id": 320412757,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1673344686
    },
    {
        "content": "<p>Seems like a legit use of <code>simps</code> to me? But you determined that it is causing the timeout?</p>",
        "id": 320413264,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673344889
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span></p>",
        "id": 320413276,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673344892
    },
    {
        "content": "<p>There is no <code>@[simps]</code> for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/adjoin_root.power_basis_aux\">docs#adjoin_root.power_basis_aux</a>.</p>",
        "id": 320413742,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1673345063
    },
    {
        "content": "<p>Yeah, but looking at the definition, it doesn't look like it would create nice simp-lemmas.</p>",
        "id": 320413910,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673345124
    },
    {
        "content": "<p>So to me it seems reasonable that one has <code>simps</code> and the other does not.</p>",
        "id": 320413984,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673345150
    },
    {
        "content": "<p>It does cause the timeout and seems the generated lemmas are not used, however.  I'm not sure if there is a better solution.</p>",
        "id": 320416441,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1673345973
    },
    {
        "content": "<p>Chris moves the <code>simps</code> to after the defn. Let's see if that helps.</p>",
        "id": 320416687,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673346036
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/compare/fin_refactor...fin_refactor2?expand=1\">https://github.com/leanprover-community/mathlib/compare/fin_refactor...fin_refactor2?expand=1</a><br>\nAlso I tried to use <code>ne_zero n</code> for <code>fin.last</code> as well, but seems it may not a good idea. <code>fin.last</code> is used a lot in mathlib. I'm not sure if this change helps.</p>",
        "id": 320417938,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1673346369
    },
    {
        "content": "<p>The power_basis simps can be quite slow, I've sometimes written them by hand instead of using simps for this sad reason :/</p>",
        "id": 320420190,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1673347158
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455791\">Yuyang Zhao</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EFin.2EBasic.20.28mathlib4.231084.29/near/320417938\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/compare/fin_refactor...fin_refactor2?expand=1\">https://github.com/leanprover-community/mathlib/compare/fin_refactor...fin_refactor2?expand=1</a><br>\nAlso I tried to use <code>ne_zero n</code> for <code>fin.last</code> as well, but seems it may not a good idea. <code>fin.last</code> is used a lot in mathlib. I'm not sure if this change helps.</p>\n</blockquote>\n<p>I don't think this is a clear win; <code>coe (fin last n) = n</code> is currently true by rfl, which is nice</p>",
        "id": 320430470,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673350795
    },
    {
        "content": "<p>We can always revisit it after the port</p>",
        "id": 320430538,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673350807
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EFin.2EBasic.20.28mathlib4.231084.29/near/320287034\">said</a>:</p>\n<blockquote>\n<p>In lean 3 there are a fair number of tactics that match on instances, to decide whether to do the nat thing or the int thing. I'm not sure it's worth changing them at this point</p>\n</blockquote>\n<p>Fixed in <a href=\"https://github.com/leanprover-community/mathlib/pull/18129\">#18129</a> for <code>norm_num</code> and <code>abel</code>.</p>",
        "id": 320693467,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673441039
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> bumped this PR to match the backports that he did in mathlib 3.</p>",
        "id": 320929572,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673527822
    },
    {
        "content": "<p>Who wants to review it? (I worked on this PR quite a bit, so I think I shouldn't be the main reviewer.)</p>",
        "id": 320929660,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673527845
    },
    {
        "content": "<p>The one issue is a breakage in Data.UInt</p>",
        "id": 320929670,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673527848
    },
    {
        "content": "<p>There were changed to this file in master and the PR branch, so I accepted the changes in master but this broke everything. Maybe someone who understands this file can have a look, or I'll have a proper go after lunch</p>",
        "id": 320929811,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673527903
    },
    {
        "content": "<p>I think this should be ready now</p>",
        "id": 320948150,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673532902
    },
    {
        "content": "<p>I've added a dummy commit so that we can compare again with the mathport output</p>",
        "id": 320948718,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673533063
    },
    {
        "content": "<p>Does it makes sense to temporarily change the base commit such that review can be against that diff?</p>",
        "id": 320952171,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673533947
    },
    {
        "content": "<p>We're reviewing it right now.</p>",
        "id": 320952634,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673534069
    },
    {
        "content": "<p>Let's do a final review against your dummy commit after that.</p>",
        "id": 320952710,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673534081
    },
    {
        "content": "<p>I just finished a review with a bunch of naming fixes, now lgtm (though I haven't been following this thread closely)</p>",
        "id": 320956582,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673535026
    },
    {
        "content": "<p>We're heading to some seminar. So if someone else wants to do the final review, please go ahead.</p>",
        "id": 320957200,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673535171
    },
    {
        "content": "<p>There are some <code>fin</code> which should be modified to <code>Fin</code> in comments.</p>",
        "id": 320962673,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1673536502
    },
    {
        "content": "<p>I will directly fix those and give a commit if nobody's working on it</p>",
        "id": 320963465,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1673536694
    },
    {
        "content": "<p>Yes please go ahead.</p>",
        "id": 320966659,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673537444
    },
    {
        "content": "<p>Actually I already committed the fix. Now comment looks good to me, except at line 35 I missed one <code>nat</code>..</p>",
        "id": 320967031,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1673537527
    },
    {
        "content": "<p>I fixed that one and some other occurrences of <code>nat</code>.</p>",
        "id": 320968005,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673537803
    },
    {
        "content": "<p>Should <code>cast_nat_eq_last</code> be <code>cast_Nat_eq_last</code>?</p>",
        "id": 320968372,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1673537889
    },
    {
        "content": "<p>No, in a <code>snake_case_name</code>, the individual components always start with a lowercase letter</p>",
        "id": 320969068,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673538059
    },
    {
        "content": "<p>Then I guess the comments are now all good!</p>",
        "id": 320969224,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1673538105
    },
    {
        "content": "<p>I'll have another look over the diff with mathport</p>",
        "id": 320969284,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673538121
    },
    {
        "content": "<p>Are we ready to swap the diffbase so that we can more accurately review against that?</p>",
        "id": 320969453,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673538158
    },
    {
        "content": "<p>I'm going to assume yes, based on <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>'s comment above. Hopefully it's easy to switch back anyway.</p>",
        "id": 320969937,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673538293
    },
    {
        "content": "<p>Yes, I think you can</p>",
        "id": 320973417,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673539169
    },
    {
        "content": "<p>Done already and left some comments</p>",
        "id": 320973464,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673539180
    },
    {
        "content": "<p>The add hoc port seems to have made a bunch of other refactors re moving lemmas around, and I think we should probably discard them to avoid more confusion in docstream files</p>",
        "id": 320973689,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673539222
    },
    {
        "content": "<p>For instance, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.comm_semiring\">docs#fin.comm_semiring</a> lives in <code>data.zmod.defs</code> in mathlib, but in <code>data.fin.basic</code> in the ad-hoc port</p>",
        "id": 320973884,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673539275
    },
    {
        "content": "<p>I've spotted another ad-hoc refactor that we should probably backport</p>",
        "id": 320994559,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673544876
    },
    {
        "content": "<p>The adhoc <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.add_comm_monoid\">docs#fin.add_comm_monoid</a> implements a custom <code>nsmul</code> that is not defeq to the one in mathlib3</p>",
        "id": 320994618,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673544894
    },
    {
        "content": "<p>That's probably easier to fix on the mathlib4 side, right?</p>",
        "id": 321007409,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673548539
    },
    {
        "content": "<p>Also, we can move the port of <code>fin.comm_semiring</code> out of <code>Data.Fin.Basic</code> into <code>Data.Zmod.AdHocDefs</code>, and then import that file in <code>Data.UInt</code>.</p>",
        "id": 321007567,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673548582
    },
    {
        "content": "<p>That way we don't have to change mathlib3 <em>right now</em>.</p>",
        "id": 321007621,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673548609
    },
    {
        "content": "<p>I'm done pushing <a href=\"https://github.com/leanprover-community/mathlib4/pull/1084/files/46242de060dee20a69e0c8da062b7cf6899d9b9d..7e76bca0b9d9bd35385d7ce6c8a756fd853d8249\">changes</a> for now</p>",
        "id": 321008074,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673548761
    },
    {
        "content": "<blockquote>\n<p>That's probably easier to fix on the mathlib4 side, right?</p>\n</blockquote>\n<p>You mean the nsmul change? Yes, we can almost certainly just revert it</p>",
        "id": 321008116,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673548781
    },
    {
        "content": "<p>I imagine a lot of ad-hoc things diverge from mathlib3 because someone said \"I have a clean slate, let's try something different\"</p>",
        "id": 321008216,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673548808
    },
    {
        "content": "<p>Which was fine when mathlib4 was ad-hoc, but is in my opinion a bad idea now we're trying to faithfully port mathlib3.</p>",
        "id": 321008328,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673548846
    },
    {
        "content": "<p>So I'd be very tempted to just rename all ad-hoc files to <code>Some/FileAdHoc.lean</code> so that this doesn't happen with other files, assuming there are still adhoc ports left</p>",
        "id": 321008435,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673548881
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EFin.2EBasic.20.28mathlib4.231084.29/near/321007567\">said</a>:</p>\n<blockquote>\n<p>Also, we can move the port of <code>fin.comm_semiring</code> out of <code>Data.Fin.Basic</code> into <code>Data.Zmod.AdHocDefs</code>, and then import that file in <code>Data.UInt</code>.</p>\n</blockquote>\n<p>I moved these<del>, but then discovered <code>Data.UInt</code> doesn't even use these instances! Should we rewrite <code>Data.Uint</code> so that it does, write a TODO comment, or just drop them?</del></p>",
        "id": 321009369,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673549154
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> So, do you think it is merge-ready now?</p>",
        "id": 321012695,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673550190
    },
    {
        "content": "<p>Was the verdict that I should revert the ad-hoc nsmul refactor, rather than ask someone to backport it?</p>",
        "id": 321012839,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673550226
    },
    {
        "content": "<p>Yes, that sounds good to me</p>",
        "id": 321012977,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673550261
    },
    {
        "content": "<p>(note also that we definitely should not merge without first switching the base branch back!)</p>",
        "id": 321013020,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673550280
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EFin.2EBasic.20.28mathlib4.231084.29/near/321012977\">said</a>:</p>\n<blockquote>\n<p>Yes, that sounds good to me</p>\n</blockquote>\n<p>Done</p>",
        "id": 321014895,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673550984
    },
    {
        "content": "<p>Just <a href=\"https://github.com/leanprover-community/mathlib4/pull/1084#discussion_r1068470154\">this comment</a> left of mine to resolve</p>",
        "id": 321015027,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673551040
    },
    {
        "content": "<p>I think someone else should:</p>\n<ul>\n<li>Do a final pass over the diff looking for accidental changes (implicit/explicit arguments, switches from <code>n.succ</code> to <code>n+1</code>). This would be a lot easier if someone could run <code>mathport</code>'s oneshot.</li>\n<li>change the base commit</li>\n<li>merge</li>\n</ul>",
        "id": 321015218,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673551111
    },
    {
        "content": "<p>Can we just rewrite history, and make your current base commit part of the history of the original PR?</p>",
        "id": 321017277,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673551722
    },
    {
        "content": "<p>I think it makes a lot of sense to preserve that as part of the PR history</p>",
        "id": 321017370,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673551747
    },
    {
        "content": "<p>Changing the base doesn't change the history</p>",
        "id": 321018276,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673552004
    },
    {
        "content": "<p>And the current base commit is already in the history</p>",
        "id": 321018300,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673552015
    },
    {
        "content": "<p>Github is happy to show a diff, as in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1084#issuecomment-1374574000\">this comment</a>; it's just not possible to comment on that diff, which is why I wanted to change the base. We could put that link the PR header</p>",
        "id": 321018563,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673552095
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EFin.2EBasic.20.28mathlib4.231084.29/near/321017370\">said</a>:</p>\n<blockquote>\n<p>I think it makes a lot of sense to preserve that as part of the PR history</p>\n</blockquote>\n<p>I do wonder if we want a mechanism such that we can do this for all PRs easily</p>",
        "id": 321018925,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673552213
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EFin.2EBasic.20.28mathlib4.231084.29/near/321015027\">said</a>:</p>\n<blockquote>\n<p>Just <a href=\"https://github.com/leanprover-community/mathlib4/pull/1084#discussion_r1068470154\">this comment</a> left of mine to resolve</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> If this comment needs action, I'll make a seperate PR to fix it.</p>",
        "id": 321020394,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673552671
    },
    {
        "content": "<p>I've kicked the PR on the queue</p>",
        "id": 321020415,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673552680
    },
    {
        "content": "<p>Ooh snap. We need to update <code>Mathlib.lean</code></p>",
        "id": 321020558,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673552727
    },
    {
        "content": "<p>There was also <a href=\"https://github.com/leanprover-community/mathlib4/pull/1084#discussion_r1064035754\">this comment</a> but it's minor</p>",
        "id": 321021516,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673553027
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1521\">mathlib4#1521</a> fixes the <code>ofNat</code> thing</p>",
        "id": 321092684,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673592986
    }
]