[
    {
        "content": "<p>I'm currently working on <code>Algebra.Ring.Basic</code> (<a href=\"https://github.com/leanprover-community/mathlib4/pull/1077\">mathlib4#1077</a>) and I could use a bit of help for the following things:</p>\n<ul>\n<li>do we have <code>assert_not_exists</code> in Lean4? It was here to prevent mathlib3 PRs from messing with imports, so should I just get rid of it?</li>\n<li>the linter complains that I added no doc to the <code>map_add</code> field of <code>RingEquivClass</code>. I could add a doc of course, but the fact that the linter complains suggest that it is treated as a <code>def</code> not a <code>lemma</code>. Is there a way to fix that?</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">RingEquivClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"kd\">extends</span>\n  <span class=\"n\">MulEquivClass</span> <span class=\"n\">F</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">where</span>\n  <span class=\"n\">map_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">b</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">ring_equiv_class</span> <span class=\"n\">RingEquivClass</span>\n</code></pre></div>\n<ul>\n<li>lots of lemmas which used to be tagged <code>simp</code> now trigger the <code>simpNF</code> linter. I think this is because coercions are fully expanded, and this expanded form exhibits terms that aren't in <code>simp</code> normal form. But somehov it even feels wrong that <code>simp</code> gets to see these expanded terms, is that realy the optimal solution?</li>\n</ul>",
        "id": 316479424,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1671292930
    },
    {
        "content": "<p><code>assert_not_exists</code> wasn't created solely to support  porting, it was created to mitigate a problem that was spotted as a side-effect of porting.</p>",
        "id": 316482926,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671294825
    },
    {
        "content": "<p>Someone should probably port the tactic, but it's probably fine to leave behind TODOs for now</p>",
        "id": 316482989,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671294844
    },
    {
        "content": "<p>Did you remove the shortcut <code>CoeFun</code> instance?</p>",
        "id": 316483024,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671294866
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Algebra.2ERing.2EEquiv.20help.20request/near/316483024\">said</a>:</p>\n<blockquote>\n<p>Did you remove the shortcut <code>CoeFun</code> instance?</p>\n</blockquote>\n<p>I did because it was removed for <code>MulEquiv</code> (I think?)</p>",
        "id": 316484054,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1671295349
    },
    {
        "content": "<p>Possibly related: <a href=\"https://github.com/leanprover-community/mathlib4/pull/931\">https://github.com/leanprover-community/mathlib4/pull/931</a> .</p>",
        "id": 316506914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671308652
    },
    {
        "content": "<p>Yes, please leave all <code>assert_not_exists</code> in place, commented out, with a <code>-- Porting note: not implemented yet</code>.</p>",
        "id": 316563003,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671357711
    },
    {
        "content": "<p>Answering your other questions:</p>\n<ul>\n<li>We've decided that doc-strings for fields of structures are valuable, whether they are defs or theorems, but yes, it would be nice if these were theorems.</li>\n<li>Re: coercions fully expanded: that ship has sailed. :-)</li>\n</ul>",
        "id": 317053829,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671576372
    },
    {
        "content": "<blockquote>\n<p>coercions fully expanded: that ship has sailed</p>\n</blockquote>\n<p>Well, it would have been surprising if we didn't meet any problems during the port!<br>\nI think I have a potential solution, but I'd like to hear from experts before trying it further. Since <code>simp</code> doesn't go through definition, I would suggest that instances of the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">SomeHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CoeTC</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">CorrespondingHomType</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n      <span class=\"n\">some</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">other</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">fields</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">}⟩</span>\n</code></pre></div>\n<p>get replaced by </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[coe]</span>\n<span class=\"kd\">def</span> <span class=\"n\">SomeHomClass.toCorrespondingHomType</span> <span class=\"o\">[</span><span class=\"n\">SomeHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CorrespondingHomType</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">some</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">other</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">fields</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">SomeHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CoeTC</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">CorrespondingHomType</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">SomeHomClass.toCorrespondingHomType</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>That way there is no problem anymore since <code>simp</code> doesn't unfold the new <code>SomeHomClass.toCorrespondingHomType</code> definition (which just gets printed as a coercion).</p>\n<p>Incidentally, this also fix the <code>@[norm_cast]</code> problem I was experiencing <a href=\"#narrow/stream/287929-mathlib4/topic/norm_cast.3A.20badly.20shaped.20lemma\">there</a></p>\n<p>Does it look wrong?</p>",
        "id": 317172807,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1671633247
    },
    {
        "content": "<p>simp does not know anything about the <code>@[coe]</code> attribute</p>",
        "id": 317172888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671633275
    },
    {
        "content": "<p>Right it's just that it doesn't unfold the definition</p>",
        "id": 317173149,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1671633343
    },
    {
        "content": "<p>but your suggestion looks correct, in the sense that you should never have a complicated term in a <code>Coe</code> instance because it is unfolded at parse time and no one wants to see that stuff</p>",
        "id": 317173276,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671633367
    },
    {
        "content": "<p>we should probably have a linter for this</p>",
        "id": 317173387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671633404
    },
    {
        "content": "<p>So should I have a go at doing that for all of these instances? We already have quite a few, just type <code>instCoeTC</code> in the search bar and at least the ten first definitions follow this pattern</p>",
        "id": 317174117,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1671633601
    },
    {
        "content": "<p>Maybe <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> and <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> want to be aware of this</p>",
        "id": 317174262,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1671633629
    },
    {
        "content": "<p>Your suggestion looks like a reasonable way to translate what we have in mathlib3; I still dislike these instances for other reasons, but that's not something that makes sense to address while porting</p>",
        "id": 317177121,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671634379
    },
    {
        "content": "<p>Okay so I did all of these changes in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1150\">mathlib4#1150</a>. Now the linter complains that <code>f.toFun</code> (for <code>f : α →+* β</code>) is not in simp normal form (in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingHom.toFun_eq_coe#doc\">docs4#RingHom.toFun_eq_coe</a>) because it really means <code>f.toMonoidHom.toOneHom.toFun</code> and <code>f.toMonoidHom</code> can be simplified to <code>MonoidHomClass.toMonoidHom f</code>... I notice a lot of these <code>toFun_eq_coe</code> have been removed in other files (by <span class=\"user-mention\" data-user-id=\"416472\">@Winston Yin</span> in particular), should I do the same here. That feels right to me in the sense that we know which of these lemmas are useful in Lean3, but it doesn't make any sense to bother about them if we aren't even sure they'll actually be used, but I don't want to take that kind of decision.</p>",
        "id": 317202195,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1671641367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Algebra.2ERing.2EEquiv.20help.20request/near/317202195\">said</a>:</p>\n<blockquote>\n<p>and <code>f.toMonoidHom</code> can be simplified to <code>MonoidHomClass.toMonoidHom f</code></p>\n</blockquote>\n<p>This is one of the things I don't like about these coercion instances...</p>",
        "id": 317202851,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671641548
    },
    {
        "content": "<p>I would caution against removing any lemma entirely, but we could remove <code>simp</code> and add a porting note</p>",
        "id": 317202892,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671641563
    },
    {
        "content": "<p>There's also the option of abandoning new-style classes for morphisms (ie, not using <code>extends</code> at all); then <code>f.toFun</code> would really mean <code>f.toFun</code>  and there would be no <code>f.toMonoidHom</code>.</p>",
        "id": 317202965,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671641587
    },
    {
        "content": "<p>For now I'll remove the <code>simp</code>. I don't feel competent at all to make big design decisions here <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 317203336,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1671641708
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1150\">mathlib4#1150</a> is now ready for review with the changes discussed above. The port of <code>Algebra.Ring.Equiv</code> <a href=\"https://github.com/leanprover-community/mathlib4/pull/1077\">mathlib4#1077</a> now depends on it</p>",
        "id": 317214863,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1671645181
    },
    {
        "content": "<p>(mathlib4 not matrhlib4)</p>",
        "id": 317215918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671645480
    }
]