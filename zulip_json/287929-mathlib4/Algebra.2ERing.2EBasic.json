[
    {
        "content": "<p>I am very confused: <code>Data.Int.Basic</code> was ported quite recently in <a href=\"https://github.com/leanprover-community/mathlib4/pull/584\">mathlib4#584</a> but it is depending on the ad-hoc port of <code>Algebra.Ring.Basic</code>, so I cannot simply remove the ad-hoc version. What is the correct way to proceed here?</p>",
        "id": 313621790,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1670033108
    },
    {
        "content": "<p>I guess we have to straighten out <code>Data.Int.Basic</code> so it works with the properly ported <code>Algebra.Ring.Basic</code>?</p>",
        "id": 313622784,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670033919
    },
    {
        "content": "<p>I've left it in a state that compiles (and tests), but <code>Algebra.Ring.Basic_old</code> is still very much there, and being used by tactics.</p>",
        "id": 313625503,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670036421
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, would you be able to have a look at this? We had an ad-hoc ported <code>Algebra.Ring.Basic</code>, and the <code>ring</code> tactic relies on this in various ways. However it's now starting to have overlapping material with the \"rising tide\" port. We're having trouble removing the ad-hoc ported material without breaking <code>ring</code>.</p>",
        "id": 313626303,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670037209
    },
    {
        "content": "<p>In this PR Moritz has renamed the old <code>Algebra.Ring.Basic</code> to <code>Algebra.Ring.Basic_old</code>.</p>",
        "id": 313626316,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670037236
    },
    {
        "content": "<p>Some things in it (e.g. CommSemiring \\nat) are now provided elsewhere (<code>Data.Nat.Basic</code>), but some things still need to be done \"ad hoc\".</p>",
        "id": 313626380,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670037275
    },
    {
        "content": "<p>You could either take over this PR, which is fine as far as a port of <code>Algebra.Ring.Basic</code> goes, except now there is duplicated material.</p>",
        "id": 313626394,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670037298
    },
    {
        "content": "<p>wait, that's not the right PR number</p>",
        "id": 313626395,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670037299
    },
    {
        "content": "<p>where am I looking?</p>",
        "id": 313626409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670037310
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/830\">mathlib4#830</a></p>",
        "id": 313626415,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670037319
    },
    {
        "content": "<p>Alternatively we could merge as is, and let you clean up <code>ring</code> / <code>Algebra.Ring.Basic_old</code> separately.</p>",
        "id": 313626447,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670037356
    },
    {
        "content": "<p>duplicated material isn't good, that will cause conflicts. I'd rather not merge it like that</p>",
        "id": 313626751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670037637
    },
    {
        "content": "<p>so the first error I get is missing <code>AddMonoidWithOne â„•</code>, where is the semiring instance?</p>",
        "id": 313626850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670037750
    },
    {
        "content": "<p>oh, that was just an unsaved file. The actual error is a missing <code>CommRing Int</code></p>",
        "id": 313626956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670037859
    },
    {
        "content": "<p>So we don't have a thoroughly-ported <code>CommRing Int</code>.</p>",
        "id": 313627919,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670038916
    },
    {
        "content": "<p>So that part needs to stay in an ad-hoc ported file.</p>",
        "id": 313627971,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670038931
    },
    {
        "content": "<p>yes, this usually happens because theorems are in the wrong place. If you move them to the right place they will probably be above the tide again</p>",
        "id": 313628819,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670039814
    },
    {
        "content": "<p>doesn't that mean that some files that are marked as ported are in fact not complete ports? or is it some imported through tactics nonsense?</p>",
        "id": 313629559,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1670040460
    },
    {
        "content": "<p>Not all imports of ported files are ported. Mathlib4 files might have more imports than their mathlib3 counterparts</p>",
        "id": 313631262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670042293
    },
    {
        "content": "<p>I mean, mathlib4 files import Std / Lean and those are clearly not port files</p>",
        "id": 313631284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670042326
    },
    {
        "content": "<p>I pushed a fix to the branch <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span></p>",
        "id": 313631340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670042370
    },
    {
        "content": "<p>Is a complete list known of files which we're claiming are ported but which in fact are just ad hoc ports of parts of the file and possibly contain other material too? Synchronising those files sounds like it should be high priority.</p>",
        "id": 313643810,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670053868
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Algebra.2ERing.2EBasic/near/313631340\">said</a>:</p>\n<blockquote>\n<p>I pushed a fix to the branch <span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, <code>test/Zify.lean</code> is broken now.</p>",
        "id": 313685936,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670073899
    },
    {
        "content": "<p>fixed <code>zify</code>: the problem was that due to the changed imports it got the wrong coercion (<code>ofNat</code>, not <code>Nat.cast</code>).</p>",
        "id": 313690758,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1670075896
    },
    {
        "content": "<p>Sorry for being slow, I have a very busy weekend..</p>",
        "id": 313690888,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1670075972
    }
]