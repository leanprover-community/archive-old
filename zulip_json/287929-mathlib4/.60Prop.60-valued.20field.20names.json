[
    {
        "content": "<p>Sorry if this has already been established elsewhere. The <a href=\"https://github.com/leanprover-community/mathlib4/wiki#naming-convention\">(WIP) naming convention</a> says that structure fields should be <code>lowerCamelCase</code>, but then theorems should be <code>lower_snake_case</code>. This is a source of inconsistency whenever a <code>Prop</code>-valued field in a structure is exported as a theorem. I advocate that <code>Prop</code>-valued fields of structures should be <code>lower_snake_case</code>, while non-<code>Prop</code> valued ones remain <code>lowerCamelCase</code>. Thoughts?</p>",
        "id": 311933755,
        "sender_full_name": "Winston Yin",
        "timestamp": 1669257408
    },
    {
        "content": "<p>Examples please?</p>",
        "id": 311935232,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669259015
    },
    {
        "content": "<p>Inspired by <a href=\"#narrow/stream/287929-mathlib4/topic/Naming.20for.20prop.20valued.20structure.20fields/near/311938255\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Naming.20for.20prop.20valued.20structure.20fields/near/311938255</a></p>",
        "id": 311938321,
        "sender_full_name": "Winston Yin",
        "timestamp": 1669261708
    },
    {
        "content": "<p>But also in <a href=\"https://github.com/leanprover-community/mathlib4/blob/0422585397b9903eecd59344f4bcf61be948882f/Mathlib/Algebra/Hom/Group.lean#L1565\">this PR</a> and no doubt many more to come</p>",
        "id": 311938433,
        "sender_full_name": "Winston Yin",
        "timestamp": 1669261837
    },
    {
        "content": "<p>I think we should follow the naming convention in the structure field and restate the <code>Prop</code> valued lemmas (is <code>restate_axiom</code> still a thing?) with <code>lower_snake_case</code> after the definition, and maybe <code>#align</code> the original field to the new lemma?</p>",
        "id": 311938440,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1669261852
    },
    {
        "content": "<p>The naming convention also says that references to types and terms are lowerSnakeCase</p>",
        "id": 311938556,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669261991
    },
    {
        "content": "<p>I think that structure fields are not treated specially by the naming convention. It should be named the same as a corresponding restated axiom would</p>",
        "id": 311941521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669264597
    },
    {
        "content": "<p>so for example <code>Equiv</code> has fields <code>Equiv.toFun</code> and <code>Equiv.left_inv</code>, and <code>HasSubset</code> has a field <code>HasSubset.Subset</code></p>",
        "id": 311941542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669264637
    },
    {
        "content": "<p>In this case we should update <a href=\"https://github.com/leanprover-community/mathlib4/wiki#naming-convention\">this section</a> and add an example to clarify this point.</p>",
        "id": 311942550,
        "sender_full_name": "Winston Yin",
        "timestamp": 1669265462
    },
    {
        "content": "<p>I see, it looks like it has been completely rewritten since I last looked at it and the enumeration is not correct</p>",
        "id": 311942779,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669265663
    },
    {
        "content": "<p>Diff says it was <span class=\"user-mention\" data-user-id=\"542196\">@Arien Malec</span> 's changes <a href=\"https://github.com/leanprover-community/mathlib4/wiki/Home/_compare/8a314e011711099b8e33ecc409a1c321eed940b7...2ad892cc5fa549ad860a35bcace411fdb229d91b\">here</a></p>",
        "id": 311943061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669265931
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathport/blob/1dd92f06b987931c8442217f199a76610903515a/Mathport/Binary/TranslateName.lean#L58-L61\">Here's the logic implemented by mathport</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">getExprKind</span> <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">ExprKind</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">try</span> <span class=\"n\">isProp</span> <span class=\"n\">type</span> <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">false</span> <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"n\">ExprKind.eProof</span>\n  <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">try</span> <span class=\"n\">returnsSort</span> <span class=\"n\">type</span> <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">false</span> <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"n\">ExprKind.eSort</span>\n  <span class=\"n\">return</span> <span class=\"n\">ExprKind.eDef</span>\n</code></pre></div>\n<p>The ordering is important: proofs are snake_cased, types are UpperCamelCase, and everything else is lowerCamelCase</p>",
        "id": 311943781,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669266374
    },
    {
        "content": "<p>Ah, I tried to follow the logic in exploding out the cases -- posted to the Zulip when I did it....</p>",
        "id": 311943978,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669266525
    },
    {
        "content": "<p>No worries! Would you mind changing your PR to mathport's convention? I can update the wiki with some examples.</p>",
        "id": 311944147,
        "sender_full_name": "Winston Yin",
        "timestamp": 1669266609
    },
    {
        "content": "<p>The original text was \"We use the convention that definitions of terms are lowerCamelCase, definitions of types (including structures, classes, and Prop-valued definitions) are UpperCamelCase. Theorems are mostly snake_case, but if the the name includes a definition, then that definition is written as lowerCamelCase (for both terms and types).\"</p>",
        "id": 311944329,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669266740
    },
    {
        "content": "<p>I remember this original text, but it certainly could be clearer.</p>",
        "id": 311944378,
        "sender_full_name": "Winston Yin",
        "timestamp": 1669266779
    },
    {
        "content": "<p>Is the new text: \"theorems are snake case\"?</p>",
        "id": 311944478,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669266843
    },
    {
        "content": "<p>Rather than: \"Theorems are mostly snake_case, but if the the name includes a definition, then that definition is written as lowerCamelCase (for both terms and types).\"</p>",
        "id": 311944510,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669266865
    },
    {
        "content": "<ol>\n<li><code>Prop</code>-valued things are <code>lower_snake_case</code></li>\n<li><code>Types</code> are <code>UpperCamelCase</code></li>\n<li>All other terms are <code>lowerCamelCase</code></li>\n<li>When type names like <code>MyStruct</code> are mentioned in a <code>Prop</code>-valued thing, <code>my_lemma_on_myStruct</code><br>\nWith better wording of course</li>\n</ol>",
        "id": 311944825,
        "sender_full_name": "Winston Yin",
        "timestamp": 1669267076
    },
    {
        "content": "<p>Thing = both standalone definitions and fields under a structure</p>",
        "id": 311944933,
        "sender_full_name": "Winston Yin",
        "timestamp": 1669267133
    },
    {
        "content": "<p>Huh...</p>",
        "id": 311944978,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669267164
    },
    {
        "content": "<p>Updated the wiki -- does that work?</p>",
        "id": 311945747,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669267590
    },
    {
        "content": "<p>(also pushed the PR :-)</p>",
        "id": 311945772,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669267612
    },
    {
        "content": "<p>I also guess I've been confused by examples like <code>Option.isSome</code> (which is <code>Bool</code>, not <code>Prop</code>, but...)</p>",
        "id": 311946556,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669268185
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"542196\">Arien Malec</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60Prop.60-valued.20field.20names/near/311946556\">said</a>:</p>\n<blockquote>\n<p>(which is <code>Bool</code>, not <code>Prop</code>, but...)</p>\n</blockquote>\n<p>yes, that's the operative difference</p>",
        "id": 311946624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669268248
    },
    {
        "content": "<p><code>and : Bool -&gt; Bool -&gt; Bool</code> but <code>And : Prop -&gt; Prop -&gt; Prop</code></p>",
        "id": 311946644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669268272
    },
    {
        "content": "<p>If it was a prop it would be called <code>Option.IsSome</code></p>",
        "id": 311946731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669268313
    },
    {
        "content": "<p>To clarify point (1) <span class=\"user-mention\" data-user-id=\"416472\">@Winston Yin</span> , it is not Prop-valued things but proofs, i.e. things whose type's type is <code>Prop</code></p>",
        "id": 311946898,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669268412
    },
    {
        "content": "<p>Thanks. I'll clarify this in the wiki</p>",
        "id": 311949831,
        "sender_full_name": "Winston Yin",
        "timestamp": 1669270462
    },
    {
        "content": "<p>Wiki updated, with some new examples. Feel free to clarify further</p>",
        "id": 311953056,
        "sender_full_name": "Winston Yin",
        "timestamp": 1669272702
    },
    {
        "content": "<p>The examples <code>neZero_iff</code> and <code>MonoidHom.to_oneHom_injective</code> have <code>sorry</code> as the type, which makes it impossible to tell whether the naming convention is actually being followed</p>",
        "id": 311953538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669273064
    },
    {
        "content": "<p>the example of a manual align for <code>NeZero</code> is also not good because mathport would have gotten the name right</p>",
        "id": 311953646,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669273139
    },
    {
        "content": "<p>anything which mixes camel case and snake case in a single identifier will need a manual align</p>",
        "id": 311953673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669273163
    }
]