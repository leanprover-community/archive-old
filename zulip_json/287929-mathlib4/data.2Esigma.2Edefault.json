[
    {
        "content": "<p>On the list of \"ready to port\" is <code>data.sigma.default</code>, which is a one-line file <code>import data.sigma.basic</code>. Are <code>default</code> files still a thing in Lean 4?</p>",
        "id": 310511029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668636666
    },
    {
        "content": "<p>I'm inclined to suggest that we just remove all our <code>.default</code> files from mathlib3 anyway.</p>",
        "id": 310513432,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668637846
    },
    {
        "content": "<p>To reduce unnecessary imports?</p>",
        "id": 310513524,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668637895
    },
    {
        "content": "<p>Yes, and because they are abused.</p>",
        "id": 310513544,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668637908
    },
    {
        "content": "<p>For example in the category theory library, <code>.default</code> files are used as normal files, to avoid writing <code>.basic</code>in the imports.</p>",
        "id": 310513633,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668637944
    },
    {
        "content": "<p>They also mess up doc-gen, as doc-gen only records files with declarations, meaning that dependencies that go through a <code>.default</code> file get forgotten.</p>",
        "id": 310513727,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668637988
    },
    {
        "content": "<p>Scott, is there any chance these <code>.default</code> imports were abolished (except when they contain something besides imports) by your giant import refactor?</p>",
        "id": 310513796,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668638026
    },
    {
        "content": "<p>Haha, probably. :-)</p>",
        "id": 310513982,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668638128
    },
    {
        "content": "<p>I know we have a bunch of <code>import tactic.linarith</code> (which is really tactic.linarith.default).</p>",
        "id": 310514020,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668638155
    },
    {
        "content": "<p>I would very happily endorse someone renaming all the <code>.default</code> files in category theory!</p>",
        "id": 310514146,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668638209
    },
    {
        "content": "<p>The equivalent of <code>.default</code> files in lean 4 is to have e.g. <code>Data/Sigma/Basic.lean</code> and <code>Data/Sigma.lean</code></p>",
        "id": 310529527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668647013
    },
    {
        "content": "<p>I agree to some extent with Scott's desire to remove and/or discourage these imports which only serve to group things together because they cause spurious dependencies by design, but for tactics I think we might actually want the opposite: it is better to have fewer entry points to the tactics for <code>precompileModules</code> to be efficient, and also we don't want people importing just one subpart of a tactic, for example you can import <code>Mathlib.Tactic.NormNum.Core</code> and you will get a tactic called <code>norm_num</code> but it is basically unable to solve anything because you didn't import <code>Mathlib.Tactic.NormNum.Basic</code> which has handling for evaluating basic things like <code>+</code> and numbers.</p>",
        "id": 310530943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668648095
    },
    {
        "content": "<p>I think it makes sense to apply to apply different heuristics to <code>tactic.</code> vs everything else.</p>",
        "id": 310581705,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668681034
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/data.2Esigma.2Edefault/near/310529527\">said</a>:</p>\n<blockquote>\n<p>The equivalent of <code>.default</code> files in lean 4 is to have e.g. <code>Data/Sigma/Basic.lean</code> and <code>Data/Sigma.lean</code></p>\n</blockquote>\n<p>Note that this also works in Lean3; is it worth renaming all our <code>default.lean</code>s accordingly to make the transition easier?</p>",
        "id": 310581856,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668681094
    },
    {
        "content": "<p>If nobody objects, I will delete/rename all <code>.default</code> to <code>.basic</code> later today.</p>",
        "id": 310582897,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668681492
    },
    {
        "content": "<p>I think this is preferable to the <code>data.sigma</code>/<code>data.sigma.something_else</code> situation where a file is out of the folder it belongs to.</p>",
        "id": 310583018,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668681543
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>; Mario's point is that <code>foo/basic.lean</code> + <code>foo/default.lean</code> become <code>Foo/Basic.lean</code> and <code>Foo.lean</code> in Lean 4</p>",
        "id": 310585747,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668682628
    },
    {
        "content": "<p>Right, but I thought we agreed we should just not have any <code>default</code> files in Lean 3, and hence none of the latter pattern in Lean 4. So Yaël's suggestion makes sense to me.</p>",
        "id": 310615943,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668694006
    },
    {
        "content": "<p>I have to say I really like the default files (i.e. the ones with just a few imports) for projects depending on mathlib, like just <code>import LinearAlgebra</code> and have everything ready one would usually need to get started instead of figuring out whether I need to import <code>LinearAlgebra.Basic</code> or <code>LinearAlgebra.Basis</code> or something else.<br>\nBut not sure if any mathlib file should import any default file instead of the explicit imports.</p>",
        "id": 310621202,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1668695650
    },
    {
        "content": "<p>Yeah that's the trick. Maybe there's a way to make shortcuts separate enough from the rest that it would be impossible for mathlib to use them.</p>",
        "id": 310678250,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668711718
    }
]