[
    {
        "content": "<p>77tigers (sorry, I don't know their zulip usernames --- <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>?) started the port of <code>Logic.Equiv.Basic</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/631\">mathlib4#631</a>.</p>\n<p>I feel this one is on the critical path to porting many other things, so I hope it is okay with the OP if others join in to get it done asap.</p>",
        "id": 310955502,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668823829
    },
    {
        "content": "<p>I've just gone ahead and finished renaming and aligning the file.</p>",
        "id": 310955511,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668823844
    },
    {
        "content": "<p>However there are <em>many</em> broken proofs still, for mostly independent reasons, so it should be fine if anyone wants to jump in and just fix as many as they have inclination to do.</p>",
        "id": 310955538,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668823880
    },
    {
        "content": "<p>Probably best not to sit on changes, however: if you fix a few proofs, push your commit. :-)</p>",
        "id": 310955566,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668823920
    },
    {
        "content": "<p>In that logic.equiv.basic we have the slightly esoteric (and only used in Chevalley-Warning)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The type of all functions `X → Y` with prescribed values for all `x' ≠ x`</span>\n<span class=\"sd\">is equivalent to the codomain `Y`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">subtypeEquivCodomain</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x'</span> <span class=\"bp\">//</span> <span class=\"n\">x'</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"bp\">//</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">coe</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">}</span> <span class=\"bp\">≃</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>but of course <code>coe</code> doesn't mean anything now. I'm guessing the closest replacement for this theorem will be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">subtypeEquivCodomain</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x'</span> <span class=\"bp\">//</span> <span class=\"n\">x'</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"bp\">//</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x'</span> <span class=\"bp\">//</span> <span class=\"n\">x'</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span> <span class=\"o\">}</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">}</span> <span class=\"bp\">≃</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>Any other suggestions?</p>",
        "id": 310956459,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668824824
    },
    {
        "content": "<p>For specific types where we can find a <code>Coe</code> instance, you should replace occurrences of <code>coe</code> with <code>(↑)</code> (defined in <code>Mathlib.Tactic.Coe</code>) or <code>(·)</code></p>",
        "id": 310956791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668825147
    },
    {
        "content": "<p>I can't get <code>(↑)</code> or <code>(·)</code> to work here, as without a type annotation on the left-hand-side (i.e. <code>g ∘ (·)</code>) they just seem to default to the identity, and then we get a type error on the <code>f</code>.</p>",
        "id": 310956992,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668825405
    },
    {
        "content": "<p>Hence writing <code>(fun x : { x' // x' ≠ x } =&gt; g x) = f</code>.</p>",
        "id": 310956999,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668825418
    },
    {
        "content": "<p>I'm getting a bad error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">Subtype</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Subtype.val</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">subtypeEquivCodomain</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x'</span> <span class=\"bp\">//</span> <span class=\"n\">x'</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"bp\">//</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"bp\">·</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">}</span> <span class=\"bp\">≃</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- failed to synthesize</span>\n<span class=\"c1\">--   CoeHTCT ({ x' // x' ≠ x } → Y) (X → Y)</span>\n<span class=\"c1\">-- (deterministic) timeout at 'typeclass', maximum number of heartbeats (20000) has been reached (use 'set_option synthInstance.maxHeartbeats &lt;num&gt;' to set the limit)</span>\n</code></pre></div>",
        "id": 310957943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668826495
    },
    {
        "content": "<p>which indicates that there is a bad instance somewhere causing a loop</p>",
        "id": 310957961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668826527
    },
    {
        "content": "<p>oh, actually it's probably the subtype coe I had to add to make this compile</p>",
        "id": 310958026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668826593
    },
    {
        "content": "<p>Using <code>Subtype.val</code> works, of course</p>",
        "id": 310958052,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668826635
    },
    {
        "content": "<p>also <code>by exact (·)</code></p>",
        "id": 310958118,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668826704
    },
    {
        "content": "<p>So is it better to have <code>Subtype.val</code> in the statement, or what I wrote?</p>",
        "id": 310958120,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668826714
    },
    {
        "content": "<p>I think this is a bug report</p>",
        "id": 310958122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668826725
    },
    {
        "content": "<p>That <code>(↑)</code> doesn't work here is a bug.  Give me a sec.</p>",
        "id": 310958142,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1668826754
    },
    {
        "content": "<p>A separate logic.equiv.basic question, I seem to be encountering a failure of beta reduction in the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Equiv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n  <span class=\"n\">invFun</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">invFun</span> <span class=\"o\">(</span><span class=\"n\">toFun</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"s2\">\" ≃ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Equiv</span>\n\n<span class=\"sd\">/-- A product of types can be split as the binary product of one of the types and the product</span>\n<span class=\"sd\">  of all the remaining types. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">piSplitAt</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span> <span class=\"n\">i</span> <span class=\"bp\">×</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">j</span> <span class=\"bp\">//</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span> <span class=\"o\">},</span> <span class=\"n\">β</span> <span class=\"n\">j</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">j</span><span class=\"o\">⟩</span>\n  <span class=\"n\">invFun</span> <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"n\">h.symm.rec</span> <span class=\"n\">f.1</span> <span class=\"k\">else</span> <span class=\"n\">f.2</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n  <span class=\"n\">left_inv</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">funext</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> Goal is now:</span>\n<span class=\"cm\">    ```</span>\n<span class=\"cm\">    (fun f j =&gt; if h : j = i then (_ : i = j) ▸ f.fst else Prod.snd f { val := j, property := h })</span>\n<span class=\"cm\">      ((fun f =&gt; (f i, fun j =&gt; f j.val)) f) x =</span>\n<span class=\"cm\">      f x</span>\n<span class=\"cm\">    ```</span>\n<span class=\"cm\">    -/</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"c1\">-- Does nothing</span>\n    <span class=\"c1\">-- Expected the goal to start with `if h : j = i ...`</span>\n</code></pre></div>\n<p>Am I missing something, or is this a bug?</p>",
        "id": 310958143,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668826755
    },
    {
        "content": "<p>I'm inclined to use <code>Subtype.val</code> (or something that expands to it, once we work that out) to ensure it is still written in first-order style with explicit composition</p>",
        "id": 310958156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668826773
    },
    {
        "content": "<p>that also looks like a bug</p>",
        "id": 310958244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668826853
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/652\">https://github.com/leanprover-community/mathlib4/pull/652</a></p>",
        "id": 310958309,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1668826914
    },
    {
        "content": "<p>Reported the beta reduction issue as <a href=\"https://github.com/leanprover/lean4/pull/1856\">lean4#1856</a>.</p>",
        "id": 310958407,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668827005
    },
    {
        "content": "<p>In <code>logic.equiv.basic</code> we have the somewhat tricky statement <code>pi_congr_left'</code>, which translates to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Equiv.Defs</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Equiv</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">piCongrLeft'</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">e.symm</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">e.symm</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"n\">invFun</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">e.symm_apply_apply</span> <span class=\"n\">x</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"n\">left_inv</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n    <span class=\"n\">funext</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">eq_of_heq</span>\n        <span class=\"o\">((</span><span class=\"n\">eq_rec_heq</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n          <span class=\"o\">(</span><span class=\"kd\">by</span>\n            <span class=\"n\">dsimp</span>\n            <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">e.symm_apply_apply</span><span class=\"o\">]))</span>    <span class=\"c1\">-- fails, but the goal was already bad: `HEq ?m.205 ?m.206`</span>\n  <span class=\"n\">right_inv</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">funext</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eq_of_heq</span> <span class=\"o\">((</span><span class=\"n\">eq_rec_heq</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">e.apply_symm_apply</span><span class=\"o\">]))</span>    <span class=\"c1\">-- fails similarly</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">equiv.Pi_congr_left'</span> <span class=\"n\">Equiv.piCongrLeft'</span>\n</code></pre></div>\n<p>However this proof isn't working. When I try to do it step by step I can't get the <code>eq_rec_heq</code>s to unify. Can anyone work out a new proof here?</p>",
        "id": 310973841,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668843311
    },
    {
        "content": "<p>Ah, got it. I found the old thread form 2020 when we first put this in mathlib, where Mario offered some alternative proofs, and one of those translates just fine.</p>",
        "id": 310977689,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668846144
    }
]