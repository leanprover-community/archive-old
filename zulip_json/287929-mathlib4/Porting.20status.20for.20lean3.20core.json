[
    {
        "content": "<p>We have the port status page<br>\n<a href=\"https://github.com/leanprover-community/mathlib/wiki/mathlib4-port-status\">https://github.com/leanprover-community/mathlib/wiki/mathlib4-port-status</a><br>\nfor files from mathlib3, but is there a place to check the status of files from lean3 core?  Just now I wanted to use<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.linear_order\">docs#int.linear_order</a><br>\nwhich in lean3 is in core, <code>init.data.int.order</code>.  (Not to be confused with the more advanced file <code>data.int.order</code> in mathlib3.). It doesn't seem to be in mathlib4's <code>Mathlib.Init.Data.Int.*</code>, but other than looking in that folder I wasn't sure how to determine the status.</p>",
        "id": 306869993,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1667065159
    },
    {
        "content": "<p>In this case I tracked down <code>Int.LinearOrder</code> to <code>Mathlib.Init.Data.Int.Basic</code>, but still curious about the general principle.</p>",
        "id": 306875416,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1667068259
    },
    {
        "content": "<p>No, at the moment there is no equivalent of <a href=\"https://github.com/leanprover-community/mathlib/wiki/mathlib4-port-status\">#port-status</a> for Lean 3 core. I had been hoping that it was a (small) finite amount of work to finish porting that, and the overhead expense of tracking wouldn't be worth it, because we'd be done so soon.</p>",
        "id": 306892385,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1667081581
    },
    {
        "content": "<p>However it's looking like this was incorrect.</p>",
        "id": 306892396,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1667081589
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/512\">mathlib4#512</a> ran into a similar problem, when I realised that <code>Mathlib.Init.Logic</code> is only a partial / ad-hoc port.</p>",
        "id": 306892490,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1667081659
    },
    {
        "content": "<p>Actually, I retract that, <code>Mathlib.Init.Logic</code> is complete.</p>",
        "id": 306897406,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1667086388
    },
    {
        "content": "<p>Yeah I did <code>Init.Logic</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/490\">mathlib4#490</a></p>",
        "id": 306898849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667087996
    },
    {
        "content": "<p>I think we do need to track these</p>",
        "id": 306898897,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667088006
    },
    {
        "content": "<p>I think it will certainly be smaller scale but from another POV that means we can use it to test our porting infrastructure</p>",
        "id": 306898967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667088071
    },
    {
        "content": "<p>Currently <code>Mathlib.Init.Data.Int.Basic</code> contains one instance from <code>init.data.int.order</code> and two lemmas from <code>data.int.basic</code>.  Would it make sense to be very strict about filenames, thus moving these to <code>Mathlib.Init.Data.Int.Order</code> and <code>Mathlib.Data.Int.Basic</code> respectively?  This would ensure that people know where to look, even without having a full tracking system.</p>",
        "id": 306899172,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1667088285
    },
    {
        "content": "<p>Yes, we should be strict about positioning lemmas, although there are some places where I think we can untangle dependencies from mathlib that are currently causing pain which will be hindered by strictly following the mathlib order. One way to fix this is to say that mathlib4 is allowed to have <em>new</em> files, and old (original mathlib) files may import new files, so if you move a definition to a new file and import it from the old file then that gives the flexibility to change things.</p>",
        "id": 306899975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667089161
    },
    {
        "content": "<p>I've ported init.data.bool.basic and init.data.bool.lemmas, I hope to open the PR today</p>",
        "id": 306920949,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667113553
    }
]