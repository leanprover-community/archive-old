[
    {
        "content": "<p>The following fails while porting:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>I am trying to deconstruct the definition of 2 in a <code>Semiring</code>, but perhaps someone here knows what to simp/rw/unfold.</p>\n<p>Thanks.</p>",
        "id": 316553885,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1671351450
    },
    {
        "content": "<p>This is rather more painful in lean 4. I think <code>zero_le_two</code> and related lemmas could be used for inspiration</p>",
        "id": 316556420,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1671353165
    },
    {
        "content": "<p>Thanks. That indeed uses <code>one_add_one_equals_two</code>, which is just what I needed.</p>",
        "id": 316557020,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1671353570
    },
    {
        "content": "<p>And indeed two errors were fixed by that and the final one by copying from its proof</p>",
        "id": 316559822,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1671355554
    },
    {
        "content": "<p>I suppose it's inevitable that some things are defeq that didn't used to be (eta for structures) and some things are not defeq that used to be (numerals, mod, fin stuff).</p>",
        "id": 316560529,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671355986
    },
    {
        "content": "<p>It's not a problem as long as there are theorems for rewriting.</p>",
        "id": 316560646,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1671356060
    },
    {
        "content": "<p>We can maybe add this to the common problems section of the wiki.</p>",
        "id": 316562365,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671357281
    },
    {
        "content": "<p>Yes I guess the only problem is the pain making the API itself</p>",
        "id": 316563077,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671357731
    }
]