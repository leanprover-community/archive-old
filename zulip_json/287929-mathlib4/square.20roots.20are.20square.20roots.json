[
    {
        "content": "<p>All but one function in <code>Data/Nat/Sqrt</code> has been ported by <span class=\"user-mention\" data-user-id=\"303675\">@Anand Rao</span> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1142\">mathlib4#1142</a> but that one is a little tricky. As far as I can tell the definition of <code>sqrt</code> is new, so the ported proof gives nothing. I started proving it and it is conceptually interesting. We will keep working on this, but as there are experts here I am sharing the current state (extracted from file).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Porting note: as the definition of square root has changed, the proof of `sqrt_IsSqrt` is attempted from scratch.</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Sketch of proof:</span>\n<span class=\"cm\">Up to rounding, in terms of the definition of `sqrt.iter`,</span>\n\n<span class=\"cm\">* By AM-GM inequality, `next² ≥ n` giving one of the bounds.</span>\n<span class=\"cm\">* When we terminated, we have `guess ≥ next` from which we deduce the other bound `n ≥ next²`.</span>\n\n<span class=\"cm\">To turn this into a lean proof we need to manipulate, use properties of natural number division etc.</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">private</span> <span class=\"kd\">theorem</span> <span class=\"n\">sqrt_IsSqrt</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsSqrt</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">sqrt</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span>\n  <span class=\"n\">case</span> <span class=\"n\">pos</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">IsSqrt</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">IsSqrt</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">contradiction</span>\n  <span class=\"n\">case</span> <span class=\"n\">neg</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">IsSqrt</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">sqrt</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">sqrt.iter</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"kd\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">sqrt</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">if_neg</span> <span class=\"n\">h</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 317110997,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1671613518
    },
    {
        "content": "<p>To make the above more self-contained, the key definition from <code>sqrt.iter</code> is:<br>\n<code>let next := (guess + n / guess) / 2</code></p>",
        "id": 317111249,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1671613603
    },
    {
        "content": "<p>and the termination condition is <code>next ≥ guess</code></p>",
        "id": 317111408,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1671613660
    },
    {
        "content": "<p>You can golf the first four lines of <code>case neg</code> down to <code>simp only [IsSqrt, sqrt, h, ite_false]</code></p>",
        "id": 317112057,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671613888
    },
    {
        "content": "<p>Thanks. Done that.</p>",
        "id": 317112765,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1671614149
    },
    {
        "content": "<p>Hmm, I don't know how to prove this.</p>",
        "id": 317139792,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671623263
    },
    {
        "content": "<p>Should we go back to the mathlib3 definition of <code>nat.sqrt</code>?  It looks like this is where the Lean 4 definition was introduced:<br>\n<a href=\"#narrow/stream/270676-lean4/topic/Nat.2Esqrt\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Nat.2Esqrt</a></p>",
        "id": 317154922,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671628412
    },
    {
        "content": "<p>I think we can fix the sorried proof above.</p>",
        "id": 317155523,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671628589
    },
    {
        "content": "<p>But maybe <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> should confirm that he's happy with the current <code>Nat.sqrt</code> def'n</p>",
        "id": 317155581,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671628607
    },
    {
        "content": "<p>The new definition is better. As usual, this comes with some mathematics and we haven't tried to sit down and do it yet, so it's inevitable that some sorries will get introduced when the porting wave hits. I don't like the pressure this is bringing to try to use short ad hoc fixes so that it remains sorry-free at all times without actually thinking about the mathematics</p>",
        "id": 317156609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671628922
    },
    {
        "content": "<p>Maybe for now we can just write a definition <code>Nat.sqrt'</code> and sorry'd lemma <code>Nat.sqrt = Nat.sqrt'</code>, and then port the mathlib3 stuff intact?</p>",
        "id": 317163404,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671630904
    },
    {
        "content": "<p>That seems safer than putting in many separate sorries -- if there is a mistake somewhere it will be easy with that setup to go back to the mathlib3 definition.</p>",
        "id": 317163696,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671630977
    },
    {
        "content": "<p>okay, but I don't think there is a future where we will adopt the old definition unless we just completely run out of time and the project goes on life support. If the new definition is buggy the bugs will be fixed in the process of proving that theorem</p>",
        "id": 317164735,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671631249
    },
    {
        "content": "<p>I just don't see the point in keeping a somewhat technical proof about a definition we aren't going to keep anyway on our way to a different technical proof</p>",
        "id": 317164889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671631284
    },
    {
        "content": "<p>We know that there exists a function equal to <code>nat.sqrt</code> since we proved it in lean 3. So I think the sqrt lemmas are a pretty safe bet</p>",
        "id": 317165108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671631334
    },
    {
        "content": "<p>Good progress is being made on this along with (now mainly by) <span class=\"user-mention\" data-user-id=\"303675\">@Anand Rao</span> and <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> and it is worth trying a little longer. I am hopeful this will get done today or tomorrow.</p>",
        "id": 317172074,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1671633053
    },
    {
        "content": "<p>Is anyone working on this now? I might have a go at the sorry in data.nat.sqrt (I think I have a paper proof)</p>",
        "id": 317250561,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671657301
    },
    {
        "content": "<p>I think I have a paper proof too.  The idea is to use <code>lt_div_mul_add</code> twice to get <code>2 * guess * (next + 1) &gt; guess^2 + n</code>.  Then square both sides, and rewrite the right side as <code>(guess^2 - n)^2 + 4 * guess^2 * n</code>, which is <code>≥ 4 * guess^2 * n</code>.</p>",
        "id": 317255441,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1671659653
    },
    {
        "content": "<p>I've got a Lean proof :-) modulo some lemmas which are much simpler. And no natural subtraction ;-)  I'll tidy it up a little and push.</p>",
        "id": 317259331,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671661486
    },
    {
        "content": "<p>When <code>library_search</code> fails to close a goal it instead barfs out 100 things I don't want to hear all beginning <code>refine</code> :-(</p>",
        "id": 317259447,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671661540
    },
    {
        "content": "<p>Yeah, what's up with that anyway?</p>",
        "id": 317260193,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1671661918
    },
    {
        "content": "<p>Any takers for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">aux_lemma_one</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">aux_lemma_five</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">aux_lemma_six</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 317260542,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671662079
    },
    {
        "content": "<p>Modulo that we're done; I've just pushed.</p>",
        "id": 317260641,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671662143
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sqrt.lt_iter_succ_sq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">guess</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">guess</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">guess</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">sqrt.iter</span> <span class=\"n\">n</span> <span class=\"n\">guess</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">sqrt.iter</span> <span class=\"n\">n</span> <span class=\"n\">guess</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">sqrt.iter</span>\n  <span class=\"c1\">-- m was `next`</span>\n  <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">guess</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">guess</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">guess</span>\n  <span class=\"n\">case</span> <span class=\"n\">pos</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">refine</span> <span class=\"n\">lt_of_mul_lt_mul_left</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">guess</span> <span class=\"bp\">*</span> <span class=\"n\">guess</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">zero_le</span>\n      <span class=\"n\">apply</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">aux_lemma_one</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_mul_mul_comm</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">mul_mul_mul_comm</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">guess</span><span class=\"o\">)]</span>\n      <span class=\"n\">refine</span> <span class=\"n\">mul_self_lt_mul_self</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">aux_lemma_five</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n        <span class=\"k\">show</span> <span class=\"n\">guess</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">guess</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">guess</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">guess</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">]</span>\n      <span class=\"n\">refine</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">act_rel_act_of_rel</span> <span class=\"n\">_</span> <span class=\"n\">aux_lemma_six</span><span class=\"o\">)</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">add_lt_add_left</span> <span class=\"o\">(</span><span class=\"n\">lt_mul_div_succ</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_le</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"n\">_</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">dif_pos</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">sqrt.lt_iter_succ_sq</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">this</span>\n  <span class=\"n\">case</span> <span class=\"n\">neg</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">dif_neg</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hn</span>\n</code></pre></div>",
        "id": 317260665,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671662157
    },
    {
        "content": "<p>Only tested on Lean 3, but:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">aux_lemma_one</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">sq_nonneg</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)]</span>\n</code></pre></div>",
        "id": 317261610,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671662608
    },
    {
        "content": "<p><code>ring</code> isn't imported in this file, this is why it's so annoying :-(</p>",
        "id": 317261760,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671662670
    },
    {
        "content": "<p>heh, you're really trying to make this hard to port to std</p>",
        "id": 317261766,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671662674
    },
    {
        "content": "<p>yeah <code>linarith</code> isn't there either</p>",
        "id": 317261789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671662699
    },
    {
        "content": "<p>you wouldn't catch me doing <code>rw [add_assoc, mul_add]</code> normally, it's all <code>rw [show thing = rearranged_thing by ring]</code> as far as I'm concerned, but not here.</p>",
        "id": 317261868,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671662759
    },
    {
        "content": "<p>You should be able to get <code>aux_lemma_six</code> by applying <code>lt_div_mul_add</code> to get <code>a + 1 &lt; ((a + 1)/2) * 2 + 2</code></p>",
        "id": 317264225,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1671663867
    },
    {
        "content": "<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">aux_lemma_six</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">add_le_add_iff_right</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">$</span> <span class=\"n\">succ_le_of_lt</span> <span class=\"bp\">$</span> <span class=\"bp\">@</span><span class=\"n\">lt_div_mul_add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 317265424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671664541
    },
    {
        "content": "<p>In fact <span class=\"user-mention\" data-user-id=\"453098\">@Dan Velleman</span> I should stop trying to prove my lemmas and just use <code>lt_div_mul_add</code> in the actual proof as you've been telling me all along.</p>",
        "id": 317266924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671665361
    },
    {
        "content": "<p>OK I couldn't get anyone to bite so I've just finished it myself and pushed :D</p>",
        "id": 317271313,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671668397
    },
    {
        "content": "<p>bleurgh it doesn't lint because of other issues. I'm still working on this file.</p>",
        "id": 317271445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671668490
    },
    {
        "content": "<p>OK I'm cheating because it's bedtime. Hopefully we'll get a green tick but I had to avoid a linter. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I can't figure out how to write the equation lemmas for <code>sqrtAux</code> because <code>unfold</code> unfolds too much and well-founded fix is inscrutible to me. I'm <a href=\"https://github.com/leanprover-community/mathlib4/blob/80c57e64b670fef156064b6e1e3258dc7868713e/Mathlib/Data/Nat/Sqrt.lean#L68-L85\">cheating and nolinting</a>. In Lean 3 I would be all over the equation lemmas but in Lean 4 it seems that the relevant ones are marked unsafe. It's really hard to minimise too because the declaration uses all kind of bit stuff.</p>",
        "id": 317273098,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671669709
    }
]