[
    {
        "content": "<p>In lean4 core, tests come with <code>expected.out</code> files which confirm that certain error messages/traces/etc. are generated.</p>\n<p>I don't see those in mathlib4; how do we specify that we want a certain example in a test file to fail in a certain way?</p>",
        "id": 319729866,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1672989811
    },
    {
        "content": "<p>In mathlib3 we had <code>success_if_fail_with_msg</code>. Can we port that?</p>",
        "id": 319730389,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1672990081
    },
    {
        "content": "<p>For the time being I'm just going to leave commented code in test files describing what the behavior should be when uncommented, I guess?</p>",
        "id": 319745707,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1672997672
    },
    {
        "content": "<p>There are also certain instances where we're not in a tactic but still want to demonstrate certain error-message functionality. I imagine it's low-priority at the moment, but I wonder if we could have similar <code>*.expected.out</code> files somehow.</p>",
        "id": 319745870,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1672997748
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Writing.20tests.20that.20fail/near/319730389\">said</a>:</p>\n<blockquote>\n<p>In mathlib3 we had <code>success_if_fail_with_msg</code>. Can we port that?</p>\n</blockquote>\n<p>I opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/1390\">mathlib4#1390</a> to record this.</p>",
        "id": 319830715,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673027624
    },
    {
        "content": "<p>There are a bunch of <code>@[simps]</code> tests that also used this, and for now are just using the less informative <code>success_if_fail</code>.</p>",
        "id": 319835557,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1673029205
    },
    {
        "content": "<p>I didn't realise we had <code>success_if_fail</code>, <span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span> you can probably use this for now?</p>",
        "id": 319835847,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673029303
    },
    {
        "content": "<p>A bit of poking around reveals it might be called <code>expect_failure</code> and <code>expect_failure_msg</code> now? Trying to use <code>success_with_failure</code> hits me with “unknown tactic”, and I can’t find it in mathlib4.</p>",
        "id": 319838143,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673030034
    },
    {
        "content": "<p>Does this look like a good way to write this test?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">31</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">expect_failure_msg</span> <span class=\"s2\">\"type mismatch</span>\n<span class=\"s2\">  HEq.rfl</span>\n<span class=\"s2\">has type</span>\n<span class=\"s2\">  HEq ?m.38198 ?m.38198 : Prop</span>\n<span class=\"s2\">but is expected to have type</span>\n<span class=\"s2\">  3 ^ 3 + 4 = 31 : Prop\"</span> <span class=\"o\">(</span><span class=\"n\">norm_num1</span><span class=\"bp\">;</span> <span class=\"n\">with_reducible</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n  <span class=\"gr\">admit</span>\n</code></pre></div>",
        "id": 319838242,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673030058
    },
    {
        "content": "<p>I'm afraid the <code>?m.38198</code> is not import changes-resilient.</p>",
        "id": 319840785,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673030908
    },
    {
        "content": "<p>It's called <code>successIfFail</code> in <code>Mathlib.Lean.Exception</code>.</p>",
        "id": 319841993,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1673031300
    },
    {
        "content": "<p>But that is a monad operation, but a tactic.</p>",
        "id": 319842138,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1673031356
    },
    {
        "content": "<p>I see. I think I'll do this particular test with a syntactic <code>guard_target</code> followed by an <code>admit</code>, but this is all good to know!</p>",
        "id": 319867550,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673041063
    },
    {
        "content": "<p>Or, wait. Is <code>admit</code> frowned upon in tests? is <code>successIfFail</code> better?</p>",
        "id": 319867976,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673041272
    },
    {
        "content": "<p>I'm not totally sure how to translate the monad operation into a tactic in this case.</p>",
        "id": 319868043,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673041319
    },
    {
        "content": "<p>In Lean 3 we mandated that all tests are silent. In Lean 4 I think that might also be nice, but we're not doing it at the moment.<br>\nI prefer doing a <code>successIfFail</code> followed by some (trivial) way to close the goal, which you can usually ensure there exists by changing the example a little bit.</p>",
        "id": 319883543,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1673049374
    },
    {
        "content": "<p>There is a tactic <code>fail_if_success</code>, defined in core Lean 4, that is used in <code>test/</code>.</p>",
        "id": 319892830,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673056353
    },
    {
        "content": "<p>Isn’t that the opposite?</p>",
        "id": 319895172,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673058463
    },
    {
        "content": "<p>Confusingly, <code>fail_if_success</code> and <code>successIfFail</code> mean the same thing. :-)</p>",
        "id": 319896228,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673059381
    },
    {
        "content": "<p>Both swap success and failure of the enclosed tactic.</p>",
        "id": 319896249,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673059401
    },
    {
        "content": "<p>so what you’re saying is…it should really be called <code>fail_iff_success</code> :)</p>",
        "id": 319896798,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673059884
    },
    {
        "content": "<p>You can switch off universes being displayed with <code>set_option pp.universes false</code> if this is still an issue</p>",
        "id": 319917655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673078505
    }
]