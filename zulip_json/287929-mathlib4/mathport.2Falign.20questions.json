[
    {
        "content": "<ol>\n<li>Do we manually <code>#align</code> things that <code>mathport</code> gets right, or no?</li>\n<li>I've noticed that <code>mathport</code> is better about getting names right in signatures than in <code>def</code> bodies, which requires manual fixing for recursive calls.... -- might be a \"won't fix\"</li>\n<li>There appears to be a feature in Lean 3 where I can default a constant parameter in a recursive call, and I can't in Lean 4 -- requires manual fixing.... -- not sure if it's feasible to address this in <code>mathport</code>?</li>\n</ol>\n<p>e.g., in Lean 3, this works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">traverse</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">applicative</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">list.cons</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">traverse</span> <span class=\"n\">xs</span>\n</code></pre></div>\n<p>Whereas in Lean 4, I need to explicitly include the <code>f</code> parameter:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">traverse</span>\n    <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">Applicative</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.cons</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">List.traverse</span> <span class=\"n\">f</span> <span class=\"n\">xs</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">list.traverse</span> <span class=\"n\">List.traverse</span>\n</code></pre></div>\n<ol start=\"4\">\n<li>This one was just funny: I stared at a line  that was  <code>let rec := &lt;foo&gt;</code> in Lean 3 and Lean 4  for a long long time trying to figure out how it even worked in Lean 3, until I realized that <code>let rec</code> wasn't a thing in Lean 3 and <code>rec</code> was being parsed as a legal variable...</li>\n</ol>",
        "id": 313109918,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669828628
    },
    {
        "content": "<p>Re 1: recent mathlib3port efforts have been aligning <em>everything</em> and I've not been deleting stuff which it gets right!</p>",
        "id": 313110767,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669828847
    },
    {
        "content": "<p>Re: 2. mathport is trying as hard as it can. Getting names right is hard.</p>",
        "id": 313116542,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669830484
    },
    {
        "content": "<p>Trust me that I understand that the fact that <code>mathport</code> works as well as it does is a celebration....</p>",
        "id": 313117030,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669830617
    },
    {
        "content": "<p>migrations are the 3rd hardest problem in software engineering, behind naming things, cache invalidation and  off-by-one errors</p>",
        "id": 313117330,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669830699
    }
]