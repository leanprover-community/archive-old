[
    {
        "content": "<p>Yes this is very surprising to me. In Lean 3 the rewrite would fail. Here are examples on mathlib3 and mathlib4 master:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- lean 3</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group.opposite</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.group_action.defs</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">has_mul.to_has_opposite_smul</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_smul</span> <span class=\"n\">α</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">c.unop</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">MulOpposite.smul_eq_mul_unop</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">a'</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span> <span class=\"bp\">*</span> <span class=\"n\">a.unop</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- rw smul_eq_mul, -- fails</span>\n  <span class=\"c1\">-- rw @smul_eq_mul αᵐᵒᵖ -- fails</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- lean 4</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Opposite</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.GroupAction.Defs</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Mul.toHasOppositeSmul</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">α</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">c.unop</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">MulOpposite.smul_eq_mul_unop</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">a'</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span> <span class=\"bp\">*</span> <span class=\"n\">a.unop</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- the • in the goal is `@HSMul.hSMul αᵐᵒᵖ α α instHSMul a a' : α`</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">smul_eq_mul</span> <span class=\"n\">α</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">]</span> <span class=\"c1\">-- works! Even though `a'` does not have type `αᵐᵒᵖ`.</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Is this a change in the behaviour of <code>rw</code>?</p>",
        "id": 315887448,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671042356
    },
    {
        "content": "<p>You should maybe change the title of the thread to \"<code>rw</code> seeing through type synonym?\" because this is kind of weird.</p>",
        "id": 315887683,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671042419
    },
    {
        "content": "<p>Should we use a <code>structure</code> instead of a type synonym in Lean 4?</p>",
        "id": 315888036,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1671042536
    },
    {
        "content": "<p>With the new structure eta(?) <code>rfl</code>, we'll have both <code>op_unop</code> and <code>unop_op</code> as <code>rfl</code> lemmas.</p>",
        "id": 315888191,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1671042583
    },
    {
        "content": "<p>Here's a mathlib-free MWE: all the declarations are from mathlib.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- lean 4</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">SMul</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">HSMul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">hSMul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">73</span> <span class=\"s2\">\" • \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">HSMul.hSMul</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instHSMul</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HSMul</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n  <span class=\"n\">hSMul</span> <span class=\"o\">:=</span> <span class=\"n\">SMul.smul</span>\n\n<span class=\"c1\">-- type synonym</span>\n<span class=\"kd\">def</span> <span class=\"n\">MulOpposite</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n  <span class=\"n\">α</span>\n\n<span class=\"kd\">postfix</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"ᵐᵒᵖ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">MulOpposite</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">MulOpposite</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">unop</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">id</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">id</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">where</span> <span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">unop</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">MulOpposite</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">910</span><span class=\"o\">)</span> <span class=\"n\">Mul.toSMul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨(</span><span class=\"bp\">·</span> <span class=\"bp\">*</span> <span class=\"bp\">·</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">smul_eq_mul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">a'</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Mul.toHasOppositeSmul</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">α</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">c.unop</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">MulOpposite.smul_eq_mul_unop</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">a'</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span> <span class=\"bp\">*</span> <span class=\"n\">a.unop</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">smul_eq_mul</span> <span class=\"n\">α</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">]</span> <span class=\"c1\">-- wouldn't work in Lean 3</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The `simpNF` linter reports:</span>\n<span class=\"cm\">SOME SIMP LEMMAS ARE NOT IN SIMP-NORMAL FORM.</span>\n<span class=\"cm\">see note [simp-normal form] for tips how to debug this.</span>\n<span class=\"cm\">https://leanprover-community.github.io/mathlib_docs/notes.html#simp-normal%20form -/</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">MulOpposite.smul_eq_mul_unop</span> <span class=\"c\">/-</span><span class=\"cm\"> Left-hand side simplifies from</span>\n<span class=\"cm\">  a • a'</span>\n<span class=\"cm\">to</span>\n<span class=\"cm\">  a * a'</span>\n<span class=\"cm\">using</span>\n<span class=\"cm\">  simp only [smul_eq_mul]</span>\n<span class=\"cm\">Try to change the left-hand side to the simplified term!</span>\n<span class=\"cm\"> -/</span>\n</code></pre></div>",
        "id": 315895439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671044720
    },
    {
        "content": "<p>Type synonyms like <code>opposite</code> were a big cause of weird leakage in Lean 3, which led to weird goals (which were super-hard to debug before widgets). More recently we learnt how to tame them in mathlib3, by making the API and then afterwards marking the declarations <code>irreducible</code>. This approach is no longer possible in Lean 4 because you cannot change the reducibility of a declaraction once it's been made (the autoporter rather annoyingly just ignores changes in transparency without flagging them as \"something which is no longer possible just got skipped\").</p>\n<p>This is also a very weird goal above: it looks to me like we're being type-careful in the declarations, but the simplifier is breaking the abstraction. Here <code>a * a'</code> has a term of type <code>α</code> but the multiplication is the mul on <code>αᵐᵒᵖ</code> so <code>a'</code> has somehow been coerced to <code>αᵐᵒᵖ</code>. The fact that it's happening, and the fact that we also have this issue about being unable to change the transparency of a declaration after it's been made, make me tentatively agree with Yury that we should perhaps consider using a structure and hoping that eta for structures will mean that the pain incurred is not too bad. It would be great to get some expert opinion on this because this is a big call. <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> ?</p>",
        "id": 315897395,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671045354
    },
    {
        "content": "<p>I guess Gabriel is probably for this, judging by <a href=\"https://github.com/leanprover/lean4/issues/777\">https://github.com/leanprover/lean4/issues/777</a></p>",
        "id": 315924353,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671055707
    },
    {
        "content": "<p>Yes, I think it is the right choice to turn most of these wrappers into structures, precisely because it's way to easy to break the abstraction otherwise.</p>",
        "id": 315925031,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1671056044
    },
    {
        "content": "<p>TODO: This advice needs to be added to the porting wiki.</p>",
        "id": 315925296,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1671056169
    },
    {
        "content": "<p>This is going to be a lot of API writing <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> but I'm with you on this.</p>",
        "id": 315925381,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671056218
    },
    {
        "content": "<p>Some of these wrappers (e.g., <code>mul_opposite</code>) are supposed to be irreducible. But some wrappers (e.g., <code>order_dual</code>) are often used to quickly get the order-dual lemma by forcing defeq.</p>",
        "id": 315925562,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1671056303
    },
    {
        "content": "<p><code>additive</code> is used in both ways.</p>",
        "id": 315925631,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1671056335
    },
    {
        "content": "<p>Do you suggest that we completely move away from the <code>order_dual</code>-style?</p>",
        "id": 315925737,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1671056389
    },
    {
        "content": "<p>Maybe we need a tactic supporting the proofs where we want to abuse <code>order_dual</code>.</p>",
        "id": 315926024,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671056519
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Type.20synonyms/near/315263615\">said</a>:</p>\n<blockquote>\n<p>My dream is still for a <code>to_additive</code>-like tactic to handle them all.</p>\n</blockquote>\n<p>More discussion above and below</p>",
        "id": 315926154,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671056567
    },
    {
        "content": "<p>Maybe it's worth looking at the (now rotten) <a href=\"https://github.com/leanprover-community/mathlib/pull/6045\">#6045</a>.  Turning <code>additive</code> into a structure is not <em>that</em> painful.  I don't think <code>order_dual</code> would be much worse.</p>",
        "id": 315926265,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1671056630
    },
    {
        "content": "<p>I mean, we would need to add a few thousands more lines of code <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 315926435,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671056701
    },
    {
        "content": "<p>I don't see why that's the case. The \"tactic\" here is defining the recursor (unary, binary, tritary). We're already often changing lemma names. Including an \"order_dual.rec_2 &lt;|\" in various lines shouldn't be too bad.</p>",
        "id": 315926623,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1671056795
    },
    {
        "content": "<p>In the case where we make <code>order_dual</code> a structure without providing a <code>to_dual</code> attribute, I am firmly convinced we have to write about 10k more lines of code. In the case where we make <code>order_dual</code> a structure and provide a <code>to_dual</code> attribute, we might end up reducing the number of lines.</p>",
        "id": 315926889,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671056918
    },
    {
        "content": "<p>I'm really not a fan of the <code>to_additive</code> proof method, that is, translating all the proofs from the bottom up. From a proof theory perspective this is very wasteful when you can just instantiate a structure and apply the old theorem, and from an automation perspective it's more brittle because you have to translate a bunch of internals, in addition to reading proofs out of the environment which is something we want to crack down on in the future</p>",
        "id": 315927230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671057071
    },
    {
        "content": "<p>I think <code>order_dual</code> is genuinely much worse than <code>additive</code> for two reasons:</p>\n<ul>\n<li>There's only one way of translating a multiplicative statement to an additive one (except a handful of edge cases), while there are 2^#types appearing in the statement ways of dualising.</li>\n<li><code>order_dual</code> is used in a defeq-forcing manner much more pervasively than <code>additive</code></li>\n</ul>",
        "id": 315927466,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671057189
    },
    {
        "content": "<p>That's interesting, Mario. I always thought <code>to_additive</code> was the pinnacle of proof translation.</p>",
        "id": 315927935,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671057374
    },
    {
        "content": "<p>From a UX standpoint <code>to_additive</code> is great, it's just the proof method that isn't great. I would rather have something like <code>to_additive</code> do its proof by translating the <em>statement</em> and using transfer theorems to turn everything into facts about <code>additive</code> of something and then applying the old theorem</p>",
        "id": 315930903,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671058858
    },
    {
        "content": "<p>many of the proofs we're talking about are basically doing exactly that, but with defeq abuse in place of a transfer tactic</p>",
        "id": 315931122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671058946
    },
    {
        "content": "<p>Oh I understand now. Yeah, this would be the best of both worlds.</p>",
        "id": 315931547,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671059128
    },
    {
        "content": "<p>wooah I changed the definition of <code>αᵐᵒᵖ</code> from <code>:= α</code> to a structure (i.e. I totally changed the definitions in the first few lines of <code>Mathlib.Algebra.Opposites</code>, and <em>the entire file still compiled</em> apart from one lemma which is arguably incorrect in mathlib3 anyway. See <a href=\"https://github.com/leanprover-community/mathlib4/pull/1036\">mathlib4#1036</a> . I'm going to bed now, if anyone wants to push this any further. I'm unlikely to look at this for around 24 hours because I have a very busy day at work tomorrow.</p>",
        "id": 315939603,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671063548
    },
    {
        "content": "<p>For types that were already irreducible in mathlib3, turning them into structures in Lean 4 shouldn't make much of a difference.  Except for shenanigans like <code>local attribute [semireducible] mul_opposite</code>.</p>",
        "id": 315940347,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1671064059
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/rw.20seeing.20through.20type.20synonym.3F/near/315925562\">said</a>:</p>\n<blockquote>\n<p>Some of these wrappers (e.g., <code>mul_opposite</code>) are supposed to be irreducible. But some wrappers (e.g., <code>order_dual</code>) are often used to quickly get the order-dual lemma by forcing defeq.</p>\n</blockquote>\n<p>Is this what was causing the instance issues for <a href=\"https://github.com/leanprover-community/mathlib4/pull/1001\">mathlib4#1001</a>? (thread here: <a href=\"#narrow/stream/287929-mathlib4/topic/.231001.20failed.20to.20synthesize.20instance/near/315730442\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/.231001.20failed.20to.20synthesize.20instance/near/315730442</a>)</p>",
        "id": 315945749,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1671068136
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/rw.20seeing.20through.20type.20synonym.3F/near/315925562\">said</a>:</p>\n<blockquote>\n<p>Some of these wrappers (e.g., <code>mul_opposite</code>) are supposed to be irreducible. But some wrappers (e.g., <code>order_dual</code>) are often used to quickly get the order-dual lemma by forcing defeq.</p>\n</blockquote>\n<p><code>mul_opposite</code> is irreducible but <code>add_opposite</code> isn't!</p>",
        "id": 315947214,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671069569
    },
    {
        "content": "<p>Note that there are places in mathlib that take advantage of the fact that  (pseudocode)<code>additive (quotient_group X) = quotient_add_group (multiplicative X)</code> to transfer results; in these places, we have to temporarily make <code>mul_opposite</code> semireducible again. We won't have that option if we make things a structure</p>",
        "id": 315947230,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671069595
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/rw.20seeing.20through.20type.20synonym.3F/near/315939603\">said</a>:</p>\n<blockquote>\n<p>and <em>the entire file still compiled</em></p>\n</blockquote>\n<p>Of course, the real test is whether the entire set of yet-to-be-ported files still compile...</p>",
        "id": 315947334,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671069655
    },
    {
        "content": "<p>There was some push a while ago to try to remove occurrences of <code>local attribute [semireducible]</code> from mathlib, right?</p>",
        "id": 315970043,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671087780
    },
    {
        "content": "<p>I can see that this might be a good idea in the sense that (a) it would in theory help with porting and (b) it would make a bunch of lemmas be moved to more appropriate places (assuming the mathlib3 philosophy is \"start with it semireducible, prove stuff, make it irreducible, and don't fiddle with it any more\"). As it happens I do now have 30 minutes more to work on this stuff so I'd like to temporarily claim it back.</p>",
        "id": 316017936,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671104516
    },
    {
        "content": "<p><a href=\"#narrow/stream/287929-mathlib4/topic/make.20.60MulOpposite.60.20a.20structure/near/316018381\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/make.20.60MulOpposite.60.20a.20structure/near/316018381</a></p>",
        "id": 316018421,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671104686
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/rw.20seeing.20through.20type.20synonym.3F/near/315930903\">said</a>:</p>\n<blockquote>\n<p>From a UX standpoint <code>to_additive</code> is great, it's just the proof method that isn't great. I would rather have something like <code>to_additive</code> do its proof by translating the <em>statement</em> and using transfer theorems to turn everything into facts about <code>additive</code> of something and then applying the old theorem</p>\n</blockquote>\n<p>I am also not happy with the current implementation of <code>to_additive</code>. The fact that we have to also translate all this internal stuff is definitely a bad sign.<br>\nHowever, your approach is only a partial fix, since proof terms can occur in a theorem statement. In that case, you will still have to translate proof terms (or at the very least a lemma name that is exactly that proof term)</p>",
        "id": 316070277,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1671118486
    },
    {
        "content": "<p>Should I try to turn <code>Multiplicative</code> and <code>Additive</code> into structures (in <code>mathlib 4</code>, not in <code>mathlib 3</code>)?</p>",
        "id": 317784721,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1671933059
    },
    {
        "content": "<p>I think so. They accepted my PR for <code>MulOpposite</code> because it seemed to be solving problems.</p>",
        "id": 317784827,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671933216
    },
    {
        "content": "<p>Currently, <code>ofAdd</code> etc are <code>Equiv</code>s. If I define, e.g.,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Multiplicative</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ofAdd</span> <span class=\"o\">::</span> <span class=\"n\">toAdd</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>then they're no longer <code>Equiv</code>s. What should I do?</p>\n<ul>\n<li>Define as above, add <code>Multiplicative.ofAddEquiv</code> and <code>Additive.ofMulEquiv</code>?</li>\n<li>Define with some other names (e.g., <code>mk</code> and <code>out</code>) and add <code>ofAdd</code> and <code>toAdd</code> as <code>Equiv</code>s?</li>\n</ul>",
        "id": 317787198,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1671935907
    },
    {
        "content": "<p>I prefer <code>ofAdd :: toAdd : α</code> but it may make porting harder.</p>",
        "id": 317787306,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1671936032
    },
    {
        "content": "<p>I think it's fine to make them undecorated functions, because there are many bundlings they could be.</p>",
        "id": 317804781,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671955831
    },
    {
        "content": "<p>I'm worried we're setting ourselves up for trouble if we don't start by attempting to backport this first</p>",
        "id": 317806112,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671957056
    },
    {
        "content": "<p>We can try to backport it, but I expect it be fine.</p>",
        "id": 317807583,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671957865
    },
    {
        "content": "<p>When I tried an experimental version of this I gave the unequiv constructor/eliminator primed names</p>",
        "id": 317818412,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671965084
    },
    {
        "content": "<p>I made mathlib4 compile with <code>structure</code>s for <code>Additive</code> and <code>Multiplicative</code>. But this is not free.</p>",
        "id": 317858789,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1671988510
    },
    {
        "content": "<p>We forced defeq here and there in mathlib3.</p>",
        "id": 317858810,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1671988524
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1213\">https://github.com/leanprover-community/mathlib4/pull/1213</a></p>",
        "id": 317858962,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1671988610
    },
    {
        "content": "<p>I'll cherry-pick some changes that make sense any way to another branch.</p>",
        "id": 317858996,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1671988634
    },
    {
        "content": "<p>Yes I tried this and it was much harder than <code>MulOpposite</code></p>",
        "id": 317878856,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672004305
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> do you think this should be backported to mathlib3?</p>",
        "id": 321032296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673556833
    },
    {
        "content": "<p>There's already a mathlib PR changing Additive/Multiplicative to structures.  <a href=\"https://github.com/leanprover-community/mathlib/pull/6045\">#6045</a>  (slightly fermented)</p>",
        "id": 321032584,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1673556934
    },
    {
        "content": "<p>I'm not sure whether it should be backported: some Lean 4 <code>rfl</code>s are useful. But I can revive <a href=\"https://github.com/leanprover-community/mathlib/pull/6045\">#6045</a> if needed.</p>",
        "id": 321047984,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673563172
    },
    {
        "content": "<p>I guess the argument against backporting is that the mathlib4 PR might be solving problems which weren't present in mathlib3.</p>",
        "id": 321714102,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673901113
    }
]