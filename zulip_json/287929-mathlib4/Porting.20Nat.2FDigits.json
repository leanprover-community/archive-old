[
    {
        "content": "<p>Hello there, I'm trying to port Nat/Digits in Lean 4, I would like to extend <code>normNum</code> to support inequalities, if I understand well, it requires to recognize <code>f.isConstOf ``Nat.ble</code> and dispatch to some evaluation which will provide a couple <code>(term value of truth, term proof of the value of truth)</code>, I am just uncertain on how to handle the stuff regarding the orders as it seems like the actual code supports numerals from semiring and I am confused about semirings/numerals/(lt|le) orders ; should I lift the numerals to Nat and think only over these types? Can I read more about this, except the original tactic?</p>\n<p>Also, is the plan:</p>\n<ul>\n<li>proving that a numeral is &gt; 0</li>\n<li>proving that a numeral is ≥ x</li>\n<li>proving that a numeral is &gt; x</li>\n</ul>\n<p>is the good one?</p>\n<p>In the same vein, I would like to work on <code>rcases</code>, but I wonder if that's needed at all, it looks like <code>match x with</code> is enough (at least, that's how I replaced most of <code>rcases</code> I encountered in Lean 3's code)</p>\n<p>And last question for now, here's this little theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ofDigits</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Numeric.ofNat</span> <span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">ofDigits</span> <span class=\"n\">b</span> <span class=\"n\">t</span> <span class=\"c1\">-- should have auto-coercions?</span>\n</code></pre></div>\n<p>In Lean 3, there is no need to specify the explicit <code>Numeric.ofNat</code>, shouldn't there be some coe lemma for this too?</p>\n<p>Thanks in advance!</p>",
        "id": 241698062,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1622995304
    },
    {
        "content": "<p>Also, I realize there is no <code>instance : Semiring N</code>, should I lift one from simpler structures to get auto-simplification in the natural integers semiring?</p>",
        "id": 241698294,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1622995645
    },
    {
        "content": "<p>Somebody once posted some \"lean 4 natural number game levels\" but probably proving semiring isn't hard, it's inequalities which can get subtle</p>",
        "id": 241710625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623013219
    },
    {
        "content": "<p>I think <code>rcases</code> should be ported, with the lean 3 syntax</p>",
        "id": 241726301,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623038703
    },
    {
        "content": "<p>there are some possible syntax refinements but <code>match</code> is not a complete replacement, since it doesn't generalize arguments in the same way as <code>cases</code> and generates lots of inaccessible names</p>",
        "id": 241726366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623038770
    },
    {
        "content": "<p>The goal for normNum inequalities would be to prove that <code>(a &lt; b) = True</code> or <code>(a &lt; b) = False</code> where <code>a</code> and <code>b</code> are numerals</p>",
        "id": 241726480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623038928
    },
    {
        "content": "<p>this would be done by reducing the problem to <code>Nat.ble</code> and using <code>rfl</code></p>",
        "id": 241726491,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623038952
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Porting.20Nat.2FDigits/near/241726480\">said</a>:</p>\n<blockquote>\n<p>The goal for normNum inequalities would be to prove that <code>(a &lt; b) = True</code> or <code>(a &lt; b) = False</code> where <code>a</code> and <code>b</code> are numerals</p>\n</blockquote>\n<p>What typeclass should introduce (&lt;=) to normNum? It looks like it was <code>linear_ordered_semiring</code> in lean 3.</p>",
        "id": 255469033,
        "sender_full_name": "Chris B",
        "timestamp": 1632947447
    },
    {
        "content": "<p>If you want to start working on it now, feel free to invent your own typeclass that includes whatever <code>norm_num</code> uses. Later it will probably be replaced with <code>LinearOrderedSemiring</code></p>",
        "id": 255480545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632952054
    },
    {
        "content": "<p>I guess the main thing the new <code>norm_num</code> needs to know is that <code>ofNat a &lt; ofNat b &lt;-&gt; a &lt; b</code> and then the rhs is evaluated in the kernel</p>",
        "id": 255480703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632952129
    },
    {
        "content": "<p>Ok, the second part is what I had in mind.</p>",
        "id": 255482328,
        "sender_full_name": "Chris B",
        "timestamp": 1632952821
    }
]