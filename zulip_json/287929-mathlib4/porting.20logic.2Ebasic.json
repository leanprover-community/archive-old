[
    {
        "content": "<p>Remember to curb your enthusiasm a little here: part of the point of asking for help porting theories is so that we can prioritize which tactics need porting. That is, we are fully expecting to quickly run into problems where a file can't / shouldn't be ported yet, and will have to wait on tactic development.</p>",
        "id": 304845657,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666129331
    },
    {
        "content": "<p>To be a little more concrete about what needs to happen with <code>Logic.Basic</code>, I would recommend someone tries the following:</p>\n<ul>\n<li>Open <code>Logic.Basic</code> in mathlib3port</li>\n<li>Copy and paste that <em>to the bottom</em> of <code>Logic.Basic</code> in mathlib4 (i.e. contrary to my suggestion for most existing files, which is that you just nuke the existing file).</li>\n<li>Now go through the material you just pasted in.<ul>\n<li>Hopefully most declarations will be flagged as errors because they already exist. Just delete them.</li>\n<li>Fix up any errors in other declarations.</li>\n<li>Do a manual pass looking for duplications with changed names.</li>\n<li>Add any #align statements needed corresponding to thoses changes.</li>\n<li>Reorder as appropriate to bring some semblance of order to the file.</li>\n</ul>\n</li>\n</ul>",
        "id": 304846053,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666129511
    },
    {
        "content": "<p>regarding \"reorder as appropriate\", I think we want to order the declarations in the same order as they appear in the mathlib file, unless this is impossible due to e.g. a different proof. That will minimize future diffs</p>",
        "id": 304846310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666129630
    },
    {
        "content": "<p>I've had an initial attempt at porting logic.basic, by taking the output from mathport and deleting everything that already existed, then merging that with the current mathlib4 Logic.Basic.</p>",
        "id": 305078844,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666241098
    },
    {
        "content": "<p>I finished merging in that sense, but I left a bunch of errors in the mathport output, and may not get back to it immediately.</p>",
        "id": 305078875,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666241128
    },
    {
        "content": "<p>If someone would like to take over the mathlib4 branch <code>logic_basic</code>, I think that \"just fixing all the errors\" should suffice for reach a complete port now.</p>",
        "id": 305078892,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666241157
    },
    {
        "content": "<p>Two reasons to get this out of the way:</p>\n<ul>\n<li>it's at the root of all our (non-tactic) import trees, so blocking almost everything</li>\n<li>it's more complicated than most other things, because it contains a partial port of the mathlib3 content, but so does <code>Std4</code></li>\n</ul>",
        "id": 305079456,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666241703
    },
    {
        "content": "<p>I'll have a look now</p>",
        "id": 305101831,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666254400
    },
    {
        "content": "<p>This hinges on <code>Tactic.Symm</code> to be implemented or at least the <code>[symm]</code> attribute being present. Should I maybe add a placeholder for attribute at least?</p>",
        "id": 305107560,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666256737
    },
    {
        "content": "<p>I noticed that some lemmas in <code>Init</code> which we previously stated as <code>iff</code>s are now stated in terms of equality. Do we know what the reasoning behind the change is?</p>",
        "id": 305113650,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666259359
    },
    {
        "content": "<p>it's simpler for <code>simp</code></p>",
        "id": 305113675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666259371
    },
    {
        "content": "<p>they should be considered as internal lemmas for <code>simp</code></p>",
        "id": 305113735,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666259396
    },
    {
        "content": "<p>lol we just changed this in <code>mathlib3</code></p>",
        "id": 305114191,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1666259576
    },
    {
        "content": "<p>they were originally equalities and because <code>dsimp</code> in lean3 can now deal with <code>iff</code>s they were changed with <code>iff</code></p>",
        "id": 305114271,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1666259608
    },
    {
        "content": "<p>Okay, so we'll maybe use those and apply whatever the inverse of propext is called</p>",
        "id": 305118033,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666261179
    },
    {
        "content": "<p>The plan is still to use <code>iff</code> where possible in mathlib. Leo has stated he is okay with renaming the lemmas in <code>Init</code> if they get in the way</p>",
        "id": 305118548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666261394
    },
    {
        "content": "<p>Okay</p>",
        "id": 305124296,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666262794
    },
    {
        "content": "<p>What is the general plan for things that are missing or different in <code>Init</code>? I worked around some of them in <code>logic.basic</code>, but that's maybe not a good solution since they'll still be missing down the line, so maybe adding them directly to <code>logic.basic</code> or to <code>Std.Logic</code> might be an option?</p>",
        "id": 305124435,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666262866
    },
    {
        "content": "<p>I added some more notes to <code>Logic.Basic</code></p>",
        "id": 305124706,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666262983
    },
    {
        "content": "<p>Don't rewrite proofs to work around missing theorems if possible</p>",
        "id": 305125420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666263287
    },
    {
        "content": "<p>just add the missing theorems</p>",
        "id": 305125453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666263300
    },
    {
        "content": "<p>Renames are okay, use <code>#align</code> to tell mathport the new name</p>",
        "id": 305125487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666263317
    },
    {
        "content": "<p>Is it okay if I add them to <code>mathlib4</code> for now, and you'd elevate them to <code>std4</code> later?</p>",
        "id": 305127053,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666263979
    },
    {
        "content": "<p>yes</p>",
        "id": 305127076,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666263992
    },
    {
        "content": "<p>they should already exist in std, do you have a specific list of theorems?</p>",
        "id": 305127109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666264011
    },
    {
        "content": "<p><code>eq_true_intro</code>, <code>eq_true_false</code> for example</p>",
        "id": 305130926,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666265700
    },
    {
        "content": "<p><code>eq_true_intro</code> is <code>eq_true</code> now</p>",
        "id": 305136405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666267975
    },
    {
        "content": "<p>Added it to the align file</p>",
        "id": 305143862,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666270526
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/porting.20logic.2Ebasic/near/305118548\">said</a>:</p>\n<blockquote>\n<p>The plan is still to use <code>iff</code> where possible in mathlib. Leo has stated he is okay with renaming the lemmas in <code>Init</code> if they get in the way</p>\n</blockquote>\n<p><code>congr</code> now only takes equalities, is that due to change?</p>",
        "id": 305144596,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666270774
    },
    {
        "content": "<p>the attribute or the tactic?</p>",
        "id": 305150572,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666272754
    },
    {
        "content": "<p>The attribute foremost</p>",
        "id": 305153810,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666273735
    },
    {
        "content": "<p>I think it is more likely that the tactic will change to allow &lt;-&gt; than the attribute</p>",
        "id": 305153980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666273782
    },
    {
        "content": "<p>the attribute is only used rarely anyway</p>",
        "id": 305154026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666273793
    },
    {
        "content": "<p>What's missing from logic.basic is now:</p>\n<ul>\n<li>Some errors on <code>[elabAsElim]</code> attributes</li>\n<li>Errors on iff-valued <code>[congr]</code> attributes</li>\n<li>Three proofs where simp leaves goes by not replacing using <code>h : P</code> to replace <code>P</code> by <code>True</code> in the goal</li>\n</ul>",
        "id": 305159060,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666275331
    },
    {
        "content": "<p>just comment out the broken attributes for now</p>",
        "id": 305164614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666276696
    },
    {
        "content": "<p>I don't understand the third category, can you give an example?</p>",
        "id": 305164677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666276716
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">dite_eq_iff</span> <span class=\"o\">:</span> <span class=\"n\">dite</span> <span class=\"n\">P</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">P</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">exists_prop_of_false</span> <span class=\"n\">not_false</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 305164877,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666276769
    },
    {
        "content": "<p>ah, can you mwe that? I don't have <code>exists_prop_of_false</code></p>",
        "id": 305165202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666276854
    },
    {
        "content": "<p>This is self contained:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"bp\">¬∃</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mt</span> <span class=\"n\">Exists.fst</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">dite_eq_iff</span> <span class=\"o\">:</span> <span class=\"n\">dite</span> <span class=\"n\">P</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">P</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"n\">not_false</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 305165723,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666276994
    },
    {
        "content": "<p>I put in term mode proofs for the three places simp is not finishing, so at least the branch builds now.</p>",
        "id": 305242433,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666301795
    },
    {
        "content": "<p>I've put this up at <a href=\"https://github.com/leanprover-community/mathlib4/pull/484\">https://github.com/leanprover-community/mathlib4/pull/484</a> to hear from the linter.</p>",
        "id": 305243021,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666302076
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/porting.20logic.2Ebasic/near/305242433\">said</a>:</p>\n<blockquote>\n<p>I put in term mode proofs for the three places simp is not finishing, so at least the branch builds now.</p>\n</blockquote>\n<p>Might still be good to investigate what the simplifier fails to do there /cc <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span></p>",
        "id": 305295063,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666337612
    },
    {
        "content": "<p>Could you report an mwe as a lean4 issue?</p>",
        "id": 305298411,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1666339175
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/porting.20logic.2Ebasic/near/305243021\">said</a>:</p>\n<blockquote>\n<p>I've put this up at <a href=\"https://github.com/leanprover-community/mathlib4/pull/484\">https://github.com/leanprover-community/mathlib4/pull/484</a> to hear from the linter.</p>\n</blockquote>\n<p>Linter says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">forall_forall_const.</span><span class=\"o\">{</span><span class=\"n\">u_2</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"c\">/-</span><span class=\"cm\"> simp can prove this:</span>\n<span class=\"cm\">  by simp only [forall_const]</span>\n<span class=\"cm\">One of the lemmas above could be a duplicate.</span>\n</code></pre></div>\n<p>but for some reason, <code>simp only [forall_const]</code> does not suffice for me, but I have to put in <code>iff_self</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 305303637,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666341247
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  <a href=\"https://github.com/leanprover/lean4/issues/1762\">https://github.com/leanprover/lean4/issues/1762</a></p>",
        "id": 305311386,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666344084
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.discharge</span><span class=\"o\">]</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">discharge</span> <span class=\"n\">hypotheses</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"n\">h</span> <span class=\"bp\">↔</span> <span class=\"bp\">?</span><span class=\"n\">q'</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>I'm not surprised it refuses to instantiate that metavariable. I vaguely recall a previous thread/issue on this.</p>",
        "id": 305312303,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1666344431
    },
    {
        "content": "<p>It's not super important to have that I guess. If it's only an issue when having an existential quantification over a <code>Prop</code>, it's not going to be super common...</p>",
        "id": 305313102,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666344761
    },
    {
        "content": "<p>The output looks the same at <a href=\"https://leanprover-community.github.io/lean-web-editor/#code=example%20%28P%20%3A%20Prop%29%20%28h%20%3A%20P%29%20%28A%20%3A%20P%20%E2%86%92%20Prop%29%0A%20%20%28h1%20%3A%20%E2%88%80%7Bp%20p'%20%3A%20Prop%7D%20%7Bq%20q'%20%3A%20p%20%E2%86%92%20Prop%7D%0A%20%20%20%20%28hq%20%3A%20%E2%88%80%20h%2C%20q%20h%20%E2%86%94%20q'%20h%29%20%28hp%20%3A%20p%20%E2%86%94%20p'%29%2C%20Exists%20q%20%3D%20%E2%88%83%20h%20%3A%20p'%2C%20q'%20%28hp.2%20h%29%29%0A%20%20%28h2%20%3A%20%E2%88%80%28p%20%3A%20true%20%E2%86%92%20Prop%29%2C%20%28%E2%88%83%20x%2C%20p%20x%29%20%E2%86%94%20p%20true.intro%29%20%3A%20%E2%88%83%20%28h%20%3A%20P%29%2C%20A%20h%20%3A%3D%20by%0A%20%20simp%20only%20%5Bh%2C%20h1%2C%20h2%5D%0A\">https://leanprover-community.github.io/lean-web-editor/#code=example%20%28P%20%3A%20Prop%29%20%28h%20%3A%20P%29%20%28A%20%3A%20P%20%E2%86%92%20Prop%29%0A%20%20%28h1%20%3A%20%E2%88%80%7Bp%20p'%20%3A%20Prop%7D%20%7Bq%20q'%20%3A%20p%20%E2%86%92%20Prop%7D%0A%20%20%20%20%28hq%20%3A%20%E2%88%80%20h%2C%20q%20h%20%E2%86%94%20q'%20h%29%20%28hp%20%3A%20p%20%E2%86%94%20p'%29%2C%20Exists%20q%20%3D%20%E2%88%83%20h%20%3A%20p'%2C%20q'%20%28hp.2%20h%29%29%0A%20%20%28h2%20%3A%20%E2%88%80%28p%20%3A%20true%20%E2%86%92%20Prop%29%2C%20%28%E2%88%83%20x%2C%20p%20x%29%20%E2%86%94%20p%20true.intro%29%20%3A%20%E2%88%83%20%28h%20%3A%20P%29%2C%20A%20h%20%3A%3D%20by%0A%20%20simp%20only%20%5Bh%2C%20h1%2C%20h2%5D%0A</a></p>",
        "id": 305313185,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1666344808
    },
    {
        "content": "<p>Uh, I edited the MWE to boil it down a bit more</p>",
        "id": 305314305,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666345243
    },
    {
        "content": "<p>But yea, that's weird</p>",
        "id": 305314570,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666345334
    },
    {
        "content": "<p>Oh, importing <code>logic.basic</code> changes it</p>",
        "id": 305314856,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666345445
    },
    {
        "content": "<p>Okay, I think I'm on it. <code>congr</code> lemmas are used silently by <code>simp</code>, and <code>exists_prop_congr'</code> is <code>congr</code></p>",
        "id": 305315639,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666345782
    },
    {
        "content": "<p>Yes, in the end it boils down to the issue that <code>iff</code>-lemmas can't be <code>congr</code> lemmas right now in Lean 4</p>",
        "id": 305316570,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666346194
    },
    {
        "content": "<p>Made a new issue: <a href=\"https://github.com/leanprover/lean4/issues/1763\">https://github.com/leanprover/lean4/issues/1763</a></p>",
        "id": 305323599,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666348922
    }
]