[
    {
        "content": "<p>The following proof works in Lean3 but not Lean4. I'm a bit surprised that it does work in Lean3, but the fact that it doesn't work breaks a bunch of proofs in <code>Data.Set.Basic</code>. What's the best fix to this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">logic.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">forall_true_left</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 314474914,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1670424998
    },
    {
        "content": "<p>The problem seems to be the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">logic.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">],</span> <span class=\"c1\">-- `⊢ (∀ (h : true), q _) ↔ q h`</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">iff_self</span><span class=\"o\">,</span> <span class=\"n\">forall_true_left</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The <code>simp only [foo]</code> line works in Lean 3, but does nothing in Lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span> <span class=\"c1\">-- no change in goal in Lean 4</span>\n  <span class=\"c1\">-- rw [foo] -- motive not type correct :-/</span>\n  <span class=\"n\">subst</span> <span class=\"n\">foo</span>\n  <span class=\"n\">simp</span> <span class=\"c1\">-- works fine now</span>\n</code></pre></div>",
        "id": 314521054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670435665
    },
    {
        "content": "<p>This vaguely reminds me of <a href=\"https://github.com/leanprover/lean4/issues/1549\">https://github.com/leanprover/lean4/issues/1549</a></p>",
        "id": 314521377,
        "sender_full_name": "David Renshaw",
        "timestamp": 1670435758
    },
    {
        "content": "<p>I wonder if there's a way to add a type annotation to make it work (like <a href=\"https://github.com/leanprover/lean4/issues/1549#issuecomment-1241105330\">this workaround</a>).</p>",
        "id": 314521479,
        "sender_full_name": "David Renshaw",
        "timestamp": 1670435779
    },
    {
        "content": "<p>Can we <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> this for an issue on the Lean 4 repo?</p>",
        "id": 314572132,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670452796
    },
    {
        "content": "<p>slightly shorter but not much</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">True</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"n\">True.intro</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">h'</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">h.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">trivial</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">]</span> <span class=\"c1\">-- no change in goal in Lean 4</span>\n  <span class=\"c1\">-- rw [h] -- motive not type correct :-/</span>\n  <span class=\"n\">subst</span> <span class=\"n\">h</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h'</span><span class=\"o\">]</span> <span class=\"c1\">-- works fine now</span>\n</code></pre></div>",
        "id": 314576058,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1670454540
    },
    {
        "content": "<p>I'll file it. I noticed this a few months ago as well but thought it was just a lack of <code>@[simp]</code>s</p>",
        "id": 314576236,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1670454618
    },
    {
        "content": "<p>It would be best if you can minimise this so it doesn't include Mathlib at all</p>",
        "id": 314576311,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670454678
    },
    {
        "content": "<p>Just copy-paste anything needed from Logic.Basic. The Lean 4 devs will need a test case.</p>",
        "id": 314576335,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670454698
    },
    {
        "content": "<p>Right, edited</p>",
        "id": 314576924,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1670455004
    },
    {
        "content": "<p>Just adding the link to Jakob's issue here: <a href=\"https://github.com/leanprover/lean4/issues/1926\">https://github.com/leanprover/lean4/issues/1926</a></p>",
        "id": 314583517,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670459098
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/pull/903\">#903</a> I encountered a bug which I think is related.  If someone can sanity-check this then I'll add it to the <a href=\"https://github.com/leanprover/lean4/issues/1926\">issue Jakob opened</a>.  The following fails in Lean 4 but works in Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hQ</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">=</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hR</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">Q</span> <span class=\"bp\">↔</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hQ</span><span class=\"o\">,</span> <span class=\"n\">hR</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 314679238,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670507164
    },
    {
        "content": "<p>Does adding <a href=\"https://leanprover-community.github.io/mathlib_docs/find/iff_self\">docs#iff_self</a> to the list help?</p>",
        "id": 314684770,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1670508810
    },
    {
        "content": "<p>It does, but that doesn't seem to explain the difference between the Lean 3 and Lean 4 behaviour?</p>",
        "id": 314686514,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670509259
    },
    {
        "content": "<p>Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.simplify.rewrite</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hQ</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hR</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">Q</span> <span class=\"bp\">↔</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hQ</span><span class=\"o\">,</span> <span class=\"n\">hR</span><span class=\"o\">]</span> <span class=\"c1\">-- works</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">debugging output:</span>\n\n<span class=\"cm\">0. [simplify.rewrite] [hQ]: Q ==&gt; false</span>\n<span class=\"cm\">0. [simplify.rewrite] [hR]: R ==&gt; false</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c1\">-- but</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">false</span> <span class=\"bp\">↔</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>Lean 3 <code>simp</code> is doing some kind of magic. Is it trying <code>refl</code> if a rewrite succeeds or something?</p>",
        "id": 314689025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670509975
    },
    {
        "content": "<p>It's strange because <code>P ∨ false ↔ P ∨ false</code> isn't even true by refl!</p>",
        "id": 314689826,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670510226
    },
    {
        "content": "<p>Or more precisely, it's true <code>by refl</code> but not with <code>rfl</code>.  Maybe that's an important difference.</p>",
        "id": 314689940,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670510264
    },
    {
        "content": "<p>It's true by <a href=\"https://leanprover-community.github.io/mathlib_docs/find/iff.rfl\">docs#iff.rfl</a></p>",
        "id": 314690045,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670510285
    },
    {
        "content": "<p>Maybe a missing <code>@[refl]</code> tag on <code>Iff.rfl</code>?</p>",
        "id": 314690117,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670510306
    },
    {
        "content": "<p><del>Oh i guess not, because <code>refl</code> works here.</del> Sorry, got Lean 3 and Lean 4 confused.</p>",
        "id": 314690217,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670510336
    },
    {
        "content": "<p>I think that lean 3 <code>rw</code> tries tactic <code>refl</code> if it succeeds.</p>",
        "id": 314690324,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670510371
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">False</span> <span class=\"bp\">↔</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>fails in Lean 4, but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">false</span> <span class=\"bp\">↔</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span>\n</code></pre></div>\n<p>succeeds in Lean 3.</p>",
        "id": 314690679,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670510474
    },
    {
        "content": "<p>Regarding the initial issue of rewriting under binders: the minimised example in the github issue doesn't work in lean 3 either without imports. In fact it seems that <code>import logic.basic</code> changes the behaviour of <code>simp only</code>. This surprised me! Lean 3 code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">logic.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"k\">have</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n                   <span class=\"c1\">-- goal currently  `⊢ (∀ (h2 : p), q h2) ↔ q h`</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">],</span> <span class=\"c1\">-- goal changes to `⊢ (∀ (h : true), q _) ↔ q h`</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"o\">}</span>\n</code></pre></div>\n<p>If you comment out the mathlib3 import, <code>simp only [foo]</code> fails to make progress. So the <em>mathlib import</em> is changing the behaviour of <code>simp only</code>.  How?? Note that this means that the original issue in this conversation might not be a Lean 4 issue at all, perhaps mathlib3 is doing something clever which mathlib4 isn't doing. Note in particular that the claim in the lean 4 issue that lean 3 does something different is incorrect as it stands, and also the original issue Chris posted is behaving the same way in bare lean 3 and bare lean 4; it's only when mathlib gets involved that <code>simp only</code> becomes more powerful in lean 3.</p>",
        "id": 314695212,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670511717
    },
    {
        "content": "<p>Got it: (again this is Lean 3 code)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- comment out this lemma to make `simp only [foo]` fail below</span>\n<span class=\"kd\">@[congr]</span> <span class=\"kd\">lemma</span> <span class=\"n\">forall_prop_congr'</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"n\">q'</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">h</span> <span class=\"bp\">↔</span> <span class=\"n\">q'</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">p'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∀</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p'</span><span class=\"o\">,</span> <span class=\"n\">q'</span> <span class=\"o\">(</span><span class=\"n\">hp.2</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"k\">have</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n                   <span class=\"c1\">-- goal currently  `⊢ (∀ (h2 : p), q h2) ↔ q h`</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">],</span> <span class=\"c1\">-- goal changes to `⊢ (∀ (h : true), q _) ↔ q h`</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"o\">}</span>\n</code></pre></div>\n<p>So adding a <code>congr</code> lemma can change the behaviour of <code>simp only</code> in Lean 3 and this is perhaps the real cause of the original issue.</p>",
        "id": 314696547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670512051
    },
    {
        "content": "<p>Nice detective work.  Inter alia, you're saying that my issue is not related to Jakob's issue, right?</p>",
        "id": 314697087,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670512199
    },
    {
        "content": "<p>Tactic <code>rfl</code> in Lean 4 only tries <code>eq.refl</code> because it was written before the <code>@[refl]</code> attribute. I haven't got back to your issue yet but I'll get there :-)</p>",
        "id": 314697499,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670512285
    },
    {
        "content": "<p>Chris' original issue in Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">forall_true_left</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"n\">true.intro</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">forall_true_left</span><span class=\"o\">]</span> <span class=\"c1\">-- fails</span>\n\n\n<span class=\"kd\">@[congr]</span> <span class=\"kd\">lemma</span> <span class=\"n\">forall_prop_congr'</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"n\">q'</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">h</span> <span class=\"bp\">↔</span> <span class=\"n\">q'</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">p'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∀</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p'</span><span class=\"o\">,</span> <span class=\"n\">q'</span> <span class=\"o\">(</span><span class=\"n\">hp.2</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">forall_true_left</span><span class=\"o\">]</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 314697773,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670512347
    },
    {
        "content": "<p>16 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/Difference.20in.20.02klzzwxh.3A0000.03.20behaviour\">#mathlib4 &gt; Difference in <code>simp</code> behaviour</a> by <span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span>.</p>",
        "id": 314697783,
        "sender_full_name": "Notification Bot",
        "timestamp": 1670512348
    },
    {
        "content": "<p>16 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/.02klzzwxh.3A0000.03.20.28or.20.02klzzwxh.3A0001.03.3F.29.20difference.20Lean.203.2F4\">#mathlib4 &gt; <code>simp</code> (or <code>refl</code>?) difference Lean 3/4</a> by <span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span>.</p>",
        "id": 314697784,
        "sender_full_name": "Notification Bot",
        "timestamp": 1670512349
    },
    {
        "content": "<p>OK, I think I disaggregated the messages :)</p>",
        "id": 314698128,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670512447
    },
    {
        "content": "<p>So do we want to be tagging every <code>congr</code> lemma in mathlib4 with <code>simp</code>?  Or is there a better fix?</p>",
        "id": 314698333,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670512512
    },
    {
        "content": "<p>What is weirding me out is that this congr lemma is changing the behaviour of simp <em>only</em>!</p>",
        "id": 314698458,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670512544
    },
    {
        "content": "<p>From mathlib4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Porting note: `@[congr]` commented out for now.</span>\n<span class=\"c1\">-- @[congr]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">forall_prop_congr'</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"n\">q'</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">h</span> <span class=\"bp\">↔</span> <span class=\"n\">q'</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">p'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∀</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p'</span><span class=\"o\">,</span> <span class=\"n\">q'</span> <span class=\"o\">(</span><span class=\"n\">hp.2</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">propext</span> <span class=\"o\">(</span><span class=\"n\">forall_prop_congr</span> <span class=\"n\">hq</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>;-)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">congr</span><span class=\"o\">]</span> <span class=\"n\">forall_prop_congr'</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">invalid 'congr' theorem, equality left/right-hand sides must be applications of the same function</span>\n<span class=\"cm\">  (∀ (h : ?p), ?q h) = ∀ (h : ?p'), ?q' (_ : ?p)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>:-(</p>",
        "id": 314698730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670512622
    },
    {
        "content": "<p>congr lemmas are not selected by simp only, it always uses all of them</p>",
        "id": 314700475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670513103
    },
    {
        "content": "<p>Do you have any idea why we can't tag <code>forall_prop_congr'</code> with <code>@[congr]</code> in Lean 4 whereas we could in Lean 3? Are we doomed to a life of <code>simp [...] with lean_3_congr_simps_which_arent_congr_in_lean_4</code>?</p>",
        "id": 314701330,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670513348
    },
    {
        "content": "<p>because no one has filed a bug report for this yet</p>",
        "id": 314701898,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670513494
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- lean 3</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">forall_true_left</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"n\">true.intro</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">forall_prop_congr'</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"n\">q'</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">h</span> <span class=\"bp\">↔</span> <span class=\"n\">q'</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">p'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∀</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p'</span><span class=\"o\">,</span> <span class=\"n\">q'</span> <span class=\"o\">(</span><span class=\"n\">hp.2</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- uncomment to fix</span>\n<span class=\"c1\">-- attribute [congr] forall_prop_congr'</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">forall_true_left</span><span class=\"o\">,</span> <span class=\"n\">forall_prop_congr'</span><span class=\"o\">]</span> <span class=\"c1\">-- still fails</span>\n</code></pre></div>",
        "id": 314701964,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670513518
    },
    {
        "content": "<p>It's more than \"just add this as a <code>simp</code> lemma\"</p>",
        "id": 314702068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670513537
    },
    {
        "content": "<p>yeah simp doesn't take congr lemmas as input at all</p>",
        "id": 314702282,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670513595
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Difference.20in.20.60simp.60.20behaviour/near/314701898\">said</a>:</p>\n<blockquote>\n<p>because no one has filed a bug report for this yet</p>\n</blockquote>\n<p>I added some comments at <a href=\"https://github.com/leanprover/lean4/issues/1926\">https://github.com/leanprover/lean4/issues/1926</a> -- does that count as filing a bug report?</p>",
        "id": 314702285,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670513596
    },
    {
        "content": "<p>if you put them in the simp list they will be treated as simp lemmas, not congr lemmas</p>",
        "id": 314702347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670513616
    },
    {
        "content": "<p>I think so... you just have to make sure that the issue being solved implies this problem is also solved</p>",
        "id": 314702677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670513727
    },
    {
        "content": "<p>because leo likes closing issues :)</p>",
        "id": 314702693,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670513735
    },
    {
        "content": "<p>Who doesn't?</p>",
        "id": 314706365,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1670514803
    },
    {
        "content": "<p>As soon as I find the time I'll try to see what happens if one just disables the check <a href=\"https://github.com/leanprover/lean4/blob/7034e64b4fcc0dada766c176d6aa748c71d05a50/src/Lean/Meta/Tactic/Simp/SimpCongrTheorems.lean#L59\">here</a> which prevents <code>forall_prop_congr'</code> to be marked as <code>[congr]</code>...</p>",
        "id": 314878843,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1670587109
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110789\">@Jakob von Raumer</span>, I disabled it in a branch: <a href=\"https://github.com/leanprover/lean4/compare/master...semorrison:lean4:disable_congr_check?expand=1\">https://github.com/leanprover/lean4/compare/master...semorrison:lean4:disable_congr_check?expand=1</a></p>\n<p>We would need to include a test including <code>@[congr] theorem forall_prop_congr` </code>.</p>",
        "id": 315274019,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670808021
    },
    {
        "content": "<p>It's funny that for most purposes, <code>∀</code> behaves like a normal function <code>Forall : (α : Type) → (α → Prop) → Prop</code></p>",
        "id": 315275691,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1670809611
    },
    {
        "content": "<p>I added the test, which failed:</p>",
        "id": 315276113,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670810042
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/1942\">https://github.com/leanprover/lean4/pull/1942</a></p>",
        "id": 315276141,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670810043
    },
    {
        "content": "<p>Oh, that's unfortunate, closing the PR deleted the CI outputs?</p>",
        "id": 315276158,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670810070
    },
    {
        "content": "<p>Ah, here it is:</p>",
        "id": 315276213,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670810121
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/actions/runs/3671852401/jobs/6207473096#step:11:1914\">https://github.com/leanprover/lean4/actions/runs/3671852401/jobs/6207473096#step:11:1914</a></p>",
        "id": 315276214,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670810122
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"mi\">02</span><span class=\"o\">:</span><span class=\"mi\">15</span> <span class=\"o\">(</span><span class=\"mi\">00</span><span class=\"bp\">.</span><span class=\"mi\">050441</span><span class=\"o\">)]</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">test</span><span class=\"bp\">-</span><span class=\"n\">stage1</span><span class=\"bp\">&gt;</span>  <span class=\"mi\">664</span><span class=\"bp\">/</span><span class=\"mi\">1623</span> <span class=\"n\">Test</span>  <span class=\"bp\">#</span><span class=\"mi\">664</span><span class=\"o\">:</span> <span class=\"n\">leanruntest_1926.lean</span> <span class=\"bp\">.....................................***</span><span class=\"n\">Failed</span>    <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">13</span> <span class=\"n\">sec</span>\n<span class=\"o\">[</span><span class=\"mi\">02</span><span class=\"o\">:</span><span class=\"mi\">15</span> <span class=\"o\">(</span><span class=\"mi\">00</span><span class=\"bp\">.</span><span class=\"mi\">000713</span><span class=\"o\">)]</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">test</span><span class=\"bp\">-</span><span class=\"n\">stage1</span><span class=\"bp\">&gt;</span> <span class=\"n\">Unexpected</span> <span class=\"n\">return</span> <span class=\"n\">code</span> <span class=\"mi\">1</span> <span class=\"n\">executing</span> <span class=\"bp\">'</span><span class=\"n\">lean</span> <span class=\"bp\">-</span><span class=\"n\">j</span> <span class=\"mi\">0</span> <span class=\"bp\">-</span><span class=\"n\">Dlinter.all</span><span class=\"bp\">=</span><span class=\"n\">false</span> <span class=\"mi\">1926</span><span class=\"bp\">.</span><span class=\"n\">lean'</span><span class=\"bp\">;</span> <span class=\"n\">expected</span> <span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"n\">Output</span><span class=\"o\">:</span>\n<span class=\"o\">[</span><span class=\"mi\">02</span><span class=\"o\">:</span><span class=\"mi\">15</span> <span class=\"o\">(</span><span class=\"mi\">00</span><span class=\"bp\">.</span><span class=\"mi\">000481</span><span class=\"o\">)]</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">test</span><span class=\"bp\">-</span><span class=\"n\">stage1</span><span class=\"bp\">&gt;</span> <span class=\"mi\">1926</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">8</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">declaration</span> <span class=\"n\">uses</span> <span class=\"bp\">'</span><span class=\"gr\">sorry</span><span class=\"bp\">'</span>\n<span class=\"o\">[</span><span class=\"mi\">02</span><span class=\"o\">:</span><span class=\"mi\">15</span> <span class=\"o\">(</span><span class=\"mi\">00</span><span class=\"bp\">.</span><span class=\"mi\">000441</span><span class=\"o\">)]</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">test</span><span class=\"bp\">-</span><span class=\"n\">stage1</span><span class=\"bp\">&gt;</span> <span class=\"mi\">1926</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"mi\">8</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">declaration</span> <span class=\"n\">uses</span> <span class=\"bp\">'</span><span class=\"gr\">sorry</span><span class=\"bp\">'</span>\n<span class=\"o\">[</span><span class=\"mi\">02</span><span class=\"o\">:</span><span class=\"mi\">15</span> <span class=\"o\">(</span><span class=\"mi\">00</span><span class=\"bp\">.</span><span class=\"mi\">000451</span><span class=\"o\">)]</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">test</span><span class=\"bp\">-</span><span class=\"n\">stage1</span><span class=\"bp\">&gt;</span> <span class=\"mi\">1926</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"bp\">'</span><span class=\"n\">congr'</span> <span class=\"kd\">theorem</span><span class=\"o\">,</span> <span class=\"n\">argument</span> <span class=\"bp\">#</span><span class=\"mi\">1</span> <span class=\"n\">of</span> <span class=\"kd\">parameter</span> <span class=\"bp\">#</span><span class=\"mi\">5</span> <span class=\"n\">contains</span> <span class=\"n\">unresolved</span> <span class=\"kd\">parameter</span>\n<span class=\"o\">[</span><span class=\"mi\">02</span><span class=\"o\">:</span><span class=\"mi\">15</span> <span class=\"o\">(</span><span class=\"mi\">00</span><span class=\"bp\">.</span><span class=\"mi\">000655</span><span class=\"o\">)]</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">test</span><span class=\"bp\">-</span><span class=\"n\">stage1</span><span class=\"bp\">&gt;</span>   <span class=\"bp\">?</span><span class=\"n\">p</span>\n<span class=\"o\">[</span><span class=\"mi\">02</span><span class=\"o\">:</span><span class=\"mi\">15</span> <span class=\"o\">(</span><span class=\"mi\">00</span><span class=\"bp\">.</span><span class=\"mi\">000768</span><span class=\"o\">)]</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">test</span><span class=\"bp\">-</span><span class=\"n\">stage1</span><span class=\"bp\">&gt;</span> <span class=\"mi\">1926</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"o\">[</span><span class=\"mi\">02</span><span class=\"o\">:</span><span class=\"mi\">15</span> <span class=\"o\">(</span><span class=\"mi\">00</span><span class=\"bp\">.</span><span class=\"mi\">000384</span><span class=\"o\">)]</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">test</span><span class=\"bp\">-</span><span class=\"n\">stage1</span><span class=\"bp\">&gt;</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"o\">[</span><span class=\"mi\">02</span><span class=\"o\">:</span><span class=\"mi\">15</span> <span class=\"o\">(</span><span class=\"mi\">00</span><span class=\"bp\">.</span><span class=\"mi\">000408</span><span class=\"o\">)]</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">test</span><span class=\"bp\">-</span><span class=\"n\">stage1</span><span class=\"bp\">&gt;</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"o\">[</span><span class=\"mi\">02</span><span class=\"o\">:</span><span class=\"mi\">15</span> <span class=\"o\">(</span><span class=\"mi\">00</span><span class=\"bp\">.</span><span class=\"mi\">000429</span><span class=\"o\">)]</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">test</span><span class=\"bp\">-</span><span class=\"n\">stage1</span><span class=\"bp\">&gt;</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span>\n<span class=\"o\">[</span><span class=\"mi\">02</span><span class=\"o\">:</span><span class=\"mi\">15</span> <span class=\"o\">(</span><span class=\"mi\">00</span><span class=\"bp\">.</span><span class=\"mi\">000446</span><span class=\"o\">)]</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">test</span><span class=\"bp\">-</span><span class=\"n\">stage1</span><span class=\"bp\">&gt;</span> <span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 315276230,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670810144
    },
    {
        "content": "<p>So there's still a later step where this lemma would be rejected by <code>@[congr]</code>.</p>",
        "id": 315276285,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670810167
    },
    {
        "content": "<p>Would this not be a way around it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">propForall</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">forall_eq_forall_iff</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">q'</span> <span class=\"o\">:</span> <span class=\"n\">p'</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q'</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"n\">propForall</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">propForall</span> <span class=\"n\">q'</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨(</span><span class=\"bp\">·</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">·</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">@[congr]</span> <span class=\"kd\">theorem</span> <span class=\"n\">propForall_prop_congr'</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"n\">q'</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">h</span> <span class=\"bp\">↔</span> <span class=\"n\">q'</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">p'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">propForall</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">propForall</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">q'</span> <span class=\"o\">(</span><span class=\"n\">hp.2</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span> <span class=\"c1\">--propext (forall_prop_congr hq hp)</span>\n</code></pre></div>",
        "id": 315328702,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1670839754
    },
    {
        "content": "<p>I'm out of time for now: would you mind editing my PR to use that test?</p>",
        "id": 315329500,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670840025
    },
    {
        "content": "<p>Will do</p>",
        "id": 315330671,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1670840408
    },
    {
        "content": "<p>So this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">propForall</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">forall_eq_propForall</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">propForall</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">propForall_true_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">propForall</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"n\">True.intro</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[congr]</span> <span class=\"kd\">theorem</span> <span class=\"n\">propForall_prop_congr'</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">p'</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"n\">q'</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">h</span> <span class=\"bp\">↔</span> <span class=\"n\">q'</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">p'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">propForall</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">propForall</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">q'</span> <span class=\"o\">(</span><span class=\"n\">hp.2</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span> <span class=\"c1\">--propext (forall_prop_congr hq hp)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">forall_eq_propForall</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">propForall_true_left</span><span class=\"o\">,</span> <span class=\"n\">iff_self</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 315330684,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1670840413
    },
    {
        "content": "<p>So maybe this is better than tweaking <code>SimpCongrTheorems.lean</code>? I don't know <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 315330803,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1670840460
    },
    {
        "content": "<p>Then you're leaving <code>propForall</code> in people's goal after non-terminal <code>simp</code>. I know non-terminal <code>simp</code> is bad but it's still not ideal.</p>",
        "id": 315496752,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1670895475
    },
    {
        "content": "<p>Yea, would be better if we could engineer it in a way that only triggers the <code>[simp]</code> if the <code>[congr]</code> is applicable</p>",
        "id": 315539004,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1670921866
    },
    {
        "content": "<p>As a temporary hack for when these come up, I've been using the lemmas <code>forall_prop_of_true</code> and <code>forall_prop_of_false</code></p>",
        "id": 316011706,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1671102533
    }
]