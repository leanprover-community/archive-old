[
    {
        "content": "<p>Lean throws a tantrum on <code>Data.List.Infix</code> because basically all theorem statements are deemed to be ambiguous: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.notation</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.explicit</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">xs</span> <span class=\"bp\">&lt;+</span><span class=\"o\">:</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Here it throws the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ambiguous</span><span class=\"o\">,</span> <span class=\"n\">possible</span> <span class=\"n\">interpretations</span>\n  <span class=\"bp\">@</span><span class=\"n\">isPrefix</span> <span class=\"n\">Nat</span> <span class=\"n\">xs</span> <span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n  <span class=\"bp\">@</span><span class=\"n\">isPrefix</span> <span class=\"n\">Nat</span> <span class=\"n\">xs</span> <span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>I don't see why it believes these are ambiguous? They look very much the same to me?</p>",
        "id": 319608828,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672932295
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 319609088,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672932372
    },
    {
        "content": "<p>did some notation get declared twice?</p>",
        "id": 319609971,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1672932618
    },
    {
        "content": "<p><code>@[inherit_doc] infixl:50 \" &lt;+: \" =&gt; isPrefix</code> in Std.Data.List.Basic and <code>infixl:50 \" &lt;+: \" =&gt; isPrefix</code> in Mathlib.Data.List.Defs</p>",
        "id": 319610467,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672932780
    },
    {
        "content": "<p>Yeah just saw it as well</p>",
        "id": 319610487,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672932787
    },
    {
        "content": "<p>so I guess I'll just delete the Mathlib line?</p>",
        "id": 319610500,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672932794
    },
    {
        "content": "<p>The other alternative is to just never use the notation, which appears to be what's going on right now ;-)</p>",
        "id": 319610779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672932891
    },
    {
        "content": "<p>Given that basically all theorems in the file are stated with this notation I think I will avoid that :P</p>",
        "id": 319610830,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672932917
    },
    {
        "content": "<p>I'm surprised that Lean didn't complain when it ran into both definitions. Edit: maybe I'm not surprised.</p>",
        "id": 319611035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672932993
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"s2\">\" foo \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\" foo \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\" foo \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int</span>\n</code></pre></div>\n<p>works fine. I thought that we were somehow forced to \"name\" notation when we were overloading?</p>",
        "id": 319611371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672933088
    },
    {
        "content": "<p>No lean does have the ability to figure out based on type inference what notation to use. So when you have multiple notations for the same thing it can actually start elaborating all of them and only if more than one (or none) suceed will it start to complain</p>",
        "id": 319611778,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672933225
    },
    {
        "content": "<p>I see that Data.List.Infix has some theorems about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.init\">docs#list.init</a> which is kind of like list.head but a little more toned down on errors, we don't have that function in Lean 4 core, what is our policy for this? Shall I just define it inline?</p>",
        "id": 319624715,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672936934
    },
    {
        "content": "<p><code>list.init</code> lives in <code> init.data.list.basic</code>, so you should define it in <code>Mathlib.Init.Data.List.Basic</code>.</p>",
        "id": 319625183,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672937066
    },
    {
        "content": "<p>Okay that file already got list.init ported by aligning it to <code>dropLast</code>. In that case do I just rename all of the theorems accordingly yes?</p>\n<p>Furthermore there are a bunch of theorems about <code>nthLe</code> which is marked as deprecated in favor of <code>List.get</code>, shall I change those theorems as well or leave them be?</p>",
        "id": 319628558,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672938030
    },
    {
        "content": "<p>the theorems about <code>nthLe</code> should be deprecated, not changed</p>",
        "id": 319660449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672948026
    }
]