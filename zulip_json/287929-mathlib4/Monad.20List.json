[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/966\">mathlib4#966</a> added a global <code>Monad List</code> instance. I think that's fine for now, and certainly won't cause any problems for the port, but given that the core library intentionally removed this instance, maybe we want to consider whether we should do something less \"opinionated\", such as making it a scoped instance.</p>",
        "id": 319620283,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672935765
    },
    {
        "content": "<p>Why did core remove it, exactly?</p>",
        "id": 319620409,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672935798
    },
    {
        "content": "<p>There are two discussions about this in <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a>, the baseline is that a Lean 4 List is not lazy so it can have unexpected computational consequences. There are people who believe this is bad, others who believe this is just right etc.</p>",
        "id": 319620875,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672935917
    },
    {
        "content": "<p>I think the reasoning was that for programming purposes, <code>List</code> is not a very good implementation of a nondeterminism monad (though in my opinion, it's still useful in sufficiently trivial situations).</p>",
        "id": 319620917,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672935934
    },
    {
        "content": "<p>Ah I see. So this is irrelevant for most of mathlib.</p>",
        "id": 319621067,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672935969
    },
    {
        "content": "<p>I suggest we make a clear issue about this, and return to it after the port is done.</p>",
        "id": 319621186,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672936007
    },
    {
        "content": "<p>Hypothetically, if we go along with core's decision, it seems easy enough to make it scoped to <code>MonadList</code> or something, and opt in to it explicitly in the few places in mathlib where we use it or prove theorems about it</p>",
        "id": 319621310,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672936042
    },
    {
        "content": "<p>Until then, I don't expect too many projects that will depend on a half-ported mathlib <em>and</em> be bitten by this issue. If you do fall in that category: I'm sorry and tough luck.</p>",
        "id": 319621322,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672936046
    },
    {
        "content": "<p>When I looked at <code>MList</code> in the past it was only used for tactics FWIW.</p>",
        "id": 319624874,
        "sender_full_name": "Arien Malec",
        "timestamp": 1672936978
    },
    {
        "content": "<p>I think it makes sense to just add the instance in mathlib4 in this case. Mathlib4 needs backward compatibility, std doesn't</p>",
        "id": 319661441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672948375
    },
    {
        "content": "<p>I think it's also reasonable to add it to core, despite the performance pitfalls</p>",
        "id": 319661555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672948423
    },
    {
        "content": "<p>It's just a bit jarring to see it missing if you are coming from e.g. haskell</p>",
        "id": 319661642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672948449
    }
]