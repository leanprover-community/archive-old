[
    {
        "content": "<p>How do I convert mathport's <code>notation3</code> into valid Lean 4 notation? e.g.,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">notation3</span> <span class=\"s2\">\"Σₗ \"</span><span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span><span class=\"s2\">\", \"</span><span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lex</span> <span class=\"n\">Sigma</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span>\n</code></pre></div>",
        "id": 312909965,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669747398
    },
    {
        "content": "<p>I would guess that you can find where the notation for <code>Sigma</code> is defined, and basically write the same thing</p>",
        "id": 312911613,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669747915
    },
    {
        "content": "<p>Surely that should say <code>Lex (Sigma p)</code>... Is this a mathport bug?</p>",
        "id": 312911777,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669747953
    },
    {
        "content": "<p>it definitely should be <code>Lex (Sigma p)</code>. Copying and pasting the mathlib3 version and making modifications gave me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span>  <span class=\"bp\">`Σₗ`</span> <span class=\"n\">binders</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_root_.Lex</span> <span class=\"o\">(</span><span class=\"n\">Sigma</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span>\n</code></pre></div>\n<p>which still doesn't work, it complains at <code>Σ</code> that it expected <code>=&gt;</code> and it complains at <code>p</code>: `expected '[', 'binder_predicate', 'elab', 'elab_rules', 'infix', 'infixl', 'infixr', 'instance', 'macro', 'macro_rules', 'notation',  'postfix', 'prefix', 'syntax' or 'unif_hint'</p>",
        "id": 312913712,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669748548
    },
    {
        "content": "<p>I meant find the mathlib4 notation for <code>Sigma</code>, and then replace <code>Sigma p</code> there with <code>Lex (Sigma p)</code></p>",
        "id": 312924483,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669751307
    },
    {
        "content": "<p>Although the <code>Sigma</code> notation comes from here, and the generalization isn't so obvious: <a href=\"https://github.com/leanprover/lean4/blob/1b5029222859a52ad1afcd23f5fbfd64b047e17a/src/Init/NotationExtra.lean#LL84C52-L84C73\">https://github.com/leanprover/lean4/blob/1b5029222859a52ad1afcd23f5fbfd64b047e17a/src/Init/NotationExtra.lean#LL84C52-L84C73</a></p>",
        "id": 312924675,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669751394
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/1b5029222859a52ad1afcd23f5fbfd64b047e17a/src/Init/NotationExtra.lean#L179-L181also\">https://github.com/leanprover/lean4/blob/1b5029222859a52ad1afcd23f5fbfd64b047e17a/src/Init/NotationExtra.lean#L179-L181also</a> looks relevant</p>",
        "id": 312924931,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669751481
    },
    {
        "content": "<p>Yea, I was just looking that.</p>",
        "id": 312925632,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669751689
    },
    {
        "content": "<p>yeah, but I don't see how to make it work.</p>",
        "id": 312927534,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669752279
    },
    {
        "content": "<p>I think we should just use notation3 for the port</p>",
        "id": 312936779,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669755501
    },
    {
        "content": "<p>We will want to do something to make it easy to declare binders anyway</p>",
        "id": 312936875,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669755542
    },
    {
        "content": "<p><code>notation3</code> wasn't working either.</p>",
        "id": 312943131,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669758024
    },
    {
        "content": "<p>not working how?</p>",
        "id": 312948401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669760119
    },
    {
        "content": "<p>Just porting <code>Data.PSigma.Order</code> (<a href=\"https://github.com/leanprover-community/mathlib4/pull/815\">mathlib4#815</a>), so I'm running into the same thing. Keeping <code>notation3</code> for now seems okay, small problem is that it does not accept docstrings.</p>",
        "id": 313301321,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1669907365
    },
    {
        "content": "<p>I'll try to fix it</p>",
        "id": 313304180,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1669908094
    },
    {
        "content": "<p>Fixed</p>",
        "id": 313305044,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1669908318
    },
    {
        "content": "<p>Please please please port <code>data.sigma.order</code> and <code>data.psigma.order</code> simultaneously.</p>",
        "id": 313335056,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1669916331
    },
    {
        "content": "<p>There's a reason why I cross-ref both files.</p>",
        "id": 313335162,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1669916362
    },
    {
        "content": "<p>That's a bit late, since <a href=\"https://github.com/leanprover-community/mathlib4/pull/815\">mathlib4#815</a> already landed</p>",
        "id": 313338592,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1669917297
    },
    {
        "content": "<p>Sorry, I've been out for a few days with strep throat, otherwise I would have taken your advice Yaël.</p>",
        "id": 313359158,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669923183
    },
    {
        "content": "<p>What is the current status of <code>notation3</code>. Should I keep</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">notation3</span> <span class=\"s2\">\"⨆ \"</span><span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span><span class=\"s2\">\", \"</span><span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sup</span><span class=\"bp\">ᵢ</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">r</span>\n</code></pre></div>\n<p>or should I use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Std.ExtendedBinder</span> <span class=\"k\">in</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"⨆ \"</span> <span class=\"n\">extBinder</span> <span class=\"s2\">\", \"</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"mi\">51</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">sup</span><span class=\"bp\">ᵢ</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">sup</span><span class=\"bp\">ᵢ</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">binderPred</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">sup</span><span class=\"bp\">ᵢ</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">↦</span> <span class=\"n\">satisfiesBinderPred</span><span class=\"bp\">%</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 316220101,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671182996
    },
    {
        "content": "<p>Note for future readers: it took me a long time to understand that mathport adds those <code>notation3</code> command but does <em>not</em> add the relevant imports </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Mathport.Notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">Init.NotationExtra</span>\n</code></pre></div>",
        "id": 316220312,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671183052
    },
    {
        "content": "<p>And then am I right to think that whatever the answer to my first question above, it should be followed by</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[app_unexpander supᵢ]</span>\n<span class=\"kd\">def</span> <span class=\"n\">sup</span><span class=\"bp\">ᵢ.</span><span class=\"n\">unexpander</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">_</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">_</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">↦</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 316220425,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671183093
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/notation3/near/316220312\">said</a>:</p>\n<blockquote>\n<p>Note for future readers: it took me a long time to understand that mathport adds those <code>notation3</code> command but does <em>not</em> add the relevant imports </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Mathport.Notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">Init.NotationExtra</span>\n</code></pre></div>\n</blockquote>\n<p>You don't need the second import. As in lean 3, any import starting with <code>Init.*</code> is imported by default in every lean file</p>",
        "id": 316429714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671272434
    },
    {
        "content": "<p>I think you should use <code>notation3</code> with the import for now. I think we need something in this space, not sure if the <code>notation3</code> syntax is exactly the way we want to spell it, but clearly those unexpanders are just a bunch of boilerplate and this is what macros are for</p>",
        "id": 316429977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671272570
    },
    {
        "content": "<p>Sorry about the spurious import, I copy-pasted from somewhere without thinking.</p>",
        "id": 316430438,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671272820
    },
    {
        "content": "<p>The unexpander is needed in any case, right?</p>",
        "id": 316430485,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671272851
    },
    {
        "content": "<p>I mean notation3 does not do it.</p>",
        "id": 316430657,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671272946
    },
    {
        "content": "<p>How do we put doc on a <code>notation3</code>? The doc blame linter complains, and the <code>inherit_doc</code> attribute doesn't seem to work.</p>",
        "id": 316494544,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671300825
    },
    {
        "content": "<p>Actually a regular docstring seems to work.</p>",
        "id": 316494878,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671300990
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1090\">mathlib4#1090</a></p>",
        "id": 316498373,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671302935
    }
]