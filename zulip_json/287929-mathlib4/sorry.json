[
    {
        "content": "<p>Hello <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>  <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> ! Would you be ok with contributions to the mathlib4 repo that contain <code>sorry</code>s? I think it would help experimenting with Lean4 if more lemmas were available, no matter if they are actually proven or not. I've already started my own copy of mathlib4 with lots of <code>sorry</code>s for just this purpose and I'd be happy to merge it into your mathlib4 repo.</p>",
        "id": 241403446,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1622732548
    },
    {
        "content": "<p>Hm, I'd prefer not to, but if you like you can post the sorries and I can fill them in :)</p>",
        "id": 241403563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622732592
    },
    {
        "content": "<p>Sounds like a good deal :D</p>",
        "id": 241403857,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1622732705
    },
    {
        "content": "<p>For experimentation purposes, you could also look at the various automatic porting tools. Afaik they can already port the vast majority of mathlib definitions (but not the proofs), so you can get all the mathlib lemma statements.</p>",
        "id": 241411543,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1622735829
    },
    {
        "content": "<p>So autoporting tools give you sorried autoported lemmas. Does that make Mario the first auto-proving tool?</p>",
        "id": 241412996,
        "sender_full_name": "Julian Berman",
        "timestamp": 1622736478
    },
    {
        "content": "<p>I have plenty of non-master branches with sorrys</p>",
        "id": 241413000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622736481
    },
    {
        "content": "<p>The auto-porting tools will port full proofs, but only as low level proof terms, not as tactic scripts suitable for insertion into a lean file</p>",
        "id": 241413791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622736830
    },
    {
        "content": "<p>Ok, but I could use mathlib definitions and theorems in a Lean4 project in this way, right? I'll try it out.</p>",
        "id": 241414748,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1622737211
    },
    {
        "content": "<p>Yes, the mathport tool generates Lean 4 olean files from current mathlib:<br>\n<a href=\"https://github.com/dselsam/mathport/\">https://github.com/dselsam/mathport/</a> (EDIT: I'm bad at copy&amp;paste)<br>\nYou can import them in Lean 4 and it seems to work reasonably well, but there's a bit of impedance mismatch of course with different type-classes etc.</p>",
        "id": 241417150,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1622738321
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399706\">@Aur√©lien Saue</span> has been working on turning these olean files into Lean 4 source files (which don't compile yet).  This is not as trivial as it sounds, because the olean files contain all kinds of auto-generated definitions that need to be reverse-engineered.  You can see an example of its current output here:<br>\n<a href=\"https://github.com/AurelienSaue/Mathlib4_auto/blob/master/Mathlib/dynamics/flow_auto.lean\">https://github.com/AurelienSaue/Mathlib4_auto/blob/master/Mathlib/dynamics/flow_auto.lean</a></p>",
        "id": 241417870,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1622738641
    },
    {
        "content": "<p>How do I set up the directory and toml file so that I get access to the definitions in the olean files?</p>",
        "id": 241418178,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1622738766
    },
    {
        "content": "<p>I would try to follow the instructions in the README, and then hope that the examples work. <a href=\"https://github.com/dselsam/mathport/blob/master/Lib4/Examples/Nullstellensatz.lean\">https://github.com/dselsam/mathport/blob/master/Lib4/Examples/Nullstellensatz.lean</a></p>",
        "id": 241418476,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1622738924
    },
    {
        "content": "<p>Oh, alright! Thanks!</p>",
        "id": 241418956,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1622739149
    }
]