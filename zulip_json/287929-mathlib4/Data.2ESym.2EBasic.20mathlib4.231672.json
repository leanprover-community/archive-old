[
    {
        "content": "<p>The linter complains:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> The `dangerousInstance` linter reports:</span>\n<span class=\"cm\">SOME INSTANCES ARE DANGEROUS</span>\n<span class=\"cm\">During type-class search, they produce subgoals like `Group ?M`.</span>\n<span class=\"cm\">Try marking the dangerous arguments as implicit instead. -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">Sym.hasCoe</span> <span class=\"c\">/-</span><span class=\"cm\"> unassigned metavariable in out-param: Coe (Sym α ?n) (Multiset α) -/</span>\n</code></pre></div>\n<p>but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">Sym.hasCoe</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">Sym</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">toMultiset</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>doesn't even take any instances as arguments.</p>",
        "id": 322456416,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674204660
    },
    {
        "content": "<p>It doesn't like that the <code>n</code> in <code>Sym alpha n</code> doesn't appear in <code>Multiset alpha</code>... but I don't see why that should be problematic here.</p>",
        "id": 322456517,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674204692
    },
    {
        "content": "<p>yeah that is pretty odd. Is it dangerous or is it a bug in the linter?</p>",
        "id": 322460801,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674205963
    },
    {
        "content": "<p>Does it stop being dangerous if it's instead a <code>CoeTail</code> instance? I think that should be fine as one.</p>",
        "id": 322461180,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674206087
    },
    {
        "content": "<p>I fixed this. I used <code>CoeOut</code> instead of <code>Coe</code> which is the same thing that is used for the coercion from subtypes.</p>",
        "id": 322461197,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1674206094
    },
    {
        "content": "<p>Maybe <code>CoeTail</code> is better, I don't understand the difference between these things</p>",
        "id": 322461296,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1674206132
    },
    {
        "content": "<p>I don't really either. Maybe a reason for <code>CoeTail</code> over <code>CoeOut</code> is that I'm not sure if <code>Sym</code> should be regarded as a subtype of <code>Multiset</code> exactly. <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 322461726,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674206265
    },
    {
        "content": "<p>Oh, <code>CoeTail</code> would be dangerous too. Never mind.</p>",
        "id": 322462074,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674206373
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2ESym.2EBasic.20mathlib4.231672/near/322456517\">said</a>:</p>\n<blockquote>\n<p>It doesn't like that the <code>n</code> in <code>Sym alpha n</code> doesn't appear in <code>Multiset alpha</code>... but I don't see why that should be problematic here.</p>\n</blockquote>\n<p>Maybe it's that if transitive <code>Coe</code>s are solved backwards, then this introduces a free <code>n</code> that can never be solved for.</p>",
        "id": 322462246,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674206424
    },
    {
        "content": "<p>Fair enough</p>",
        "id": 322462387,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674206482
    }
]