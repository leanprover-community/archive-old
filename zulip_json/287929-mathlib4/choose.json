[
    {
        "content": "<p>Reid and I are trying to port <code>choose</code>. Afaik nobody is working on that yet, right?</p>",
        "id": 298610203,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663082735
    },
    {
        "content": "<p>Nice! Did Reid arrive in Freiburg?</p>",
        "id": 298649046,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1663095885
    },
    {
        "content": "<p>Yes <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 298748542,
        "sender_full_name": "Reid Barton",
        "timestamp": 1663153922
    },
    {
        "content": "<p>Is there an analogue of  Lean 3's <code>guard_hyp</code> for writing tests?</p>",
        "id": 298766832,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663160690
    },
    {
        "content": "<p>You can see some examples of <code>guard_hyp</code> here: <a href=\"https://github.com/leanprover-community/mathlib4/blob/fde7b1f3581c498326bfa6f1aea2c840c7d76cc5/test/Set.lean\">https://github.com/leanprover-community/mathlib4/blob/fde7b1f3581c498326bfa6f1aea2c840c7d76cc5/test/Set.lean</a></p>",
        "id": 298770777,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1663162124
    },
    {
        "content": "<p>This is the implementation: <a href=\"https://github.com/leanprover-community/mathlib4/blob/fde7b1f3581c498326bfa6f1aea2c840c7d76cc5/Mathlib/Tactic/Basic.lean#L153-L186\">https://github.com/leanprover-community/mathlib4/blob/fde7b1f3581c498326bfa6f1aea2c840c7d76cc5/Mathlib/Tactic/Basic.lean#L153-L186</a></p>",
        "id": 298770974,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1663162200
    },
    {
        "content": "<p>Thanks! Next question: What is the Lean4 analogue of <code>get_unused_name</code>?</p>",
        "id": 298780073,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663165096
    },
    {
        "content": "<p>More info on this: <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Hygenic.20expansion.20in.20tactic.20gives.20the.20same.20name.20twice.3F/near/284895168\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.E2.9C.94.20Hygenic.20expansion.20in.20tactic.20gives.20the.20same.20name.20twice.3F/near/284895168</a></p>",
        "id": 298782435,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1663165823
    },
    {
        "content": "<p>We are hacking on the branch <code>choose</code>.</p>",
        "id": 298928074,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663232387
    },
    {
        "content": "<p>We have something that is partly working. But we are a bit worried about the following defn:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">choose1</span> <span class=\"o\">(</span><span class=\"n\">nondep</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">TacticM</span> <span class=\"n\">ElimStatus</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span>   <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">g.intro1P</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">fvar</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n  <span class=\"n\">g.withContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">h</span>\n    <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">h</span>\n    <span class=\"n\">forallTelescopeReducing</span> <span class=\"n\">t</span> <span class=\"bp\">$</span> <span class=\"k\">fun</span> <span class=\"n\">ctxt</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">withTransparency</span> <span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"o\">(</span><span class=\"n\">whnf</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n      <span class=\"k\">match</span> <span class=\"n\">t.getAppFnArgs</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">Exists</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">ne_fail</span> <span class=\"o\">:</span> <span class=\"n\">ElimStatus</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">failure</span> <span class=\"o\">[]</span>\n        <span class=\"k\">let</span> <span class=\"n\">nonemp</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n        <span class=\"k\">let</span> <span class=\"n\">ctxt'</span> <span class=\"bp\">←</span> <span class=\"k\">if</span> <span class=\"n\">nonemp.isSome</span> <span class=\"k\">then</span> <span class=\"n\">ctxt.filterM</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">not</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">isProof</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">pure</span> <span class=\"n\">ctxt</span>\n        <span class=\"k\">let</span> <span class=\"n\">data_ty</span> <span class=\"bp\">←</span> <span class=\"n\">mkForallFVars</span> <span class=\"n\">ctxt'</span> <span class=\"n\">α</span>\n        <span class=\"k\">let</span> <span class=\"n\">data_val</span> <span class=\"bp\">←</span> <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">Classical.choose</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mkAppN</span> <span class=\"n\">h</span> <span class=\"n\">ctxt</span><span class=\"o\">]</span>\n        <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">g.assert</span> <span class=\"n\">data</span> <span class=\"n\">data_ty</span> <span class=\"n\">data_val</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">intro1P</span>\n        <span class=\"k\">let</span> <span class=\"n\">spec_ty</span> <span class=\"bp\">←</span> <span class=\"n\">mkForallFVars</span> <span class=\"n\">ctxt</span> <span class=\"o\">(</span><span class=\"n\">p.app</span> <span class=\"o\">(</span><span class=\"n\">mkAppN</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">fvar</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">ctxt'</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">headBeta</span>\n        <span class=\"k\">let</span> <span class=\"n\">spec_val</span> <span class=\"bp\">←</span> <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">Classical.choose_spec</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mkAppN</span> <span class=\"n\">h</span> <span class=\"n\">ctxt</span><span class=\"o\">]</span>\n        <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">g</span> <span class=\"bp\">←</span> <span class=\"n\">g.assert</span> <span class=\"bp\">.</span><span class=\"n\">anonymous</span> <span class=\"n\">spec_ty</span> <span class=\"n\">spec_val</span>\n        <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">fvar</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span> <span class=\"bp\">←</span> <span class=\"n\">g.clear</span> <span class=\"n\">v</span>\n        <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n        <span class=\"n\">replaceMainGoal</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">]</span>\n        <span class=\"n\">return</span> <span class=\"n\">ne_fail</span>\n        <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">And</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"not implemented yet\"</span>\n        <span class=\"c1\">-- TODO: support Σ, × ?</span>\n        <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"expected a term of the shape `∀xs, ∃a, p xs a` or `∀xs, p xs ∧ q xs`\"</span>\n</code></pre></div>",
        "id": 298928194,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663232424
    },
    {
        "content": "<p>We have a <code>g.withContext do</code> block, but inside it we change <code>g</code>. That seems fishy.</p>",
        "id": 298928253,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663232451
    },
    {
        "content": "<p>Are we supposed to break this into new <code>withContext do</code> blocks every time the goal changes?</p>",
        "id": 298928307,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663232472
    },
    {
        "content": "<p>only if the local context of the new metavariable is different from the old one</p>",
        "id": 298929433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663232999
    },
    {
        "content": "<p>which is the case here, because we have an <code>intro1P</code> halfway that code block</p>",
        "id": 298929534,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663233032
    },
    {
        "content": "<p>are you using expressions which refer to the newly introduced fvar?</p>",
        "id": 298929588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663233059
    },
    {
        "content": "<p>oh yes you are</p>",
        "id": 298929612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663233069
    },
    {
        "content": "<p>indeed!</p>",
        "id": 298929624,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663233077
    },
    {
        "content": "<p>but the tactic still works <span aria-label=\"shock\" class=\"emoji emoji-1f628\" role=\"img\" title=\"shock\">:shock:</span></p>",
        "id": 298929635,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663233086
    },
    {
        "content": "<p>it's not typechecking everything you give it unless it needs to</p>",
        "id": 298929954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663233219
    },
    {
        "content": "<p>right, so it works, but what we do is really bad style. Is that a good summary?</p>",
        "id": 298930055,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663233244
    },
    {
        "content": "<p>Should we just nest the <code>g.withContext do</code>s?</p>",
        "id": 298930103,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663233260
    },
    {
        "content": "<p>The number of indentations quickly adds up...</p>",
        "id": 298930215,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663233306
    },
    {
        "content": "<p>What is the idiomatic way here?</p>",
        "id": 298930233,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663233313
    },
    {
        "content": "<p>Only the part which is in the new context</p>",
        "id": 298930265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663233322
    },
    {
        "content": "<p>also, you can just not indent</p>",
        "id": 298930401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663233365
    },
    {
        "content": "<p>you will find those occasionally</p>",
        "id": 298930422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663233375
    },
    {
        "content": "<p>another thing you can do is to create <code>let</code> bindings with the tail of the program and call them inside the <code>withContext</code>. This does tend to turn the program upside down though</p>",
        "id": 298930727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663233517
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/choose/near/298930265\">said</a>:</p>\n<blockquote>\n<p>Only the part which is in the new context</p>\n</blockquote>\n<p>I tried nesting <code>g.withContext do</code> and I get a panic.</p>",
        "id": 298931137,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663233714
    },
    {
        "content": "<p>that's definitely a misattribution of blame</p>",
        "id": 298933745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663234707
    },
    {
        "content": "<p>is this on a branch I can test?</p>",
        "id": 298933775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663234719
    },
    {
        "content": "<p>by the way your indentation of the match arms after the <code>return ne_fail</code> is cursed</p>",
        "id": 298934265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663234918
    },
    {
        "content": "<p>Aha, I see. When you are inside the <code>forallTelescopeReducing</code> callback, you have an extended local context containing the variables in <code>ctxt</code>. If you use <code>g.withContext</code> it will reset the context to the one for <code>g</code>, making the <code>let spec_ty</code> line fail because it makes reference to free variables from <code>ctxt</code></p>",
        "id": 298936894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663236058
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/choose/near/298933775\">said</a>:</p>\n<blockquote>\n<p>is this on a branch I can test?</p>\n</blockquote>\n<p>yes, on <code>choose</code></p>",
        "id": 298943333,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663238790
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> I pushed some stuff to the <code>choose</code> branch which should fix the issues</p>",
        "id": 298953017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663242961
    },
    {
        "content": "<p>Thanks!!</p>",
        "id": 298957170,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663244591
    },
    {
        "content": "<p>Why do you need</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">g.withContext</span> <span class=\"k\">do</span>\n    <span class=\"n\">Elab.Term.addLocalVarInfo</span> <span class=\"n\">data</span> <span class=\"n\">fvar</span>\n</code></pre></div>",
        "id": 298964730,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663247279
    },
    {
        "content": "<p>Try removing it. The tactic will still work, but the variable will not appear blue in the tactic application</p>",
        "id": 298965350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663247492
    },
    {
        "content": "<p>wild</p>",
        "id": 298965411,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663247518
    },
    {
        "content": "<p>it also handles go-to-definition queries for when you use the variable in a later expression</p>",
        "id": 298965510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663247548
    },
    {
        "content": "<p>I think the port of <code>choose</code> is converging. But I'm stumped on some final bits. If an expert could look at the lines 100 - 120 of <code>Choose.lean</code> on the branch <code>choose</code>, that would be great.</p>",
        "id": 299108784,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663314879
    },
    {
        "content": "<p>I tried to extrapolate from Mario's changes yesterday. But I clearly didn't yet pick up all the tricks I need.</p>",
        "id": 299108868,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663314907
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/420\">mathlib4#420</a> -- with many thanks to Mario and Reid!</p>",
        "id": 299232617,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663358422
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/3072454842/jobs/4963956923\">https://github.com/leanprover-community/mathlib4/actions/runs/3072454842/jobs/4963956923</a> it fails at \"check that all files are imported\". But of course <code>Tactic/Choose</code> isn't imported anywhere. What should I do?</p>",
        "id": 299283732,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663401173
    },
    {
        "content": "<p>You have to add all the files you added to Mathlib.lean</p>",
        "id": 299308175,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663414128
    },
    {
        "content": "<p>You could even use the diff in that actions log, or do it manually</p>",
        "id": 299308245,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663414161
    },
    {
        "content": "<p>Aha, I see.</p>",
        "id": 299316232,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663418406
    },
    {
        "content": "<p>But adding a transitive reduction is good enough, I guess?</p>",
        "id": 299316262,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663418425
    },
    {
        "content": "<p>Apparently not. I added all the files, and now CI is happy.</p>",
        "id": 299331556,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663426039
    }
]