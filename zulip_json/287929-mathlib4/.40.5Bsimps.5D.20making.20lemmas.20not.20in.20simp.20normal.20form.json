[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.WithOne.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">WithOne</span>\n\n<span class=\"kd\">@[simps apply]</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃*</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">WithOne</span> <span class=\"n\">α</span> <span class=\"bp\">≃*</span> <span class=\"n\">WithOne</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">map</span> <span class=\"n\">e.toMulHom</span> <span class=\"k\">with</span>\n    <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">map</span> <span class=\"n\">e.toMulHom</span><span class=\"o\">,</span> <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"n\">map</span> <span class=\"n\">e.symm.toMulHom</span><span class=\"o\">,</span>\n    <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"o\">}</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">foo_apply</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">foo_apply : ∀ (e : ?m.1379 ≃* ?m.1380) (a : WithOne ?m.1379),</span>\n<span class=\"cm\">  Equiv.toFun (foo e).toEquiv a = ↑(map (MulEquiv.toMulHom e)) a</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>With the advent of things like <code>FunLike</code> I suspect that <code>Equiv.toFun</code> is not going to be the simp normal form for the function attached to an equiv. However <code>@[simps]</code> is generating such lemmas. Is this something which needs to be fixed in <code>@[simps]</code>?</p>\n<p>This came up in <a href=\"https://github.com/leanprover-community/mathlib4/pull/931\">mathlib4#931</a> .</p>",
        "id": 314903070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670595089
    },
    {
        "content": "<p>Is <code>initialize_simps_projection</code> a thing in Lean 4?</p>",
        "id": 314905289,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670595729
    },
    {
        "content": "<p>I don't know. </p>\n<p>More simps issues: I think that in mathlib4 <code>simps</code> is not playing well with <code>to_additive</code>: e.g. <code>@[to_additive, simps apply]</code> generates <code>Mul_apply</code> but not <code>Add_apply</code>. Furthermore ideally mathlib3port would generate <code>#align</code> lines for these auto-generated lemmas, unless it really is the case that they should never be called by name.</p>",
        "id": 314910148,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670597178
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>, yes, <code>initialize_simps_projections</code> is used all over mathlib4.</p>",
        "id": 315259471,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670795608
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, if you add </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- See Note [custom simps projection] -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Simps.apply</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">e</span>\n</code></pre></div>\n<p>to <code>Mathlib.Algebra.Hom.Equiv.Basic</code> just before <code>def Simps.symmApply</code>, then this fixes your problem.</p>",
        "id": 315268553,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670803200
    },
    {
        "content": "<p>This wasn't necessary in mathlib3. Perhaps <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> knows what has changed that results in needing this?</p>",
        "id": 315268632,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670803225
    },
    {
        "content": "<p>Mathlib3 was smart enough to work out that rule on old-style structures</p>",
        "id": 315270280,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670804707
    },
    {
        "content": "<p>On new style structures it needed help, such as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measurable_equiv.simps.apply\">docs#measurable_equiv.simps.apply</a></p>",
        "id": 315270300,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670804737
    },
    {
        "content": "<p>Okay, we're going to have to be really careful about this. Probably we should just add all the <code>apply</code> hints wherever there is a <code>symmApply</code> hint.</p>",
        "id": 315270422,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670804858
    },
    {
        "content": "<p>Or we work out how to teach <code>simps</code> to be clever. There wasn't much motivation to do so in lean3 because most of the uses were on the old-style structures.</p>",
        "id": 315270546,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670805000
    },
    {
        "content": "<p>Since the way coercions work has changed in Lean 4, I also changed the behavior of simps related to coercions. The old method was clearly wrong, because it would generate a left-hand side that contains the <code>coe</code> application, which never occurs naturally in Lean 4. So I just removed that heuristic.</p>\n<p>What is the actual simp normal form of <code>e : M ≃* N</code> viewed as a function? Is it <code>e.toMulHom.toFun</code>? or <code>FunLike.coe e</code>?</p>",
        "id": 315331846,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1670840780
    },
    {
        "content": "<p><code>FunLike.coe e</code></p>",
        "id": 315332087,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670840869
    },
    {
        "content": "<p>I see.</p>\n<p>Ok, so I guess the intended behavior is that <code>simps</code> searches for the coercion to functions, and if it finds it uses the term that was used to define that coercion on the left-hand side. This is nontrivial, but maybe I can reuse some code that Lean uses itself in the elaborator to add a coercion to a term.</p>",
        "id": 315333265,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1670841144
    },
    {
        "content": "<p>Basically I get the impression that we are reimplementing coercion to function with funlike.coe</p>",
        "id": 315333369,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670841173
    }
]