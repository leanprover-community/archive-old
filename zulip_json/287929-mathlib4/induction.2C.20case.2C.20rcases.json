[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> , what do you think about making <code>case _</code> after <code>induction</code> support <code>rcases</code> syntax? Or it's hard to change because <code>rcases</code> is in <code>std</code>, not in <code>core</code>?</p>",
        "id": 322650078,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674266031
    },
    {
        "content": "<p>To be honest, I really dislike the proliferation of rcases syntax in mathlib4.  rcases was absolutely amazing in Lean 3, because we didn't have anything else and because it was a strict superset of the built-in pattern matching syntax.  In Lean 4, the rcases syntax conflicts heavily with and doesn't support half of the built-in syntax.</p>",
        "id": 322650436,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674266335
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.Ext</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"c1\">-- syntax error (uses rcases)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">funext</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"c1\">-- works (uses normal pattern-matching syntax)</span>\n</code></pre></div>",
        "id": 322650460,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674266361
    },
    {
        "content": "<p>In an ideal world, the built-in pattern matching would support nested or-patterns and we wouldn't have a separate rcases.  (Although I believe this would be a tad less powerful than the current rcases, because it doesn't work as amazingly with <code>rfl</code>.)</p>",
        "id": 322650576,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674266442
    },
    {
        "content": "<p>Can I use these built-in features in <a href=\"https://github.com/leanprover-community/mathlib4/blob/port/Order.Filter.Basic/Mathlib/Order/Filter/Basic.lean#L371\">https://github.com/leanprover-community/mathlib4/blob/port/Order.Filter.Basic/Mathlib/Order/Filter/Basic.lean#L371</a> ?</p>",
        "id": 322650814,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674266641
    },
    {
        "content": "<p>To get back to your original question, we could add an <code>rcase</code> tactic that accepts rcases patterns.  The built-in <code>case</code> tactic doesn't support patterns.  (Neither does <code>induction x with | ctor .. =&gt;</code>.)</p>",
        "id": 322651059,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674266823
    },
    {
        "content": "<p><code>rintro (h1 | h2)</code>  beats lean 4 lambda, right?</p>",
        "id": 322892710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674411691
    },
    {
        "content": "<p>Yeah, I'm not holding my breath for a grand unification of rcases patterns and regular lean patterns. Lean patterns are literally just <code>term</code> which ties our hands on a bunch of things. I'm more hopeful that we can make rcases patterns subsume term patterns, but you would have to be really careful to avoid ambiguities since there are so many things that could be legal in a term expression (including notations defined after <code>rcases</code> and its pattern grammar is defined)</p>",
        "id": 322895671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674413661
    }
]