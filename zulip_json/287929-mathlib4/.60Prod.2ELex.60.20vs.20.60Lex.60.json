[
    {
        "content": "<p>Eww, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Prod.Lex#doc\">docs4#Prod.Lex</a> exists in core, so when you have the <code>Prod.Lex</code> namespace open and you write <code>Lex</code> it prefers that to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lex#doc\">docs4#Lex</a>. Since <code>Lex (Prod α β)</code> gets the notation <code>α ×ₗ β</code> it might suffice to just declare it with <code>_root_.Lex (Prod α β)</code>, but it means that anywhere we don't use the notation and the namespace is open Lean will get confused. How should we deal with this?</p>",
        "id": 312872860,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669737108
    },
    {
        "content": "<p>Probably the core developers are willing to merge a PR making <code>Prod.Lex</code> protected?</p>",
        "id": 312875864,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669737895
    },
    {
        "content": "<p>Sorry, I don't understand the second half of your message. Why can't we declare the notation to use <code>_root_.Lex</code>?</p>",
        "id": 312888332,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1669741198
    },
    {
        "content": "<p>That's what I did. I mean if there were ever a scenario in which the notation was <em>not</em> being used, we would need to refer to <code>_root_.Lex</code> again, which is a bit annoying. Of course, I don't expect this to come up too often, but protecting it in core seems like the right move.</p>",
        "id": 312892142,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669742243
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/1895\">https://github.com/leanprover/lean4/pull/1895</a></p>",
        "id": 312902470,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669745100
    },
    {
        "content": "<p>Ah okay. Yeah all of that makes sense</p>",
        "id": 312902484,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1669745102
    }
]