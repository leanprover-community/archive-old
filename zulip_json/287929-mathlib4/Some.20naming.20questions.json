[
    {
        "content": "<p>I'm working on <code>data.prod.basic</code> and I have a couple of naming questions. mathport and I were both surprised by capitalization in <code>Function.injective</code>,  <code>Function.surjective</code>, and <code>Function.bijective</code>. It seems those names were added by <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/13/files\">https://github.com/leanprover-community/mathlib4/pull/13/files</a>. Should we change the capitalization? Should we rather add an alignment directive somewhere?</p>",
        "id": 304343725,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665948407
    },
    {
        "content": "<p>mathport is also confused by capitalization in <code>decidable_of_decidable_of_iff</code>, but this is a lemma from core.</p>",
        "id": 304343864,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665948505
    },
    {
        "content": "<p>Probably they were added when there was still a discussion about the naming convention for lean 4</p>",
        "id": 304346514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665950145
    },
    {
        "content": "<p>This is likely, but I'll wait for Mario or Gabriel's approval before renaming all this.</p>",
        "id": 304346659,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665950236
    },
    {
        "content": "<p>Yes, definitions that are props are pascal-cased</p>",
        "id": 304348146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665951330
    },
    {
        "content": "<p>so <code>Function.Injective</code></p>",
        "id": 304348163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665951344
    },
    {
        "content": "<p>Do you should I should simply restart translating that file?</p>",
        "id": 304348220,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665951373
    },
    {
        "content": "<p>I mean starting from the mathport output</p>",
        "id": 304348227,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665951382
    },
    {
        "content": "<p>That's up to you</p>",
        "id": 304348290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665951436
    },
    {
        "content": "<p>I generally prefer the human changes over the machine version, but if the human version wasn't based on mathport at all then many things could be missing</p>",
        "id": 304348429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665951508
    },
    {
        "content": "<p>I suspect it wasn't based on mathport at all. <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> could you confirm?</p>",
        "id": 304348470,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665951543
    },
    {
        "content": "<p>in that case it's probably easier to start over</p>",
        "id": 304348580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665951631
    },
    {
        "content": "<p>I think I was just practicing lean 4</p>",
        "id": 304348806,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665951826
    },
    {
        "content": "<p>This is so low down in the heirarchy that some stuff is in lean 3 and some in mathlib, I was just trying to get things working if I recall correctly</p>",
        "id": 304348885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665951875
    },
    {
        "content": "<p>I'd suggest that for any file that isn't already a \"complete port\", we take \"starting over\" as the default route.</p>\n<p>This might involve:</p>\n<ul>\n<li>move the existing <code>X.lean</code> to <code>X2.lean</code></li>\n<li>take <code>X.lean</code> from mathlib3port, and get it working as <code>X.lean</code></li>\n<li><code>import X.lean</code> in <code>X2.lean</code></li>\n<li>delete everything in <code>X2.lean</code> that by now has already been defined in <code>X.lean</code></li>\n<li>find homes for or discard anything that remains (judgement required here!)</li>\n<li>get everything downstream working again</li>\n</ul>\n<p><code>mathport</code> would ideally do some of this work for us, but doesn't yet.</p>",
        "id": 304354900,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665957634
    }
]