[
    {
        "content": "<p>Lean 4 tells me <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=bit0#doc\">docs4#bit0</a> has been deprecated. What should I use in it's place?</p>",
        "id": 310250613,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668533097
    },
    {
        "content": "<p>Actually, it would be really nice if this information were included in the warning itself.</p>",
        "id": 310252788,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668533695
    },
    {
        "content": "<p>There's no direct replacement, the way numerals work has been changed completely and uses <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OfNat#doc\">docs4#OfNat</a> rather than nested bit0 and bit1's applied to zero. So most likely those lemmas can be left unported</p>",
        "id": 310252959,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1668533760
    },
    {
        "content": "<p>I don't know whether its better to just port it to the deprecated statement for now or leave it out completely</p>",
        "id": 310253178,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1668533818
    },
    {
        "content": "<p>Well, this is how <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cast_pos_num\">docs#cast_pos_num</a> is implemented, so that the very least I think I would need a new way to cast to a <code>Nat</code>.</p>",
        "id": 310253610,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668533956
    },
    {
        "content": "<p>You can just use <code>2 * n</code> and <code>2 * n + 1</code></p>",
        "id": 310253897,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668534032
    },
    {
        "content": "<p>or <code>n &lt;&lt;&lt; 1</code> and <code>n &lt;&lt;&lt; 1 ||| 1</code> if you want to do it CS style</p>",
        "id": 310253979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668534057
    },
    {
        "content": "<p>Can the <code>@[deprecated]</code> attribute take an optional string with extra details about the deprecation (e.g, \"use X instead\" or \"there is no replacement\")</p>",
        "id": 310253997,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668534062
    },
    {
        "content": "<p>that is what the identifier is intended to be</p>",
        "id": 310254059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668534083
    },
    {
        "content": "<p><code>@[deprecated foo]</code> means \"use <code>foo</code> instead\"</p>",
        "id": 310254088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668534093
    },
    {
        "content": "<p>but I agree it would make sense to have a string literal version as well</p>",
        "id": 310254118,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668534107
    },
    {
        "content": "<p>Sorry, I misspoke earlier, I need a new way to cast (from <code>pos_num</code>) to any type <code>α</code> with a <code>1</code> and <code>+</code>, I'm not casting to a <code>Nat</code> here. So the <code>2 *</code> doesn't work.</p>",
        "id": 310254402,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668534189
    },
    {
        "content": "<p>that's <code>a + a</code> and <code>a + a + 1</code>, like <code>bit0</code> and <code>bit1</code> are implemented</p>",
        "id": 310254543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668534240
    },
    {
        "content": "<p>well, sure, but then shouldn't I just use <code>bit0</code> and <code>bit1</code>? Or is the point that I should roll it manually because they are deprecated?</p>",
        "id": 310254641,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668534268
    },
    {
        "content": "<p>Alternatively, you could say that this whole function is deprecated, and then use <code>bit0</code> and <code>bit1</code> despite the deprecation warning</p>",
        "id": 310254777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668534313
    },
    {
        "content": "<p>The point of the warning is to alert people to the fact that numeral representation has changed and <code>bit0</code>/<code>bit1</code> have gone from a central part of how numbers work to a weird way to double a number which might be occasionally useful</p>",
        "id": 310255149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668534420
    },
    {
        "content": "<p>if we still need the functions for those other purposes when all is said and done I think it's okay to undeprecate it</p>",
        "id": 310255300,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668534471
    },
    {
        "content": "<p>So is our feeling that this issue doesn't really apply to <code>data.num.basic</code> because this was already a fringe representation?</p>",
        "id": 310255307,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668534473
    },
    {
        "content": "<p>yeah, <code>num</code> itself is deprecated</p>",
        "id": 310255405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668534495
    },
    {
        "content": "<p>It existed to facilitate more efficient kernel computation of nat arithmetic, but this is no longer necessary in lean 4 because <code>Nat.add</code> is overridden in the kernel to use GMP or bignums</p>",
        "id": 310255533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668534544
    },
    {
        "content": "<p>I think it's still useful if you want to make use of the inductive presentation of numbers provided by <code>pos_num</code> (especially if you are using it for purposes other than numbers like indexing into a binary tree), but it is even more fringe than it used to be</p>",
        "id": 310255823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668534654
    },
    {
        "content": "<p>I think the real question here is the Lean 4 way of implementing whatever simplification of expressions involving numerals the <code>bit0</code> and <code>bit1</code> lemmas were intended to enable (if marked as <code>simp</code> lemmas). For a complicated case see the series of lemmas in <code>data.fin.vec_notation</code>, tests in <code>test/matrix.lean</code> such as the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"mi\">37</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"mi\">99</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>(where any individual case is also true by <code>rfl</code>, but having <code>simp</code> handle them is definitely convenient as part of a larger expression). But there are surely plenty of simpler cases of such lemmas as well (which may not all have testcases present). E.g. <code>neg_pow_bit0</code> and <code>neg_pow_bit1</code> in <code>algebra.group_power.ring</code> are probably intended for simplifying powers with a numeral as the exponent.</p>",
        "id": 310335188,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1668571638
    },
    {
        "content": "<p>This sort of thing is handled by unification hints (yes those!) for problems of the form <code>?a + k = n</code> where <code>k</code> and <code>n</code> are literals</p>",
        "id": 310337304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668573047
    },
    {
        "content": "<p>so you should be able to add a simp lemma for decomposing the head and tail of a vector and it will prove those lemmas</p>",
        "id": 310337346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668573090
    },
    {
        "content": "<p>Is it possible to write a lemma that simplifies <code>(-a) ^ n</code> to <code>a ^ n</code> if <code>n</code> is an even numeral literal?</p>",
        "id": 321942039,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673996297
    },
    {
        "content": "<p>In Lean 3, it was <a href=\"https://leanprover-community.github.io/mathlib_docs/find/neg_pow_bit0\">docs#neg_pow_bit0</a></p>",
        "id": 321942204,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673996365
    },
    {
        "content": "<p>If not, what is the right translation of this lemma to Lean 4? Something involving <code>norm_num</code>? If yes, then how?</p>",
        "id": 321942332,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673996405
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 321943036,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673996669
    },
    {
        "content": "<p>No, I don't think this works anymore</p>",
        "id": 321977157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674020739
    },
    {
        "content": "<p>it is possible we could get <code>2 * ?n =?= 10</code> to unify to <code>?n =?= 5</code> and then use a simp lemma for this</p>",
        "id": 321977257,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674020792
    },
    {
        "content": "<p>Can we simplify <code>even</code>/<code>odd</code> on <code>Nat</code>? If yes, then we can have lemmas assuming <code>Even n</code>/<code>Odd n</code>.</p>",
        "id": 321978586,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674021858
    },
    {
        "content": "<p>ah, yes that might actually work, since <code>Even 10</code> can be proved by <code>simp (config := {decide := true})</code></p>",
        "id": 321989683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674027799
    },
    {
        "content": "<p>Is <code>decide := true</code> the default setting now?</p>",
        "id": 322092252,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674058436
    },
    {
        "content": "<p>I see that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">Even</span> <span class=\"mi\">25394535</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span>\n</code></pre></div>\n<p>works (once we have a <code>DecidablePred</code>).</p>",
        "id": 322092412,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674058470
    },
    {
        "content": "<p>I guess this works in reasonable time because of special <code>Nat</code> support in the kernel?</p>",
        "id": 322094338,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674058910
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/bit0.20deprecated/near/322092252\">said</a>:</p>\n<blockquote>\n<p>Is <code>decide := true</code> the default setting now?</p>\n</blockquote>\n<p>Yes, although there is some debate about whether this should be kept in mathlib:<br>\n<a href=\"#narrow/stream/287929-mathlib4/topic/.60simp.20only.60.20does.20decidable.20checks.3F\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/.60simp.20only.60.20does.20decidable.20checks.3F</a></p>",
        "id": 322095153,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674059077
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/287929-mathlib4/topic/bit0.20deprecated/near/322094338\">said</a>:</p>\n<blockquote>\n<p>I guess this works in reasonable time because of special <code>Nat</code> support in the kernel?</p>\n</blockquote>\n<p>This is my guess too.</p>",
        "id": 322098238,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674059832
    }
]