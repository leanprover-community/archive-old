[
    {
        "content": "<p>I've been working on writing <code>propagate_tags</code> when I've had time over the last week. I think I've written a pretty faithful translation, but I didn't realize until testing that there are some relevant differences between 3 and 4. For example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">--Lean 3</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">and.intro</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  ⊢ 0 ≥ 0</span>\n<span class=\"cm\">  ⊢ 0 + 1 ≥ 0</span>\n<span class=\"cm\">  case nat.succ</span>\n<span class=\"cm\">  a: ℕ</span>\n<span class=\"cm\">  ih: a ≥ 0 ∧ a + 1 ≥ 0</span>\n<span class=\"cm\">  ⊢ a.succ ≥ 0 ∧ a.succ + 1 ≥ 0</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">case</span> <span class=\"n\">nat.zero</span> <span class=\"o\">{</span>\n    <span class=\"c1\">--no tag found</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">--Lean 4</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a</span>\n  <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  case zero.left</span>\n<span class=\"cm\">  ⊢ Nat.zero ≥ 0</span>\n\n<span class=\"cm\">  case zero.right</span>\n<span class=\"cm\">  ⊢ Nat.zero + 1 ≥ 0</span>\n\n<span class=\"cm\">  case succ</span>\n<span class=\"cm\">  n✝ : Nat</span>\n<span class=\"cm\">  n_ih✝ : n✝ ≥ 0 ∧ n✝ + 1 ≥ 0</span>\n<span class=\"cm\">  ⊢ Nat.succ n✝ ≥ 0 ∧ Nat.succ n✝ + 1 ≥ 0</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">case</span> <span class=\"n\">zero.right</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">simp</span>\n  <span class=\"o\">}</span>\n  <span class=\"n\">case</span> <span class=\"n\">zero.left</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">simp</span>\n  <span class=\"o\">}</span>\n  <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"o\">}</span>\n</code></pre></div>\n<p>So in Lean 3, <code>apply</code> doesn't immediately propagate the tags, but in Lean 4 it seems like it does(?). And so I can do <code>propagate_tags {apply and.intro}</code> in Lean 3 to get the <code>nat.zero</code> case. But then what's the intended use in Lean 4?</p>",
        "id": 277789960,
        "sender_full_name": "Ian Benway",
        "timestamp": 1649104616
    },
    {
        "content": "<p>why would you need to use <code>propagate_tags apply e</code> in lean 4 if it's already propagating tags?</p>",
        "id": 277790311,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649104791
    },
    {
        "content": "<p>lean 4 is generally a lot better at propagating tags for everything since they were built in from the start</p>",
        "id": 277790470,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649104852
    },
    {
        "content": "<p>Oh right—so are there any simple examples of when <code>propagate_tags</code> can be used in Lean 4? I'm looking for tests, and the examples I'm getting from Lean 3 are deep in more complicated tactics</p>",
        "id": 277794004,
        "sender_full_name": "Ian Benway",
        "timestamp": 1649106571
    },
    {
        "content": "<p>this seems like a pretty clear (lean 3) example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">tt</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- case bool.ff</span>\n  <span class=\"c1\">-- h: ℕ → ℕ → ℕ</span>\n  <span class=\"c1\">-- ⊢ ℕ</span>\n  <span class=\"c1\">-- case bool.tt</span>\n  <span class=\"c1\">-- h: ℕ → ℕ → ℕ</span>\n  <span class=\"c1\">-- ⊢ ℕ</span>\n  <span class=\"n\">propagate_tags</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"c1\">-- case bool.ff</span>\n  <span class=\"c1\">-- h: ℕ → ℕ → ℕ</span>\n  <span class=\"c1\">-- ⊢ ℕ</span>\n  <span class=\"c1\">-- h: ℕ → ℕ → ℕ</span>\n  <span class=\"c1\">-- ⊢ ℕ</span>\n  <span class=\"c1\">-- case bool.tt</span>\n  <span class=\"c1\">-- h: ℕ → ℕ → ℕ</span>\n  <span class=\"c1\">-- ⊢ ℕ</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 277796869,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649108047
    },
    {
        "content": "<p>I'm not sure it's a particularly useful behavior, but what it is doing is copying the tag from the main goal to the first subgoal generated after focusing on the main goal, if it is not already labeled</p>",
        "id": 277796990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649108111
    },
    {
        "content": "<p>you will need to use a different tactic to generate unlabeled goals in lean 4</p>",
        "id": 277797017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649108127
    },
    {
        "content": "<p>I wasn't able to find any tactics that don't preserve or create tags, but you can make one pretty easily, and use it to test <code>propagate_tags</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"retag\"</span> <span class=\"n\">x</span><span class=\"o\">:(</span><span class=\"n\">ident</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\"_\"</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">liftMetaTactic1</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">g2</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMVarType</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">userName</span> <span class=\"o\">:=</span> <span class=\"n\">x.getId</span><span class=\"o\">)</span>\n  <span class=\"n\">assignExprMVar</span> <span class=\"n\">g</span> <span class=\"n\">g2</span>\n  <span class=\"n\">pure</span> <span class=\"n\">g2.mvarId</span><span class=\"bp\">!</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">true</span>\n  <span class=\"n\">propagate_tags</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">retag</span> <span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">rotate_left</span><span class=\"bp\">;</span> <span class=\"n\">retag</span> <span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">rotate_right</span>\n</code></pre></div>",
        "id": 277799954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649109704
    },
    {
        "content": "<p>I probably should have marked <code>propagate_tags</code> as <code>/- S -/</code> since the need for it is drastically reduced in lean 4</p>",
        "id": 277800148,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649109824
    },
    {
        "content": "<p>Ooo yes, this is exactly the kind of testing tactic I needed, thank you! I <em>think</em> I have a working version: <a href=\"https://github.com/leanprover-community/mathlib4/pull/258\">mathlib4#258</a> . I'm not sure if it needs more tests, though</p>",
        "id": 277814624,
        "sender_full_name": "Ian Benway",
        "timestamp": 1649119714
    }
]