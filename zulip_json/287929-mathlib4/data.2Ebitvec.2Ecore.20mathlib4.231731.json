[
    {
        "content": "<p>I encountered an error in the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- bitwise not -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">not</span> <span class=\"o\">:</span> <span class=\"n\">Bitvec</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Bitvec</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">map</span> <span class=\"n\">not</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">bitvec.not</span> <span class=\"n\">Bitvec.not</span>\n\n<span class=\"sd\">/-- bitwise and -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">and</span> <span class=\"o\">:</span> <span class=\"n\">Bitvec</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Bitvec</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Bitvec</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">map₂</span> <span class=\"n\">and</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">bitvec.and</span> <span class=\"n\">Bitvec.and</span>\n\n<span class=\"sd\">/-- bitwise or -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">or</span> <span class=\"o\">:</span> <span class=\"n\">Bitvec</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Bitvec</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Bitvec</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">map₂</span> <span class=\"n\">or</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">bitvec.or</span> <span class=\"n\">Bitvec.or</span>\n\n<span class=\"sd\">/-- bitwise xor -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">xor</span> <span class=\"o\">:</span> <span class=\"n\">Bitvec</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Bitvec</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Bitvec</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">map₂</span> <span class=\"n\">xor</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">bitvec.xor</span> <span class=\"n\">Bitvec.xor</span>\n</code></pre></div>",
        "id": 322565366,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674234848
    },
    {
        "content": "<p>in each instance the boolean operation say <code>not</code> was being interpreted as <code>Bitvec.not</code> inside the def. This seems to be an error in the type inference.</p>",
        "id": 322565676,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674234941
    },
    {
        "content": "<p>I can't fix this by introducing explicit arguments, but if I recall my haskell experience, the type inference algorithm would have taken care of it</p>",
        "id": 322565976,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674235026
    },
    {
        "content": "<p>Why is this happening?</p>",
        "id": 322566300,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674235114
    },
    {
        "content": "<p>and what is the lean4 fix?</p>",
        "id": 322566360,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674235133
    },
    {
        "content": "<p><code>_root_.not</code> etc should work, or <code>Bool.not</code> or whatever the right name is</p>",
        "id": 322568460,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674235735
    },
    {
        "content": "<p><code>nonrec def</code> should also fix it</p>",
        "id": 322578264,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674236745
    },
    {
        "content": "<p>Ah nice, I have encountered this also in non-mathlib contexts and that could have been useful to know.</p>",
        "id": 322592685,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674240991
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/287929-mathlib4/topic/data.2Ebitvec.2Ecore.20mathlib4.231731/near/322566300\">said</a>:</p>\n<blockquote>\n<p>Why is this happening?</p>\n</blockquote>\n<p>It's because his is how Lean 4 works: priority goes to what you're currently defining. Whether that's a good idea is another question.</p>",
        "id": 322605849,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674245397
    },
    {
        "content": "<p>There is some discussion in the PR about whether <code>_root_</code> or <code>nonrec</code> should be the preferred spelling of this kind of thing; it might be good to capture the decision in a style guide</p>",
        "id": 323140704,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674518526
    },
    {
        "content": "<p>(this would also come up for the <code>commute</code> / <code>semiconj</code> stuff that <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> ran into)</p>",
        "id": 323140814,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674518591
    },
    {
        "content": "<p>24 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/nonrec.20vs.20_root_\">#mathlib4 &gt; nonrec vs _root_</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 323247804,
        "sender_full_name": "Notification Bot",
        "timestamp": 1674566096
    }
]