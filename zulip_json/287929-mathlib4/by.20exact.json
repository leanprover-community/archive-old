[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/71723d8bddec4ec20864b84941e36ebb4827ac47/Mathlib/Order/GaloisConnection.lean#L862-L894\">These two declarations</a> elaborate far more slowly in mathlib4 than mathlib3. I tried the experiment of making <code>OrderDual</code> a one-field structure and then discovered that actually some of the proofs naturally elaborate to be proofs about <code>αᵒᵈᵒᵈ </code> rather than <code>α</code>. For example in line 876 we see <code>le_inf := fun a b c =&gt; (@OrderDual.semilatticeInf αᵒᵈ gi.dual.liftSemilatticeSup).le_inf a b c</code> but <code>OrderDual.semilatticeInf (α : Type u_1) [SemilatticeSup α] : SemilatticeInf αᵒᵈ</code>. The refactor made me have to struggle more to get these proofs to typecheck.</p>\n<p>At some point I hit on adding <code>by exact</code> to these proofs, and it magically makes all the timeouts go away, whether or not <code>OrderDual</code> is a one field structure. For example in place of the lines quoted above we do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">liftSemilatticeInf</span> <span class=\"o\">[</span><span class=\"n\">SemilatticeInf</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">gi</span> <span class=\"o\">:</span> <span class=\"n\">GaloisCoinsertion</span> <span class=\"n\">l</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SemilatticeInf</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"o\">‹</span><span class=\"n\">PartialOrder</span> <span class=\"n\">α</span><span class=\"o\">›</span> <span class=\"k\">with</span>\n    <span class=\"n\">inf_le_left</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OrderDual.semilatticeInf</span> <span class=\"n\">α</span><span class=\"bp\">ᵒᵈ</span> <span class=\"n\">gi.dual.liftSemilatticeSup</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inf_le_left</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n    <span class=\"n\">inf_le_right</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OrderDual.semilatticeInf</span> <span class=\"n\">α</span><span class=\"bp\">ᵒᵈ</span> <span class=\"n\">gi.dual.liftSemilatticeSup</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inf_le_right</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n    <span class=\"n\">le_inf</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OrderDual.semilatticeInf</span> <span class=\"n\">α</span><span class=\"bp\">ᵒᵈ</span> <span class=\"n\">gi.dual.liftSemilatticeSup</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le_inf</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n    <span class=\"n\">inf</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">l</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">galois_coinsertion.lift_semilattice_inf</span> <span class=\"n\">GaloisCoinsertion.liftSemilatticeInf</span>\n\n<span class=\"c1\">-- See note [reducible non instances]</span>\n<span class=\"sd\">/-- Lift the suprema along a Galois coinsertion -/</span>\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">liftSemilatticeSup</span> <span class=\"o\">[</span><span class=\"n\">SemilatticeSup</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">gi</span> <span class=\"o\">:</span> <span class=\"n\">GaloisCoinsertion</span> <span class=\"n\">l</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SemilatticeSup</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"o\">‹</span><span class=\"n\">PartialOrder</span> <span class=\"n\">α</span><span class=\"o\">›</span> <span class=\"k\">with</span>\n    <span class=\"n\">sup</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">gi.choice</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">l</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span>\n        <span class=\"n\">sup_le</span> <span class=\"o\">(</span><span class=\"n\">gi.gc.monotone_l</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">gi.gc.le_u</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">le_sup_left</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">gi.gc.monotone_l</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">gi.gc.le_u</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">le_sup_right</span><span class=\"o\">)</span>\n    <span class=\"n\">le_sup_left</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OrderDual.semilatticeSup</span> <span class=\"n\">α</span><span class=\"bp\">ᵒᵈ</span> <span class=\"n\">gi.dual.liftSemilatticeInf</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le_sup_left</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n    <span class=\"n\">le_sup_right</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OrderDual.semilatticeSup</span> <span class=\"n\">α</span><span class=\"bp\">ᵒᵈ</span> <span class=\"n\">gi.dual.liftSemilatticeInf</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le_sup_right</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n    <span class=\"n\">sup_le</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OrderDual.semilatticeSup</span> <span class=\"n\">α</span><span class=\"bp\">ᵒᵈ</span> <span class=\"n\">gi.dual.liftSemilatticeInf</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sup_le</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">}</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">galois_coinsertion.lift_semilattice_sup</span> <span class=\"n\">GaloisCoinsertion.liftSemilatticeSup</span>\n</code></pre></div>\n<p>then these declarations elaborate instantly, rather than taking a couple of seconds on this machine. Why might this be?</p>",
        "id": 318100677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672149220
    }
]