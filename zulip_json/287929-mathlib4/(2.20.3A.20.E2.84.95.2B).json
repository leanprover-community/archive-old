[
    {
        "content": "<p>Do we have a way to write <code>(2 : ℕ+)</code> in mathlib4 yet?</p>",
        "id": 318632279,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1672423092
    },
    {
        "content": "<p>Looking at the instances listed here: <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#OfNat\">https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#OfNat</a>, I suspect not.</p>",
        "id": 318632570,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1672423211
    },
    {
        "content": "<p>The instances list is quite outdated because std4 master and mathlib4 master have been incompatible for weeks by now and I always try to build both masters (so the build fails)</p>",
        "id": 318635041,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672424355
    },
    {
        "content": "<p>I suppose we just have to define <code>ofNat 0 = 1</code> or something for PNat. Could get confusing sometimes</p>",
        "id": 318635163,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1672424408
    },
    {
        "content": "<p>that's news to me, std4 has not changed in a while and I thought there was already a mathlib4 bump PR merged for the last thing</p>",
        "id": 318635288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672424475
    },
    {
        "content": "<p>It looks like the last bump was for 12-23 and affected both std4 and mathlib4, so they should be up to date right now</p>",
        "id": 318635464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672424552
    },
    {
        "content": "<p>Maybe the doc-gen error changed in between then let me try to build locally again</p>",
        "id": 318636340,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672424977
    },
    {
        "content": "<p>Ah <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> it did change indeed!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">λ</span> <span class=\"n\">lake</span> <span class=\"bp\">-</span><span class=\"n\">Kdoc</span><span class=\"bp\">=</span><span class=\"n\">on</span> <span class=\"n\">build</span> <span class=\"n\">Std</span><span class=\"o\">:</span><span class=\"n\">docs</span> <span class=\"n\">Mathlib</span><span class=\"o\">:</span><span class=\"n\">docs</span>\n<span class=\"n\">Building</span> <span class=\"n\">Aesop.Tree.Data</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=././</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">CMark</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">././</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">././</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">././</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Cli</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">././</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">././</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">././</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">leanInk</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">././</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Unicode</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">././</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"n\">LD_LIBRARY_PATH</span><span class=\"bp\">=/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-23/lib:././lake-packages/aesop/build/lib /home/nix/.elan/toolchains/leanprover--lean4---nightly-2022-12-23/bin/lean ././lake-packages/aesop/././Aesop/Tree/Data.lean -R ././lake-packages/aesop/./. -o ././lake-packages/aesop/build/lib/Aesop/Tree/Data.olean -i ././lake-packages/aesop/build/lib/Aesop/Tree/Data.ilean -c ././lake-packages/aesop/build/ir/Aesop/Tree/Data.c</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stdout</span><span class=\"o\">:</span>\n<span class=\"bp\">././</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop</span><span class=\"bp\">/././</span><span class=\"n\">Aesop</span><span class=\"bp\">/</span><span class=\"n\">Tree</span><span class=\"bp\">/</span><span class=\"n\">Data.lean</span><span class=\"o\">:</span><span class=\"mi\">388</span><span class=\"o\">:</span><span class=\"mi\">18</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Inhabited</span> <span class=\"n\">SavedState</span>\n</code></pre></div>\n<p>:(</p>",
        "id": 318639892,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672426599
    },
    {
        "content": "<p>I see <a href=\"https://github.com/JLimperg/aesop/pull/37\">https://github.com/JLimperg/aesop/pull/37</a> is open</p>",
        "id": 318639971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672426652
    },
    {
        "content": "<p>ah, mathlib4 is actually on gebner/aesop right now, we should probably figure this out cc: <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span></p>",
        "id": 318640228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672426753
    },
    {
        "content": "<p>When I'm defining <code>nat.pred</code> in class with the equation compiler, in order to prove <code>nat.succ a = nat.succ b -&gt; a = b</code>, I always define <code>pred 0</code> to be 37, stressing that it's a junk value. Do we <em>have</em> to define <code>ofNat 0</code>? Why not let it be 37 if so?</p>",
        "id": 318679114,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672452615
    },
    {
        "content": "<p>I've now updated Aesop to work with the latest std4.</p>",
        "id": 318736061,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1672492640
    },
    {
        "content": "<p>In that case we should see new docs in ~ 4 hours</p>",
        "id": 318736309,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672492746
    },
    {
        "content": "<p>Do we also need to update Mathlib to work with the latest Aesop?  See the build failures on <a href=\"https://github.com/leanprover-community/mathlib4/pull/1274\">mathlib4#1274</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/1278\">mathlib4#1278</a>, and the <a href=\"https://github.com/leanprover/doc-gen4/actions/runs/3812877713\">latest run</a> of doc-gen4.</p>",
        "id": 318767493,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672509101
    },
    {
        "content": "<p>12 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/version.20incompatibilities\">#mathlib4 &gt; version incompatibilities</a> by <span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span>.</p>",
        "id": 318769321,
        "sender_full_name": "Notification Bot",
        "timestamp": 1672510335
    },
    {
        "content": "<p>Sorry if I'm misunderstanding, but I thought I read in Functional Programming in Lean 4 that the <code>ofNat</code> type class was flexible enough to specify which natural numbers that could be converted. A version of <code>ofNat</code> for only positive numbers is described <a href=\"https://leanprover.github.io/functional_programming_in_lean/type-classes/pos.html#literal-numbers\">here</a>.</p>",
        "id": 318916577,
        "sender_full_name": "Niels Voss",
        "timestamp": 1672616844
    }
]