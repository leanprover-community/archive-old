[
    {
        "content": "<p>I've got <a href=\"https://github.com/leanprover-community/mathlib4/pull/944\">mathlib4#944</a> working up to an issue with <code>to_additive</code> that I can't figure out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive \"`0` is the homomorphism sending all elements to `0`.\"]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→*</span><span class=\"n\">o</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨{</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→*</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">monotone'</span> <span class=\"o\">:=</span> <span class=\"n\">monotone_const</span> <span class=\"o\">}⟩</span>\n</code></pre></div>\n<p>This gives me the error message <code>(kernel) invalid projection  AddZeroClass.toZero.1</code>. It does exist, just like its counterpart <code>MulOneClass.toOne.1</code>. This is on line 428 of <code>Algebra.Order.Hom.Monoid.lean</code> in that PR. I have no idea how to deal with it; any help is greatly appreciated!</p>",
        "id": 315154311,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1670728402
    },
    {
        "content": "<p>The issue seems to be to do with instance naming conventions. This fixes all the errors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- note: we're in namespace `OrderMonoidHom` right now</span>\n<span class=\"sd\">/-- `1` is the homomorphism sending all elements to `1`. -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→*</span><span class=\"n\">o</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨{</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→*</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">monotone'</span> <span class=\"o\">:=</span> <span class=\"n\">monotone_const</span> <span class=\"o\">}⟩</span>\n\n<span class=\"sd\">/-- `0` is the homomorphism sending all elements to `0`. -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">_root_.OrderAddMonoidHom.foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddZeroClass</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">AddZeroClass</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→+</span><span class=\"n\">o</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨{</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→+</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">monotone'</span> <span class=\"o\">:=</span> <span class=\"n\">monotone_const</span> <span class=\"o\">}⟩</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>So this seems to be an issue with <code>@[to_additive]</code>.</p>",
        "id": 315189396,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670756223
    },
    {
        "content": "<p>The autogenerated name for the multiplicative instance is <code>OrderMonoidHom.instOneOrderMonoidHom</code>, so if you want to stick with the new instance names you can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `1` is the homomorphism sending all elements to `1`. -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→*</span><span class=\"n\">o</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨{</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→*</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">monotone'</span> <span class=\"o\">:=</span> <span class=\"n\">monotone_const</span> <span class=\"o\">}⟩</span>\n\n<span class=\"sd\">/-- `0` is the homomorphism sending all elements to `0`. -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">_root_.OrderAddMonoidHom.instZeroOrderAddMonoidHom</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddZeroClass</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">AddZeroClass</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→+</span><span class=\"n\">o</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨{</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→+</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">monotone'</span> <span class=\"o\">:=</span> <span class=\"n\">monotone_const</span> <span class=\"o\">}⟩</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"n\">instOneOrderMonoidHom</span>\n</code></pre></div>",
        "id": 315190011,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670756568
    },
    {
        "content": "<p>Does the following work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `0` is the homomorphism sending all elements to `0`. -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">_root_.OrderAddMonoidHom.instZeroOrderAddMonoidHom</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddZeroClass</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">AddZeroClass</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→+</span><span class=\"n\">o</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨{</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→+</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">monotone'</span> <span class=\"o\">:=</span> <span class=\"n\">monotone_const</span> <span class=\"o\">}⟩</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"sd\">/-- `1` is the homomorphism sending all elements to `1`. -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→*</span><span class=\"n\">o</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨{</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→*</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">monotone'</span> <span class=\"o\">:=</span> <span class=\"n\">monotone_const</span> <span class=\"o\">}⟩</span>\n</code></pre></div>",
        "id": 315191129,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670757158
    },
    {
        "content": "<p>Oh this might be related to <a href=\"https://github.com/leanprover-community/mathlib4/pull/939\">mathlib4#939</a> ? It's the same error.</p>",
        "id": 315193026,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670758205
    },
    {
        "content": "<p>Fixed by <a href=\"https://github.com/leanprover-community/mathlib4/pull/952\">mathlib4#952</a></p>",
        "id": 315226898,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1670775120
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> do you understand why my \"write the instance names\" fix works in this case?</p>",
        "id": 315246631,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670785768
    },
    {
        "content": "<p>What is the \"write the instance names\" fix? In your earlier message you write all the additive declarations manually, so that <code>to_additive</code> doesn't have to do any translation anymore.</p>",
        "id": 315247348,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1670786269
    },
    {
        "content": "<p>the part of your message that fixed the problem is giving the additive declaration explicitly, not giving the <code>instance</code> an explicit name.</p>",
        "id": 315247661,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1670786484
    }
]