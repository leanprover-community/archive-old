[
    {
        "content": "<p>I'm stuck on</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Independent</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CompleteLattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">Disjoint</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">t</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>with error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elaboration</span> <span class=\"n\">function</span> <span class=\"n\">for</span> <span class=\"bp\">'</span><span class=\"n\">Lean.Parser.Command.</span><span class=\"bp\">«</span><span class=\"n\">termExpand_binders</span><span class=\"bp\">%</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"bp\">=&gt;</span><span class=\"n\">_</span><span class=\"o\">)</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"bp\">»'</span> <span class=\"n\">has</span> <span class=\"n\">not</span> <span class=\"n\">been</span> <span class=\"n\">implemented</span>\n  <span class=\"n\">expand_binders</span><span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">✝</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sup</span><span class=\"bp\">ᵢ✝</span> <span class=\"n\">f</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">t</span> <span class=\"n\">j</span>\n</code></pre></div>\n<p>Any thoughts?</p>",
        "id": 321839978,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673964876
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Independent</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CompleteLattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">Disjoint</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_H</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">t</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>will work, but maybe we now have a better solution (that was the state of the art solution one month ago).</p>",
        "id": 321840784,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1673965075
    },
    {
        "content": "<p>At least this will get you unstuck.</p>",
        "id": 321840869,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1673965084
    },
    {
        "content": "<p>Huh, I thought I tried that. Thanks</p>",
        "id": 321841072,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673965145
    },
    {
        "content": "<p>Don't forget to let a porting note flagging this (unless <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> tells us there is a better solution now).</p>",
        "id": 321843187,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1673965704
    },
    {
        "content": "<p>oh, that's just a simple bug in the implementation, I hadn't heard about this before</p>",
        "id": 321843504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673965792
    }
]