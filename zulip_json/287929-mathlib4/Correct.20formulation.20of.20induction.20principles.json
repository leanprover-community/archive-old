[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> and I are playing with induction problems in mathlib4 and encountered a case where perhaps (a) an induction principle in mathlib4 is stated wrongly, (b) we are using the wrong syntax with the <code>induction</code> tactic, or (c) there is an undocumented limitation in the implementation of the <code>induction ... using ...</code> syntax.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- lemma from `Mathlib.Data.Nat.Basic`</span>\n<span class=\"kd\">@[elab_as_elim]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Nat.le_induction</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"n\">using</span> <span class=\"n\">Nat.le_induction</span>\n  <span class=\"c1\">-- tactic 'introN' failed, insufficient number of binders</span>\n</code></pre></div>\n<p>Any ideas?</p>",
        "id": 321255637,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673643422
    },
    {
        "content": "<p>Shouldn't it be <code>induction hn</code>? I can't test these ideas from where I am right now</p>",
        "id": 321256073,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673643578
    },
    {
        "content": "<p>Interesting -- that gives</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>target\n  hn\nhas type\n  2 ≤ n : Prop\nbut is expected to have type\n  ℕ : Type\n</code></pre></div>",
        "id": 321256219,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673643617
    },
    {
        "content": "<p>I would also be tempted to make <code>n</code> implicit</p>",
        "id": 321256345,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673643656
    },
    {
        "content": "<p>In the example statement?  It doesn't seem to affect anything.</p>",
        "id": 321256451,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673643687
    },
    {
        "content": "<p>I'm at a loss then</p>",
        "id": 321256684,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673643762
    },
    {
        "content": "<p>Does making P take a <code>m ≤ n</code> argument help?</p>",
        "id": 321321072,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673688138
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I'm not sure I'm implementing your suggestion correctly, but in my version it doesn't work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[elab_as_elim]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Nat.le_induction</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">m</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"n\">using</span> <span class=\"n\">Nat.le_induction</span>\n  <span class=\"c1\">-- insufficient number of targets for 'Nat.le_induction'</span>\n</code></pre></div>",
        "id": 321397469,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673722353
    },
    {
        "content": "<p>Does using <code>hn</code> instead of n work with that?</p>",
        "id": 321398035,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673722708
    },
    {
        "content": "<p>If you mean the syntax</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">hn</span> <span class=\"n\">using</span> <span class=\"n\">Nat.le_induction</span>\n</code></pre></div>\n<p>this gives</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>target\n  hn\nhas type\n  2 ≤ n : Prop\nbut is expected to have type\n  Nat : Type\n</code></pre></div>",
        "id": 321399993,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673723849
    },
    {
        "content": "<p><code>induction n, hn using</code>?</p>",
        "id": 321405959,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673728143
    },
    {
        "content": "<p>I vaguely remember there being support for simultaneous induction</p>",
        "id": 321405976,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673728167
    },
    {
        "content": "<p>Yes!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[elab_as_elim]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Nat.le_induction</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">m</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span> <span class=\"n\">using</span> <span class=\"n\">Nat.le_induction</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">clear</span> <span class=\"n\">n</span>\n  <span class=\"n\">case</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">    ⊢ 4 ≤ 2 * 2</span>\n<span class=\"cm\">    -/</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"n\">case</span> <span class=\"n\">_</span> <span class=\"n\">k</span> <span class=\"n\">hk</span> <span class=\"n\">IH</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">    k : Nat</span>\n<span class=\"cm\">    hk : 2 ≤ k</span>\n<span class=\"cm\">    IH : 4 ≤ 2 * k</span>\n<span class=\"cm\">    ⊢ 4 ≤ 2 * (k + 1)</span>\n<span class=\"cm\">    -/</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 321406510,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673728551
    },
    {
        "content": "<p>So should <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.le_induction#doc\">docs4#Nat.le_induction</a> be changed?</p>",
        "id": 321406568,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673728570
    },
    {
        "content": "<p>Does it only work with my modification?</p>",
        "id": 321416852,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673737148
    },
    {
        "content": "<p>Certainly my spelling is syntactically more general</p>",
        "id": 321416894,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673737188
    },
    {
        "content": "<p>I think it unified poorly in Lean 3; so in places we have both versions, one primed</p>",
        "id": 321416996,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673737229
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Correct.20formulation.20of.20induction.20principles/near/321416852\">said</a>:</p>\n<blockquote>\n<p>Does it only work with my modification?</p>\n</blockquote>\n<p>I'm not sure what you're asking here, but to be more precise, <em>both</em> the following fixes are required, neither works alone:</p>\n<ul>\n<li>change the statement of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.le_induction#doc\">docs4#Nat.le_induction</a> to the <a href=\"#narrow/stream/287929-mathlib4/topic/Correct.20formulation.20of.20induction.20principles/near/321397469\">dependent version</a> you suggested </li>\n<li>change the syntax from <code>induction n</code> to <code>induction n, hn</code></li>\n</ul>",
        "id": 321417928,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673738110
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Correct.20formulation.20of.20induction.20principles/near/321416996\">said</a>:</p>\n<blockquote>\n<p>I think it unified poorly in Lean 3; so in places we have both versions, one primed</p>\n</blockquote>\n<p>I checked the docs and this is not such a case (I don't see any variants).  But if you like I can keep both versions rather than just the new one.  Let me know.</p>",
        "id": 321418085,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673738268
    },
    {
        "content": "<p>Is there a way to identify other induction principles that might be broken?</p>",
        "id": 321418135,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673738291
    },
    {
        "content": "<p>I think having only the dependent one is fine since it works with <code>induction</code> now</p>",
        "id": 321420442,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673740621
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.span_induction'\">docs#submodule.span_induction'</a> is the primed one I was thinking of.</p>",
        "id": 321420489,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673740672
    },
    {
        "content": "<p>(neither that nor the regular version work with the induction tactic in lean 3, I think due to the <code>R : Type</code> argument)</p>",
        "id": 321420561,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673740737
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Correct.20formulation.20of.20induction.20principles/near/321418135\">said</a>:</p>\n<blockquote>\n<p>Is there a way to identify other induction principles that might be broken?</p>\n</blockquote>\n<p>Just look at everything with elab_as_eliminator?</p>",
        "id": 321420687,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673740816
    }
]