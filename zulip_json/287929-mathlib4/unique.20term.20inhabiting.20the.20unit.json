[
    {
        "content": "<p>I'm looking for answers to these two questions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">constituent</span>  <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span>\n<span class=\"kd\">def</span> <span class=\"n\">uniqueness</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">),</span> <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 315893169,
        "sender_full_name": "Dean Young",
        "timestamp": 1671044081
    },
    {
        "content": "<p>Right click on the definition of <code>Unit</code> and jump to its definition to see the answers!</p>",
        "id": 315897716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671045456
    },
    {
        "content": "<p>I think even the docstring will answer one of them</p>",
        "id": 315897842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671045501
    },
    {
        "content": "<p>It's spelt like this by the way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">constituent</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">uniqueness</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(maybe jumping to definition doesn't work if there are syntax errors everywhere)</p>",
        "id": 315897906,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671045527
    },
    {
        "content": "<p>Actually the second one isn't immediately obvious from the definition :-( </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">constituent</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">Unit.unit</span>\n<span class=\"kd\">def</span> <span class=\"n\">uniqueness</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Subsingleton.elim</span>\n</code></pre></div>",
        "id": 315898206,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671045646
    },
    {
        "content": "<p>the second question is less obvious, the exact answer is <code>PUnit.subsingleton</code> but <code>Subsingleton.elim</code> is the more general version</p>",
        "id": 315898300,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671045677
    },
    {
        "content": "<p>we should put info about <code>Subsingleton</code> in the <code>Unit</code> docstring</p>",
        "id": 315898362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671045704
    },
    {
        "content": "<p>The second shouldn't be a def, Kevin <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 315898516,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671045754
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">constituent</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">Unit.unit</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">uniqueness</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 315899291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671046048
    },
    {
        "content": "<p><code>library_search</code> is a useful tool to answer questions of the form \"how do I do this thing which is probably in the library\"</p>",
        "id": 315899371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671046071
    },
    {
        "content": "<p>mildly interesting: I tried <code>library_search</code> here and it gave me <code>fun a b ↦ rfl</code>, avoiding the case analysis needed in lean3. can anyone explain why <code>rfl</code> alone works in lean4?</p>",
        "id": 315904912,
        "sender_full_name": "Scott Kovach",
        "timestamp": 1671048065
    },
    {
        "content": "<p>I think this might be a weird case of the new structure eta feature that makes <code>Prod.Mk x.1 x.2 = x</code>, but for <code>Unit</code> which has no arguments</p>",
        "id": 315906106,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671048476
    },
    {
        "content": "<p>you're right! but actually intentionally supported: <a href=\"https://github.com/leanprover/lean4/issues/777#issuecomment-977970138\">https://github.com/leanprover/lean4/issues/777#issuecomment-977970138</a></p>",
        "id": 315906928,
        "sender_full_name": "Scott Kovach",
        "timestamp": 1671048809
    }
]