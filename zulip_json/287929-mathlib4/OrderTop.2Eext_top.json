[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/697\">mathlib4#697</a>, I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">OrderTop.ext_top</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">OrderTop</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">OrderTop</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">hA</span><span class=\"bp\">;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">A</span><span class=\"bp\">;</span> <span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>which triggers the linter:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> The `synTaut` linter reports:</span>\n<span class=\"cm\">THE FOLLOWING DECLARATIONS ARE SYNTACTIC TAUTOLOGIES. This usually means that they are of the form `∀ a b ... z, e₁ = e₂` where `e₁` and `e₂` are identical expressions. We call declarations of this form syntactic tautologies. Such lemmas are (mostly) useless and sometimes introduced unintentionally when proving basic facts using `rfl`, when elaboration results in a different term than the user intended. You should check that the declaration really says what you think it does. -/</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">OrderTop.ext_top</span> <span class=\"c\">/-</span><span class=\"cm\"> LHS equals RHS syntactically -/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The `unusedArguments` linter reports:</span>\n<span class=\"cm\">UNUSED ARGUMENTS. -/</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">OrderTop.ext_top</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 3 A : OrderTop α -/</span>\n</code></pre></div>\n<p>Thoughts on how to deal with this are most welcome.</p>\n<p>(Looking into it, I noticed this theorem was only used to prove <code>order_top.ext</code> in mathlib3, and I didn't need it in mathlib4, so the easiest solution may be to just drop it.)</p>",
        "id": 312622867,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1669640582
    },
    {
        "content": "<p>Given that it is a syntactic tautology, it seems safe to remove it.</p>",
        "id": 312626769,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669641918
    },
    {
        "content": "<p>Well, that's the thing - is it actually meant to say something substantial, and did it get translated into something trivial accidentally?</p>",
        "id": 312629189,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1669642703
    },
    {
        "content": "<p>I suspect it got translated to something trivial accidentally</p>",
        "id": 312631281,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1669643257
    },
    {
        "content": "<p>In the statement, instead of using <code>haveI</code>, write something starting with @ and use the intended instance.</p>",
        "id": 312632118,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669643466
    }
]