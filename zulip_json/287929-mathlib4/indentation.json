[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[elab_as_elim]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">trans_induction_on</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">TransGen</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">TransGen</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">TransGen</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">TransGen</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">h₁</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">h₂</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">h₁.trans</span> <span class=\"n\">h₂</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">P</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span>\n  <span class=\"n\">case</span> <span class=\"n\">single</span> <span class=\"n\">a</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">base</span> <span class=\"n\">h</span>\n  <span class=\"n\">case</span> <span class=\"n\">tail</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">hab</span> <span class=\"n\">hbc</span> <span class=\"n\">h_ih</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"n\">hab</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">hbc</span><span class=\"o\">)</span> <span class=\"n\">h_ih</span> <span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"n\">hbc</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Have I understood the conventions yet? 4 spaces for the continuation of the statement of the theorem, colon at the end, still 4 spaces for the type, two spaces for the proof, don't need any more indentation even though there are two goals after <code>induction</code>.</p>",
        "id": 308787284,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668000834
    },
    {
        "content": "<p>only thing I would mention is that it is preferable to use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">single</span> <span class=\"n\">a</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">base</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"n\">tail</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">hab</span> <span class=\"n\">hbc</span> <span class=\"n\">h_ih</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"n\">hab</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">hbc</span><span class=\"o\">)</span> <span class=\"n\">h_ih</span> <span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"n\">hbc</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>instead of <code>induction; case</code> when it's just listing all the cases</p>",
        "id": 308788362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668001137
    },
    {
        "content": "<p>I blame the guy who wrote the porting program for that one.</p>",
        "id": 308789069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668001376
    },
    {
        "content": "<p>ooh, that would be pretty fancy if we could try to apply that transformation. It's possible to do the syntactic transformation, but we basically have no idea whether the tactic will work</p>",
        "id": 308789894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668001600
    },
    {
        "content": "<p>the more common pattern in mathlib uses <code>induction h with _ _ _ a b _ c</code> and this kind of thing is pretty hopeless to transform into a well structured <code>induction</code> without type info</p>",
        "id": 308790176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668001691
    },
    {
        "content": "<p>I'm hoping that we will eventually get auto-applicable linters that will just recommend to replace <em>working</em> <code>induction'</code> proofs with correctly structured <code>induction</code> proofs</p>",
        "id": 308790349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668001754
    }
]