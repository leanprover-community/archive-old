[
    {
        "content": "<p>Is turning off auto-implicits mathlib-wide on the table? I just had a very confusing error because I used <code>npow_rec</code>, which created an auto-implicit called <code>npow_rec</code>, while had they been disabled I wouldn't have spent 15min to see that I meant <code>npowRec</code>.</p>",
        "id": 314070118,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670256972
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> has mentioned that he has as part of his workflow to put a set_option at the top of the file and then remove it when he is done</p>",
        "id": 314070319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670257034
    },
    {
        "content": "<p>I think it is a useful feature and don't want to remove it for <em>new</em> code, but for porting it's generally better to disable auto-implicits</p>",
        "id": 314070480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670257083
    },
    {
        "content": "<p>I would be happy if I could remove it locally <em>without touching code</em> (I don't think asking people to write <code>set_option AutoImplicit False</code> at the top of each file they edit is a viable solution), because I can see this problem repeating over and over again.</p>",
        "id": 314070932,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670257207
    },
    {
        "content": "<p>Better error messages would help too. In my case, the error was a cryptic and <strong>uninspectable</strong></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">default</span> <span class=\"n\">value</span> <span class=\"n\">for</span> <span class=\"n\">field</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">contains</span> <span class=\"n\">metavariables</span>\n  <span class=\"n\">zsmulRec</span> <span class=\"n\">nsmul</span>\n</code></pre></div>",
        "id": 314071090,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670257260
    },
    {
        "content": "<p>(or rather inspectable, but didn't give me the crucial info)</p>",
        "id": 314071328,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670257329
    },
    {
        "content": "<p>mathport could add the set_option line</p>",
        "id": 314071428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670257361
    },
    {
        "content": "<p>I have no idea what you want to do about the error message</p>",
        "id": 314071463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670257373
    },
    {
        "content": "<p>Sure, but that doesn't help with writing new code.</p>",
        "id": 314071516,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670257385
    },
    {
        "content": "<p>for new code the option shouldn't be disabled</p>",
        "id": 314071566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670257397
    },
    {
        "content": "<p>Maybe the error message could point it out if auto-implicits are involved?</p>",
        "id": 314071607,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1670257413
    },
    {
        "content": "<p>that's what I just said above</p>",
        "id": 314071611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670257415
    },
    {
        "content": "<p>Well, <em>I</em> want it disabled for me <span aria-label=\"stuck out tongue closed eyes\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue closed eyes\">:stuck_out_tongue_closed_eyes:</span></p>",
        "id": 314071660,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670257430
    },
    {
        "content": "<p>The error message never told me what the metavariable was.</p>",
        "id": 314071738,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670257443
    },
    {
        "content": "<p>You can do that by modifying the lakefile</p>",
        "id": 314071744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670257444
    },
    {
        "content": "<p>you can add set_options that apply globally there</p>",
        "id": 314071813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670257466
    },
    {
        "content": "<p>and if you don't push the lakefile changes then you can work with a different set of options than everyone else</p>",
        "id": 314071895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670257491
    },
    {
        "content": "<p>That doesn't really work with my setup, though. I'm working on fresh gitpods every time.</p>",
        "id": 314071954,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670257508
    },
    {
        "content": "<p>okay... if you have no personal configuration then I'm not sure how you expect to persist personal changes</p>",
        "id": 314072089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670257560
    },
    {
        "content": "<p>Those auto-implicits definitely break the principle of least surprise, which I why I would like to consider disabling them mathlib-wise, given that mathlib is mostly targeted towards mathematicians.</p>",
        "id": 314072271,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670257603
    },
    {
        "content": "<p>I think you just aren't used to them yet. The syntax highlighting is very good for spotting auto-implicits</p>",
        "id": 314072385,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670257644
    },
    {
        "content": "<p>Auto-implicits don't show up in <code>#where</code> either, right?</p>",
        "id": 314072434,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670257662
    },
    {
        "content": "<p>that wouldn't make any sense?</p>",
        "id": 314072490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670257677
    },
    {
        "content": "<p>Well, <code>variable {f : α → α}</code> now makes sense, so I sure hope my question does make sense.</p>",
        "id": 314072667,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670257719
    },
    {
        "content": "<p>I have found that it is much easier to get the types right with auto implicits instead of long-scoped <code>variable</code> lines</p>",
        "id": 314072770,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670257758
    },
    {
        "content": "<p>Often you can just avoid needing <code>variable</code> lines at all, and then you don't need to use <code>#where</code> all the time either</p>",
        "id": 314073121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670257834
    },
    {
        "content": "<p>All the files I've structured use long-scoped <code>variable</code> lines, sorted by increasing typeclass assumptions, and very short lemma statements.</p>",
        "id": 314073824,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670258009
    },
    {
        "content": "<p>I'm not sure how you would achieve short statements with auto-implicits in topology or algebra.</p>",
        "id": 314074032,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670258057
    },
    {
        "content": "<p>It depends on the theorem, but if the statement already implies the necessary typeclass assumptions then you don't need any <code>variable</code> lines</p>",
        "id": 314074265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670258131
    },
    {
        "content": "<p>you just have the same short statement without the <code>variable</code> line</p>",
        "id": 314074382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670258162
    },
    {
        "content": "<p>Yael, the experience is completely different between porting existing code and writing new code. At first I thought it was nonsense as well (I have <code>coe</code> being a type), but it is so nice, when you remove all the boilerplate that is just defining types.</p>",
        "id": 314141891,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1670281354
    },
    {
        "content": "<p>Yes this autoImplicit thing is very much a porting only technique. It's brilliant not to have to define various variables because the system just guesses them correctly.</p>",
        "id": 314143260,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670281942
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Auto-implicits/near/314071744\">said</a>:</p>\n<blockquote>\n<p>You can do that by modifying the lakefile</p>\n</blockquote>\n<p>I did not realise this. I get bitten by <code>auto_implicit</code> often enough that it is probably worth doing this for my code, and even more so for code on which students depend.</p>",
        "id": 314164698,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1670297526
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Auto-implicits/near/314071813\">said</a>:</p>\n<blockquote>\n<p>you can add set_options that apply globally there</p>\n</blockquote>\n<p>I didn't quite get this to work, I just added some lines</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n<span class=\"kd\">set_option</span> <span class=\"bp\">......</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>anywhere in the <code>lakefile.lean</code>, but it does not seem like they're globally set. Is there a documentation of that feature?</p>",
        "id": 314199289,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1670319547
    },
    {
        "content": "<p>You can add <code>-D autoImplicit=false</code> as an extra Lean 4 server arg in your vscode settings, this should persist acrosss instances of gitpod if set up properly</p>",
        "id": 314203654,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1670321253
    },
    {
        "content": "<p>We could also (optionally) display auto implicits as LSP <em>inlay hints</em> (specially highlighted text that is not actually part of the editor) as in <code>... {α} ...</code>. Except that as usual the API is not really made for the incremental processing of a theorem prover.</p>",
        "id": 314219273,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670327076
    }
]