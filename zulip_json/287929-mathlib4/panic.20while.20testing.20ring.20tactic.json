[
    {
        "content": "<p>I was thinking about benchmarking the new <code>ring</code> tactic, available now in mathlib4, but encountered a panic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span>\n\n<span class=\"c1\">-- Causes `PANIC at Lean.Expr.getRevArg! Lean.Expr:508:22: invalid index`:</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((((((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(((((((</span><span class=\"n\">J</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(((</span><span class=\"n\">B</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)))))</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">J</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">))))</span> <span class=\"bp\">^</span> <span class=\"mi\">0</span><span class=\"o\">)))</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">+</span> <span class=\"o\">(((</span><span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"o\">(((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"o\">(((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)))</span> <span class=\"bp\">^</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">D</span><span class=\"o\">)))</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((((((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(((((((</span><span class=\"n\">J</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(((</span><span class=\"n\">B</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)))))</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">J</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">))))</span> <span class=\"bp\">^</span> <span class=\"mi\">0</span><span class=\"o\">)))</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">+</span> <span class=\"o\">(((</span><span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"o\">(((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"o\">(((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)))</span> <span class=\"bp\">^</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">D</span><span class=\"o\">)))</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 249677205,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629174026
    },
    {
        "content": "<p>I've minimised this to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span>\n\n<span class=\"c1\">-- Causes `PANIC at Lean.Expr.getRevArg! Lean.Expr:508:22: invalid index`:</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n</code></pre></div>\n<p>I also added this as a (failing) test as <code>Mathlib/Test/Ring.lean</code>. </p>\n<p><span class=\"user-mention\" data-user-id=\"399706\">@Aurélien Saue</span>, do you have a guess what is happening here? I can break out the debugger otherwise.</p>",
        "id": 249801543,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629254289
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/panic.20while.20testing.20ring.20tactic\">#lean4 &gt; panic while testing ring tactic</a> by <span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span></p>",
        "id": 249801556,
        "sender_full_name": "Notification Bot",
        "timestamp": 1629254312
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/panic.20while.20testing.20ring.20tactic/near/249677205\">said</a>:</p>\n<blockquote>\n<p>I was thinking about benchmarking the new <code>ring</code> tactic, available now in mathlib4, </p>\n</blockquote>\n<p>It would be great to compare against Coq's <code>ring</code> tactic as well. Last I checked on <code>(x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8)^15</code> it was <em>much</em> faster than either of the Lean3 implementations.</p>",
        "id": 249801772,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1629254564
    },
    {
        "content": "<p>The same panic error prevents us testing Mathlib4's <code>ring</code> on this example.</p>",
        "id": 249803197,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629256754
    },
    {
        "content": "<p>I think a good thing to test is <code>(x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8)^15 = (x8 + x7 + x6 + x5 + x4 + x3 + x2 + x1)^15</code>. Asking for proofs of equations is more interesting that finding normal forms.</p>\n<p>Coq takes about 5s on my laptop to do this.</p>",
        "id": 249803266,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629256830
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/panic.20while.20testing.20ring.20tactic/near/249803266\">said</a>:</p>\n<blockquote>\n<p>I think a good thing to test is <code>(x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8)^15 = (x8 + x7 + x6 + x5 + x4 + x3 + x2 + x1)^15</code>. Asking for proofs of equations is more interesting that finding normal forms.</p>\n<p>Coq takes about 5s on my laptop to do this.</p>\n</blockquote>\n<p>Agreed, just beware the gotcha: some ring tactics are clever enough to avoid normalizing when proving certain equalities. For example, IIR at least one of Mario's lean3 ring tactics would solve this instantly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">x1</span> <span class=\"bp\">+</span> <span class=\"n\">x2</span> <span class=\"bp\">+</span> <span class=\"n\">x3</span> <span class=\"bp\">+</span> <span class=\"n\">x4</span> <span class=\"bp\">+</span> <span class=\"n\">x5</span> <span class=\"bp\">+</span> <span class=\"n\">x6</span> <span class=\"bp\">+</span> <span class=\"n\">x7</span> <span class=\"bp\">+</span> <span class=\"n\">x8</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">15</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x1</span> <span class=\"bp\">+</span> <span class=\"n\">x2</span> <span class=\"bp\">+</span> <span class=\"n\">x3</span> <span class=\"bp\">+</span> <span class=\"n\">x4</span> <span class=\"bp\">+</span> <span class=\"n\">x5</span> <span class=\"bp\">+</span> <span class=\"n\">x6</span> <span class=\"bp\">+</span> <span class=\"n\">x7</span> <span class=\"bp\">+</span> <span class=\"n\">x8</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">15</span>\n</code></pre></div>",
        "id": 249803379,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1629256995
    },
    {
        "content": "<p>Coq is indeed way faster than either <code>ring</code> or <code>ring_exp</code> in Lean3. Even replacing <code>^15</code> with <code>^5</code>, both Lean tactics are slower than Coq (still at <code>^15</code>).</p>",
        "id": 249804590,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629258666
    },
    {
        "content": "<p>FYI Coq's <code>ring</code>tactic is reflexive (like Lean3's <code>ring2</code> tactic) but the Coq kernel has special support for trusted (and pretty-fast) computation. It is not clear to me yet how competitive a proof-producing procedure can be on benchmarks like that.</p>",
        "id": 249804986,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1629259192
    },
    {
        "content": "<p>Fixed (it was a bug in <code>normNum</code>, not <code>ring</code>, when you try to normalize a raw nat literal).</p>",
        "id": 249807469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629261964
    },
    {
        "content": "<p>Although it calls into question why <code>ring</code> is calling <code>normNum</code> with raw literals</p>",
        "id": 249807494,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629262003
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  There was a bug in <code>ring</code> too I will pull request in a minute :)</p>",
        "id": 249830873,
        "sender_full_name": "Aurélien Saue",
        "timestamp": 1629282576
    }
]