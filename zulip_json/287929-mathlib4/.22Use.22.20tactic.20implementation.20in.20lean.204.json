[
    {
        "content": "<p>I have (hopefully) implemented the <code>use</code> tactic from <code>mathlib</code> in Lean 4. I can make a pull request, but am sharing the code (with a couple of examples for testing) here first for any feedback. I will also add the third <code>PSigma</code> variant before making a PR.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Meta</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Elab</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Elab.Term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sigmaTypeExpr</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">eType</span><span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Expr</span> <span class=\"bp\">×</span> <span class=\"n\">Expr</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">eType</span> <span class=\"bp\">←</span> <span class=\"n\">whnf</span> <span class=\"n\">eType</span>\n    <span class=\"k\">let</span> <span class=\"n\">u</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshLevelMVar</span>\n    <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshLevelMVar</span>\n    <span class=\"k\">let</span> <span class=\"n\">α</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"n\">mkSort</span> <span class=\"o\">(</span><span class=\"n\">mkLevelSucc</span> <span class=\"n\">u</span><span class=\"o\">))</span>\n    <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"bp\">←</span> <span class=\"n\">mkArrow</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">mkSort</span> <span class=\"o\">(</span><span class=\"n\">mkLevelSucc</span> <span class=\"n\">v</span><span class=\"o\">))</span>\n    <span class=\"k\">let</span> <span class=\"n\">β</span>  <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"n\">type</span>\n    <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">mkAppN</span> <span class=\"o\">(</span><span class=\"n\">Lean.mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Sigma</span> <span class=\"o\">[</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">])</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n    <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"n\">m</span> <span class=\"n\">eType</span>\n      <span class=\"k\">then</span>\n        <span class=\"n\">return</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">whnf</span> <span class=\"n\">α</span> <span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">whnf</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">return</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">existsTypeExpr</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">eType</span><span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Expr</span> <span class=\"bp\">×</span> <span class=\"n\">Expr</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">eType</span> <span class=\"bp\">←</span> <span class=\"n\">whnf</span> <span class=\"n\">eType</span>\n    <span class=\"k\">let</span> <span class=\"n\">u</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshLevelMVar</span>\n    <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">levelZero</span>\n    <span class=\"k\">let</span> <span class=\"n\">α</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"n\">mkSort</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"bp\">←</span> <span class=\"n\">mkArrow</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">mkSort</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">β</span>  <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"n\">type</span>\n    <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">mkAppN</span> <span class=\"o\">(</span><span class=\"n\">Lean.mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Exists</span> <span class=\"o\">[</span><span class=\"n\">u</span><span class=\"o\">])</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n    <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"n\">m</span> <span class=\"n\">eType</span>\n      <span class=\"k\">then</span>\n        <span class=\"n\">return</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">whnf</span> <span class=\"n\">α</span> <span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">whnf</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">return</span> <span class=\"n\">none</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">:=</span> <span class=\"n\">useTactic</span><span class=\"o\">)</span> <span class=\"s2\">\"use\"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">@[tactic useTactic]</span> <span class=\"kd\">def</span> <span class=\"n\">useTacticImpl</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">use</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mvar</span> <span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span>\n    <span class=\"k\">let</span> <span class=\"n\">eType</span> <span class=\"bp\">←</span> <span class=\"n\">getMainTarget</span>\n    <span class=\"k\">let</span> <span class=\"n\">stOpt</span> <span class=\"bp\">←</span> <span class=\"n\">sigmaTypeExpr</span><span class=\"bp\">?</span> <span class=\"n\">eType</span>\n    <span class=\"k\">match</span> <span class=\"n\">stOpt</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">Tactic.elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">α</span>\n      <span class=\"k\">let</span> <span class=\"n\">bType</span> <span class=\"bp\">←</span> <span class=\"n\">whnf</span>  <span class=\"o\">(</span><span class=\"n\">mkApp</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n      <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"n\">bType</span>\n      <span class=\"k\">let</span> <span class=\"n\">exp</span> <span class=\"bp\">←</span>  <span class=\"n\">mkAppOptM</span> <span class=\"bp\">`</span><span class=\"n\">Sigma.mk</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n      <span class=\"n\">assignExprMVar</span> <span class=\"n\">mvar</span> <span class=\"n\">exp</span>\n      <span class=\"n\">replaceMainGoal</span> <span class=\"o\">[</span><span class=\"n\">b.mvarId</span><span class=\"bp\">!</span><span class=\"o\">]</span>\n      <span class=\"n\">return</span> <span class=\"o\">()</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">etOpt</span> <span class=\"bp\">←</span> <span class=\"n\">existsTypeExpr</span><span class=\"bp\">?</span> <span class=\"n\">eType</span>\n      <span class=\"k\">match</span> <span class=\"n\">etOpt</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">Tactic.elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">α</span>\n      <span class=\"k\">let</span> <span class=\"n\">bType</span> <span class=\"bp\">←</span> <span class=\"n\">whnf</span>  <span class=\"o\">(</span><span class=\"n\">mkApp</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n      <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"n\">bType</span>\n      <span class=\"k\">let</span> <span class=\"n\">exp</span> <span class=\"bp\">←</span>  <span class=\"n\">mkAppOptM</span> <span class=\"bp\">`</span><span class=\"n\">Exists.intro</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n      <span class=\"n\">assignExprMVar</span> <span class=\"n\">mvar</span> <span class=\"n\">exp</span>\n      <span class=\"n\">replaceMainGoal</span> <span class=\"o\">[</span><span class=\"n\">b.mvarId</span><span class=\"bp\">!</span><span class=\"o\">]</span>\n      <span class=\"n\">return</span> <span class=\"o\">()</span>\n      <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">throwTacticEx</span> <span class=\"bp\">`</span><span class=\"n\">use</span> <span class=\"n\">mvar</span> <span class=\"s2\">\"use only works for Exists and Sigma types\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwIllFormedSyntax</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Tuple</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n <span class=\"bp\">|</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit</span>\n <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">Tuple</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">Tuple</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">use</span> <span class=\"mi\">2</span>\n        <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"o\">())</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">use</span> <span class=\"mi\">3</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Nat.le_refl</span>\n</code></pre></div>",
        "id": 257982499,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1634538186
    },
    {
        "content": "<p>This is quite different from how <code>use</code> works in mathlib3, where there is no restriction to <code>exists</code> and <code>sigma</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">use</span> <span class=\"mi\">100</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">ff</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"mi\">5</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"mi\">37</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This strategy seems much more robust.</p>",
        "id": 257982855,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634538488
    },
    {
        "content": "<p>Thanks. <br>\nSo I see that my variant of <code>use</code> is very limited compared to the mathlib one. It seems that I should infer if the type is inductive and try to use its <code>mk</code> method rather than matching specifically to <code>Sigma</code> and <code>Exists</code>. I can work on this unless somebody else is implementing the full version soon.</p>",
        "id": 257983170,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1634538769
    },
    {
        "content": "<p>I think <code>use</code> should just be handing off to <code>fconstructor</code> or <code>fsplit</code>. The core implementation of <code>use</code> in mathlib3 is just:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">use_aux</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">pexpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">focus1</span> <span class=\"o\">(</span><span class=\"n\">refine</span> <span class=\"n\">h</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">done</span><span class=\"o\">))</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">(</span><span class=\"n\">fconstructor</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">use_aux</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 257983936,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634539436
    },
    {
        "content": "<p>(Note it uses <code>refine</code> here rather than <code>exact</code> so the user can leave placeholders in the expression they pass to <code>use</code>.)</p>",
        "id": 257984011,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634539483
    },
    {
        "content": "<p>(But for a first-approximation implementation <code>exact</code> is 90% of the way there.)</p>",
        "id": 257984077,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634539555
    },
    {
        "content": "<p>I understand now. Thanks.</p>",
        "id": 257989335,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1634543123
    }
]