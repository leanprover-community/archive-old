[
    {
        "content": "<p>I have been trying to familiarize myself with the naming conventions for mathlib4, and I have been having some difficulty wrapping my head around it. I have noticed a number of discrepancies in how things are named vs how the wiki prescribes which makes me believe others are also confused and/or disagree with how the naming scheme is currently defined. I am hoping that my questions can clear things up for myself and others.<br>\nFirst of all, it's my understanding that theorems are all <code>snake_case</code> and are the <em>only</em> examples of the <code>snake_case</code> naming convention. With that in mind, I am still confused by the following.</p>\n<p><strong>UpperCamelCase vs lowerCamelCase</strong><br>\nCurrently, the wiki states that inductive datatypes (of which structure and class are special cases) should be <code>UpperCamelCase</code> and everything else be <code>lowerCamelCase</code>. There are a significant number of <code>def</code>s which are <code>UpperCamelCase</code> in mathlib4, and even <code>ENNReal</code> is defined using a <code>def</code>. It seems as though the inductive datatype vs def split isn't in line with current expectations. From what I can tell, anything in mathlib4 that returns a <code>Sort</code> is capitalized as <code>UpperCamelCase</code>. Is this what people expect? Should there be a <code>Prop</code> vs <code>Type</code> split?<br>\nAppealing to <code>Core</code> and <code>Std</code> doesn't seem to help much as their naming convention seems inconsistent. <code>List.isPrefix</code>,<code>List.Disjoint</code>, and <code>outParam</code> seem arbitrarily capitalized. </p>\n<p><strong>Prefixes</strong><br>\nThe wiki also establishes that classes should have their <code>Is</code> and <code>Has</code> prefixes removed. In certain cases, this has led to name clashes. See <code>IsEmpty</code> class vs <code>Empty</code> datatype. Is this a case where the 'is' prefix is warranted?  Should either of them be renamed? Are there other similar situations that should be considered? See also <code>IsDomain</code>, <code>IsLeftCancelMul</code>, <code>IsSymmOp</code>, etc...<br>\n For datatypes that are not classes, is there a convention for when someone should include a verb in a name or is it best to leave it up to author's discretion? See <code>IsUnit</code>, <code>IsTop</code>, <code>IsPartialInv</code>.<br>\nFinally, should all the classes with the <code>Has</code> prefix be renamed? We currently define <code>HasCompl</code>, <code>HasSup</code>, <code>HasInf</code>, <code>HasUncurry</code>, <code>HasInvolutiveNeg</code>, <code>HasDistribNeg</code>, <code>HasQuotient</code>, and a few others.</p>\n<p>Sorry for the long post, if this needs to get split up into multiple discussions, I'd be happy to oblige.</p>",
        "id": 312492574,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1669567129
    },
    {
        "content": "<p>Prop-typed defs are UpperCamelCase</p>",
        "id": 312499476,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669571053
    },
    {
        "content": "<p>On typeclasses, I think there’s a tension between following Lean 4 conventions &amp; reducing renaming</p>",
        "id": 312499567,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669571101
    },
    {
        "content": "<p>That section may require revisions</p>",
        "id": 312499598,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669571114
    },
    {
        "content": "<p>I based it on Lean 4 conventions.</p>",
        "id": 312499624,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669571132
    },
    {
        "content": "<p>The <code>Prop</code>-<code>Type</code> split means that <code>def bar_baz : foo</code> for <code>foo : Prop</code>, and <code>def barBaz : foo</code> for <code>foo : Type _</code>. <del>In the special case of <code>foo = Prop</code>, since <code>Prop : Type 1</code>, it is the latter.</del><br>\nEdit: but <code>Sort*</code> are exeptions and <code>def BarBaz : Sort*</code>.</p>",
        "id": 312502294,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1669572674
    },
    {
        "content": "<p>That’s worth clarifying in the wiki.</p>",
        "id": 312502709,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669572894
    },
    {
        "content": "<p>Ok, so when defining terms, it is split between <code>snake_case</code> and <code>lowerCamelCase</code>.</p>",
        "id": 312502922,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1669573045
    },
    {
        "content": "<p>and <code>def barBaz : Foo</code> for <code>Foo : Type</code> would be the correct capitalization?</p>",
        "id": 312503338,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1669573327
    },
    {
        "content": "<p>Yes. <code>String.isPrefix</code> should be <code>String.IsPrefix</code>. <code>List.Disjoint</code> is correct as is. <code>outParam</code> should be <code>OutParam</code> but it is to be in core so yeah.</p>",
        "id": 312503881,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1669573627
    },
    {
        "content": "<p>Or maybe <code>outParam</code> is morally a term of the type <code>Type -&gt; Type</code> so it is not <code>UpperCamelCase</code>.</p>",
        "id": 312503913,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1669573662
    },
    {
        "content": "<p>Would this mean <code>with_top</code> should be translated as <code>withTop</code>?</p>",
        "id": 312505730,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1669574662
    },
    {
        "content": "<p>Is it so? Then <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Not#doc\">docs4#Not</a> should probably be named <code>not</code> since it is morally <code>Prop -&gt; Prop</code>.</p>",
        "id": 312506992,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1669575385
    },
    {
        "content": "<p>Actually I take it back, I'm not sure in this case.</p>",
        "id": 312507751,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669575841
    },
    {
        "content": "<p>Perhaps what is confusing me is that <code>withTop</code> in mathlib4 would be defined as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">withTop</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Option</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>but it could just have easily been defined as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">WithTop</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">top</span>   <span class=\"o\">:</span> <span class=\"n\">WithTop</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span>  <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">WithTop</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>Should these have different capitalizations?</p>",
        "id": 312507874,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1669575899
    },
    {
        "content": "<p>Either case the result type signature is <code>Type</code> and it is <code>WithTop</code>.</p>",
        "id": 312508672,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1669576279
    },
    {
        "content": "<p>This should still be <code>WithTop</code> because <code>Option : Type u → Type u</code> and hence <code>Option α : Type u</code></p>",
        "id": 312508687,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669576288
    },
    {
        "content": "<p>I think we still have <code>Option α : Type</code>, so even in the <code>def</code>, it should still be <code>WithTop</code> since the <code>def</code> entails <code>WithTop α : Type</code>, and I <em>think</em> type-<em>valued</em> terms are UpperCamelCase.</p>\n<p>I know <code>And : Prop → Prop → Prop</code> is given as an example of the use of UpperCamelCase for <code>Prop</code>-valued terms. Perhaps the wiki should be updated to explicitly include “<code>Prop</code>- and <code>Type</code>-valued terms” if not already updated?</p>",
        "id": 312508717,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1669576305
    },
    {
        "content": "<p>Oops, I guess we were all writing the same message at the same time <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 312508797,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1669576331
    },
    {
        "content": "<p>Or just <code>Sort</code>-valued terms</p>",
        "id": 312508813,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669576339
    },
    {
        "content": "<p>The wiki already mentions this. But I think the wiki mentioning <code>outParam</code> as an example would cause confusion though.</p>",
        "id": 312508919,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1669576405
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Naming.20clarification/near/312508813\">said</a>:</p>\n<blockquote>\n<p>Or just <code>Sort</code>-valued terms</p>\n</blockquote>\n<p>This agrees with what I've seen people doing so far when porting over files.</p>",
        "id": 312508926,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1669576413
    },
    {
        "content": "<p>The wiki doesn’t actually mention this—it just says “<code>Prop</code>s and <code>Type</code>s”, which doesn’t cover e.g. things like <code>WithTop</code> of type <code>Type → Type</code> and apparently has caused some confusion.</p>",
        "id": 312509106,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1669576534
    },
    {
        "content": "<p>It is <code>def WithTop (α) : Type := sorry</code>, so it stricly falls in the \"<code>Prop</code>s and <code>Type</code>s\" category. But maybe wiki can somehow make it clearer.</p>",
        "id": 312509416,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1669576744
    },
    {
        "content": "<p>So if I am understanding everything correctly, terms of <code>Prop</code> are <code>snake_case</code>, terms of <code>Type</code> are <code>lowerCamelCase</code>, any <code>Prop</code>s or <code>Type</code>s should be <code>UpperCamelCase</code>. Functions should be capitalized based on their return type.</p>",
        "id": 312509553,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1669576835
    },
    {
        "content": "<p>Should I split off my questions about naming prefixes into a new discussion to avoid cluttering this one?</p>",
        "id": 312509864,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1669577046
    },
    {
        "content": "<p>Hmm…strictly speaking, it’s only <code>WithTop : Type → Type</code> that gets named with UpperCamelCase, not <code>WithTop α</code>, and so I don’t think the wiki covers it when interpreted precisely…i think it might be clearest to explicitly include type and prop families in the wiki, to head off precise/literal interpretations of the naming conventions</p>",
        "id": 312510155,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1669577272
    },
    {
        "content": "<p>The sentence \"Functions should be capitalized based on their return type\" should probably be added to the wiki.</p>",
        "id": 312510344,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1669577399
    },
    {
        "content": "<p>Along with the removal of <code>outParam</code> in the example (or explicitly point out that this is an exception).</p>",
        "id": 312510536,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1669577488
    },
    {
        "content": "<p>I'm finally editing the wiki to reflect this! :)</p>",
        "id": 315691596,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1670967654
    },
    {
        "content": "<p>One thing I'd like to add: something that reflects the fact that words which are abbreviated to strings greater than one character (e.g. <code>Mul</code> or <code>Pow</code>) are treated the same as unabbreviated words. This is true, right?</p>",
        "id": 315692230,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1670967880
    },
    {
        "content": "<p>you mean \"is the fact that <code>Add</code> is a word whereas <code>Mul</code> is short for <code>Multiplication</code> irrelevant to the naming convention\"? If so then yes.</p>",
        "id": 315692664,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670968018
    },
    {
        "content": "<p>I'm porting <code>order.circular</code> (just to try porting something), and it provides an interesting case. Lean 3 uses <code>btw : α → α → α → Prop</code> and <code>sbtw : α → α → α → Prop</code> for \"between\" and \"strictly between\". My feeling is that these should be named <code>Btw</code> (<code>Prop</code>-valued so <code>UpperCamelCase</code>, then in parallel to <code>Mul</code>) and <code>SBtw</code> (\"strictly\" abbreviated to one character, then <code>Btw</code>—same reasoning).</p>",
        "id": 315692787,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1670968061
    },
    {
        "content": "<p>I would go for <code>Sbtw</code>, with the idea that we shouldn't put two caps one after the other.</p>",
        "id": 315693014,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670968142
    },
    {
        "content": "<p>But <code>Btw</code> stands in for a single word, right? So shouldn't it be capitalized as a word within an <code>UpperCamelCase</code> name? (And don't we put two capitals after each other in acronyms, e.g. <code>LT</code>)? Or should this be an exception?</p>",
        "id": 315693269,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1670968233
    },
    {
        "content": "<p>I think the acronym convention is unfollowable and we already have a zoo of them: <code>Eq</code>, <code>Ne</code>, <code>LE</code>, <code>LT</code>.</p>",
        "id": 315693919,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670968443
    },
    {
        "content": "<p>Given that Lean core uses <code>HPow</code>, <code>HAppend</code>, <code>HAnd</code>, where <code>H</code> is short for the modifier <code>heterogeneous</code>, I think <code>Btw</code> and <code>SBtw</code> is closer to this convention</p>",
        "id": 315693988,
        "sender_full_name": "Winston Yin",
        "timestamp": 1670968470
    },
    {
        "content": "<p>Well, <code>Eq</code> is an abbreviation, not an acronym! So I feel like it should be capitalized like <code>Mul</code>. (And <code>Ne</code> is one of the few exceptions to the naming conventions just to parallel <code>Eq</code>, as I understand it? But it could be considered as an abbreviation of \"nonequal\", and then it wouldn't be an exception...except for the fact that no rules explicitly mention abbreviations yet)</p>",
        "id": 315694211,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1670968560
    },
    {
        "content": "<p><code>Ne</code> is an acronym <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 315694384,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670968608
    },
    {
        "content": "<p>Yes, if it's taken to stand for \"not equal\"! But if it's taken to stand for \"nonequal\", then it's an abbreviation... :)</p>",
        "id": 315694562,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1670968679
    },
    {
        "content": "<p>There was some discussion some days ago about how to name <code>ennreal</code>, and I believe it came down to <code>ENNReal</code> to be clear that <code>E,N,N</code> are all modifiers to <code>Real</code></p>",
        "id": 315694659,
        "sender_full_name": "Winston Yin",
        "timestamp": 1670968699
    },
    {
        "content": "<p>What does <code>ENNReal</code> stand for, again?</p>",
        "id": 315694698,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1670968717
    },
    {
        "content": "<p>Extended, non-negative real</p>",
        "id": 315694732,
        "sender_full_name": "Winston Yin",
        "timestamp": 1670968727
    },
    {
        "content": "<p>I see no point having it be <code>ENNReal</code> over <code>Ennreal</code> or <code>EnnReal</code>. We're just making it harder for ourselves.</p>",
        "id": 315694870,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670968787
    },
    {
        "content": "<p>Ok! <code>ENNReal</code> fits nicely into the acronym convention, and suggests <code>SBtw</code>...</p>",
        "id": 315694881,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1670968790
    },
    {
        "content": "<p>Because <code>EReal, NNReal, ENNReal</code> all are modified <code>Real</code>. It makes the capitalisation consistent so there are no surprises, and it makes it easier to change <code>Real -&gt; NNReal</code>, say, when we refactor some theorems</p>",
        "id": 315695478,
        "sender_full_name": "Winston Yin",
        "timestamp": 1670968978
    },
    {
        "content": "<blockquote>\n<p>I see no point having it be ENNReal over Ennreal or EnnReal. We're just making it harder for ourselves.</p>\n</blockquote>\n<p>I do think <code>ENNReal</code> is more communicative...it tells me <code>ENN</code> is an acronym and not an abbreviation for a word that starts with <code>Enn</code>. Likewise <code>SBtw</code> tells me it's <code>S</code> <code>Btw</code>, not an abbreviation for some word starting with <code>S</code> and involving the letters <code>b</code>, <code>t</code>, <code>w</code>...</p>",
        "id": 315695493,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1670968983
    },
    {
        "content": "<p>Now, an argument could be made that if people start <em>saying</em> \"ereal\" as though it were its own word, similar to \"poset\", then the capitalisation can change to reflect that. But none of the things in this thread are that established</p>",
        "id": 315695815,
        "sender_full_name": "Winston Yin",
        "timestamp": 1670969106
    },
    {
        "content": "<p>(Also <code>ENNReal</code> is totally consistent with <code>UpperCamelCase</code> naming conventions, except each \"word\" is abbreviated to one character long...I think that's why it \"feels right\" to me, at least)</p>",
        "id": 315695876,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1670969142
    },
    {
        "content": "<p>Yeah, it definitely makes sense to account for any lexicalization that's happened irl when deciding what counts as a \"word\"! :)</p>",
        "id": 315696060,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1670969219
    },
    {
        "content": "<p>Don't take this example too seriously, but we went from <code>E-Mail</code> to <code>Email</code> once the word became established...</p>",
        "id": 315696061,
        "sender_full_name": "Winston Yin",
        "timestamp": 1670969219
    },
    {
        "content": "<p><a href=\"#narrow/stream/287929-mathlib4/topic/ENnReal/near/312347291\">Earlier convo for reference</a></p>",
        "id": 315696630,
        "sender_full_name": "Winston Yin",
        "timestamp": 1670969463
    },
    {
        "content": "<p>Rust has a convention that makes acronyms be considered as a single word for capitalisation. So it would be <code>EnnReal</code> or <code>Ennreal</code>.</p>",
        "id": 315696751,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670969516
    },
    {
        "content": "<p>I guess we'll have to name it <code>EnnReal</code> or <code>Ennreal</code> when we formalise them in Rust <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 315696994,
        "sender_full_name": "Winston Yin",
        "timestamp": 1670969629
    },
    {
        "content": "<p>Hmm, it does seem that Lean's conventions differs in that respect (except for <code>Ne</code>, and as far as I can tell, <em>only</em> <code>Ne</code>?)...but tbh I think Lean's version makes more sense, at least by my personal preferences :)</p>",
        "id": 315697170,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1670969702
    },
    {
        "content": "<p>I got so used to <code>smul</code> in mathlib3 that I just say <code>IPA/smʌl/</code> nowadays, but (alas?) the convention has been set to call it <code>SMul</code> in mathlib4</p>",
        "id": 315697251,
        "sender_full_name": "Winston Yin",
        "timestamp": 1670969740
    },
    {
        "content": "<p>Hmm, considering all that...I think for now I'm going to go with <code>SBtw</code> given that <em>almost</em> everything follows the naming convention (looking at you, <code>Ne</code> and <code>_Param</code>s...), and e.g. <code>HAdd</code>, <code>SMul</code> shows that it's followed even in cases like this.</p>",
        "id": 315697419,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1670969784
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416472\">Winston Yin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Naming.20clarification/near/315697251\">said</a>:</p>\n<blockquote>\n<p>I got so used to <code>smul</code> in mathlib3 that I just say <code>IPA/smʌl/</code> nowadays, but (alas?) the convention has been set to call it <code>SMul</code> in mathlib4</p>\n</blockquote>\n<p>We're a Ctrl+F away from fixing it <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 315697502,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670969822
    },
    {
        "content": "<p>Also, my apologies Yaël—I see that I'm making this choice in a port of a file you authored! 😅</p>",
        "id": 315697811,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1670969936
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416472\">@Winston Yin</span> , you're not aligning declarations correctly (in your head). <code>has_smul</code> went to <code>SMul</code>, but <code>smul</code> (or rather, <code>has_smul.smul</code>) went to <code>SMul.smul</code>.</p>",
        "id": 315703724,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1670972503
    },
    {
        "content": "<p>So this is now messing with some other convention in Lean core: <code>HPow.hPow</code> but <code>SMul.smul</code>?</p>",
        "id": 315703989,
        "sender_full_name": "Winston Yin",
        "timestamp": 1670972615
    },
    {
        "content": "<p>(Don't hate me) but the latter should probably be <code>SMul.sMul</code> for consistency</p>",
        "id": 315704197,
        "sender_full_name": "Winston Yin",
        "timestamp": 1670972698
    },
    {
        "content": "<p>Yes, I know, but we discussed it (somewhere probably a week ago, I don't recall where), and it was decided we will keep <code>smul</code> instead of <code>sMul</code>.</p>",
        "id": 315704464,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1670972790
    },
    {
        "content": "<p>It's <a href=\"#narrow/stream/287929-mathlib4/topic/Naming.20smul.20vs.20sMul/near/314322121\">here</a></p>",
        "id": 315704829,
        "sender_full_name": "Winston Yin",
        "timestamp": 1670972937
    },
    {
        "content": "<p>Will this be an exception just for <code>smul</code> given how common it is? Should the general rule for everything else be to write analogous things like <code>hMul</code>?</p>",
        "id": 315705389,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1670973185
    },
    {
        "content": "<p>note that core lean does not completely adhere to the naming conventions. There is a <a href=\"https://github.com/leanprover/lean4/pull/1897\">PR open</a> to fix it, but this generated an understandable amount of internal discussion and it needs to be split up into less-contentious and more-contentious parts and then possibly make changes to the style guide. Hopefully I can get Leo in the mathlib4 porting meeting and we can all hash this out</p>",
        "id": 315705626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670973274
    },
    {
        "content": "<p>The discussion re: <code>hMul</code> was actually to rename it to <code>HMul.mul</code> which sidesteps most of the problems</p>",
        "id": 315705721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670973323
    },
    {
        "content": "<p><code>smul</code> is not an exception, the rule is that clusters of capitals at the start of a type name are lowercased as a group</p>",
        "id": 315705895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670973400
    },
    {
        "content": "<p>Isn't the rule actually that <em>acronyms</em> are lowercased as a group? E.g. <code>ennReal</code> instead of <code>ennreal</code> (if it had to be lowerCamelCased)</p>",
        "id": 315706230,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1670973562
    },
    {
        "content": "<p>At least, that's what the wiki says as written right now. (And it kind of makes sense to me: only the first \"thing\" in lowerCamelCase should be lowercased, not the second, and the acronym is the first thing (e.g. <code>Real</code> is the second). It's just that acronyms upper/lowercase as a group, in xkcd/XKCD style.) If that's not actually the rule, though, then the wiki should be updated</p>",
        "id": 315707347,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1670974047
    },
    {
        "content": "<p>no, the initial letter of the non-acronym part is also lowercased</p>",
        "id": 315709880,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670975220
    },
    {
        "content": "<p>What do we think about <code>MvFunctor</code>/<code>MVFunctor</code>  for \"multivariate functor\"? I'm inclined towards the first, since <code>Mv</code> is an abbreviation, not an acronym, but it also feels that a naming convention where we have to think \"Is this leading part an abbreviation or an acronym\" is maybe not ideal.</p>",
        "id": 315835997,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1671029251
    },
    {
        "content": "<p>I could go either way on that one. I think we can still leave some stuff up to the author's discretion</p>",
        "id": 315836842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671029471
    },
    {
        "content": "<p>I think it's closer to an acronym than an abbreviation though, especially if you spell it multi-variate functor</p>",
        "id": 315837190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671029554
    },
    {
        "content": "<p>Yeah, I guess it's the same discussion as <code>NE</code>/<code>Ne</code>. It could be either an abbreviation or an acronym, depending on how you spell it. All the more reason we maybe shouldn't distinguish between them? Going with <code>MV</code> would lead to <code>MVQPF</code> for \"multivariate quotient of polynomial functor\", which feels less readable than <code>MvQPF</code> to me, though.</p>",
        "id": 315838089,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1671029779
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Naming.20clarification/near/315696751\">said</a>:</p>\n<blockquote>\n<p>Rust has a convention that makes acronyms be considered as a single word for capitalisation. So it would be <code>EnnReal</code> or <code>Ennreal</code>.</p>\n</blockquote>\n<p>Essentially, I would be with Yael on this one, in favor of adopting Rust's convention on this</p>",
        "id": 315838342,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1671029867
    },
    {
        "content": "<p><code>ENNReal</code> has much more semantic content. I remember being totally confused when reading <code>mathlib</code> for the first time and seeing <code>ennreal</code>.</p>\n<p>Also, I could be wrong, but I don't think such a change is really on the table for discussion. I don't mean you can't voice your opinion, only that it may be futile.</p>",
        "id": 315841715,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1671030698
    },
    {
        "content": "<p>My futile opinion is that <code>ENnReal</code> is better <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>; I think of \"nonnegative\" as one entity, not two...</p>",
        "id": 315844852,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1671031422
    },
    {
        "content": "<p>If we're expressing futile preferences, I agree with Jireh! this is also why I personally like the rule that gets us <code>ennReal</code> for the lowerCamelCased version instead of <code>ennreal</code>—otherwise who knows when the first thing ends and the next one begins? (I mean, you don't know if <code>enn</code> is an abbreviation or an acronym, but it helps distinguish things at least a bit.)</p>",
        "id": 315887699,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671042423
    },
    {
        "content": "<p>Ok, interesting new naming case: <code>def cIcc (a b : α) : Set α</code>. Stands for \"circular interval, closed-closed\". (There's an analogous <code>cIoo</code> for \"open-open\".)</p>\n<p>Current naming convention suggests it should be <code>cicc</code> instead based on decapitalizing all initial clusters of capitals. <code>cIcc</code> emphasizes the interval nicely but wrongly suggests <code>Icc</code> is an abbreviation for something. <code>ciCC</code>, for example, separates the \"units of thought\" nicely (decapitalized first acronym, capitalized second acronym).  Thoughts?</p>",
        "id": 315915143,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671052158
    },
    {
        "content": "<p>This will have to match <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.Icc\">docs#set.Icc</a> at any rate.</p>",
        "id": 315915434,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671052262
    },
    {
        "content": "<p>Your interpretation is slightly off as well. <code>cIcc</code> is more directly \"circular <code>Icc</code>\".</p>",
        "id": 315915523,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671052310
    },
    {
        "content": "<p>ohh, I see!</p>",
        "id": 315915633,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671052344
    },
    {
        "content": "<p>So I guess this is part of a more general decision for naming intervals of (return) type <code>Set : α</code>.</p>\n<p>In that case choices include <code>Icc</code>, <code>icc</code>, <code>ICC</code> (← probably the most wrong?) and <code>iCC</code>.</p>",
        "id": 315916120,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671052542
    },
    {
        "content": "<p>I want to note that intervals can be infinite (<code>i</code>) and I'm not sure we'd want e.g. <code>iio</code>.</p>",
        "id": 315916316,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671052609
    },
    {
        "content": "<p>I would be inclined towards leaving these as-is based on the fact that the lean 3 names were already unusual for being capitalized</p>",
        "id": 315916499,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671052685
    },
    {
        "content": "<p>It does feel like it warrants an exception one way or another (so that we can use <code>Icc</code> or, I guess, <code>iCC</code> if we really want), since it's more of a schema for notating intervals than an acronym per se.</p>",
        "id": 315916779,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671052802
    },
    {
        "content": "<p>How do we naming things involving <code>Nat.cast</code>? just <code>cast</code>?</p>",
        "id": 316351674,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1671221545
    },
    {
        "content": "<p>I've been using <code>natCast</code> if the Lean 3 name was <code>nat_cast</code> and keep it as <code>cast</code> otherwise.</p>",
        "id": 316375694,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1671231520
    },
    {
        "content": "<p>What is the capitalization policy for the <code>Co</code> prefix? E.g <code>Frame/Coframe</code> or <code>Frame/CoFrame</code>?</p>",
        "id": 316761239,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1671461520
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Naming.20clarification/near/315841715\">said</a>:</p>\n<blockquote>\n<p><code>ENNReal</code> has much more semantic content. I remember being totally confused when reading <code>mathlib</code> for the first time and seeing <code>ennreal</code>.</p>\n</blockquote>\n<p>In my opinion this is a really important point - are the naming conventions designed to make experienced lean users more comfortable, or to more easily onboard new ones? I prefer <code>ENNReal</code> (and <code>SMul</code>, <code>HEq</code>) because it would have made the learning experience more comfortable. By the way, the Rust convention would give <code>EnnReal</code> not <code>Ennreal</code> (e.g. <code>GzDecoder</code> from a gzip library). I'm not a particular fan of Rust's convention because it still leaves ambiguity as to whether <code>Enn</code> (for example) is itself an abbreviation of a longer word.</p>",
        "id": 316777657,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1671465976
    },
    {
        "content": "<p>My expectation would be Coframe because it's one word not two.</p>",
        "id": 316778062,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1671466094
    }
]