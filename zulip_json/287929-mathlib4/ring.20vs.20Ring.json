[
    {
        "content": "<p>Why do these have different base classes but no porting note? <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Ring#doc\">docs4#Ring</a> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">AddCommGroup</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">AddGroupWithOne</span> <span class=\"n\">R</span>\n</code></pre></div>\n<p>but <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring\">docs#ring</a> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">add_comm_group_with_one</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">distrib</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>(i.e., skips the <code>zero_mul</code> and <code>mul_zero</code> fields)</p>",
        "id": 322876462,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674402260
    },
    {
        "content": "<p>Narrowed it down to <a href=\"https://github.com/leanprover-community/mathlib4/pull/655/commits/1dbb7fcf2664393981b552effcc1286909082dea\">https://github.com/leanprover-community/mathlib4/pull/655/commits/1dbb7fcf2664393981b552effcc1286909082dea</a> by <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> ; my guess is that it was copied from the adhoc version</p>",
        "id": 322877489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674402851
    },
    {
        "content": "<p>I think you can get commutativity as well so it could extend <code>add_group</code> instead of <code>add_comm_group</code>. <code>a + b = - a + a + a + b + b - b = - a + (1 + 1) * a + (1 + 1) * b - b =- a + (1 + 1) * (a + b) - b =-a + 1 * (a + b) + 1 * (a + b) - b = b + a</code></p>",
        "id": 322878372,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1674403290
    },
    {
        "content": "<p>Right, but you're describing a refactor. I'm asking \"why did we refactor in the port?\".</p>",
        "id": 322878832,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674403544
    },
    {
        "content": "<p>Because now we have these extra <code>zero_mul</code> and <code>mul_zero</code> fields to fill in which mathlib3 provides no proof of</p>",
        "id": 322878934,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674403585
    },
    {
        "content": "<p>I don't recall. I'll try to take a look tonight what might have happened</p>",
        "id": 322879566,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1674403885
    },
    {
        "content": "<p>A reasonable option would be to backport the refactor; I could believe that the new-style structures in Lean4 make the new spelling advantageous</p>",
        "id": 322889160,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674409349
    },
    {
        "content": "<p>That goes against our philosophy not to clutter structures with redundant fields. How does the new spelling make it advantageous? At any rate I wouldn't easily deem it reasonable.</p>",
        "id": 322890003,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674409933
    },
    {
        "content": "<p>With new-style structures It means that <code>ring.to_semiring</code> is a projection and doesn't expand to an application of <code>semiring.mk</code>, which is supposedly the whole reason new-style structures all a thing at all</p>",
        "id": 322891493,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674410922
    },
    {
        "content": "<p>I started aligning to mathlib3 in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1768\">mathlib4#1768</a>, but hitting some timeouts I don't have time to diagnose. If anyone feels like looking into them, please go ahead</p>",
        "id": 322900986,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1674417235
    },
    {
        "content": "<p>With your explanation, Eric, I think the reasonable solution is to not align. Deep down, this difference is introduced by the way new structures work and backporting will be unpractical because of the lack of structure eta.</p>",
        "id": 322901634,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674417634
    },
    {
        "content": "<p>Backporting will be easy, it's just a case of writing the <code>mul_zero</code> and <code>zero_mul</code> proofs</p>",
        "id": 322903628,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674418910
    },
    {
        "content": "<p>Better: Write a constructor to avoid writing them.</p>",
        "id": 322904117,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674419153
    },
    {
        "content": "<p>Then you lose the nice <code>{}</code> syntax</p>",
        "id": 322904371,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674419318
    },
    {
        "content": "<p>Then revive <a href=\"https://github.com/leanprover-community/mathlib/pull/17826\">#17826</a> to fill the fields automagically.</p>",
        "id": 322904723,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674419562
    },
    {
        "content": "<p>My argument is:</p>\n<ul>\n<li>If we do nothing, people will fill these fields in during porting. This won't be reviewed as thoroughly as in a mathlib3 PR, and we won't be able to estimate the overall impact of the change.</li>\n<li>If we fill those fields in in mathlib3, then we make the porting job easier</li>\n<li>Doing clever tactic stuff is unlikely to translate well to Lean4 anyway</li>\n</ul>",
        "id": 322905568,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674420164
    },
    {
        "content": "<p>But in that case the clever tactic stuff is very lightweight and will be translated to Lean 4 before we merge it.</p>",
        "id": 322905919,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674420384
    }
]