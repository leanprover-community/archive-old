[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/482\">mathlib4#482</a>, notes I made through the process:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"n\">doesn't</span> <span class=\"n\">work</span><span class=\"o\">,</span> <span class=\"n\">had</span> <span class=\"n\">to</span> <span class=\"n\">make</span> <span class=\"n\">just</span> <span class=\"kd\">notation</span> <span class=\"n\">and</span> <span class=\"n\">turn</span> <span class=\"n\">off</span> <span class=\"n\">quotPrecheck</span>\n<span class=\"n\">Subtype.prop</span> <span class=\"n\">was</span> <span class=\"n\">mathported</span> <span class=\"n\">to</span> <span class=\"n\">x.Prop</span> <span class=\"n\">instead</span> <span class=\"n\">of</span> <span class=\"n\">x.prop</span>\n<span class=\"n\">eq.Ne</span> <span class=\"n\">should</span> <span class=\"n\">be</span> <span class=\"n\">eq.ne</span>\n<span class=\"n\">mathlib3's</span> <span class=\"n\">lt_of_not_le</span> <span class=\"n\">is</span> <span class=\"n\">now</span> <span class=\"n\">lt_of_not_ge</span>\n<span class=\"n\">there</span> <span class=\"n\">is</span> <span class=\"n\">no</span> <span class=\"n\">convert</span> <span class=\"n\">tactic</span>\n<span class=\"n\">rw</span> <span class=\"n\">doesn't</span> <span class=\"n\">leave</span> <span class=\"n\">side</span> <span class=\"n\">goals</span> <span class=\"n\">anymore</span><span class=\"o\">,</span> <span class=\"n\">can't</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_lt_mul_left</span><span class=\"o\">]</span>\n<span class=\"n\">LE.le.eq_or_lt</span> <span class=\"n\">used</span> <span class=\"n\">instead</span> <span class=\"n\">of</span> <span class=\"n\">has_le.le.eq_or_gt</span>\n<span class=\"n\">used</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"n\">instead</span> <span class=\"n\">of</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span>\n<span class=\"n\">needed</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">Â·</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">make</span> <span class=\"n\">sure</span> <span class=\"n\">correct</span> <span class=\"n\">HMul</span> <span class=\"n\">was</span> <span class=\"n\">found</span><span class=\"o\">,</span>\n<span class=\"n\">instead</span> <span class=\"n\">of</span> <span class=\"n\">ideally</span> <span class=\"n\">congr_arg</span> <span class=\"n\">_</span>\n<span class=\"n\">implicit</span> <span class=\"n\">arg</span> <span class=\"n\">handling</span> <span class=\"n\">caused</span> <span class=\"n\">different</span> <span class=\"n\">term</span> <span class=\"n\">proofs</span> <span class=\"n\">instead</span> <span class=\"n\">of</span> <span class=\"n\">using</span> <span class=\"n\">monotone</span>\n<span class=\"n\">ported</span> <span class=\"n\">over</span> <span class=\"n\">CancelMonoidWithZero</span>\n<span class=\"n\">simp</span><span class=\"bp\">!</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">do</span> <span class=\"n\">anything</span> <span class=\"n\">to</span> <span class=\"n\">abbrevs</span><span class=\"o\">,</span> <span class=\"n\">neither</span> <span class=\"n\">does</span> <span class=\"n\">dsimp</span>\n<span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">only</span><span class=\"o\">)</span> <span class=\"n\">doesn't</span> <span class=\"n\">terminate</span> <span class=\"n\">on</span> <span class=\"n\">syntactically</span> <span class=\"n\">matched</span> <span class=\"n\">LHS</span> <span class=\"n\">and</span> <span class=\"n\">RHS</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"n\">is</span> <span class=\"n\">needed</span>\n</code></pre></div>\n<p>Should I mark the file on the yaml?</p>",
        "id": 305197712,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1666285862
    },
    {
        "content": "<p>What didn't work with local notations?</p>",
        "id": 305201565,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1666287037
    },
    {
        "content": "<p>Not related to the porting itself, but <a href=\"https://github.com/leanprover-community/mathlib/pull/16523\">#16523</a> and <a href=\"https://github.com/leanprover-community/mathlib/pull/16525\">#16525</a> haven't been merged, what should I do with them?</p>",
        "id": 305212457,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1666290503
    },
    {
        "content": "<p>(<code>algebra/order/monoid_lemmas_zero_lt</code> in titles is its old name when these PRs are created)</p>",
        "id": 305212907,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1666290668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110789\">@Jakob von Raumer</span> making them local hits the various errors MWE'd here:<br>\n<a href=\"#narrow/stream/287929-mathlib4/topic/local.20notation.20for.20subtypes\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/local.20notation.20for.20subtypes</a></p>",
        "id": 305213149,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1666290737
    }
]