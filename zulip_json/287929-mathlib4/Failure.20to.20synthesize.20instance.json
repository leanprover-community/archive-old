[
    {
        "content": "<p>This instance failure came up when porting Order.Hom.Basic . <a href=\"https://github.com/leanprover-community/mathlib4/pull/804\">PR</a> It seems pretty difficult to fix and in earlier versions of Lean4 (2022-20-10), the class <code>OrderIsoClass</code> gives an error to do with <code>LE \\a</code> depending on an <code>outParam</code> but not being an <code>outParam</code>. This seems to not have a solution within my Lean4 expertise.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">EquivLike</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n<span class=\"sd\">/-- `OrderIsoClass F α β` states that `F` is a type of order isomorphisms.</span>\n\n\n<span class=\"sd\">You should extend this class when you extend `OrderIso`. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">OrderIsoClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"kd\">extends</span>\n  <span class=\"n\">EquivLike</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OrderIsoClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">EquivLike</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>",
        "id": 313276990,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1669900782
    },
    {
        "content": "<p>Is this the same issue as <a href=\"#narrow/stream/287929-mathlib4/topic/instance.20loop.3F/near/313151621\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/instance.20loop.3F/near/313151621</a>?</p>",
        "id": 313283999,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1669902737
    },
    {
        "content": "<p>We should probably just wait on porting any files involving <code>EquivLike</code> for now.</p>",
        "id": 313296789,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669906164
    },
    {
        "content": "<p>Until <a href=\"https://github.com/leanprover/lean4/issues/1901\">https://github.com/leanprover/lean4/issues/1901</a> is fixed, <code>EquivLike</code> is going to cause lots of problems.</p>",
        "id": 313297117,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669906224
    },
    {
        "content": "<p>Sorry, even <code>FunLike</code>.</p>",
        "id": 313297243,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669906261
    },
    {
        "content": "<p>There are not very many files that don't depend on these things.</p>",
        "id": 313297684,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1669906374
    },
    {
        "content": "<p>Yes, it's a difficult situation. Hopefully we have a fix soon.</p>",
        "id": 313298296,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669906512
    },
    {
        "content": "<p>If someone reviews/merges my category theory PR, most of category theory is independent of <code>FunLike</code>.</p>",
        "id": 313298420,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669906554
    },
    {
        "content": "<p>And if someone finishes my Heyting PR, getting up to Data.Set.Basic should be open.</p>",
        "id": 313298589,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669906600
    },
    {
        "content": "<p>I'm working on your Heyting PR right now. There's a difficult Type Class issue there as well. It's hard to minimize</p>",
        "id": 313300396,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1669907089
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110044\">Chris Hughes</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Failure.20to.20synthesize.20instance/near/313300396\">said</a>:</p>\n<blockquote>\n<p>I'm working on your Heyting PR right now. There's a difficult Type Class issue there as well. It's hard to minimize</p>\n</blockquote>\n<p>Type class problem fixed and this PR should be Ready To Merge</p>",
        "id": 313338521,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1669917274
    }
]