[
    {
        "content": "<p>L241 ~ L257 contains the following code (with comments).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">dvd_of_factors_subperm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a.factors</span> <span class=\"bp\">&lt;+~</span> <span class=\"n\">b.factors</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">b.eq_zero_or_pos</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hb</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">dvd_zero</span> <span class=\"n\">_</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">one_dvd</span> <span class=\"n\">_</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">b.factors.diff</span> <span class=\"n\">a.succ.succ.factors</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span>\n  <span class=\"n\">nth_rw</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.prod_factors</span> <span class=\"n\">ha</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- Porting note: Previous code was:</span>\n  <span class=\"c1\">-- rw [← List.prod_append,</span>\n  <span class=\"c1\">--   List.Perm.prod_eq &lt;| List.subperm_append_diff_self_of_count_le &lt;| List.subperm_ext_iff.mp h,</span>\n  <span class=\"c1\">--   Nat.prod_factors hb.ne']</span>\n  <span class=\"c1\">--</span>\n  <span class=\"c1\">-- Fails to operate on the second line.</span>\n  <span class=\"c1\">-- However, the LHS of the second line is equal to the RHS of the status.</span>\n  <span class=\"gr\">admit</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">nat.dvd_of_factors_subperm</span> <span class=\"n\">Nat.dvd_of_factors_subperm</span>\n</code></pre></div>\n<p>The LHS of <code>List.Perm.prod_eq &lt;| ...</code> and the RHS of the goal are equal, but the <code>rw</code> fails.<br>\nI can't figure out what's happening here.</p>",
        "id": 322427071,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1674189288
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"574112\">@Jihoon Hyun</span> There are probably implicit differences.</p>",
        "id": 322428210,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674190320
    },
    {
        "content": "<p>Like differing typeclass variables</p>",
        "id": 322428257,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674190330
    },
    {
        "content": "<p>You can write <code>set_option pp.explicit true</code> above your theorem (or even above the tactic)</p>",
        "id": 322428274,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674190358
    },
    {
        "content": "<p>You can also try to change <code>rw</code> to <code>erw</code>. Then Lean tries a bit harder.</p>",
        "id": 322428291,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674190374
    },
    {
        "content": "<p>Thanks! I'll look at it again a few hours later!</p>",
        "id": 322428410,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1674190467
    },
    {
        "content": "<p>I had actually narrowed it down to something pretty scary: if you replace the code by this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">dvd_of_factors_subperm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a.factors</span> <span class=\"bp\">&lt;+~</span> <span class=\"n\">b.factors</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">b.eq_zero_or_pos</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hb</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">dvd_zero</span> <span class=\"n\">_</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">one_dvd</span> <span class=\"n\">_</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">b.factors.diff</span> <span class=\"n\">a.succ.succ.factors</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span>\n  <span class=\"n\">nth_rw</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.prod_factors</span> <span class=\"n\">ha</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">List.prod_append</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">List.Perm.prod_eq</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">List.subperm_append_diff_self_of_count_le</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">List.subperm_ext_iff.mp</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.prod_factors</span> <span class=\"n\">hb.ne'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n  <span class=\"n\">convert</span> <span class=\"n\">this</span>\n</code></pre></div>\n<p>you end up with the goal <code>instBEqNat = instBEq</code>, i.e. we seem to get a diamond in the <code>BEq</code> instance on <code>Nat</code>.</p>",
        "id": 322428562,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1674190566
    },
    {
        "content": "<p>Basically, after the last <code>rw</code> call, <code>this</code> and the goal look identical even if you click on it in the infoview, and then <code>convert</code> shows what the problem is.</p>",
        "id": 322428743,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1674190695
    }
]