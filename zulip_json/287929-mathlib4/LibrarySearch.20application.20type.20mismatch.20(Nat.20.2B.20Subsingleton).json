[
    {
        "content": "<p>This is blocking <a href=\"https://github.com/leanprover-community/mathlib4/pull/669\">mathlib4#669</a>, where adding <code>eq_of_zero_eq_one</code> in the presence of <code>CommSemiring Nat</code> breaks the LibrarySearch test file. MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.LibrarySearch</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MulZeroOneClass</span> <span class=\"o\">(</span><span class=\"n\">M₀</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">M₀</span><span class=\"o\">,</span> <span class=\"n\">Zero</span> <span class=\"n\">M₀</span><span class=\"o\">,</span> <span class=\"n\">One</span> <span class=\"n\">M₀</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M₀</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">mul_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M₀</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M₀</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M₀</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MulZeroOneClass</span> <span class=\"o\">(</span><span class=\"n\">zero_mul</span> <span class=\"n\">mul_zero</span> <span class=\"n\">one_mul</span> <span class=\"n\">mul_one</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">M₀</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MulZeroOneClass</span> <span class=\"n\">M₀</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">subsingleton_of_zero_eq_one</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">M₀</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Subsingleton</span> <span class=\"n\">M₀</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">mul_one</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">mul_one</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">]⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eq_of_zero_eq_one</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">M₀</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M₀</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">Subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">subsingleton_of_zero_eq_one</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MulZeroOneClass</span> <span class=\"n\">Nat</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mul_one</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.one_mul</span>\n  <span class=\"n\">zero_mul</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.zero_mul</span>\n  <span class=\"n\">mul_zero</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mul_zero</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">application type mismatch</span>\n<span class=\"cm\">  congrArg (@OfNat.ofNat Nat 0) (congrArg (@Zero.toOfNat0 Nat) rfl)</span>\n<span class=\"cm\">argument has type</span>\n<span class=\"cm\">  Zero.toOfNat0 = Zero.toOfNat0</span>\n<span class=\"cm\">but function has type</span>\n<span class=\"cm\">  Zero.toOfNat0 = { ofNat := One.one } → 0 = 0</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 311511504,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1669087168
    },
    {
        "content": "<p>I am looking at this now, but maybe someone can beat me to it :)</p>",
        "id": 311511761,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1669087418
    },
    {
        "content": "<p>I tried using <code>set_option trace.Tactic.librarySearch true</code> and editing the tactic to see why it thinks it can prove <code>0 = 1</code> but didn't get anywhere</p>",
        "id": 311511963,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1669087626
    },
    {
        "content": "<p>Indeed the actual bug seems to be in <code>solve_by_elim</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.solveByElim</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">ℕ</span> <span class=\"mi\">0</span> <span class=\"n\">Zero.toOfNat0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">ℕ</span> <span class=\"mi\">1</span> <span class=\"n\">One.toOfNat1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">solve_by_elim</span>\n</code></pre></div>\n<p>the tactic suceeds but fails to typecheck.</p>",
        "id": 311513163,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1669088895
    },
    {
        "content": "<p>I can look at this for a bit now if you have a mwe with just <code>solve_by_elim</code>. (I recently touched that code.)</p>",
        "id": 311513620,
        "sender_full_name": "David Renshaw",
        "timestamp": 1669089440
    },
    {
        "content": "<p>ah, yep, seeing that behavior. weird</p>",
        "id": 311514122,
        "sender_full_name": "David Renshaw",
        "timestamp": 1669089899
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.Tactic.solveByElim</span><span class=\"o\">]</span> <span class=\"n\">Working</span> <span class=\"n\">on</span><span class=\"o\">:</span> <span class=\"bp\">⊢</span> <span class=\"n\">OfNat.ofNat</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">OfNat.ofNat</span> <span class=\"mi\">1</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.solveByElim</span><span class=\"o\">]</span> <span class=\"n\">Trying</span> <span class=\"n\">to</span> <span class=\"n\">apply</span><span class=\"o\">:</span> <span class=\"n\">rfl</span>  <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"bp\">?</span><span class=\"n\">m.4307</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.4307</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.solveByElim</span><span class=\"o\">]</span> <span class=\"n\">Trying</span> <span class=\"n\">to</span> <span class=\"n\">apply</span><span class=\"o\">:</span> <span class=\"n\">congrArg</span>  <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.4310</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.4311</span><span class=\"o\">),</span>\n      <span class=\"bp\">?</span><span class=\"n\">m.4312</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.4313</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"bp\">?</span><span class=\"n\">m.4312</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">?</span><span class=\"n\">m.4313</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.solveByElim</span><span class=\"o\">]</span> <span class=\"n\">Working</span> <span class=\"n\">on</span><span class=\"o\">:</span> <span class=\"n\">case</span> <span class=\"n\">h</span>\n    <span class=\"bp\">⊢</span> <span class=\"n\">Zero.toOfNat0</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">One.one</span> <span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.solveByElim</span><span class=\"o\">]</span> <span class=\"n\">Trying</span> <span class=\"n\">to</span> <span class=\"n\">apply</span><span class=\"o\">:</span> <span class=\"n\">rfl</span>  <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"bp\">?</span><span class=\"n\">m.4335</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.4335</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.solveByElim</span><span class=\"o\">]</span> <span class=\"n\">Trying</span> <span class=\"n\">to</span> <span class=\"n\">apply</span><span class=\"o\">:</span> <span class=\"n\">congrArg</span>  <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.4338</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.4339</span><span class=\"o\">),</span>\n      <span class=\"bp\">?</span><span class=\"n\">m.4340</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.4341</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"bp\">?</span><span class=\"n\">m.4340</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">?</span><span class=\"n\">m.4341</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.solveByElim</span><span class=\"o\">]</span> <span class=\"n\">Working</span> <span class=\"n\">on</span><span class=\"o\">:</span> <span class=\"n\">case</span> <span class=\"n\">h.h</span>\n    <span class=\"bp\">⊢</span> <span class=\"n\">CommMonoidWithZero.toZero</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.4341</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.solveByElim</span><span class=\"o\">]</span> <span class=\"n\">Trying</span> <span class=\"n\">to</span> <span class=\"n\">apply</span><span class=\"o\">:</span> <span class=\"n\">rfl</span>  <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"bp\">?</span><span class=\"n\">m.4357</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.4357</span>\n</code></pre></div>",
        "id": 311514639,
        "sender_full_name": "David Renshaw",
        "timestamp": 1669090301
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">ℕ</span> <span class=\"mi\">0</span> <span class=\"n\">Zero.toOfNat0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">ℕ</span> <span class=\"mi\">1</span> <span class=\"n\">One.toOfNat1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">congrArg</span>\n  <span class=\"n\">apply</span> <span class=\"n\">congrArg</span>\n  <span class=\"n\">apply</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 311514711,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1669090355
    },
    {
        "content": "<p>Shows <code>Goals accomplished</code> and fails typechecking; it is fine if <code>apply</code> lets you write yourself into a corner, but this seems like a Lean bug.</p>",
        "id": 311514751,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1669090411
    },
    {
        "content": "<p>wow!</p>",
        "id": 311514832,
        "sender_full_name": "David Renshaw",
        "timestamp": 1669090465
    },
    {
        "content": "<p>self contained:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Zero.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Zero.toOfNat0</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"o\">‹</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">›</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Zero.ofOfNat0</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">0</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">One.toOfNat1</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"o\">‹</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">›</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">One.ofOfNat1</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">One</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">Nat</span> <span class=\"mi\">0</span> <span class=\"n\">Zero.toOfNat0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">Nat</span> <span class=\"mi\">1</span> <span class=\"n\">One.toOfNat1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">congrArg</span>\n  <span class=\"n\">apply</span> <span class=\"n\">congrArg</span>\n  <span class=\"n\">apply</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 311515431,
        "sender_full_name": "David Renshaw",
        "timestamp": 1669090897
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> do you want to report this on the Lean4 repo, or should I?</p>",
        "id": 311515549,
        "sender_full_name": "David Renshaw",
        "timestamp": 1669091004
    },
    {
        "content": "<p>Go ahead please! <span class=\"user-mention\" data-user-id=\"243791\">@David Renshaw</span></p>",
        "id": 311515633,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1669091065
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/1870\">https://github.com/leanprover/lean4/issues/1870</a></p>",
        "id": 311515889,
        "sender_full_name": "David Renshaw",
        "timestamp": 1669091274
    },
    {
        "content": "<p>it seems to be the second apply that causes problems (you can replace the first by refine and the third by exact)</p>",
        "id": 311516278,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1669091592
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">Nat</span> <span class=\"mi\">0</span> <span class=\"n\">Zero.toOfNat0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">Nat</span> <span class=\"mi\">1</span> <span class=\"n\">One.toOfNat1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">congrArg</span> <span class=\"n\">_</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">apply</span> <span class=\"n\">congrArg</span> <span class=\"n\">_</span>\n  <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>fails with the same error, but inserting <code>?_</code> gives a sensible error</p>",
        "id": 311516522,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1669091801
    }
]