[
    {
        "content": "<p>Is there a tactic that works well for what appear to be simple goals on Nat and Int? I was told to use <code>linarith</code>, but it seems to have trouble with natural number, e.g. it's not able to solve this via <code>linarith [h]</code> (library_search also fails):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">S.B</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">S.B</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"n\">S.B</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">S.B</span>\n</code></pre></div>",
        "id": 319929582,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1673085569
    },
    {
        "content": "<p>(ignore that)</p>",
        "id": 319953680,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673096660
    },
    {
        "content": "<p>You might be able to get somewhere with <code>zify</code> then <code>linarith</code>, but I haven't tried.</p>",
        "id": 319953776,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673096709
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.pred_lt#doc\">docs4#Nat.pred_lt</a></p>",
        "id": 319956532,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673097878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> </p>\n<p>Thanks, maybe I should have been more specific. The example was just supposed to illustrate the kind of goal I'm talking about, I have a lot of small Nat problems like this that I would like to be able to solve with a tactic. I'm not struggling to prove this specific goal (I did indeed use Nat.pred_lt to close it out).</p>",
        "id": 319957148,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1673098186
    },
    {
        "content": "<p>Unfortunately the lean 3 tactic is our buggy <code>omega</code>.</p>",
        "id": 319957980,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673098557
    },
    {
        "content": "<p><code>linarith</code> will work on <code>Nat</code> problems where the <code>Nat</code>s behave \"mathematically correctly\".  Your example has content only because of our weird definition of <code>Nat</code> subtraction, so <code>linarith</code> can't do it.</p>\n<p>See if you can reorganize your arguments to avoid <code>Nat</code> subtraction.  If you can, <code>linarith</code> will probably be more useful to you.</p>",
        "id": 319984741,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673110542
    },
    {
        "content": "<p>Thanks Kevin and Heather. I'll try to stick to stating things in terms of addition, I wasn't aware that Nat subtraction was that much of an issue for linarith.</p>",
        "id": 320010323,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1673129253
    },
    {
        "content": "<p>It's only when you can trivially lift to <code>Int</code> that <code>linarith</code> copes with <code>Nat</code> (it is just calling <code>zify</code> as a pre-processor).</p>",
        "id": 320017264,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673135411
    },
    {
        "content": "<p>I don't think the Lean 3 implementation of <code>omega</code> is buggy, particularly, just the author is no longer active and no one wants to deal with the code.</p>",
        "id": 320017281,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673135438
    }
]