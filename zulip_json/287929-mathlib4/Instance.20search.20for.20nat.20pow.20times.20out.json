[
    {
        "content": "<p>This appears in <a href=\"https://github.com/leanprover-community/mathlib4/pull/549\">mathlib4#549</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Basic</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Units</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"c1\">-- comment out any of the instances below to have `mul_pow'` not time out</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">low</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">Units</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">Units.val</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"o\">(</span><span class=\"n\">Units</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">One.one</span><span class=\"o\">⟩</span>\n  <span class=\"n\">mul</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">u₁.val</span> <span class=\"bp\">*</span> <span class=\"n\">u₂.val</span><span class=\"o\">⟩</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">u.1</span><span class=\"o\">⟩</span>\n  <span class=\"n\">one_mul</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">mul_one</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CommGroup</span> <span class=\"o\">(</span><span class=\"n\">Units</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">One.one</span><span class=\"o\">⟩</span>\n  <span class=\"n\">mul</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">u₁.val</span> <span class=\"bp\">*</span> <span class=\"n\">u₂.val</span><span class=\"o\">⟩</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">u.1</span><span class=\"o\">⟩</span>\n  <span class=\"n\">one_mul</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">mul_one</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_pow'</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 311194537,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1668986144
    },
    {
        "content": "<p>I am trying to minimize</p>",
        "id": 311194669,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1668986269
    },
    {
        "content": "<p>Frustratingly, <code>theorem mul_pow'' [CommMonoid M] (a b : M) (n : ℕ) : Pow.pow (a * b) n = Pow.pow a n * Pow.pow b n := sorry</code> is fine.</p>",
        "id": 311194738,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1668986341
    },
    {
        "content": "<p>Similarly, <code>theorem mul_pow'' [CommMonoid M] (a b : M) (n : ℕ) : HPow.hPow (a * b) n = HPow.hPow a n * HPow.hPow b n := sorry</code> is fine</p>",
        "id": 311194818,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1668986419
    }
]