[
    {
        "content": "<p>One other thing that came up in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1637\">mathlib4#1637</a>; it looks like the behavior of <code>simp</code> on equation compiler definitions has changed?</p>",
        "id": 322022846,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674039447
    },
    {
        "content": "<p>Compare this Lean 3 code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">success_if_fail</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>  <span class=\"c1\">-- only `foo x` is matched by the above lemma</span>\n  <span class=\"n\">funext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>vs the same code in Lean 4</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"c1\">-- unfolds foo into a lambda</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 322023724,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674039706
    },
    {
        "content": "<p>This is going to be annoying for porting <a href=\"https://tqft.net/mathlib/data/matrix/basic\">file#data/matrix/basic</a>, as lots of the definitions are written in this style such that they simplify only when applied to indices</p>",
        "id": 322024593,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674039929
    },
    {
        "content": "<p>It's annoying for lots of files.</p>",
        "id": 322024652,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674039949
    },
    {
        "content": "<p>Do the applied equation lemmas for <code>foo</code> still exist? I don't know what the equivalent of <code>#print prefix</code> is to find out.</p>",
        "id": 322025072,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674040059
    },
    {
        "content": "<p>no they don't, they are generated on demand</p>",
        "id": 322026502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674040490
    },
    {
        "content": "<p>I think mathlib has a <code>#print prefix</code></p>",
        "id": 322026571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674040506
    },
    {
        "content": "<p>indeed this seems like a regression to me, requiring lots of awkward workarounds</p>",
        "id": 322026786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674040554
    },
    {
        "content": "<p>Should I move this thread to <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a>?</p>",
        "id": 322026863,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674040571
    },
    {
        "content": "<p>or make an issue</p>",
        "id": 322026894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674040580
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2042\">leanprover/lean4#2042</a></p>",
        "id": 322027815,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674040905
    },
    {
        "content": "<p>Also added a comment to <code>data.matrix.basic</code> on <a href=\"https://github.com/leanprover-community/mathlib/wiki/mathlib4-port-status\">#port-wiki</a> suggesting that we wait for that issue if possible</p>",
        "id": 322028165,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674040998
    },
    {
        "content": "<p>I see now that this isn't just about definitions by pattern matching, it's also about definitions that don't pattern match at all</p>",
        "id": 322028349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674041046
    },
    {
        "content": "<p>Do you have an example?</p>",
        "id": 322028418,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674041073
    },
    {
        "content": "<p>your example above doesn't match on <code>a</code></p>",
        "id": 322028454,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674041088
    },
    {
        "content": "<p>Do you mean \"it's <em>only</em> about definitions that don't pattern match at all\"? Your use of \"also\" is confusing me.</p>",
        "id": 322028550,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674041135
    },
    {
        "content": "<p>Or does the problem also exist for functions which do pattern match?</p>",
        "id": 322028638,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674041164
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.40.5Bsimp.5D.20on.20equation.20compiler.20definitions/near/322028454\">said</a>:</p>\n<blockquote>\n<p>your example above doesn't match on <code>a</code></p>\n</blockquote>\n<p>Can it be written as a wildcard match so that it does?</p>",
        "id": 322028700,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674041192
    },
    {
        "content": "<p>I know (or at least have a good idea for) how to implement the desired behavior for when there is a <code>match</code> involved in the expanded expression, but your example is unfolded to syntactically identical terms to what you would get with lambda, so it is tough to see how simp could generate a different equation</p>",
        "id": 322028717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674041200
    },
    {
        "content": "<p>I would argue that the syntactic unfolding should not happen without recording somewhere that it was done</p>",
        "id": 322028773,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674041231
    },
    {
        "content": "<p>I think the ability to implement things by macro expansion is considered as a positive</p>",
        "id": 322028864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674041270
    },
    {
        "content": "<p>I don't think we want to go back to having the position of the colon matter</p>",
        "id": 322029001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674041318
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.40.5Bsimp.5D.20on.20equation.20compiler.20definitions/near/322028700\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.40.5Bsimp.5D.20on.20equation.20compiler.20definitions/near/322028454\">said</a>:</p>\n<blockquote>\n<p>your example above doesn't match on <code>a</code></p>\n</blockquote>\n<p>Can it be written as a wildcard match so that it does?</p>\n</blockquote>\n<p><span aria-label=\"ping pong\" class=\"emoji emoji-1f3d3\" role=\"img\" title=\"ping pong\">:ping_pong:</span></p>",
        "id": 322029134,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674041374
    },
    {
        "content": "<p>I think match on nothing macro expands to nothing</p>",
        "id": 322029183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674041397
    },
    {
        "content": "<p>I could be wrong though</p>",
        "id": 322029244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674041406
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n<span class=\"c1\">-- def foo : Nat → Nat :=</span>\n<span class=\"c1\">-- fun x =&gt;</span>\n<span class=\"c1\">--   let x := x;</span>\n<span class=\"c1\">--   3</span>\n</code></pre></div>",
        "id": 322029377,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674041464
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n<span class=\"c1\">-- def foo : Nat → Nat :=</span>\n<span class=\"c1\">-- fun x =&gt;</span>\n<span class=\"c1\">--   let x := x;</span>\n<span class=\"c1\">--   3</span>\n</code></pre></div>",
        "id": 322029473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674041521
    },
    {
        "content": "<p>Oh, I see your point about matching being irrelevant here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n\n<span class=\"c1\">-- `simp` unfolds unapplied `foo` to (fun a =&gt; 2 * a)</span>\n</code></pre></div>",
        "id": 322029483,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674041522
    },
    {
        "content": "<p>So it seems that Lean4's <code>simp only [foo]</code> is akin to Lean3's <code>delta foo</code></p>",
        "id": 322029596,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674041558
    },
    {
        "content": "<p>Not exactly, if you use a definition with a <code>_sunfold</code> lemma then it will only unfold on constructors</p>",
        "id": 322029750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674041596
    },
    {
        "content": "<p>How does one make a <code>_sunfold</code> lemma?</p>",
        "id": 322029826,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674041624
    },
    {
        "content": "<p>they are used in recursive definitions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">5</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">simp</span> <span class=\"n\">foo</span> <span class=\"c1\">-- foo</span>\n<span class=\"bp\">#</span><span class=\"n\">simp</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"c1\">-- foo n</span>\n<span class=\"bp\">#</span><span class=\"n\">simp</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">-- foo n / 2</span>\n</code></pre></div>",
        "id": 322030151,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674041703
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">5</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n\n<span class=\"bp\">#</span><span class=\"n\">simp</span> <span class=\"n\">foo</span>\n<span class=\"c1\">-- fun x =&gt;</span>\n<span class=\"c1\">--   match x with</span>\n<span class=\"c1\">--   | 0 =&gt; 5</span>\n<span class=\"c1\">--   | Nat.succ n =&gt; n / 2</span>\n</code></pre></div>",
        "id": 322030299,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674041750
    },
    {
        "content": "<p>Ah, this works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>  <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">foo._sunfold</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 322030300,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674041750
    },
    {
        "content": "<p>I guess this is new peak library design then?</p>",
        "id": 322030431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674041781
    },
    {
        "content": "<p>Is this how we should handle this in porting?</p>",
        "id": 322030435,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674041782
    },
    {
        "content": "<p>It's rather annoying to repeat the definition twice, but I imagine it doesn't come up very often</p>",
        "id": 322030505,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674041808
    },
    {
        "content": "<p>I think we could tweak the heuristics to prefer unfolding only fully applied lambdas</p>",
        "id": 322030577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674041835
    },
    {
        "content": "<p>since I think wanting the unapplied thing to unfold is the less common case</p>",
        "id": 322030616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674041853
    },
    {
        "content": "<p>Are manual <code>_sunfold</code> lemmas a good compromise until such a patch lands?</p>",
        "id": 322030770,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674041903
    },
    {
        "content": "<p>same thing for the last example I gave, I think we want that to unfold only the constructors by default</p>",
        "id": 322030785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674041906
    },
    {
        "content": "<p>sure, whatever works</p>",
        "id": 322030791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674041911
    },
    {
        "content": "<p>Actually, <code>theorem foo._sunfold : True := trivial </code> is enough</p>",
        "id": 322031007,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674041999
    },
    {
        "content": "<p>lol</p>",
        "id": 322031095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674042012
    },
    {
        "content": "<p>actually does that ever unfold? I think if you write a bad sunfold lemma the definition becomes opaque</p>",
        "id": 322031156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674042045
    },
    {
        "content": "<p>I remember this being an issue a while back when there was a bug in sunfold generation</p>",
        "id": 322031217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674042065
    },
    {
        "content": "<p>Try it and see:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>  <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">foo._sunfold</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"c1\">-- noop, succeeds</span>\n  <span class=\"n\">simp</span> <span class=\"c1\">-- noop, succeeds</span>\n  <span class=\"n\">funext</span>\n  <span class=\"n\">simp</span> <span class=\"c1\">-- unfolds</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 322031236,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674042074
    },
    {
        "content": "<p>and the match?</p>",
        "id": 322031285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674042095
    },
    {
        "content": "<p>What do I need to import for <code>#simp</code> to work?</p>",
        "id": 322031415,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674042130
    },
    {
        "content": "<p><code>import Mathlib.Tactic.Conv</code></p>",
        "id": 322031434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674042138
    },
    {
        "content": "<p>Obviously</p>",
        "id": 322031462,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674042144
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.40.5Bsimp.5D.20on.20equation.20compiler.20definitions/near/322031285\">said</a>:</p>\n<blockquote>\n<p>and the match?</p>\n</blockquote>\n<p>Yep, that works too</p>",
        "id": 322031520,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674042164
    },
    {
        "content": "<p>protip, grep for <code>\"#simp\"</code></p>",
        "id": 322031541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674042174
    },
    {
        "content": "<p>I'm in the web editor so that's not an option unfortunately</p>",
        "id": 322031594,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674042191
    },
    {
        "content": "<p>I think if we are going to make these <code>_sunfold</code>s a thing we should hide it behind an attribute</p>",
        "id": 322031850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674042258
    },
    {
        "content": "<p>So you'd be against <a href=\"https://github.com/leanprover-community/mathlib4/pull/1637/files#r1073430448\">this suggestion</a> then?</p>",
        "id": 322032042,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674042311
    },
    {
        "content": "<p>not so much against as wanting to make it look less hackish</p>",
        "id": 322032228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674042376
    },
    {
        "content": "<p>Oh, it doesn't work there!</p>",
        "id": 322032258,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674042391
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>  <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">foo._sunfold</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n\n<span class=\"bp\">#</span><span class=\"n\">simp</span> <span class=\"n\">foo</span> <span class=\"c1\">-- does not unfold</span>\n<span class=\"bp\">#</span><span class=\"n\">simp</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span> <span class=\"c1\">-- unfolds</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">bar._sunfold</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n\n<span class=\"bp\">#</span><span class=\"n\">simp</span> <span class=\"n\">bar</span> <span class=\"c1\">-- unfolds?</span>\n<span class=\"bp\">#</span><span class=\"n\">simp</span> <span class=\"bp\">@</span><span class=\"n\">bar</span> <span class=\"c1\">-- does not unfold</span>\n</code></pre></div>",
        "id": 322032985,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674042621
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.40.5Bsimp.5D.20on.20equation.20compiler.20definitions/near/322032042\">said</a>:</p>\n<blockquote>\n<p>So you'd be against <a href=\"https://github.com/leanprover-community/mathlib4/pull/1637/files#r1073430448\">this suggestion</a> then?</p>\n</blockquote>\n<p>This has already come up many times in the porting process and what we've been doing up until now is removing <code>@[simp]</code> from the definition, and then writing the equation lemmas manually and tagging them with <code>@[simp]</code> instead.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Conv</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>  <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">foo_def</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">#</span><span class=\"n\">simp</span> <span class=\"n\">foo</span> <span class=\"c1\">-- does not unfold</span>\n<span class=\"bp\">#</span><span class=\"n\">simp</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span> <span class=\"c1\">-- does</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">bar_def</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">bar</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">#</span><span class=\"n\">simp</span> <span class=\"n\">bar</span> <span class=\"c1\">-- does not unfold</span>\n<span class=\"bp\">#</span><span class=\"n\">simp</span> <span class=\"bp\">@</span><span class=\"n\">bar</span> <span class=\"c1\">-- does not unfold</span>\n</code></pre></div>",
        "id": 322036677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674043889
    },
    {
        "content": "<p>Is there a thread about this elsewhere then? I'm surprised that the response during porting was \"oh we need to have these new lemmas\" instead of \"oh, this behavior seems wrong and we should report it\".</p>",
        "id": 322036890,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674043964
    },
    {
        "content": "<p>Tagging definitions with <code>@[simp]</code> seemed wrong to me <em>shrug</em>. I'd just assumed this was the \"new way\".</p>",
        "id": 322036984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674044000
    },
    {
        "content": "<p>See for example point 1 of <a href=\"#narrow/stream/287929-mathlib4/topic/.E2.9C.94.20simp.20normal.20form/near/318468183\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/.E2.9C.94.20simp.20normal.20form/near/318468183</a></p>",
        "id": 322037224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674044079
    },
    {
        "content": "<p>Though in Data.List.Basic there were also some definitions of list functions that did not have <code>[simp]</code> at all in Lean 3, IIRC.</p>",
        "id": 322048098,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674047367
    }
]