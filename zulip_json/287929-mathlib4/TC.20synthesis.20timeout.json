[
    {
        "content": "<p>I have a timeout in TC synthesis in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1229\">https://github.com/leanprover-community/mathlib4/pull/1229</a> on the second last instance in the file. The MWE is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Int.Cast.Prod</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Monoid.Prod</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\"># Semiring, ring etc structures on `R × S`</span>\n\n<span class=\"cm\">In this file we define two-binop (`semiring`, `ring` etc) structures on `R × S`. We also prove</span>\n<span class=\"cm\">trivial `simp` lemmas, and define the following operations on `ring_hom`s and similarly for</span>\n<span class=\"cm\">`non_unital_ring_hom`s:</span>\n\n<span class=\"cm\">* `fst R S : R × S →+* R`, `snd R S : R × S →+* S`: projections `prod.fst` and `prod.snd`</span>\n<span class=\"cm\">  as `ring_hom`s;</span>\n<span class=\"cm\">* `f.prod g : `R →+* S × T`: sends `x` to `(f x, g x)`;</span>\n<span class=\"cm\">* `f.prod_map g : `R × S → R' × S'`: `prod.map f g` as a `ring_hom`,</span>\n<span class=\"cm\">  sends `(x, y)` to `(f x, g y)`.</span>\n<span class=\"cm\">-/</span>\n\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">R</span> <span class=\"n\">R'</span> <span class=\"n\">S</span> <span class=\"n\">S'</span> <span class=\"n\">T</span> <span class=\"n\">T'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Prod</span>\n\n<span class=\"sd\">/-- Product of two distributive types is distributive. -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Distrib</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Distrib</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Distrib</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">×</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">×</span> <span class=\"n\">S</span><span class=\"o\">)),</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">×</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"k\">with</span>\n    <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mk.inj_iff.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">left_distrib</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">left_distrib</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mk.inj_iff.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">right_distrib</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">right_distrib</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n\n<span class=\"sd\">/-- Product of two semirings is a semiring. -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">×</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">AddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">×</span> <span class=\"n\">S</span><span class=\"o\">)),</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">MonoidWithZero</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">×</span> <span class=\"n\">S</span><span class=\"o\">)),</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">Distrib</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">×</span> <span class=\"n\">S</span><span class=\"o\">)),</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">AddMonoidWithOne</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">×</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n\n<span class=\"sd\">/-- Product of two rings is a ring. -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">×</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">×</span> <span class=\"n\">S</span><span class=\"o\">)),</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">AddGroupWithOne</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">×</span> <span class=\"n\">S</span><span class=\"o\">)),</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">Semiring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">×</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Prod</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! ### Order -/</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">OrderedSemiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OrderedSemiring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">Semiring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)),</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">PartialOrder</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"k\">with</span>\n    <span class=\"n\">add_le_add_left</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">add_le_add_left</span>\n    <span class=\"n\">zero_le_one</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">zero_le_one</span><span class=\"o\">,</span> <span class=\"n\">zero_le_one</span><span class=\"o\">⟩</span>\n    <span class=\"n\">mul_le_mul_of_nonneg_left</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hab</span> <span class=\"n\">hc</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"o\">⟨</span><span class=\"n\">mul_le_mul_of_nonneg_left</span> <span class=\"n\">hab.1</span> <span class=\"n\">hc.1</span><span class=\"o\">,</span> <span class=\"n\">mul_le_mul_of_nonneg_left</span> <span class=\"n\">hab.2</span> <span class=\"n\">hc.2</span><span class=\"o\">⟩</span>\n    <span class=\"n\">mul_le_mul_of_nonneg_right</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hab</span> <span class=\"n\">hc</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"o\">⟨</span><span class=\"n\">mul_le_mul_of_nonneg_right</span> <span class=\"n\">hab.1</span> <span class=\"n\">hc.1</span><span class=\"o\">,</span> <span class=\"n\">mul_le_mul_of_nonneg_right</span> <span class=\"n\">hab.2</span> <span class=\"n\">hc.2</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">--instance [OrderedRing α] [OrderedRing β] : OrderedRing (α × β) :=</span>\n<span class=\"c1\">--  { Prod.ring, Prod.orderedSemiring with</span>\n<span class=\"c1\">--    mul_nonneg := fun a b ha hb =&gt; ⟨mul_nonneg ha.1 hb.1, mul_nonneg ha.2 hb.2⟩ }</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">OrderedRing</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OrderedRing</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OrderedRing</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)),</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">OrderedSemiring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"k\">with</span>\n    <span class=\"n\">mul_nonneg</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">mul_nonneg</span> <span class=\"n\">ha.1</span> <span class=\"n\">hb.1</span><span class=\"o\">,</span> <span class=\"n\">mul_nonneg</span> <span class=\"n\">ha.2</span> <span class=\"n\">hb.2</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Error is just a simple heartbeat timeout:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">63</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">whnf'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">200000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n<span class=\"mi\">64</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">isDefEq'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">200000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n<span class=\"mi\">64</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">isDefEq'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">200000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n<span class=\"mi\">64</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">isDefEq'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">200000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n<span class=\"mi\">64</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">isDefEq'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">200000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n<span class=\"mi\">64</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">isDefEq'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">200000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n<span class=\"mi\">63</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">whnf'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">200000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Locally increasing the heartbeats does also not help, it seems to be stuck.</p>",
        "id": 317994219,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672080914
    },
    {
        "content": "<p>I'm going to checkout the branch.</p>",
        "id": 317995521,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1672081886
    },
    {
        "content": "<p>My guess: Lean tries to unpack/repack instances and fails defeq.</p>",
        "id": 317997370,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1672083116
    },
    {
        "content": "<p>This can be a side effect of the new structure eta rfl rule.</p>",
        "id": 317997438,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1672083144
    },
    {
        "content": "<p>So how do we proceed with this?</p>",
        "id": 317997602,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672083288
    },
    {
        "content": "<p>I fixed compile but this is a workaround.</p>",
        "id": 317997685,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1672083348
    },
    {
        "content": "<p>I reordered all <code>inferInstanceAs</code> to mirror <code>extends</code>, then copied <code>zero_le_one</code> instead of inheriging it.</p>",
        "id": 317997750,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1672083395
    },
    {
        "content": "<p>How did you know it was specifically zero_le_one?</p>",
        "id": 317998332,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672083854
    },
    {
        "content": "<p>It is repeated in the definition of <code>OrderedRing</code></p>",
        "id": 317999647,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1672084728
    }
]