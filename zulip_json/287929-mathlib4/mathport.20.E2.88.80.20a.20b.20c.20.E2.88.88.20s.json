[
    {
        "content": "<p>I've noticed that mathport expands the syntactic sugar <code>∀ a b c ∈ s</code> differently than Lean3. The Lean3 ordering is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">c</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>while mathport gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This actually causes some golfed proofs to fail</p>",
        "id": 316850904,
        "sender_full_name": "Winston Yin",
        "timestamp": 1671492592
    },
    {
        "content": "<p>Should I submit an issue?</p>",
        "id": 316850989,
        "sender_full_name": "Winston Yin",
        "timestamp": 1671492620
    },
    {
        "content": "<p>update lean?</p>",
        "id": 316852310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671493459
    },
    {
        "content": "<p>lean 3 was modified specifically because of this issue</p>",
        "id": 316852329,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671493476
    },
    {
        "content": "<p>You mean update Lean4?</p>",
        "id": 316852772,
        "sender_full_name": "Winston Yin",
        "timestamp": 1671493726
    },
    {
        "content": "<p>hm, no I mean lean 3</p>",
        "id": 316853525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671494271
    },
    {
        "content": "<p>but it seems that even though <a href=\"https://github.com/leanprover-community/lean/pull/656\">lean#656</a> was intended to simplify mathport, the corresponding mathport change was never done once it landed</p>",
        "id": 316853600,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671494310
    },
    {
        "content": "<p>Whar order are we settling on in mathlib 4? <code>∀ (a : α), a ∈ s → ...</code> has the advantage that it can be handled as a block, and it directly relates to decidability instances for <code>finset</code>.</p>",
        "id": 317098079,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671608152
    },
    {
        "content": "<p>We moved to the <code>∀ (a : α), a ∈ s → ∀ (b : α), b ∈ s → ∀ (c : α), c ∈ s → ...</code> order a while ago</p>",
        "id": 317159184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671629642
    },
    {
        "content": "<p>pretty sure that's what the mathlib4 binder syntax expands to as well</p>",
        "id": 317159357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671629681
    },
    {
        "content": "<p>but the \"expanding binder collection\" warning is because we don't actually want to be expanding these binders, we should use the same binder syntax that lean 3 is using. Mathport hasn't been updated for the mathlib4 implementation of binder collections I think</p>",
        "id": 317159670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671629775
    },
    {
        "content": "<p>We probably need someone to hunt down those comments in mathlib4</p>",
        "id": 317159729,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671629802
    },
    {
        "content": "<p>probably better to look for them in mathlib3port, since people are likely deleting them in mathlib4</p>",
        "id": 317160595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671630073
    }
]