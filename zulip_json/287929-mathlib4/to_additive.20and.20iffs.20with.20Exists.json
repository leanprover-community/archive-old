[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/666\">mathlib4#666</a><br>\nSomehow, it fails to translate the internal <code>.match_1</code>, which I need a lot in <a href=\"https://github.com/leanprover-community/mathlib4/pull/549\">mathlib4#549</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.ToAdditive</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">def</span> <span class=\"n\">IsUnit</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span>\n\n<span class=\"c1\">-- this works fine</span>\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">isUnit_iff_inv</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">IsUnit</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"n\">rfl</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n<span class=\"k\">#print</span> <span class=\"n\">isAddUnit_iff_neg</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">The declaration isUnit_iff_exists_inv depends on the declaration isUnit_iff_exists_inv.match_1 which</span>\n<span class=\"cm\">is in the namespace isUnit_iff_exists_inv, but does not have the `@[to_additive]` attribute.</span>\n<span class=\"cm\">This is not supported.  Workaround: move isUnit_iff_exists_inv.match_1 to a different namespace.</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">isUnit_iff_exists_inv</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">IsUnit</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"n\">rfl</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hab</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hab</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- attribute [to_additive isAddUnit_iff_exists_neg.match_1] isUnit_iff_exists_inv.match_1</span>\n<span class=\"c1\">-- attribute [to_additive] isUnit_iff_exists_inv</span>\n</code></pre></div>",
        "id": 311179992,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1668974627
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> ?</p>",
        "id": 311182867,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668976649
    },
    {
        "content": "<p>I guess the auxiliary definition traversing part of <code>to_additive</code> is broken. You can get to_addtive to trace what it's doing with the <code>to_additive</code> and <code>to_additive_detail</code> trace classes.</p>",
        "id": 311245555,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1669023413
    },
    {
        "content": "<p>I also hit this:<br>\n<a href=\"#narrow/stream/287929-mathlib4/topic/to_additive.20thinks.20it's.20in.20a.20namespace\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/to_additive.20thinks.20it's.20in.20a.20namespace</a></p>",
        "id": 311246292,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1669023702
    },
    {
        "content": "<p>I'll take a look</p>",
        "id": 311593327,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669123999
    },
    {
        "content": "<p>Fixed in <a href=\"https://github.com/leanprover-community/mathlib4/pull/680\">mathlib4#680</a></p>",
        "id": 311600094,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669125924
    },
    {
        "content": "<p>docBlame linter is failing, in case you hadn't noticed :)</p>",
        "id": 311602106,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1669126535
    },
    {
        "content": "<p>This is great; lots of ports have been running into this, I think.</p>",
        "id": 311680146,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669141326
    },
    {
        "content": "<p>Unfortunately, hit another issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Defs</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">def</span> <span class=\"n\">IsUnit'</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">isUnit'_iff_exists_inv</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">IsUnit'</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">isUnit'_iff_exists_inv'</span> <span class=\"o\">[</span><span class=\"n\">CommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">IsUnit'</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">isUnit'_iff_exists_inv</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 311748135,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1669173907
    },
    {
        "content": "<p>I can work around it by supplying a different proof tactic</p>",
        "id": 311748149,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1669173918
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">isUnit_iff_exists_inv</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>works fine</p>",
        "id": 311748236,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1669173975
    },
    {
        "content": "<p>I can fix this case, but it feels a like like playing whack-a-mole. I need to have more information to have more information to fix it properly.<br>\nMaybe <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> or <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> can answer the following questions:</p>\n<ul>\n<li>Is it documented somewhere what kind of auxiliary declarations a declaration can create, and more specifically: how these are named, if they are not giving an internal name (caught by <code>Lean.Name.isInternal</code>). So far I've found <code>&lt;declName&gt;</code> followed by <code>match_&lt;i&gt;</code>, <code>proof_&lt;i&gt;</code>or <code>eq_&lt;i&gt;</code> or <code>&lt;mainModule&gt;._auxLemma.&lt;i&gt;</code>. Are there others?</li>\n<li>Is there a reason that <code>Lean.Name.isInternal</code> doesn't mark all numeric names (with <code>Name.num</code>) as internal? They seem pretty internal to me.</li>\n</ul>",
        "id": 311798727,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669200843
    },
    {
        "content": "<p>I don't think there's an exhaustive documentation anywhere.  One reason why <code>isInternal</code> doesn't return true on <code>.num</code> is because of <em>hygienic</em> names.  The macro scopes in a name are encoded as <code>.num</code>.</p>",
        "id": 311877397,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1669226441
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> Your issue is fixed in <a href=\"https://github.com/leanprover-community/mathlib/pull/699\">#699</a></p>",
        "id": 311915043,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669241661
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 311915124,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1669241732
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/699\">mathlib4#699</a></p>",
        "id": 311915460,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669241921
    },
    {
        "content": "<p>I'm happy to merge <a href=\"https://github.com/leanprover-community/mathlib4/pull/689\">mathlib4#689</a>; is it ready to go, and the TODO in the PR description can come later?</p>",
        "id": 311915561,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669241989
    },
    {
        "content": "<p>I'm actually currently rewriting it, because there is a case of handling numeral literals it isn't catching (the commented out test-case).<br>\nI'm fine either way if you merge the current version already, or wait until my rewrite...<br>\n(the TODO in the PR description was <a href=\"https://github.com/leanprover-community/mathlib4/pull/699\">mathlib4#699</a>, and I just removed it)</p>",
        "id": 311916358,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669242566
    },
    {
        "content": "<p>I pushed my new version.<br>\nI expect that there are still some bugs with the interaction of <code>@[to_additive]</code> and numerals on <code>Nat</code> (and other fixed types), but please report one if you encounter it. </p>\n<p>I made the solution quite flexible, so that if there is another function that takes numeric literals as argument, you can tell <code>@[to_additive]</code> to never change the literal, or you can tell <code>@[to_additive]</code> to change the literal only if the first argument is a variable.</p>",
        "id": 311921964,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669246380
    },
    {
        "content": "<p>I would like to see <a href=\"https://github.com/leanprover-community/mathlib4/pull/689\">mathlib4#689</a> merged as it fixes an issue I was encountering.</p>",
        "id": 311930098,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669253989
    },
    {
        "content": "<p>I propose we keep merging fixes to to_additive as fast as they come. :-)</p>",
        "id": 311930803,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669254839
    }
]