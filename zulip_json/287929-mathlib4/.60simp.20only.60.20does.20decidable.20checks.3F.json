[
    {
        "content": "<p>It seems that Lean 4 <code>simp</code> checks decidable things.  For example, here a simp only fails before the relevant decidability instance is added, and succeeds after it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.Int.Lemmas</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">revert</span> <span class=\"n\">h</span> <span class=\"bp\">;</span> <span class=\"n\">decide</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Int.dvd_iff_mod_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">mod</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Int.decidableDvd</span> <span class=\"o\">:</span> <span class=\"n\">DecidableRel</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∣</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">decidable_of_decidable_of_iff</span> <span class=\"o\">(</span><span class=\"n\">Int.dvd_iff_mod_eq_zero</span> <span class=\"bp\">..</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">revert</span> <span class=\"n\">h</span> <span class=\"bp\">;</span> <span class=\"n\">decide</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>Cross-ref to <a href=\"https://github.com/leanprover-community/mathlib4/pull/1572#discussion_r1070401605\">PR</a> where I noticed this.</p>",
        "id": 321408648,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673730189
    },
    {
        "content": "<p>This was not the Lean 3 behaviour:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">int.decidable_dvd</span> <span class=\"c1\">-- decidable_rel has_dvd.dvd</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">revert</span> <span class=\"n\">h</span> <span class=\"bp\">;</span> <span class=\"n\">dec_trivial</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 321408785,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673730321
    },
    {
        "content": "<p>I think this may cause several consequences for mathlib down the line: I think it's not unusual in mathlib to have a proof that can technically be done by some decidability instance but is very slow this way.</p>\n<p>The immediate consequence I am concerned for is <code>norm_num</code>.  In mathlib3 <code>norm_num</code> builds in <code>simp</code> calls.  But a major point of <code>norm_num</code> is to check more efficiently things that <em>shouldn't</em> be done by reducing to the definitions.  So I would think we <em>don't</em> want <code>norm_num</code> to check things by naive decidability instances.  <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you agree?</p>\n<p>Is there a flag to turn off the <code>decide</code> call in <code>simp</code>?  If so, seems like we should use that version of <code>simp</code> in <code>norm_num</code>.</p>",
        "id": 321409176,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673730639
    },
    {
        "content": "<p>There is such a flag! it's given by e.g. <code>simp (config := { decide := false }) ...</code>; we could set it in <code>norm_num</code> by sticking</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">ctx</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">ctx</span> <span class=\"k\">with</span> <span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">ctx.config</span> <span class=\"k\">with</span> <span class=\"n\">decide</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>right after the (mutable) declaration of <code>ctx</code> in <code>NormNum.Core.getSimpContext</code>.</p>\n<p>Whether we <em>should</em> do that, I can't speak to...</p>",
        "id": 321420263,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673740454
    },
    {
        "content": "<p>One possibility is having it off by default and using <code>norm_num!</code> to turn this flag back on.</p>\n<p>(Also, we probably wouldn't want to actually override it exactly like I did above...we'd want to see if it were present in any passed <code>simp</code> args first.)</p>",
        "id": 321420434,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673740609
    },
    {
        "content": "<p>I don't think we should turn off decidability support in <code>simp</code> in <code>norm_num</code>, because it's actually quite effective at increasing the domain of things that <code>norm_num</code> can prove. I don't think we should be apologetic about it in the test files either, a proof is a proof. If we want to make sure <code>norm_num</code> is using its extension we should fix the tests to do something where <code>simp</code> doesn't work, e.g. <code>2 * 3 = 6</code> on <code>Real</code> instead of <code>Nat</code>.</p>",
        "id": 321427736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673746437
    },
    {
        "content": "<p>Because <code>norm_num</code> has first dibs on the expression, it's not a problem if <code>simp</code> also knows how to prove it, you will get the <code>norm_num</code> proof if it exists</p>",
        "id": 321427806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673746492
    },
    {
        "content": "<p>Gah, I thought we turned this off in <a href=\"https://github.com/leanprover/lean4/pull/1888\">https://github.com/leanprover/lean4/pull/1888</a>, but apparently I only turned it off for <code>dsimp</code> in that PR!</p>",
        "id": 321462975,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673777411
    }
]