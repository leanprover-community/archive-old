[
    {
        "content": "<p>How difficult would it be to fix the following bugs in <code>mathport</code>?</p>\n<ul>\n<li><code>lemma _root_.something</code> looses <code>_root_</code>;</li>\n<li>at least sometimes, lemma names in <code>simp only [...]</code> are not translated;</li>\n<li>dot notation is often translated incorrectly.</li>\n</ul>",
        "id": 322940509,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674449998
    },
    {
        "content": "<ol>\n<li>relatively easy</li>\n<li>it depends on the reason why the names are not translated. I would not be surprised if this is quite hard to fix</li>\n<li>This requires additional information from lean 3, but it should not be impossible</li>\n</ol>",
        "id": 322940717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674450220
    },
    {
        "content": "<p>I'll post specific issues next time I meet (2) and/or (3)</p>",
        "id": 322941450,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674450880
    },
    {
        "content": "<p>In my most recent ports, I think (2) and (3) account for &gt;50% (maybe even &gt;75%) of the \"mechanical fixes\".<br>\nThe \"non-mechanical fixes\" are places where you really need to think because something changed between Lean 3 and Lean 4.</p>",
        "id": 322941663,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674451081
    },
    {
        "content": "<p>And nowadays it happens quite often that a file only needs mechanical fixes.</p>",
        "id": 322941724,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674451102
    },
    {
        "content": "<p>One more issue: in <a href=\"https://github.com/leanprover-community/mathlib/pull/1772\">#1772</a>, Lean treats <code>×ᶠ</code> as right-associative (though it's probably a Lean bug, not a mathport bug)</p>",
        "id": 322943431,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674452505
    },
    {
        "content": "<p>I had to add <code>( )</code> here and there.</p>",
        "id": 322943433,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674452511
    },
    {
        "content": "<p>(a bug or a feature I didn't know about)</p>",
        "id": 322943485,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674452527
    },
    {
        "content": "<p>mathport should not be getting parentheses wrong. It inserts parentheses only when necessary according to the lean 4 precedence of the operation</p>",
        "id": 322948742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674455862
    },
    {
        "content": "<p>can you point to a specific example of this?</p>",
        "id": 322948775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674455881
    },
    {
        "content": "<p>There's also the <code>(Quot.inductionOn foo) bar baz</code> issue, right?</p>",
        "id": 322948832,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674455899
    },
    {
        "content": "<p>that was fixed</p>",
        "id": 322948836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674455904
    },
    {
        "content": "<p>cool</p>",
        "id": 322948855,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674455914
    },
    {
        "content": "<p>that was also not strictly speaking an issue in incorrectly inserted parentheses, but an issue in the syntax itself that was generated which meant that the parentheses had to be inserted to distinguish it from the other (desired) interpretation</p>",
        "id": 322949069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674456008
    },
    {
        "content": "<p>i.e. the issue was more like a missing operator symbol than parentheses, the parentheses were just for disambiguation</p>",
        "id": 322949219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674456088
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you think you can fix mathlib4 so that we can use <code>x^s</code> notation for <code>Finset.product</code> instead of <code>×ᶠ</code>?</p>",
        "id": 322949425,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674456203
    },
    {
        "content": "<p>is that a new notation or something?</p>",
        "id": 322949464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674456224
    },
    {
        "content": "<p>mathlib3 uses the same notation for external product of sets and finsets.</p>",
        "id": 322949470,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674456225
    },
    {
        "content": "<p>But mathlib4 didn't like that, so now people are manually switching to a tmp new notation</p>",
        "id": 322949545,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674456246
    },
    {
        "content": "<p>do the two notations have different names in lean3?</p>",
        "id": 322949596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674456283
    },
    {
        "content": "<p>It was directly notation for <code>set.prod</code> and <code>finset.product</code>, I think.</p>",
        "id": 322949650,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674456322
    },
    {
        "content": "<p>I don't know if that answers your question</p>",
        "id": 322949667,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674456329
    },
    {
        "content": "<p>But there was no notation typeclass</p>",
        "id": 322949684,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674456339
    },
    {
        "content": "<p>I mean the <code>name :=</code> thing</p>",
        "id": 322949798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674456397
    },
    {
        "content": "<p>Ooh, you mean in Lean 4?</p>",
        "id": 322949838,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674456417
    },
    {
        "content": "<p>no</p>",
        "id": 322949841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674456420
    },
    {
        "content": "<p>the <code>name :=</code> thing we added to all the localized notations in lean 3</p>",
        "id": 322949904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674456458
    },
    {
        "content": "<p>if it's just two notation overloads hopefully they have different names</p>",
        "id": 322949988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674456487
    },
    {
        "content": "<p>Looks fine: <a href=\"https://github.com/leanprover-community/mathlib/blob/1f0096e6caa61e9c849ec2adbd227e960e9dff58/src/data/finset/prod.lean#L40\">https://github.com/leanprover-community/mathlib/blob/1f0096e6caa61e9c849ec2adbd227e960e9dff58/src/data/finset/prod.lean#L40</a></p>",
        "id": 322950295,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674456678
    },
    {
        "content": "<p>And here's the one for <code>set.prod</code>: <a href=\"https://github.com/leanprover-community/mathlib/blob/1f0096e6caa61e9c849ec2adbd227e960e9dff58/src/data/set/prod.lean#L39\">https://github.com/leanprover-community/mathlib/blob/1f0096e6caa61e9c849ec2adbd227e960e9dff58/src/data/set/prod.lean#L39</a></p>",
        "id": 322950338,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674456716
    },
    {
        "content": "<p>So yes, they have different names</p>",
        "id": 322950393,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674456725
    },
    {
        "content": "<p>Note that I made a bunch more product-like operations have this notation, but we haven't reached them yet.</p>",
        "id": 322954095,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674458877
    },
    {
        "content": "<p>It seems that the list is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">order</span><span class=\"bp\">/</span><span class=\"n\">upper_lower.lean</span><span class=\"o\">:</span><span class=\"kd\">infixr</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">upper_set.prod</span><span class=\"o\">)</span> <span class=\"bp\">`</span> <span class=\"bp\">×ˢ</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">82</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">order</span><span class=\"bp\">/</span><span class=\"n\">upper_lower.lean</span><span class=\"o\">:</span><span class=\"kd\">infixr</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">lower_set.prod</span><span class=\"o\">)</span> <span class=\"bp\">`</span> <span class=\"bp\">×ˢ</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">82</span> <span class=\"o\">:=</span> <span class=\"n\">lower_set.prod</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">set</span><span class=\"bp\">/</span><span class=\"n\">prod.lean</span><span class=\"o\">:</span><span class=\"kd\">infixr</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">set.prod</span><span class=\"o\">)</span> <span class=\"bp\">`</span> <span class=\"bp\">×ˢ</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">82</span> <span class=\"o\">:=</span> <span class=\"n\">set.prod</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">list</span><span class=\"bp\">/</span><span class=\"n\">defs.lean</span><span class=\"o\">:</span><span class=\"kd\">infixr</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">list.product</span><span class=\"o\">)</span> <span class=\"bp\">`</span> <span class=\"bp\">×ˢ</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">82</span> <span class=\"o\">:=</span> <span class=\"n\">list.product</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">multiset</span><span class=\"bp\">/</span><span class=\"n\">bind.lean</span><span class=\"o\">:</span><span class=\"kd\">infixr</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">multiset.product</span><span class=\"o\">)</span> <span class=\"bp\">`</span> <span class=\"bp\">×ˢ</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">82</span> <span class=\"o\">:=</span> <span class=\"n\">multiset.product</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">finset</span><span class=\"bp\">/</span><span class=\"n\">prod.lean</span><span class=\"o\">:</span><span class=\"kd\">infixr</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">finset.product</span><span class=\"o\">)</span> <span class=\"bp\">`</span> <span class=\"bp\">×ˢ</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">82</span> <span class=\"o\">:=</span> <span class=\"n\">finset.product</span>\n</code></pre></div>",
        "id": 322954916,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674459239
    },
    {
        "content": "<p>Apparently we didn't hit problems with <code>list.product</code> and <code>multiset.product</code>?</p>",
        "id": 322955026,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674459276
    },
    {
        "content": "<p>Oh that's unexpected</p>",
        "id": 322955385,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674459439
    },
    {
        "content": "<p>So, <code>×ᶠ</code> is defined as <code>infixr</code> notation for <code>finset.product</code>! Now I see why Lean doesn't use it as <code>infixl</code> for <code>Filter.prod</code>.</p>",
        "id": 322961170,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674462037
    },
    {
        "content": "<p>BTW, Lean was otherwise happy with duplicate notation.</p>",
        "id": 322961244,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674462078
    },
    {
        "content": "<p>It must be an oversight that the notation for <code>filter.prod</code> was not <code>infixr</code></p>",
        "id": 322962434,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674462600
    },
    {
        "content": "<p>It's \"infix\" in Lean 3.</p>",
        "id": 322962864,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674462736
    },
    {
        "content": "<p>infix = infixl in lean 3</p>",
        "id": 322974828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674466952
    },
    {
        "content": "<p>(in lean 4 <code>infix</code> is more like \"nonassociative\")</p>",
        "id": 322974873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674466969
    }
]