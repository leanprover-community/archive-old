[
    {
        "content": "<p>I'm not a computer scientist, so I don't know the precise reason for distinguishing <code>Coe</code>, <code>CoeHead</code>, <code>CoeTail</code>, etc. When using them mathematically, e.g. constructing a bundled homomorphism from a coercion map, one has to refer to the <code>coe</code> function itself. In mathlib3, you just say <code>coe</code>, but in mathlib4 it seems that you have to say <code>Coe.coe</code>, <code>CoeHead.coe</code>, <code>CoeTail.coe</code>, etc, depending on how the coercion was defined. From a design perspective, shouldn't the mathematician's sensibilities be protected from this distinction, i.e. a single <code>coe</code> should automatically refer to whichever <code>CoeXXX</code> was used in the definition?</p>",
        "id": 312407467,
        "sender_full_name": "Winston Yin",
        "timestamp": 1669506559
    },
    {
        "content": "<p>I don't think you should refer to <code>coe</code>, but the map that it is used for the coercion. With <code>FunLike</code> it has become more weird and so if you have a <code>FunLike</code> instance, then you have to refer to <code>FunLike.coe</code>.</p>",
        "id": 312407927,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1669507006
    },
    {
        "content": "<p>What about theorems that refer to <code>â†‘</code> generally, irrespective of how it's implemented? For example in this section, I had to explicitly call <code>Coe.coe</code>: <a href=\"https://github.com/leanprover-community/mathlib4/blob/4ceaeb25193e7d30b2c19230690fac7de911f00b/Mathlib/Algebra/Hom/Group.lean#L1538\">https://github.com/leanprover-community/mathlib4/blob/4ceaeb25193e7d30b2c19230690fac7de911f00b/Mathlib/Algebra/Hom/Group.lean#L1538</a></p>",
        "id": 312408930,
        "sender_full_name": "Winston Yin",
        "timestamp": 1669507897
    },
    {
        "content": "<p>don't quote me on it, but I think this is a bad class in Lean 4. I would expect that it is not necessary either. If you have something like an embedding of a subspace into the full space, then the coercion gets automatically replaced by the inclusion map and for that map the correct lemma should already exist in some other class.</p>",
        "id": 312411053,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1669509952
    },
    {
        "content": "<p>Again I might be wrong here, but it sounds very similar to this:<br>\n<a href=\"#narrow/stream/287929-mathlib4/topic/mathlib4.23557/near/308688698\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/mathlib4.23557/near/308688698</a></p>",
        "id": 312411236,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1669510142
    },
    {
        "content": "<p>That makes sense. Let me write a comment in the PR</p>",
        "id": 312412931,
        "sender_full_name": "Winston Yin",
        "timestamp": 1669511631
    },
    {
        "content": "<p>And I'm going to quote your comment <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 312413026,
        "sender_full_name": "Winston Yin",
        "timestamp": 1669511681
    },
    {
        "content": "<p>That file shouldn't be ported for now.  We might need to revert the whole coeismulhom etc. API.</p>",
        "id": 312423841,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1669523434
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/113488-general/topic/Please.20stop.20adding.20generalized.20API.20around.20coercions/near/310898388\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Please.20stop.20adding.20generalized.20API.20around.20coercions/near/310898388</a></p>",
        "id": 312423869,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1669523471
    },
    {
        "content": "<p>If we're going to do that, can we make it happen ASAP?</p>",
        "id": 312423873,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669523489
    },
    {
        "content": "<p>We're going to start hitting it porting everywhere.</p>",
        "id": 312423884,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669523524
    },
    {
        "content": "<p>Yes.. we didn't decide on anything in n that thread. I think nobody wants to be the one who pulls the trigger, a revert is a pretty harsh reaction after all.  But if we're actively hitting it during porting now, then we have no other choice.</p>",
        "id": 312424060,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1669523748
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416472\">@Winston Yin</span> if you search for coetail coehead etc. On zulip, there's some threads with info. E.g. <a href=\"#narrow/stream/270676-lean4/topic/Gory.20details.20of.20.60coe.60/near/311183132\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Gory.20details.20of.20.60coe.60/near/311183132</a></p>",
        "id": 312424115,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1669523787
    },
    {
        "content": "<p>Yes, let's revert.</p>",
        "id": 312424357,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669524076
    },
    {
        "content": "<p>It's not a clean revert, of course...</p>",
        "id": 312424669,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669524443
    },
    {
        "content": "<p>A lot of the conflicts are just notation.</p>",
        "id": 312424694,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669524476
    },
    {
        "content": "<p>Okay, <a href=\"https://github.com/leanprover-community/mathlib/pull/17733\">#17733</a> is a fairly reckless attempt at reverting. If it fails we'll have to read the conflict diffs a bit more carefully. :-)</p>",
        "id": 312424993,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669524700
    },
    {
        "content": "<p>Thanks for starting it. I'll try to have a look when I wake up.</p>",
        "id": 312425155,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669524871
    }
]