[
    {
        "content": "<p>During porting Data.List.ModEq, <a href=\"https://github.com/leanprover-community/mathlib4/pull/1566\">mathlib4#1566</a>, I was trying to rewrite something that had worked in mathlib, but the rw doesn't work anymore for reasons that I don't understand.<br>\nHere's the problem:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/ff4cf7bc6e1ed3387ea948d20d4c66333c64e892/Mathlib/Data/List/ModEq.lean#L42-L44\">https://github.com/leanprover-community/mathlib4/blob/ff4cf7bc6e1ed3387ea948d20d4c66333c64e892/Mathlib/Data/List/ModEq.lean#L42-L44</a><br>\nat that time <code>this</code> is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">rotate</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">rotate</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">])</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>and the goal is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">get</span> <span class=\"o\">(</span><span class=\"n\">rotate</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">rotate</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)))</span> <span class=\"o\">}</span> <span class=\"bp\">=</span>\n  <span class=\"n\">get</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">),</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>When clicking on <code>rotate (a :: l) (Nat.succ n) </code> in both parts, I get <code>@rotate α (a :: l) (Nat.succ n) : List α</code>, so the seem to be of the same type.<br>\nHowever the <code>rw</code> fails with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">motive</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">type</span> <span class=\"n\">correct</span>\n</code></pre></div>\n<p>What is going on? How to fix these kind of problems (that occur also in other parts of the file)</p>",
        "id": 321312719,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1673683416
    },
    {
        "content": "<p>Have you tried using <code>simp only</code> instead?</p>",
        "id": 321315959,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673685399
    },
    {
        "content": "<p>yes, that didn't help</p>",
        "id": 321324393,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1673689881
    },
    {
        "content": "<p>And it worked in lean 3?</p>",
        "id": 321341949,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673696742
    },
    {
        "content": "<p>Yeah this is normal <code>rw</code> behavior; what was the Lean 3 version?</p>",
        "id": 321347101,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673698582
    },
    {
        "content": "<p>I’ve had the same issues in some open PRs. My hypothesis is Lean now unfolds to structure fields or behind functions rather than seeing this is a higher level concept and won’t rewrite or simplify.</p>",
        "id": 321382918,
        "sender_full_name": "Arien Malec",
        "timestamp": 1673714430
    },
    {
        "content": "<p>I would check what the actual proof state (i.e. goal &amp; <code>this</code> hypothesis) is at that point in the Lean 3 proof</p>",
        "id": 321385540,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673715646
    },
    {
        "content": "<p>It seems plausible that something has gone differently already</p>",
        "id": 321385572,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673715661
    },
    {
        "content": "<p>Ah, I didn't read correctly -- my separate issue is that <code>rw</code>/<code>simp</code> just does nothing.</p>",
        "id": 321390183,
        "sender_full_name": "Arien Malec",
        "timestamp": 1673718164
    }
]