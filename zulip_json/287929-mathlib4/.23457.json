[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, could I ask for help on <a href=\"https://github.com/leanprover-community/mathlib4/pull/457\">https://github.com/leanprover-community/mathlib4/pull/457</a>?</p>\n<p>Some lemmas proved in <code>Tactic.Ring</code> are failing, in places where the simplifier should apply <code>zero_add</code> or <code>add_zero</code>, but doesn't. It seems that <code>rw</code> and <code>exact</code> work, however.</p>\n<p>If you look for any instance of <code>FIXME</code> in <code>Mathlib.Tactic.Ring</code> you'll see the problem <a href=\"https://github.com/leanprover-community/mathlib4/pull/457/files#diff-193b5d7a518b30d0db3def80a4d425ed9791d8a5974bbc35c41ce8203f23f568R134\">(example)</a>. The same problem occurs in <code>Mathlib.Data.Uint</code>.</p>\n<p>I suspect it may be something to do with competing instances of <code>ofNat Î± 0</code>.</p>\n<p>However I'm not sure if I'm meant to be eradicating these (seems problematic?), or if it's a problem that the simplifier can't cope with these while <code>rw</code> and <code>exact</code> can.</p>",
        "id": 303177778,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665356151
    },
    {
        "content": "<p>I built your branch and nothing failed</p>",
        "id": 303177946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665356361
    },
    {
        "content": "<p>Sorry, I've just added the <code>rw</code>s that complete the proofs.</p>",
        "id": 303178307,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665356650
    },
    {
        "content": "<p>So you need to look for the <code>FIXME</code>s in <code>Tactic.Ring</code></p>",
        "id": 303178312,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665356666
    },
    {
        "content": "<p>each of those is followed by a <code>rw</code> that should have already been handled by the preceeding <code>simp</code>.</p>",
        "id": 303178318,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665356685
    },
    {
        "content": "<p><code>./././Mathlib/Algebra/GroupWithZero/Defs.lean:51:85: error: unknown identifier 'A'</code></p>",
        "id": 303178404,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1665356783
    },
    {
        "content": "<p>One thing that seems odd is that if I <code>#print add_zero</code> in <code>Data.UInt</code> I can't go-to-def on it and it prints as <code>a + OfNat.ofNat 0 = a</code> instead of <code>a + 0 = a</code>. Clicking on it in the infoview reveals that it's actually <code>ofNat (ofNat (raw_lit 0))</code> there</p>",
        "id": 303178427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665356858
    },
    {
        "content": "<p>I don't know where this <code>add_zero</code> function is coming from in the first place. The <code>add_zero</code> in Algebra.Group.Defs isn't in the root namespace</p>",
        "id": 303178489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665356910
    },
    {
        "content": "<p>could it be a bug in to_additive?</p>",
        "id": 303178498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665356940
    },
    {
        "content": "<p>I see, it is indeed <code>to_additive</code> creating the definition. We should fix the definition links for that</p>",
        "id": 303178515,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665356994
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.23457/near/303178404\">said</a>:</p>\n<blockquote>\n<p><code>./././Mathlib/Algebra/GroupWithZero/Defs.lean:51:85: error: unknown identifier 'A'</code></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"325367\">@Mauricio Collares</span>, oops, fixed.</p>",
        "id": 303178598,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665357104
    },
    {
        "content": "<p>Fixing the definition links would involve adding a call to <code>addDeclarationRanges</code> right after the <code>addAndCompile</code> in <code>to_additive</code>, right?</p>",
        "id": 303180375,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665359318
    },
    {
        "content": "<p>Should it jump to the multiplicative definition itself, or to the <code>to_additive</code> attribute?</p>",
        "id": 303180398,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665359356
    },
    {
        "content": "<p>I think it should jump to the <code>to_additive</code> attribute, or the identifier which is provided</p>",
        "id": 303180582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665359614
    },
    {
        "content": "<p>similar to how <code>instance</code> works</p>",
        "id": 303180593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665359633
    },
    {
        "content": "<p>ideally hover on the <code>to_additive</code> should also show the type of the constant similar to hovering on the <code>foo</code> in <code>def foo := ...</code></p>",
        "id": 303180671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665359693
    },
    {
        "content": "<p>the <code>alias</code> command also does something similar, that can be an example</p>",
        "id": 303180708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665359754
    },
    {
        "content": "<p>the two important parts are <code>addDeclarationRanges</code> for go to definition and <code>addTermInfo'</code> for hovers</p>",
        "id": 303180791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665359834
    },
    {
        "content": "<p>By the time we're generating the new declaration in <code>to_additive</code>, we've long ago left behind the <code>Syntax</code> world, so it's not obvious what to call <code>addDeclarationRanges</code> with.</p>",
        "id": 303180809,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665359875
    },
    {
        "content": "<p>Is it better to smuggle the relevant <code>Syntax</code> in, or is there a way to look it back up?</p>",
        "id": 303180880,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665359911
    },
    {
        "content": "<p>smuggle it in</p>",
        "id": 303180900,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665359938
    },
    {
        "content": "<p>Okay, I'll have a go at this.</p>",
        "id": 303180914,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665359971
    },
    {
        "content": "<p><code>ValueType</code> should have a <code>ref</code> field which is either <code>to_additive</code>, or the <code>foo</code> in <code>to_additive foo</code></p>",
        "id": 303180932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665359999
    },
    {
        "content": "<p>well, that or it returns a tuple to be passed on to <code>proceedFields</code></p>",
        "id": 303181071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665360120
    },
    {
        "content": "<p>As you've seen and commented on, the fix to <code>to_additive</code> is in <a href=\"https://github.com/leanprover-community/mathlib4/pull/461\">https://github.com/leanprover-community/mathlib4/pull/461</a>.</p>",
        "id": 303189715,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665370447
    },
    {
        "content": "<p>Any further ideas about my <code>add_zero</code> problem?</p>",
        "id": 303189718,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665370454
    },
    {
        "content": "<p>it  seems to be a bug in <code>to_additive</code>. I assume <a href=\"https://github.com/leanprover-community/mathlib4/pull/461\">mathlib4#461</a> is only about the hover stuff and not the ofNat issue?</p>",
        "id": 303190106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665370984
    },
    {
        "content": "<p><a href=\"https://github.com/hargoniX/mathlib4/blob/9d685a9e955b752d97e4e1bc1671a9d57c581c3b/Mathlib/Tactic/ToAdditive.lean#L165\">This line</a> is wrong:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">lit</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">natVal</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mkNatLit</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>It is replacing a raw nat literal with a regular nat literal. It should either use a raw nat literal on the right i.e. <code>mkRawNatLit 0</code> or it should be matching an <code>ofNat</code> application</p>",
        "id": 303190233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665371157
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span></p>",
        "id": 303190289,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665371213
    },
    {
        "content": "<p>Do we need to do both? i.e. match and replace raw nat literals, and match and replace <code>ofNat</code> applications.</p>",
        "id": 303190392,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665371366
    },
    {
        "content": "<p>(Just changing this to use <code>mkRawNatLit</code> does not solve the downstream problem.)</p>",
        "id": 303190566,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665371579
    },
    {
        "content": "<p>you might be able to get away with just changing the instance from the one providing a 1 in groups to the one providing a 0 in addgroups</p>",
        "id": 303190668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665371729
    },
    {
        "content": "<p>it seems to work for me if I use <code>simp [add_def, zero_def, add_zero]</code> now</p>",
        "id": 303190771,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665371853
    },
    {
        "content": "<p>Oh, crap!</p>",
        "id": 303190829,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665371900
    },
    {
        "content": "<p>Is this as simple as some <code>@[simp]</code> annotations going missing?</p>",
        "id": 303190838,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665371911
    },
    {
        "content": "<p>there is some simp-copying code but it looks approximate</p>",
        "id": 303190868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665371946
    },
    {
        "content": "<p>It seems to be that both fixes are required: <code>mkRawNatLit</code>, and then fix up the <code>@[simp]</code>. I go off and try to find what's happened to the simp attribute. Thanks! :-)</p>",
        "id": 303191075,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665372166
    },
    {
        "content": "<p>It seems to be an application time issue: <code>@[simp]</code> runs after <code>@[to_additive]</code> because it has a later application time setting</p>",
        "id": 303191212,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665372359
    },
    {
        "content": "<p>if you add <code>applicationTime := .afterCompilation</code> to the <code>to_additive</code> attribute declaration (and write <code>@[simp, to_additive]</code> instead of <code>@[to_additive, simp]</code>) then it does pick up that the original is a simp lemma and copies the attribute</p>",
        "id": 303191303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665372432
    },
    {
        "content": "<p>All looks good now. I'll roll those two changes to to_additive into 461.</p>",
        "id": 303191611,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665372667
    }
]