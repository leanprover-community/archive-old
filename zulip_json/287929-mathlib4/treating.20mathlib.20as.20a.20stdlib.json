[
    {
        "content": "<blockquote>\n<p>I feel like this is directly opposed to the stated goal of making Lean 4 a general purpose programming language. I highly doubt anyone is going to think of it that way if the \"stdlib\" of the library is called \"mathlib\" and the vast majority of the discussion on the forums is from people deep in mathematics. </p>\n</blockquote>\n<p>I don't think it's a bad thing that lots of mathematicians are involved. It's sad that there aren't more computer scientists, but there are at least a dozen people who are relatively active here and quite good at writing metaprogramming tools for mathlib or otherwise. But I don't think that the number of people involved has anything to do with the stated focus of the (mathlib) project. It's certainly not anything I have any control over, so I don't worry about it so much. As you say, lean 4 is more focused on being a general purpose programming language, but it's already quite clear that it will not have a large built in standard library, there just isn't the manpower, so having a good std++ library is more important than ever.</p>",
        "id": 239317769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621368518
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.60quote.60.2F.60toExpr.60.20id.2Fnon-id.20solution.20.5BRFC.5D/near/239317769\">said</a>:</p>\n<blockquote>\n<p>I don't think it's a bad thing that lots of mathematicians are involved.</p>\n</blockquote>\n<p>Sorry, It wasn't my intent to criticize that. As I said, I quite enjoy many of the deep math discussions here (and by \"on the forums\" I meant here on Zullip). I have no qualms with the people involved. I just think it may help to also have computer science targeted std++ as well. I am not saying this should be part of the Lean core, but that there should be some sore of a separate package from mathlib that incorporates the more general additions and targets a more general audience.</p>",
        "id": 239318245,
        "sender_full_name": "Mac",
        "timestamp": 1621368736
    },
    {
        "content": "<blockquote>\n<p>I just think it may help to also have computer science targeted std++ as well.</p>\n</blockquote>\n<p>I don't know how to put this any more plainly: <em>mathlib is a computer science targeted std++ library</em>. It is other things too.</p>",
        "id": 239318338,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621368778
    },
    {
        "content": "<p>yeah the name's weird, please look past it</p>",
        "id": 239318449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621368830
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.60quote.60.2F.60toExpr.60.20id.2Fnon-id.20solution.20.5BRFC.5D/near/239318449\">said</a>:</p>\n<blockquote>\n<p>yeah the name's weird, please look past it</p>\n</blockquote>\n<p>Is it fair to state here the one of the most important aspects of marketing is branding? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 239318591,
        "sender_full_name": "Mac",
        "timestamp": 1621368883
    },
    {
        "content": "<p>Again, I will point out that the name itself was chosen by leo, who isn't really involved with the project and I think misunderstands the focus to some extent</p>",
        "id": 239318690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621368927
    },
    {
        "content": "<p>you aren't the only one who thinks mathlib is only about math</p>",
        "id": 239318724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621368949
    },
    {
        "content": "<p>But that's not a hill I want to die on. I'm not a PR guy</p>",
        "id": 239318876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621369014
    },
    {
        "content": "<p>The point I am trying to make is that while some of the content of mathlib is, in fact, for a general audience, the branding and the community around it would give most people a different first impression which may cause <strong><em>them</em></strong> (newbies) to discount it and thus, possibly, since it is touted as the basic library of lean (ala old boost in C++), Lean as a whole.</p>",
        "id": 239318926,
        "sender_full_name": "Mac",
        "timestamp": 1621369045
    },
    {
        "content": "<p>So in that case we should just be clear and upfront in our messaging that it's about more than that</p>",
        "id": 239318969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621369069
    },
    {
        "content": "<p>boost is a pretty good analogue</p>",
        "id": 239319075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621369103
    },
    {
        "content": "<p>In any case, <em>I</em> have messaged to <em>you</em> about this fact, so unless you have some PR suggestions for the leanprover-community webpage or other places about it I think we can drop the topic</p>",
        "id": 239319333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621369211
    },
    {
        "content": "<p>I also think the mathematically oriented programming community has a unfortunate love for the concept of monorepos (ex. numpy) that is not shared by (and is, in fact, often diametrically opposed to the view of) the computer science oriented programming community.</p>",
        "id": 239319487,
        "sender_full_name": "Mac",
        "timestamp": 1621369280
    },
    {
        "content": "<p>Admittedly, the web dev community seems split between the two (both monorepos and tiny one feature repos are popular there).</p>",
        "id": 239319641,
        "sender_full_name": "Mac",
        "timestamp": 1621369350
    },
    {
        "content": "<p>Maybe take it to <a class=\"stream\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4\">#mathlib4</a> , that's a whole long discussion we don't need to have here</p>",
        "id": 239319662,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621369362
    },
    {
        "content": "<p>true, this has gotten rather off topic XD</p>",
        "id": 239319746,
        "sender_full_name": "Mac",
        "timestamp": 1621369398
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.60quote.60.2F.60toExpr.60.20id.2Fnon-id.20solution.20.5BRFC.5D/near/239318724\">said</a>:</p>\n<blockquote>\n<p>you aren't the only one who thinks mathlib is only about math</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.60quote.60.2F.60toExpr.60.20id.2Fnon-id.20solution.20.5BRFC.5D/near/239318690\">said</a>:</p>\n<blockquote>\n<p>Again, I will point out that the name itself was chosen by leo, who isn't really involved with the project and I think misunderstands the focus to some extent</p>\n</blockquote>\n<p>I one last word on this topic though. I do think mathlib's PR problem is somewhat crystallized by the fact that the primary developer of <strong>Lean itself</strong> thinks it is math focused. With that, I rest my case for now.</p>",
        "id": 239320235,
        "sender_full_name": "Mac",
        "timestamp": 1621369605
    },
    {
        "content": "<p>yes, it's a whole bunch of self fulfilling prophecies. Not much to do about it at this point</p>",
        "id": 239320510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621369726
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.60quote.60.2F.60toExpr.60.20id.2Fnon-id.20solution.20.5BRFC.5D/near/239320510\">said</a>:</p>\n<blockquote>\n<p>Not much to do about it at this point</p>\n</blockquote>\n<p>Really? I would think the advent of the Lean 4 is the perfect time to restructure, refocus, and rebrand. I would suggest keeping the math parts in mathlib and the other parts in some other library <code>stdlib/corelib/metalib/boost</code>  or whatever. But, that is just my opinion.</p>\n<p>Also how did you migrate part of thread to another stream? I feel like the tail end of this discussion should probably be in <a class=\"stream\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4\">#mathlib4</a> .</p>",
        "id": 239321464,
        "sender_full_name": "Mac",
        "timestamp": 1621370116
    },
    {
        "content": "<p>admin powers. point me to what and where to move</p>",
        "id": 239321735,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621370224
    },
    {
        "content": "<p>I would say from <a href=\"#narrow/stream/270676-lean4/topic/.60quote.60.2F.60toExpr.60.20id.2Fnon-id.20solution.20.5BRFC.5D/near/239317769\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.60quote.60.2F.60toExpr.60.20id.2Fnon-id.20solution.20.5BRFC.5D/near/239317769</a> the discussion is definitely mathlib-focused. Though it really needs the second half your comment here: <a href=\"#narrow/stream/270676-lean4/topic/.60quote.60.2F.60toExpr.60.20id.2Fnon-id.20solution.20.5BRFC.5D/near/239313689\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.60quote.60.2F.60toExpr.60.20id.2Fnon-id.20solution.20.5BRFC.5D/near/239313689</a> for context. It could also use the first half of my comment here: <a href=\"#narrow/stream/270676-lean4/topic/.60quote.60.2F.60toExpr.60.20id.2Fnon-id.20solution.20.5BRFC.5D/near/239315530\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.60quote.60.2F.60toExpr.60.20id.2Fnon-id.20solution.20.5BRFC.5D/near/239315530</a></p>",
        "id": 239321994,
        "sender_full_name": "Mac",
        "timestamp": 1621370329
    },
    {
        "content": "<p>I don't really know what the topic is :P</p>",
        "id": 239322096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621370369
    },
    {
        "content": "<p>\"treating mathlib as a stdlib\" or something thereabouts?</p>",
        "id": 239322219,
        "sender_full_name": "Mac",
        "timestamp": 1621370408
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/.02klzzwxh.3A0000.03.2F.02klzzwxh.3A0001.03.20id.2Fnon-id.20solution.20.5BRFC.5D\">#lean4 &gt; <code>quote</code>/<code>toExpr</code> id/non-id solution [RFC]</a> by <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span></p>",
        "id": 239322340,
        "sender_full_name": "Notification Bot",
        "timestamp": 1621370460
    },
    {
        "content": "<p>I can't move half a comment so I'll just leave it</p>",
        "id": 239322552,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621370540
    },
    {
        "content": "<p>makes sense</p>",
        "id": 239322722,
        "sender_full_name": "Mac",
        "timestamp": 1621370625
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239319333\">said</a>:</p>\n<blockquote>\n<p>In any case, <em>I</em> have messaged to <em>you</em> about this fact, so unless you have some PR suggestions for the leanprover-community webpage or other places about it I think we can drop the topic</p>\n</blockquote>\n<p>I just noticed this comment (I kind of focused on the back and forth and missed it) what do you mean you messaged me? Do you mean a PM, because I haven't got one.</p>",
        "id": 239323022,
        "sender_full_name": "Mac",
        "timestamp": 1621370757
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239321464\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.60quote.60.2F.60toExpr.60.20id.2Fnon-id.20solution.20.5BRFC.5D/near/239320510\">said</a>:</p>\n<blockquote>\n<p>Not much to do about it at this point</p>\n</blockquote>\n<p>Really? I would think the advent of the Lean 4 is the perfect time to restructure, refocus, and rebrand. I would suggest keeping the math parts in mathlib and the other parts in some other library <code>stdlib/corelib/metalib/boost</code>  or whatever.</p>\n</blockquote>\n<p>This also touches on the point about why mathlib is a monorepo. The basic issue is that maintenance requires coordinating across several things that might look like separate projects to end users, and we know from experience that this is significantly harder when multiple repos are in use.</p>",
        "id": 239323037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621370762
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239323022\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239319333\">said</a>:</p>\n<blockquote>\n<p>In any case, <em>I</em> have messaged to <em>you</em> about this fact, so unless you have some PR suggestions for the leanprover-community webpage or other places about it I think we can drop the topic</p>\n</blockquote>\n<p>I just noticed this comment (I kind of focused on the back and forth and missed it) what do you mean you messaged me? Do you mean a PM, because I haven't got one.</p>\n</blockquote>\n<p>I mean that I have explained the situation to you in comments here so that you are no longer confused/mislead like the newbies you referenced. If you want to make life better for them too then this conversation or something similar needs to exist in relevant documentation, but if it's just us talking then there is no reason to continue to play the newbie role.</p>",
        "id": 239323479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621370917
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239323037\">said</a>:</p>\n<blockquote>\n<p>This also touches on the point about why mathlib is a monorepo. The basic issue is that maintenance requires coordinating across several things that might look like separate projects to end users, and we know from experience that this is significantly harder when multiple repos are in use.</p>\n</blockquote>\n<p>I certainly can understand that and sympathize heavily (I tend to through everything  in one repo/package myself when developing on large projects). However, unfortunately, what is convenient for development is often not convenient for the end-user.  When it comes to Git repo itself, some of this can be solved through submodules. For the Lean package though, a do think a split is necessary. But as I am not the one with either the control or the maintenance burden, this is only a recommendation, but one I would suggest heavily considering.</p>",
        "id": 239323911,
        "sender_full_name": "Mac",
        "timestamp": 1621371099
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239323479\">said</a>:</p>\n<blockquote>\n<p>then there is no reason to continue to play the newbie role.</p>\n</blockquote>\n<p>Ah. Makes sense.</p>",
        "id": 239324220,
        "sender_full_name": "Mac",
        "timestamp": 1621371223
    },
    {
        "content": "<p>The packaging situation in lean 4 still needs time to mature. I don't think that we know what that will look like ultimately, and it has come up a few times now that mathlib certainly needs the ability to be packaged in a more fine grained way. But that need not entail that the project itself be atomized, and for maintenance reasons as I mentioned this is something I would certainly like to avoid.</p>",
        "id": 239324369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621371267
    },
    {
        "content": "<p>Maybe we could try having a zillion separately compiled mini-projects in the mathlib4 repo, but right now I think that would mean a suboptimal module structure and file organization, and it might also be more expensive overall, although this requires testing to be sure.</p>",
        "id": 239324834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621371476
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239324369\">said</a>:</p>\n<blockquote>\n<p>The packaging situation in lean 4 still needs time to mature. I don't think that we know what that will look like ultimately, and it has come up a few times now that mathlib certainly needs the ability to be packaged in a more fine grained way. But that need not entail that the project itself be atomized, and for maintenance reasons as I mentioned this is something I would certainly like to avoid.</p>\n</blockquote>\n<p>I understand and that sounds fine. My only additional suggestion would be to split up the subpackages into Git submodules, so that while all the work can be done, on the developer side, in a single mathlib monorepo, consumers can encounter it (and depend on it) through different lenses.</p>\n<p>This may already be compatible with <code>leanpkg</code>.  A directory structure like so might work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">mathlib4</span><span class=\"bp\">/</span>\n  <span class=\"bp\">.</span><span class=\"n\">git</span>\n  <span class=\"n\">stdlib4</span><span class=\"bp\">\\</span>\n   <span class=\"bp\">.</span><span class=\"n\">git</span>\n    <span class=\"n\">Stdlib</span><span class=\"bp\">\\</span>\n      <span class=\"bp\">&lt;</span><span class=\"n\">sources</span><span class=\"bp\">&gt;</span>\n    <span class=\"n\">Stdlib.lean</span>\n    <span class=\"n\">leanpkg.toml</span>\n  <span class=\"n\">Mathlib</span><span class=\"bp\">\\</span>\n     <span class=\"bp\">&lt;</span><span class=\"n\">sources</span><span class=\"bp\">&gt;</span>\n  <span class=\"n\">Mathlib.lean</span>\n  <span class=\"n\">leanpkg.toml</span>\n</code></pre></div>\n<p>If I am not mistaken, <code>Stdlib</code> can be a submodule and the top-level <code>leanpkg.toml</code> can depend on it with <code>local</code>. It can then be used in mathlib with <code>Stdlib.*</code> and consumers can depend on either <code>mathlib</code> as a whole (through its collective git repo) or <code>stdlib</code> only (through its own git repo). This might also resolve some of the compile boundaries that where discussed earlier (though not all of them).</p>",
        "id": 239325873,
        "sender_full_name": "Mac",
        "timestamp": 1621371871
    },
    {
        "content": "<blockquote>\n<p>I understand and that sounds fine. My only additional suggestion would be to split up the subpackages into Git submodules, so that while all the work can be done, on the developer side in a single mathlib repo, consumers can encounter it (and depend on it) through different lenses.</p>\n</blockquote>\n<p>Submodules are literally different repos though. They go through separate PR processes and everything</p>",
        "id": 239325994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621371936
    },
    {
        "content": "<p>That directory structure looks very confusing, you have two <code>Mathlib/Mathlib/</code> directories, and what is in <code>Mathlib/Stdlib/Stdlib/</code>?</p>",
        "id": 239326211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621372047
    },
    {
        "content": "<p>True, though that is somewhat of the goal? Though I can see how PRs for multiple repos could get annoying. I doubt you would need that many different repos though.</p>",
        "id": 239326257,
        "sender_full_name": "Mac",
        "timestamp": 1621372073
    },
    {
        "content": "<p>the \"from experience\" I mentioned earlier is referring to leanprover-community/lean and leanprover-community/mathlib</p>",
        "id": 239326381,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621372108
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239326211\">said</a>:</p>\n<blockquote>\n<p>That directory structure looks very confusing, you have two <code>Mathlib/Mathlib/</code> directories, and what is in <code>Mathlib/Stdlib/Stdlib/</code>?</p>\n</blockquote>\n<p>That is how <code>leanpkg</code> works, yes? You have the out repo directory and then leanpkg demands the sources go in a directory with the same name as the package hence <code>Mathlib/Mathlib</code>. Or maybe I missed something.</p>",
        "id": 239326451,
        "sender_full_name": "Mac",
        "timestamp": 1621372158
    },
    {
        "content": "<p>I don't know any filesystem that lets you have two directories with the same name in the same directory</p>",
        "id": 239326493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621372187
    },
    {
        "content": "<p>That's how is currently structured on the repo: <a href=\"https://github.com/leanprover-community/mathlib4\">https://github.com/leanprover-community/mathlib4</a></p>",
        "id": 239326495,
        "sender_full_name": "Mac",
        "timestamp": 1621372191
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239326493\">said</a>:</p>\n<blockquote>\n<p>I don't know any filesystem that lets you have two directories with the same name in the same directory</p>\n</blockquote>\n<p>Oops! That second <code>Mathlib\\</code> was supposed to be <code>Mathlib.lean</code>. Fixed it.</p>",
        "id": 239326623,
        "sender_full_name": "Mac",
        "timestamp": 1621372247
    },
    {
        "content": "<p>If mathlib could compile on multiple versions of lean it wouldn't be as bad, but lean 3 at least did not make this easy at all, so the upgrades have to proceed in lock step and that is much easier when everything is in one repo and you can simultaneously change multiple projects in one PR.</p>",
        "id": 239326638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621372257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239326638\">said</a>:</p>\n<blockquote>\n<p>If mathlib could compile on multiple versions of lean it wouldn't be as bad</p>\n</blockquote>\n<p>I don't know what you mean here / what you are getting at.</p>",
        "id": 239326830,
        "sender_full_name": "Mac",
        "timestamp": 1621372373
    },
    {
        "content": "<p>Mathlib generally only compiles on one version of lean</p>",
        "id": 239326890,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621372405
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239319487\">said</a>:</p>\n<blockquote>\n<p>I also think the mathematically oriented programming community has a unfortunate love for the concept of monorepos (ex. numpy) that is not shared by (and is, in fact, often diametrically opposed to the view of) the computer science oriented programming community.</p>\n</blockquote>\n<p>Some comments with my numpy maintainer hat on: I wouldn't consider it a mono-repo, but numpy is admittedly large. Some things worth noting about it:</p>\n<ul>\n<li>It was deemed hard to manage as part of the Python standard library (presumably for exactly the same reason as mathlib is separate from lean 3), even though many language features were introduced specifically for numpy-like usage</li>\n<li>From what I remember, it actually used to be part of scipy, and was split out aeons ago, long before I earned my hat.</li>\n<li>Now that the repos are separate, scipy now lags four releases (around 2 years!) behind numpy. At this point cross-project refactors are almost impossible.</li>\n<li>Numpy has accumulated a handful of submodules (<code>np.lib.rec_functions</code>, <code>np.char</code>, <code>np.matrixlib</code>) which are somewhere between hacks and a bad idea, and definitely would have been better as a standalone package; but it's decades too late to remove them now without breaking old research code.</li>\n</ul>",
        "id": 239327032,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621372432
    },
    {
        "content": "<p>because it's very difficult to polyglot over the existence of a definition in lean core, say</p>",
        "id": 239327040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621372433
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239326890\">said</a>:</p>\n<blockquote>\n<p>Mathlib generally only compiles on one version of lean</p>\n</blockquote>\n<p>Yes, okay. What does that have to do with anything?</p>",
        "id": 239327374,
        "sender_full_name": "Mac",
        "timestamp": 1621372553
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239327032\">said</a>:</p>\n<blockquote>\n<ul>\n<li>Numpy has accumulated a handful of submodules (<code>np.lib.rec_functions</code>, <code>np.char</code>, <code>np.matrixlib</code>) which are somewhere between hacks and a bad idea, and definitely would have been better as a standalone package; but it's decades too late to remove them now without breaking old research code.</li>\n</ul>\n</blockquote>\n<p>I would argue that this  largely supports my point. Parts of mathlib that are clearly separate from doing math (though doing math may rely on them) should be in separate packages.</p>",
        "id": 239327553,
        "sender_full_name": "Mac",
        "timestamp": 1621372633
    },
    {
        "content": "<p>If the projects weren't so tightly coupled making a PR to the upstream and downstream libraries separately wouldn't be as much of a pain</p>",
        "id": 239327588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621372654
    },
    {
        "content": "<p>But given that they are, it makes sense to retain the ability to change them simultaneously</p>",
        "id": 239327745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621372727
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239327588\">said</a>:</p>\n<blockquote>\n<p>If the projects weren't so tightly coupled making a PR to the upstream and downstream libraries separately wouldn't be as much of a pain</p>\n</blockquote>\n<p>I am confused though, when using submodules the downstream library doesn't have to reflect the public upstream library. You could do a PR to the mathlib repo that updates mathlib and its fork of stdlib. And then make a separate PR from that fork that updates stdlib (after the mathlib one is merged).</p>",
        "id": 239327844,
        "sender_full_name": "Mac",
        "timestamp": 1621372795
    },
    {
        "content": "<p>Workflow:<br>\nUpdate my fork of mathlib w/ forked stdlib -&gt; push it -&gt; make PR to mathlib w/ forked -&gt; merged -&gt; make PR from forked stdlib to main stdlib -&gt; merged.</p>",
        "id": 239328184,
        "sender_full_name": "Mac",
        "timestamp": 1621372926
    },
    {
        "content": "<p>Yes, solutions exist. They are higher friction for contributors.</p>",
        "id": 239328192,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621372932
    },
    {
        "content": "<p>We could do that, but I think that right now getting a usable project structure is more important than solving the packaging situation for end users because there are still many open questions there</p>",
        "id": 239328306,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621373006
    },
    {
        "content": "<p>How? it is the same amount of friction as exist currently:<br>\nmathlib (w/ forked stdlib) -&gt; push it -&gt; make PR to mathlib (w/ forked stdlib)</p>\n<p>The maintainers of mathlib could periodically make PRs to stdlib and not burden the contributors with that.</p>",
        "id": 239328309,
        "sender_full_name": "Mac",
        "timestamp": 1621373008
    },
    {
        "content": "<p>Just as the Lean core does with updated stage0. The developers do that periodically after incorporating many changes, it is not a burden of the contributor.</p>",
        "id": 239328334,
        "sender_full_name": "Mac",
        "timestamp": 1621373028
    },
    {
        "content": "<p>The lean devs will be the first ones to say that stage0 is a huge pain and makes external contributions delicate</p>",
        "id": 239328449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621373082
    },
    {
        "content": "<p>True, but stage0  (and staging in general) also as many more complexities than submodules</p>",
        "id": 239328517,
        "sender_full_name": "Mac",
        "timestamp": 1621373127
    },
    {
        "content": "<p>Mathlib has a lot of contributors so we want the contributor experience to be simple and easy where possible</p>",
        "id": 239328524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621373132
    },
    {
        "content": "<p>I really don't think a submodule introduces that much more complexity. Though, I will admit, it  does introduce some.</p>",
        "id": 239328615,
        "sender_full_name": "Mac",
        "timestamp": 1621373173
    },
    {
        "content": "<p>This is not optimal for end users perhaps but I think that we will have technical solutions to the end user experience in time</p>",
        "id": 239328617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621373174
    },
    {
        "content": "<p>What are you optimizing for by splitting out the submodule? Certainly not ease of contributing or refactoring. \"Dependency size\" seems like a somewhat artificial metric.</p>",
        "id": 239328655,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621373191
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239328655\">said</a>:</p>\n<blockquote>\n<p>What are you optimizing for by splitting out the submodule?</p>\n</blockquote>\n<p>End-users.</p>",
        "id": 239328886,
        "sender_full_name": "Mac",
        "timestamp": 1621373305
    },
    {
        "content": "<p>specifically?</p>",
        "id": 239328905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621373319
    },
    {
        "content": "<p>Why is having multiple dependencies easier for end users than depending on the mono-repo?</p>",
        "id": 239328910,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621373328
    },
    {
        "content": "<p>The goal is to not bog them down with all the math stuff when that is not what they are looking for.</p>",
        "id": 239328913,
        "sender_full_name": "Mac",
        "timestamp": 1621373330
    },
    {
        "content": "<p>so \"dependency size\" then</p>",
        "id": 239328927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621373340
    },
    {
        "content": "<p>Then they can not look at it?</p>",
        "id": 239328933,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621373345
    },
    {
        "content": "<p>This is especially important now as Mathlib operates at global level and thus concepts can clash.</p>",
        "id": 239328979,
        "sender_full_name": "Mac",
        "timestamp": 1621373374
    },
    {
        "content": "<p>I see a path forward for solving the dependency size problem without splitting mathlib</p>",
        "id": 239328981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621373375
    },
    {
        "content": "<p>so I don't think we should assume these are irreconcilable</p>",
        "id": 239329013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621373396
    },
    {
        "content": "<p>Clashing concepts don't matter if you never import the mathlib one</p>",
        "id": 239329061,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621373405
    },
    {
        "content": "<p>Just because you depend on a git repo doesn't mean you import every file within it</p>",
        "id": 239329089,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621373419
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239329089\">said</a>:</p>\n<blockquote>\n<p>Just because you depend on a git repo doesn't mean you import every file within it</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239329061\">said</a>:</p>\n<blockquote>\n<p>Clashing concepts don't matter if you never import the mathlib one</p>\n</blockquote>\n<p>Transitive imports make it highly unlikely for the end-user to this level of fine-grain control over imports (especially considering the tight coupling between aspects of mathlib).</p>",
        "id": 239329356,
        "sender_full_name": "Mac",
        "timestamp": 1621373545
    },
    {
        "content": "<blockquote>\n<p>Transitive imports make it highly unlikely for the end-user to this level of fine-grain control over imports (especially considering the tight coupling between aspects of mathlib).</p>\n</blockquote>\n<p>This is a problem that can be solved by more fine grained imports in mathlib</p>",
        "id": 239329502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621373608
    },
    {
        "content": "<p>If a \"non-mathsy\" file depends on a \"mathsy\" one, then either:</p>\n<ul>\n<li>We should just fix it to not be the case</li>\n<li>Your definition of \"mathsy\" isn't consistent with the maintainers' / the constraints imposed by lean</li>\n</ul>",
        "id": 239329509,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621373616
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239328927\">said</a>:</p>\n<blockquote>\n<p>so \"dependency size\" then</p>\n</blockquote>\n<p>Modularity  and separation of concerns has nothing to with \"size\".</p>",
        "id": 239329512,
        "sender_full_name": "Mac",
        "timestamp": 1621373617
    },
    {
        "content": "<p>Why does modularity matter at a dependency level though? The usual answer would be to allow development to be parallelized, but frankly mathlib doesn't yet have a high enough rate of conflicting contributions (or conflicting maintainer opinions) for that to matter.</p>",
        "id": 239329748,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621373722
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239329509\">said</a>:</p>\n<blockquote>\n<p>If a \"non-mathsy\" file depends on a \"mathsy\" one, then either:</p>\n<ul>\n<li>We should just fix it to not be the case</li>\n<li>Your definition of \"mathsy\" isn't consistent with the maintainers' / the constraints imposed by lean</li>\n</ul>\n</blockquote>\n<p>This violates the principle of encapsulation. Just because some non-mathsy concept (in implementation) depends on a mathsy one, does not mean that it should pollute the user's namespace with mathsy concept if the user just wants the non-mathsy one.</p>",
        "id": 239329768,
        "sender_full_name": "Mac",
        "timestamp": 1621373735
    },
    {
        "content": "<p>This feels like an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem where the X is namespace pollution and the Y is make the dependencies smaller</p>",
        "id": 239329815,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621373760
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239329815\">said</a>:</p>\n<blockquote>\n<p>This feels like an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem where the X is namespace pollution and the Y is make the dependencies smaller</p>\n</blockquote>\n<p>I never said the issue <em>was</em> Y (make dependencies smaller). In fact, I just stated it <em>wasn't</em>.</p>",
        "id": 239329957,
        "sender_full_name": "Mac",
        "timestamp": 1621373827
    },
    {
        "content": "<p>Note that mathlib is designed so that you still get a usable lean setup even if you import every file simultaneously. We only make global notations / unnamespaced definitions for things that can reasonably be expected not to conflict with something the end user wants</p>",
        "id": 239329960,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621373828
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239329960\">said</a>:</p>\n<blockquote>\n<p>We only make global notations / unnamespaced definitions for things that can reasonably be expected not to conflict with something the end user wants</p>\n</blockquote>\n<p>I think you will find that different end-users have different ideas what they want. This is why the principles of modularity, encapsulation, and separation of concerns are key concepts in computer science.</p>",
        "id": 239330140,
        "sender_full_name": "Mac",
        "timestamp": 1621373918
    },
    {
        "content": "<p>maybe, but then those users should speak up</p>",
        "id": 239330171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621373942
    },
    {
        "content": "<p>I am!</p>",
        "id": 239330189,
        "sender_full_name": "Mac",
        "timestamp": 1621373952
    },
    {
        "content": "<p>I mean more specifically about problematic global definitions</p>",
        "id": 239330202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621373966
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span>, are you arguing for something like either a C++-style approach where even most of the stdlib is namespaced with <code>std::</code> (aka, introduce a <code>mathlib.</code> or <code>std.</code> namespace), or a python-style approach where the \"global namespace\" only exists per file?</p>",
        "id": 239330365,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621374039
    },
    {
        "content": "<p>Well <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  hightlighted the problems he had will teaching various concepts (such a groups) with mathlib as he wants his students to define Groups but mathlib has already stolen that object.</p>",
        "id": 239330371,
        "sender_full_name": "Mac",
        "timestamp": 1621374041
    },
    {
        "content": "<p>I have previously highlighted my many problems with namespace clashes due to my own interests of wanting to construct alternative logic/metaprogramming systems in Lean.</p>",
        "id": 239330447,
        "sender_full_name": "Mac",
        "timestamp": 1621374097
    },
    {
        "content": "<p>Some parts of this can/should be solved with better conflict resolution on lean's part, but a lot of it is simply us deciding that it is okay to name a definition \"topology\" because if you have a topology it should be isomorphic to our topology definition and if not your definition is the more niche one and should be namespaced</p>",
        "id": 239330463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621374112
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239330365\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span>, are you arguing for something like either a C++-style approach where even most of the stdlib is namespaced with <code>std::</code> (aka, introduce a <code>mathlib.</code> or <code>std.</code> namespace), or a python-style approach where the \"global namespace\" only exists per file?</p>\n</blockquote>\n<p>Either works. I would suggest the former in Lean as the later would require radically altering the way the Lean core functions.</p>",
        "id": 239330562,
        "sender_full_name": "Mac",
        "timestamp": 1621374151
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239330463\">said</a>:</p>\n<blockquote>\n<p>Some parts of this can/should be solved with better conflict resolution on lean's part, but a lot of it is simply us deciding that it is okay to name a definition \"topology\" because if you have a topology it should be isomorphic to our topology definition and if not your definition is the more niche one and should be namespaced</p>\n</blockquote>\n<p>Again I would like to remind everyone that namespacing things does not resolve global clashes in Lean.</p>",
        "id": 239330619,
        "sender_full_name": "Mac",
        "timestamp": 1621374195
    },
    {
        "content": "<blockquote>\n<p>Some parts of this can/should be solved with better conflict resolution on lean's part</p>\n</blockquote>",
        "id": 239330638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621374214
    },
    {
        "content": "<p>If we did add a <code>mathlib.</code> prefix, what problems would remain that dividing mathlib into submodules would solve?</p>",
        "id": 239330667,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621374236
    },
    {
        "content": "<p>I think throwing the burden on Lean to vastly alter its conflict resolution when some this could be resolved with a simple namespace is kind silly.</p>",
        "id": 239330755,
        "sender_full_name": "Mac",
        "timestamp": 1621374270
    },
    {
        "content": "<p>the namespace solution causes a <em>lot</em> of knock on effects</p>",
        "id": 239330786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621374296
    },
    {
        "content": "<p>it would require a similarly radical change to lean to actually be practical</p>",
        "id": 239330840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621374335
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239330463\">said</a>:</p>\n<blockquote>\n<p>Some parts of this can/should be solved with better conflict resolution on lean's part, but a lot of it is simply us deciding that it is okay to name a definition \"topology\" because if you have a topology it should be isomorphic to our topology definition and if not your definition is the more niche one and should be namespaced</p>\n</blockquote>\n<p>Also, what happens when then end-user depends on two libraries with different implementations of \"topology\" that both felt their definition was worthy of the global treatment?</p>",
        "id": 239330872,
        "sender_full_name": "Mac",
        "timestamp": 1621374353
    },
    {
        "content": "<p>(to be clear, I'm not saying \"let's just add <code>mathlib.</code>\", I want to check whether that would address all of <span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span>'s concerns)</p>",
        "id": 239330878,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621374358
    },
    {
        "content": "<blockquote>\n<p>What happens when then end-user depends on two libraries with different implementations of \"topology\" that both felt their definition was worthy of the global treatment?</p>\n</blockquote>\n<p>That's exactly why mathlib exists, so that you don't have those kinds of conflicts</p>",
        "id": 239330940,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621374376
    },
    {
        "content": "<p>Just to restate the problem I had: if you decide to redefine groups for teaching purposes but want to <code>import tactic</code> for simplicity then you need to work in a namespace and then you have to be a little careful with everything. But it wasn't a deal-breaker and furthermore this was in some sense rather an odd project -- it was the development of a <em>substantial</em> body of theory which was already in the library, something which is vanishingly rare amongst projects I've supervised. And once we had the hang of it things progressed fine -- we just had to learn the tricks like what to open.</p>",
        "id": 239330968,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621374398
    },
    {
        "content": "<p>Coq did this kind of thing and the result is a huge fragmentation of the community</p>",
        "id": 239331036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621374432
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239330872\">said</a>:</p>\n<blockquote>\n<p>Also, what happens when then end-user depends on two libraries with different implementations of \"topology\" that both felt their definition was worthy of the global treatment?</p>\n</blockquote>\n<p>This is also not just a theoretical concern. There have been many different suggestions for how to structure the algebraic hierarchy -- different libraries could easily form over different definitions and boom the problem arises.</p>",
        "id": 239331038,
        "sender_full_name": "Mac",
        "timestamp": 1621374434
    },
    {
        "content": "<p>While we're on namespaces and tactics; at least in lean3, <code>tactic.interactive</code> is a special namespace, and putting tactics from mathlib in <code>mathlib.tactic.interactive</code> wouldn't work</p>",
        "id": 239331152,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621374489
    },
    {
        "content": "<p>The idea is for us to decide on <em>one</em> solution and implement it globally across mathlib. Multiple competing hierarchies would be a nightmare</p>",
        "id": 239331156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621374493
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239330940\">said</a>:</p>\n<blockquote>\n<p>That's exactly why mathlib exists, so that you don't have those kinds of conflicts</p>\n</blockquote>\n<p>Everyone is not going to agree on one approach, that just is not how people (or programmers) work.</p>",
        "id": 239331184,
        "sender_full_name": "Mac",
        "timestamp": 1621374506
    },
    {
        "content": "<p>Yes, this is centralization. Decentralized libraries suffer greatly from bitrot</p>",
        "id": 239331265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621374554
    },
    {
        "content": "<p>That has never worked in any programming language ever.</p>",
        "id": 239331314,
        "sender_full_name": "Mac",
        "timestamp": 1621374591
    },
    {
        "content": "<p>In fact, languages which tend to force to much users in one way tend to die out and be replaced by more versatile ones.</p>",
        "id": 239331384,
        "sender_full_name": "Mac",
        "timestamp": 1621374613
    },
    {
        "content": "<p>Same is true for libaries.</p>",
        "id": 239331429,
        "sender_full_name": "Mac",
        "timestamp": 1621374637
    },
    {
        "content": "<p>In fact, as I have argued before, this is the main reason for Lean's extension metaprogramming capabilities to enforce very little style on the end-user.</p>",
        "id": 239331497,
        "sender_full_name": "Mac",
        "timestamp": 1621374676
    },
    {
        "content": "<p>All I can say is, it's worked pretty well for mathlib so far (frankly, a lot better than people initially expected)</p>",
        "id": 239331511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621374690
    },
    {
        "content": "<p>Also, there is also <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> example, which even comes up if people <em>do</em> agree on the definitions. They may want to redefine them for teaching purposes.</p>",
        "id": 239331550,
        "sender_full_name": "Mac",
        "timestamp": 1621374719
    },
    {
        "content": "<p>Sure, and we should have mechanisms for that</p>",
        "id": 239331605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621374731
    },
    {
        "content": "<p>the current recommendation is to put your whole project in a namespace and it works pretty well</p>",
        "id": 239331656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621374760
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239331656\">said</a>:</p>\n<blockquote>\n<p>the current recommendation is to put your whole project in a namespace and it works pretty well</p>\n</blockquote>\n<p>That doesn't work if your library also has subnamespaces and you need to open one into the other, then a clash emerges.</p>",
        "id": 239331744,
        "sender_full_name": "Mac",
        "timestamp": 1621374815
    },
    {
        "content": "<p>and that's a problem that should be solved by better control over conflict resolution in lean</p>",
        "id": 239331782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621374839
    },
    {
        "content": "<p>I just don't understand why you are so against sticking mathlib in a namespace.</p>",
        "id": 239331918,
        "sender_full_name": "Mac",
        "timestamp": 1621374900
    },
    {
        "content": "<p>It seems like an rather easy resolution to a lot of potential problems.</p>",
        "id": 239332020,
        "sender_full_name": "Mac",
        "timestamp": 1621374948
    },
    {
        "content": "<p>Though, the \"dependency size\" and presentation problem still remains.</p>",
        "id": 239332115,
        "sender_full_name": "Mac",
        "timestamp": 1621374981
    },
    {
        "content": "<p>If it were possible to put one line at the top of every file and it would have that effect I would consider it, but if you actually try it you will find out that there are many practical problems that arise</p>",
        "id": 239332162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621375019
    },
    {
        "content": "<p>Here's an example problem: should mathlib define <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiset.prod\">docs#multiset.prod</a>, or is multiset \"not mathsy\"?</p>\n<p>Because to do so, it needs bits of the algebraic heirarchy, and that's incompatible with a library that defines algebra differently</p>",
        "id": 239332232,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621375061
    },
    {
        "content": "<p>for example, if mathlib defines <code>Mathlib.List.foobar</code> and you have <code>l : List A</code> then <code>l.foobar</code> won't work</p>",
        "id": 239332254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621375071
    },
    {
        "content": "<p>On a more general note, I think goes back to my point about a very large gap between what mathematics focused programmers and computer science focused programmers think is proper in software development. Decentralization, modularity, encapsulation, separation of concerns are all fundamental principles in general computer science that are heavily strived for in design (take the ES module system, Rust's module system, and the many efforts at create a C++ module system as examples). Mathlib seems to take the opposite approach (which is also somewhat shared by things like Python/numpy -- which is why I think this seems to be a trend among the mathematically focused).</p>",
        "id": 239332846,
        "sender_full_name": "Mac",
        "timestamp": 1621375374
    },
    {
        "content": "<p>I don't think this has anything to do with mathematics focus</p>",
        "id": 239332944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621375405
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> speaking now with my professional number theory hat on: number theory has existed for over 2000 years and as a subject it is like a parasite. When new areas of mathematics are developed like topology or algebraic geometry or analysis or category theory, number theorists tend to find a way to use these tools to push their own ideas further. For me one of the reasons mathlib has been so successful is that it is a monorepo, relying on nothing more than core lean. Beyond some point mathematics can be regarded as surprisingly interconnected. Massot, Commelin and I tried breaking off and making a dependent perfectoid space repo but we simply didn't have the energy to keep it up to date and then it rotted.</p>",
        "id": 239332954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621375410
    },
    {
        "content": "<p>The fact that everything was there for us all at once (topology, geometry, analysis, number theory, algebra) has been essential for the rapid progress of the Scholze project and Commelin has been working very hard to keep our repo up to date with mathlib master -- we have learnt from our mistakes. The perfectoid space repo is worth nothing any more because nobody can use it with a modern mathlib.</p>",
        "id": 239333229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621375541
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239332944\">said</a>:</p>\n<blockquote>\n<p>I don't think this has anything to do with mathematics focus</p>\n</blockquote>\n<p>That may be entirely true. My only point is that it is odds with the fundamentals of computer science. Such violations also seem more common among the more mathematically-included, but that my just be a false perception on my part (or it may have to do with interconnectedness of mathematics that <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> mentioned).</p>",
        "id": 239333340,
        "sender_full_name": "Mac",
        "timestamp": 1621375581
    },
    {
        "content": "<p>One other major difference between the big programming languages you mention and mathlib is that the number of contributors is larger by a few orders of magnitude. Mathlib structure would have to phase change if it had 100 times more PRs per day</p>",
        "id": 239333345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621375584
    },
    {
        "content": "<p>With more contributors comes more manpower to support more elaborate and multiply-centric maintenance structures</p>",
        "id": 239333559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621375695
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239332254\">said</a>:</p>\n<blockquote>\n<p>for example, if mathlib defines <code>Mathlib.List.foobar</code> and you have <code>l : List A</code> then <code>l.foobar</code> won't work</p>\n</blockquote>\n<p>Yes, this is certainly a concern (and a place I can see an argument for using the global namespace). </p>\n<p>I would note, though, that adding fields to existing classes is still a violation of the principles I mentioned before and other languages (like Ruby with its \"refinements\") have figured out ways to do this without sacrificing encapsulation. For Lean, though, yes adding it to global List is probably the way to go for now.</p>",
        "id": 239333699,
        "sender_full_name": "Mac",
        "timestamp": 1621375799
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> it _is_ possible to develop your own stuff in a namespace, there are tricks to help you avoid problems with things in the global namespace -- you work in your own namespace, you define your versions there, and lean chooses them by default. It was only very rarely we had to explicitly disambiguate. As far as I can see this is a reasonable solution to your root namespace issue. As for breaking mathlib up, why mess with something which is working?</p>",
        "id": 239333800,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621375842
    },
    {
        "content": "<p>This namespace issue seems to come up (and be mischaracterized) repeatedly; can we record a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> somewhere less transient than Zulip? Would a issue against lean4 be appropriate? A wiki page somewhere?</p>",
        "id": 239333889,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621375906
    },
    {
        "content": "<p>We tried to break off perfectoid spaces and in some sense the only thing we learnt was that the project enhanced mathlib because of all the stuff that ended up in it as a result of the project</p>",
        "id": 239333955,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621375936
    },
    {
        "content": "<p>How about a documentation folder in mathlib4 on implementation notes?</p>",
        "id": 239334025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621375978
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243312\">@Jason KY.</span> Can you remember an explicit problem we had when trying to define <a href=\"http://Xena.group\">Xena.group</a> when <a href=\"http://_root_.group\">_root_.group</a> existed?</p>",
        "id": 239334068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621376006
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239333800\">said</a>:</p>\n<blockquote>\n<p>As far as I can see this is a reasonable solution to your root namespace issue.</p>\n</blockquote>\n<p>This does not work in the following pattern, which crops up in my use case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"bp\">..</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"bp\">..</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">MyStuff</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ImpA</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"bp\">..</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"bp\">..</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ImpB</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"bp\">..</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"bp\">..</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ConcernA</span>\n<span class=\"kn\">open</span> <span class=\"n\">ImpA</span> <span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">ImpB</span> <span class=\"o\">(</span><span class=\"n\">bar</span><span class=\"o\">)</span>\n<span class=\"c1\">-- ImpA.foo and ImpB.bar now clashes with global foo/bar</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ConcernB</span>\n<span class=\"kn\">open</span> <span class=\"n\">ImpA</span> <span class=\"o\">(</span><span class=\"n\">bar</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">ImpB</span> <span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"o\">)</span>\n<span class=\"c1\">-- ImpA.bar and ImpB.foo now clashes with global foo/bar</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 239334284,
        "sender_full_name": "Mac",
        "timestamp": 1621376142
    },
    {
        "content": "<p><code>open (priority := high) ImpA (foo)</code>?</p>",
        "id": 239334420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621376222
    },
    {
        "content": "<p>I don't think that exists but it would solve the problem</p>",
        "id": 239334438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621376235
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239333345\">said</a>:</p>\n<blockquote>\n<p>One other major difference between the big programming languages you mention and mathlib is that the number of contributors is larger by a few orders of magnitude. Mathlib structure would have to phase change if it had 100 times more PRs per day</p>\n</blockquote>\n<p>This may also be though why you have encountered so few difficulties with your centralized approach. Your small user-base makes it possible for most people to agree on things. There is not currently a significant enough number of people who disagree to create an alternative and maintain it. In languages with big userbases, this happens all the time so the centralized approach is often quickly abandoned.</p>",
        "id": 239334569,
        "sender_full_name": "Mac",
        "timestamp": 1621376303
    },
    {
        "content": "<p>arguably, an open of a particular name should normally be high priority</p>",
        "id": 239334578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621376305
    },
    {
        "content": "<blockquote>\n<p>In languages with big userbases, this happens all the time so the centralized approach is often quickly abandoned.</p>\n</blockquote>\n<p>Note that even here there is a desire for centralization when multiple libraries need to communicate or interoperate</p>",
        "id": 239334667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621376362
    },
    {
        "content": "<p>having a centralized standard library to provide the \"vocabulary\" for other libraries is considered valuable</p>",
        "id": 239334737,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621376402
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239334068\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"243312\">Jason KY.</span> Can you remember an explicit problem we had when trying to define <a href=\"http://Xena.group\">Xena.group</a> when <a href=\"http://_root_.group\">_root_.group</a> existed?</p>\n</blockquote>\n<p>I think we had a similar problem to the example Mac gave. We had groups in the <code>mygroup</code> namespace and so can't open anything without ambiguity.  We just ignored it by not opening anything and prefixing everything with <code>mygroup.</code>.  What Mario suggested would be great for this I think!</p>",
        "id": 239334785,
        "sender_full_name": "Jason KY.",
        "timestamp": 1621376408
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239334578\">said</a>:</p>\n<blockquote>\n<p>arguably, an open of a particular name should normally be high priority</p>\n</blockquote>\n<p>Sure, and I have taken up the issue with Lean as well. However, as you yourself stated, the Lean developers have a lot on there plate and don't have time for such changes, so concerns should instead be addressed to mathlib. So, here I am! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 239334840,
        "sender_full_name": "Mac",
        "timestamp": 1621376439
    },
    {
        "content": "<p>If we can fix this in mathlib, we probably should</p>",
        "id": 239334895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621376462
    },
    {
        "content": "<p>for example, by overriding the <code>open</code> command</p>",
        "id": 239334910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621376470
    },
    {
        "content": "<p>as long as the behavior is compatible I don't see any reason not to override various bits of core syntax</p>",
        "id": 239334934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621376494
    },
    {
        "content": "<p>although it is more overall code than if we were to just modify lean</p>",
        "id": 239334962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621376521
    },
    {
        "content": "<p>still, it lets us test out changes and PR it to lean only once we are reasonably sure that it's worth it</p>",
        "id": 239335109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621376603
    },
    {
        "content": "<p>well, priority in the <code>open</code> command needs more than a cosmetic change, it needs <code>OpenDecl</code> to track priority and the priority to get used in conflict resolution; I doubt those things can be accomplished by mathlib overrides</p>",
        "id": 239335304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621376716
    },
    {
        "content": "<p>(Coming to this all a bit late.)</p>\n<p>I'm very sympathetic to the idea that the current structure and \"branding\" of mathlib is scaring off computer scientists, to the detriment of the everyone.</p>\n<p>That said, I am a huge fan of the monorepo style for doing mathematics. You only have to look at the fundamentally unique successes Lean has had relative to other theorem provers (perfectoid and LTE, I'm looking at you) --- what is going on is that they are doing real modern mathematics, relying on a surprising variety of mathematical topics that don't obviously belong together. Mathlib provides a guarantee that if if two bits of mathematics exist in the library, you can use them together.</p>\n<p>In other theorem provers, this is woefully far from the case. You can ask \"do you have X?\" and \"do you have Y?\" and receive enthusiastic responses, but when you ask \"how do I import X and Y at the same time?\" you tend to get a lot of explanation of why that just isn't a reasonable thing to do...</p>\n<p>This is only possible because it's practical to do library-wide refactors, and having to synchronize commits across different repos would completely kill this.</p>",
        "id": 239340396,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621379882
    },
    {
        "content": "<p>Perhaps we could try a concrete experiment in Lean3. There is an obvious segmentation point in the current library: basically <code>tactic.basic</code>. A while back we put in a lot of work to minimise the imports of <code>tactic.basic</code>, and it's still pretty clean. There's no other division in the library that comes close.</p>\n<p>What could making a sharper division here look like? Is there a setup that would allow someone to just depend on stuff below <code>tactic.basic</code>, but not make the PR process more painful?</p>",
        "id": 239341845,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621380769
    },
    {
        "content": "<p>In a lot of ways this segmentation is easier in lean 3 than lean 4, because you can have multiple projects with overlapping module names. So we could move <code>tactic.basic</code> and its dependents to some other subfolder of mathlib with its own leanpkg.toml, tweak the toml files a bit, and no lean files have to change textually</p>",
        "id": 239342114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621380919
    },
    {
        "content": "<p>In lean 4, module names start with the package name, so moving things from one package to another means at least changing the import references and folder organization. Moving to another repo is not required, however; leanpkg does support multiple projects in one repository.</p>",
        "id": 239342383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621381086
    },
    {
        "content": "<p>The way leanproject works, however, you still have to check out the mathlib repository (shallowly) in order to depend on a subfolder, so you would still have the \"big dependency\" problem as an end user if you want to depend on the \"<code>tactic.basic</code> + deps\" project without mathlib</p>",
        "id": 239342575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621381223
    },
    {
        "content": "<p>An architecture that would support fine grained dependencies even to the extent of not pulling in unnecessary things via some <code>cargo</code>-like package manager designed to work with mathlib might look like this: Mathlib compiles its dependency graph into a <code>mathlib.deps</code> file that is served by some server. <code>leanpkg</code> downloads this file, computes the up-set of the files imported by the current project, and requests the <code>.olean</code> or <code>.o</code> files corresponding to these from the server and puts them in the local <code>build/</code> directory. Then it compiles the project as normal.</p>\n<p>That would allow users to freely <code>import Mathlib.Whatever</code>, and <code>leanpkg</code> will just download built files as needed, so there is no \"big dependency\" problem and mathlib can grow arbitrarily in any direction while still keeping the monorepo design.</p>",
        "id": 239343061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621381591
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239340396\">said</a>:</p>\n<blockquote>\n<p>That said, I am a huge fan of the monorepo style for doing mathematics. You only have to look at the fundamentally unique successes Lean has had relative to other theorem provers (perfectoid and LTE, I'm looking at you) --- what is going on is that they are doing real modern mathematics, relying on a surprising variety of mathematical topics that don't obviously belong together. Mathlib provides a guarantee that if if two bits of mathematics exist in the library, you can use them together.</p>\n</blockquote>\n<p>In spite of all that has been said, I actually agree with this. Since all of the mathematics in mathlib is done using the same base theory (by a very feneral notion of thoery) it makes sense that all the results of said theory would be in the same repo. I would still adovocate its contents be placed in a <code>Mathlib</code> namespace so that end-users could perform analysis between different axiomatizations of mathematics. But I can understand that the burden to do so may be considered to great to appeal to such niche interests (at this time). </p>\n<p>My problem is really only with the non-math std++ part of mathlib, which I feel should take the more standard CS approach (of modularity and separation of concerns) in is structure as that is the audience it is (hopefully) targeting in Lean 4.</p>",
        "id": 239343387,
        "sender_full_name": "Mac",
        "timestamp": 1621381842
    },
    {
        "content": "<p>Personally I don't think lean 4 (or lean 3) is a good place for exploring alternative mathematical foundations, reverse mathematics, and other things like that. Lean has progressively taken steps <em>away</em> from this since lean 2 which supported HoTT and had a number of kernel flags to allow for impredicativity or not, proof irrelevance or not, inductive types or not etc</p>",
        "id": 239343604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621382037
    },
    {
        "content": "<p>If you want to do other logics they are all basically deeply embedded second class citizens</p>",
        "id": 239343673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621382074
    },
    {
        "content": "<p>I think it's okay if lean doesn't do everything, that doesn't have to be a design goal</p>",
        "id": 239343841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621382171
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239343604\">said</a>:</p>\n<blockquote>\n<p>Personally I don't think lean 4 (or lean 3) is a good place for exploring alternative mathematical foundations, reverse mathematics, and other things like that.</p>\n</blockquote>\n<p>You are assuming one has to explore them within Lean 4's current logical framework. With Lean 4's new metaprogramming framework, you can define entire custom DSLs and rebuild the logic from the ground up in them. I love Lean for its metaprogramming power, not really its internal logic.</p>",
        "id": 239343890,
        "sender_full_name": "Mac",
        "timestamp": 1621382221
    },
    {
        "content": "<p>Lean doesn't separate them though</p>",
        "id": 239343909,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621382240
    },
    {
        "content": "<p>Lean has one builtin kernel and doesn't let you swap it out for something else</p>",
        "id": 239343934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621382267
    },
    {
        "content": "<p>You can force it to separate them. You don't actually need to reduce <code>Syntax</code> to <code>Exor</code> or real terms for example.</p>",
        "id": 239343944,
        "sender_full_name": "Mac",
        "timestamp": 1621382278
    },
    {
        "content": "<p>I would like to see a \"full conversion\" proof of concept for that. I am extremely dubious that you can actually do that without having to rebuild half of lean</p>",
        "id": 239344051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621382346
    },
    {
        "content": "<p>You can do all the computation at the meta level and theorem proving at the meta level. Just as you can write a kernel in C++, you can write a new kernel in Lean. You don't have to appeal to Lean's kernel</p>",
        "id": 239344069,
        "sender_full_name": "Mac",
        "timestamp": 1621382360
    },
    {
        "content": "<p>i.e. you could use Lean to as an interpreter to check a DSL or use write a compiler in Lean for the DSL in Lean that you could use an external check for. Or you can could your own checker in lean which you compile and use. There are many ways to do logic in Lean that don't require grounding the logic on Lean's logic system.</p>",
        "id": 239344475,
        "sender_full_name": "Mac",
        "timestamp": 1621382544
    },
    {
        "content": "<p>without <code>Expr</code> that means that you need to rewrite all <code>elab</code>s, <code>def</code> and <code>theorem</code>, and an environment extension that calls your kernel. I am honestly curious if this is possible, because it would probably beat the pants off my MM1 proof assistant, but it sounds like a tremendous amount of work and I'm not even sure all the hooks to do so are available in user space</p>",
        "id": 239344497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621382573
    },
    {
        "content": "<p>Environment extension are available that's what the initialize attribute is for</p>",
        "id": 239344578,
        "sender_full_name": "Mac",
        "timestamp": 1621382608
    },
    {
        "content": "<p>I've had issues trying to employ it in the past</p>",
        "id": 239344596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621382627
    },
    {
        "content": "<p>Nothing I said sounds impossible from what I know, but there may be unforeseen issues which is why I mention a POC</p>",
        "id": 239344689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621382689
    },
    {
        "content": "<p>I don't doubt it. But I am excited to look into the possibility. It's what I'll probably work on the next time I have a lot of free time.</p>",
        "id": 239344744,
        "sender_full_name": "Mac",
        "timestamp": 1621382749
    },
    {
        "content": "<p>I think not readily supporting alternative axiomatizations is a feature, not a bug. I love computer scientists, but remain dubious about constructivists. :-) (That is of course a joke --- but I think for acceptance by mathematicians, we've already seen that being bog-standard-classical has been a huge success.)</p>",
        "id": 239345172,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621383051
    },
    {
        "content": "<p>(Although when we meet alien mathematicians, I for one welcome our new constructivists overlords.)</p>",
        "id": 239345248,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621383121
    },
    {
        "content": "<p>I think it a bit unfortunate that \"constructivist\" is what most people around here think of / are exposed to when talking about alternate axiomatizations. I would like to see more stuff like modal logic, linear logic, exponential function arithmetic, ACA0, that kind of stuff</p>",
        "id": 239345318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621383146
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239345172\">said</a>:</p>\n<blockquote>\n<p>That is of course a joke --- but I think for acceptance by mathematicians, we've already seen that being bog-standard-classical has been a huge success.</p>\n</blockquote>\n<p>Hence why I am a computer scientist, not a mathematician! ;)</p>",
        "id": 239345322,
        "sender_full_name": "Mac",
        "timestamp": 1621383148
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239345318\">said</a>:</p>\n<blockquote>\n<p>I think it a bit unfortunate that \"constructivist\" is what most people around here think of / are exposed to when talking about alternate axiomatizations. I would like to see more stuff like modal logic, linear logic, exponential function arithmetic, ACA0, that kind of stuff</p>\n</blockquote>\n<p>There is also nonstandard analysis, which I am quite fond of.</p>",
        "id": 239345388,
        "sender_full_name": "Mac",
        "timestamp": 1621383218
    },
    {
        "content": "<p>You can do nonstandard analysis without changing axioms though, there is even a definition of hyperreals in mathlib</p>",
        "id": 239345433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621383248
    },
    {
        "content": "<p>True (though I would not qualify it as bog-standard). There are also ways of doing it with different axiomizations though.</p>",
        "id": 239345611,
        "sender_full_name": "Mac",
        "timestamp": 1621383389
    },
    {
        "content": "<p>I think the most useful application of nonstandard analysis is using nonstandard analysis methods to construct theorems in regular analysis; for this you actually want to be working in some kind of facade or deep embedding translation over a standard mathematical setup, and the key is to have a nice input method that hides all that</p>",
        "id": 239345769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621383549
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239345172\">said</a>:</p>\n<blockquote>\n<p>I think not readily supporting alternative axiomatizations is a feature, not a bug. I love computer scientists, but remain dubious about constructivists. :-) (That is of course a joke --- but I think for acceptance by mathematicians, we've already seen that being bog-standard-classical has been a huge success.)</p>\n</blockquote>\n<p>This also touches on the point I was getting at early. I think  people who fall firmly in computer scientist camp tend to like (and desire) a million different ways of doing things (hence the plethora of programming languages and frameworks), whereas those more mathematically oriented are much fonder of working off a tried and true base/standard (hence the continuing survival of classical logic).</p>",
        "id": 239345879,
        "sender_full_name": "Mac",
        "timestamp": 1621383645
    },
    {
        "content": "<p>Then again, I may just be asserting patterns where there are none.</p>",
        "id": 239345957,
        "sender_full_name": "Mac",
        "timestamp": 1621383717
    },
    {
        "content": "<blockquote>\n<p>I think people who fall firmly in computer scientist camp tend to like (and desire) a million different ways of doing things (hence the plethora of programming languages and frameworks)</p>\n</blockquote>\n<p>I think a plethora of <em>frameworks</em> indicates that lots of people want one way to do things but they all disagree on what that one way is</p>",
        "id": 239346066,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621383800
    },
    {
        "content": "<p>same diff?</p>",
        "id": 239346086,
        "sender_full_name": "Mac",
        "timestamp": 1621383826
    },
    {
        "content": "<p>Every individual framework is unified in vision and generally has take-over-the-world ambitions</p>",
        "id": 239346160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621383867
    },
    {
        "content": "<p>Mathlib is one such framework</p>",
        "id": 239346169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621383881
    },
    {
        "content": "<p>If you want to do your own thing, okay, but don't mind us while we take over the rest of the world</p>",
        "id": 239346226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621383923
    },
    {
        "content": "<p>Yes, true, computer scientists tend to think they have the one answer but they have worked with so many other people also have think they have the one answer (and that answer is different than theirs) tends to result  in a few deciding to build systems that support as many different one answers as they can. XD</p>",
        "id": 239346256,
        "sender_full_name": "Mac",
        "timestamp": 1621383948
    },
    {
        "content": "<p>Once several competing libraries exist, of course you want to be able to mediate between them and this leads to increasing abstraction. But this is a suboptimal situation for a number of reasons, and we're trying to keep things unified where possible</p>",
        "id": 239346387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621384062
    },
    {
        "content": "<p>I am a participant in both these camps. I have what I think to be my one answer, but I also try to encourage and create systems that support many possible (including my own). ;)</p>",
        "id": 239346397,
        "sender_full_name": "Mac",
        "timestamp": 1621384079
    },
    {
        "content": "<p>When there are good reasons to have multiple versions of a thing, mathlib has multiple versions of the thing and relates them</p>",
        "id": 239346438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621384088
    },
    {
        "content": "<p>when multiple versions of a thing are done in independent libraries, the \"relating\" part gets lost in transmission</p>",
        "id": 239346485,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621384140
    },
    {
        "content": "<p>For me, math/logic (and computer science) is a creative enterprise, my goal is express what I want to express using the tools given to me (and creating new tools if the current tools are insufficient).</p>",
        "id": 239346619,
        "sender_full_name": "Mac",
        "timestamp": 1621384235
    },
    {
        "content": "<p>My position here is to try to understand your problem to see whether mathlib can accomodate a solution to it so that we don't need to have multiple libraries and the aforementioned abstraction</p>",
        "id": 239346623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621384239
    },
    {
        "content": "<blockquote>\n<p>For me, math/logic (and computer science) is a creative enterprise, my goal is express what I want to express using the tools given to me (and creating new tools if the current tools are insufficient).</p>\n</blockquote>\n<p>I don't think anyone will disagree with that</p>",
        "id": 239346657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621384278
    },
    {
        "content": "<p>Again, my interest, in particular, at the moment is mostly in the stdlib rather than mathlib part of mathlib, i.e. can I get some tools to help out with my metaprogramming  and metalogic explorations without cluttering my namespace with names and syntax clashing with concepts for which  I wish to explore alternate definitions.</p>",
        "id": 239346867,
        "sender_full_name": "Mac",
        "timestamp": 1621384425
    },
    {
        "content": "<p>I already get enough clashes from Lean itself, I would kind of like to avoid more.</p>",
        "id": 239346919,
        "sender_full_name": "Mac",
        "timestamp": 1621384449
    },
    {
        "content": "<p>You could just not put things in the global namespace unprotected; mathlib has microcosms of this issue all over the place</p>",
        "id": 239346969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621384485
    },
    {
        "content": "<p>just don't call your fancy and <code>_root_.And</code> and it's fine</p>",
        "id": 239346997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621384507
    },
    {
        "content": "<p>you can use typeclasses to abstract over syntax too</p>",
        "id": 239347031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621384540
    },
    {
        "content": "<p>lots of mathlib types define their own + or whatever, see the surreals for example</p>",
        "id": 239347091,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621384565
    },
    {
        "content": "<p>but if I call it <code>And</code> I get clashes unless I wish to write out <code>MyStuff.And</code> which I find aesthetically (and typing-wise) burdensome.</p>",
        "id": 239347098,
        "sender_full_name": "Mac",
        "timestamp": 1621384569
    },
    {
        "content": "<p>Then don't call it <code>And</code></p>",
        "id": 239347118,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621384588
    },
    {
        "content": "<p>Bur it <em>is</em> And!</p>",
        "id": 239347127,
        "sender_full_name": "Mac",
        "timestamp": 1621384605
    },
    {
        "content": "<p>I could also make the same argument for mathlib, i.e., don't call it <code>And</code> call it <code>MAnd</code>.</p>",
        "id": 239347167,
        "sender_full_name": "Mac",
        "timestamp": 1621384668
    },
    {
        "content": "<p>No, <code>And</code> already exists and means the one that comes with lean. Even if you could solve the naming clash issue, it's confusing for readers to not make them distinct</p>",
        "id": 239347169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621384671
    },
    {
        "content": "<p>Mathlib doesn't define a competing <code>And</code> for exactly this reason</p>",
        "id": 239347222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621384692
    },
    {
        "content": "<p>for other types it either uses typeclasses for syntax overloading or namespaced names</p>",
        "id": 239347245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621384721
    },
    {
        "content": "<p>I think the namespace argument is a happy medium: you get <code>Mathlib.And</code> which you and I can refer to as <code>And</code> when <code>Mathlib</code> is open and I get <code>MyStuff.And</code> which I can refer to as <code>And</code> when <code>MyStuff</code> is open.</p>",
        "id": 239347247,
        "sender_full_name": "Mac",
        "timestamp": 1621384722
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239347169\">said</a>:</p>\n<blockquote>\n<p>No, <code>And</code> already exists and means the one that comes with lean. Even if you could solve the naming clash issue, it's confusing for readers to not make them distinct</p>\n</blockquote>\n<p>I was using <code>And</code> as an example, not the actual case in point.</p>",
        "id": 239347269,
        "sender_full_name": "Mac",
        "timestamp": 1621384761
    },
    {
        "content": "<p>So was I</p>",
        "id": 239347355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621384805
    },
    {
        "content": "<p>So how does this also apply to <code>Semigroup</code>?</p>",
        "id": 239347379,
        "sender_full_name": "Mac",
        "timestamp": 1621384829
    },
    {
        "content": "<p><code>Semigroup</code> extends <code>Mul</code> which supplies the notation <code>*</code>, so you can write <code>x * y</code> for <code>x y : A</code> where <code>Semigroup A</code></p>",
        "id": 239347416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621384867
    },
    {
        "content": "<p>that's what I mean by \"typeclasses for syntax overloading\"</p>",
        "id": 239347426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621384878
    },
    {
        "content": "<p>Let's say I want to define an algebra hierarchy like Kyle's and Mathlib currently has its own notion, I want to stop clashes. What are you proposing?</p>",
        "id": 239347431,
        "sender_full_name": "Mac",
        "timestamp": 1621384889
    },
    {
        "content": "<p>suppose you are doing this as part of mathlib</p>",
        "id": 239347489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621384925
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239347416\">said</a>:</p>\n<blockquote>\n<p><code>Semigroup</code> extends <code>Mul</code> which supplies the notation <code>*</code>, so you can write <code>x * y</code> for <code>x y : A</code> where <code>Semigroup A</code></p>\n</blockquote>\n<p>This assumes I want <code>Semigroup</code> to extend <code>Mul</code> and not use a different symbol like <code>&lt;&gt;</code> (which Haskell uses).</p>",
        "id": 239347528,
        "sender_full_name": "Mac",
        "timestamp": 1621384963
    },
    {
        "content": "<p>That's a whole digression</p>",
        "id": 239347552,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621384999
    },
    {
        "content": "<p>Suffice it to say, you extend a notation typeclass for the operator you want to use</p>",
        "id": 239347564,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621385020
    },
    {
        "content": "<p>I will admit that at this point I have also confused myself. </p>\n<p>The simple point I was trying to make is a might want to define my own version (or, in fact, multiple different versions) of a mathlib concept like <code>Semigroup</code> and I want to call  them all <code>Semigroup</code> (as they all different formulations of the concept). In fact, Mathlib itself has some problems with the difference between bundled and unbundled notions of <code>Semigroup</code>. I think a reasonable solution is to use namespaces (as that is what they are for) and I do not see the problem with this generally. Yes, there are some situations where this is not feasible (so don't do it there), but every it is, I see no problem.</p>",
        "id": 239347758,
        "sender_full_name": "Mac",
        "timestamp": 1621385167
    },
    {
        "content": "<p>Different things get different names, the same thing gets the same name</p>",
        "id": 239347808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621385230
    },
    {
        "content": "<p>So who gets the name of <code>Semigroup</code>? Or do none of them?</p>",
        "id": 239347842,
        "sender_full_name": "Mac",
        "timestamp": 1621385252
    },
    {
        "content": "<p>Competing definitions for the same concept is studiously avoided in mathlib</p>",
        "id": 239347847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621385256
    },
    {
        "content": "<p>there is only one <code>Semigroup</code></p>",
        "id": 239347853,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621385273
    },
    {
        "content": "<p>for bundled / unbundled, there is <code>semigroup</code> and <code>is_semigroup</code></p>",
        "id": 239347903,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621385290
    },
    {
        "content": "<p>the category is <code>Semigroup</code> I guess</p>",
        "id": 239347929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621385308
    },
    {
        "content": "<p>the main one is <code>semigroup</code></p>",
        "id": 239347942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621385325
    },
    {
        "content": "<p>So there are 3 semigroups in Mathlib, and one of those will need a new name in Lean4 since all types are now upper case.</p>",
        "id": 239347996,
        "sender_full_name": "Mac",
        "timestamp": 1621385378
    },
    {
        "content": "<p>But if there was another semigroup definition that was equivalent to one of the above, it would be deleted and references would go instead to the existing concept</p>",
        "id": 239348003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621385395
    },
    {
        "content": "<p>We still need to figure out how to make the lean 4 naming convention work with stuff like categories</p>",
        "id": 239348057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621385415
    },
    {
        "content": "<p>Probably <code>SemigroupCat</code></p>",
        "id": 239348059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621385421
    },
    {
        "content": "<p>I'm not sure those all exist btw, but that's what they would be called if they did</p>",
        "id": 239348121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621385491
    },
    {
        "content": "<p>My point is this name clashing is even a problem within mathlib. Outside of mathlib, people, like me, may disagree with what you have choosen to be the canonical semigroup definition (or just, like me, wish to explore alternatives)  and want to define their own while still using bits and pieces of mathlib (as it is Lean's defacto standard lib), I don't see why they have to lose access to the right of the name of <code>Semigroup</code>.</p>",
        "id": 239348186,
        "sender_full_name": "Mac",
        "timestamp": 1621385543
    },
    {
        "content": "<p>Why not build from within mathlib? Then that issue goes away</p>",
        "id": 239348234,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621385589
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 239348254,
        "sender_full_name": "Mac",
        "timestamp": 1621385618
    },
    {
        "content": "<p>You want to extend semigroups with some theorem that we don't have? Use the one that exists</p>",
        "id": 239348263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621385640
    },
    {
        "content": "<p>You want to experiment with alternative definitions for semigroup? Refactor the library</p>",
        "id": 239348321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621385673
    },
    {
        "content": "<p>You don't want to refactor the library but define your own semigroup anyway? Use a namespace (and don't PR it to mathlib because we will certainly remove the duplication during review)</p>",
        "id": 239348369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621385727
    },
    {
        "content": "<p>I don't understand why consumers are obligated to use a namespace but mathlib itself isn't.</p>",
        "id": 239348432,
        "sender_full_name": "Mac",
        "timestamp": 1621385772
    },
    {
        "content": "<p>If you can define something compatible with mathlib's definitions you don't need a namespace</p>",
        "id": 239348458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621385807
    },
    {
        "content": "<p>Why is mathlib the end-all-and be all of how things should be canonical defined?</p>",
        "id": 239348476,
        "sender_full_name": "Mac",
        "timestamp": 1621385833
    },
    {
        "content": "<p>Only recalcitrant mathlib users need the namespace</p>",
        "id": 239348479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621385836
    },
    {
        "content": "<p>Lol</p>",
        "id": 239348481,
        "sender_full_name": "Mac",
        "timestamp": 1621385843
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239348476\">said</a>:</p>\n<blockquote>\n<p>Why is mathlib the end-all-and be all of how things should be canonical defined?</p>\n</blockquote>\n<p>That's the point</p>",
        "id": 239348490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621385850
    },
    {
        "content": "<p>without canonical definitions you don't get interop</p>",
        "id": 239348504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621385868
    },
    {
        "content": "<p>and all the success stories mentioned earlier are a direct consequence of this interop</p>",
        "id": 239348574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621385906
    },
    {
        "content": "<p>Interop/canonicity within mathlib is fine, why does mathlib also require end-users to also concur with those canonical definitions.</p>",
        "id": 239348626,
        "sender_full_name": "Mac",
        "timestamp": 1621385953
    },
    {
        "content": "<p>End users are expected to also be working on something mathlib compatible</p>",
        "id": 239348638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621385971
    },
    {
        "content": "<p>Why?</p>",
        "id": 239348645,
        "sender_full_name": "Mac",
        "timestamp": 1621385986
    },
    {
        "content": "<p>because otherwise they wouldn't be depending on mathlib?</p>",
        "id": 239348699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621386005
    },
    {
        "content": "<p>This is mathlib's value proposition</p>",
        "id": 239348734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621386021
    },
    {
        "content": "<p>For example all the mathematical projects like LTE, sphere-eversion, perfectoid-spaces, flypitch all <em>build</em> on mathlib, they don't try to redefine it (although they almost always have a \"mathlib addendum\" section containing work that probably should be PR'd to mathlib)</p>",
        "id": 239349028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621386232
    },
    {
        "content": "<p>For one, since mathlib is the de facto standard lib, I may want mathlib for parts of the stdlib and not all want to depend on the math part at all, but am forced to anyway due to it currently being one monolith package, Second, I may be using mathlib along with many other alternative \"mathlib\"s and/or my own custom \"mathlib\" that all feel the same way, so It would be nice if they worked together without clashing.</p>",
        "id": 239349031,
        "sender_full_name": "Mac",
        "timestamp": 1621386235
    },
    {
        "content": "<p>However, I feel like this discussion is going nowhere, it is clear to me that you (and its seems like a decent bit of the mathlib community) and I have difference of opinion in how libraries show be presented to end-users that is not going to be resolved any time soon. I think I have my opinion and the reasons for it clear and so have you, so I don't think there is really much else to discuss on this matter.</p>",
        "id": 239349169,
        "sender_full_name": "Mac",
        "timestamp": 1621386356
    },
    {
        "content": "<blockquote>\n<p>For one, since mathlib is the de facto standard lib, I may want mathlib for the stdlib and not all want to depend on the rest of it, but am forced to anyway due to it currently being one monolith package,</p>\n</blockquote>\n<p>You can depend on only part of it as mentioned earlier. If the part you want is already too opinionated, well tough. (Or bring it up to the maintainers and try to make mathlib not clash with your usage.)</p>\n<blockquote>\n<p>Second, I may be using mathlib along with many other alternative \"mathlib\"s that all feel the same way</p>\n</blockquote>\n<p>Let's try to keep these to a minimum, because as you point out there is a significant issue with interop when they exist. We were successfully able to redirect all such effort in lean 3 into mathlib itself and I'm glad. Hopefully we can keep it up in mathlib4.</p>",
        "id": 239349258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621386429
    },
    {
        "content": "<p>Discussions at this level of abstraction are unlikely to lead to any meaningful changes. Try to come up with a more specific issue where just using mathlib without fighting the design decisions causes problems for you.</p>",
        "id": 239349382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621386517
    },
    {
        "content": "<p>We can chalk it up to a difference of opinion, but I see a user who could potentially be a mathlib contributor (and probably would be if you were working in lean 3) whose needs are not being met by mathlib (or at least seems to think so), and I would like to suss out exactly what mathlib needs to do to satisfy this use case, because I don't think your general target area is out of scope</p>",
        "id": 239349576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621386706
    },
    {
        "content": "<p>Talking about our respective opinions is unlikely to go anywhere, but talking about concrete pain points might</p>",
        "id": 239349653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621386767
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239349576\">said</a>:</p>\n<blockquote>\n<p>We can chalk it up to a difference of opinion, but I see a user who could potentially be a mathlib contributor (and probably would be if you were working in lean 3) whose needs are not being met by mathlib (or at least seems to think so), and I would like to suss out exactly what mathlib needs to do to satisfy this use case, because I don't think your general target area is out of scope</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239349653\">said</a>:</p>\n<blockquote>\n<p>Talking about our respective opinions is unlikely to go anywhere, but talking about concrete pain points might</p>\n</blockquote>\n<p>I appreciate the sentiment. When/if I come up with specific cases where I really want to use part of mathlib and am encountering problems, I will mention them in the channel. Regardless, thank you all for taking the time to discuss this with me. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 239353783,
        "sender_full_name": "Mac",
        "timestamp": 1621389984
    },
    {
        "content": "<p>Would it be reasonable from mathlib's perspective to have some data structures and algorithm libraries separated out?</p>\n<p>Think: List, Array, RBMap, topological sort, etc.</p>\n<p>Especially if those are not verified, you probably can make them work well for programming and proving independently and you could prove lemmas about those in the larger mathlib, keeping the raw data structures and algorithms separate.</p>",
        "id": 239391066,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1621415818
    },
    {
        "content": "<p>That's already the way things are set up</p>",
        "id": 239392368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621416500
    },
    {
        "content": "<p>for the most part the raw data structures are separate from the proofs</p>",
        "id": 239392391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621416523
    },
    {
        "content": "<p>and they are in different files so that you can depend on one without the other</p>",
        "id": 239392430,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621416544
    },
    {
        "content": "<p>In particular, this is necessary for <code>data.list.defs</code> vs <code>data.list.basic</code> because the proofs in <code>data.list.basic</code> use tactics that use definitions in <code>data.list.defs</code></p>",
        "id": 239392480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621416592
    },
    {
        "content": "<p>However, that's probably not what you mean by \"separated out\". I would like lean 4 packaging to improve to the point that this setup, where the files are intermingled on disk and in module naming, is not penalized compared to having those files in a separate project</p>",
        "id": 239392796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621416752
    },
    {
        "content": "<p>You did get the point, yes. I was asking if we can turn them into separate packages. Or is your question deeper, asking if you can create a package ad-hoc by just what you import?</p>",
        "id": 239397089,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1621418785
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> also, are you aware of another programming language having a module / package system in line with what you're envisioning?</p>",
        "id": 239399207,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1621419851
    },
    {
        "content": "<p>C doesn't really have a module system, but if you use make in the usual way to produce multiple executables I think this comes for free</p>",
        "id": 239477926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621450480
    },
    {
        "content": "<blockquote>\n<p>Or is your question deeper, asking if you can create a package ad-hoc by just what you import?</p>\n</blockquote>\n<p>Yes, this is basically what I'm getting at. Lean files are separately compiled anyway so the package boundary is mostly a leanpkg concept.</p>",
        "id": 239478366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621450675
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239477926\">said</a>:</p>\n<blockquote>\n<p>C doesn't really have a module system, but if you use make in the usual way to produce multiple executables I think this comes for free</p>\n</blockquote>\n<p>You do realize that C's packaging system is generally not considered something to emulate? The whole point of the invention of modern module systems was to get away from C's system (and, in fact, there are many efforts within the standards committee to add/impose a modern module system on C/C++).  Could it be that you are not really a big fan of the modern design? I don't mean this as a criticism, everyone can like what the like, but I am beginning to suspect this may be the case.</p>",
        "id": 239479473,
        "sender_full_name": "Mac",
        "timestamp": 1621451142
    },
    {
        "content": "<p>I am not trying to imply that. But I feel that the question is coming from the wrong direction. We should try to solve the problems that arise, and borrow solutions from elsewhere where they fit, not start from some other language's model and try to map them onto our circumstances</p>",
        "id": 239482109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621452343
    },
    {
        "content": "<p>I'm a big fan of the rust model for packaging and compilation, but lean already significantly diverges from it by using per-file compilation, and furthermore the rust model is obviously not a good fit for mathlib.</p>",
        "id": 239482382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621452462
    },
    {
        "content": "<p>Haskell is also separately compiled, maybe there is something similar there</p>",
        "id": 239482578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621452534
    },
    {
        "content": "<p>I wasn't really considering C++ modules but they don't really differ from the C situation in the dimension I've been talking about. There are no file placement or naming restrictions regarding the use of C++ modules</p>",
        "id": 239482947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621452682
    },
    {
        "content": "<p>I don't dislike C++ modules at all, although I haven't seen them in production so it remains to be seen how effective they are. But C++ header files have been stupidly inefficient for years and I'm glad they finally found a workable solution</p>",
        "id": 239483167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621452771
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239482109\">said</a>:</p>\n<blockquote>\n<p>We should try to solve the problems that arise, and borrow solutions from elsewhere where they fit, not start from some other language's model and try to map them onto our circumstances</p>\n</blockquote>\n<p>However, it is clean that part of the future roadmap of Lean 4 is to completely overhaul its module and packaging system, as can be seen from the <a href=\"https://github.com/leanprover/lean4/projects\">Projects</a>.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239482382\">said</a>:</p>\n<blockquote>\n<p>I'm a big fan of the rust model for packaging and compilation, but lean already significantly diverges from it by using per-file compilation, and furthermore the rust model is obviously not a good fit for mathlib.</p>\n</blockquote>\n<p>Currently, the plan seems to be to follow in Rust footsteps and mirror Cargo based both on the <code>leanpkg++</code> project and this issue: <a href=\"https://github.com/leanprover/lean4/issues/397\">#397</a>. So I think you may want to open a dialogue with the Lean  developers about this.</p>",
        "id": 239483799,
        "sender_full_name": "Mac",
        "timestamp": 1621453040
    },
    {
        "content": "<p>I actually intend to post my  own slight alternative to this plan in the <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a> forum soon.</p>",
        "id": 239483993,
        "sender_full_name": "Mac",
        "timestamp": 1621453114
    },
    {
        "content": "<p>By the way, it's possible to still mostly follow the footsteps of cargo here with mathlib having to set some fancy options to get what it needs. It's obviously not a normal project in several ways</p>",
        "id": 239483996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621453116
    },
    {
        "content": "<p>If we consider the rust analogy, rustc has a lot of options that are used specifically for the <code>std</code> crate: bootstrap stuff, stability markers, unstable macros, feature gates starting <code>rustc_</code></p>",
        "id": 239484374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621453272
    },
    {
        "content": "<p>I don't think they even can use cargo and use a custom <code>x.py</code> wrapper around cargo</p>",
        "id": 239484448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621453308
    },
    {
        "content": "<p>I can imagine that mathlib will be in a similar situation, requiring some additional features from the package manager that aren't normally exercised by \"regular\" packages, and also having to wrap the package manager to do other mathlib-specific bookkeeping</p>",
        "id": 239484609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621453375
    },
    {
        "content": "<p>The module system and package system are very much up for debate. It is clear we want a better story than we have today but it's not quite clear what the target is yet. There are also multiple implementation strategies. What would certainly be helpful would be to gather some of the requirements you folks see</p>",
        "id": 239484863,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1621453503
    },
    {
        "content": "<p>The main requirement that I see at the moment for mathlib would be the leanpkg-side support for <a href=\"#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239343061\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/treating.20mathlib.20as.20a.20stdlib/near/239343061</a> . Since the dependencies here are implicit, the manifest itself only has to declare the location of mathlib4 as normal, but perhaps should include an extra option to download/build only files that are imported, unless that becomes the default option (building on demand by default is probably more reasonable than download on demand for a normal package)</p>",
        "id": 239485886,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621453954
    },
    {
        "content": "<p>Also, cargo works with <a href=\"http://crates.io\">crates.io</a> (and haskell stack works with stackage). Assuming we're going to continue using github as our \"package registry\", mathlib becomes special in another way, namely it's the only package to deliver pre-built object files in addition to sources. Right now we have <code>leanproject</code> for this, but maybe the necessary features can be bundled into <code>leanpkg</code></p>",
        "id": 239486503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621454212
    },
    {
        "content": "<p>I'm quite opposed to another package registry because maintaining a service is a non-trivial amount of effort. So ideally we can somehow leverage github, cachix (nix), <a href=\"http://crates.io\">crates.io</a> or nuget.</p>",
        "id": 239487989,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1621454775
    },
    {
        "content": "<p>Hmm... I understand the amount of work involved in maintaining a separate service. But how can you leverage existing services for package management? I'm genuinely curious.</p>",
        "id": 242241369,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623345840
    },
    {
        "content": "<p>GitHub and Cachix sound plausible because they are language agnostic but I'm not sure about Cargo.</p>",
        "id": 242241489,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623345876
    },
    {
        "content": "<p>Ah I mean <a href=\"http://crates.io\">crates.io</a>.</p>",
        "id": 242241537,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623345892
    },
    {
        "content": "<p>the <a href=\"http://crates.io\">crates.io</a> idea was from when we thought the lean build system would be a fork of cargo.</p>",
        "id": 242241603,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1623345919
    },
    {
        "content": "<p>And how you leverage them... well, at the fundamental level, they are storage containers for packages. And those packages are usually uploaded as blobs.</p>",
        "id": 242241724,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1623345971
    },
    {
        "content": "<p>I read that discussion already. But I couldn't really imagine how such a system would work without annoying the people involved with the Rust programming language. Like... are they fine with Lean using the <a href=\"http://crates.io\">crates.io</a> registry for something completely unrelated to Rust? npm already bans packages that are not actually JavaScript packages.</p>",
        "id": 242241831,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623346040
    },
    {
        "content": "<p>I should also qualify, that maintaining just a dumb storage layer would be quite easy using, say an azure storage account. It's the whole pretty UI, package search, etc. that's a lot of work.</p>",
        "id": 242241844,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1623346050
    },
    {
        "content": "<p>(retracted—invalidated by next message)</p>",
        "id": 242242026,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623346137
    },
    {
        "content": "<p>well, the crates idea was really more of a story for when you'd align quite closely with rust interop. Nuget on the other hand is language agnostic</p>",
        "id": 242242034,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1623346146
    },
    {
        "content": "<p>(albeit .net)</p>",
        "id": 242242039,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1623346151
    },
    {
        "content": "<p>I am not aware that we had in-depth conversations beyond just brainstorming options.</p>",
        "id": 242242114,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1623346188
    },
    {
        "content": "<p>I've been working on various experiments on Lean/Rust integration <a href=\"https://github.com/joehendrix/rustlean\">here</a> in my free time (which isn't a lot at the moment).</p>\n<p>I have a fork of cargo that is working to support \"external build systems\".  The idea is that Cargo will delegate to an external agent  how to compute various build steps such as building, fingerprinting, producing documentation, etc.  It's going fairly smooth on a technical level.  I think there's a lot of work that can be done to integrate the two languages if others are interested.</p>",
        "id": 242270641,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1623359000
    }
]