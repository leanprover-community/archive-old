[
    {
        "content": "<p>Here's an issue I ran into early on when porting <code>algebra.group.with_one</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.WithBot</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">WithOne</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Option</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">WithOne</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">none</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeTC</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">WithOne</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">some</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">unone</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">WithOne</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">WithBot.unbot</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">unone_coe</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">WithOne</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">unone</span> <span class=\"n\">hx</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">failed to synthesize instance</span>\n<span class=\"cm\">  OfNat (Option α) 1</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>It can be fixed by replacing <code>1</code> with <code>(1 : WithOne α)</code> or also, amusingly, with <code>_</code>, but the latter makes the lemma unreadable and the former is going to get old very soon... . Is there a way of making <code>1</code> work?</p>",
        "id": 313577964,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670010936
    },
    {
        "content": "<p>Oh, that's the same issue as with WithBot, I think</p>",
        "id": 313578520,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1670011169
    },
    {
        "content": "<p>Which was solved by defining WithBot.some?</p>",
        "id": 313578691,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1670011220
    },
    {
        "content": "<p>Yes, this is a bad instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeTC</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">WithOne</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">some</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>because it says it's going to convert a <code>α -&gt; WithOne α</code> but it is actually a function with the type <code>α -&gt; Option α</code></p>",
        "id": 313578986,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670011313
    },
    {
        "content": "<p>which is bad when coercions are eagerly unfolded to their definitions</p>",
        "id": 313579064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670011332
    },
    {
        "content": "<p>I would call it <code>WithBot.coe</code> instead of <code>WithBot.some</code>. The use of <code>some</code> here was abuse from the beginning</p>",
        "id": 313579207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670011397
    },
    {
        "content": "<p>OK thanks, I'm being inspired by <code>WithBot</code>. I'll call it <code>coe</code>.</p>",
        "id": 313580118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670011701
    },
    {
        "content": "<p>This was fine in mathlib3 because we could use the global <code>coe</code> as the name for the operation, but we can't now that it unfolds</p>",
        "id": 313581322,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670012178
    },
    {
        "content": "<p>Oh! <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, note that we've <em>just</em> split this file in mathlib3. It is now <code>algebra.group.with_one.defs</code> that needs porting.</p>",
        "id": 313609130,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670024580
    },
    {
        "content": "<p><code>algebra.group.with_one</code> itself no longer exists.</p>",
        "id": 313609151,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670024592
    },
    {
        "content": "<p>Oh nice! Thanks for letting me know!</p>",
        "id": 313609452,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670024766
    }
]