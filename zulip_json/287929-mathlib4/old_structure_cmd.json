[
    {
        "content": "<p>I understand that <code>old_structure_cmd</code> has been removed from Lean4. Does this mean that we have to manually restore the long chains of dots, e.g. <code>LinearEquiv.AddEquiv.AddHom.toFun</code> instead of <code>LinearEquiv.toFun</code>? How are the field diamonds handled then, e.g. <code>LinearEquiv.AddEquiv.AddHom.toFun</code> vs <code>LinearEquiv.AddEquiv.Equiv.toFun</code>?</p>",
        "id": 311090923,
        "sender_full_name": "Winston Yin",
        "timestamp": 1668912273
    },
    {
        "content": "<p>I think the way it works is that when you write <code>extends</code>, if there are overlapping fields, then only the first thing you are extending is the \"true\" ancestor and the extra fields from the second structure get inlined. That means that the fields that have overlapping names are really taken only from the first structure.</p>\n<p>Someone please correct me if I'm wrong.</p>",
        "id": 311091162,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668912585
    },
    {
        "content": "<p>I'm not sure if the chains of dots are necessary or if there is a better way.</p>",
        "id": 311091221,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668912630
    },
    {
        "content": "<p>the chain of dots should not be necessary (neither in lean 3 or lean 4)</p>",
        "id": 311091320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668912756
    },
    {
        "content": "<p>Consider the Lean3 code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">monoid_hom</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">mul_one_class</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_one_class</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">one_hom</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"bp\">→ₙ*</span> <span class=\"n\">N</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">monoid_hom.to_fun</span> <span class=\"c1\">-- ... (M →* N) → M → N</span>\n</code></pre></div>\n<p>In Lean4 without the old structure, a function like <code>monoid_hom.to_fun</code> would have to be rewritten as <code>fun f : MonoidHom M N =&gt; f.toFun</code>.</p>",
        "id": 311092369,
        "sender_full_name": "Winston Yin",
        "timestamp": 1668913965
    },
    {
        "content": "<blockquote>\n<p>then only the first thing you are extending is the \"true\" ancestor and the extra fields from the second structure get inlined</p>\n</blockquote>\n<p>Does this mean we can emulate the old behavior by adding</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">old_structure_base.</span>\n</code></pre></div>\n<p>and always using this as the first ancestor?</p>",
        "id": 311119264,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668939790
    },
    {
        "content": "<p>no, because as long as the fields are disjoint you can still have multiple \"preferred parents\"</p>",
        "id": 311125375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668943285
    },
    {
        "content": "<p>you would need <code>old_structure_base</code> to have a copy of every field, and this would cause problems of its own</p>",
        "id": 311125475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668943333
    },
    {
        "content": "<p>If <code>A</code> extends <code>B</code> and <code>C</code>, <code>C</code> extends <code>D</code>, <code>B</code> and <code>D</code> have disjoint fields but <code>B</code> shares a field with <code>C</code>, is <code>D</code> a \"preferred parent\" of <code>A</code>?</p>",
        "id": 311126472,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668943895
    },
    {
        "content": "<p>I believe so</p>",
        "id": 311126640,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668943967
    },
    {
        "content": "<p>that is to say, it is a field of <code>A</code></p>",
        "id": 311126654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668943975
    },
    {
        "content": "<p>because <code>C</code> is splatted into <code>A</code> which pulls all the fields in, including <code>toD</code></p>",
        "id": 311126727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668944015
    },
    {
        "content": "<p>Here's a strange behaviour. Given that <code>MonoidHom</code> extends <code>OneHom</code>, and the latter has a <code>toFun</code> field, <code>#check MonoidHom.toFun</code> gives the error <code>unknown constant</code>. As above, one has to do <code>fun f : MonoidHom M N =&gt; f.toFun</code> for the intended effect. <strong>However</strong>, <code>def MonoidHom.toFun ...</code> fails as well, with the error <code>structure 'MonoidHom' has field 'toFun'</code>.</p>\n<p>So basically I'm neither able to use <code>MonoidHom.toFun</code>, nor allowed to define it?</p>",
        "id": 311199596,
        "sender_full_name": "Winston Yin",
        "timestamp": 1668990797
    }
]