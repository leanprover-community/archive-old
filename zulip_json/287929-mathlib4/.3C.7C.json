[
    {
        "content": "<p>Can we maybe just have mathport translate <code>$</code> to a function application? I find <code>&lt;|</code> really unreadable.</p>",
        "id": 317692844,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671873353
    },
    {
        "content": "<p>(Not that <code>$</code> was great in the first place, but still.)</p>",
        "id": 317692906,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671873378
    },
    {
        "content": "<p>e.g. in this kind of stuff (excerpted)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Part</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Part</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">Fix.approx</span> <span class=\"o\">:</span> <span class=\"n\">Stream'</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Part</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">β</span> <span class=\"n\">a</span>\n<span class=\"kd\">def</span> <span class=\"n\">fixAux</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Upto</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Upto</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Part</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Part</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 317693235,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671873587
    },
    {
        "content": "<p>I assume you mean in statements not proofs?</p>",
        "id": 317697969,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671876047
    },
    {
        "content": "<p>Yes, that would be fine</p>",
        "id": 317698294,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671876212
    },
    {
        "content": "<p>I wouldn't say unreadable, but I don't understand why there are two semantically equal pieces of syntax in this case. I mean, I see why we have <code>-&gt;</code> and the unicode arrow. But for <code>$</code> and <code>&lt;|</code>, I don't understand.</p>",
        "id": 317707827,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671880890
    },
    {
        "content": "<p>Does <code>$</code> still exist?</p>",
        "id": 317708065,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671881002
    },
    {
        "content": "<p>Yes, it does</p>",
        "id": 317708396,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671881134
    },
    {
        "content": "<p>When I write Lean 4 code I use <code>$</code> instead of <code>&lt;|</code> because it's shorter and because it's \"radically different\" from <code>&lt;|</code>, which makes code more readable, I'd say</p>",
        "id": 317709306,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671881491
    },
    {
        "content": "<p>I know that <code>&lt;|</code> is there to contrast with <code>|&gt;</code>, but it requires more effort to parse code with human eyes while carefully differentiating the two</p>",
        "id": 317709652,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671881588
    },
    {
        "content": "<p>Perhaps it is the fonts? Fira Code eg. renders these as triangles, so they are nice and wide and looks reasonable.</p>",
        "id": 317709944,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1671881715
    },
    {
        "content": "<p>I find it hard to explain any objective advantage of <code>$</code>--perhaps it's just that I already have decades of experience processing it</p>",
        "id": 317710018,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671881761
    },
    {
        "content": "<p>But anyways, I guess another option then would be to translate <code>$</code> to <code>$</code>.</p>",
        "id": 317710077,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671881777
    },
    {
        "content": "<p>I think in $ is from haskell and &lt;| from F# , the idea is that function application is left associative and highest precedence by default, but when writing long composition chain(think <code>f(g(h(i(j(x)))))</code>), it might make sense to have an operator like this to avoid large numbers of brackets.<br>\n(EDIT: $ is also left associative, but with low precedence).</p>",
        "id": 317710505,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671881970
    },
    {
        "content": "<p>At least in haskell. one can get away without using this by the compose operator. Is there an equivalent for lean and how would it work for dependent products?</p>",
        "id": 317712139,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671882648
    },
    {
        "content": "<p>Does jump-to-definition work for <code>&lt;|</code> for anybody? It does not for me in Emacs. I would feel better about these kinds of lesser-known operators if jump-to-definition did work.</p>",
        "id": 317720843,
        "sender_full_name": "David Renshaw",
        "timestamp": 1671886396
    },
    {
        "content": "<p>it shows what it is, on VS Code<br>\nI think it's built-in operator</p>",
        "id": 317854255,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1671985348
    },
    {
        "content": "<p>There isn't a huge difference between builtin and user-defined operators in lean 4, because everything is defined through lean <code>syntax</code> declarations including the builtin syntax. I'm getting hover but no go-to-def for <code>&lt;|</code>, <code>$</code> and <code>|&gt;</code> in vscode.</p>",
        "id": 317855156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671986030
    },
    {
        "content": "<p>oh nvm, I get go-to-def as long as there isn't also an error over the span</p>",
        "id": 317855267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671986101
    },
    {
        "content": "<p>Ah, in Emacs, <code>xref-find-definition</code> (in my setup <code>M-.</code>) does <em>not</em> work for me on these operators, but <code>lsp-find-definition</code> (<code>C-c C-l g g</code>) does. For most things, either of those commands successfully jumps to definition for me.</p>",
        "id": 317862000,
        "sender_full_name": "David Renshaw",
        "timestamp": 1671990950
    }
]