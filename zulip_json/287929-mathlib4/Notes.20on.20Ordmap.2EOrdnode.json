[
    {
        "content": "<p>(should this be <code>OrdMap</code>/<code>OrdNode</code>)?</p>\n<p>I fixed a bunch of red here, including major surgery to <code>repr</code> to address the changes to <code>Repr</code> in Lean 4.</p>\n<p>It's broken with <code>failed to elaborate eliminator, expected type is not available</code>on<code>recOn</code> uses, for which I understand there's a fix involving implicits and motives, but I don't follow the various Zulip discussions. There's also a very odd issue with <code>ofList'</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">IR</span> <span class=\"n\">check</span> <span class=\"n\">failed</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">Ordnode.ofList'._rarg'</span><span class=\"o\">,</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">List.decidableChain'</span>\n</code></pre></div>",
        "id": 321431281,
        "sender_full_name": "Arien Malec",
        "timestamp": 1673749751
    },
    {
        "content": "<p>I'm not at all sure if <code>Ordnode</code> works after all the fixes; when I try to test</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">}:</span> <span class=\"n\">Ordnode</span>\n</code></pre></div>\n<p>I get a typeclass instance problem.</p>",
        "id": 321431743,
        "sender_full_name": "Arien Malec",
        "timestamp": 1673750119
    },
    {
        "content": "<p>there should be parens?</p>",
        "id": 321432238,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673750559
    },
    {
        "content": "<p>the typeclass instance problem would be a missing <code>Insert</code> instance. I'm not sure that was ever made to work</p>",
        "id": 321432264,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673750600
    },
    {
        "content": "<p>link for convenience: <a href=\"https://github.com/leanprover-community/mathlib4/pull/1455\">mathlib4#1455</a></p>",
        "id": 321433894,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1673751711
    },
    {
        "content": "<p>Sigh, my ability to put a PR link in correctly is…poor.</p>",
        "id": 321437711,
        "sender_full_name": "Arien Malec",
        "timestamp": 1673755224
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">}:</span> <span class=\"n\">Ordnode</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(((</span><span class=\"bp\">∅</span> <span class=\"mi\">1</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">∅</span> <span class=\"mi\">3</span> <span class=\"bp\">∅</span><span class=\"o\">))</span> <span class=\"mi\">4</span> <span class=\"o\">(</span><span class=\"bp\">∅</span> <span class=\"mi\">5</span> <span class=\"bp\">∅</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 321437763,
        "sender_full_name": "Arien Malec",
        "timestamp": 1673755291
    },
    {
        "content": "<p>that looks like it's working</p>",
        "id": 321437992,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673755459
    }
]