[
    {
        "content": "<p>Hi,<br>\nI am trying to port <code>group_theory/group_action/opposites</code> and there is a bunch of similar errors that I can't fix, where Lean can't find instances that are explicitly given in the arguments. I would appreciate some help if anyone sees how to fix this. See <a href=\"https://github.com/leanprover-community/mathlib4/pull/1001\">#1001</a>, the first of these error is on line 45.</p>",
        "id": 315730442,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1670989238
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">N</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsScalarTower</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">α</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unop_injective</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">smul_assoc</span> <span class=\"n\">α</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)⟩</span>\n</code></pre></div>\n<p>but I don't know why it fails with <code>smul_assoc _ _ _</code>... Without specifying <code>N</code> it fails synthesizing <code>IsScalarTower M N α</code> as it tries to unify <code>@IsScalarTower M N α inst✝³ inst✝¹ inst✝²</code> with <code>IsScalarTower M N α inst✝³ (MulOpposite.instSMulMulOpposite α N) inst✝²</code> and fails. (<code>inst✝¹</code> is <code>[SMul N α]</code>)</p>\n<p>Maybe that's enough info for <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> or <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> to spot what's going on?</p>\n<p>Another working proof in tactic mode:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">constructor</span>\n<span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span>\n<span class=\"n\">apply</span> <span class=\"n\">unop_injective</span>\n<span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">unop</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">y</span> <span class=\"bp\">•</span> <span class=\"n\">unop</span> <span class=\"n\">z</span>  <span class=\"c1\">-- In Lean3 the same proof works without this line.</span>\n<span class=\"n\">exact</span> <span class=\"n\">smul_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 315788496,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1671015393
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">N</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsScalarTower</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">α</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unop_injective</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">smul_assoc</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">a</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 315872579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671038731
    },
    {
        "content": "<p>Or also</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">N</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsScalarTower</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">α</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unop_injective</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">smul_assoc</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">a.unop</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>I think I'm gonna go with that last one.</p>",
        "id": 315875295,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1671039523
    },
    {
        "content": "<p>yeah that last one is perfect because there is no defeq abuse. What happens if you remove <code>m</code>? When I replaced <code>m</code>s by <code>_</code>s it broke again.</p>",
        "id": 315881585,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671041271
    },
    {
        "content": "<p>Yes it seems like the <code>m</code> and <code>n</code> are necessary, I'm not sure why.</p>",
        "id": 315884492,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1671041441
    },
    {
        "content": "<p>It might be worth redoing Jon's analysis above in this case (I would do it but I only have a little more Lean time and I want to spend it talking in another thread about the lint errors in the file, which I was just thinking about on the tube home)</p>",
        "id": 315884672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671041503
    }
]