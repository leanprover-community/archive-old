[
    {
        "content": "<p>How do I call <code>simp</code> from meta code? I have a name of a local hypothesis and I want to run <code>simp only [h] at *</code>.</p>",
        "id": 312397074,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669497302
    },
    {
        "content": "<p>(do I need to explicitly remove <code>h</code> from <code>*</code>?)</p>",
        "id": 312397098,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669497324
    },
    {
        "content": "<p>Sorry <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>, I should have posted this snippet before, which may be helpful:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Meta</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Meta</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Elab.Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">simpTheoremsOfNames</span> <span class=\"o\">(</span><span class=\"n\">lemmas</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">SimpTheorems</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">lemmas.foldlM</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">addConst</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">simpOnlyBuiltins.foldlM</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">addConst</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">{})</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">simpOnlyNames</span> <span class=\"o\">(</span><span class=\"n\">lemmas</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Simp.Result</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">e</span> <span class=\"o\">{</span> <span class=\"n\">simpTheorems</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">simpTheoremsOfNames</span> <span class=\"n\">lemmas</span><span class=\"o\">],</span> <span class=\"n\">congrTheorems</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">getSimpCongrTheorems</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">categorySimp</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Simp.Result</span> <span class=\"o\">:=</span>\n  <span class=\"n\">simpOnlyNames</span> <span class=\"o\">[</span><span class=\"bp\">``</span><span class=\"n\">Category.comp_id</span><span class=\"o\">,</span> <span class=\"bp\">``</span><span class=\"n\">Category.id_comp</span><span class=\"o\">,</span> <span class=\"bp\">``</span><span class=\"n\">Category.assoc</span><span class=\"o\">]</span> <span class=\"n\">e</span>\n</code></pre></div>",
        "id": 312499262,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669570937
    },
    {
        "content": "<p>Can you PR it?</p>",
        "id": 312516460,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669581629
    },
    {
        "content": "<p>These are coming as part of <a href=\"https://github.com/leanprover-community/mathlib4/pull/749\">https://github.com/leanprover-community/mathlib4/pull/749</a>. Once I have a green tick there I can slice it up.</p>",
        "id": 312517971,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669582758
    },
    {
        "content": "<p>I see a green tick there</p>",
        "id": 312520791,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1669584973
    },
    {
        "content": "<p>Okay <a href=\"https://github.com/leanprover-community/mathlib4/pull/755\">mathlib4#755</a> has just the meta code.</p>",
        "id": 312523025,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669586700
    },
    {
        "content": "<p>Can you add <code>location</code> parameter?</p>",
        "id": 312528226,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669590923
    },
    {
        "content": "<p>I mean, those functions are intended to operate purely on <code>Expr</code>s, not interacting with a local context or goals.</p>",
        "id": 312528515,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669591237
    },
    {
        "content": "<p>Yury you might want to have a look at <code>simpLocation</code> in core and <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Zify.lean#L68\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Zify.lean#L68</a> for creating a <code>Simp.Context</code></p>",
        "id": 312529641,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1669592329
    },
    {
        "content": "<p>so it should be something along the lines of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"bp\">←</span> <span class=\"n\">mkSimpContext</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]))</span> <span class=\"n\">false</span>\n<span class=\"n\">simpLocation</span> <span class=\"n\">ctx</span> <span class=\"n\">location</span>\n</code></pre></div>",
        "id": 312529859,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1669592532
    },
    {
        "content": "<p>The problem here is when you have to interpolate <code>Name</code>s or <code>FVarId</code>s that you have on hand back into that <code>`(tactic| ...)</code>.</p>",
        "id": 312530611,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669593283
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Could you please help with <a href=\"https://github.com/leanprover-community/mathlib4/pull/723\">mathlib4#723</a>? The missing bit is <code>simp only [← ${eqName}] at *</code> after the first <code>replaceMainGoal</code> if <code>eqName ≠ `rfl</code>.</p>",
        "id": 312883370,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669739854
    },
    {
        "content": "<p>Also, the tactic code probably needs a thorough review.</p>",
        "id": 312883554,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669739896
    },
    {
        "content": "<p>Is there a test file? How am I meant to tell if I do it right? :-)</p>",
        "id": 312924348,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669751257
    },
    {
        "content": "<p>Here's a guess:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">if</span> <span class=\"n\">eqName</span> <span class=\"bp\">≠</span> <span class=\"bp\">`</span><span class=\"n\">rfl</span> <span class=\"k\">then</span>\n      <span class=\"c1\">-- We want to run `simp only [← $eqName] at *`,</span>\n      <span class=\"c1\">-- but `eqName` is just a user facing name, and we need to resolve it first.</span>\n      <span class=\"c1\">-- This feels like we swimming against the current, but we convert it from</span>\n      <span class=\"c1\">-- `Name` to `LocalDecl` to `FVarId` to `Expr` to `Syntax`...</span>\n      <span class=\"k\">let</span> <span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">Expr.fvar</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLocalDeclFromUserName</span> <span class=\"n\">eqName</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fvarId</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSyntax</span>\n      <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"bp\">$</span><span class=\"n\">eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 312924371,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669751268
    },
    {
        "content": "<p>I'm happy to have a go at refactoring this, but some tests (whether passing or failing!) would be nice.</p>",
        "id": 312924539,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669751335
    }
]