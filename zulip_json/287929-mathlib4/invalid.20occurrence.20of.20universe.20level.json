[
    {
        "content": "<p>I have a universe error which I can't fathom out; this arises when porting Logic.Equiv.Basic.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Equiv.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Prod.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Equiv</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">prodCongr</span> <span class=\"o\">{</span><span class=\"n\">α₁</span> <span class=\"n\">β₁</span> <span class=\"n\">α₂</span> <span class=\"n\">β₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"o\">:</span> <span class=\"n\">α₁</span> <span class=\"bp\">≃</span> <span class=\"n\">α₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">β₁</span> <span class=\"bp\">≃</span> <span class=\"n\">β₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α₁</span> <span class=\"bp\">×</span> <span class=\"n\">β₁</span> <span class=\"bp\">≃</span> <span class=\"n\">α₂</span> <span class=\"bp\">×</span> <span class=\"n\">β₂</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">Prod.map</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">,</span> <span class=\"n\">Prod.map</span> <span class=\"n\">e₁.symm</span> <span class=\"n\">e₂.symm</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">equiv.prod_congr</span> <span class=\"n\">Equiv.prodCongr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">prodPUnit</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">PUnit.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"bp\">≃</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p.1</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">PUnit.unit</span><span class=\"o\">),</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">PUnit.unit</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">prodUnique</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Unique</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">≃</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">((</span><span class=\"n\">Equiv.refl</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prodCongr</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">equivPUnit</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">prodPUnit</span> <span class=\"n\">α</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">invalid occurrence of universe level 'u_3' at 'Equiv.prodUnique', it does not occur at the declaration type, nor it is explicit universe level provided by the user, occurring at expression</span>\n<span class=\"cm\">  Equiv.trans.{max (u_1 + 1) (u_2 + 1), max (u_1 + 1) (u_3 + 1), u_1 + 1}</span>\n<span class=\"cm\">    (prodCongr.{u_1, u_2, u_1, u_3} (Equiv.refl.{u_1 + 1} α) (equivPUnit.{u_2 + 1, u_3 + 1} β)) (prodPUnit.{u_3, u_1} α)</span>\n<span class=\"cm\">at declaration body</span>\n<span class=\"cm\">  fun (α : Type u_1) (β : Type u_2) [Unique β] =&gt; Equiv.trans (prodCongr (Equiv.refl α) (equivPUnit β)) (prodPUnit α)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Any clues?</p>",
        "id": 310908770,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668800911
    },
    {
        "content": "<p>It means that the universe level of the <code>PUnit</code> is unspecified in the body of the definition.</p>",
        "id": 310909374,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1668801136
    },
    {
        "content": "<p>It could be <code>v+1</code> or <code>v+100</code> or etc. (if <code>β : Type v</code>)</p>",
        "id": 310909413,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1668801153
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">prodUnique</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Unique</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">≃</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">((</span><span class=\"n\">Equiv.refl</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prodCongr</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">equivPUnit.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">10</span><span class=\"o\">}</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">prodPUnit</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 310909524,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1668801200
    },
    {
        "content": "<p>Not sure where to best put the level annotation.</p>",
        "id": 310909565,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1668801219
    },
    {
        "content": "<p>Thanks! This worked in Lean 3. Is this something which needs flagging?</p>",
        "id": 310909596,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668801235
    },
    {
        "content": "<p>wooah I went for <code>v + 37</code> of course, and I got</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">maximum</span> <span class=\"kd\">universe</span> <span class=\"n\">level</span> <span class=\"n\">offset</span> <span class=\"n\">threshold</span> <span class=\"o\">(</span><span class=\"mi\">32</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span><span class=\"o\">,</span> <span class=\"n\">you</span> <span class=\"n\">can</span> <span class=\"n\">increase</span> <span class=\"n\">the</span> <span class=\"n\">limit</span> <span class=\"n\">using</span> <span class=\"n\">option</span> <span class=\"bp\">`</span><span class=\"kd\">set_option</span> <span class=\"n\">maxUniverseOffset</span> <span class=\"bp\">&lt;</span><span class=\"n\">limit</span><span class=\"bp\">&gt;`</span><span class=\"o\">,</span> <span class=\"n\">but</span> <span class=\"n\">you</span> <span class=\"n\">are</span> <span class=\"n\">probably</span> <span class=\"n\">misusing</span> <span class=\"kd\">universe</span> <span class=\"n\">levels</span> <span class=\"n\">since</span> <span class=\"n\">offsets</span> <span class=\"n\">are</span> <span class=\"n\">usually</span> <span class=\"n\">small</span> <span class=\"n\">natural</span> <span class=\"n\">numbers</span>\n</code></pre></div>",
        "id": 310909741,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668801286
    },
    {
        "content": "<p>lol at \"you are probably misusing universe levels\"</p>",
        "id": 310909840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668801323
    },
    {
        "content": "<p>PS is the name <code>pUnitProd</code> for <code>PUnit × α ≃ α</code>? My understanding is that we're not going for <code>lE</code> but perhaps <code>pUnit</code> is less bad</p>",
        "id": 310910111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668801425
    },
    {
        "content": "<p>I've been using <code>punitProd</code> when it shows up at the beginning of a word... I guess that's not consistent with the current advice</p>",
        "id": 310910368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668801513
    },
    {
        "content": "<p>I like <code>punit</code> too.</p>",
        "id": 310953406,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668821855
    },
    {
        "content": "<p>Can someone have a look at PR 649 which typecheck but lints with similar issues?</p>",
        "id": 310956801,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668825172
    },
    {
        "content": "<p>Sorry PR <a href=\"https://github.com/leanprover-community/mathlib/pull/638\">#638</a></p>",
        "id": 310957080,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668825520
    },
    {
        "content": "<p>(On mobile- excuse the bad link)</p>",
        "id": 310957116,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668825560
    }
]