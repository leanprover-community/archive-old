[
    {
        "content": "<p>I just noticed that there has been some movement on this front in lean 4 core recently. To recap, I suggested a notation for tactic blocks that looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">show</span> <span class=\"n\">foo</span> <span class=\"kd\">by</span>\n  <span class=\"bp\">-</span> <span class=\"n\">apply</span> <span class=\"n\">bla</span>\n    <span class=\"o\">(</span><span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">)</span>\n    <span class=\"bp\">-</span> <span class=\"n\">finish</span>\n    <span class=\"bp\">-</span> <span class=\"n\">apply</span> <span class=\"n\">bar</span>\n      <span class=\"n\">exact</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>Sebastian noted that this causes a parser ambiguity with the infix subtraction operator, meaning that parentheses are required around tactics that have a trailing expr and produce multiple goals, like <code>apply le_antisymm</code> in this example. This has now landed in lean core, with the notation <code>·</code> or <code>.</code> (user's choice).</p>\n<p>I'm very keen on using this everywhere, I think it's much better than the alternatives for block structuring, but I would like to see what people think about whether we should use <code>.</code> or <code>·</code> (or something else, I suppose, assuming it doesn't have the same downsides as Coq-inspired <code>+</code>, <code>-</code>, <code>*</code>, which all have the bad luck of being common mathematical infix operators in addition to being ascii bullet points).</p>",
        "id": 246907372,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626988656
    },
    {
        "content": "<p>With dot:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">show</span> <span class=\"n\">foo</span> <span class=\"kd\">by</span>\n  <span class=\"bp\">.</span> <span class=\"n\">apply</span> <span class=\"n\">bla</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span>\n    <span class=\"bp\">.</span> <span class=\"n\">finish</span>\n    <span class=\"bp\">.</span> <span class=\"n\">apply</span> <span class=\"n\">bar</span>\n      <span class=\"n\">exact</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>With center dot:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">show</span> <span class=\"n\">foo</span> <span class=\"kd\">by</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">bla</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span>\n    <span class=\"bp\">·</span> <span class=\"n\">finish</span>\n    <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">bar</span>\n      <span class=\"n\">exact</span> <span class=\"n\">y</span>\n</code></pre></div>",
        "id": 246907563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626988783
    },
    {
        "content": "<p>The version with parentheses around <code>apply le_antisymm</code> is really <em>ugly</em> (and I guess the error message without parentheses is probably very confusing).  The version with centered dots is ok but I still prefer Lean3's braces.</p>",
        "id": 246911036,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626991264
    },
    {
        "content": "<p>Actually I take it back, I think the version with centered dots in <em>not</em> ok at all. This completely breaks the usual semantics of bullets in enumerations. Bullets introduce an item, they don't introduced a new sub-list</p>",
        "id": 246911247,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626991386
    },
    {
        "content": "<p>Could we get back our braces?</p>",
        "id": 246911277,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626991419
    },
    {
        "content": "<p>Or, even better, braces that don't work if you put them alone on a line, as so many new users love to do.</p>",
        "id": 246911348,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626991459
    },
    {
        "content": "<p>Is there a reason <code>|</code> can't be used here in place of <code>.</code>?</p>",
        "id": 246911856,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626991866
    },
    {
        "content": "<p>That would make it match the induction-like tactics, but instead of <code>| zero := by sorry</code>, just <code>| sorry</code> since the goals are unnamed</p>",
        "id": 246911960,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626991933
    },
    {
        "content": "<p>Is this just sugar for focus1 or whatever it's called?</p>",
        "id": 246913630,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626993290
    },
    {
        "content": "<p>yes</p>",
        "id": 246913734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626993371
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.22.C2.B7.20tac.22.20block.20notation/near/246911247\">said</a>:</p>\n<blockquote>\n<p>Actually I take it back, I think the version with centered dots in <em>not</em> ok at all. This completely breaks the usual semantics of bullets in enumerations. Bullets introduce an item, they don't introduced a new sub-list</p>\n</blockquote>\n<p>I don't follow. This seems like pretty usual syntax for bullet lists:</p>\n<ul>\n<li>\n<p>This is a major point.<br>\n  This is more elaboration on the major point.</p>\n<ul>\n<li>\n<p>The point has multiple sub-points, this is one of them.<br>\n   More elaboration on the first sub-point.</p>\n</li>\n<li>\n<p>This is another sub-point. It's self evident so I don't need to elaborate.</p>\n</li>\n</ul>\n</li>\n</ul>",
        "id": 246913882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626993526
    },
    {
        "content": "<p>That is, we aren't thinking of each point as a \"list of tactics\" but more like a list of sentences/words, all on the same \"theme\"</p>",
        "id": 246913997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626993627
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.22.C2.B7.20tac.22.20block.20notation/near/246911036\">said</a>:</p>\n<blockquote>\n<p>The version with parentheses around <code>apply le_antisymm</code> is really <em>ugly</em> (and I guess the error message without parentheses is probably very confusing).  The version with centered dots is ok but I still prefer Lean3's braces.</p>\n</blockquote>\n<p>Sure, I don't disagree about that. That was just temporary syntax, obviously we want to fix the parser to make it work as expected</p>",
        "id": 246914062,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626993708
    },
    {
        "content": "<p>or use another notation, like the dot</p>",
        "id": 246914113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626993731
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.22.C2.B7.20tac.22.20block.20notation/near/246911348\">said</a>:</p>\n<blockquote>\n<p>Or, even better, braces that don't work if you put them alone on a line, as so many new users love to do.</p>\n</blockquote>\n<p>Actually, this is my last lifeline for being able to see the goal state since <code>end</code> doesn't exist any more. I think we still have some UX work to do regarding the end of the <code>by</code> list; what does isabelle do? I think they have a similar unterminated syntax but I don't recall this being an issue</p>",
        "id": 246914272,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626993878
    },
    {
        "content": "<p>How about § <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 246914484,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626994037
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.22.C2.B7.20tac.22.20block.20notation/near/246911856\">said</a>:</p>\n<blockquote>\n<p>Is there a reason <code>|</code> can't be used here in place of <code>.</code>?</p>\n</blockquote>\n<p><code>|</code> would kind of work but it seems semantically wrong. In fitch style proofs you use <code>|</code> to show scoping of temporary assumptions, which is unmarked in lean proofs (the ends of scopes roughly match the end of subgoals but the start of a scope can be anywhere in the list)</p>",
        "id": 246914589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626994121
    },
    {
        "content": "<p>it also doesn't really say \"list item\" like <code>-</code> et al</p>",
        "id": 246914670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626994200
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.22.C2.B7.20tac.22.20block.20notation/near/246913882\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.22.C2.B7.20tac.22.20block.20notation/near/246911247\">said</a>:</p>\n<blockquote>\n<p>Actually I take it back, I think the version with centered dots in <em>not</em> ok at all. This completely breaks the usual semantics of bullets in enumerations. Bullets introduce an item, they don't introduced a new sub-list</p>\n</blockquote>\n<p>I don't follow. This seems like pretty usual syntax for bullet lists:</p>\n<ul>\n<li>\n<p>This is a major point.<br>\n  This is more elaboration on the major point.</p>\n<ul>\n<li>\n<p>The point has multiple sub-points, this is one of them.<br>\n   More elaboration on the first sub-point.</p>\n</li>\n<li>\n<p>This is another sub-point. It's self evident so I don't need to elaborate.</p>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>You're not serious, right? The issue is that those tactics scripts are not simply not bullet lists.</p>",
        "id": 246914979,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626994474
    },
    {
        "content": "<p>In a proof by cases, you only have two bullets for the two cases. The proof inside each case is a list of sentences, there are no bullets</p>",
        "id": 246915023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626994514
    },
    {
        "content": "<p>it's not like you are listing/enumerating the tactics</p>",
        "id": 246915037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626994528
    },
    {
        "content": "<p>About the end of proofs, there is a 100% standard symbol for that, it's a small square. Is that what you are looking for?</p>",
        "id": 246915054,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626994544
    },
    {
        "content": "<p>that would be neato</p>",
        "id": 246915063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626994553
    },
    {
        "content": "<p>What does neato mean? Google says it mean a cleaning robot.</p>",
        "id": 246915147,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626994610
    },
    {
        "content": "<p>lol</p>",
        "id": 246915158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626994618
    },
    {
        "content": "<p>I'm not really interested in ending proofs with it permanently though, which is what the square usually does</p>",
        "id": 246915199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626994674
    },
    {
        "content": "<p>I just want a way to see the goal state at the end of an unfinished proof</p>",
        "id": 246915251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626994692
    },
    {
        "content": "<p>Can anyone remind me why <code>begin</code> and <code>end</code> were dropped in Lean 4?</p>",
        "id": 246915281,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626994728
    },
    {
        "content": "<p>There is a lot less scoped syntax generally. Most nesting is denoted by whitespace instead of braces/parentheses</p>",
        "id": 246915329,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626994782
    },
    {
        "content": "<p>Is it only for the pleasure of creating difficulties?</p>",
        "id": 246915407,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626994807
    },
    {
        "content": "<p>It makes the syntax look a lot cleaner</p>",
        "id": 246915433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626994824
    },
    {
        "content": "<p>I certainly don't miss DON'T FORGET THE COMMA</p>",
        "id": 246915513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626994874
    },
    {
        "content": "<p>The end of proof square always looked very clean to me. And same for the word \"Proof:\" at the beginning.</p>",
        "id": 246915575,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626994898
    },
    {
        "content": "<p>In text it usually goes in the right margin though, that would be kind of weird in lean</p>",
        "id": 246915647,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626994931
    },
    {
        "content": "<p>Sure, commas won't be missed.</p>",
        "id": 246915657,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626994944
    },
    {
        "content": "<p>It's true that we don't have a good right margin.</p>",
        "id": 246915690,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626994974
    },
    {
        "content": "<p>How about the new arrow =&gt;? Even though that's overloaded with math meaning too.</p>",
        "id": 246915707,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626994992
    },
    {
        "content": "<p>it's two characters, that's a deal breaker for me because it screws up formatting</p>",
        "id": 246915731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626995017
    },
    {
        "content": "<p>We could use QED to flag end of proofs, that doesn't have to go to the right margin.</p>",
        "id": 246915832,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626995068
    },
    {
        "content": "<p>But they're trying to target nonmathematicians with the syntax, so QED is no go?</p>",
        "id": 246915884,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626995111
    },
    {
        "content": "<p>Yakov, we already agreed that <code>=&gt;</code> shouldn't be used in mathlib for anything which is not the implication logical operator.</p>",
        "id": 246915914,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626995150
    },
    {
        "content": "<p>it wouldn't be hard to make <code>qed</code> a synonym for <code>done</code>, but I dislike both options of having to clean it up after finishing a proof, and also having a useless tactic at the end of every block</p>",
        "id": 246915919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626995154
    },
    {
        "content": "<p>The syntax is flexible so you can, in mathlib land, add that as a syntactical symbol and lint got it.</p>",
        "id": 246915963,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626995167
    },
    {
        "content": "<p>I would really just like the goal view to be less picky about showing the goal state</p>",
        "id": 246915973,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626995180
    },
    {
        "content": "<p>and also <code>by</code> should be a valid expression on its own, equivalent to <code>by {}</code></p>",
        "id": 246916012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626995214
    },
    {
        "content": "<p>otherwise you start every proof with a syntax error (and lean is too busy telling you about your syntax error that it doesn't get around to showing the goal state)</p>",
        "id": 246916038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626995241
    },
    {
        "content": "<p>In my VScode I use an abbreviation that writes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>so I never have an error when I start a proof.</p>",
        "id": 246916134,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626995311
    },
    {
        "content": "<p>a downside of the <code>qed</code> tactic is that you would not be able to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">by</span>\n  <span class=\"n\">tac1</span>\n  <span class=\"n\">tac2</span>\n<span class=\"n\">qed</span>\n</code></pre></div>",
        "id": 246916221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626995403
    },
    {
        "content": "<p>But I should really go to sleep now.</p>",
        "id": 246916255,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626995412
    },
    {
        "content": "<p>If it is sugar for focus1, then why not 🔎?</p>",
        "id": 246916266,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626995416
    },
    {
        "content": "<p>The two convolved issues we're discussing is what syntax symbol(s) should indicate focusing on a goal, and which should indicate an end. Perhaps it'd be easier to decide on one of these before the other?</p>",
        "id": 246916271,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626995419
    },
    {
        "content": "<p>because <code>qed</code> is not in the list of tactics there</p>",
        "id": 246916336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626995489
    },
    {
        "content": "<p>Of course we can always just bring back <code>begin end</code></p>",
        "id": 246916421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626995549
    },
    {
        "content": "<p>or follow algol 68 with <code>by yb</code></p>",
        "id": 246916472,
        "sender_full_name": "Reid Barton",
        "timestamp": 1626995612
    },
    {
        "content": "<p>lol</p>",
        "id": 246916477,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626995618
    },
    {
        "content": "<p>actually we might be able to replace <code>by</code> itself, from <code>by tactic*</code> to <code>by tactic* qed?</code></p>",
        "id": 246916565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626995680
    },
    {
        "content": "<p>that would solve the indentation issue</p>",
        "id": 246916582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626995700
    },
    {
        "content": "<p>You'd then have the effect of allowing  nested \"by ... qed\" s, right?</p>",
        "id": 246916689,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626995804
    },
    {
        "content": "<p>I don't think <code>by</code> is a tactic right now</p>",
        "id": 246916710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626995828
    },
    {
        "content": "<p>it's another spelling of <code>focus</code> in lean 3</p>",
        "id": 246916725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626995855
    },
    {
        "content": "<p>Ah, so \"by\" doesn't focus now either.</p>",
        "id": 246916726,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626995856
    },
    {
        "content": "<p>it wouldn't be hard to add, it always seemed a little useless to me in lean 3</p>",
        "id": 246916767,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626995884
    },
    {
        "content": "<p>I guess some people like to use nested begin..end, it looks like algol to me</p>",
        "id": 246916807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626995934
    },
    {
        "content": "<p>I'm not a fan of keywords for braces</p>",
        "id": 246916833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626995961
    },
    {
        "content": "<p>How about using the \"stupid triangle\" character instead of <code>.</code> or a center dot? It feels a bit more like \"go in one level\" to me</p>",
        "id": 246916959,
        "sender_full_name": "Reid Barton",
        "timestamp": 1626996096
    },
    {
        "content": "<p>did you know there are multiple stupid triangle characters in lean? Some are reserved and unused</p>",
        "id": 246917013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626996129
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">reserve</span> <span class=\"kd\">infixr</span> <span class=\"bp\">`</span> <span class=\"bp\">▸</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">75</span>  <span class=\"c1\">-- eq.subst</span>\n<span class=\"kd\">reserve</span> <span class=\"kd\">infixr</span> <span class=\"bp\">`</span> <span class=\"bp\">▹</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">75</span>  <span class=\"c1\">-- not used</span>\n<span class=\"kd\">notation</span> <span class=\"n\">h1</span> <span class=\"bp\">▸</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">eq.subst</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n</code></pre></div>",
        "id": 246917037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626996168
    },
    {
        "content": "<p>the centerdot has a conveniently short syntax <code>\\.</code> btw, and the dot is an ascii character which is even better for typing. Not sure how much we should lean on that</p>",
        "id": 246917169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626996317
    },
    {
        "content": "<p>using gratuitous unicode for an extremely common operation seems like it will get old fast. I already dislike the amount of <code>\\lam</code> I have to type</p>",
        "id": 246917242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626996383
    },
    {
        "content": "<p>Why does a <code>-</code> conflict with the binary operation if it starts a line at the same indent level as the previous one?</p>",
        "id": 246917267,
        "sender_full_name": "Reid Barton",
        "timestamp": 1626996429
    },
    {
        "content": "<p>because infix parsers don't check the column</p>",
        "id": 246917276,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626996452
    },
    {
        "content": "<p>it's a lean problem that could be fixed in principle, but I guess they opted for the simpler solution</p>",
        "id": 246917285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626996471
    },
    {
        "content": "<p>hmm I see, I guess I'm used to indentation sensitivity happening before that kind of parsing</p>",
        "id": 246917338,
        "sender_full_name": "Reid Barton",
        "timestamp": 1626996502
    },
    {
        "content": "<p>it does mean that we will hit this issue again if we want to introduce any more syntaxy tactics</p>",
        "id": 246917343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626996511
    },
    {
        "content": "<p>Like in Haskell if you wrote</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code>  <span class=\"kr\">do</span>\n    <span class=\"n\">x</span>\n    <span class=\"o\">-</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>for some reason, I don't think it means <code>do (x - y)</code></p>",
        "id": 246917347,
        "sender_full_name": "Reid Barton",
        "timestamp": 1626996520
    },
    {
        "content": "<p>now it might conflict with unary minus, but that's not a problem for most other operators</p>",
        "id": 246917362,
        "sender_full_name": "Reid Barton",
        "timestamp": 1626996541
    },
    {
        "content": "<p>IIUC it's checked in the application parser, which I agree is a weird place to put it</p>",
        "id": 246917374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626996566
    },
    {
        "content": "<p>Is the center dot already reserved for the implicit lambda notation? so that it can't be an operator, I mean</p>",
        "id": 246917577,
        "sender_full_name": "Reid Barton",
        "timestamp": 1626996760
    },
    {
        "content": "<p>Right, since it gets parsed as a term, the application parser kicks in</p>",
        "id": 246917622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626996811
    },
    {
        "content": "<p>In emacs <code>\\t</code> is the stupid triangle, but I think it's different in VSCode...?</p>",
        "id": 246917657,
        "sender_full_name": "Reid Barton",
        "timestamp": 1626996843
    },
    {
        "content": "<p>no it's <code>\\t</code> as well</p>",
        "id": 246917699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626996856
    },
    {
        "content": "<p>the white triangle is apparently <code>\\transport</code></p>",
        "id": 246917713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626996872
    },
    {
        "content": "<p>I don't really mind <code>.</code> even except that it looks like some weird Forth-like language</p>",
        "id": 246917717,
        "sender_full_name": "Reid Barton",
        "timestamp": 1626996879
    },
    {
        "content": "<p>another idea would be <code>&gt;</code> for an ASCII version of the triangle, if not for the parsing issue</p>",
        "id": 246917748,
        "sender_full_name": "Reid Barton",
        "timestamp": 1626996922
    },
    {
        "content": "<p>/me should learn a concatenative language</p>",
        "id": 246917749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626996929
    },
    {
        "content": "<p>we pretty much reserved the whole keyboard already</p>",
        "id": 246917809,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626996990
    },
    {
        "content": "<p>After this discussion I'm currently leaning toward centerdot</p>",
        "id": 246917868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626997071
    },
    {
        "content": "<p>ok last bad idea: <code> ` </code></p>",
        "id": 246917927,
        "sender_full_name": "Reid Barton",
        "timestamp": 1626997099
    },
    {
        "content": "<p>isn't that going to mess with code formatting?</p>",
        "id": 246917943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626997129
    },
    {
        "content": "<p>I can imagine all the broken zulip posts</p>",
        "id": 246917956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626997145
    },
    {
        "content": "<p>Oh that kind of formatting</p>",
        "id": 246917974,
        "sender_full_name": "Reid Barton",
        "timestamp": 1626997173
    },
    {
        "content": "<p>honestly <code>&gt;</code> is pretty good, if we solve the infix issue. It's very visible and also ascii</p>",
        "id": 246918037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626997207
    },
    {
        "content": "<p>the mathematicians might complain about cultural appropriation</p>",
        "id": 246918050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626997224
    },
    {
        "content": "<p>By the way is there a reason that you needed a center dot (or whatever) immediately after <code>by</code> in your examples?</p>",
        "id": 246918147,
        "sender_full_name": "Reid Barton",
        "timestamp": 1626997325
    },
    {
        "content": "<p>No, that one is superfluous, sorry</p>",
        "id": 246918268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626997446
    },
    {
        "content": "<p>although I did notice that in some arrangements it looks odd when the first dot isn't there, like it breaks the pattern</p>",
        "id": 246918296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626997495
    }
]