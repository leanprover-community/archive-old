[
    {
        "content": "<p>Mathport seems to be replacing <code>quotient.induction_on s $</code> (for instance) with <code>(Quotient.induction_on s)</code>, when it should be <code>Quotient.inductionOn s &lt;|</code>.</p>",
        "id": 321295346,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1673666225
    },
    {
        "content": "<p>Indeed in one file I had to change a bunch of parenthesis for quotients manually.</p>",
        "id": 321298693,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1673670100
    },
    {
        "content": "<p>In general if there are weird errors around induction principle applications and there are weird parentheses, try deleting the parentheses</p>",
        "id": 321346989,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673698536
    },
    {
        "content": "<p>By the way, the reason this causes an error in lean 4 even though you would think that <code>(f x) y</code> and <code>f x y</code> are the same, is because lean (both 3 and 4) treats applications in \"groups\", so that for example if you had <code>foo : \\forall {a b} (c d), ..</code> then both <code>x</code> and <code>y</code> are affected in the application <code>@foo x y</code> in the sense that <code>x</code> goes in for <code>a</code> and <code>y</code> for <code>b</code>, while if you put parentheses in the middle as in <code>(@foo x) y</code> then <code>x</code> goes in for <code>a</code> and it is treated as having no more arguments (so <code>_</code> goes in for <code>b</code>), and then <code>y</code> goes in for <code>c</code>. This behavior is useful, since it means you can control when things are made explicit or not using variations like <code>foo a b</code>, <code>(foo a) b</code>, <code>(@foo a) b</code>, <code>@(foo a) b</code> and <code>@(foo a b)</code>, all of which do slightly different things.</p>\n<p>In this case, we are using the <code>@[elab_as_elim]</code> method, which requires that the eliminator be fully applied, so if you put parentheses in the middle then it will appear unapplied and cause an error.</p>",
        "id": 321352133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673700728
    },
    {
        "content": "<p>It feels kinda weird that mathport outputs those extra parentheses</p>",
        "id": 321352560,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673700958
    },
    {
        "content": "<p>It's a bug (and a relatively recent one too I think). MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">stx</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"bp\">←</span> <span class=\"n\">PrettyPrinter.parenthesizeTerm</span> <span class=\"n\">stx</span>\n  <span class=\"n\">PrettyPrinter.formatTerm</span> <span class=\"n\">stx</span>\n<span class=\"c1\">-- (a.1 b.1) fun _ =&gt; c.1</span>\n</code></pre></div>",
        "id": 321352966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673701118
    },
    {
        "content": "<p>I think the issue is that in <code>Syntax</code>, the node for \"application\" is n-ary, i.e. <code>$f $args*</code>, which means that there is a difference between <code>app (app f [x]) [y]</code> and <code>app f [x, y]</code>. In fact, the parenthesizer might be inserting parentheses on purpose to distinguish between these, since as I mentioned they can cause lean to behave differently</p>",
        "id": 321353461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673701299
    },
    {
        "content": "<p>Interestingly, using <code>$</code> directly does not result in an extra application (which makes sense, otherwise lots of user code would be broken):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span>\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">TermElabM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">stx</span> <span class=\"bp\">$</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.liftMacroM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">expandMacros</span> <span class=\"n\">stx</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"bp\">←</span> <span class=\"n\">PrettyPrinter.parenthesizeTerm</span> <span class=\"n\">stx</span>\n  <span class=\"n\">PrettyPrinter.formatTerm</span> <span class=\"n\">stx</span>\n<span class=\"c1\">-- a.1 b.1 fun _ =&gt; c.1</span>\n</code></pre></div>",
        "id": 321354178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673701623
    },
    {
        "content": "<p>It seems the reason is that there is an extra case to handle this in the macro expansion for <code>$</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"n\">min</span> <span class=\"n\">term</span> <span class=\"n\">atomic</span><span class=\"o\">(</span><span class=\"s2\">\" $\"</span> <span class=\"n\">ws</span><span class=\"o\">)</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">min</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"bp\">*</span> <span class=\"bp\">$</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">$</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 321354284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673701677
    },
    {
        "content": "<p>so I guess it is mathport's fault after all, for not including this case</p>",
        "id": 321354357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673701698
    },
    {
        "content": "<p>fixed in <a href=\"https://github.com/leanprover-community/mathport/commit/2bfc0cb592af707cb4de53817c928c737fcabac2\"><code>2bfc0cb</code></a></p>",
        "id": 321359697,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673704121
    }
]