[
    {
        "content": "<p>I just found out that we already have <code>rotate_left n</code> and <code>rotate_right n</code> tactics. Should I open a PR removing the <code>rotate_goals</code> tactic?</p>",
        "id": 270911783,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644181521
    },
    {
        "content": "<p>Feel free to close it: <a href=\"https://github.com/leanprover-community/mathlib4/pull/185\">https://github.com/leanprover-community/mathlib4/pull/185</a></p>",
        "id": 270919059,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644191875
    },
    {
        "content": "<p>Would <code>rotate_up</code> and <code>rotate_down</code> be more intuitive? The goal state displays the goals in a vertical list...</p>",
        "id": 270934026,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644211303
    },
    {
        "content": "<p>But then we'd have it changed in the core code, right?</p>",
        "id": 270972010,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644237810
    },
    {
        "content": "<p>the polarity was also not what I expected: mathlib <code>rotate n</code>, which moves the nth goal to the front and rotates everything else around that, is <code>rotate_left n</code> in lean 4</p>",
        "id": 270972211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644237903
    },
    {
        "content": "<p>What do you mean by \"the polarity was also not what I expected\"?</p>",
        "id": 270972603,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644238084
    },
    {
        "content": "<p>I had guessed that <code>rotate_right</code> did that</p>",
        "id": 270973523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644238517
    },
    {
        "content": "<p>in hindsight, and especially if you think about the goals laid out in a left-to-right list, it makes sense, but I agree with Johan that the directionality here is a bit confused</p>",
        "id": 270973714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644238620
    },
    {
        "content": "<p>maybe <code>rotate n</code> and <code>rotate -n</code> is a better idea after all</p>",
        "id": 270973761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644238661
    },
    {
        "content": "<p>FWIW, I would expect rotate_right to rotate in clockwise direction.</p>",
        "id": 270975514,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644239558
    },
    {
        "content": "<p><code>pull_goals</code> and <code>push_goals</code> might be a bit more explicit</p>",
        "id": 270975909,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644239773
    },
    {
        "content": "<p>Looking through mathlib3, most occurrences of <code>swap n</code> are followed by <code>exact</code> or <code>{ ... }</code>.</p>\n<p>I think it would make more sense to add <code>case n =&gt; ...</code> instead of adding all kinds of obscure goal permutations.  (We already have <code>pick_goal</code>, this is enough to get any permutation that you want. <span aria-label=\"smirk\" class=\"emoji emoji-1f60f\" role=\"img\" title=\"smirk\">:smirk:</span>)</p>",
        "id": 270975919,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644239777
    },
    {
        "content": "<p>for <code>case n =&gt; ...</code> we have <code>on_goal n =&gt; ...</code>, which doesn't restrict the incoming tactics to close the goal</p>",
        "id": 270976514,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644240073
    },
    {
        "content": "<p>Perhaps <code>rotate_to n</code>, which suggests rotating the carousel of goals to the <code>n</code>th entry (and for negative values we count from the end of the list)?</p>",
        "id": 270976686,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1644240157
    },
    {
        "content": "<p>I think <code>on_goal</code> is all I would need.</p>",
        "id": 270976812,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644240222
    },
    {
        "content": "<blockquote>\n<p>which doesn't restrict the incoming tactics to close the goal</p>\n</blockquote>\n<p>This restriction is often desired though.  Even adding just a macro which expands <code>case $n =&gt; $seq</code> to <code>on_goal $n =&gt; { $seq }</code> seems useful.</p>",
        "id": 270976831,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644240230
    },
    {
        "content": "<p>If it could take a list of goals that would be a nice cherry.</p>",
        "id": 270976853,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644240238
    },
    {
        "content": "<p>I'm less keen on <code>_left</code>, <code>_down</code>, etc. since they depend on the particular on-screen representation of the list of goals.</p>",
        "id": 270976905,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1644240245
    },
    {
        "content": "<p>I sometimes want something between <code>all_goals</code> and <code>on_goal</code>.</p>",
        "id": 270976966,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644240275
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> why is the restriction desired?</p>",
        "id": 270977458,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644240491
    },
    {
        "content": "<p>It makes proof scripts more robust. As proof author you promise \"the next block will close this goal\". So when the proof breaks 7 months later, it's easier to figure out where to tweak things.</p>",
        "id": 270977573,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644240574
    },
    {
        "content": "<p>Instead of suddenly staring at a 57 line long script that has 5 open goals left at the end.</p>",
        "id": 270977606,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644240596
    },
    {
        "content": "<p>Because that makes tactics proofs more reliable.  That is, whenever you see <code>case ... =&gt; ...</code> you can be certain that the case closes that goal.  Lean 4 can even continue executing the proof if the case fails, because it's clear how the goals need to look afterwards.</p>",
        "id": 270977661,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644240608
    },
    {
        "content": "<p>Modulo instantiation of metavariables :) ...</p>",
        "id": 270977787,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1644240679
    },
    {
        "content": "<p>Got it, thanks!</p>",
        "id": 270977804,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644240687
    },
    {
        "content": "<p>I would love to have something that let me focus some specific goals and close them all automatically. I think that is a fantastic idea</p>",
        "id": 270978603,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644241045
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/287929-mathlib4/topic/rotate/near/270978603\">said</a>:</p>\n<blockquote>\n<p>I would love to have something that let me focus some specific goals and close them all automatically. I think that is a fantastic idea</p>\n</blockquote>\n<p>Something like <code>on_goals [1, 2, 3] =&gt; try this; try that; etc</code>?</p>",
        "id": 270979448,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644241461
    },
    {
        "content": "<p>If you can implement <code>etc</code>, that would be major!! <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 270979816,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644241609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/rotate/near/270979448\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/287929-mathlib4/topic/rotate/near/270978603\">said</a>:</p>\n<blockquote>\n<p>I would love to have something that let me focus some specific goals and close them all automatically. I think that is a fantastic idea</p>\n</blockquote>\n<p>Something like <code>on_goals [1, 2, 3] =&gt; try this; try that; etc</code>?</p>\n</blockquote>\n<p>lol, I swear <a href=\"https://github.com/leanprover-community/mathlib4/pull/187\">mathlib4#187</a> was invented independently</p>",
        "id": 270984565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644243668
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/rotate/near/270975919\">said</a>:</p>\n<blockquote>\n<p>Looking through mathlib3, most occurrences of <code>swap n</code> are followed by <code>exact</code> or <code>{ ... }</code>.</p>\n<p>I think it would make more sense to add <code>case n =&gt; ...</code> instead of adding all kinds of obscure goal permutations.  (We already have <code>pick_goal</code>, this is enough to get any permutation that you want. <span aria-label=\"smirk\" class=\"emoji emoji-1f60f\" role=\"img\" title=\"smirk\">:smirk:</span>)</p>\n</blockquote>\n<p>Heh, great minds think alike: <a href=\"#narrow/stream/287929-mathlib4/topic/.60swap.60.20semantics.20tactics.20names/near/270789014\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/.60swap.60.20semantics.20tactics.20names/near/270789014</a></p>",
        "id": 270984962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644243845
    },
    {
        "content": "<p>To summarize the <code>on_goals</code> PR: It adds two new tactics: <code>on_goal</code> is generalized to multiple goals as in <code>on_goal 1 3 5 =&gt; simp</code> will apply <code>simp</code> to goals 1,3,5 and place the resulting subgoals back where it found them, and <code>on_goals 1 3 5 =&gt; tac</code> will apply <code>tac</code> to a state consisting of goals 1,3,5, and then placing the resulting goals at the front and all the unselected goals at the end</p>",
        "id": 270985425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644244070
    },
    {
        "content": "<p>so <code>on_goals 1 3 5 =&gt; skip</code> will move goals <code>1 3 5</code> to the front</p>",
        "id": 270985494,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644244090
    },
    {
        "content": "<p>[This thread no longer matches it title btw]<br>\nThat difference in behavior is not clear to me just by looking at their names though. I would expect <code>on_goals</code> to behave just like <code>on_goal</code>, but accepting multiple goals. And then <code>focus_goals</code> would be the one that brings the goals up in the queue (if this is a helpful behavior)</p>",
        "id": 270986315,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644244425
    },
    {
        "content": "<blockquote>\n<p>Lean 4 can even continue executing the proof if the case fails, because it's clear how the goals need to look afterwards.</p>\n</blockquote>\n<p>How does this mechanism work anyways? In lean 3 any failure is fatal, and if you are calling setGoals later in the tactic I don't see how you can recover if an embedded tactic fails</p>",
        "id": 270986318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644244428
    },
    {
        "content": "<p>It's true that the names are not very different, but it's not the only tactic like that: <code>intro</code> vs <code>intros</code> both introduce multiple variables but <code>intros</code> keeps going after it has introduced the named ones</p>",
        "id": 270986530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644244525
    },
    {
        "content": "<p>But \"goals\" is the plural of \"goal\". And \"intros\" is... just \"intro\" + \"s\"</p>",
        "id": 270986685,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644244581
    },
    {
        "content": "<p>no, <code>intros</code> is definitely the plural of <code>intro</code></p>",
        "id": 270986726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644244604
    },
    {
        "content": "<p>Could <code>on_goals</code> work in place, and <code>pick_goals</code> move things to the front?</p>",
        "id": 270986865,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644244673
    },
    {
        "content": "<p>Ah, oops (english not my mother tongue)</p>",
        "id": 270986874,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644244680
    },
    {
        "content": "<p>I think it is best not to go overboard with disambiguating names because it's supposed to be a <em>language</em> in the linguistic sense. You have to learn the words but the brevity pays off in the long run</p>",
        "id": 270986883,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644244682
    },
    {
        "content": "<p>There is a balance to be sure, you don't want it to be impossible to learn, but it is most important that it is not <em>misleading</em>, it's okay if it's <em>vague</em></p>",
        "id": 270987096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644244776
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/rotate/near/270986318\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Lean 4 can even continue executing the proof if the case fails, because it's clear how the goals need to look afterwards.</p>\n</blockquote>\n<p>How does this mechanism work anyways? In lean 3 any failure is fatal, and if you are calling setGoals later in the tactic I don't see how you can recover if an embedded tactic fails</p>\n</blockquote>\n<p>I think <code>case foo =&gt; tac</code> does the equivalent of <code>case foo =&gt; { tac } &lt;|&gt; sorry</code>.</p>",
        "id": 270987198,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644244814
    },
    {
        "content": "<p>Is <code>intros</code> staying in Lean 4?</p>",
        "id": 270987202,
        "sender_full_name": "Julian Berman",
        "timestamp": 1644244815
    },
    {
        "content": "<p>yes</p>",
        "id": 270987227,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644244825
    },
    {
        "content": "<p>Maybe <code>on_goals</code> and <code>on_goals'</code> work better because their difference is very small</p>",
        "id": 270987254,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644244840
    },
    {
        "content": "<p>like I said, lean 4 has <code>intro</code> and <code>intros</code> and they are different</p>",
        "id": 270987258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644244843
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/rotate/near/270985494\">said</a>:</p>\n<blockquote>\n<p>so <code>on_goals 1 3 5 =&gt; skip</code> will move goals <code>1 3 5</code> to the front</p>\n</blockquote>\n<p>This is super subtle and easy to overlook.  How about we have <code>pick_goal 1 2 3 =&gt; tac</code> for the one that moves multiple goals to the front?</p>",
        "id": 270987407,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644244921
    },
    {
        "content": "<p>my mnemonic is: <code>on_goal</code> runs your tactic on 1 goal (multiple times), <code>on_goals</code> runs on many goals</p>",
        "id": 270987433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644244922
    },
    {
        "content": "<p>How does <code>on_goal</code> execute the tactic multiple times?  From what I can tell, the only difference between <code>on_goal</code> and <code>on_goals</code> is how the goals are permuted afterwards.</p>",
        "id": 270987538,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644244976
    },
    {
        "content": "<p>to be fair <code>on_goals ns =&gt; skip</code> is like running a program for its side effects, we should have a macro for that particular use case to make the side effect more central</p>",
        "id": 270987569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644244990
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/rotate/near/270987433\">said</a>:</p>\n<blockquote>\n<p>my mnemonic is: <code>on_goal</code> runs your tactic on 1 goal (multiple times), <code>on_goals</code> runs on many goals</p>\n</blockquote>\n<p>But that's not what the code is doing, right? <code>on_goal</code> is accepting multiple goals on your PR</p>",
        "id": 270987600,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644245012
    },
    {
        "content": "<p><code>on_goal</code> is like <code>all_goals</code>, it runs the tactic in a focused state on each goal</p>",
        "id": 270987622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644245022
    },
    {
        "content": "<p>If you do <code>on_goal 1 2 =&gt; simp</code>, first <code>simp</code> will run on goal 1, then <code>simp</code> will run on goal 2. If you do <code>on_goals 1 2 =&gt; simp</code> then <code>simp</code> will run on goals 1 and 2 together (and it will ignore goal 2 like most tactics run in a multi-goal state)</p>",
        "id": 270987858,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644245127
    },
    {
        "content": "<p>by 1 goal I mean that <code>simp</code> sees a tactic state with 1 goal in it</p>",
        "id": 270987968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644245172
    },
    {
        "content": "<p>The test has a use of <code>on_goals 2 4 =&gt; swap</code> which permutes <code>[1, 2, 3, 4, 5]</code> into <code>[4, 2, 1, 3, 5]</code></p>",
        "id": 270988189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644245263
    },
    {
        "content": "<p>So <code>on_goal 3 5 8 =&gt; simp</code> is like <code>on_goals 3 5 8 =&gt; all_goals simp</code> modulo goal permutation?  This is yet one more reason it should get a visibly different name.</p>",
        "id": 270988259,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644245282
    },
    {
        "content": "<p><del>The way I understand it is that those two are <em>not</em> the same.</del> (Sorry, I missed that there was no <code>s</code> in the first <code>on_goal</code>. Which I guess exactly makes Gabriel's point.)</p>",
        "id": 270988327,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644245306
    },
    {
        "content": "<p>Yes. I originally wanted to implement one in terms of the other but it's not possible for <code>on_goals</code> to have the goal order preservation thing</p>",
        "id": 270988377,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644245331
    },
    {
        "content": "<p>I think <code>on_goal</code> is likely to be much more useful than <code>on_goals</code></p>",
        "id": 270988474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644245381
    },
    {
        "content": "<p>Also, I would intuitively expect <code>on_goals 3 5 8 =&gt; simp</code> to be the same as <code>on_goals 3 5 8 =&gt; all_goals simp</code>.</p>",
        "id": 270988552,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644245404
    },
    {
        "content": "<p>it's rare to need to work with multi-goal states directly, but these are goal permutation tactics, that's the point</p>",
        "id": 270988557,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644245406
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <code>on_goal</code> satisfies that</p>",
        "id": 270988646,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644245454
    },
    {
        "content": "<p>I think we need more to stress the difference then just this <code>s</code>.</p>",
        "id": 270988651,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644245456
    },
    {
        "content": "<p><code>with_goals</code>?</p>",
        "id": 270988684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644245470
    },
    {
        "content": "<p>for <code>on_goals</code></p>",
        "id": 270988706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644245481
    },
    {
        "content": "<p>Right, <code>on_goal</code> does, but <code>on_goals</code> doesn't. Which is exactly why you wrote <code>on_goals</code>. I get that now. But it took me a while.</p>",
        "id": 270988715,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644245486
    },
    {
        "content": "<p><code>on_goals {3,5,8} =&gt; simp</code>?</p>",
        "id": 270988740,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644245498
    },
    {
        "content": "<p>To emphasize that you run the tactic once a the \"set\" of those 3 goals.</p>",
        "id": 270988809,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644245522
    },
    {
        "content": "<p>heh, if you write that then I'm going to generalize it</p>",
        "id": 270988868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644245546
    },
    {
        "content": "<p>Yeah, that's part of the hint (-;</p>",
        "id": 270988903,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644245561
    },
    {
        "content": "<p>Is it clear that <code>on_goals</code> can not place the goals back in the place where they came from?</p>",
        "id": 270988967,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644245593
    },
    {
        "content": "<p><code>on_goal 3 5 8</code> would just be <code>on_goals {3} {5} {8}</code>.</p>",
        "id": 270989012,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644245611
    },
    {
        "content": "<p>\"where they came from\" is not well defined if they came from a set <code>{3, 5, 8}</code></p>",
        "id": 270989078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644245639
    },
    {
        "content": "<p>if you get two goals out, where would they go? the first one replaces <code>3</code>, the second <code>5</code>, ...?</p>",
        "id": 270989190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644245673
    },
    {
        "content": "<p>yeah, fair enough.</p>",
        "id": 270989212,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644245685
    },
    {
        "content": "<p>Plus, I'm not even sure that's a useful behavior most of the time</p>",
        "id": 270989288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644245722
    },
    {
        "content": "<p>If the user is not attacking the first goal, I don't think there's a clear intent to bring subgoals to the front</p>",
        "id": 270989430,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644245775
    },
    {
        "content": "<p>I think the majority of the time that's always what you want to do</p>",
        "id": 270989476,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644245799
    },
    {
        "content": "<p><code>on_goal</code> is the only exception I know to that</p>",
        "id": 270989498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644245810
    },
    {
        "content": "<p>everything happens at the head of the list</p>",
        "id": 270989520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644245820
    },
    {
        "content": "<p>If we're letting the user select a goal, it would be nice if you could also use tags in addition to numbers.  That is <code>on_goal 3 zero =&gt; simp only</code>.</p>",
        "id": 270989575,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644245847
    },
    {
        "content": "<p>wait, do we have non-closing <code>case</code>?</p>",
        "id": 270989626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644245873
    },
    {
        "content": "<p>I guess it's fine in the <code>on_goal</code> syntax to support tags</p>",
        "id": 270989708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644245895
    },
    {
        "content": "<p>What is a tag in this context?</p>",
        "id": 270989798,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644245940
    },
    {
        "content": "<p>No, I don't think we have non-closing <code>case</code>.  We also don't have an unstructured <code>case</code> (which just moves the goal to the front and renames the variables).</p>",
        "id": 270989816,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644245947
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/rotate/near/270989798\">said</a>:</p>\n<blockquote>\n<p>What is a tag in this context?</p>\n</blockquote>\n<p>The <code>succ i ih</code>  in <code>case succ i ih =&gt; tac</code>.</p>",
        "id": 270989916,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644245987
    },
    {
        "content": "<p>lean 3 has multiple word tags, are those possible?</p>",
        "id": 270990012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644246006
    },
    {
        "content": "<p>I think so, but I can't remember the syntax.</p>",
        "id": 270990090,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644246025
    },
    {
        "content": "<p>Maybe we should consider how to port the lean 3 <code>case</code> tactic that is sitting in Syntax.lean</p>",
        "id": 270990266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644246089
    },
    {
        "content": "<p>Hm, I think I can see a decent grammar for <code>on_goal</code>, by example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">on_goal</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">zero</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">x</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"mi\">3</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 270991173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644246395
    },
    {
        "content": "<p>Regarding <a href=\"https://github.com/leanprover-community/mathlib/pull/187\">mathlib#187</a> I wanna suggest a mix of some ideas I saw here:<br>\nWhat if instead of <code>on_goal</code> and <code>on_goals</code> we had <code>on_goals</code> and <code>with_goals</code>?<br>\n<code>with_goals</code> being the one that brings unsolved goals to the front</p>\n<p>My rationale is that \"on\" reminds me of something that happens as in place as possible</p>",
        "id": 270991289,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644246445
    },
    {
        "content": "<p>this grammar could also be used for variations on what to do with the goal, like <code>case</code></p>",
        "id": 270991308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644246453
    },
    {
        "content": "<p>In the grammar above you wouldn't need <code>with_goals</code>: <code>on_goal 1 2 3 =&gt;</code> becomes <code>on_goal 1, 2, 3 =&gt;</code> and <code>with_goals 1 2 3 =&gt;</code> becomes <code>on_goal {1, 2, 3} =&gt;</code></p>",
        "id": 270991502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644246518
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> With you <code>on_goal</code> example, will you just move everything to the front? Or are the singleton goal-sets working \"in-place\"?</p>",
        "id": 270991528,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644246537
    },
    {
        "content": "<p>If you use braces, you get <code>with_goals</code> behavior: the set gets pulled to the front</p>",
        "id": 270991608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644246573
    },
    {
        "content": "<p>anything not in braces stays where it is</p>",
        "id": 270991652,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644246592
    },
    {
        "content": "<p>so <code>on_goal {3} =&gt;</code> is also useful if you don't want it to stay where it is</p>",
        "id": 270991773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644246628
    },
    {
        "content": "<p>Ah, then you can mix for instance <code>on_goal 3 {5, 7}</code> and subgoals from <code>5</code> and <code>7</code> would get pulled up?</p>",
        "id": 270991836,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644246654
    },
    {
        "content": "<p>yes</p>",
        "id": 270991847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644246661
    },
    {
        "content": "<p>Okay that's a neat solution IMO</p>",
        "id": 270991882,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644246680
    },
    {
        "content": "<p>if the goals were <code>[1,2,3,4,5,6,7]</code> before then after they would be <code>[57',1,2,3',4,6]</code></p>",
        "id": 270991926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644246705
    },
    {
        "content": "<p>What is the behaviour of <code>on_goal {2,3} {2,3} =&gt; skip</code>? On goal list <code>[1,2,3]</code>.</p>",
        "id": 270992099,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644246773
    },
    {
        "content": "<p><code>[2,3,2,3,1]</code></p>",
        "id": 270992137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644246790
    },
    {
        "content": "<p>yes you can copy goals</p>",
        "id": 270992164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644246802
    },
    {
        "content": "<p>Ok, so the second <code>{2,3}</code> doesn't operate on the result of the first <code>{2,3} =&gt; simp</code>.</p>",
        "id": 270992235,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644246829
    },
    {
        "content": "<p>Of course these are weird edge cases that don't show up in practice (I hope).</p>",
        "id": 270992306,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644246846
    },
    {
        "content": "<p>No, but by the time you get around to them they might be solved already</p>",
        "id": 270992331,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644246854
    },
    {
        "content": "<p>if you do something other than <code>skip</code> then the second invocation probably won't see them at all</p>",
        "id": 270992387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644246877
    },
    {
        "content": "<p>Isn't it safer if you take a snapshot and iterate on that instead of unfolding as it goes?</p>",
        "id": 270992525,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644246933
    },
    {
        "content": "<p>I do</p>",
        "id": 270992546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644246940
    },
    {
        "content": "<p>(I probably made no sense)</p>",
        "id": 270992550,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644246942
    },
    {
        "content": "<p>All goal indexes refer to the goal state at the start, not after half of the tactics have run</p>",
        "id": 270992640,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644246968
    },
    {
        "content": "<p>but goals can \"expire\" due to other goals getting worked on</p>",
        "id": 270992702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644246992
    },
    {
        "content": "<p>especially if you copied a goal</p>",
        "id": 270992712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644246998
    },
    {
        "content": "<p>I'm sure you've seen this in lean 3 when you apply something and it produces a bunch of metavariables and then you equate two things and all the metavariable goals disappear</p>",
        "id": 270992843,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644247047
    },
    {
        "content": "<p>I suspect we've reached a thin line between play and actual need, but I'm enjoying to see the power of Lean metaprogramming in action</p>",
        "id": 270993656,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644247359
    },
    {
        "content": "<p>Also I'm learning a lot from this process of empowering and cleaning up mathlib3 tactics (and it barely started for me)</p>",
        "id": 270994229,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644247588
    },
    {
        "content": "<p>Of course no one will use all of those features simultaneously. But it is useful to have an orthogonal mechanism, here goal selection, in a way that applies to multiple tactics, since it makes skills transferrable</p>",
        "id": 270994646,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644247760
    },
    {
        "content": "<p>Yeah, how many times have I wanted something like <code>on_goal 1 2 =&gt; intros</code>...</p>",
        "id": 270994962,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644247869
    }
]