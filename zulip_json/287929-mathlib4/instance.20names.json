[
    {
        "content": "<p>I'm currently porting <code>Algebra.Ring.Prod</code>which starts of with a giant header of declarations of this style:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Product of two distributive types is distributive. -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Distrib</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Distrib</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Distrib</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">×</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">Prod.hasAdd</span><span class=\"o\">,</span> <span class=\"n\">Prod.hasMul</span> <span class=\"k\">with</span>\n    <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mk.inj_iff.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">left_distrib</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">left_distrib</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mk.inj_iff.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">right_distrib</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">right_distrib</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n\n<span class=\"sd\">/-- Product of two `non_unital_non_assoc_semiring`s is a `non_unital_non_assoc_semiring`. -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">NonUnitalNonAssocSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NonUnitalNonAssocSemiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">NonUnitalNonAssocSemiring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">×</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">Prod.addCommMonoid</span><span class=\"o\">,</span> <span class=\"n\">Prod.mulZeroClass</span><span class=\"o\">,</span> <span class=\"n\">Prod.distrib</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n\n<span class=\"sd\">/-- Product of two `non_unital_semiring`s is a `non_unital_semiring`. -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">NonUnitalSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NonUnitalSemiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">NonUnitalSemiring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">×</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">Prod.nonUnitalNonAssocSemiring</span><span class=\"o\">,</span> <span class=\"n\">Prod.semigroup</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>I'm assuming Lean 3 had some unhygienic instance naming mechanism that made this type of stuff possible? How am I supposed to deal with it in the port, I guess I could just move through the responsible prod files and make the names explicit but having an explicit <code>nonUnitalNonAssocSemiring</code> seems a little over the top?</p>",
        "id": 317987860,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672076720
    },
    {
        "content": "<p>Use inferInstanceAs?</p>",
        "id": 317989201,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1672077619
    },
    {
        "content": "<p>Lean 4 also has implicit instance names, but they're even longer. We've not settled on a preferred approach yet</p>",
        "id": 317991073,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1672078719
    },
    {
        "content": "<p>yeah, instance names are not hygienic (unless you declare them in a macro, but that's probably an issue of its own)</p>",
        "id": 317991830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672079201
    },
    {
        "content": "<p>You can also drop some (sometimes all) dependencies and let Lean automatically find projections from existing instances.</p>",
        "id": 317994072,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1672080823
    },
    {
        "content": "<p>In the port of Algebra.Ring.Pi we just give explicit names to all the instances</p>",
        "id": 318012314,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672094648
    },
    {
        "content": "<p>I think we should do the same for Prod</p>",
        "id": 318012324,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672094656
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/instance.20names/near/317991830\">said</a>:</p>\n<blockquote>\n<p>yeah, instance names are not hygienic (unless you declare them in a macro, but that's probably an issue of its own)</p>\n</blockquote>\n<p>They're actively anti-hygienic, even when you have the instance command in a macro.  If you give the instance command accessible names, then it will generate an accessible inaccessible instance name:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"foo_inst\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨⟩⟩)</span>\n<span class=\"n\">foo_inst</span>\n<span class=\"k\">#check</span> <span class=\"n\">instNonemptyFoo</span> <span class=\"c1\">-- works (no comment on the prettiness/usefulness of the name)</span>\n</code></pre></div>\n<p>That seems reasonable enough.  But the automatically generated name will always be accessible, even if the names contain macro scopes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"bar_inst\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">structure</span> <span class=\"n\">Bar</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">Bar</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨⟩⟩)</span>\n<span class=\"n\">bar_inst</span>\n<span class=\"k\">#check</span> <span class=\"n\">instNonemptyBar</span> <span class=\"c1\">-- works too ?!?</span>\n</code></pre></div>",
        "id": 318013546,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672095517
    },
    {
        "content": "<p>I assume the instance is hygienic if you actually give it a name though like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"foo_inst\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">instance</span> <span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨⟩⟩)</span>\n<span class=\"n\">foo_inst</span>\n</code></pre></div>",
        "id": 318014605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672096402
    },
    {
        "content": "<p>Yes, of course.  That's the same as <code>@[instance] def</code>.</p>",
        "id": 318019774,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672101550
    },
    {
        "content": "<p>What \"hygienic\" means in this context?</p>",
        "id": 318035315,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1672116832
    },
    {
        "content": "<p>\"Hygienic\" means that you can only access it from the the same macro scope where you defined it.  Or put differently, if you have two macros that generate the same name, it won't clash.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">42</span>\n    <span class=\"k\">#print</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"n\">foo</span> <span class=\"c1\">-- 42</span>\n<span class=\"n\">foo</span> <span class=\"c1\">-- 42</span>\n<span class=\"k\">#print</span> <span class=\"n\">n</span> <span class=\"c1\">-- unknown constant n</span>\n</code></pre></div>",
        "id": 318038470,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672119747
    }
]