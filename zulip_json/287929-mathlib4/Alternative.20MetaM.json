[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Alternative</span> <span class=\"n\">MetaM</span>\n</code></pre></div>\n<p>Am I expecting the wrong thing here?</p>\n<p>I've been implementing <code>solve_by_elim</code> in Lean4, and I have a very hacky solution with mutable variables inside <code>try ... catch</code> blocks in order to test if a tactic is failing, but the \"obvious\" approach using <code>List.firstM</code> or similar fails with the error above.</p>",
        "id": 250311590,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629695471
    },
    {
        "content": "<p>Providing a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Meta.Tactic.Apply</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Tactic.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Elab.Tactic</span>\n\n<span class=\"sd\">/-- Attempt to solve the given metavariable by repeating applying a local hypothesis. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Lean.Meta.solveByElim</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">MVarId</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"fail\"</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"c1\">-- We attempt to find a local declaration which can be applied,</span>\n    <span class=\"c1\">-- and for which all resulting sub-goals can be discharged using `solveByElim n`.</span>\n    <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLCtx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">findDeclRevM</span><span class=\"bp\">?</span> <span class=\"k\">fun</span> <span class=\"n\">localDecl</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">if</span> <span class=\"n\">localDecl.isAuxDecl</span> <span class=\"k\">then</span>\n        <span class=\"n\">return</span> <span class=\"n\">none</span>\n      <span class=\"k\">else</span>\n        <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">success</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n        <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">try</span>\n          <span class=\"n\">for</span> <span class=\"n\">g</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">apply</span> <span class=\"n\">mvarId</span> <span class=\"n\">localDecl.toExpr</span><span class=\"o\">)</span> <span class=\"k\">do</span> <span class=\"n\">solveByElim</span> <span class=\"n\">n</span> <span class=\"n\">g</span>\n          <span class=\"n\">success</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n        <span class=\"n\">catch</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">success</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n         <span class=\"k\">if</span> <span class=\"n\">success</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"n\">Unit.unit</span> <span class=\"k\">else</span> <span class=\"n\">none</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Lean.Elab</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">Tactic</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"solveByElim\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"n\">Meta.solveByElim</span> <span class=\"mi\">6</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Tactic</span>\n<span class=\"kd\">end</span> <span class=\"n\">Lean.Elab</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test1</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">solveByElim</span>\n<span class=\"kd\">def</span> <span class=\"n\">test2</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">solveByElim</span>\n<span class=\"kd\">def</span> <span class=\"n\">test3</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">solveByElim</span>\n<span class=\"kd\">def</span> <span class=\"n\">test4</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">solveByElim</span>\n<span class=\"kd\">def</span> <span class=\"n\">test5</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">solveByElim</span>\n</code></pre></div>\n<p>demonstrates the bare bones of <code>solveByElim</code>, but the <code>success</code> variable is obviously all boilerplate.</p>\n<p>I'd hoped I could just write </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Meta.Tactic.Apply</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Tactic.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Lean.LocalContext</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Alternative</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"sd\">/-- Return the result of `f` on the first local declaration on which `f` succeeds. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">firstDeclM</span> <span class=\"o\">(</span><span class=\"n\">lctx</span> <span class=\"o\">:</span> <span class=\"n\">LocalContext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">LocalDecl</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"k\">do</span> <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">lctx.findDeclM</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">optional</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">failure</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Lean.LocalContext</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Elab.Tactic</span>\n\n<span class=\"sd\">/-- Attempt to solve the given metavariable by repeating applying a local hypothesis. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Lean.Meta.solveByElim</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">MVarId</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"fail\"</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"c1\">-- We attempt to find a local declaration which can be applied,</span>\n    <span class=\"c1\">-- and for which all resulting sub-goals can be discharged using `solveByElim n`.</span>\n       <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLCtx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">firstDeclM</span> <span class=\"k\">fun</span> <span class=\"n\">localDecl</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n         <span class=\"k\">if</span> <span class=\"n\">localDecl.isAuxDecl</span> <span class=\"k\">then</span>\n           <span class=\"n\">failure</span>\n         <span class=\"k\">else</span>\n           <span class=\"n\">for</span> <span class=\"n\">g</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">apply</span> <span class=\"n\">mvarId</span> <span class=\"n\">localDecl.toExpr</span><span class=\"o\">)</span> <span class=\"k\">do</span> <span class=\"n\">solveByElim</span> <span class=\"n\">n</span> <span class=\"n\">g</span>\n</code></pre></div>\n<p>instead, but this fails trying to synthesize <code>Alternative MetaM</code>.</p>\n<p>Recommendations for a concise solution welcome! :-)</p>",
        "id": 250312578,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629696651
    },
    {
        "content": "<p>Added <a href=\"https://github.com/leanprover/lean4/commit/5a7044365b70a434d59d34f0d302c88ce83f9715\">https://github.com/leanprover/lean4/commit/5a7044365b70a434d59d34f0d302c88ce83f9715</a></p>",
        "id": 250312582,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1629696655
    }
]