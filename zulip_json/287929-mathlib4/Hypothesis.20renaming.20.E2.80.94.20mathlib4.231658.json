[
    {
        "content": "<p>For this PR the question seems to be whether it is OK to revise hypothesis names in mathlib4 defs and lemmas while the port is ongoing. As I understand it, once a function has been ported its existing mathlib3 hypothesis names cease to appear in mathlibport output and become basically irrelevant to the port effort generally. If that is so, I can’t see any reason to keep them sacrosanct in mathlib4.</p>",
        "id": 322265952,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1674130799
    },
    {
        "content": "<p>The reason the question arises is perhaps of interest in its own right. As they work in Lean 4 the <code>cases using</code> and <code>induction using</code> tactics label the case split with the names of hypotheses used in the relevant \"custom recursor\". Current mathlib3 hypothesis names have been chosen without view to this.</p>\n<p>In this PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/1658\">mathlib4#1658</a>, I have experimentally changed hypothesis names in just three of these recursors so that, for example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">s</span> <span class=\"n\">using</span> <span class=\"n\">cons_induction</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">h₁</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">…</span>\n<span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">h₂</span> <span class=\"n\">c</span> <span class=\"n\">s</span> <span class=\"n\">hc</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">…</span>\n</code></pre></div>\n<p>becomes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">s</span> <span class=\"n\">using</span> <span class=\"n\">cons_induction</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">…</span>\n<span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">ind</span> <span class=\"n\">c</span> <span class=\"n\">t</span> <span class=\"n\">hc</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">…</span>\n</code></pre></div>",
        "id": 322266931,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1674131055
    },
    {
        "content": "<p>In fact this might be better</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">s</span> <span class=\"n\">using</span> <span class=\"n\">cons_induction</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">empty</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">…</span>\n<span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">cons</span> <span class=\"n\">c</span> <span class=\"n\">t</span> <span class=\"n\">hc</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">…</span>\n</code></pre></div>\n<p>but to implement it one needs to introduce a hypothesis named <code>cons</code> into the body of <code>Finset.cons_induction</code>. I shied away from that initially but I guess it’s fine? The name clash can be resolved easily enough with the appropriate qualifiers.</p>",
        "id": 322267340,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1674131168
    },
    {
        "content": "<p>Arguably this consideration was present in mathlib3 too</p>",
        "id": 322268160,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674131442
    },
    {
        "content": "<p>If you use <code>induction</code> combined with <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#case\">tactic#case</a>, those names are accessible</p>",
        "id": 322268190,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674131456
    },
    {
        "content": "<p>I don't know if mathport supports the <code>case</code> tactic, but if it does then anything using the <code>case</code> tactic in mathilb3 is going to be relying on the old hypothesis names, and the mathport output will end up wrong.</p>",
        "id": 322268305,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674131493
    },
    {
        "content": "<p>Good point! If I ever knew about <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#case\">tactic#case</a> I had forgotten.</p>",
        "id": 322281292,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1674135361
    },
    {
        "content": "<p>In the immediate term, it would be totally reasonable to change all the hypothesis names in unported files in mathlib 3</p>",
        "id": 322288924,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674137432
    },
    {
        "content": "<p>That way when those files get ported, they'll automatically get sensible names</p>",
        "id": 322288988,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674137444
    },
    {
        "content": "<p>You can find places to change by searching for <code>elab_as_eliminator</code></p>",
        "id": 322289053,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674137458
    },
    {
        "content": "<p>I think it won't be a big problem, because we try to be pretty strict about unnamed hypotheses in mathlib 3.</p>",
        "id": 322289521,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674137568
    },
    {
        "content": "<p>But I agree that it doesn't hurt to work on this change in ml3.</p>",
        "id": 322289652,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674137596
    }
]