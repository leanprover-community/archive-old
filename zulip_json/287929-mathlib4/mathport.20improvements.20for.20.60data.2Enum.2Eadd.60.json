[
    {
        "content": "<p>I'm working on improving the mathport translation of <code>data.num.add</code> </p>\n<p>What should I do about this output?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">PosNum</span> <span class=\"bp\">→</span> <span class=\"n\">PosNum</span> <span class=\"bp\">→</span> <span class=\"n\">PosNum</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">succ</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">succ</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bit0</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">bit0</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bit1</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">bit1</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bit0</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">bit1</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bit1</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bit1</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">bit0</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bit1</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">PosNum</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">PosNum.add</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>It gives <code>unknown identifier 'add'</code> errors in each of the recursive calls.</p>\n<p>Other than capitalization, the definition was the same in lean3 and working fine. I'm not clear what has changed. Has the behavior of <code>protected</code> changed so that the shorter name is no longer accessible even within the recursive function? Or was lean3 somehow able to see the <code>has_add</code> instance on the following lines (that is now being translated to <code>Add</code>)?</p>\n<p>Or... is this just a bug in lean4?</p>\n<p>Unless it's a bug, I think the most general fix here is to have mathport always add the type prefix to the current definition's name (replacing each recursive <code>add</code> with <code>PosNum.add</code> in this case)...</p>",
        "id": 287524909,
        "sender_full_name": "michal wallace (tangentstorm)",
        "timestamp": 1656294157
    },
    {
        "content": "<p>the behavior for <code>mul</code> is also interesting:<br>\nold:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">pos_num</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pos_num</span> <span class=\"bp\">→</span> <span class=\"n\">pos_num</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span>        <span class=\"o\">:=</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">bit1</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>the generated code is wrong on two counts:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">PosNum</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">PosNum</span> <span class=\"bp\">→</span> <span class=\"n\">PosNum</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bit0</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bit1</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>first, it doesn't know the name <code>mul</code>, but second, if i change it to <code>PosNum.mul</code>, it fails because it's missing an <code>a</code> argument.</p>",
        "id": 287525236,
        "sender_full_name": "michal wallace (tangentstorm)",
        "timestamp": 1656294686
    },
    {
        "content": "<p>Okay, well... Here's the step-by-step changelog for the cleanup I was able to do manually:<br>\n<a href=\"https://github.com/tangentstorm/tangentlabs/commits/master/lean4/Bin/Lean4DataNumBasic.lean\">https://github.com/tangentstorm/tangentlabs/commits/master/lean4/Bin/Lean4DataNumBasic.lean</a></p>",
        "id": 287528447,
        "sender_full_name": "michal wallace (tangentstorm)",
        "timestamp": 1656298738
    },
    {
        "content": "<p>there are still several remaining bugs that i don't know how to address yet:</p>\n<ul>\n<li>implement <code>dsimp'</code></li>\n<li><code>castPosNum</code> :: <code>bit0</code> needs to be on the  α type, and I don't think <code>bit0</code> is part of lean4?</li>\n<li>in general, the generic coercion stuff seems to need a revamp ( CoeTₓ )</li>\n<li>lack of coercion is breaking the <code>repr</code> implementation</li>\n<li><code>Nat.binaryRec</code> seems to be a standard function in lean3 that no longer exists. (Is that on purpose? I think I could have actually used it earlier.)</li>\n<li>re-enable <code>has_reflect</code> (probably will need to implement the deriving code in lean4 to make that happen)</li>\n</ul>",
        "id": 287528622,
        "sender_full_name": "michal wallace (tangentstorm)",
        "timestamp": 1656298951
    },
    {
        "content": "<p>If anyone can either:</p>\n<ul>\n<li>a) look over my changelog and see if I screwed anything up, or</li>\n<li>b) help me out with these last few issues, <br>\n... I'd really appreciate it.</li>\n</ul>\n<p>Meanwhile, I'll move on to studying the mathport code and see if I can have it handle the changes I was doing by hand.</p>",
        "id": 287528693,
        "sender_full_name": "michal wallace (tangentstorm)",
        "timestamp": 1656299063
    },
    {
        "content": "<p>I'm not sure what the plan is, but <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.binary_rec\">docs#nat.binary_rec</a> is in Lean 3 core rather than mathlib and could be ported too, though perhaps for computational reasons you'd want to make the <code>z : C 0</code> argument be <code>z : Unit -&gt; C 0</code></p>",
        "id": 287530352,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656301644
    },
    {
        "content": "<p>There are mathlib4 files that correspond to lean 3 core files in <code>Mathlib.Init.*</code></p>",
        "id": 287540930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1656314471
    },
    {
        "content": "<p>so <code>Nat.binaryRec</code> would go in one of those</p>",
        "id": 287540946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1656314483
    },
    {
        "content": "<p>if it's not in lean 4 core, then it's probably not needed anymore so if mathlib needs it it should be redefined in mathlib4</p>",
        "id": 287540972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1656314516
    },
    {
        "content": "<p>We probably want to migrate away from <code>bit0</code> and <code>bit1</code> eventually, but for the port I think we should just add it to <code>Mathlib.Init.*</code></p>",
        "id": 287541079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1656314587
    },
    {
        "content": "<p>As for referencing protected definitions, that is one of many small elaboration differences that is likely to cause problems in the port, and we don't have any uniform solution there. I'm not sure how feasible it is to backport the change - I don't think lean 3 can handle local variables that are not atomic</p>",
        "id": 287541207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1656314684
    },
    {
        "content": "<p>If it's a common enough pattern, I think we could detect it in synport</p>",
        "id": 287541391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1656314830
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/mathport.20improvements.20for.20.02klzzwxh.3A0000.03\">#lean4 &gt; mathport improvements for <code>data.num.add</code></a> by <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span>.</p>",
        "id": 287541584,
        "sender_full_name": "Notification Bot",
        "timestamp": 1656314953
    },
    {
        "content": "<p>I added a github repo to start collecting notes/work on this.<br>\n<a href=\"https://github.com/tangentstorm/Lean4-DataNumBasic/\">https://github.com/tangentstorm/Lean4-DataNumBasic/</a><br>\nI've got next week off for moving house, but i hope to have some free time to work on this as well. (In any case, I expect this to be my main project for most of next month.)</p>",
        "id": 287602555,
        "sender_full_name": "michal wallace (tangentstorm)",
        "timestamp": 1656347132
    }
]