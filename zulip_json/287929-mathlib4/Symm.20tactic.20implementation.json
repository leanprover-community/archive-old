[
    {
        "content": "<p>I believe I have implemented the <code>symm</code> tactic, given a couple of examples. This was modelled on <code>ext</code> (with copious copy-paste too).  I have made a pull request at  <a href=\"https://github.com/leanprover-community/mathlib4/pull/253\">https://github.com/leanprover-community/mathlib4/pull/253</a></p>\n<p>Once more I have to bother you <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> to ask what I am missing and/or what I should do further.</p>",
        "id": 276861432,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1648468515
    },
    {
        "content": "<p>Also <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> - if you have the time I would be grateful for comments.</p>",
        "id": 276863023,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1648469367
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span> it's reasonable to fearlessly run <code>lake build</code> on Mathlib4 at the moment because it's still small. You don't need to wait on CI runs to know if your branch builds at this stage</p>",
        "id": 277736071,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649081400
    },
    {
        "content": "<p>Now I have also implemented <code>trans</code> tactic with two variants in the same pull request. To illustrate, here is the test code. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[trans]</span> <span class=\"kd\">def</span> <span class=\"n\">nleqTrans</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.le_trans</span>\n\n<span class=\"kd\">@[trans]</span> <span class=\"kd\">def</span> <span class=\"n\">eqTrans</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}:</span>  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Eq.trans</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span>\n    <span class=\"n\">trans</span>\n    <span class=\"n\">assumption</span>\n    <span class=\"n\">assumption</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span>\n    <span class=\"n\">trans</span> <span class=\"n\">h₁</span>\n    <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>I assume the idea for reflexivity is to use <code>refl</code> as a more general tactic handling reflexivity of equality. I will go ahead with this assumption unless someone corrects me.</p>",
        "id": 277856520,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1649154704
    },
    {
        "content": "<p>Should <code>trans</code> make use of Lean 4's <code>Trans</code> class?</p>",
        "id": 277857356,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1649155231
    },
    {
        "content": "<p>I did not know of this. I assume that it is a typeclass. Thanks.</p>",
        "id": 277858349,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1649155837
    },
    {
        "content": "<p>I will look for it. Surely it should be used (presumably in addition to annotations)</p>",
        "id": 277858379,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1649155863
    },
    {
        "content": "<p>What is the best way to search for instances within Meta?</p>",
        "id": 277858592,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1649155993
    },
    {
        "content": "<p>I found it in the source code. I will try to use <code>trySynthInstance</code> as in <code>Extra.lean</code></p>",
        "id": 277859118,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1649156325
    },
    {
        "content": "<p>the behavior of <code>trans h₁</code> is incorrect. If you pass an argument to <code>trans</code> it should be the middle element and you get two subgoals, hence <code>trans b</code> here</p>",
        "id": 277860257,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649157002
    },
    {
        "content": "<p>I see. I thought it should be a proof of the first term. Thanks.</p>",
        "id": 277860735,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1649157248
    },
    {
        "content": "<p>I will modify that.</p>",
        "id": 277860747,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1649157255
    },
    {
        "content": "<p>And also use instances of the typeclass <code>Trans</code> if available.</p>",
        "id": 277860785,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1649157278
    }
]