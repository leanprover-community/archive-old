[
    {
        "content": "<p>For <a href=\"https://github.com/leanprover-community/mathlib4/pull/1179\">mathlib4#1179</a>, the current issues are:</p>\n<p>1) Bug in <code>generalize_proofs</code> in <code>fix_induction_spec</code> (same issue as <a href=\"#narrow/stream/270676-lean4/topic/Extracting.20a.20proof.20from.20a.20dependent.20function.20call/near/321740648\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Extracting.20a.20proof.20from.20a.20dependent.20function.20call/near/321740648</a> -- I was able to use the <code>revert</code>/<code>intro</code> trick in one place but not here<br>\n2) tactic bug in <code>prodMap_comp_comp</code> (See: <a href=\"#narrow/stream/287929-mathlib4/topic/.22.28kernel.29.20declaration.20has.20metavariables.22/near/322790931\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/.22.28kernel.29.20declaration.20has.20metavariables.22/near/322790931</a>)<br>\n3) Generally complicated motive state for <code>mem_fix_iff</code> and a couple of other issues (see <a href=\"#narrow/stream/287929-mathlib4/topic/my.20PRs.20that.20need.20help/near/322639477\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/my.20PRs.20that.20need.20help/near/322639477</a>) -- I can't  follow <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>'s suggestion on making <code>fix</code> computable because <code>WellFounded.fixF</code> is <code>noncomputable</code> but perhaps there's a definition that doesn't refer to <code>WellFounded.fixF</code></p>",
        "id": 323136606,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674516018
    },
    {
        "content": "<p>Actually the <code>noncomputable</code> annotation seems to be a red herring -- <code>mem_fix_iff</code> doesn't depend on anything noncomputable...</p>",
        "id": 323137990,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674516762
    }
]