[
    {
        "content": "<p>Corresponding PR: <a href=\"https://github.com/leanprover-community/mathlib4/pull/1482\">mathlib4#1482</a></p>\n<p>The <code>refl</code> attribute on the <code>refl</code>for <code>OrderRingIso</code>s is giving me trouble:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[refl]</span> <span class=\"kn\">attribute</span> <span class=\"n\">only</span> <span class=\"n\">applies</span> <span class=\"n\">to</span> <span class=\"n\">lemmas</span> <span class=\"n\">proving</span> <span class=\"n\">x</span> <span class=\"bp\">∼</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">got</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">≃+*</span><span class=\"n\">o</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>I was thinking the issue is with the instances, but the refl in Algebra.Ring.Equiv looks fairly similar, and its refl tag gives no complaints:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">RingEquiv.refl.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"bp\">✝¹</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃+*</span> <span class=\"n\">R</span>\n</code></pre></div>\n<p>Any thoughts? Why is the above <code>refl</code> not recognized as <code>x ~ x</code>?</p>",
        "id": 321685294,
        "sender_full_name": "Lukas Miaskiwskyi",
        "timestamp": 1673888651
    }
]