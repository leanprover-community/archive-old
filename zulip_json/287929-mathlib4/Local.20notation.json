[
    {
        "content": "<p>I am porting <a href=\"https://tqft.net/mathlib/group_theory/eckmann_hilton\">file#group_theory/eckmann_hilton</a> which has</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"n\">a</span> <span class=\"s2\">\"&lt;\"</span> <span class=\"n\">m</span> <span class=\"s2\">\"&gt;\"</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>at the beginning. When I write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">distrib</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m₂</span> <span class=\"bp\">&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span><span class=\"n\">m₁</span><span class=\"bp\">&gt;</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span><span class=\"n\">m₂</span><span class=\"bp\">&gt;</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span><span class=\"n\">m₁</span><span class=\"bp\">&gt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span><span class=\"n\">m₂</span><span class=\"bp\">&gt;</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span><span class=\"n\">m₁</span><span class=\"bp\">&gt;</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I get an error at the first <code>&gt; b</code>, saying \"expected '&gt;'\". Using <code>[m]</code> instead of <code>&lt; m &gt;</code> solves the problem, but I don't know why. Should we avoid <code>&lt;</code> in local notation?</p>",
        "id": 310605025,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668690173
    },
    {
        "content": "<p>Isn't that ambiguous?</p>",
        "id": 310607452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668691022
    },
    {
        "content": "<p>it seems like it would just read <code>m2 &gt; b</code> as a term</p>",
        "id": 310607494,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668691045
    },
    {
        "content": "<p>In lean 3, local notations also have high priority, meaning that you presumably can't use inequalities at all in that file. To get a similar effect in lean 4 you should use <code>local notation (priority := high)</code></p>",
        "id": 310607821,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668691147
    },
    {
        "content": "<p>testing it, <code>priority := high</code> is not sufficient, but raising the precedence so that <code>m &gt; b</code> is not a legal input for the <code>m</code> in the notation works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"n\">a</span> <span class=\"s2\">\" &lt;\"</span> <span class=\"n\">m</span><span class=\"o\">:</span><span class=\"mi\">51</span> <span class=\"s2\">\"&gt; \"</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">distrib</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span><span class=\"n\">m₂</span><span class=\"bp\">&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span><span class=\"n\">m₁</span><span class=\"bp\">&gt;</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span><span class=\"n\">m₂</span><span class=\"bp\">&gt;</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span><span class=\"n\">m₁</span><span class=\"bp\">&gt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span><span class=\"n\">m₂</span><span class=\"bp\">&gt;</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span><span class=\"n\">m₁</span><span class=\"bp\">&gt;</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 310608461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668691372
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 310608806,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668691497
    },
    {
        "content": "<p>Also, what happened to <code>include</code> and <code>omit</code>?</p>",
        "id": 310609933,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668691897
    },
    {
        "content": "<p>They are hopefully not necessary anymore. I suspect we will eventually find a need for them but lean 4 is much better at doing the right thing by default</p>",
        "id": 310610761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668692226
    }
]