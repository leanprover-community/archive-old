[
    {
        "content": "<p>Could we report an error (or warning) on the <code>exact</code> line?</p>",
        "id": 316459875,
        "sender_full_name": "David Renshaw",
        "timestamp": 1671284629
    },
    {
        "content": "<p>It seems to me that the core problem is that the parsing error shows up far away from where it needs to be addressed.</p>",
        "id": 316460023,
        "sender_full_name": "David Renshaw",
        "timestamp": 1671284674
    },
    {
        "content": "<p>Mario and I just PM'd a bit about this, and I quote some of his comments with his permission.  He clarifies the proposal from the meeting on Thursday and points out that it still doesn't make \"goals accomplished\" work as expected in some cases:</p>\n<blockquote>\n<p>the proposal was basically to not use goals accomplished if there are any synthetic sorries in the goal, such as might be created by an erroring tactic</p>\n</blockquote>\n<blockquote>\n<p>that's still a bit non-local though, for example here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">id</span>\n    <span class=\"n\">exact</span> <span class=\"n\">trivial</span>\n    <span class=\"c1\">-- here</span>\n  <span class=\"n\">apply</span> <span class=\"n\">id</span>\n  <span class=\"n\">exact</span> <span class=\"n\">syntax</span> <span class=\"n\">error</span>\n</code></pre></div>\n<p>in this example, we will get a \"goals accomplished\" message at the indicated location currently, do you find this to be a good thing or a bad thing? Under the proposal this will be shown as \"no goals\" because of the syntax error on a later line</p>\n</blockquote>",
        "id": 316461726,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671285333
    },
    {
        "content": "<p>And regarding the <a href=\"#narrow/stream/113489-new-members/topic/behaviour.20of.20.60exact.60.20in.20lean4/near/307512598\">example at hand</a> in this thread, he concludes as <span class=\"user-mention\" data-user-id=\"243791\">@David Renshaw</span> did that the premature \"goals accomplished\" is really a symptom, not a cause, the cause being Lean 4's \"better\" (i.e., more optimistic, and less dependent on separators like <code>,</code>) parser than Lean 3.</p>\n<blockquote>\n<p>that's because lean 3 completely falls over when there is a parse error</p>\n</blockquote>\n<blockquote>\n<p>when there are parse errors you can't get anything useful from the goal view</p>\n</blockquote>\n<blockquote>\n<p>so you have to be really good about putting commas and underscores when working with lean</p>\n</blockquote>\n<blockquote>\n<p>count all the instances of <strong>don't forget the comma</strong> in NNG</p>\n</blockquote>",
        "id": 316462166,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671285523
    },
    {
        "content": "<p>Personally, I have come to the conclusion that there is no possibility of having a sensible \"goals accomplished\" in Lean 4.  It is a tradeoff, basically, and we lost it when we got rid of the commas.  I propose that we rename \"goals accomplished\" to \"no goals\" so that it seems to imply no particular promise.</p>",
        "id": 316462747,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671285721
    },
    {
        "content": "<p>For teaching I would combine that with <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>'s suggestion of inserting <code>done</code> at the end of each exercise so that at least the errors get localised to one exercise and don't drift into the next.  (Or maybe we can bring back <code>begin</code>/<code>end</code> for teaching purposes only.)</p>",
        "id": 316462817,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671285739
    },
    {
        "content": "<p>8 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/behaviour.20of.20.02klzzwxh.3A0000.03.20in.20lean4\">#new members &gt; behaviour of <code>exact</code> in lean4</a> by <span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span>.</p>",
        "id": 316463492,
        "sender_full_name": "Notification Bot",
        "timestamp": 1671286028
    },
    {
        "content": "<p>Is wrapping exercises in <code>section</code>/<code>end</code> enough to contain errors?</p>",
        "id": 316463805,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671286169
    },
    {
        "content": "<p>It is, but that's less readable than having <code>begin</code>/<code>end</code> proof blocks in my opinion.</p>",
        "id": 316463977,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671286231
    },
    {
        "content": "<p>I imagine it would be quite easy to write a <code>done?</code> variant of <code>done</code> that displays <code>goals accomplished</code> if there are no metavariables and a <code>proof incomplete</code> or something otherwise</p>",
        "id": 316464074,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1671286287
    },
    {
        "content": "<p>And if we change the generic goals accomished message to \"no goals\", that would be a reasonable solution IMO</p>",
        "id": 316464225,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1671286337
    },
    {
        "content": "<p>Perhaps it doesn't even need to be a variant, this could just be the standard behaviour of <code>done</code>.</p>",
        "id": 316464599,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671286511
    },
    {
        "content": "<p>Or maybe we can call it <code>qed</code> (à la Coq) rather than <code>done?</code>.  With unicode <code>□</code> even!</p>",
        "id": 316465021,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671286684
    },
    {
        "content": "<p>I would rather have us fix our broken heuristics (if we can figure out the behavior we want) than regress the user experience</p>",
        "id": 316465441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671286849
    },
    {
        "content": "<p>for example, if the issue is that <code>exact</code> reports a parse error on the next command, well let's fix that</p>",
        "id": 316465519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671286874
    },
    {
        "content": "<p>...where should it report an error?</p>",
        "id": 316465541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671286888
    },
    {
        "content": "<p>the parser's behavior here is very sensible, it is giving an error on the token that can't be parsed</p>",
        "id": 316465652,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671286924
    },
    {
        "content": "<p>which happens to be the one on the next command</p>",
        "id": 316465684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671286942
    },
    {
        "content": "<p>I agree Mario, of course. But having such a <code>qed</code> tactic would be nice anyway, especially if it gives you a count of the remaining goals.</p>",
        "id": 316465729,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1671286968
    },
    {
        "content": "<p>now if that token happens to be to the left of the <code>position</code> mark, then it couldn't be part of the command anyway so maybe we should shift the blame earlier</p>",
        "id": 316465755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671286981
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> To clarify, which of these proposals do you consider a regression of the user experience? The phrasing \"goals accomplished\" vs \"no goals\", or inserting <code>done</code>/<code>qed</code> so that errors don't flow on to the next declaration?</p>",
        "id": 316465759,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671286982
    },
    {
        "content": "<p>the loss of \"goals accomplished\" in common scenarios is a regression</p>",
        "id": 316465797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671287005
    },
    {
        "content": "<p>Mario, I thought you didn't care about whether it was called \"goals accomplished\" or \"no goals\"?</p>",
        "id": 316465852,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671287038
    },
    {
        "content": "<p>I don't, personally, but some others do and I remember it being a big thing when it was first added to lean 3</p>",
        "id": 316465938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671287066
    },
    {
        "content": "<p>it's literally just some text but it helps with gamifying the experience</p>",
        "id": 316465976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671287093
    },
    {
        "content": "<p>inserting <code>done</code> is a fine hack if it helps you with controlling the messages, but it's clearly not where we are going long term</p>",
        "id": 316466100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671287148
    },
    {
        "content": "<p>and for me personally, I don't like having to add things like that and then remove them when the proof is done, it makes me think about whether it is worth adding in this case and that's a waste of brain cells</p>",
        "id": 316466370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671287267
    },
    {
        "content": "<p>I'd be delighted if we can get \"goals accomplished\" working eventually, but in the short term (until someone has time for that) I think renaming to \"no goals\" is a strict improvement.</p>",
        "id": 316466508,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671287308
    },
    {
        "content": "<p>well I'm trying to evince a specification with these questions</p>",
        "id": 316466592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671287336
    },
    {
        "content": "<p>I think there is not much preventing us from implementing whatever in this space</p>",
        "id": 316466629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671287352
    },
    {
        "content": "<p>the server knows a lot about what is going on</p>",
        "id": 316466652,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671287359
    },
    {
        "content": "<p>For such a specification, maybe <span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> has some good test cases from his experience teaching with Lean 4.</p>",
        "id": 316466702,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671287381
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/premature.20.22goals.20accomplished.22/near/316465755\">said</a>:</p>\n<blockquote>\n<p>now if that token happens to be to the left of the <code>position</code> mark, then it couldn't be part of the command anyway so maybe we should shift the blame earlier</p>\n</blockquote>\n<p>And certainly this seems like an excellent proposed change to <code>exact</code>.</p>",
        "id": 316467354,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671287661
    },
    {
        "content": "<p>To be honest I see disparition of <code>begin</code>/<code>end</code> as a big regression whatever the context (teaching or not). Having the error message saying the proof isn't finished at the beginning of the proof is really annoying. I wanted to propose that we simply restore begin/end in mathlib.</p>",
        "id": 316470454,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671288958
    },
    {
        "content": "<p>I simply don't understand what is the expected gain in this change. Is it the number of keystrokes? You can easily setup a 2 letters long abbreviation that VSCode turns into begin/end</p>",
        "id": 316470632,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671289023
    },
    {
        "content": "<p>having had a recent need to use pascal, I can say I am really not a fan of <code>begin</code>/<code>end</code>: it is verbose, it doesn't work with bracket matching, it makes indentation around it more work unless you have a good autoformatter</p>",
        "id": 316471108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671289216
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/287929-mathlib4/topic/premature.20.22goals.20accomplished.22/near/316462166\">said</a>:</p>\n<blockquote>\n<p>the premature \"goals accomplished\" is really a symptom, not a cause, the cause being Lean 4's \"better\" (i.e., more optimistic, and less dependent on separators like <code>,</code>) parser than Lean 3.</p>\n</blockquote>\n<p>But that would be trivial to at least take into account in the error message - something like \"no goals left at this point, but errors are present in the current declaration\"</p>",
        "id": 316472133,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671289625
    },
    {
        "content": "<p>Personally, I could see using <code>done</code> always as a default for teaching. <code>begin ... end</code> just becomes <code>by ... done</code>. For students I think this is ideal because it forces them to claim the proof is over. Maybe there could even be an option to make it a requirement (by Lean) of some sort. Although I'm fine if <code>done</code> were omitted in mathlib.</p>",
        "id": 316472228,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1671289660
    },
    {
        "content": "<p>It's easy to make a linter that requires <code>done</code> on all by blocks</p>",
        "id": 316472583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671289822
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Sure, I even think \"no goals\" is a suggestive enough message here, and <a href=\"#narrow/stream/287929-mathlib4/topic/premature.20.22goals.20accomplished.22/near/316462747\">my proposal</a> (at least for the short term) is to rephrase \"goals accomplished\" to \"no goals\".</p>\n<p>But as <a href=\"#narrow/stream/287929-mathlib4/topic/premature.20.22goals.20accomplished.22/near/316465938\">Mario points out</a>, a lot of people like the more optimistic \"goals accomplished\" phrasing if we can find a way to show that when it happens to be appropriate.</p>",
        "id": 316472794,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671289907
    },
    {
        "content": "<p>So to clarify, my proposal is to show that specific message only in the circumstance described by it</p>",
        "id": 316473124,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671290046
    },
    {
        "content": "<p>And even then, it probably doesn't have to be shown if all remaining error messages are \"unsolved goals\"</p>",
        "id": 316473248,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671290111
    },
    {
        "content": "<p>Here are some cases that we might want to take into account:</p>\n<ul>\n<li>Goals accomplished <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> everything is done</li>\n<li>Goals accomplished, but you used <code>sorry</code></li>\n<li>No goals remaining, a tactic in this block threw an error</li>\n<li>Goals accomplished, but there is an error elsewhere in the proof (not in this block)</li>\n<li>Subgoals accomplished, but this is a by block nested in another one (which may or may not be complete)</li>\n</ul>",
        "id": 316473442,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671290181
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> would such a linter force <code>done</code> on a subproof without an explicit <code>by</code>?</p>",
        "id": 316473508,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1671290214
    },
    {
        "content": "<p>what does that mean?</p>",
        "id": 316473545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671290228
    },
    {
        "content": "<p>Either should be implementable</p>",
        "id": 316473584,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671290245
    },
    {
        "content": "<p>like <code>example : 1 = 1 := rfl</code> instead of <code>example : 1 = 1 := by rfl; done</code>?</p>",
        "id": 316473617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671290256
    },
    {
        "content": "<p>I have a silly question.  When <code>by</code> is started, tactics have to be on the same line or on later lines and indented right?  If so, can't lean 4 find the last indented line and basically automatically run <code>done</code> there with a nice error message?</p>",
        "id": 316473664,
        "sender_full_name": "Jason Rute",
        "timestamp": 1671290277
    },
    {
        "content": "<p>I think it is difficult to get vscode to highlight a span that isn't in the text</p>",
        "id": 316473810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671290330
    },
    {
        "content": "<p>No, like when you generate multiple goals and you focus (or further indent?) one of the goals. Sorry, on mobile so typing Lean is hard.</p>",
        "id": 316473819,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1671290337
    },
    {
        "content": "<p>like if you have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">id</span>\n\n<span class=\"c1\">-- ^ that line</span>\n</code></pre></div>\n<p>with no indentation on the last line, the span we want to highlight is not addressable by vscode line/col indexing</p>",
        "id": 316473968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671290389
    },
    {
        "content": "<p>it is probably fine to just put a highlight at column 0 though, or the right column provided there is an indent there</p>",
        "id": 316474250,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671290503
    },
    {
        "content": "<p>vscode will round the position to the nearest addressable location no matter what we do, which isn't a horrible place to put the highlight</p>",
        "id": 316474448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671290565
    },
    {
        "content": "<p>Just to give some more context that may not be obvious: an \"unsolved goals\" error message actually extends over the entire block, but we tweaked its display so that the squigglies are shown on the first line only, as otherwise half your screen is red. That's why you can see the message in the \"Messages\" (not \"All Messages\") list even if your cursor is not on the squiggly itself.</p>",
        "id": 316474453,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671290567
    },
    {
        "content": "<p>Huh. What though if we put the full line range of the unsolved goals error in the progress bar thingy to the left of the editor?</p>",
        "id": 316474523,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671290610
    },
    {
        "content": "<p>what progress bar?</p>",
        "id": 316474570,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671290639
    },
    {
        "content": "<p>The usually-orange progress indicator</p>",
        "id": 316474641,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671290664
    },
    {
        "content": "<p>would it just highlight the error span of the currently displayed message?</p>",
        "id": 316474717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671290703
    },
    {
        "content": "<p>I think that those kind of messages are generally bugs</p>",
        "id": 316474779,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671290733
    },
    {
        "content": "<p>so I don't want to encourage their use</p>",
        "id": 316474807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671290742
    },
    {
        "content": "<p>the single line highlighting is a hack to minimize the pain of an error that covers 30 lines, but it should just have a better span</p>",
        "id": 316474978,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671290791
    },
    {
        "content": "<p>I would say all error messages should leave a red mark in the progress indicator. I think Isabelle does this as well.</p>",
        "id": 316475041,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671290818
    },
    {
        "content": "<p>you already get red marks from the diagnostics</p>",
        "id": 316475091,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671290839
    },
    {
        "content": "<p>the scroll bar gets little red ticks in it</p>",
        "id": 316475124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671290861
    },
    {
        "content": "<p>You mean on the scroll bar?</p>",
        "id": 316475146,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671290868
    },
    {
        "content": "<p>Right, that's helpful too, but if we want to highlight multiple lines as close to the actual editor as possible without swimming in squigglies, the progress indicator seems to be the best choice</p>",
        "id": 316475300,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671290940
    },
    {
        "content": "<p>I don't disagree, I think that would be a good way to handle such errors... but also we should find and remove those errors when we can</p>",
        "id": 316475820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671291152
    },
    {
        "content": "<p>I'm not sure what you mean by that. I'm assuming you don't want to get rid of all \"unsolved goals\" errors.</p>",
        "id": 316475950,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671291221
    },
    {
        "content": "<p>I think we need to put unsolved goals errors in the right place. As pointed out up-thread they should not be at the <code>by</code> in the first place</p>",
        "id": 316476144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671291312
    },
    {
        "content": "<p>I really wish we would move forward with empty blocks already, since in that case you could just use <code>.</code> as an alternative to <code>done</code></p>",
        "id": 316476284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671291381
    },
    {
        "content": "<p>I don't mind empty blocks, but putting <code>.</code> sounds like just another workaround. Especially since there's not all that much space to put squigglies on there.</p>",
        "id": 316476641,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671291556
    },
    {
        "content": "<p>In any case, both our proposals don't address the \"parse error in <code>exact</code>\" issue because there's no \"unsolved goals\" error there to begin with</p>",
        "id": 316476788,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671291631
    },
    {
        "content": "<p>actually you're right, <code>.</code> isn't good. What should really work is Jason's suggestion, that is simply indenting to the right place</p>",
        "id": 316477641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671292040
    },
    {
        "content": "<p>because that is invariably where you end up when you are thinking about what to do next</p>",
        "id": 316477718,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671292073
    },
    {
        "content": "<p>I just now ran into this issue with the following pattern:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span>\n  <span class=\"c1\">--^ cursor here, 2 + 2 = 4 is displayed as the tactic state</span>\n</code></pre></div>",
        "id": 316477952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671292168
    },
    {
        "content": "<p>The rulers in VSCode do appear out of nowhere right? Like, a straight line at the 80th character. Would a similar technique allow the plugin to display something without the presence of text?</p>",
        "id": 316494968,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1671301039
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/287929-mathlib4/topic/premature.20.22goals.20accomplished.22/near/316472133\">said</a>:</p>\n<blockquote>\n<p>But that would be trivial to at least take into account in the error message - something like \"no goals left at this point, but errors are present in the current declaration\"</p>\n</blockquote>\n<p>I think that would be a really good, trivial improvement: use \"goals accomplished <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>\" for no goals + no errors, and \"no goals\" otherwise. At the moment, <span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> &amp; I are doing exactly that for our in-development Lean4-game.</p>\n<p>\"unsolved goals\" is another issue, but I don't have a perfect suggestion for that... We're currently using a hidden <code>done</code> at the end and then modify when the message is actually displayed.</p>",
        "id": 316528503,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1671324948
    },
    {
        "content": "<p>I'd like to record some takeaways from this discussion in core-Lean issues, but since I'm not very experienced here I would first like to check that my summaries are correct.</p>\n<p>Firstly, I gather the experts (<span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> , <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> , ...) think that sometimes what a user experiences as a \"premature goals accomplished\" is actually a particular tactic behaving badly: it's not throwing an error soon enough, in a situation where it is already clear that there is no valid completion. And in those cases, the tactic should be fixed.  For instance, in <a href=\"#narrow/stream/113489-new-members/topic/behaviour.20of.20.60exact.60.20in.20lean4/near/307512598\">Damiano's example</a> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span>\n</code></pre></div>\n<p>both <a href=\"#narrow/stream/287929-mathlib4/topic/premature.20.22goals.20accomplished.22/near/316465519\">Mario</a> and <a href=\"#narrow/stream/287929-mathlib4/topic/premature.20.22goals.20accomplished.22/near/316476788\">Sebastian</a> apparently diagnose the problem as <code>exact</code> behaving badly: if an unfinished <code>exact</code> is followed by a de-indentation, then report the associated error on <code>exact</code> itself and not the de-indentation.  Is that correct, and if so can I open an issue for it?</p>",
        "id": 316657644,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671416099
    },
    {
        "content": "<p>A small amendment: it's not actually <code>exact</code>'s job to handle this. The fix would be in the core parser infrastructure / somewhere around the <code>withPosition</code> parser combinator, and so it would affect all parsers using position handling similarly.</p>",
        "id": 316657831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671416289
    },
    {
        "content": "<p>OK, so in fact it would deal with the same problem for a number of different tactics?  That seems even better.</p>",
        "id": 316657861,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671416329
    },
    {
        "content": "<p>So is there a reason that isn't already the behaviour?</p>",
        "id": 316657929,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671416353
    },
    {
        "content": "<p>And another question:  Would this also solve the problem that if you have an incomplete proof, the associated red underline shows up at the beginning of the next declaration?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">not_a_tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- error on this line</span>\n</code></pre></div>",
        "id": 316658033,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671416507
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/287929-mathlib4/topic/premature.20.22goals.20accomplished.22/near/316657929\">said</a>:</p>\n<blockquote>\n<p>So is there a reason that isn't already the behaviour?</p>\n</blockquote>\n<p>The current behavior is also fairly natural: report an error on the first token that is invalid given what the current parser expects. So if you write <code>fun x ?? e</code> then you get an error on <code>??</code> because that's not what you are supposed to write there, and the error message will say to try <code>=&gt;</code> instead. For <code>withPosition</code> it's a similar story: if you write a token which is too far to the left it's basically the same as the <code>??</code> token in this example: we were expecting a not-too-far-to-the-left token and you didn't give me one.</p>",
        "id": 316658054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671416523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/287929-mathlib4/topic/premature.20.22goals.20accomplished.22/near/316658033\">said</a>:</p>\n<blockquote>\n<p>And another question:  Would this also solve the problem that if you have an incomplete proof, the associated red underline shows up at the beginning of the next declaration?</p>\n</blockquote>\n<p>yes</p>",
        "id": 316658122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671416601
    },
    {
        "content": "<p>well, it depends on the situation</p>",
        "id": 316658135,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671416624
    },
    {
        "content": "<p>but if it's a by block and the <code>example</code> is not indented then yes</p>",
        "id": 316658148,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671416642
    },
    {
        "content": "<p>Then, there is the proposal that we say something weaker than \"goals accomplished\" (maybe \"no goals\") under certain circumstances.  For example, <a href=\"#narrow/stream/287929-mathlib4/topic/premature.20.22goals.20accomplished.22/near/316461726\">Mario's proposal</a> that this be done </p>\n<blockquote>\n<p>if there are any synthetic sorries in the goal, such as might be created by an erroring tactic</p>\n</blockquote>\n<p>or <span class=\"user-mention\" data-user-id=\"385895\">@Jon Eugster</span>'s <a href=\"#narrow/stream/287929-mathlib4/topic/premature.20.22goals.20accomplished.22/near/316528503\">proposal</a> that this be done if there are no goals but also some error.  I can't tell if these are exactly the same proposal, or if they're slightly different.</p>",
        "id": 316658453,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671416973
    },
    {
        "content": "<p>they are slightly different (and Jon's suggestion is probably better). A synthetic sorry means something probably went wrong (they should only be generated if an error message is produced), but an error message does not have to come with a sorry, and also you can have a failing tactic that does not contribute to the goal and hence leaves no sorry. I think one way to detect errors directly would be to look at the messages list and see if a red squiggle message was emitted</p>",
        "id": 316659584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671418133
    },
    {
        "content": "<p>I opened <br>\n<a href=\"https://github.com/leanprover/lean4/issues/1970\">https://github.com/leanprover/lean4/issues/1970</a><br>\n<a href=\"https://github.com/leanprover/lean4/issues/1971\">https://github.com/leanprover/lean4/issues/1971</a><br>\nwith the proposals from this discussion.</p>",
        "id": 316671037,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671429063
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/premature.20.22goals.20accomplished.22/near/316657831\">said</a>:</p>\n<blockquote>\n<p>A small amendment: it's not actually <code>exact</code>'s job to handle this. The fix would be in the core parser infrastructure / somewhere around the <code>withPosition</code> parser combinator, and so it would affect all parsers using position handling similarly.</p>\n</blockquote>\n<p>Attaching this to <code>withPosition</code> looks dubious. First of all,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">exact</span>\n<span class=\"n\">id</span>\n</code></pre></div>\n<p>is (unfortunately?) perfectly valid. Second, there's no inherent reason why</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">if</span>\n\n<span class=\"kd\">def</span>\n</code></pre></div>\n<p>shouldn't have its error position improved as well.</p>",
        "id": 316697002,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671441604
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/287929-mathlib4/topic/premature.20.22goals.20accomplished.22/near/316475300\">said</a>:</p>\n<blockquote>\n<p>Right, that's helpful too, but if we want to highlight multiple lines as close to the actual editor as possible without swimming in squigglies, the progress indicator seems to be the best choice</p>\n</blockquote>\n<p>Btw, Dafny is perhaps what that <a href=\"https://dafny.org/images/Demo.png\">looks like</a> in the limit of increasing detail (from <a href=\"https://dafny.org/\">https://dafny.org/</a>).</p>\n<div class=\"message_inline_image\"><a href=\"https://dafny.org/images/Demo.png\" title=\"looks like\"><img src=\"https://uploads.zulipusercontent.net/b696ebc60d997202783075b6bdddd31b9010fc22/68747470733a2f2f6461666e792e6f72672f696d616765732f44656d6f2e706e67\"></a></div>",
        "id": 317080279,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1671595174
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/287929-mathlib4/topic/premature.20.22goals.20accomplished.22/near/316671037\">said</a>:</p>\n<blockquote>\n<p>I opened <br>\n<a href=\"https://github.com/leanprover/lean4/issues/1970\">https://github.com/leanprover/lean4/issues/1970</a><br>\n<a href=\"https://github.com/leanprover/lean4/issues/1971\">https://github.com/leanprover/lean4/issues/1971</a><br>\nwith the proposals from this discussion.</p>\n</blockquote>\n<p>I still hope that the devs will take up the \"premature goals accomplished\" issue eventually.  Since this looks like it might take a while, I have opened a PR<br>\n<a href=\"https://github.com/leanprover/vscode-lean4/pull/277\">https://github.com/leanprover/vscode-lean4/pull/277</a><br>\nto rename \"goals accomplished <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>\" to \"no goals\" in the VS Code extension.  This is intended as a temporary measure to make the user experience less confusing.</p>",
        "id": 320572617,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673397990
    }
]