[
    {
        "content": "<p>How far are we from <code>lake get-cache</code>? Switching branches and running <code>lake build</code> is quite time consuming.</p>",
        "id": 316936698,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671538579
    },
    {
        "content": "<p>Is it going to be a general <code>lake</code> command or a Mathlib specific script (<code>lake run get_cache</code>)?<br>\nMy two cents:</p>\n<ul>\n<li>I don't think many (if any) other Lean 4 projects will implement caching as mathlib does, so implementing it as a <code>lake</code> command <em>may</em> be a bit wasteful</li>\n<li>Mathlib maintainers will have much more freedom to adjust the script if it's a Mathlib self-contained thing</li>\n<li><em>If</em> caching becomes a popular thing among Lean 4 projects someday, then upstreaming it to <code>lake</code> can become a more worthwhile effort</li>\n</ul>\n<p>Implementing it as a <code>lake</code> command has more complexities because it has to be more generic. For instance, the host might be a different one from Azure (a host config parameter enters the arena)</p>",
        "id": 316961058,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671545952
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/316961058\">said</a>:</p>\n<blockquote>\n<p>Is it going to be a general <code>lake</code> command or a Mathlib specific script (<code>lake run get_cache</code>)?<br>\nMy two cents:</p>\n<ul>\n<li>I don't think many (if any) other Lean 4 projects will implement caching as mathlib does, so implementing it as a <code>lake</code> command <em>may</em> be a bit wasteful</li>\n<li>Mathlib maintainers will have much more freedom to adjust the script if it's a Mathlib self-contained thing</li>\n<li><em>If</em> caching becomes a popular thing among Lean 4 projects someday, then upstreaming it to <code>lake</code> can become a more worthwhile effort</li>\n</ul>\n<p>Implementing it as a <code>lake</code> command has more complexities because it has to be more generic. For instance, the host might be a different one from Azure (a host config parameter enters the arena)</p>\n</blockquote>\n<p>This might not be true. Aren't there projects like <code>scilib</code> etc which might eventually get large enough? Other communities might benefit from <code>lean</code>. I can imagine theoretical CS folks building their own <code>tcslib</code> in the not too distant future. I am writing a tool  that might get large for a formal verification project in lean and I can imagine this will be useful for me.</p>",
        "id": 316964074,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671546801
    },
    {
        "content": "<p>Right now the difference is that mathlib4 has many people working on it right now, and the other projects do not. I agree that in the future this might change in the sense that other projects might also get a lot of momentum, but mathlib4 is an extremely high priority project for lots of reasons.</p>",
        "id": 316964724,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671546981
    },
    {
        "content": "<p>We agree that it can be useful, but I see it as an overengineering decision at this point in which mathlib folks can benefit from it <em>today</em>. There needs to be more discussions around caching as a <code>lake</code> command. For instance, mathlib pushes content to Azure via a bash script that runs after merges. I doubt that would be the solution inherited by a generic <code>lake</code> command. (a <code>lake push-cache</code> command enters the arena)</p>",
        "id": 316965235,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671547109
    },
    {
        "content": "<p>I agree that it would be better to have a <code>ml4-get-cache.sh</code> now rather then waiting 3 weeks for a <code>lake get-cache</code>.</p>",
        "id": 316965835,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671547265
    },
    {
        "content": "<p>it might still be <code>lake run get_cache</code> though since you probably want that script to integrate with lake in some ways</p>",
        "id": 316969552,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671548261
    },
    {
        "content": "<p>Makes sense to prioritise mathlib. <br>\nA question out of curiosity: Is there a solution to this issue along the lines of  make?</p>",
        "id": 316999912,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671557109
    },
    {
        "content": "<p>Something along the following lines of calling make from inside the lakefile</p>",
        "id": 317001411,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671557547
    },
    {
        "content": "<p>then calling lean inside the make files with the target being the corresponding object file. I don't know enough about lake to make a meaningful conclusion about this possibility, hence the question.</p>",
        "id": 317002110,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671557769
    },
    {
        "content": "<p>Lake scripts run in <code>IO</code> already. It's simpler to write a single Lake script that does it all, even if it calls <code>curl</code> indirectly</p>",
        "id": 317002986,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671558033
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/317002986\">said</a>:</p>\n<blockquote>\n<p>Lake scripts run in <code>IO</code> already. It's simpler to write a single Lake script that does it all, even if it calls <code>curl</code> indirectly</p>\n</blockquote>\n<p>I am framing the usage of makefiles as a quick and dirty fix. lake being a build tool is likely to have access to ways of calling external commands.</p>",
        "id": 317003312,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671558132
    },
    {
        "content": "<p>But I see your point. Doing it inside lake scripts might be advantageous</p>",
        "id": 317003696,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671558244
    },
    {
        "content": "<p>and also the remote cache solution will save the necessity of the first build as well. A few minutes ago I was watching the build process take &gt; 18 minutes on the CI as it was apparently rebuilding every file (taking longer for some files).  This seems wasteful.</p>",
        "id": 317004129,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671558396
    },
    {
        "content": "<p>I find writing Lean code as easy (if not easier) than handling makefiles. It depends on the programmer, but as far as I can see, a Lake script is just as \"quick and dirty\" in this sense</p>",
        "id": 317004630,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671558545
    },
    {
        "content": "<p>Since nobody has volunteered so far, I will do it as soon as I finish a task I'm currently working on</p>",
        "id": 317019638,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671563233
    },
    {
        "content": "<p>Please don't let perfect be the enemy of good (any caching solution is better than what we have now), but for discussion:</p>\n<p>I'd love to see the following behaviour for a cache retrieving function:</p>\n<ul>\n<li>Hash the contents of <code>lakefile.lean</code> <code>lake-manifest.json</code> and <code>lean-toolchain</code> (and possibly any information about hardware architecture that makes oleans non-platform independent). Call that the root hash</li>\n<li>For each lean file, combine the root hash, the hash of each imported file (in the same project), and the hash of the contents of the file, and call that the file hash.</li>\n<li>Send a request to a server with a list of all the hashes in current build job.</li>\n<li>Get back build artifacts for some subset (ideally everything, but take what you can get) of those.</li>\n<li>Build everything else, sending the resulting built artifacts back to the server.</li>\n</ul>\n<p>In a zeroth approximation we would do no verification of the submitted build artifacts whatsoever. :-)</p>",
        "id": 317054810,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671576830
    },
    {
        "content": "<p>(i.e. roll our own minimal nix)</p>",
        "id": 317054902,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671576859
    },
    {
        "content": "<p>I haven't started yet, but I am wondering if I should really use a Lake script since there isn't a self-contained solution for http requests. I will probably just do it in Python</p>",
        "id": 317059052,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671578827
    },
    {
        "content": "<p>Can't you just call <code>curl</code> or something?</p>",
        "id": 317059822,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671579256
    },
    {
        "content": "<p>I can but I don't know if it would work for Windows users</p>",
        "id": 317059864,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671579287
    },
    {
        "content": "<p>(would it?)</p>",
        "id": 317059903,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671579305
    },
    {
        "content": "<p>Okay, I'll call <code>curl</code> then. If anything, it can be changed later</p>",
        "id": 317060894,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671579944
    },
    {
        "content": "<p><code>curl</code> does technically work on Windows, but depends on weird internet explorer stuff (which is susceptible to breakage) if I'm remembering correctly.</p>",
        "id": 317062809,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1671581010
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">❯</span> <span class=\"n\">curl</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">www.google.com</span>\n<span class=\"n\">curl</span> <span class=\"o\">:</span> <span class=\"n\">The</span> <span class=\"n\">response</span> <span class=\"n\">content</span> <span class=\"n\">cannot</span> <span class=\"n\">be</span> <span class=\"n\">parsed</span> <span class=\"n\">because</span> <span class=\"n\">the</span> <span class=\"n\">Internet</span> <span class=\"n\">Explorer</span> <span class=\"n\">engine</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">available</span><span class=\"o\">,</span> <span class=\"n\">or</span> <span class=\"n\">Internet</span> <span class=\"n\">Explorer's</span> <span class=\"n\">first</span><span class=\"bp\">-</span><span class=\"n\">launch</span> <span class=\"n\">configuration</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">complete.</span> <span class=\"n\">Specify</span> <span class=\"n\">the</span> <span class=\"n\">UseBasicParsing</span> <span class=\"kd\">parameter</span> <span class=\"n\">and</span> <span class=\"n\">try</span> <span class=\"n\">again.</span>\n<span class=\"n\">At</span> <span class=\"n\">line</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"n\">char</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n<span class=\"bp\">+</span> <span class=\"n\">curl</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">www.google.com</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~~~~~~~~~~~~~~~~~~~~~~~~~~~</span>\n    <span class=\"bp\">+</span> <span class=\"n\">CategoryInfo</span>          <span class=\"o\">:</span> <span class=\"n\">NotImplemented</span><span class=\"o\">:</span> <span class=\"o\">(:)</span> <span class=\"o\">[</span><span class=\"n\">Invoke</span><span class=\"bp\">-</span><span class=\"n\">WebRequest</span><span class=\"o\">],</span> <span class=\"n\">NotSupportedException</span>\n    <span class=\"bp\">+</span> <span class=\"n\">FullyQualifiedErrorId</span> <span class=\"o\">:</span> <span class=\"n\">WebCmdletIEDomNotSupportedException</span><span class=\"o\">,</span><span class=\"n\">Microsoft.PowerShell.Commands.InvokeWebRequestCommand</span>\n</code></pre></div>",
        "id": 317062844,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1671581038
    },
    {
        "content": "<p>The lakefile will get pretty dirty. Should I make separate executables that can be run with <code>lake exe get-cache</code> or something?</p>",
        "id": 317064180,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671581908
    },
    {
        "content": "<p>(I will do it because some possibilities open up and dev time will be shorter)</p>",
        "id": 317065408,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671582679
    },
    {
        "content": "<p>Alright, I was able to efficiently hash all relevant Lean files. Can someone point me to a place where I can check how to push and get files to/from the Azure server?</p>",
        "id": 317070393,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671586234
    },
    {
        "content": "<p>I can get you a blob storage on our Azure account.  Do you like the name <code>mathlib4cache</code>?</p>",
        "id": 317071392,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1671587159
    },
    {
        "content": "<p>Or are you looking for API docs? <a href=\"https://learn.microsoft.com/en-us/rest/api/storageservices/put-blob\">https://learn.microsoft.com/en-us/rest/api/storageservices/put-blob</a></p>",
        "id": 317071467,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1671587210
    },
    {
        "content": "<p>Both actually</p>",
        "id": 317071501,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671587256
    },
    {
        "content": "<p>This is the current status of the code btw: <a href=\"https://github.com/leanprover-community/mathlib4/blob/ap/caching/Caching/Utils.lean\">https://github.com/leanprover-community/mathlib4/blob/ap/caching/Caching/Utils.lean</a></p>",
        "id": 317071589,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671587345
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/317071392\">said</a>:</p>\n<blockquote>\n<p>I can get you a blob storage on our Azure account.  Do you like the name <code>mathlib4cache</code>?</p>\n</blockquote>\n<p>Please let me know the URL once that's done <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 317071714,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671587446
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> , sorry I didn't suggest this earlier, but could you investigate whether you can use <code>Lake.computeTrace</code>?</p>",
        "id": 317073244,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671588842
    },
    {
        "content": "<p>Reusing infrastructure from <code>lake</code>, even if we're not planning on modifying lake itself in the short term, seems like a win.</p>",
        "id": 317073297,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671588864
    },
    {
        "content": "<p>What does that function do?</p>",
        "id": 317074411,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671589864
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/317059052\">said</a>:</p>\n<blockquote>\n<p>I haven't started yet, but I am wondering if I should really use a Lake script since there isn't a self-contained solution for http requests. I will probably just do it in Python</p>\n</blockquote>\n<p>Fwiw <code>Socket.lean</code> has a <a href=\"https://github.com/xubaiw/Socket.lean/tree/main/examples/http-client\">HTTP client example</a> although the library seems pretty experimental.</p>",
        "id": 317074650,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1671590080
    },
    {
        "content": "<p>Yeah, <code>curl</code> will make the code more stable and robust though</p>",
        "id": 317074788,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671590220
    },
    {
        "content": "<blockquote>\n<p>Fwiw Socket.lean has a HTTP client example although the library seems pretty experimental.</p>\n</blockquote>\n<p>I just want to say out loud that this implementation is completely unsuitable for production.  It doesn't do TLS, happy eyeballs or even just multiple A records, or really anything one might expect from an HTTP client.</p>",
        "id": 317075282,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1671590709
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/317074411\">said</a>:</p>\n<blockquote>\n<p>What does that function do?</p>\n</blockquote>\n<p>I'm not a lake expert, and I'm struggling to find where all the bits and pieces are, but:</p>\n<ol>\n<li>at <a href=\"https://github.com/leanprover/lake/blob/master/Lake/Build/Common.lean#L35\">https://github.com/leanprover/lake/blob/master/Lake/Build/Common.lean#L35</a>, you can see that <code>Lake.computeTrace file</code> where <code>file : FilePath</code> computes <em>something</em>.</li>\n<li>The lake <a href=\"https://github.com/leanprover/lake#glossary-of-terms\">README</a> says: \"A target's trace is derived from its various <strong>inputs</strong> (e.g., source file, Lean toolchain, imports, etc.).\"</li>\n</ol>",
        "id": 317078965,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671594022
    },
    {
        "content": "<p>We could either experiment, or try summoning Mac. :-)</p>",
        "id": 317079004,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671594053
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/317054810\">said</a>:</p>\n<blockquote>\n<ul>\n<li>Build everything else, sending the resulting built artifacts back to the server.</li>\n</ul>\n</blockquote>\n<p>I do have a bit of an uneasy feeling about this final step. Can we at least require some security check before allowing random people to upload stuff? Because the build artifacts will effectively be executed on our personal computers, so they can do random crazy shit.<br>\nI guess it shouldn't be too hard to require the uploader to have write permissions to non-master branches of ml4?</p>",
        "id": 317084980,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671599783
    },
    {
        "content": "<p>I thought that was implicit, we're only going to give upload keys to trusted parties.</p>",
        "id": 317087559,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1671602107
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> I've tried to create a new storage account and container, but this keeps failing with \"Server encountered an internal error. Please try again after some time.\" :sigh:</p>",
        "id": 317087680,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1671602170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/317087559\">said</a>:</p>\n<blockquote>\n<p>I thought that was implicit, we're only going to give upload keys to trusted parties.</p>\n</blockquote>\n<p>Sounds reasonable. :-) As long as it is possible for us to have uploads from non-central servers, I think we get most of the benefit just by allowing those uploads from maintainers. (Or some similar set.)</p>",
        "id": 317088037,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671602427
    },
    {
        "content": "<p>I do an awful lot of building branches locally, then waiting for CI to do them again. :-)</p>",
        "id": 317088070,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671602449
    },
    {
        "content": "<p>Does lean have a git library? AFAIK, Scott's comments are implementable in roughly this way:</p>\n<ol>\n<li>Query git for the current commit/staging area and the parent commit. (Git already has the hashes Scott mentions, so why reinvent the wheel)</li>\n<li>Query git for the list of files that have changed using the diff output</li>\n<li>Check if lakefile.lean has changed. </li>\n<li>Rebuild only the changed files. Pull either the local cache (existing build folder) or remote cache for the others</li>\n</ol>",
        "id": 317097614,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1671607922
    },
    {
        "content": "<p>Git does not help you at all with the imports-closed file hash Scott described. Which is the right way to do it. And which indeed should correspond to Lake's trace hash.</p>",
        "id": 317106183,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671611622
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/317054810\">said</a>:</p>\n<blockquote>\n<ul>\n<li>Send a request to a server with a list of all the hashes in current build job.</li>\n<li>Get back build artifacts for some subset (ideally everything, but take what you can get) of those.</li>\n</ul>\n</blockquote>\n<p>So with a passive server these steps would likely be something like <code>curl --parallel &lt;server&gt;/&lt;trace1&gt;.olean -o build/.../foo.olean &lt;server&gt;/&lt;trace2&gt;.olean -o build/.../bar.olean ...</code>. Which apparently does the right thing of continuing even after a missing file automatically.</p>",
        "id": 317108107,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671612399
    },
    {
        "content": "<p>Note that you'll want to cache and download the <code>.ilean</code> files as well, and have to create the corresponding <code>.trace</code> files for Lake to accept the downloaded files.</p>",
        "id": 317108357,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671612500
    },
    {
        "content": "<p>Having to create the <code>.trace</code> files pretty much decides that we will have to use Lake's hashing, I guess!</p>",
        "id": 317110725,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671613412
    },
    {
        "content": "<p>I was enjoying the initial hashing idea because I could cache intermediate hashes in memory. I believe Lake's tracing relies on IO to see if a trace already exists?</p>",
        "id": 317127781,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671619319
    },
    {
        "content": "<p>For example, if I want to hash file A that imports B and C but I've already hashed B and C, then I have to compute very little to hash A. Otherwise I compute what I need and cache it for future lookups.</p>\n<p>How do I do that with Lake traces?</p>",
        "id": 317128559,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671619579
    },
    {
        "content": "<p>I want to do this: <a href=\"https://github.com/leanprover-community/mathlib4/blob/0da94b48cea085f244b1b27f3d2aed81ff1cb21a/Caching/Utils.lean#L32\">https://github.com/leanprover-community/mathlib4/blob/0da94b48cea085f244b1b27f3d2aed81ff1cb21a/Caching/Utils.lean#L32</a></p>",
        "id": 317129701,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671619948
    },
    {
        "content": "<p>Or maybe I can just put/get trace files as well</p>",
        "id": 317142000,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671624043
    },
    {
        "content": "<p>The only one that actually knows the ins and outs of lake is Mac, you can ping him but if he doesn't  answer its pretty much on your own to figure out.</p>",
        "id": 317146734,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1671625707
    },
    {
        "content": "<p>It's okay. I'm going with the initial solution and it's computing all the hashes blazing fast. Now I just need to sync with Gabriel about URLs and authorizations. The rest of the infra already works well</p>",
        "id": 317154882,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671628400
    },
    {
        "content": "<p>This is a small piece of the generated <code>curl</code> command:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>curl --parallel https://foo/2391993928140408502.olean -o build/lib/Mathlib/Init/ZeroOne.olean https://foo/2391993928140408502.ilean -o build/lib/Mathlib/Init/ZeroOne.ilean https://foo/2391993928140408502.trace -o build/lib/Mathlib/Init/ZeroOne.trace\n</code></pre></div>",
        "id": 317155164,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671628483
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/317154882\">said</a>:</p>\n<blockquote>\n<p>It's okay. I'm going with the initial solution and it's computing all the hashes blazing fast. Now I just need to sync with Gabriel about URLs and authorizations. The rest of the infra already works well</p>\n</blockquote>\n<p>What's your plan for making Lake accept these files then?</p>",
        "id": 317167320,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671631890
    },
    {
        "content": "<p>I think the simplest solution would be:</p>\n<ul>\n<li>add an option to Lake that writes out trace files only, and also deletes old .oleans</li>\n<li>try and fetch any missing oleans by their trace files</li>\n<li>have Lake do a regular build to fill in any missing files</li>\n</ul>",
        "id": 317167792,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671632003
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/317167320\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/317154882\">said</a>:</p>\n<blockquote>\n<p>It's okay. I'm going with the initial solution and it's computing all the hashes blazing fast. Now I just need to sync with Gabriel about URLs and authorizations. The rest of the infra already works well</p>\n</blockquote>\n<p>What's your plan for making Lake accept these files then?</p>\n</blockquote>\n<p>I'm pushing the trace files as well</p>",
        "id": 317168883,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671632265
    },
    {
        "content": "<p>Hah, I guess that works!</p>",
        "id": 317169318,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671632370
    },
    {
        "content": "<p>In a certain way, there are advantages to allowing mathlib maintainers to have a hashing algorithm that's agnostic to how Lake computes its hashes.</p>\n<p>Also, I didn't look too closely but I got a little skeptical about Lake hashing files as Scott described (which I too think is the right way for our purposes). I couldn't find the piece of code that digs into the content of a source file and hashes that file according to the content of the imported files.</p>",
        "id": 317171054,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671632801
    },
    {
        "content": "<p>That's <code>Module.recBuildLean</code></p>",
        "id": 317173922,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671633542
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/317171054\">said</a>:</p>\n<blockquote>\n<p>In a certain way, there are advantages to allowing mathlib maintainers to have a hashing algorithm that's agnostic to how Lake computes its hashes.</p>\n</blockquote>\n<p>I don't see how that can be helpful if Lake rebuilds anyway if the recomputed trace does not match the downloaded trace</p>",
        "id": 317174175,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671633607
    },
    {
        "content": "<p>That would change the toolchain and thus change the root hash and all the hashes. But the advantage I'm talking about is in terms of freedom of maintenance for adaptation</p>",
        "id": 317175773,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671634015
    },
    {
        "content": "<p>I don't know what toolchain you are talking about. But using a different hash for remote caching than for local recompilation checks surely is a quickfix at best and not a feature.</p>",
        "id": 317176775,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671634293
    },
    {
        "content": "<p>Mathlib tooling should not fight against Lake</p>",
        "id": 317176942,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671634332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/317173922\">said</a>:</p>\n<blockquote>\n<p>That's <code>Module.recBuildLean</code></p>\n</blockquote>\n<p>Does it mean that it's tied to building?</p>",
        "id": 317181765,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671635580
    },
    {
        "content": "<p>Yes, traces are currently generated during building afaik</p>",
        "id": 317183975,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671636191
    },
    {
        "content": "<p>Alright, that's what I suspected because it makes so much sense to get the imports from a file by running Lean's frontend instead of fiddling with strings like I'm doing. I will go with the easier workaround for now so we don't have to build in order to know what we need to download</p>",
        "id": 317186322,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671636841
    },
    {
        "content": "<p>In other words, I'm not dealing with stuff like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span>\n<span class=\"n\">Lean.Data.HashMap</span>\n</code></pre></div>\n<p>Which is accepted by Lean</p>",
        "id": 317187134,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671637054
    },
    {
        "content": "<p>No, parsing imports is separate from building the actual file. How would it ever short-circuit builds otherwise? You're looking for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.parseImports'#doc\">docs4#Lean.parseImports'</a>.</p>",
        "id": 317193009,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671638687
    },
    {
        "content": "<p>Thanks!!</p>",
        "id": 317204708,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671642091
    },
    {
        "content": "<p>Hi all <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> <br>\nHashing is working efficiently and (apparently) correctly as Scott firstly described. The last piece of the puzzle is performing the actual requests, for which I'm needing some help <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span>🏼</p>",
        "id": 317536059,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671792215
    },
    {
        "content": "<p>Our curl templates above didn't look too bad to me, what's still missing?</p>",
        "id": 317559526,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671799685
    },
    {
        "content": "<p>The curl for <code>get</code> is formatted like that already, but it's missing the correct URL and possibly parameters to query from Azure (which I've never done before).</p>\n<p>Now, for <code>put</code>, I don't know how to format it. The only thing I know is that I need to get the auth key from a file like <code>azure.key</code> or something</p>",
        "id": 317568260,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671802518
    },
    {
        "content": "<p>I doubt you'll find many people on here with experience in Azure blob storage :) . But according to the docs Gabriel posted above, you mostly just need to set a few headers using <code>-H</code></p>",
        "id": 317590273,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671809031
    },
    {
        "content": "<p>Is there a dummy URL I can use for testing?</p>",
        "id": 317656404,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1671838933
    },
    {
        "content": "<p>Okay, I've finally found the time to finish it: <a href=\"https://github.com/leanprover-community/mathlib4/pull/1230\">mathlib4#1230</a></p>\n<p>This PR implements caching for Mathlib build files. The basic API is:</p>\n<ul>\n<li><code>lake exe cache get</code> to download missing build files</li>\n<li><code>lake exe cache put</code> to upload files that are missing on the server</li>\n<li><code>lake exe cache</code> to print the help menu</li>\n</ul>\n<p>This caching method has a few enhancements on top of the solution we had for mathlib in Lean 3:</p>\n<ol>\n<li>Source files are content-addressed and build files are referenced by such hashes separately</li>\n<li>Minimized download traffic with queries that only pull files that are missing locally</li>\n<li>Minimized upload traffic with queries that only push files that are missing on the server</li>\n<li>A <code>zip</code> and a <code>set</code> command that make branch switching easier, without required uploads/downloads</li>\n</ol>",
        "id": 318024912,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672105654
    },
    {
        "content": "<p>nice christmas present <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 318028240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672109340
    },
    {
        "content": "<p>Does this work for projects using mathlib?</p>",
        "id": 318061601,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1672134439
    },
    {
        "content": "<p>Not yet. I don't know if you can call <code>lake exe cache</code> on this from a different project. But even if it's possible the code needs adjustments to know whether <code>Mathlib</code> is a directory in the root folder or not</p>",
        "id": 318066497,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672136228
    },
    {
        "content": "<p>But I don't want to worry about it for now. If anything, we can change it later. I want to avoid scope creep and get it ready to use for people doing the porting ASAP</p>",
        "id": 318068229,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672136858
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/318024912\">said</a>:</p>\n<blockquote>\n<p>This caching method has a few enhancements on top of the solution we had for mathlib in Lean 3:</p>\n<ol start=\"4\">\n<li>A <code>zip</code> and a <code>set</code> command that make branch switching easier, without required uploads/downloads</li>\n</ol>\n</blockquote>\n<p>I don't understand that item. What is there that wasn't in leanproject?</p>",
        "id": 318152434,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1672171188
    },
    {
        "content": "<p>Perhaps <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> is not aware of lean 3's <code>mk-cache</code> (zip) and local behavior of <code>get-cache</code> (set)?</p>",
        "id": 318158482,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672174659
    },
    {
        "content": "<p>Maybe the difference is just that <code>set</code> won't try downloading anything if a cache file isn't there</p>",
        "id": 318158608,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672174731
    },
    {
        "content": "<p>You can configure that with a flag for lean 3, the default is to try everything</p>",
        "id": 318158888,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672174884
    },
    {
        "content": "<p>Then there is no difference on that feature. Let me remove it from the list</p>",
        "id": 318158995,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672174936
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/318158888\">said</a>:</p>\n<blockquote>\n<p><del>You can configure that with a flag for lean 3, the default is to try everything</del> ok not really, only with <code>--from-url=example.com/has-no-caches</code></p>\n</blockquote>\n<p>Oh then it's an upgrade indeed</p>",
        "id": 318165555,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672178978
    },
    {
        "content": "<p>Probably at best a new feature; I expect the number of people who want a cache but don't want to use ones from the server are counted on one hand</p>",
        "id": 318167685,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672180416
    },
    {
        "content": "<p>I've already learnt that the current <code>--fallback=none</code> default in lean 3 is wanted by approximately no one (I chose it because it was backwards compatible)</p>",
        "id": 318167783,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672180476
    },
    {
        "content": "<p>Yeah it has a very specific use. One example is working on multiple branches on a place without access to the internet</p>",
        "id": 318171762,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672182871
    },
    {
        "content": "<p>That works fine in lean3, because it still always tries local caches first</p>",
        "id": 318222055,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672220809
    },
    {
        "content": "<p>The only difference is that you get an error saying \"no local cache and no internet connection\" instead of \"no local cache\"</p>",
        "id": 318222188,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672220850
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1230\">mathlib4#1230</a> is ready for review again!</p>\n<p>Now it also caches build files for Mathlib4 dependencies: <code>Aesop</code>, <code>Qq</code> and <code>Std</code>. And in order to make that work, I had to implement a solution that made the implementation of caching for projects that import Mathlib a lot easier. So I went ahead and just did it (cc <span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span>)</p>\n<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> the infra for garbage collection is not ready yet, but I think people can already benefit from it.</p>",
        "id": 318327083,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672262774
    },
    {
        "content": "<p>A lot changed so a new review round is super welcome. Tomorrow I will get the infra for garbage collection done (hopefully). It will just add more code, that's why a review is welcome at this point already</p>",
        "id": 318327800,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672263155
    },
    {
        "content": "<p>Just finished the implementation of <code>lake exe cache commit</code>, which stores a file that associates the current Git hash with a certain set of uploaded hashes. This will allow us to create garbage collection policies.</p>\n<p>This is the output of <code>lake exe cache</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Mathlib4 caching CLI\nUsage: cache [COMMAND]\n\nCommands:\n  # No priviledge required\n  get       Download and decompress linked files missing on the local cache\n  get!      Download and decompress all linked files\n  mk        Compress non-compressed build files into the local cache\n  mk!       Compress build files into the local cache (no skipping)\n  set       Decompress linked files\n  clear     Delete non-linked files\n  clear!    Delete everything on the local cache\n\n  # Priviledge required\n  put       Run 'mk' then upload linked files missing on the server\n  put!      Run 'mk' then upload all linked files\n  commit    Run 'put' then writes a commit on the server\n  commit!   Run 'put!' then (over)writes a commit on the server\n  collect   TODO\n\n* Linked files refer to local cache files with corresponding Lean sources\n* Commands ending with '!' should be used manually, when hot-fixes are needed\"\n</code></pre></div>\n<p>I added the <code>collect</code> to the list but maybe it shouldn't be implemented in Lean</p>",
        "id": 318499518,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672355969
    },
    {
        "content": "<p>Just a little question, if i understand this correctly everyone can now upload cached .oleans right? Since .oleans can (I believe?) execute code via e.g. <code>initialize</code> or overwriting syntax to some custom elaborator that escapes to <code>IO</code> if I use this cache I am essentially extending attack surface of my machine to <em>every</em> person with push access to mathlib? Not that I want to claim people here have nefarious intentions, it's more of an attack surface thing. I now don't only have to trust myself to not mess stuff up but also dozens (in the future potentially more) people to not mess up themselves yes?</p>",
        "id": 318500938,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672357033
    },
    {
        "content": "<p>Yes, but I think this is only intended to be a temporary measure while we are porting, but maybe I'm mistaken.</p>",
        "id": 318501057,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1672357108
    },
    {
        "content": "<p>Not everyone can do that. Only people with the token for pushing stuff</p>",
        "id": 318501106,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672357156
    },
    {
        "content": "<p>Once this is merged, I'm going to ask Gabriel to revoke the token he gave me for dev/testing purposes</p>",
        "id": 318501231,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672357249
    },
    {
        "content": "<p>Ah wait, you mean forcing the mathlib4 bot to push it for me (if I were a malicious person). Yes. That's possible</p>",
        "id": 318501358,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672357362
    },
    {
        "content": "<p>On a second thought, malicious code would have a different hash. The only way you can run bad code is if you, yourself, fetch a branch and run it on your PC. But the vulnerability isn't on the hashing scheme. It's a vulnerability that's already present by design</p>",
        "id": 318509623,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672363723
    },
    {
        "content": "<p>The only way to make evil spread <em>via this hashing scheme</em> is by having a secret token that would allow you to overwrite olean files with malicious ones, really.</p>",
        "id": 318509932,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672364000
    },
    {
        "content": "<blockquote>\n<p>everyone can now upload cached .oleans, right?</p>\n</blockquote>\n<p>So, just to answer this clearly, no. Pushing data is restricted</p>",
        "id": 318510707,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672364728
    },
    {
        "content": "<p>There is ONE genuine vulnerability: a hash collision with some malicious code whose olean was already sitting on the server!</p>",
        "id": 318514875,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672365897
    },
    {
        "content": "<p>Nitpick: Isn't it \"privilege\"? or maybe my French is tricking me.</p>",
        "id": 318531396,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672382336
    },
    {
        "content": "<p>No, you're right. I'll fix it, thanks!</p>",
        "id": 318550074,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672393740
    },
    {
        "content": "<p><span aria-label=\"ping pong\" class=\"emoji emoji-1f3d3\" role=\"img\" title=\"ping pong\">:ping_pong:</span> <a href=\"https://github.com/leanprover-community/mathlib/pull/1230\">mathlib#1230</a> is ready</p>",
        "id": 318962854,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672653830
    },
    {
        "content": "<p>FYI, this command is deployed now.  On a mathlib4 checkout, you can run</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>lake exe cache get\n</code></pre></div>\n<p>And you should get fresh oleans!</p>",
        "id": 319306115,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672793500
    },
    {
        "content": "<p>For those of us who are maintainers or \"trusted users\": are we supposed to be running some other command after local compiles, in order to upload the oleans we made?  I think it was mentioned that that might be part of the workflow?</p>",
        "id": 319308138,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672795011
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/318500938\">said</a>:</p>\n<blockquote>\n<p>Just a little question, if i understand this correctly everyone can now upload cached .oleans right?</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/318501106\">said</a>:</p>\n<blockquote>\n<p>Not everyone can do that. Only people with the token for pushing stuff</p>\n</blockquote>",
        "id": 319308185,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672795045
    },
    {
        "content": "<p>Gabriel already set it so that it will be done by a GitHub workflow routine, like it was for mathlib in Lean 3: <a href=\"https://github.com/leanprover-community/mathlib4/blob/35255de060eac3fa22895d074d6a713c42f2752a/.github/workflows/bors.yml#L102\">https://github.com/leanprover-community/mathlib4/blob/35255de060eac3fa22895d074d6a713c42f2752a/.github/workflows/bors.yml#L102</a></p>",
        "id": 319308925,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672795586
    },
    {
        "content": "<p>Even better!</p>",
        "id": 319308957,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672795616
    },
    {
        "content": "<p>I haven't tested it on Windows. Please let me know if you find bugs</p>",
        "id": 319309195,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672795795
    },
    {
        "content": "<p>I just tried it, it works great right out of the box. The only downside is that std is not cached, so when I pull master and then <code>lake exe cache get</code> it still has to compile all the <code>Std.*</code> files, but none of the <code>Mathlib</code> files</p>",
        "id": 319309198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672795797
    },
    {
        "content": "<p>It caches Std, but for some reason it does that quick listing that only takes like 10 seconds</p>",
        "id": 319309325,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672795872
    },
    {
        "content": "<p>I couldn't figure out why</p>",
        "id": 319309347,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672795901
    },
    {
        "content": "<p>I ran <code>lake build</code> after <code>lake exe cache get</code> and it seemed to compile <code>Std</code>, it took 15 s and did not list any <code>Compiling Mathlib</code> lines</p>",
        "id": 319309480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672795994
    },
    {
        "content": "<p>Right, but how long would it take to go over the Std files without the cache? I think it would take a lot more</p>",
        "id": 319309577,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672796058
    },
    {
        "content": "<p>I suspect Lake is recomputing the traces for some reason I couldn't figure out</p>",
        "id": 319309616,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672796091
    },
    {
        "content": "<p>I see</p>",
        "id": 319309627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672796101
    },
    {
        "content": "<p>I really hope it works on Windows because that would be hard for a Linux user to debug <span aria-label=\"fear\" class=\"emoji emoji-1f628\" role=\"img\" title=\"fear\">:fear:</span></p>",
        "id": 319309960,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672796357
    },
    {
        "content": "<blockquote>\n<p>it still has to compile all the Std.* files</p>\n</blockquote>\n<p>While it has to <code>Compile</code> (cc) all files, it no longer has to <code>Build</code> (lean) them.  The binaries are platform-specific, so we didn't cache them.</p>",
        "id": 319311110,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672797212
    },
    {
        "content": "<p>It works beautifully for mathlib, but I haven't yet tried it for a project using mathlib as a dependency. For that will I have to  add this to my lakefile?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean_exe</span> <span class=\"n\">cache</span> <span class=\"n\">where</span>\n  <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Cache.Main</span>\n</code></pre></div>",
        "id": 319312193,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1672797879
    },
    {
        "content": "<p>I think you can just call <code>lake exe cache get</code>. It works for LSpec, which allows us to call <code>lake exe lspec</code> from any repo that uses it</p>",
        "id": 319312257,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672797952
    },
    {
        "content": "<p>You can call <code>lake exe cache get</code> but it fails badly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">././</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/././</span><span class=\"n\">Cache</span><span class=\"bp\">/</span><span class=\"n\">Requests.lean</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">lakefile.lean</span>\n</code></pre></div>",
        "id": 319313811,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672798784
    },
    {
        "content": "<p>I will take a look at it tomorrow, but this is not looking pretty. It seems to be failing to compile the <code>cache</code> executable</p>",
        "id": 319313928,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672798882
    },
    {
        "content": "<p>I think this is just <code>Mathlib</code> vs. <code>mathlib</code>.  I think it should be enough to lowercase the mathlibDepPath.</p>",
        "id": 319314005,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672798944
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/319311110\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>it still has to compile all the Std.* files</p>\n</blockquote>\n<p>While it has to <code>Compile</code> (cc) all files, it no longer has to <code>Build</code> (lean) them.  The binaries are platform-specific, so we didn't cache them.</p>\n</blockquote>\n<p>I see now. It's because of the <code>runLinter</code> that's being compiled to a binary when we say <code>lake build</code> right? It relies on some Std files</p>",
        "id": 319314074,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672799029
    },
    {
        "content": "<p>I can confirm that the result of all those <code>Compiling</code> lines was <code>Linking runLinter</code></p>",
        "id": 319314439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672799395
    },
    {
        "content": "<p>I think <code>runLinter</code> should probably be a bit more choosy about parts of Std it imports though</p>",
        "id": 319314500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672799423
    },
    {
        "content": "<p>oh I see, it imports <code>Mathlib.Data.Array.Defs</code> and of course mathlib files love to <code>import Std</code></p>",
        "id": 319314525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672799462
    },
    {
        "content": "<p>lol, <code>Mathlib.Data.Array.Defs</code> is completely empty except for <code>import Std</code></p>",
        "id": 319314542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672799503
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1322\">mathlib4#1322</a></p>",
        "id": 319314848,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672799796
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1326\">mathlib4#1326</a> should fix the issue related to <code>cache get</code> when Mathlib4 is used as a dependency.</p>\n<p>Btw, I find it confusing that there are <code>Mathlib</code> (lib name), <code>mathlib4</code> (repo name) and <code>mathlib</code> (package name). What if they were all just <code>Mathlib</code>?</p>",
        "id": 319376038,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672834333
    },
    {
        "content": "<p>trying this on Windows gives me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Floris</span><span class=\"bp\">@</span><span class=\"n\">MSI</span> <span class=\"n\">MINGW64</span> <span class=\"bp\">/</span><span class=\"n\">d</span><span class=\"bp\">/</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span> <span class=\"o\">((</span><span class=\"n\">f46ac6ed...</span><span class=\"o\">))</span>\n<span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">downloading</span> <span class=\"n\">component</span> <span class=\"bp\">'</span><span class=\"n\">lean'</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">installing</span> <span class=\"n\">component</span> <span class=\"bp\">'</span><span class=\"n\">lean'</span>\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">manifest</span> <span class=\"n\">out</span> <span class=\"n\">of</span> <span class=\"n\">date</span><span class=\"o\">:</span> <span class=\"n\">package</span> <span class=\"n\">directory</span> <span class=\"n\">changed</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"n\">lake</span> <span class=\"n\">update</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">update</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">updating</span> <span class=\"bp\">.\\./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">std</span> <span class=\"n\">to</span> <span class=\"n\">revision</span> <span class=\"mi\">2919713</span><span class=\"n\">bde15d55e3ea3625a03546531283bcb54</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">updating</span> <span class=\"bp\">.\\./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">aesop</span> <span class=\"n\">to</span> <span class=\"n\">revision</span> <span class=\"n\">c4477a2a7931e2490339d8087f599a45e89f25e7</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">Building</span> <span class=\"n\">Cache.IO</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">Building</span> <span class=\"n\">Cache.Hashing</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.IO</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.Hashing</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">Building</span> <span class=\"n\">Cache.Requests</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">Building</span> <span class=\"n\">Cache.Main</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.Requests</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.Main</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">Linking</span> <span class=\"n\">cache.exe</span>\n<span class=\"n\">Attempting</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"mi\">787</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">uncaught</span> <span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">unspecified</span> <span class=\"n\">system_category</span> <span class=\"n\">error</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">206</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 319376605,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1672834559
    },
    {
        "content": "<p>Hmm, seems like <code>IO</code> errors aren't well defined for Windows. Do you have <code>curl</code> and <code>tar</code> on your PATH?</p>",
        "id": 319377673,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672834930
    },
    {
        "content": "<p>yes</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>Floris@MSI MINGW64 /d/projects/mathlib <span class=\"o\">(</span>simps_aux_attr<span class=\"o\">)</span>\n$ curl --version\ncurl <span class=\"m\">7</span>.64.0 <span class=\"o\">(</span>x86_64-w64-mingw32<span class=\"o\">)</span> libcurl/7.64.0 OpenSSL/1.1.1a <span class=\"o\">(</span>Schannel<span class=\"o\">)</span> zlib/1.2.11 libidn2/2.1.1 nghttp2/1.36.0\nRelease-Date: <span class=\"m\">2019</span>-02-06\nProtocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtsp smtp smtps telnet tftp\nFeatures: AsynchDNS IDN IPv6 Largefile SSPI Kerberos SPNEGO NTLM SSL libz TLS-SRP HTTP2 HTTPS-proxy MultiSSL Metalink\n\nFloris@MSI MINGW64 /d/projects/mathlib <span class=\"o\">(</span>simps_aux_attr<span class=\"o\">)</span>\n$ tar --version\ntar <span class=\"o\">(</span>GNU tar<span class=\"o\">)</span> <span class=\"m\">1</span>.31\nCopyright <span class=\"o\">(</span>C<span class=\"o\">)</span> <span class=\"m\">2019</span> Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version <span class=\"m\">3</span> or later &lt;https://gnu.org/licenses/gpl.html&gt;.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nWritten by John Gilmore and Jay Fenlason.\n</code></pre></div>",
        "id": 319377883,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1672835029
    },
    {
        "content": "<p>I think it's best to register that as an issue so maybe someone else can jump in and help us. I don't know what's happening with that error message <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 319378269,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672835140
    },
    {
        "content": "<p><a href=\"https://learn.microsoft.com/en-us/windows/win32/debug/system-error-codes--0-499-\">\"The filename or extension is too long\"</a>. I guess there's a maximum number of chars that can be passed as arguments?</p>",
        "id": 319378960,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1672835400
    },
    {
        "content": "<p>Windows has a very low command line length limit--is that the issue? Is curl getting invoked with 787 arguments?</p>",
        "id": 319380175,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672835883
    },
    {
        "content": "<p>(or it used to, at any rate--I don't really know anything about Windows)</p>",
        "id": 319380406,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672835972
    },
    {
        "content": "<p>Also a low path length limit, depending on the API you use, as I recall. Also don't know much about windows :)</p>",
        "id": 319381152,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1672836229
    },
    {
        "content": "<p><a href=\"https://learn.microsoft.com/en-us/troubleshoot/windows-client/shell-experience/command-line-string-limitation\">https://learn.microsoft.com/en-us/troubleshoot/windows-client/shell-experience/command-line-string-limitation</a> says 8KB. So that's definitely less than the length of 787 URLs (or even filenames).</p>",
        "id": 319381319,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672836277
    },
    {
        "content": "<p>I think one issue is that the <code>curl</code> I got with <code>minGW</code> is very old, and doesn't support <code>--parallel</code> yet.</p>",
        "id": 319381421,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1672836311
    },
    {
        "content": "<p>I'm now updating it</p>",
        "id": 319381496,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1672836335
    },
    {
        "content": "<p>Apparently there is <code>curl -K</code> (or <code>curl --config</code>) to specify the URLs to download with a file</p>",
        "id": 319382063,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672836500
    },
    {
        "content": "<p>I'm going to use that for downloads and (hopefully) for uploads</p>",
        "id": 319382828,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672836737
    },
    {
        "content": "<p>If I manually run the <code>curl</code> command that <code>Cache</code> uses, I indeed get the error <br>\n<code>bash: /c/ProgramData/chocolatey/bin/curl: Argument list too long</code></p>",
        "id": 319382992,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1672836797
    },
    {
        "content": "<p>Ugh, it looks like libc++ doesn't correctly handle Windows error codes... high time to rewrite the Lean runtime in Lean</p>",
        "id": 319390031,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1672839165
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/319376038\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1326\">mathlib4#1326</a> should fix the issue related to <code>cache get</code> when Mathlib4 is used as a dependency.</p>\n</blockquote>\n<p>Why was this pull request closed?</p>",
        "id": 319397267,
        "sender_full_name": "Raghuram",
        "timestamp": 1672841582
    },
    {
        "content": "<p>Because I'm including more fixes on a single PR</p>",
        "id": 319397360,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672841609
    },
    {
        "content": "<p>Okay, mathlib <a href=\"https://github.com/leanprover-community/mathlib/pull/1333\">#1333</a> should fix these issues</p>",
        "id": 319407672,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672844597
    },
    {
        "content": "<p>Yeah, this is an optimisation I've been greatly looking forward to. But note that mathlib already reuses cache from previous pushes.</p>",
        "id": 319409455,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672845115
    },
    {
        "content": "<p>The real difference is whether caches are still invalidated transitively or not.</p>",
        "id": 319409696,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672845172
    },
    {
        "content": "<p>Yeah but they were addressed by commit hashes, so a new commit gets nothing from the cache and the building process will have to chew everything again</p>",
        "id": 319409756,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672845192
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/319409696\">said</a>:</p>\n<blockquote>\n<p>The real difference is whether caches are still invalidated transitively or not.</p>\n</blockquote>\n<p>That still holds because the hash of a file involves the hash of all files imported by it</p>",
        "id": 319410160,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672845315
    },
    {
        "content": "<p>So is there any optimisation compared to mathlib CI besides Lean 4s generally better performance?</p>",
        "id": 319414063,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672846456
    },
    {
        "content": "<blockquote>\n<p>So is there any optimisation compare to mathlib CI besides </p>\n</blockquote>\n<p>Yes, mathlib CI does a worse job of merge commits</p>",
        "id": 319414273,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672846525
    },
    {
        "content": "<p>Right. And anything more?</p>",
        "id": 319414459,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672846593
    },
    {
        "content": "<p>I would guess that downloading is faster, as if you modify <code>data.set.basic</code> it sounds like the new system won't attempt to download any downstream oleans. Of course, that has to fight against the advantage of the tarball combining many downloads into one.</p>",
        "id": 319414617,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672846650
    },
    {
        "content": "<p>Oh, and that also holds for the github CI?</p>",
        "id": 319414799,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672846696
    },
    {
        "content": "<p>By github CI I assume you mean mathlib3 CI?</p>",
        "id": 319414845,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672846711
    },
    {
        "content": "<p>Mathlib3 CI is basically a <code>leanproject get-cache --fallback=download-first</code> but <a href=\"#narrow/stream/113488-general/topic/.E2.9C.94.20multiple.20viable.20caches.20from.20parent.20commits/near/292122348\">following a different parent commit on merges</a></p>",
        "id": 319414916,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672846742
    },
    {
        "content": "<p>Yes, as opposed to <code>leanproject get-c</code> run from a local terminal.</p>",
        "id": 319414920,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672846744
    },
    {
        "content": "<p><code>leanproject get-c</code> is stupid and only does an exact match (if you don't like that, pass <code>--fallback</code>)</p>",
        "id": 319415450,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672846910
    },
    {
        "content": "<p>In terms of the resulting <code>.olean</code> files and ignoring network traffic, <code>--fallback=download-first</code> is essentially the same as what it sounds like <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> has implemented, but the new version does much better with merge commits</p>",
        "id": 319415683,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672846985
    },
    {
        "content": "<p>(the stupidness of <code>get-c</code> is deliberate; it means that if you're checking out a random commit from mathlib, you get an error if you try to get the cache for a commit which was skipped over due to bors batching)</p>",
        "id": 319415981,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672847079
    },
    {
        "content": "<p>There is <a href=\"#narrow/stream/113488-general/topic/Changing.20the.20default.20behavior.20of.20leanproject.20get-cache/near/288137688\">a poll</a> to change the default</p>",
        "id": 319416419,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672847193
    },
    {
        "content": "<p>Btw I don't take credit for the hashing scheme. Scott was the one who came up with it. I just implemented it</p>",
        "id": 319417173,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672847442
    },
    {
        "content": "<p>I would have implemented it in mathlib3, but the problem is that the hashing is all internal to Lean and difficult to expose to python</p>",
        "id": 319417830,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672847648
    },
    {
        "content": "<p>Oh, I didn't use the hashing that Lake does btw. That would require some refactor in Lake because Lake only outputs traces during the building process and it wouldn't make sense to build in order to know the hashes. What I did use was Lean's capabilities to hash strings and to combine hashes into new ones</p>",
        "id": 319418346,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672847833
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> <a href=\"https://github.com/leanprover-community/mathlib4/pull/1333\">mathlib4#1333</a> has been merged. Can you try again please?</p>",
        "id": 319449629,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672857910
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/319414273\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>So is there any optimisation compare to mathlib CI besides </p>\n</blockquote>\n<p>Yes, mathlib CI does a worse job of merge commits</p>\n</blockquote>\n<p>Notably, the new cache also works with non-merge commits (i.e. squashes like bors does).</p>",
        "id": 319451094,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672858334
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"txt\"><pre><span></span><code>buzzard@buster:~/lean-projects/mathlib4$ lake exe cache get\nAttempting to download 582 file(s)\nDecompressing cache\nuncaught exception:\ngzip: stdin: unexpected end of file\ntar: Child returned status 1\ntar: Error is not recoverable: exiting now\n\nbuzzard@buster:~/lean-projects/mathlib4$ lake exe cache get\nAttempting to download 432 file(s)\nDecompressing cache\nuncaught exception:\ngzip: stdin: unexpected end of file\ntar: Child returned status 1\ntar: Error is not recoverable: exiting now\n</code></pre></div>\n<p>Ubuntu 22.04, lake <code>Lake version 4.1.0-pre (Lean version 4.0.0-nightly-2022-12-23)</code></p>",
        "id": 319453636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672859062
    },
    {
        "content": "<p>Does <code>rm -r .cache</code> help?</p>",
        "id": 319453914,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672859152
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">buzzard</span><span class=\"bp\">@</span><span class=\"n\">buster</span><span class=\"o\">:</span><span class=\"bp\">~/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">$</span> <span class=\"n\">rm</span> <span class=\"bp\">-</span><span class=\"n\">r</span> <span class=\"bp\">.</span><span class=\"n\">cache</span>\n<span class=\"n\">buzzard</span><span class=\"bp\">@</span><span class=\"n\">buster</span><span class=\"o\">:</span><span class=\"bp\">~/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">Attempting</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"mi\">790</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">Decompressing</span> <span class=\"n\">cache</span>\n<span class=\"n\">uncaught</span> <span class=\"n\">exception</span><span class=\"o\">:</span>\n<span class=\"n\">gzip</span><span class=\"o\">:</span> <span class=\"n\">stdin</span><span class=\"o\">:</span> <span class=\"n\">unexpected</span> <span class=\"kd\">end</span> <span class=\"n\">of</span> <span class=\"n\">file</span>\n<span class=\"n\">tar</span><span class=\"o\">:</span> <span class=\"n\">Child</span> <span class=\"n\">returned</span> <span class=\"n\">status</span> <span class=\"mi\">1</span>\n<span class=\"n\">tar</span><span class=\"o\">:</span> <span class=\"n\">Error</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">recoverable</span><span class=\"o\">:</span> <span class=\"n\">exiting</span> <span class=\"n\">now</span>\n</code></pre></div>",
        "id": 319454038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672859187
    },
    {
        "content": "<p>Oh!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">git</span> <span class=\"n\">status</span>\n<span class=\"n\">On</span> <span class=\"n\">branch</span> <span class=\"n\">master</span>\n<span class=\"n\">Your</span> <span class=\"n\">branch</span> <span class=\"n\">is</span> <span class=\"n\">up</span><span class=\"bp\">-</span><span class=\"n\">to</span><span class=\"bp\">-</span><span class=\"n\">date</span> <span class=\"k\">with</span> <span class=\"bp\">'</span><span class=\"n\">origin</span><span class=\"bp\">/</span><span class=\"n\">master'.</span>\n\n<span class=\"n\">Changes</span> <span class=\"n\">not</span> <span class=\"n\">staged</span> <span class=\"n\">for</span> <span class=\"n\">commit</span><span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"s2\">\"git add &lt;file&gt;...\"</span> <span class=\"n\">to</span> <span class=\"n\">update</span> <span class=\"n\">what</span> <span class=\"n\">will</span> <span class=\"n\">be</span> <span class=\"n\">committed</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"s2\">\"git restore &lt;file&gt;...\"</span> <span class=\"n\">to</span> <span class=\"n\">discard</span> <span class=\"n\">changes</span> <span class=\"k\">in</span> <span class=\"n\">working</span> <span class=\"n\">directory</span><span class=\"o\">)</span>\n    <span class=\"n\">modified</span><span class=\"o\">:</span>   <span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">manifest.json</span>\n\n<span class=\"n\">no</span> <span class=\"n\">changes</span> <span class=\"n\">added</span> <span class=\"n\">to</span> <span class=\"n\">commit</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"s2\">\"git add\"</span> <span class=\"n\">and</span><span class=\"bp\">/</span><span class=\"n\">or</span> <span class=\"s2\">\"git commit -a\"</span><span class=\"o\">)</span>\n<span class=\"n\">buzzard</span><span class=\"bp\">@</span><span class=\"n\">buster</span><span class=\"o\">:</span><span class=\"bp\">~/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">$</span>\n</code></pre></div>\n<p>No idea why that has happened.</p>",
        "id": 319454193,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672859239
    },
    {
        "content": "<p>I didn't modify any json file as far as I know.</p>",
        "id": 319454358,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672859289
    },
    {
        "content": "<p>I have stuff like</p>\n<div class=\"codehilite\" data-code-language=\"txt\"><pre><span></span><code>@@ -34,21 +10,9 @@\n   {\"git\":\n    {\"url\": \"https://github.com/JLimperg/aesop\",\n     \"subDir?\": null,\n-    \"rev\": \"c4477a2a7931e2490339d8087f599a45e89f25e7\",\n+    \"rev\": \"72610cec1cd686884a08704f5fa91b45262136f9\",\n     \"name\": \"aesop\",\n     \"inputRev?\": \"master\"}},\n-  {\"git\":\n-   {\"url\": \"https://github.com/hargonix/LeanInk\",\n-    \"subDir?\": null,\n-    \"rev\": \"2447df5cc6e48eb965c3c3fba87e46d353b5e9f1\",\n-    \"name\": \"leanInk\",\n-    \"inputRev?\": \"doc-gen\"}},\n-  {\"git\":\n-   {\"url\": \"https://github.com/xubaiw/Unicode.lean\",\n-    \"subDir?\": null,\n-    \"rev\": \"6dd6ae3a3839c8350a91876b090eda85cf538d1d\",\n-    \"name\": \"Unicode\",\n-    \"inputRev?\": \"main\"}},\n</code></pre></div>\n<p>in the diffs.</p>",
        "id": 319454758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672859416
    },
    {
        "content": "<p>That sounds like you did a <code>lake update</code> (which you should only do if you're preparing a bump PR).</p>",
        "id": 319454830,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672859449
    },
    {
        "content": "<p>Just a hunch, does this print anything:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">file</span> <span class=\"bp\">.</span><span class=\"n\">cache</span><span class=\"bp\">/*</span> <span class=\"bp\">|</span> <span class=\"n\">grep</span> <span class=\"bp\">-</span><span class=\"n\">v</span> <span class=\"n\">gzip</span>\n</code></pre></div>",
        "id": 319454852,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672859457
    },
    {
        "content": "<p>There is a slight possibility that I have pushed corrupted tar files during dev attempts <span aria-label=\"explosion\" class=\"emoji emoji-1f4a5\" role=\"img\" title=\"explosion\">:explosion:</span></p>",
        "id": 319455071,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672859530
    },
    {
        "content": "<p>But it can be fixed with <code>put!</code></p>\n<p>Edit: no need... <code>lake exe cache get</code> worked on master (on my machine) just now</p>",
        "id": 319455138,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672859558
    },
    {
        "content": "<p>Another possibility: maybe <a href=\"https://github.com/leanprover-community/mathlib4/blob/7e2613afa5a47788e24f31a386e4dfad92b40289/Cache/Requests.lean#L66\">this</a> validation if flawed/flaky</p>",
        "id": 319457192,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672860254
    },
    {
        "content": "<p>This is a bit concerning.. I was just running <code>curl --parallel</code> manually to download <em>all</em> of the blobs.  Some were truncated, and curl got stuck in the middle. <span aria-label=\"fear\" class=\"emoji emoji-1f628\" role=\"img\" title=\"fear\">:fear:</span></p>",
        "id": 319458371,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672860705
    },
    {
        "content": "<p>If it can get stuck on downloads, there's nothing stopping it from getting stuck during uploads</p>",
        "id": 319459762,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672861228
    },
    {
        "content": "<p>Uh-oh, when we cancel a build that probably kills curl. <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span></p>",
        "id": 319459979,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672861331
    },
    {
        "content": "<p>Can it be set on a separate workflow that never gets killed?</p>",
        "id": 319460102,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672861402
    },
    {
        "content": "<p>Apparently, <code>if: always()</code> (which we set for the upload) prevents cancellation.</p>",
        "id": 319460736,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672861653
    },
    {
        "content": "<p>Idea: doing a raw build with <code>rm -rf .cache &amp;&amp; lake clean &amp;&amp; rm -rf lake-packages &amp;&amp; lake exe cache get &amp;&amp; lake build</code> right after uploading everything could spot flawed uploads</p>",
        "id": 319461242,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672861867
    },
    {
        "content": "<p>If that fails, a <code>lake exe cache put!</code> is needed. Then a new verification round is needed. Loop until it goes through</p>",
        "id": 319461563,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672861981
    },
    {
        "content": "<p>So far we haven't had any issues with uploads, and that check would not even detect missing uploads (it would just build a bit longer).</p>",
        "id": 319461641,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672862013
    },
    {
        "content": "<p>Silently doing a <code>lake exe cache put!</code> seems like a bad idea, this would just hide hash collisions.</p>",
        "id": 319461809,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672862068
    },
    {
        "content": "<p>Then maybe it's a manual <code>get!</code> that may save the day for problematic downloads, since <code>get</code> will skip (supposedly corrupted) files that are already on the FS. I mean, that's precisely the role of <code>get!</code></p>",
        "id": 319462693,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672862377
    },
    {
        "content": "<p>This sounds good:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>       <span class=\"c1\">--remove-on-error</span>\n              <span class=\"n\">When</span> <span class=\"n\">curl</span> <span class=\"n\">returns</span> <span class=\"n\">an</span> <span class=\"n\">error</span> <span class=\"n\">when</span> <span class=\"n\">told</span> <span class=\"n\">to</span> <span class=\"n\">save</span> <span class=\"n\">output</span> <span class=\"k\">in</span>  <span class=\"n\">a</span>  <span class=\"kn\">local</span>\n              <span class=\"n\">file</span><span class=\"o\">,</span>  <span class=\"n\">this</span>  <span class=\"n\">option</span> <span class=\"n\">removes</span> <span class=\"n\">that</span> <span class=\"n\">saved</span> <span class=\"n\">file</span> <span class=\"n\">before</span> <span class=\"n\">exiting.</span> <span class=\"n\">This</span>\n              <span class=\"n\">prevents</span> <span class=\"n\">curl</span> <span class=\"k\">from</span> <span class=\"n\">leaving</span> <span class=\"n\">a</span> <span class=\"n\">partial</span> <span class=\"n\">file</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">case</span> <span class=\"n\">of</span> <span class=\"n\">an</span>  <span class=\"n\">er</span><span class=\"bp\">‐</span>\n              <span class=\"n\">ror</span> <span class=\"n\">during</span> <span class=\"n\">transfer.</span>\n</code></pre></div>",
        "id": 319463586,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672862669
    },
    {
        "content": "<p>I have no idea if this would help with the 404 pages:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>       <span class=\"bp\">-</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"c1\">--fail</span>\n              <span class=\"o\">(</span><span class=\"n\">HTTP</span><span class=\"o\">)</span> <span class=\"n\">Fail</span> <span class=\"n\">fast</span> <span class=\"k\">with</span> <span class=\"n\">no</span> <span class=\"n\">output</span> <span class=\"n\">at</span> <span class=\"n\">all</span> <span class=\"n\">on</span> <span class=\"n\">server</span> <span class=\"n\">errors.</span> <span class=\"n\">This</span> <span class=\"n\">is</span>\n              <span class=\"n\">useful</span> <span class=\"n\">to</span> <span class=\"n\">enable</span> <span class=\"n\">scripts</span> <span class=\"n\">and</span> <span class=\"n\">users</span> <span class=\"n\">to</span> <span class=\"n\">better</span>  <span class=\"n\">deal</span>  <span class=\"k\">with</span>  <span class=\"n\">failed</span>\n              <span class=\"n\">attempts.</span> <span class=\"n\">In</span> <span class=\"n\">normal</span> <span class=\"n\">cases</span> <span class=\"n\">when</span> <span class=\"n\">an</span> <span class=\"n\">HTTP</span> <span class=\"n\">server</span> <span class=\"n\">fails</span> <span class=\"n\">to</span> <span class=\"n\">deliver</span> <span class=\"n\">a</span>\n              <span class=\"n\">document</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">returns</span> <span class=\"n\">an</span> <span class=\"n\">HTML</span> <span class=\"n\">document</span> <span class=\"n\">stating</span>  <span class=\"n\">so</span>  <span class=\"o\">(</span><span class=\"n\">which</span>  <span class=\"n\">often</span>\n              <span class=\"n\">also</span>  <span class=\"n\">describes</span>  <span class=\"n\">why</span> <span class=\"n\">and</span> <span class=\"n\">more</span><span class=\"o\">)</span><span class=\"bp\">.</span> <span class=\"n\">This</span> <span class=\"n\">flag</span> <span class=\"n\">will</span> <span class=\"n\">prevent</span> <span class=\"n\">curl</span> <span class=\"k\">from</span>\n              <span class=\"n\">outputting</span> <span class=\"n\">that</span> <span class=\"n\">and</span> <span class=\"n\">return</span> <span class=\"n\">error</span> <span class=\"mi\">22</span><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 319463789,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672862735
    },
    {
        "content": "<p>Oh wow, so we may be able to get rid of that ugly <code>ByteArray</code> check</p>",
        "id": 319463973,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672862803
    },
    {
        "content": "<p>50 parallel transfers could be too much for some connections. Maybe pass <code>--parallel-max 8</code> as well if it doesn't make things that much slower?</p>",
        "id": 319464074,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1672862841
    },
    {
        "content": "<p>There's also a <code>--retry N</code> option</p>",
        "id": 319464231,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1672862894
    },
    {
        "content": "<p>Amazing, there are multiple possibilities for workarounds. <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> do you want to go ahead and implement the solution you think is the best? Or do you want me to do so? In the later, I would rather being told the workaround you think will work the best</p>",
        "id": 319464886,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672863123
    },
    {
        "content": "<p>There's only issue here:</p>\n<blockquote>\n<p>curl version 7.83.0 was released on April 27 2022</p>\n</blockquote>\n<p>And ubuntu 22.04 still contains 7.81..</p>",
        "id": 319466077,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672863543
    },
    {
        "content": "<p>There is a flexible solution that would allow extra args to be passed to <code>curl</code>.<br>\nFor example <code>lake exe cache get --parallel-max 8 --retry 3</code>. But that's not very friendly</p>",
        "id": 319466163,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672863577
    },
    {
        "content": "<p>Although the <code>--remove-on-error</code> and the <code>-f</code> flags look interesting regardless so maybe we can simply always use those</p>",
        "id": 319466396,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672863665
    },
    {
        "content": "<p>The problem is that <code>--remove-on-error</code> was added in 7.83.</p>",
        "id": 319466447,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672863687
    },
    {
        "content": "<p>Still, I think <code>-f</code> with a check on <code>exitCode == 0</code> should warn the user to try a <code>get</code> again</p>",
        "id": 319467059,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672863928
    },
    {
        "content": "<p>(I'm assuming <code>-f</code> makes <code>curl</code> return something !=0 in case of failure)</p>",
        "id": 319467184,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672863975
    },
    {
        "content": "<p>No <code>--fail</code> does nothing of the sort, it will just ignore the errors.  But apparently it does exactly what we want, it doesn't save 404 responses!</p>",
        "id": 319467655,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672864154
    },
    {
        "content": "<p>I see. So we <em>can</em> get rid of that ugly <code>ByteArray.startsWith</code> check. What about extra parameters like <code>retry</code> and <code>max-parallel</code>?</p>",
        "id": 319468041,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672864319
    },
    {
        "content": "<p>We have no indication that <code>max-parallel</code> would fix any issues, so I'd leave it at the default value.  Same with <code>retry</code>.</p>",
        "id": 319468852,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672864615
    },
    {
        "content": "<p>But I mean, allowing the user to send extra custom arguments to <code>curl</code></p>",
        "id": 319468956,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672864654
    },
    {
        "content": "<p>Oh, that seems reasonable enough.</p>",
        "id": 319469213,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672864751
    },
    {
        "content": "<p>You actually need a pretty high degree of parallelism to saturate HTTP 2.0 multiplexing when downloading many small files <a href=\"https://github.com/NixOS/nix/issues/5118\">https://github.com/NixOS/nix/issues/5118</a></p>",
        "id": 319469513,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1672864903
    },
    {
        "content": "<p><code>curl --fail</code> does return a nonzero exit code on HTTP errors</p>",
        "id": 319470212,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672865212
    },
    {
        "content": "<p>Though we need to ignore that exit code since 404 is expected.</p>",
        "id": 319470684,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672865414
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/319449629\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"https://github.com/leanprover-community/mathlib4/pull/1333\">mathlib4#1333</a> has been merged. Can you try again please?</p>\n</blockquote>\n<p>There is progress, I now get no error:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>Floris@MSI MINGW64 /d/projects/Mathlib4 <span class=\"o\">((</span>c0e8ec73...<span class=\"o\">))</span>\n$ lake exe cache get\ninfo: downloading component <span class=\"s1\">'lean'</span>\ninfo: installing component <span class=\"s1\">'lean'</span>\nwarning: manifest out of date: package directory changed, use <span class=\"sb\">`</span>lake update<span class=\"sb\">`</span> to update\ninfo: Building Cache.IO\ninfo: Compiling Cache.IO\ninfo: Building Cache.Hashing\ninfo: Compiling Cache.Hashing\ninfo: Building Cache.Requests\ninfo: Compiling Cache.Requests\ninfo: Building Cache.Main\ninfo: Compiling Cache.Main\ninfo: Linking cache.exe\nAttempting to download <span class=\"m\">789</span> file<span class=\"o\">(</span>s<span class=\"o\">)</span>\nDecompressing cache\n</code></pre></div>\n<p>However, doing <code>lake build</code> immediately afterwards still recompiles everything. This takes about ~15 minutes for all of Std+Aesop+Mathlib, so I don't think it's using any caches.</p>",
        "id": 319479513,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1672869119
    },
    {
        "content": "<p>(<code>git status</code> shows no changes)</p>",
        "id": 319479605,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1672869143
    },
    {
        "content": "<p>Just a little remark, on my Linux machine everything is work correctly ootb <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> </p>\n<p>Would be a shame if lake was smart enough to notice the windows/linux difference here...</p>",
        "id": 319482933,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672870571
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> your manifest is out of date, meaning that its content may not be equivalent to the one used to make the hashing</p>",
        "id": 319483010,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672870613
    },
    {
        "content": "<p>(the content of <code>lake-manifest.json</code> is involved in the root hash, which, in turn, is in the mix of the hash of all files)</p>",
        "id": 319483053,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672870654
    },
    {
        "content": "<p>Should I add this to the doc-gen4 CI?</p>",
        "id": 319483150,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672870698
    },
    {
        "content": "<p>What do you mean? (add what?)</p>",
        "id": 319483289,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672870794
    },
    {
        "content": "<p>Add the call to the cache to the doc-gen4 CI</p>",
        "id": 319483485,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672870867
    },
    {
        "content": "<p>Ah, like a mini tutorial?</p>",
        "id": 319483606,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672870917
    },
    {
        "content": "<blockquote>\n<p><code>warning: manifest out of date: package directory changed, use </code>lake update<code> to update</code></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> Do you get this every time on windows?  I wonder if this is platform-independent?</p>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"w\"> </span><span class=\"nt\">\"packagesDir\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"./lake-packages\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 319483765,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672870970
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> Can you do <code>ls .cache</code> and check if any caches got downloaded at all?  I wouldn't be surprised if <code>hash filePath</code> gives a different result on windows than on linux/macos.</p>",
        "id": 319483879,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672871027
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/319483606\">said</a>:</p>\n<blockquote>\n<p>Ah, like a mini tutorial?</p>\n</blockquote>\n<p>no, doc-gen4's CI is responsible for building <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat#doc\">docs4#Nat</a> so if I would use the cache I could basically shave 15 minutes off each CI run since I don't have to recompile</p>",
        "id": 319484031,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672871075
    },
    {
        "content": "<p>Okay, that's the catch! It certainly will. Let me fix that ASAP</p>",
        "id": 319484032,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672871077
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/319484031\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/319483606\">said</a>:</p>\n<blockquote>\n<p>Ah, like a mini tutorial?</p>\n</blockquote>\n<p>no, doc-gen4's CI is responsible for building <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat#doc\">docs4#Nat</a> so if I would use the cache I could basically shave 15 minutes off each CI run since I don't have to recompile</p>\n</blockquote>\n<p>Oh, definitely worth trying then</p>",
        "id": 319484102,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672871108
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/uPFkLuTo4TyKk9WqAMBY5Qse/image.png\">image.png</a><br>\nwoop</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/uPFkLuTo4TyKk9WqAMBY5Qse/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/uPFkLuTo4TyKk9WqAMBY5Qse/image.png\"></a></div>",
        "id": 319484340,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672871199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <a href=\"https://github.com/leanprover-community/mathlib4/pull/1339\">mathlib4#1339</a></p>",
        "id": 319484723,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672871370
    },
    {
        "content": "<p>Oh wait, it's breaking</p>",
        "id": 319485207,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672871607
    },
    {
        "content": "<p>Okay the PR is fixed but it will take some minutes to build because all the hashes changed</p>",
        "id": 319486318,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672872174
    },
    {
        "content": "<p>Okay, it pushed everything and built correctly. Should be ready to merge <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 319489673,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672873923
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> please try again when you have a chance <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 319489781,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672873976
    },
    {
        "content": "<p>Another issue with packages depending on mathlib: the oleans get extracted to <code>build/lib/Mathlib</code> and not <code>lake-packages/mathlib/build/lib/Mathlib</code>.</p>",
        "id": 319496711,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672878547
    },
    {
        "content": "<p>I see, <code>-C</code> should do the trick here. Let me fix that</p>",
        "id": 319497422,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672878987
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1341\">mathlib4#1341</a></p>",
        "id": 319499617,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672880438
    },
    {
        "content": "<p>(sorry for so many PRs... it's hard to cover all use cases alone)</p>",
        "id": 319500014,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672880741
    },
    {
        "content": "<p>Things are still not working for me (on Ubuntu). After I did a <code>lake update</code>, I deleted the <code>.cache</code> folder and ran with this result:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">Attempting</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"mi\">789</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">Decompressing</span> <span class=\"mi\">501</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">base</span><span class=\"o\">)</span> <span class=\"n\">gadgil</span><span class=\"bp\">@</span><span class=\"n\">gadgil</span><span class=\"bp\">-</span><span class=\"n\">XPS</span><span class=\"bp\">-</span><span class=\"mi\">15</span><span class=\"o\">:</span><span class=\"bp\">~/</span><span class=\"n\">code</span><span class=\"bp\">/</span><span class=\"n\">LeanAide</span><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"n\">Building</span> <span class=\"n\">Mathlib.Init.Data.Nat.Notation</span>\n<span class=\"n\">Building</span> <span class=\"n\">Mathlib.Data.KVMap</span>\n<span class=\"n\">Building</span> <span class=\"n\">Mathlib.Util.MemoFix</span>\n<span class=\"n\">Building</span> <span class=\"n\">Mathlib.Tactic.Relation.Rfl</span>\n<span class=\"n\">Building</span> <span class=\"n\">Mathlib.Lean.Meta</span>\n<span class=\"n\">Building</span> <span class=\"n\">Mathlib.Mathport.Rename</span>\n<span class=\"n\">Building</span> <span class=\"n\">Mathlib.Tactic.Alias</span>\n<span class=\"n\">Building</span> <span class=\"n\">Mathlib.Tactic.RunCmd</span>\n<span class=\"n\">Building</span> <span class=\"n\">Mathlib.Mathport.Attributes</span>\n<span class=\"n\">Building</span> <span class=\"n\">Mathlib.Tactic.LeftRight</span>\n<span class=\"n\">Building</span> <span class=\"n\">Mathlib.Lean.LocalContext</span>\n<span class=\"n\">Building</span> <span class=\"n\">Mathlib.Util.WhatsNew</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=././</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">././</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">././</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">././</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"n\">LD_LIBRARY_PATH</span><span class=\"bp\">=/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">gadgil</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-23/lib:/home/gadgil/software/z3/build::././lake-packages/mathlib/build/lib /home/gadgil/.elan/toolchains/leanprover--lean4---nightly-2022-12-23/bin/lean -DwarningAsError=true ././lake-packages/mathlib/././Mathlib/Data/KVMap.lean -R ././lake-packages/mathlib/./. -o ././lake-packages/mathlib/build/lib/Mathlib/Data/KVMap.olean -i ././lake-packages/mathlib/build/lib/Mathlib/Data/KVMap.ilean -c ././lake-packages/mathlib/build/ir/Mathlib/Data/KVMap.c</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stdout</span><span class=\"o\">:</span>\n<span class=\"bp\">././</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">KVMap.lean</span><span class=\"o\">:</span><span class=\"mi\">17</span><span class=\"o\">:</span><span class=\"mi\">31</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"n\">token</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">`/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">gadgil</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2022-12-23/bin/lean` exited with code 1</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 319503724,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1672883566
    },
    {
        "content": "<p>Can you send the link to that repo please?</p>",
        "id": 319504286,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672884077
    },
    {
        "content": "<p>Oh, non-mathlib oleans now get extracted to interesting locations: <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">Std</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">NormCast</span><span class=\"bp\">/</span><span class=\"n\">Lemmas.olean</span>\n</code></pre></div>",
        "id": 319504578,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672884342
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/319504286\">said</a>:</p>\n<blockquote>\n<p>Can you send the link to that repo please?</p>\n</blockquote>\n<p><a href=\"https://github.com/siddhartha-gadgil/LeanAide.git\">https://github.com/siddhartha-gadgil/LeanAide.git</a></p>",
        "id": 319504664,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1672884389
    },
    {
        "content": "<p>Sorry, I should clarify this is on the <code>mathlib4</code> branch</p>",
        "id": 319504731,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1672884457
    },
    {
        "content": "<p>And I have not pushed the <code>lake update</code> that breaks things.</p>",
        "id": 319504741,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1672884473
    },
    {
        "content": "<p>Alright, it will be a lot easier to debug with an actual project at hand</p>",
        "id": 319504958,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672884648
    },
    {
        "content": "<p>Checking out the <code>mathlib4</code> branch in the above and running \"lake update\" should get to the state I am working with.</p>",
        "id": 319505123,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1672884784
    },
    {
        "content": "<p>Also, thanks a lot for working on this. Soon over 20 students will be checking out my course repository which depends on <code>mathlib4</code> and building on various laptops (many fairly basic). And the mathlib4 will be updated periodically. Will help them hugely to have this.</p>\n<p>Also I am hoping gitpod/github codespaces will be efficient with this.</p>",
        "id": 319506076,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1672885591
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span> there's been a fix, but something's still weird. I'm taking a look</p>",
        "id": 319511287,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672890200
    },
    {
        "content": "<p>The weird behavior was that some cache files weren't being found.</p>\n<p>But it's not an issue with caching. It's just that your version of Aesop is not the same one listed on mathlib's manifest. And the hash divergences cascate downstream</p>",
        "id": 319516027,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672894980
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/319516027\">said</a>:</p>\n<blockquote>\n<p>The weird behavior was that some cache files weren't being found on the server.</p>\n<p>But it's not an issue with caching. It's just that your version of Aesop is not the same one listed on mathlib's manifest. And the hash divergences cascate downstream.</p>\n<p>Mathlib's manifest needs to be updated</p>\n</blockquote>\n<p>Thanks. I can test by changing my version of Aesop to match with mathlib (or just use Aesop as a transitive dependency)</p>",
        "id": 319516722,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1672895626
    },
    {
        "content": "<p>My naive test failed. I will wait for the mathlib manifest update.</p>",
        "id": 319517132,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1672896091
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/319489781\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> please try again when you have a chance <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>\n</blockquote>\n<p>It works now! This is great! I get the files, <code>lake build</code> is very quick, and opening a random mathlib4 file uses the cached files.</p>",
        "id": 319546358,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1672911852
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/319483765\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p><code>warning: manifest out of date: package directory changed, use </code>lake update<code> to update</code></p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> Do you get this every time on windows?  I wonder if this is platform-independent?</p>\n<p><div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"w\"> </span><span class=\"nt\">\"packagesDir\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"./lake-packages\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Yes, I think I'm getting it on every commit. I was just ignoring it now. I can confirm that I'm getting it on the current commit (<code>cfd16dd8</code>).</p>",
        "id": 319546523,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1672911918
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/319483879\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> Can you do <code>ls .cache</code> and check if any caches got downloaded at all?  I wouldn't be surprised if <code>hash filePath</code> gives a different result on windows than on linux/macos.</p>\n</blockquote>\n<p>You were correct that on yesterday's attempt no caches got downloaded.</p>",
        "id": 319546599,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1672911946
    },
    {
        "content": "<p>I've still never managed to get this working :-( On the machine I'm currently using:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">buzzard</span><span class=\"bp\">@</span><span class=\"n\">brutus</span><span class=\"o\">:</span><span class=\"bp\">~/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">updating</span> <span class=\"bp\">././</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop</span> <span class=\"n\">to</span> <span class=\"n\">revision</span> <span class=\"mi\">72610</span><span class=\"n\">cec1cd686884a08704f5fa91b45262136f9</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">executable</span> <span class=\"bp\">`</span><span class=\"n\">cache</span><span class=\"bp\">`</span>\n<span class=\"n\">buzzard</span><span class=\"bp\">@</span><span class=\"n\">brutus</span><span class=\"o\">:</span><span class=\"bp\">~/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"c1\">--version</span>\n<span class=\"n\">Lake</span> <span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"n\">pre</span> <span class=\"o\">(</span><span class=\"n\">Lean</span> <span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">12</span><span class=\"bp\">-</span><span class=\"mi\">23</span><span class=\"o\">)</span>\n<span class=\"n\">buzzard</span><span class=\"bp\">@</span><span class=\"n\">brutus</span><span class=\"o\">:</span><span class=\"bp\">~/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">$</span> <span class=\"n\">git</span> <span class=\"n\">status</span>\n<span class=\"n\">On</span> <span class=\"n\">branch</span> <span class=\"n\">j</span><span class=\"bp\">-</span><span class=\"n\">loreaux</span><span class=\"bp\">/</span><span class=\"n\">data.fin.basic</span>\n<span class=\"n\">Your</span> <span class=\"n\">branch</span> <span class=\"n\">is</span> <span class=\"n\">up</span><span class=\"bp\">-</span><span class=\"n\">to</span><span class=\"bp\">-</span><span class=\"n\">date</span> <span class=\"k\">with</span> <span class=\"bp\">'</span><span class=\"n\">origin</span><span class=\"bp\">/</span><span class=\"n\">j</span><span class=\"bp\">-</span><span class=\"n\">loreaux</span><span class=\"bp\">/</span><span class=\"n\">data.fin.basic'.</span>\n\n<span class=\"n\">nothing</span> <span class=\"n\">to</span> <span class=\"n\">commit</span><span class=\"o\">,</span> <span class=\"n\">working</span> <span class=\"n\">tree</span> <span class=\"n\">clean</span>\n<span class=\"n\">buzzard</span><span class=\"bp\">@</span><span class=\"n\">brutus</span><span class=\"o\">:</span><span class=\"bp\">~/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">$</span>\n</code></pre></div>",
        "id": 319547168,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672912153
    },
    {
        "content": "<p>You need to merge master into your branch</p>",
        "id": 319547386,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672912215
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> does it work on current <code>origin/master</code>?</p>",
        "id": 319547412,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1672912220
    },
    {
        "content": "<p>Aah, this branch is several weeks old so that might well be the issue. Yes it works on master on this machine!</p>",
        "id": 319547576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672912309
    },
    {
        "content": "<p>I think it's good to mention somewhere (mathlib4 README, <code>lake exe cache</code> output) that you need <code>curl &gt;= 7.66.0</code> to use the <code>--parallel</code> flag. I'm probably not the only one with a 3+ year outdated curl.</p>",
        "id": 319547675,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1672912346
    },
    {
        "content": "<p>I don't like that it says \"Attempting to download 789 file(s)\" and then just sits there, with me not knowing if it's broken or not.</p>",
        "id": 319547814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672912395
    },
    {
        "content": "<p>One further remark: if I (re)run <code>lake exe cache get</code> when VSCode is open, I get an error on Windows.</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>Floris@MSI MINGW64 /d/projects/Mathlib4 <span class=\"o\">((</span>cfd16dd8...<span class=\"o\">))</span>\n$ lake exe cache get\nwarning: manifest out of date: package directory changed, use <span class=\"sb\">`</span>lake update<span class=\"sb\">`</span> to update\nNo files to download\nDecompressing <span class=\"m\">789</span> file<span class=\"o\">(</span>s<span class=\"o\">)</span>\nuncaught exception: lake-packages/std/build/lib/Std/Data/Array/Init/Lemmas.olean: Can<span class=\"err\">'</span>t unlink already-existing object\ntar: Error <span class=\"nb\">exit</span> delayed from previous errors.\n</code></pre></div>",
        "id": 319547833,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1672912404
    },
    {
        "content": "<p>I still have the same problem on the other machine though (Ubuntu 20.04, curl 7.68.0)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">buzzard</span><span class=\"bp\">@</span><span class=\"n\">buster</span><span class=\"o\">:</span><span class=\"bp\">~/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">$</span> <span class=\"n\">rm</span> <span class=\"bp\">-</span><span class=\"n\">rf</span> <span class=\"bp\">.</span><span class=\"n\">cache</span><span class=\"bp\">/</span>\n<span class=\"n\">buzzard</span><span class=\"bp\">@</span><span class=\"n\">buster</span><span class=\"o\">:</span><span class=\"bp\">~/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">Attempting</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"mi\">789</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">Decompressing</span> <span class=\"mi\">789</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">uncaught</span> <span class=\"n\">exception</span><span class=\"o\">:</span>\n<span class=\"n\">gzip</span><span class=\"o\">:</span> <span class=\"n\">stdin</span><span class=\"o\">:</span> <span class=\"n\">unexpected</span> <span class=\"kd\">end</span> <span class=\"n\">of</span> <span class=\"n\">file</span>\n<span class=\"n\">tar</span><span class=\"o\">:</span> <span class=\"n\">Child</span> <span class=\"n\">returned</span> <span class=\"n\">status</span> <span class=\"mi\">1</span>\n<span class=\"n\">tar</span><span class=\"o\">:</span> <span class=\"n\">Error</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">recoverable</span><span class=\"o\">:</span> <span class=\"n\">exiting</span> <span class=\"n\">now</span>\n\n<span class=\"n\">buzzard</span><span class=\"bp\">@</span><span class=\"n\">buster</span><span class=\"o\">:</span><span class=\"bp\">~/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">$</span> <span class=\"n\">git</span> <span class=\"n\">status</span>\n<span class=\"n\">On</span> <span class=\"n\">branch</span> <span class=\"n\">master</span>\n<span class=\"n\">Your</span> <span class=\"n\">branch</span> <span class=\"n\">is</span> <span class=\"n\">up</span><span class=\"bp\">-</span><span class=\"n\">to</span><span class=\"bp\">-</span><span class=\"n\">date</span> <span class=\"k\">with</span> <span class=\"bp\">'</span><span class=\"n\">origin</span><span class=\"bp\">/</span><span class=\"n\">master'.</span>\n\n<span class=\"n\">nothing</span> <span class=\"n\">to</span> <span class=\"n\">commit</span><span class=\"o\">,</span> <span class=\"n\">working</span> <span class=\"n\">tree</span> <span class=\"n\">clean</span>\n<span class=\"n\">buzzard</span><span class=\"bp\">@</span><span class=\"n\">buster</span><span class=\"o\">:</span><span class=\"bp\">~/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"c1\">--version</span>\n<span class=\"n\">Lake</span> <span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"n\">pre</span> <span class=\"o\">(</span><span class=\"n\">Lean</span> <span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">01</span><span class=\"bp\">-</span><span class=\"mi\">04</span><span class=\"o\">)</span>\n<span class=\"n\">buzzard</span><span class=\"bp\">@</span><span class=\"n\">buster</span><span class=\"o\">:</span><span class=\"bp\">~/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">$</span>\n</code></pre></div>",
        "id": 319548083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672912504
    },
    {
        "content": "<p>Just checking: <code>git rev-parse HEAD</code> gives <code>cfd16dd8874d0989ff38ccd8b4727b59f17683e7</code>? (i.e. you did pull on the other machine?)</p>",
        "id": 319549618,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1672913067
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> try <code>lake exe cache get!</code> if you get an error like that. It looks like you have corrupted tar.gz files</p>",
        "id": 319553753,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672914541
    },
    {
        "content": "<p>While lake cache is really useful, I should report some weirdness in a project that has both a direct and transitive dependence on <code>mathlib</code>. I can successfully build <a href=\"https://github.com/siddhartha-gadgil/proofs-and-programs-2023.git\">https://github.com/siddhartha-gadgil/proofs-and-programs-2023.git</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">clone</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">siddhartha</span><span class=\"bp\">-</span><span class=\"n\">gadgil</span><span class=\"bp\">/</span><span class=\"n\">proofs</span><span class=\"bp\">-</span><span class=\"n\">and</span><span class=\"bp\">-</span><span class=\"n\">programs</span><span class=\"bp\">-</span><span class=\"mi\">2023</span><span class=\"bp\">.</span><span class=\"n\">git</span>\n <span class=\"n\">cd</span> <span class=\"n\">proofs</span><span class=\"bp\">-</span><span class=\"n\">and</span><span class=\"bp\">-</span><span class=\"n\">programs</span><span class=\"bp\">-</span><span class=\"mi\">2023</span><span class=\"bp\">/</span>\n <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n <span class=\"n\">lake</span> <span class=\"n\">build</span>\n <span class=\"n\">rm</span> <span class=\"bp\">-</span><span class=\"n\">rf</span> <span class=\"n\">build</span><span class=\"bp\">/</span>\n <span class=\"n\">lake</span> <span class=\"n\">build</span>\n</code></pre></div>\n<p>The weird thing is that the first time I try to build it complains about a missing file while building a dependency. If I delete the file and continue the build it resumes and builds fine. </p>\n<p>My guess is that this is a hash collision.</p>",
        "id": 319583394,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1672924715
    },
    {
        "content": "<p>Does LeanAide build after <code>cache get</code>?</p>",
        "id": 319584078,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672924989
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/319584078\">said</a>:</p>\n<blockquote>\n<p>Does LeanAide build after <code>cache get</code>?</p>\n</blockquote>\n<p>Yes, for <code>LeanAide</code> <code>cache get</code> is working perfectly</p>",
        "id": 319584340,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1672925096
    },
    {
        "content": "<p>Does it decompress all files it tries to download? (~790 files)</p>",
        "id": 319585562,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672925483
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/319553753\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> try <code>lake exe cache get!</code> if you get an error like that. It looks like you have corrupted tar.gz files</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>buzzard@buster:~/lean-projects/mathlib4$ git pull\nAlready up-to-date.\nbuzzard@buster:~/lean-projects/mathlib4$ git status\nOn branch master\nYour branch is up-to-date with <span class=\"s1\">'origin/master'</span>.\n\nnothing to commit, working tree clean\nbuzzard@buster:~/lean-projects/mathlib4$ lake exe cache get!\nAttempting to download <span class=\"m\">790</span> file<span class=\"o\">(</span>s<span class=\"o\">)</span>\nDecompressing <span class=\"m\">790</span> file<span class=\"o\">(</span>s<span class=\"o\">)</span>\nuncaught exception:\ngzip: stdin: unexpected end of file\ntar: Child returned status <span class=\"m\">1</span>\ntar: Error is not recoverable: exiting now\n</code></pre></div>",
        "id": 319587379,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672926101
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/319585562\">said</a>:</p>\n<blockquote>\n<p>Does it decompress all files it tries to download? (~790 files)</p>\n</blockquote>\n<p>Yes, and I can even find in <code>lake-packages</code> an <code>.olean</code> file it claims is missing.</p>",
        "id": 319588916,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1672926585
    },
    {
        "content": "<p>This could be some error in my intermediate dependency (there were some).</p>",
        "id": 319589028,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1672926612
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I have a hunch that <code>curl</code> isn't working as intended on your older machine. It could be <code>tar</code> as well <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 319592781,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672927715
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>buzzard@buster:~/lean-projects$ git clone git@github.com:leanprover-community/mathlib4.git\nCloning into <span class=\"s1\">'mathlib4'</span>...\nWarning: Permanently added the RSA host key <span class=\"k\">for</span> IP address <span class=\"s1\">'2a0c:5bc0:40:2fff::8c52:7904'</span> to the list of known hosts.\nremote: Enumerating objects: <span class=\"m\">21109</span>, <span class=\"k\">done</span>.\nremote: Counting objects: <span class=\"m\">100</span>% <span class=\"o\">(</span><span class=\"m\">716</span>/716<span class=\"o\">)</span>, <span class=\"k\">done</span>.\nremote: Compressing objects: <span class=\"m\">100</span>% <span class=\"o\">(</span><span class=\"m\">327</span>/327<span class=\"o\">)</span>, <span class=\"k\">done</span>.\nremote: Total <span class=\"m\">21109</span> <span class=\"o\">(</span>delta <span class=\"m\">448</span><span class=\"o\">)</span>, reused <span class=\"m\">598</span> <span class=\"o\">(</span>delta <span class=\"m\">380</span><span class=\"o\">)</span>, pack-reused <span class=\"m\">20393</span>\nReceiving objects: <span class=\"m\">100</span>% <span class=\"o\">(</span><span class=\"m\">21109</span>/21109<span class=\"o\">)</span>, <span class=\"m\">6</span>.75 MiB <span class=\"p\">|</span> <span class=\"m\">10</span>.13 MiB/s, <span class=\"k\">done</span>.\nResolving deltas: <span class=\"m\">100</span>% <span class=\"o\">(</span><span class=\"m\">14652</span>/14652<span class=\"o\">)</span>, <span class=\"k\">done</span>.\nbuzzard@buster:~/lean-projects$ <span class=\"nb\">cd</span> mathlib4\nbuzzard@buster:~/lean-projects/mathlib4$ lake exe cache get!\ninfo: cloning https://github.com/leanprover/std4 to ././lake-packages/std\ninfo: cloning https://github.com/gebner/quote4 to ././lake-packages/Qq\ninfo: cloning https://github.com/JLimperg/aesop to ././lake-packages/aesop\ninfo: Building Cache.IO\ninfo: Compiling Cache.IO\ninfo: Building Cache.Hashing\ninfo: Compiling Cache.Hashing\ninfo: Building Cache.Requests\ninfo: Compiling Cache.Requests\ninfo: Building Cache.Main\ninfo: Compiling Cache.Main\ninfo: Linking cache\nAttempting to download <span class=\"m\">790</span> file<span class=\"o\">(</span>s<span class=\"o\">)</span>\nDecompressing <span class=\"m\">790</span> file<span class=\"o\">(</span>s<span class=\"o\">)</span>\nuncaught exception:\ngzip: stdin: unexpected end of file\ntar: Child returned status <span class=\"m\">1</span>\ntar: Error is not recoverable: exiting now\n\nbuzzard@buster:~/lean-projects/mathlib4$ curl --version\ncurl <span class=\"m\">7</span>.68.0 <span class=\"o\">(</span>x86_64-pc-linux-gnu<span class=\"o\">)</span> libcurl/7.68.0 OpenSSL/1.1.1f zlib/1.2.11 brotli/1.0.7 libidn2/2.2.0 libpsl/0.21.0 <span class=\"o\">(</span>+libidn2/2.2.0<span class=\"o\">)</span> libssh/0.9.3/openssl/zlib nghttp2/1.40.0 librtmp/2.3\nRelease-Date: <span class=\"m\">2020</span>-01-08\nProtocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtmp rtsp scp sftp smb smbs smtp smtps telnet tftp\nFeatures: AsynchDNS brotli GSS-API HTTP2 HTTPS-proxy IDN IPv6 Kerberos Largefile libz NTLM NTLM_WB PSL SPNEGO SSL TLS-SRP UnixSockets\nbuzzard@buster:~/lean-projects/mathlib4$ tar --version\ntar <span class=\"o\">(</span>GNU tar<span class=\"o\">)</span> <span class=\"m\">1</span>.30\nCopyright © <span class=\"m\">2017</span> Free Software Foundation, Inc.\nLicence GPLv3+: GNU GPL version <span class=\"m\">3</span> or later &lt;https://gnu.org/licences/gpl.html&gt;.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nWritten by John Gilmore and Jay Fenlason.\nbuzzard@buster:~/lean-projects/mathlib4$\n</code></pre></div>\n<p>This is an Ubuntu 20.04 laptop. Has anyone else got it working on Ubuntu 20.04? The Ubuntu 22 machine I was using this morning was working fine.</p>",
        "id": 319603058,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672930688
    },
    {
        "content": "<p>I also have Ubuntu 20.04, and I'm getting the same error indeed.</p>",
        "id": 319609396,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1672932443
    },
    {
        "content": "<p>I think <code>curl</code> is indeed misbehaving, my <code>.cache</code> folder seems to have a lot of empty files.</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>vandoorn@pc93-178:~/projects/mathlib4<span class=\"o\">((</span>HEAD detached at origin/master<span class=\"o\">))</span>$ ls .cache/ -al\ntotal <span class=\"m\">73200</span>\ndrwxrwxr-x  <span class=\"m\">2</span> vandoorn vandoorn   <span class=\"m\">36864</span> Jan  <span class=\"m\">5</span> <span class=\"m\">16</span>:23 .\ndrwxrwxr-x <span class=\"m\">13</span> vandoorn vandoorn    <span class=\"m\">4096</span> Jan  <span class=\"m\">5</span> <span class=\"m\">16</span>:23 ..\n-rw-rw-r--  <span class=\"m\">1</span> vandoorn vandoorn  <span class=\"m\">502564</span> Jan  <span class=\"m\">5</span> <span class=\"m\">16</span>:23 <span class=\"m\">10004447746176569842</span>.tar.gz\n-rw-rw-r--  <span class=\"m\">1</span> vandoorn vandoorn       <span class=\"m\">0</span> Jan  <span class=\"m\">5</span> <span class=\"m\">16</span>:23 <span class=\"m\">10015491352002644549</span>.tar.gz\n-rw-rw-r--  <span class=\"m\">1</span> vandoorn vandoorn   <span class=\"m\">68157</span> Jan  <span class=\"m\">5</span> <span class=\"m\">16</span>:23 <span class=\"m\">10018821831230171317</span>.tar.gz\n-rw-rw-r--  <span class=\"m\">1</span> vandoorn vandoorn       <span class=\"m\">0</span> Jan  <span class=\"m\">5</span> <span class=\"m\">16</span>:23 <span class=\"m\">1001945985573292759</span>.tar.gz\n-rw-rw-r--  <span class=\"m\">1</span> vandoorn vandoorn       <span class=\"m\">0</span> Jan  <span class=\"m\">5</span> <span class=\"m\">16</span>:23 <span class=\"m\">10110306565386213522</span>.tar.gz\n-rw-rw-r--  <span class=\"m\">1</span> vandoorn vandoorn  <span class=\"m\">174259</span> Jan  <span class=\"m\">5</span> <span class=\"m\">16</span>:23 <span class=\"m\">10127860650102912405</span>.tar.gz\n-rw-rw-r--  <span class=\"m\">1</span> vandoorn vandoorn       <span class=\"m\">0</span> Jan  <span class=\"m\">5</span> <span class=\"m\">16</span>:23 <span class=\"m\">10128865545074468906</span>.tar.gz\n-rw-rw-r--  <span class=\"m\">1</span> vandoorn vandoorn       <span class=\"m\">0</span> Jan  <span class=\"m\">5</span> <span class=\"m\">16</span>:23 <span class=\"m\">10130780366951701088</span>.tar.gz\n-rw-rw-r--  <span class=\"m\">1</span> vandoorn vandoorn       <span class=\"m\">0</span> Jan  <span class=\"m\">5</span> <span class=\"m\">16</span>:23 <span class=\"m\">10152004466792651860</span>.tar.gz\n-rw-rw-r--  <span class=\"m\">1</span> vandoorn vandoorn  <span class=\"m\">416066</span> Jan  <span class=\"m\">5</span> <span class=\"m\">16</span>:23 <span class=\"m\">10152297513229284087</span>.tar.gz\n-rw-rw-r--  <span class=\"m\">1</span> vandoorn vandoorn   <span class=\"m\">25050</span> Jan  <span class=\"m\">5</span> <span class=\"m\">16</span>:23 <span class=\"m\">10181612834428050335</span>.tar.gz\n-rw-rw-r--  <span class=\"m\">1</span> vandoorn vandoorn   <span class=\"m\">22944</span> Jan  <span class=\"m\">5</span> <span class=\"m\">16</span>:23 <span class=\"m\">10190268219082491724</span>.tar.gz\n-rw-rw-r--  <span class=\"m\">1</span> vandoorn vandoorn   <span class=\"m\">85138</span> Jan  <span class=\"m\">5</span> <span class=\"m\">16</span>:23 <span class=\"m\">10213030320477203917</span>.tar.gz\n-rw-rw-r--  <span class=\"m\">1</span> vandoorn vandoorn       <span class=\"m\">0</span> Jan  <span class=\"m\">5</span> <span class=\"m\">16</span>:23 <span class=\"m\">10214528561255169977</span>.tar.gz\n-rw-rw-r--  <span class=\"m\">1</span> vandoorn vandoorn       <span class=\"m\">0</span> Jan  <span class=\"m\">5</span> <span class=\"m\">16</span>:23 <span class=\"m\">10221609186266928200</span>.tar.gz\n-rw-rw-r--  <span class=\"m\">1</span> vandoorn vandoorn   <span class=\"m\">49324</span> Jan  <span class=\"m\">5</span> <span class=\"m\">16</span>:23 <span class=\"m\">10227971936698935467</span>.tar.gz\n-rw-rw-r--  <span class=\"m\">1</span> vandoorn vandoorn  <span class=\"m\">169815</span> Jan  <span class=\"m\">5</span> <span class=\"m\">16</span>:23 <span class=\"m\">10237809332798837709</span>.tar.gz\n-rw-rw-r--  <span class=\"m\">1</span> vandoorn vandoorn       <span class=\"m\">0</span> Jan  <span class=\"m\">5</span> <span class=\"m\">16</span>:23 <span class=\"m\">10329715650399075732</span>.tar.gz\n-rw-rw-r--  <span class=\"m\">1</span> vandoorn vandoorn  <span class=\"m\">377804</span> Jan  <span class=\"m\">5</span> <span class=\"m\">16</span>:23 <span class=\"m\">10342692050553037471</span>.tar.gz\n-rw-rw-r--  <span class=\"m\">1</span> vandoorn vandoorn       <span class=\"m\">0</span> Jan  <span class=\"m\">5</span> <span class=\"m\">16</span>:23 <span class=\"m\">10345492726296217978</span>.tar.gz\n-rw-rw-r--  <span class=\"m\">1</span> vandoorn vandoorn  <span class=\"m\">329192</span> Jan  <span class=\"m\">5</span> <span class=\"m\">16</span>:23 <span class=\"m\">10358353886519116077</span>.tar.gz\n-rw-rw-r--  <span class=\"m\">1</span> vandoorn vandoorn   <span class=\"m\">40472</span> Jan  <span class=\"m\">5</span> <span class=\"m\">16</span>:23 <span class=\"m\">10381171239261229408</span>.tar.gz\n-rw-rw-r--  <span class=\"m\">1</span> vandoorn vandoorn  <span class=\"m\">200427</span> Jan  <span class=\"m\">5</span> <span class=\"m\">16</span>:23 <span class=\"m\">10388488594487384490</span>.tar.gz\n-rw-rw-r--  <span class=\"m\">1</span> vandoorn vandoorn       <span class=\"m\">0</span> Jan  <span class=\"m\">5</span> <span class=\"m\">16</span>:23 <span class=\"m\">10394739949212461920</span>.tar.gz\n-rw-rw-r--  <span class=\"m\">1</span> vandoorn vandoorn   <span class=\"m\">24468</span> Jan  <span class=\"m\">5</span> <span class=\"m\">16</span>:23 <span class=\"m\">10399526667226558710</span>.tar.gz\n-rw-rw-r--  <span class=\"m\">1</span> vandoorn vandoorn       <span class=\"m\">0</span> Jan  <span class=\"m\">5</span> <span class=\"m\">16</span>:23 <span class=\"m\">10423936910949293364</span>.tar.gz\n<span class=\"o\">[</span>...<span class=\"o\">]</span>\n</code></pre></div>",
        "id": 319609568,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1672932491
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I just had that problem and then a <code>get!</code> overwrote a file that wasn't downloaded properly.</p>\n<p>What happens if you do this?<br>\n<code>curl -X GET -f \"https://lakecache.blob.core.windows.net/mathlib4/foo.bar\" -o please.no</code></p>\n<p>We expect <code>curl</code> not to create that <code>please.no</code> file on your file system</p>",
        "id": 319610252,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672932708
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>buzzard@buster:~/lean-projects/mathlib4/crap$ curl -X GET -f <span class=\"s2\">\"https://lakecache.blob.core.windows.net/mathlib4/foo.bar\"</span> -o please.no\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  <span class=\"m\">0</span>     <span class=\"m\">0</span>    <span class=\"m\">0</span>     <span class=\"m\">0</span>    <span class=\"m\">0</span>     <span class=\"m\">0</span>      <span class=\"m\">0</span>      <span class=\"m\">0</span> --:--:-- --:--:-- --:--:--     <span class=\"m\">0</span>\ncurl: <span class=\"o\">(</span><span class=\"m\">22</span><span class=\"o\">)</span> The requested URL returned error: <span class=\"m\">404</span> The specified blob does not exist.\nbuzzard@buster:~/lean-projects/mathlib4/crap$ ls\nbuzzard@buster:~/lean-projects/mathlib4/crap$\n</code></pre></div>",
        "id": 319610591,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672932833
    },
    {
        "content": "<p><a href=\"https://www.linuxcapable.com/how-to-install-upgrade-curl-on-ubuntu-20-04-lts/\">https://www.linuxcapable.com/how-to-install-upgrade-curl-on-ubuntu-20-04-lts/</a> fixed the problem for me, although I'm now running curl as modified by some random person on the internet</p>",
        "id": 319641701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672941874
    },
    {
        "content": "<p>I get <code>gzip: stdin: unexpected end of file</code> on gitpod (Ubuntu 20.04.5 LTS) too, with curl version</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">curl</span> <span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">68</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">x86_64</span><span class=\"bp\">-</span><span class=\"n\">pc</span><span class=\"bp\">-</span><span class=\"n\">linux</span><span class=\"bp\">-</span><span class=\"n\">gnu</span><span class=\"o\">)</span> <span class=\"n\">libcurl</span><span class=\"bp\">/</span><span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">68</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"n\">OpenSSL</span><span class=\"bp\">/</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"n\">f</span> <span class=\"n\">zlib</span><span class=\"bp\">/</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">11</span> <span class=\"n\">brotli</span><span class=\"bp\">/</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">7</span> <span class=\"n\">libidn2</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"n\">libpsl</span><span class=\"bp\">/</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">21</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"n\">libidn2</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">libssh</span><span class=\"bp\">/</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">/</span><span class=\"n\">openssl</span><span class=\"bp\">/</span><span class=\"n\">zlib</span> <span class=\"n\">nghttp2</span><span class=\"bp\">/</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">40</span><span class=\"bp\">.</span><span class=\"mi\">0</span> <span class=\"n\">librtmp</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">3</span>\n<span class=\"n\">Release</span><span class=\"bp\">-</span><span class=\"n\">Date</span><span class=\"o\">:</span> <span class=\"mi\">2020</span><span class=\"bp\">-</span><span class=\"mi\">01</span><span class=\"bp\">-</span><span class=\"mi\">08</span>\n<span class=\"n\">Protocols</span><span class=\"o\">:</span> <span class=\"n\">dict</span> <span class=\"n\">file</span> <span class=\"n\">ftp</span> <span class=\"n\">ftps</span> <span class=\"n\">gopher</span> <span class=\"n\">http</span> <span class=\"n\">https</span> <span class=\"n\">imap</span> <span class=\"n\">imaps</span> <span class=\"n\">ldap</span> <span class=\"n\">ldaps</span> <span class=\"n\">pop3</span> <span class=\"n\">pop3s</span> <span class=\"n\">rtmp</span> <span class=\"n\">rtsp</span> <span class=\"n\">scp</span> <span class=\"n\">sftp</span> <span class=\"n\">smb</span> <span class=\"n\">smbs</span> <span class=\"n\">smtp</span> <span class=\"n\">smtps</span> <span class=\"n\">telnet</span> <span class=\"n\">tftp</span>\n<span class=\"n\">Features</span><span class=\"o\">:</span> <span class=\"n\">AsynchDNS</span> <span class=\"n\">brotli</span> <span class=\"n\">GSS</span><span class=\"bp\">-</span><span class=\"n\">API</span> <span class=\"n\">HTTP2</span> <span class=\"n\">HTTPS</span><span class=\"bp\">-</span><span class=\"n\">proxy</span> <span class=\"n\">IDN</span> <span class=\"n\">IPv6</span> <span class=\"n\">Kerberos</span> <span class=\"n\">Largefile</span> <span class=\"n\">libz</span> <span class=\"n\">NTLM</span> <span class=\"n\">NTLM_WB</span> <span class=\"n\">PSL</span> <span class=\"n\">SPNEGO</span> <span class=\"n\">SSL</span> <span class=\"n\">TLS</span><span class=\"bp\">-</span><span class=\"n\">SRP</span> <span class=\"n\">UnixSockets</span>\n</code></pre></div>",
        "id": 319677569,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672954922
    },
    {
        "content": "<p>Following the instructions from the random person on the internet, I get the same error with the new version,</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ curl --version\ncurl <span class=\"m\">7</span>.87.0 <span class=\"o\">(</span>x86_64-pc-linux-gnu<span class=\"o\">)</span> libcurl/7.87.0 OpenSSL/1.1.1f zlib/1.2.11 brotli/1.0.7 zstd/1.4.4 libidn2/2.2.0 libpsl/0.21.0 <span class=\"o\">(</span>+libidn2/2.2.0<span class=\"o\">)</span> libssh/0.9.3/openssl/zlib nghttp2/1.40.0 librtmp/2.3\nRelease-Date: <span class=\"m\">2022</span>-12-21\nProtocols: dict file ftp ftps gopher gophers http https imap imaps ldap ldaps mqtt pop3 pop3s rtmp rtsp scp sftp smb smbs smtp smtps telnet tftp\nFeatures: alt-svc AsynchDNS brotli GSS-API HSTS HTTP2 HTTPS-proxy IPv6 Kerberos Largefile libz NTLM NTLM_WB PSL SPNEGO SSL threadsafe TLS-SRP UnixSockets zstd\n</code></pre></div>",
        "id": 319678117,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672955150
    },
    {
        "content": "<p>Have you tried <code>get!</code> to overwrite corrupted downloads?</p>",
        "id": 319678577,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672955333
    },
    {
        "content": "<p>Yes, it was <code>get!</code> that was failing</p>",
        "id": 319678613,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672955347
    },
    {
        "content": "<p>You should be able to debug this yourself if you want by opening gitpod with f1accc07b7ea20968ebf0d0d718e40d2a4528d7e checked out</p>",
        "id": 319678698,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672955385
    },
    {
        "content": "<p>How do I access that?</p>",
        "id": 319680109,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672955955
    },
    {
        "content": "<p><a href=\"http://gitpod.io/#https://github.com/leanprover-community/mathlib4\">gitpod.io/#https://github.com/leanprover-community/mathlib4</a>, then <code>git fetch origin $THAT_SHA &amp;&amp; git checkout $THAT_SHA</code></p>",
        "id": 319681213,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672956386
    },
    {
        "content": "<p>You'll need to install the lean4 extension, open a lean file, then accept the popup to install elan</p>",
        "id": 319681326,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672956438
    },
    {
        "content": "<p>Alright, I'll try to debug it later today. In the meantime you might want to try <code>get!</code> again</p>",
        "id": 319682701,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672957083
    },
    {
        "content": "<p>Is this working for others on a mac? I'm just seeing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">Attempting</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"mi\">797</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">No</span> <span class=\"n\">cache</span> <span class=\"n\">files</span> <span class=\"n\">to</span> <span class=\"n\">decompress</span>\n</code></pre></div>\n<p>returning instantly, and then <code>lake build</code> compiles everything as normal.</p>",
        "id": 319688006,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1672959384
    },
    {
        "content": "<p>Hmm, more hash mismatches</p>",
        "id": 319689088,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672959838
    },
    {
        "content": "<p>Separately, could we make the <code>cache commit</code> command more robust to build failures? E.g. see <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/3851007808/jobs/6561764041#step:8:9\">https://github.com/leanprover-community/mathlib4/actions/runs/3851007808/jobs/6561764041#step:8:9</a></p>\n<p>Here CI built lots of files, but one failed, but then cache commit didn't upload anything at all.</p>",
        "id": 319690970,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1672960683
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/319688006\">said</a>:</p>\n<blockquote>\n<p>Is this working for others on a mac? I'm just seeing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">Attempting</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"mi\">797</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">No</span> <span class=\"n\">cache</span> <span class=\"n\">files</span> <span class=\"n\">to</span> <span class=\"n\">decompress</span>\n</code></pre></div>\n<p>returning instantly, and then <code>lake build</code> compiles everything as normal.</p>\n</blockquote>\n<p>I get cache downloads but am seeing separate issues</p>",
        "id": 319691680,
        "sender_full_name": "Arien Malec",
        "timestamp": 1672961039
    },
    {
        "content": "<blockquote>\n<p>Separately, could we make the <code>cache commit</code> command more robust to build failures?</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1336\">mathlib4#1336</a></p>",
        "id": 319692070,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672961212
    },
    {
        "content": "<p>But this has nothing to do with <code>commit</code> right? We don't want to persist a commit with a file that didn't compile</p>",
        "id": 319693071,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672961709
    },
    {
        "content": "<p>Yeah, I think Scott just said <code>commit</code> because it's the first command shown by github actions.  While it's the second <code>put</code> one that fails.</p>",
        "id": 319693234,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672961784
    },
    {
        "content": "<p>Alright, this one should be a simple tweak</p>",
        "id": 319693383,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672961886
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I'm afraid I can't do much on that gitpod that doesn't decompress <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 319693463,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672961934
    },
    {
        "content": "<p>What do you mean \"that doesn't decompress\"?</p>",
        "id": 319695661,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672963177
    },
    {
        "content": "<p>Do you mean the cache is just bad on that commit?</p>",
        "id": 319695775,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672963215
    },
    {
        "content": "<p>No, I just mean that it's failing to decompress</p>",
        "id": 319695833,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672963252
    },
    {
        "content": "<p>I don't understand what \"it\" refers to</p>",
        "id": 319695875,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672963268
    },
    {
        "content": "<p>The execution of the program on your gitpod</p>",
        "id": 319695956,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672963301
    },
    {
        "content": "<p>That's not \"my\" gitpod, that's a fresh gitpod instance spun up each time anyone clicks that link</p>",
        "id": 319696025,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672963324
    },
    {
        "content": "<p>Do you mean the docker image never started up and you never got to vscode?</p>",
        "id": 319696050,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672963335
    },
    {
        "content": "<p>No, I just mean that I don't know what to do with files that may be arriving corrupted on that machine</p>",
        "id": 319696148,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672963408
    },
    {
        "content": "<p>FWIW, I just tried it out on gitpod and all files in <code>.cache</code> were empty.</p>",
        "id": 319696536,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672963667
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/319696148\">said</a>:</p>\n<blockquote>\n<p>No, I just mean that I don't know what to do with files that may be arriving corrupted on that machine</p>\n</blockquote>\n<p>Oh, 'the program' refers to <code>lake exe cache</code>; I thought you were referring to gitpod itself as \"the program\"!</p>",
        "id": 319696921,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672963900
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1361\">mathlib4#1361</a></p>",
        "id": 319701407,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672966645
    },
    {
        "content": "<p>About Mac issues... it's really hard for me to debug <span aria-label=\"dizzy\" class=\"emoji emoji-1f635\" role=\"img\" title=\"dizzy\">:dizzy:</span></p>",
        "id": 319703651,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672967966
    },
    {
        "content": "<p>I don't have a computer with MacOS installed</p>",
        "id": 319703801,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672968056
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span>, I can give you shell access here if you promise to be nice. :-)</p>",
        "id": 319705543,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1672969310
    },
    {
        "content": "<p>I would need an instance of VS Code running. I'm not hardcore enough for emacs/neovim</p>",
        "id": 319706459,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672969968
    },
    {
        "content": "<p>I'm up for a pair programming session though, so we can try to figure out why the hashes aren't matching on your machine</p>",
        "id": 319706642,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672970115
    },
    {
        "content": "<p>Let me know if you have some free time tomorrow</p>",
        "id": 319706673,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672970150
    },
    {
        "content": "<p>I'm on Canberra time, which can be hard to coordinate with. I'm relatively flexible for the next 10 hours.</p>",
        "id": 319707826,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1672970961
    },
    {
        "content": "<p>Separately, what do we think about giving out <code>cache put</code> privileges to a few people. (In particular, me. :-) I have a big machine, and when I'm in reviewing mode, I do a lot of local compilation. Seems a shame to waste it.)</p>",
        "id": 319707951,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1672971055
    },
    {
        "content": "<p>Very happy to try to diagnose the mac issues via pair programming, but you can in fact run a remote session in VS Code with nothing more than ssh access to the host. I do this all the time when I'm away from my desktop machine.</p>",
        "id": 319708063,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1672971131
    },
    {
        "content": "<p>In particular, the terminal window in VSCode is just a shell on the remote machine.</p>",
        "id": 319708079,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1672971154
    },
    {
        "content": "<p>I think <code>lake exe cache</code> is way too flaky for that at the moment.  For example it doesn't know if oleans are up to date.  If you do <code>echo this wont compile &gt;&gt; Mathlib/Algebra/Abs.lean</code>, then <code>lake exe cache put</code> will upload the old oleans for the modified file.</p>",
        "id": 319708119,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672971188
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> the advantage of pair programming is that I can run the hashing algorithm on my machine and you can run on yours and we have an optimized/parallelized way to identify the source of divergence</p>",
        "id": 319709470,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672972388
    },
    {
        "content": "<p>Sounds good. (That can also work with two VSCode windows, one local and one a remote session to my machine.)</p>",
        "id": 319709494,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1672972424
    },
    {
        "content": "<p>I'm free now if it suits.</p>",
        "id": 319709511,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1672972437
    },
    {
        "content": "<p>It's almost midnight now... I need to sleep. Maybe I can just try the remote access tomorrow. We can set it up later</p>",
        "id": 319709658,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1672972540
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/319688006\">said</a>:</p>\n<blockquote>\n<p>Is this working for others on a mac? I'm just seeing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">Attempting</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"mi\">797</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">No</span> <span class=\"n\">cache</span> <span class=\"n\">files</span> <span class=\"n\">to</span> <span class=\"n\">decompress</span>\n</code></pre></div>\n<p>returning instantly, and then <code>lake build</code> compiles everything as normal.</p>\n</blockquote>\n<p><code>lake exe cache get</code> works perfectly on my Mac (M1 with OS 13.1 using MacPorts).</p>",
        "id": 319719694,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1672981895
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/319707951\">said</a>:</p>\n<blockquote>\n<p>Separately, what do we think about giving out <code>cache put</code> privileges to a few people.</p>\n</blockquote>\n<p>I see two obvious options:</p>\n<ul>\n<li>allow all maintainers</li>\n<li>allow all reviewers</li>\n</ul>\n<p>Certainly at this point in time, maintainers should be enough. But once mathlib4 has grown we will probably want reviewers to be in the loop as well.</p>",
        "id": 319748200,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672998781
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/319708119\">said</a>:</p>\n<blockquote>\n<p>I think <code>lake exe cache</code> is way too flaky for that at the moment.  For example it doesn't know if oleans are up to date.  If you do <code>echo this wont compile &gt;&gt; Mathlib/Algebra/Abs.lean</code>, then <code>lake exe cache put</code> will upload the old oleans for the modified file.</p>\n</blockquote>\n<p>That's true but it and any file that, transitively or not, depends on it, will have some useless hash that should never match with anything anyone will download</p>",
        "id": 319759047,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673003187
    },
    {
        "content": "<p>About <code>put</code> privileges, just to say it out loud, I'm not the one who decides that. That's with the maintainers. I only have a key for dev purposes, which will expire in a few days</p>",
        "id": 319759484,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673003371
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <code>cache</code> is computing the hashes correctly on your machine but <code>cache get</code> was failing too fast (not even trying to download). So I checked <code>curl --version</code> and it said \"7.64.something\", which is too old. It's exiting with an error because it can't do <code>--parallel</code></p>",
        "id": 319767961,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673006734
    },
    {
        "content": "<p>I too get <code> Can't unlink already-existing object</code> on Windows from VScode.</p>",
        "id": 319773327,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673008928
    },
    {
        "content": "<p>That looks like some IO error from <code>tar</code></p>",
        "id": 319774567,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673009432
    },
    {
        "content": "<p>Are you doing <code>cache get</code> while you can see orange bars of compilation? The orange bars mean that <code>olean</code> files might be in use and <code>tar</code> won't have the permission to overwrite them</p>",
        "id": 319774892,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673009571
    },
    {
        "content": "<p>Ah I see. Is there a Lean 4 equivalent to <code>Lean: Check nothing</code>?</p>",
        "id": 319777085,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673010469
    },
    {
        "content": "<p>Closing all files seems to solve it.</p>",
        "id": 319777338,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673010572
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/319777085\">said</a>:</p>\n<blockquote>\n<p>Ah I see. Is there a Lean 4 equivalent to <code>Lean: Check nothing</code>?</p>\n</blockquote>\n<p>I don't know</p>",
        "id": 319779663,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673011416
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1383\">mathlib4#1383</a> implements a validation on the version of <code>curl</code><br>\nIt also removes an unnecessary workaround because of a bug that was fixed in core</p>",
        "id": 319779859,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673011490
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/316936698\">said</a>:</p>\n<blockquote>\n<p>How far are we from <code>lake get-cache</code>? Switching branches and running <code>lake build</code> is quite time consuming.</p>\n</blockquote>\n<p>Since I started this thread, a lot has happened! <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> thank you so much for all the time and energy you've poured into this! It works flawlessly on my side. Great work! <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 319819133,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673023807
    },
    {
        "content": "<p>Don't forget to <code>lake exe cache clean</code> once in a while or your <code>.cache</code> folder will just grow and grow</p>",
        "id": 319819765,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673024015
    },
    {
        "content": "<p>Could we have a loading bar when <code>lake</code> downloads the files? It's a bit dead in the <del>chat</del> terminal.</p>",
        "id": 319826857,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673026312
    },
    {
        "content": "<p>Also, this <code>Can't unlink already-existing object</code> is quite annoying as the only solution I found so far is closing all Lean files.</p>",
        "id": 319827044,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673026368
    },
    {
        "content": "<p>I can try the bar later, but <code>tar</code> won't trample a lock that your OS does</p>",
        "id": 319828383,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673026826
    },
    {
        "content": "<p>If you don't want to lose your tabs, you can quit VS Code, do the caching thing and then open VS Code again</p>",
        "id": 319828574,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673026903
    },
    {
        "content": "<p>Another thing you can try is pausing the Lean server in the top right corner of the infoview. Maybe that will unlock files that are being read so <code>tar</code> will have the permission to overwrite them</p>",
        "id": 319829542,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673027226
    },
    {
        "content": "<p>Please let ppl know if this works<span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 319831046,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673027728
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/319759047\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/319708119\">said</a>:</p>\n<blockquote>\n<p>I think <code>lake exe cache</code> is way too flaky for that at the moment.  For example it doesn't know if oleans are up to date.  If you do <code>echo this wont compile &gt;&gt; Mathlib/Algebra/Abs.lean</code>, then <code>lake exe cache put</code> will upload the old oleans for the modified file.</p>\n</blockquote>\n<p>That's true but it and any file that, transitively or not, depends on it, will have some useless hash that should never match with anything anyone will download</p>\n</blockquote>\n<p>Other people <em>will</em> download it if you commit it.  This can happen very easily, if you modify a file and then run <code>lake exe cache put</code> <em>without</em> running <code>lake build</code> first.</p>",
        "id": 319832464,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1673028150
    },
    {
        "content": "<p>Deleting an open file is, it turns out, not quite straightforward on Windows: <a href=\"https://github.com/leanprover/lean4/blob/fedf235cba35ed8bf6bf571cf38e6d8536b904ac/src/library/module.cpp#L85-L89\">https://github.com/leanprover/lean4/blob/fedf235cba35ed8bf6bf571cf38e6d8536b904ac/src/library/module.cpp#L85-L89</a>. I'm not surprised <code>tar</code> doesn't know about that. It would probably be easier to remove those files manually before invoking <code>tar</code>, though that would require a new runtime function implementing the linked code.</p>",
        "id": 319832923,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1673028288
    },
    {
        "content": "<p>Or rather we should just make <code>IO.FS.removeFile</code> do it</p>",
        "id": 319833150,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1673028364
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> please let me know if/when you implement it so I can upgrade <code>cache</code></p>",
        "id": 319835348,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673029151
    },
    {
        "content": "<p>On MacOS 13.0.1:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">clean</span><span class=\"bp\">!</span>\n<span class=\"n\">arienmalec</span><span class=\"bp\">@</span><span class=\"n\">Ariens</span><span class=\"bp\">-</span><span class=\"n\">MBP</span><span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"n\">mwe</span> <span class=\"bp\">%</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">Attempting</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"mi\">804</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">Decompressing</span> <span class=\"mi\">804</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">arienmalec</span><span class=\"bp\">@</span><span class=\"n\">Ariens</span><span class=\"bp\">-</span><span class=\"n\">MBP</span><span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"n\">mwe</span> <span class=\"bp\">%</span> <span class=\"n\">ls</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span>\n<span class=\"n\">Mathlib.ilean</span>   <span class=\"n\">Mathlib.olean</span>   <span class=\"n\">Mathlib.trace</span>   <span class=\"n\">Mwe.ilean</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">object</span> <span class=\"n\">file</span> <span class=\"bp\">'./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Sum</span><span class=\"bp\">/</span><span class=\"n\">Basic.olean'</span> <span class=\"n\">of</span> <span class=\"n\">module</span> <span class=\"n\">Mathlib.Data.Sum.Basic</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">exist</span>\n</code></pre></div>",
        "id": 319843421,
        "sender_full_name": "Arien Malec",
        "timestamp": 1673031773
    },
    {
        "content": "<p>Is that a project that imports mathlib?</p>",
        "id": 319847121,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673033131
    },
    {
        "content": "<p>I have very little bandwidth to fully support <code>cache</code> for projects that import Mathlib right now, sorry. I wanna focus on the support for people doing the port. Help is very much welcome though, and I'd be willing to answer questions and review PRs if someone wants to debug and fix <code>cache</code> for that use case</p>",
        "id": 319848544,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673033610
    },
    {
        "content": "<p>Gotcha -- yes, was trying to build an MWE space that used <code>Mathlib</code> as a client.</p>",
        "id": 319849295,
        "sender_full_name": "Arien Malec",
        "timestamp": 1673033840
    },
    {
        "content": "<p>But FWIW, if your Lake project is properly set to use mathlib as a dependency, <code>cache</code> should extract the olean files to <code>./lake-packages/...</code>, not <code>./build/...</code>. And you shouldn't be seeing an error message of a missed olean file from mathlib that is expected to be in <code>./build</code>. It should be in <code>./lake-packages/mathlib/build/...</code></p>",
        "id": 319849720,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673033981
    },
    {
        "content": "<p>Then I assume there's some issue with lack of <code>lake-packages</code> awareness here.</p>",
        "id": 319850358,
        "sender_full_name": "Arien Malec",
        "timestamp": 1673034195
    },
    {
        "content": "<p>There's probably something wrong with your <code>lakefile.lean</code>. The <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a> stream is the ideal place do get help about that</p>",
        "id": 319850564,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673034269
    },
    {
        "content": "<p>Unlikely, since I wiped and recreated from scratch. But again, if <em>using</em> mathlib as a client isn't a current concern, no issue right now.</p>",
        "id": 319851018,
        "sender_full_name": "Arien Malec",
        "timestamp": 1673034443
    },
    {
        "content": "<p>Feature request: Now that we download files one by one, could we ask to get cache for a specific file?</p>\n<p>Typically I don't need most files to work on a given pull request and it's a waste to download them.</p>",
        "id": 319886352,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673051448
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/319829542\">said</a>:</p>\n<blockquote>\n<p>Another thing you can try is pausing the Lean server in the top right corner of the infoview. Maybe that will unlock files that are being read so <code>tar</code> will have the permission to overwrite them</p>\n</blockquote>\n<p>Doesn't work :(</p>",
        "id": 319886514,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673051541
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/319886352\">said</a>:</p>\n<blockquote>\n<p>Feature request: Now that we download files one by one, could we ask to get cache for a specific file?</p>\n<p>Typically I don't need most files to work on a given pull request and it's a waste to download them.</p>\n</blockquote>\n<p>Nice, I actually thought about that in the very beginning of the development. And now that the code is better structured, it's actually easy to implement it</p>",
        "id": 319917739,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673078556
    },
    {
        "content": "<p>Do <code>ilean</code> or <code>olean</code> files keep track of the original paths of their respective Lean sources? I suspect this is probably why <code>cache get</code> isn't working for projects that import mathlib, since the sources for mathlib files will live inside <code>.lake-packages/mathlib</code> instead of <code>.</code>. That would invalidate the olean/ilean files</p>",
        "id": 319919203,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673079649
    },
    {
        "content": "<p>It is actually mostly working, with an occasional failure as I reported earlier.</p>",
        "id": 319921635,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1673081046
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/319696536\">said</a>:</p>\n<blockquote>\n<p>FWIW, I just tried it out on gitpod and all files in <code>.cache</code> were empty.</p>\n</blockquote>\n<p>I now get only about half of the files being empty</p>",
        "id": 320017495,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673135712
    },
    {
        "content": "<p>(see <a href=\"https://github.com/leanprover-community/mathlib4/pull/1419\">https://github.com/leanprover-community/mathlib4/pull/1419</a> for an easy way to startup gitpod to test this)</p>",
        "id": 320017595,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673135846
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/319886352\">said</a>:</p>\n<blockquote>\n<p>Feature request: Now that we download files one by one, could we ask to get cache for a specific file?</p>\n<p>Typically I don't need most files to work on a given pull request and it's a waste to download them.</p>\n</blockquote>\n<p>Done in <a href=\"https://github.com/leanprover-community/mathlib/pull/1430\">mathlib#1430</a> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 320127029,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673218920
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1430\">mathlib4#1430</a></p>",
        "id": 320127266,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673219154
    },
    {
        "content": "<p>I made it more powerful than what was requested to avoid multiple <code>cache get</code> commands. Instead, you can request the download of cache files for lists of entire directories</p>",
        "id": 320127893,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673219753
    },
    {
        "content": "<p>This is great. I had this in mind too, and then I thought it might be too much to ask <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 320127973,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673219826
    },
    {
        "content": "<p>One improvement that would save me a lot of time is if there was an option to tell it to figure out which files to download based on the diff with <code>master</code>. But that would be mathlib-specific, so I'm not sure how it would work.</p>",
        "id": 320128060,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673219931
    },
    {
        "content": "<p>Doesn't it already only download the files that you don't have?</p>",
        "id": 320128306,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673220153
    },
    {
        "content": "<p>so if you have been to <code>master</code> recently then you will have cache files for it and any that are shared with the branch will be used</p>",
        "id": 320128340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673220186
    },
    {
        "content": "<p>Yes, but if I am working on two level files <code>A</code> and <code>B</code> which don't import each other, then I would like to spare myself writing <code>lake exe cache get A B</code> because <code>A</code> and <code>B</code> will likely be longish names and I will need to get cache maybe 10 times in a day.</p>",
        "id": 320128445,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673220276
    },
    {
        "content": "<p>you should get fish shell or something else with good command history</p>",
        "id": 320128498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673220350
    },
    {
        "content": "<p>Ehrm, Gitpod...</p>",
        "id": 320128568,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673220391
    },
    {
        "content": "<p>I don't understand the idea. <code>lake exe cache get</code> on <code>master</code> should get you everything you don't have yet</p>",
        "id": 320128618,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673220465
    },
    {
        "content": "<p>Yeah, and that's too much. I don't want to download the bazillion files that depend on <code>A</code> or <code>B</code>.</p>",
        "id": 320128840,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673220704
    },
    {
        "content": "<p>Then <code>lake exe cache get path/to/A path/to/B</code></p>",
        "id": 320128912,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673220767
    },
    {
        "content": "<p>Yeah, which is slightly too long for me to type it out every time.</p>",
        "id": 320128950,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673220811
    },
    {
        "content": "<p>Hence why it would be great if <code>lake</code> could detect that only <code>A</code> and <code>B</code> were touched from master.</p>",
        "id": 320129010,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673220847
    },
    {
        "content": "<p>Use tab completion (that's why <code>.lean</code> is part of the file name, as opposed to what you suggested on the PR)</p>",
        "id": 320129016,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673220854
    },
    {
        "content": "<p>Or just do <code>lake exe cache get *A.lean *B.lean</code></p>",
        "id": 320129072,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673220906
    },
    {
        "content": "<p>If <code>A</code> is too generic and has a long path to it, like <code>Some/Really/Big/Path/A.lean</code>, then do <code>lake exe cache get *Path/A.lean</code></p>",
        "id": 320129213,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673221039
    },
    {
        "content": "<p>I don't think the complexity you're asking for (parsing git diffs) is worth the effort here. Most people will just do history search on their terminals, when they're not just doing <code>lake exe cache get</code></p>",
        "id": 320129393,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673221167
    },
    {
        "content": "<p>Yes probably</p>",
        "id": 320129415,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673221183
    },
    {
        "content": "<p>This is just ridiculous. The time taken to type path/to/A is surely comparable to the time taken to just download the entire cache! The brilliant cache system means I don't have to wait ten minutes but surely we can wait ten seconds!</p>",
        "id": 320129517,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673221227
    },
    {
        "content": "<p>Not if you're downloading it from my student room <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 320129570,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673221269
    },
    {
        "content": "<p>:-/</p>",
        "id": 320129576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673221278
    },
    {
        "content": "<p>The feature is also an attempt to circumvent the flakiness of <code>curl -X GET</code> with less powerful connections, so that was another motivation</p>",
        "id": 320129734,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673221407
    },
    {
        "content": "<p>Another option is <code>lake exe cache get **/*A.lean</code> to recursively go down. Or <code>lake exe cache get $(find . -name \"A.lean\")</code> or <code>$(find . -name \"*A.lean\")</code>, depending on your use case. Use the shell to help you! I think it's too much to ask cli utils to replicate all the file directory walking that other more basic utilities do.</p>",
        "id": 320136300,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1673227349
    },
    {
        "content": "<p>If you care only (exactly) the files that have been modified wrt to <code>master</code>, then <code>$(git diff --name-only master --diff-filter=M)</code>.</p>",
        "id": 320136453,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1673227487
    },
    {
        "content": "<p>Are the semantics of <code>lake exe cache get $fname</code> \"get the olean for <code>$fname</code> only\" or \"get all transitively-imported oleans needed for <code>$fname</code>\"?</p>",
        "id": 320137094,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673228089
    },
    {
        "content": "<p>And isn't <code>lake exe cache get *A.lean</code> expanded by the shell on Unix? If I do something sneaky like put a <code>*</code> in a filename, your code is going to double-expand it</p>",
        "id": 320137333,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673228314
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/320137333\">said</a>:</p>\n<blockquote>\n<p>If I do something sneaky like put a <code>*</code> in a filename, your code is going to double-expand it</p>\n</blockquote>\n<p>please don't do that</p>",
        "id": 320137655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673228636
    },
    {
        "content": "<p>Lean4 still allows anything you like as a module name as long as you import with <code>\\f&lt;&lt;&gt;&gt;</code> like lean 3 did, right? (I still agree that we certainly shouldn't do it in mathlib)</p>",
        "id": 320137889,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673228844
    },
    {
        "content": "<p>Yes. Note that even <code>Clear!.lean</code> caused some problems even though <code>!</code> is an identifier character in lean 4. I think it's best to be conservative with filename characters for portability given how many ways people manipulate filenames</p>",
        "id": 320137992,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673228944
    },
    {
        "content": "<p>shell scripts are quite often not hardened against this kind of chicanery</p>",
        "id": 320138077,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673229011
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/320137333\">said</a>:</p>\n<blockquote>\n<p>And isn't <code>lake exe cache get *A.lean</code> expanded by the shell on Unix? If I do something sneaky like put a <code>*</code> in a filename, your code is going to double-expand it</p>\n</blockquote>\n<p>Some shells also give an error if the wildcard can't be expanded.  (I believe there's even a bash option for this.)</p>",
        "id": 320138092,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1673229032
    },
    {
        "content": "<p>I assume <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> is a windows user</p>",
        "id": 320138106,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673229049
    },
    {
        "content": "<p>Does lean have any way to query \"am I running on windows\"?</p>",
        "id": 320138116,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673229061
    },
    {
        "content": "<p>Because based on <a href=\"https://github.com/pallets/click/issues/1096#issuecomment-415866541\">this comment</a> windows programs are expected to parse their own globs, but unix programs are not</p>",
        "id": 320138157,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673229098
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=System.Platform.isWindows#doc\">docs4#System.Platform.isWindows</a></p>",
        "id": 320138171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673229116
    },
    {
        "content": "<blockquote>\n<p>windows programs are expected to parse their own globs</p>\n</blockquote>\n<p>I believe windows programs are also expected to parse quotation marks.  I thought both quotation marks and wildcard expansion were already done by libc though?</p>",
        "id": 320138256,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1673229170
    },
    {
        "content": "<p>What does libc refer to on windows?</p>",
        "id": 320138286,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673229215
    },
    {
        "content": "<p>windows has a libc</p>",
        "id": 320138294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673229229
    },
    {
        "content": "<p>Windows has MSVCRT, doesn't it? Wouldn't libc only be around if you use mingw?</p>",
        "id": 320138363,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673229289
    },
    {
        "content": "<p>I'm a linux user btw. Should I just use a different character then? Maybe <code>%</code>?</p>",
        "id": 320138422,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673229328
    },
    {
        "content": "<p><a href=\"https://learn.microsoft.com/en-us/cpp/c-runtime-library/c-run-time-library-reference?view=msvc-170\">https://learn.microsoft.com/en-us/cpp/c-runtime-library/c-run-time-library-reference?view=msvc-170</a></p>",
        "id": 320138426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673229334
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/320138422\">said</a>:</p>\n<blockquote>\n<p>I'm a linux user btw. Should I just use a different character then? Maybe <code>%</code>?</p>\n</blockquote>\n<p>Do your patterns have different semantics to the shell ones?</p>",
        "id": 320138483,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673229370
    },
    {
        "content": "<p>Because if they don't, then you probably don't need to implement them at all</p>",
        "id": 320138493,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673229380
    },
    {
        "content": "<p>libc here meaning the library windows provides for making standards-conformant C programs (i.e. the ones with a <code>main()</code> function instead of <code>WinMain()</code>) run</p>",
        "id": 320138502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673229385
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/320138493\">said</a>:</p>\n<blockquote>\n<p>Because if they don't, then you probably don't need to implement them at all</p>\n</blockquote>\n<p>Nope... then I can just match file names as they are?</p>",
        "id": 320138519,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673229415
    },
    {
        "content": "<p>I mean, exact matches</p>",
        "id": 320138546,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673229429
    },
    {
        "content": "<p>yes, on linux if you call <code>foo *.lean</code> the shell will actually call <code>foo A.lean B.lean</code> if those are the files in the directory</p>",
        "id": 320138599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673229470
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/320138256\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>windows programs are expected to parse their own globs</p>\n</blockquote>\n<p>I believe windows programs are also expected to parse quotation marks.  I thought both quotation marks and wildcard expansion were already done by libc though?</p>\n</blockquote>\n<p><a href=\"https://learn.microsoft.com/en-us/cpp/c-language/expanding-wildcard-arguments?view=msvc-170\">By default, wildcards aren't expanded in command-line arguments.</a> I don't know if Lean 4 is compiled with the opt-in parsing.</p>",
        "id": 320138604,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673229475
    },
    {
        "content": "<p><code>*SomeFile.lean</code> did not work on my shell ootb btw. I relied on my match</p>",
        "id": 320138648,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673229490
    },
    {
        "content": "<p>What is the full path that you wanted<code>*SomeFile.lean</code> to match?</p>",
        "id": 320138683,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673229502
    },
    {
        "content": "<p><code>*SomeFile.lean</code> will match <code>FooSomeFile.lean</code> in the same directory, but not <code>Foo/SomeFile.lean</code> or <code>Foo/BarSomeFile.lean</code></p>",
        "id": 320138841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673229619
    },
    {
        "content": "<p>you need to use <code>**/*SomeFile.lean</code> to match the latter</p>",
        "id": 320138854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673229639
    },
    {
        "content": "<p>Ah, got it</p>",
        "id": 320138898,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673229701
    },
    {
        "content": "<p>You might need to change your shell settings to enable that, it's not on by default</p>",
        "id": 320138909,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673229720
    },
    {
        "content": "<p>I will remove the custom matches then and use exact matches</p>",
        "id": 320138925,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673229723
    },
    {
        "content": "<p>PR updated: <a href=\"https://github.com/leanprover-community/mathlib4/pull/1430\">mathlib4#1430</a></p>",
        "id": 320139739,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673230380
    },
    {
        "content": "<p>I tried using <code>curl</code> progress bar but it prints a lot of trash when trying to download files that don't exist on the server</p>",
        "id": 320139995,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673230608
    },
    {
        "content": "<p>So I guess no progress bar until we have a Lean implementation of a proper lib for HTTP requests</p>",
        "id": 320140064,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673230662
    },
    {
        "content": "<p>This is far from anything I am competent with, but as a bridge would it be good to have a Lean ffi wrapper around <a href=\"https://curl.se/libcurl/\">libcurl</a> instead of calling the different shells with curl?</p>",
        "id": 320140475,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1673230949
    },
    {
        "content": "<p>I believe someday we will have that. I definitely don't have time for it right now</p>",
        "id": 320140712,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673231199
    },
    {
        "content": "<p>I had considered this for <code>LeanAide</code> but I am still unfamiliar with ffi (and in general unskilled in C/system stuff). But hopefully someone with the time and expertise will create a minimal <code>lean-curl</code> which can then be expanded to more of the API.</p>",
        "id": 320142131,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1673232702
    },
    {
        "content": "<p>I suspect distributing <code>lake exe cache</code> with an appropriate libcurl might be rather annoying, especially on windows</p>",
        "id": 320178107,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673255956
    },
    {
        "content": "<p>How hard would it be to have a button in the infoview that runs <code>lake exe cache get X</code> when file <code>X</code> is open?</p>",
        "id": 320398283,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673339441
    },
    {
        "content": "<p>Or <code>Ctrl-Shift-P: Lake ...</code> something something?</p>",
        "id": 320398587,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673339551
    },
    {
        "content": "<p>Yeah, that would be good too, although probably less discoverable.</p>",
        "id": 320398645,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673339577
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/320398283\">said</a>:</p>\n<blockquote>\n<p>How hard would it be to have a button in the infoview that runs <code>lake exe cache get X</code> when file <code>X</code> is open?</p>\n</blockquote>\n<p>That won't work without the upgrade on <code>IO.removeFile</code> to remove files being read</p>",
        "id": 320398915,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673339689
    },
    {
        "content": "<p>Did that not already happen? I just ran <code>lake exe cache get</code> with <code>Algebra.Order.AbsoluteValue</code> and nothing complained about linked files.</p>",
        "id": 320399000,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673339730
    },
    {
        "content": "<p>Nope... well, I haven't touched it.</p>\n<p>Also, <code>cache</code> is an application that lives in <code>mathlib4</code> and the infoview is not mathlib4 specific</p>",
        "id": 320399213,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673339819
    },
    {
        "content": "<p>That's not a problem. We can and do override infoview functions, or at least we could in Lean 3.</p>",
        "id": 320399300,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673339866
    },
    {
        "content": "<p>See <a href=\"https://tqft.net/mathlib/tactic/interactive_expr\">file#tactic/interactive_expr</a></p>",
        "id": 320399380,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673339889
    },
    {
        "content": "<ol start=\"404\">\n<li>But what would that do?</li>\n</ol>",
        "id": 320399433,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673339921
    },
    {
        "content": "<p>Is it a button that only appears when you're in mathlib?</p>",
        "id": 320399493,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673339946
    },
    {
        "content": "<p>Yes, that's how it would look like.</p>",
        "id": 320399552,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673339977
    },
    {
        "content": "<p>So that's two things: I haven't touched the code that overwrites oleans being read and I don't know about these repo-specific buttons</p>",
        "id": 320399733,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673340046
    },
    {
        "content": "<p>If you've ever tried to open core files, you will see that the infoview looks different to the one you get in mathlib. And that difference come from the two lines here: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/interactive_expr.lean#L496-L497\">https://github.com/leanprover-community/mathlib/blob/master/src/tactic/interactive_expr.lean#L496-L497</a></p>",
        "id": 320399740,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673340049
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/320399733\">said</a>:</p>\n<blockquote>\n<p>So that's two things: I haven't touched the code that overwrites oleans being read and I don't know about these repo-specific buttons</p>\n</blockquote>\n<p>But if someone else knows how to get around these two points, please go ahead</p>",
        "id": 320399896,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673340124
    },
    {
        "content": "<p>I know how to do the second one. Indeed I had to touch the machinery myself in <a href=\"https://github.com/leanprover-community/mathlib/pull/15959\">#15959</a>. I have no idea about the first, though.</p>",
        "id": 320400102,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673340206
    },
    {
        "content": "<p>For the former, we need an upgraded version of <code>IO.removeFile</code> that Sebastian said should be implemented in core. I don't know the status of that</p>",
        "id": 320400145,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673340224
    },
    {
        "content": "<p><span aria-label=\"ping pong\" class=\"emoji emoji-1f3d3\" role=\"img\" title=\"ping pong\">:ping_pong:</span> <a href=\"https://github.com/leanprover-community/mathlib4/pull/1430\">mathlib4#1430</a></p>",
        "id": 320464236,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673361190
    },
    {
        "content": "<p>This one is a typo that <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> noticed. The PR is very easy to review:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/1472\">mathlib4#1472</a></p>",
        "id": 320564443,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673393118
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span>, whatever I try, I still cannot get <code>lake exe cache get some_file</code> to work.</p>",
        "id": 321049781,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673563966
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span> <span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Rat</span><span class=\"bp\">/*.</span><span class=\"n\">lean</span>\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">manifest</span> <span class=\"n\">out</span> <span class=\"n\">of</span> <span class=\"n\">date</span><span class=\"o\">:</span> <span class=\"n\">package</span> <span class=\"n\">directory</span> <span class=\"n\">changed</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"n\">lake</span> <span class=\"n\">update</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">update</span>\n<span class=\"n\">uncaught</span> <span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">No</span> <span class=\"k\">match</span> <span class=\"n\">for</span> <span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Rat</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span>\n</code></pre></div>",
        "id": 321049836,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673563987
    },
    {
        "content": "<p>Is this a Windows bug, maybe?</p>",
        "id": 321049860,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673563997
    },
    {
        "content": "<p>Aren't Windows paths build with <code>\\</code> instead of <code>/</code>?</p>",
        "id": 321050075,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673564077
    },
    {
        "content": "<p>As in, your match is expanded with <code>/</code>, then it fails because Windows expects <code>\\</code></p>",
        "id": 321050103,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673564090
    },
    {
        "content": "<p>Ah so your program isn't doing anything about it!</p>",
        "id": 321050162,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673564112
    },
    {
        "content": "<p>It is unexpected that the exact syntax from the help menu can't be used because it is OS-dependent.</p>",
        "id": 321050314,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673564177
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span> <span class=\"n\">Mathlib</span><span class=\"bp\">\\\\</span><span class=\"n\">Data</span><span class=\"bp\">\\\\</span><span class=\"n\">Rat</span><span class=\"bp\">\\\\*.</span><span class=\"n\">lean</span>\n</code></pre></div>\n<p>does work, but that's unergonomic.</p>",
        "id": 321050416,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673564226
    },
    {
        "content": "<p>Sorry, the paths in the hashmap are built with the separators that the current OS uses. Can't you at least use tab completion on Windows?</p>",
        "id": 321050618,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673564319
    },
    {
        "content": "<p>Not sure how that works</p>",
        "id": 321050679,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673564354
    },
    {
        "content": "<p>Actually, it seems like the tab completion only works with <code>/</code> <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 321050749,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673564391
    },
    {
        "content": "<p>What the... <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 321051273,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673564619
    },
    {
        "content": "<p>Can your command just ignore Windows' weirdness and build the hasmap from <code>/</code>?</p>",
        "id": 321052137,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673564987
    },
    {
        "content": "<p>It would be a bit of a nightmare to implement that. I'm using <code>System.FilePath</code> API to handle that for me</p>",
        "id": 321052308,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673565061
    },
    {
        "content": "<p>/me is <span aria-label=\"face with symbols on mouth\" class=\"emoji emoji-1f92c\" role=\"img\" title=\"face with symbols on mouth\">:face_with_symbols_on_mouth:</span> Windows</p>",
        "id": 321052487,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673565141
    },
    {
        "content": "<p>Even if I do replace <code>/</code> for <code>\\\\</code> on Windows on the arguments of <code>cache get</code>, I'm not sure if automatic glob expansion works with <code>/</code> on Windows</p>",
        "id": 321052722,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673565255
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> do you know how to test that?</p>",
        "id": 321052763,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673565277
    },
    {
        "content": "<p>I'm afraid I am a Windows power-sufferer, not a Windows power-user.</p>",
        "id": 321052860,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673565317
    },
    {
        "content": "<p>What is automatic glob expansion?</p>",
        "id": 321052892,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673565338
    },
    {
        "content": "<p>Have you ever programmed something that reads arguments from the shell input?</p>",
        "id": 321053090,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673565433
    },
    {
        "content": "<p>No, never</p>",
        "id": 321053232,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673565498
    },
    {
        "content": "<p>Suppose we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">args</span>\n</code></pre></div>\n<p>that compiles to some binary <code>./build/bin/foo</code>. Then, with automatic glob expansion, if you call <code>./build/bin/foo *.txt</code>, your program will print every filepath that ends with <code>.txt</code> in the current folder</p>",
        "id": 321053490,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673565646
    },
    {
        "content": "<p>Note that this only happens in a shell context</p>",
        "id": 321053581,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1673565702
    },
    {
        "content": "<p>This is not the actual behaviour of the system calls that perform the call, your shell does the glob expansion.</p>",
        "id": 321053613,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1673565720
    },
    {
        "content": "<p>That's something the shell does for you. The source code of the program does not contain any logic to do that search</p>",
        "id": 321053622,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673565722
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/ARjEqG7Xu16IFoBToUmLF-23/image.png\">image.png</a> It does work on Windows - at least in Powershell.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ARjEqG7Xu16IFoBToUmLF-23/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/ARjEqG7Xu16IFoBToUmLF-23/image.png\"></a></div>",
        "id": 321054080,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673565968
    },
    {
        "content": "<p>Unless <code>cat</code> is doing some processing itself.</p>",
        "id": 321054107,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673565985
    },
    {
        "content": "<p>Yeah can you test with a program that you write yourself please?</p>",
        "id": 321054163,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673566022
    },
    {
        "content": "<p>It can be this simple:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">args</span>\n</code></pre></div>",
        "id": 321054199,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673566049
    },
    {
        "content": "<p>If that works, I can do the upgrade tomorrow</p>",
        "id": 321054301,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673566097
    },
    {
        "content": "<p>I don't have easy access to a Lean executable at the minute but...<br>\n<a href=\"/user_uploads/3121/qlIEXdXUasF-Bk_F3_czKLmK/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/qlIEXdXUasF-Bk_F3_czKLmK/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/qlIEXdXUasF-Bk_F3_czKLmK/image.png\"></a></div>",
        "id": 321054324,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673566116
    },
    {
        "content": "<p>which is a bit disappointing.</p>",
        "id": 321054369,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673566144
    },
    {
        "content": "<p>Well well well, I guess I can do a custom processing in <code>get</code>/<code>get!</code> parameters on Windows and do the match manually</p>",
        "id": 321054654,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673566297
    },
    {
        "content": "<p>But it's not going to be as powerful as native glob expansions. I can handle one wildcard, at most. I had this logic implemented on a previous version</p>",
        "id": 321054750,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673566336
    },
    {
        "content": "<p>You shouldn't implement this in <code>lake exe cache</code></p>",
        "id": 321055389,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673566713
    },
    {
        "content": "<p>If this isn't working, we need to set a compilation flag for lean somewhere</p>",
        "id": 321055402,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673566726
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/320138604\">this message</a></p>",
        "id": 321055425,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673566747
    },
    {
        "content": "<p>Oh wow, I love Windows' idiosyncrasies :/</p>",
        "id": 321055508,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673566801
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I don't understand it. Then it should be a matter of setting that flag in the compilation of Lean and everything should work ootb?</p>",
        "id": 321055830,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673566966
    },
    {
        "content": "<p>Yes, that would be my hope</p>",
        "id": 321056324,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673567279
    },
    {
        "content": "<p>In the meantime, windows users can just use a different shell</p>",
        "id": 321056382,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673567288
    },
    {
        "content": "<p>I would expect that most Lean users have git bash installed</p>",
        "id": 321056397,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673567297
    },
    {
        "content": "<p>Powershell has its own version of glob too</p>",
        "id": 321056421,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673567320
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/321050618\">said</a>:</p>\n<blockquote>\n<p>Sorry, the paths in the hashmap are built with the separators that the current OS uses. Can't you at least use tab completion on Windows?</p>\n</blockquote>\n<p>You should normalize the paths to use <code>/</code> before using them in the hash map; otherwise won't your hash computation be wrong?</p>",
        "id": 321056457,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673567349
    },
    {
        "content": "<p>If I did normalization, I would have to \"denormalize\" everytime i'd use it for pointing to files. That would be a mess. I don't hash the path per se. I hash its components (<code>System.FilePath.components : FilePath -&gt; List String</code>)</p>",
        "id": 321056721,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673567481
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/aec2f1d48aa89d0e47360ef080ff0fb487766533/Cache/Hashing.lean#L79\">https://github.com/leanprover-community/mathlib4/blob/aec2f1d48aa89d0e47360ef080ff0fb487766533/Cache/Hashing.lean#L79</a></p>",
        "id": 321056854,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673567549
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/321056397\">said</a>:</p>\n<blockquote>\n<p>I would expect that most Lean users have git bash installed</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> do you want to test git bash? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 321057131,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673567726
    },
    {
        "content": "<blockquote>\n<p>If I did normalization, I would have to \"denormalize\" everytime i'd use it for pointing to files</p>\n</blockquote>\n<p>Windows should do this for you</p>",
        "id": 321058095,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673568221
    },
    {
        "content": "<p>Also, by normalize I also mean deal with paths like <code>Mathlib/../Mathlib/../Data/Nat/../Nat/Basic.lean</code></p>",
        "id": 321058198,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673568280
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/321055830\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> I don't understand it. Then it should be a matter of setting that flag in the compilation of Lean and everything should work ootb?</p>\n</blockquote>\n<p>Ah nevermind, Lean is built with <code>msys2</code> (which expects you to run in a gnu runtime like git bash) not <code>msvc</code> (for which the link above is relevant)</p>",
        "id": 321059279,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673568844
    },
    {
        "content": "<p>Any attempt to fix shell globbing within <code>lake exe cache</code> itself will break people in shells that already handle this themselves.</p>",
        "id": 321059345,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673568879
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/321059345\">said</a>:</p>\n<blockquote>\n<p>Any attempt to fix shell globbing within <code>lake exe cache</code> itself will break people in shells that already handle this themselves.</p>\n</blockquote>\n<p>I disagree. We can process paths that get into the program and that still contain <code>*</code>. That means the shell didn't do anything for the user. That's what I had in mind in my previous implementation</p>",
        "id": 321061990,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673570260
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> if any of you give me a thumbs up, I can recover that customized post-processing behavior (and further replace <code>/</code>s by <code>\\\\</code>s on Windows in case the user used tab completion as Yael tried)</p>",
        "id": 321062664,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673570589
    },
    {
        "content": "<blockquote>\n<p>I can recover that customized post-processing behavior</p>\n</blockquote>\n<p>I firmly believe that we shouldn't do that. If you want to be able to pass basic filename patterns to a program, use a shell that supports it. Everyone contributing to mathlib4 has git installed on the machine they develop on, and I'm pretty sure that comes with git bash on platforms not already equipped with a shell. I suppose if you really insist you could hide it between <code>--cmd-glob</code> (meaning \"I am using <code>cmd</code> so need you to do glob expansion for me\"). Even detecting windows would be a bad idea as you might be called from a reasonable shell.</p>",
        "id": 321063964,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673571289
    },
    {
        "content": "<blockquote>\n<p>(and further replace /s by \\\\s on Windows in case the user used tab completion as Yael tried)</p>\n</blockquote>\n<p>did you see <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=System.FilePath.normalize#doc\">docs4#System.FilePath.normalize</a> ? You should just use that all the time on the user input (and on the paths in your hash map)</p>",
        "id": 321063985,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673571303
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/321063985\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>(and further replace /s by \\\\s on Windows in case the user used tab completion as Yael tried)</p>\n</blockquote>\n<p>did you see <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=System.FilePath.normalize#doc\">docs4#System.FilePath.normalize</a> ? You should just use that all the time on the user input (and on the paths in your hash map)</p>\n</blockquote>\n<p>The paths in the hashmap are tailored from imported modules</p>",
        "id": 321064240,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673571431
    },
    {
        "content": "<p>I can do an upgrade and do that on the input paths from the user in the <code>get</code> and <code>get!</code> commands</p>",
        "id": 321064366,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673571490
    },
    {
        "content": "<blockquote>\n<p>The paths in the hashmap are tailored from imported modules</p>\n</blockquote>\n<p>What does this mean?</p>",
        "id": 321064493,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673571576
    },
    {
        "content": "<p>It means that I don't build paths from the result of scanning the FS directly. If a file imports <code>Foo.Bar</code> I make a file path from that module name</p>",
        "id": 321066919,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673573059
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/321064366\">said</a>:</p>\n<blockquote>\n<p>I can do an upgrade and do that on the input paths from the user in the <code>get</code> and <code>get!</code> commands</p>\n</blockquote>\n<p>Actually nvm. This won't solve any problem we are seeing today</p>",
        "id": 321066969,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673573111
    },
    {
        "content": "<blockquote>\n<p>I make a file path from that module name</p>\n</blockquote>\n<p>How do you do that?</p>",
        "id": 321069382,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673574892
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/aec2f1d48aa89d0e47360ef080ff0fb487766533/Cache/Hashing.lean#L42-L49\">https://github.com/leanprover-community/mathlib4/blob/aec2f1d48aa89d0e47360ef080ff0fb487766533/Cache/Hashing.lean#L42-L49</a></p>",
        "id": 321071849,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673576718
    },
    {
        "content": "<p>Note you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Name.components#doc\">docs4#Lean.Name.components</a> rather than stringifying and splitting</p>",
        "id": 321073031,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673577615
    },
    {
        "content": "<p>But I agree there's no need to normalize those paths</p>",
        "id": 321073326,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673577893
    },
    {
        "content": "<p>They already use a <code>\\</code> on windows</p>",
        "id": 321073360,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673577915
    },
    {
        "content": "<p>Lean.Name.components return a list of names anyways</p>",
        "id": 321074964,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673579145
    },
    {
        "content": "<p>I would have to stringfy each separately</p>",
        "id": 321075020,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673579174
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/321052860\">said</a>:</p>\n<blockquote>\n<p>I'm afraid I am a Windows power-sufferer, not a Windows power-user.</p>\n</blockquote>\n<p>It's time to leave the dark side! Step in to the light!</p>\n<p><span aria-label=\"penguin\" class=\"emoji emoji-1f427\" role=\"img\" title=\"penguin\">:penguin:</span> <span aria-label=\"penguin\" class=\"emoji emoji-1f427\" role=\"img\" title=\"penguin\">:penguin:</span> <span aria-label=\"penguin\" class=\"emoji emoji-1f427\" role=\"img\" title=\"penguin\">:penguin:</span> <br>\n<span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span> <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span> <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 321089353,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673591071
    },
    {
        "content": "<p>Yael are you not using git bash?</p>",
        "id": 321096012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673594972
    },
    {
        "content": "<p>I am using whatever VScode's terminal is, which seems to be bash. How do I change the default?</p>",
        "id": 321104329,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673598609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/321075020\">said</a>:</p>\n<blockquote>\n<p>I would have to stringfy each separately</p>\n</blockquote>\n<p>Yes, but the names are allowed to contain <code>.</code> so the two approaches are not equivalent</p>",
        "id": 321106307,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673599378
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/321104329\">said</a>:</p>\n<blockquote>\n<p>I am using whatever VScode's terminal is, which seems to be bash. How do I change the default?</p>\n</blockquote>\n<p>If it's bash then you already have the right things. <code>cmd</code> is the bad one</p>",
        "id": 321122766,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673604902
    },
    {
        "content": "<p>Ah well then my problem didn't get fixed <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 321123041,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673604974
    },
    {
        "content": "<p>Can you paste the command you typed here?</p>",
        "id": 321125674,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673605738
    },
    {
        "content": "<p>Aha, I think I know the problem:</p>\n<ul>\n<li>The glob pattern match is working as expected</li>\n<li>You're using a unix shell so the glob generates<code>/</code>-style paths</li>\n<li>Lean notices you're running on windows, so uses <code>\\\\</code>-style paths</li>\n<li><code>Cache</code> does string equality on the paths rather than path equality, so the match fails</li>\n</ul>",
        "id": 321126042,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673605817
    },
    {
        "content": "<p>Adding the call to <code>.normalize</code> on user inputs <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/321063985\">as I suggested above</a> will fix the problem</p>",
        "id": 321126079,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673605831
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/321126079\">said</a>:</p>\n<blockquote>\n<p>Adding the call to <code>.normalize</code> on user inputs <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/321063985\">as I suggested above</a> will fix the problem</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1532\">mathlib4#1532</a></p>",
        "id": 321136092,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673609091
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> may I do a small optimization on your branch so we don't need to call <code>Name.toString</code> at all?</p>",
        "id": 321136510,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673609229
    },
    {
        "content": "<p>I expect toString to be free</p>",
        "id": 321136754,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673609313
    },
    {
        "content": "<p>Alright, I've approved it</p>",
        "id": 321136966,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673609384
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Might be useful: <a href=\"/user_uploads/3121/NI17wRQgVZO1Bkq12wMZlv-J/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/NI17wRQgVZO1Bkq12wMZlv-J/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/NI17wRQgVZO1Bkq12wMZlv-J/image.png\"></a></div>",
        "id": 321143821,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673611440
    },
    {
        "content": "<p>Oh yeah I knew about that menu, but forgot that the default coudl be edited from here.</p>",
        "id": 321146462,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673612267
    },
    {
        "content": "<p>The fix should be merged in master, can you try again <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>?</p>",
        "id": 321146709,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673612367
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span> <span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Rat</span><span class=\"bp\">/</span><span class=\"n\">Floor.lean</span>\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">manifest</span> <span class=\"n\">out</span> <span class=\"n\">of</span> <span class=\"n\">date</span><span class=\"o\">:</span> <span class=\"n\">package</span> <span class=\"n\">directory</span> <span class=\"n\">changed</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"n\">lake</span> <span class=\"n\">update</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">update</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">updating</span> <span class=\"bp\">.\\./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">std</span> <span class=\"n\">to</span> <span class=\"n\">revision</span> <span class=\"n\">fde95b16907bf38ea3f310af406868fc6bcf48d1</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.IO</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.Hashing</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.Requests</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.Main</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">c</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">YaelD</span><span class=\"bp\">\\.</span><span class=\"n\">elan</span><span class=\"bp\">\\</span><span class=\"n\">toolchains</span><span class=\"bp\">\\</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-01-12\\bin\\leanc.exe -c -o .\\build\\ir\\Cache\\IO.o .\\build\\ir\\Cache\\IO.c -O3 -DNDEBUG</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">uncaught</span> <span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">`</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">YaelD</span><span class=\"bp\">\\.</span><span class=\"n\">elan</span><span class=\"bp\">\\</span><span class=\"n\">toolchains</span><span class=\"bp\">\\</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-01-12\\bin\\leanc.exe` exited with code 1</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">c</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">YaelD</span><span class=\"bp\">\\.</span><span class=\"n\">elan</span><span class=\"bp\">\\</span><span class=\"n\">toolchains</span><span class=\"bp\">\\</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-01-12\\bin\\leanc.exe -c -o .\\build\\ir\\Cache\\Hashing.o .\\build\\ir\\Cache\\Hashing.c -O3 -DNDEBUG</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">uncaught</span> <span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">`</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">YaelD</span><span class=\"bp\">\\.</span><span class=\"n\">elan</span><span class=\"bp\">\\</span><span class=\"n\">toolchains</span><span class=\"bp\">\\</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-01-12\\bin\\leanc.exe` exited with code 1</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">c</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">YaelD</span><span class=\"bp\">\\.</span><span class=\"n\">elan</span><span class=\"bp\">\\</span><span class=\"n\">toolchains</span><span class=\"bp\">\\</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-01-12\\bin\\leanc.exe -c -o .\\build\\ir\\Cache\\Requests.o .\\build\\ir\\Cache\\Requests.c -O3 -DNDEBUG</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">uncaught</span> <span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">`</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">YaelD</span><span class=\"bp\">\\.</span><span class=\"n\">elan</span><span class=\"bp\">\\</span><span class=\"n\">toolchains</span><span class=\"bp\">\\</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-01-12\\bin\\leanc.exe` exited with code 1</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">c</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">YaelD</span><span class=\"bp\">\\.</span><span class=\"n\">elan</span><span class=\"bp\">\\</span><span class=\"n\">toolchains</span><span class=\"bp\">\\</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-01-12\\bin\\leanc.exe -c -o .\\build\\ir\\Cache\\Main.o .\\build\\ir\\Cache\\Main.c -O3 -DNDEBUG</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">uncaught</span> <span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">`</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">YaelD</span><span class=\"bp\">\\.</span><span class=\"n\">elan</span><span class=\"bp\">\\</span><span class=\"n\">toolchains</span><span class=\"bp\">\\</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-01-12\\bin\\leanc.exe` exited with code 1</span>\n</code></pre></div>",
        "id": 321148326,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673612889
    },
    {
        "content": "<p>Seems to be unrelated, though?</p>",
        "id": 321148356,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673612901
    },
    {
        "content": "<p>Try <code>lake exe cache</code> to see if it prints the help menu</p>",
        "id": 321149131,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673613146
    },
    {
        "content": "<p>If it doesn't print the help menu then it's indeed unrelated</p>",
        "id": 321149763,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673613359
    },
    {
        "content": "<p>Ignorant question: if I have 5 clones of <code>mathlib4</code>, do they share a local cache? Or does each of them maintain its own cache?</p>",
        "id": 321773418,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673942935
    },
    {
        "content": "<p>Each of them maintain their own cache (inside a gitignored <code>.cache</code> folder)</p>",
        "id": 321797933,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673951703
    },
    {
        "content": "<p>I see. What do you think of using <code>$HOME/.cache/lake/</code> or something like that?</p>",
        "id": 321798233,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673951797
    },
    {
        "content": "<p>I'm using <code>git worktree</code> to checkout every branch in its own directory.</p>",
        "id": 321798319,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673951827
    },
    {
        "content": "<p>Which means I'm currently not really benefiting from local caching that much, and just redownloading the same files 10x per day</p>",
        "id": 321798432,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673951864
    },
    {
        "content": "<p>I can add a check to see if the user has a <code>MATHLIB_CACHE_DIR</code> env var defined. If so, use that instead</p>",
        "id": 321798668,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673951928
    },
    {
        "content": "<p>Would that help?</p>",
        "id": 321798710,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673951944
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> yeah, sounds good!</p>",
        "id": 321798943,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673952002
    },
    {
        "content": "<p>But then you would have to export that env variable on every terminal session</p>",
        "id": 321799015,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673952015
    },
    {
        "content": "<p>I'm ok with that</p>",
        "id": 321799075,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673952035
    },
    {
        "content": "<p>I personally would prefer having control over where to store the cache: currently, I am unable to use mathlib4 in the department, since I cannot install things myself, due to permissions.  If I can control as much as I can where files are placed, that would be helpful!</p>",
        "id": 321799103,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1673952044
    },
    {
        "content": "<p>Would writing it at $XDG_CACHE_HOME/mathlib be appropriate? A user could still do <code>XDG_CACHE_HOME=/tmpdir lake exe cache...</code> to override it.</p>",
        "id": 321799500,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1673952168
    },
    {
        "content": "<p>Mauricio, in this specific case, the $XDG_CACHE_HOME variable is set to a directory on which I have write permissions, so I would be happy with that as well!</p>",
        "id": 321799887,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1673952299
    },
    {
        "content": "<p>I will implement Mauricio's idea then</p>",
        "id": 321810205,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673955654
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 321810384,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673955708
    },
    {
        "content": "<p>Ah, and I will use <code>.cache</code> as a fallback in case that's not defined</p>",
        "id": 321810520,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673955749
    },
    {
        "content": "<p>Wait, is <code>XDG_CACHE_HOME</code> some default path on Unix systems? I don't have it defined on my machine (Ubuntu 22.04)</p>",
        "id": 321812397,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673956447
    },
    {
        "content": "<p><a href=\"https://wiki.archlinux.org/title/XDG_user_directories\">https://wiki.archlinux.org/title/XDG_user_directories</a></p>",
        "id": 321813286,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673956798
    },
    {
        "content": "<p>Most distros do something with XDG</p>",
        "id": 321813371,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673956810
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1623\">mathlib4#1623</a></p>",
        "id": 321816023,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673957741
    },
    {
        "content": "<p>The correct fallback for <code>XDG_CACHE_HOME</code> is <code>$HOME/.cache</code>. It doesn't make sense to decide between a local and global cache based on the existence of this variable.</p>",
        "id": 321818071,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1673958403
    },
    {
        "content": "<p>I can change that. But what if <code>HOME</code> is not defined?</p>",
        "id": 321824191,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673960345
    },
    {
        "content": "<p>Then we're screwed</p>",
        "id": 321824863,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1673960557
    },
    {
        "content": "<p>And this is of course only on Linux, other platforms have completely different conventions <a href=\"https://crates.io/crates/dirs\">https://crates.io/crates/dirs</a></p>",
        "id": 321825402,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1673960730
    },
    {
        "content": "<p>Then I'll leave <code>.cache</code> as the safe fallback</p>",
        "id": 321826987,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673961240
    },
    {
        "content": "<p>(but anyone is free to push to that branch and advocate for their solution, of course)</p>",
        "id": 321827154,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673961283
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1623\">mathlib4#1623</a> is updated</p>",
        "id": 321827895,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673961527
    },
    {
        "content": "<p>I may be misunderstanding something about the relation between get-cache and <code>lake build</code>, so sorry if that's the case! </p>\n<p>I have a project that uses mathlib as a dependency. I can run <code>lake exe cache get</code> in the root of my project and it seems to successfully download and/or unpack a cache. But running <code>lake build</code> tries to recompile everything. When I open a file with mathlib imports in vscode, it also starts recompiling. Any guess what I've done wrong here?</p>\n<p>Curiously: this project is also set up for gitpod, and if I create a fresh gitpod instance (calling <code>lake exe cache get</code>) I can open files with no recompilation. But <code>lake build</code> still starts from the bottom.</p>",
        "id": 321974135,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1674018371
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> I think Arthur has conjectured that we shouldn't be pinning <code>master</code> in lakefiles, but pinning a specific hash/tag/release instead.</p>",
        "id": 321974307,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674018499
    },
    {
        "content": "<p>I haven't yet tested whether that helps, but it's worth a shot.</p>",
        "id": 321974326,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674018512
    },
    {
        "content": "<p>On a semi-related note, is there a standard way to stop recompilation when it gets triggered by vscode? In the above, when I opened a file with imports, a bunch of lake and lean processes started eating my CPU, and restarting the Lean server and even quitting vscode didn't kill them. I had to kill them manually</p>",
        "id": 321974328,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1674018514
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/321974307\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> I think Arthur has conjectured that we shouldn't be pinning <code>master</code> in lakefiles, but pinning a specific hash/tag/release instead.</p>\n</blockquote>\n<p>Interesting -- will give that a shot!</p>",
        "id": 321974377,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1674018558
    },
    {
        "content": "<p>Pinning a specific commit didn't seem to change anything. (Process: edit my project's <code>lakefile.lean</code>, <code>lake update</code>, <code>lake exe cache get</code>, <code>lake build</code>)</p>",
        "id": 321974604,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1674018770
    },
    {
        "content": "<p>I think maybe <code>lake update</code> is something you're just not supposed to do when you have dependencies.  (I seem to remember discussion of this.)</p>",
        "id": 321977277,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674020808
    },
    {
        "content": "<p>So maybe instead of <code>lake update</code> you want to manually copy in the lake-manifest of current mathlib.  (well, or find a way to automate that.)</p>",
        "id": 321977332,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674020861
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/321977277\">said</a>:</p>\n<blockquote>\n<p>I think maybe <code>lake update</code> is something you're just not supposed to do when you have dependencies.  (I seem to remember discussion of this.)</p>\n</blockquote>\n<p>That's a big vague, but I guess my question is: is <code>lake update</code> un-pinning your pinned hashes for the dependencies?</p>",
        "id": 321977649,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674021112
    },
    {
        "content": "<p>It would have to copy the manifest from mathlib and then add mathlib itself (per the error message when I tried). But even if I do that I see the same behavior. Updated process: my project pins mathlib4 to a commit and its manifest matches that of mathlib4, with the addition of mathlib4 itself. I clone a fresh copy of this repository (so no build artifacts) and run <code>lake exe cache get</code>, <code>lake build</code></p>",
        "id": 321978777,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1674022020
    },
    {
        "content": "<p>Although, with this new process, I can open files that import mathlib before running <code>lake build</code></p>",
        "id": 321978846,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1674022079
    },
    {
        "content": "<blockquote>\n<p>I think Arthur has conjectured that we shouldn't be pinning <code>master</code> in lakefiles, but pinning a specific hash/tag/release instead.</p>\n</blockquote>\n<p>This should make no difference whatsoever for the caching.  We've been fixing quite a few bugs though over the last few weeks, are you on the latest mathlib4 already?</p>",
        "id": 321979836,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674022901
    },
    {
        "content": "<p>FWIW, mathport depends on <code>mathlib4</code> and successfully uses <code>lake exe cache get</code> in CI (i.e., avoiding building mathlib4)</p>",
        "id": 321979908,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674022941
    },
    {
        "content": "<p>Note: you need matching Lean versions of course.  <code>cp lake-packages/mathlib/lean-toolchain .</code> is your friend.</p>",
        "id": 321979949,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674022987
    },
    {
        "content": "<p>Note: of course std4/aesop/etc. versions also need to match exactly.  Deleting any <code>require std</code> etc. in your lakefile is a good start, followed by <code>lake update</code>.</p>",
        "id": 321980059,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674023052
    },
    {
        "content": "<blockquote>\n<p>On a semi-related note, is there a standard way to stop recompilation when it gets triggered by vscode? In the above, when I opened a file with imports, a bunch of lake and lean processes started eating my CPU, and restarting the Lean server and even quitting vscode didn't kill them. I had to kill them manually</p>\n</blockquote>\n<p>No. We should probably file that as a bug.</p>",
        "id": 321980187,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674023136
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/321980059\">said</a>:</p>\n<blockquote>\n<p>Note: of course std4/aesop/etc. versions also need to match exactly.  Deleting any <code>require std</code> etc. in your lakefile is a good start, followed by <code>lake update</code>.</p>\n</blockquote>\n<p>So will that ensure that in a project with just one dependency (mathlib), all the dependencies of that dependency (std/aesop/...) get updated only to whatever version mathlib is currently using -- not to latest version?</p>",
        "id": 321980189,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674023139
    },
    {
        "content": "<p>Yes.  That's also been fixed recently (November last year).</p>",
        "id": 321980402,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674023247
    },
    {
        "content": "<p>I'm on the latest commit of mathlib4 and the toolchain files match. This is the entirety of my lakefile:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>import Lake\nopen Lake DSL\n\n\nrequire mathlib from git \"https://github.com/leanprover-community/mathlib4\" @ \"d1e6d8643531bd36f7c7bb612413decb7cb07ede\"\n\npackage «brown-cs22» {\n  -- add package configuration options here\n}\n\nlean_lib BrownCs22 {\n  -- add library configuration options here\n}\n\n@[default_target]\nlean_exe «brown-cs22» {\n  root := `Main\n}\n</code></pre></div>",
        "id": 321980491,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1674023286
    },
    {
        "content": "<p><code>lake update &amp;&amp; cp lake-packages/mathlib/lean-toolchain .</code> and you should be good to go.</p>",
        "id": 321980532,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674023327
    },
    {
        "content": "<p>mathport is a good example for me to compare to -- I'll have to see if I can spot any relevant differences between that and my setup</p>",
        "id": 321980541,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1674023337
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>rob@pop-os:~/teaching/cs22/s23/lean$ lake update <span class=\"o\">&amp;&amp;</span> cp lake-packages/mathlib/lean-toolchain .\nrob@pop-os:~/teaching/cs22/s23/lean$ lake exe cache get\nNo files to download\nDecompressing <span class=\"m\">926</span> file<span class=\"o\">(</span>s<span class=\"o\">)</span>\nrob@pop-os:~/teaching/cs22/s23/lean$ lake build\nCompiling Std.Data.RBMap.Basic\nCompiling Qq.Macro\nCompiling Mathlib.Lean.Meta\nCompiling Qq.Rw\nCompiling Std.Lean.Meta.DiscrTree\nCompiling Std.Data.List.Basic\nCompiling Mathlib.Tactic.Relation.Symm\nCompiling Mathlib.Tactic.Relation.Trans\n^C\nrob@pop-os:~/teaching/cs22/s23/lean$\n</code></pre></div>\n<p><span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 321980705,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1674023419
    },
    {
        "content": "<p>That's normal.</p>",
        "id": 321980718,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674023428
    },
    {
        "content": "<p>Compiling = running C compiler to produce native binary (not cached)</p>",
        "id": 321980750,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674023445
    },
    {
        "content": "<p>Building = running Lean (slow and cached)</p>",
        "id": 321980762,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674023451
    },
    {
        "content": "<p>Oh!</p>",
        "id": 321980808,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1674023468
    },
    {
        "content": "<p>Wait -- so which one does <code>lake build</code> do?</p>",
        "id": 321981246,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674023731
    },
    {
        "content": "<p>So, what I'd like to do in Lean 3 language: I have my project that depends on mathlib. I'd like to build oleans for my project so that when a student opens one of my files, they don't have to wait. <code>lean src --make</code> or whatever</p>",
        "id": 321981259,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1674023736
    },
    {
        "content": "<p>Imagining that there's a file in my project that's slow to build that gets imported by lots of others, e.g. a \"course library\" file</p>",
        "id": 321981354,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1674023777
    },
    {
        "content": "<p>I take it <code>lake build</code> is not what I'm looking for?</p>",
        "id": 321981458,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1674023861
    },
    {
        "content": "<p><code>lake build BrownCs22.MyModule</code> will build only that module and its dependencies.  The reason <code>lake build</code> compiles the C code is because it compiles <code>runLinter</code>--it won't compile any the modules in your project.  It will only build them.</p>",
        "id": 321981628,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674023954
    },
    {
        "content": "<p>Or are you asking if you can use <code>lake exe cache get</code> for your project?</p>",
        "id": 321981662,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674023972
    },
    {
        "content": "<p>Nope! I'm looking for <code>lake build BrownCs22.MyModule</code>, thanks so much</p>",
        "id": 321982191,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1674024213
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/321980059\">said</a>:</p>\n<blockquote>\n<p>Note: of course std4/aesop/etc. versions also need to match exactly.  Deleting any <code>require std</code> etc. in your lakefile is a good start, followed by <code>lake update</code>.</p>\n</blockquote>\n<p>This is where I think things can go wrong: relying on Lake to figure out transitive dependencies. It's easy if your graph of dependencies is small, but it can become a nightmare for bigger graphs.</p>\n<p>If I have a direct dependency on <code>Std</code> and on <code>Mathlib</code> but <code>Mathlib</code> also depends on <code>Std</code>, figuring out compatibility is a lot smoother if <code>Mathlib</code> explicitly states the commit  hash it needs from <code>Std</code> in its lakefile.</p>\n<p>Another situation where dependency UX can go bad is when you depend on two libs, but they <em>implicitly</em> depend on different versions of a certain lib.</p>",
        "id": 321989577,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674027738
    },
    {
        "content": "<p>Ah, and parsing Lake manifests with the human eye is out of question in terms of UX. Please let's not rely on that</p>",
        "id": 321989871,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674027892
    },
    {
        "content": "<p>(are the current caching scripts really designed to work outside of the porting effort? It seems like more robust stuff will require a bit more infrastructure around dependency management)</p>",
        "id": 321990224,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674028057
    },
    {
        "content": "<p>Yes and no. It is prepared to deal with the two situations: when you're in Mathlib or when you're importing Mathlib. I mean, it can understand in which scenario it's at, find sources and place olean files correctly. But it relies on precise management of dependencies. And Mathlib pinning the <code>master</code> rev of <code>Std</code> doesn't help</p>",
        "id": 321991447,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674028608
    },
    {
        "content": "<p>Unless you're willing to rely on Lake to figure out transitive dependencies for you. But that will potentially make the life of people importing your project harder because they don't know which version of Std they will be downloading unless they look at your manifest</p>",
        "id": 321992531,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674029072
    },
    {
        "content": "<p>Managing dependencies, however, is a world in itself. As a reference, Cargo adopts semantic versioning... but they also have a dedicated platform for hosting packages.</p>\n<p>I will follow up on a thread in <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a></p>",
        "id": 321997253,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674031087
    },
    {
        "content": "<blockquote>\n<p>If I have a direct dependency on Std and on Mathlib but Mathlib also depends on Std, figuring out compatibility is a lot smoother if Mathlib explicitly states the commit hash it needs from Std in its lakefile.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> I don't know how to get this through to you, but your description is exactly how Lake and mathlib4 are already set up right now.  The <code>lake-manifest.json</code> in mathlib4 explicitly states the commit hash from std4 (and from aesop, etc.).  If you use <code>lake update</code> in a project that imports <code>mathlib4</code>, it will use these pinned revisions.</p>",
        "id": 322112458,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674063442
    },
    {
        "content": "<blockquote>\n<p>Another situation where dependency UX can go bad is when you depend on two libs, but they implicitly depend on different versions of a certain lib.</p>\n</blockquote>\n<p>This is indeed a hard one.  But I have an undocumented trick for you: the order of <code>require</code> directives in a lakefile matters, i.e., they are resolved top-to-bottom.  So as long as mathlib4 is your first <code>require</code>, <code>lake update</code> will take all dependency versions from <code>mathlib4</code>.  (And if you want a different version of aesop, you could put a <code>require aesop</code> on top.)</p>",
        "id": 322114210,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674063928
    },
    {
        "content": "<p>Alright, got it. Thanks! The order trick is important and I wasn't aware of it</p>",
        "id": 322124900,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674067060
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span> I think caching can work for you if you remove the requirements on Qq and Std</p>",
        "id": 322127129,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674067682
    },
    {
        "content": "<p>Thanks. i will try</p>",
        "id": 322181259,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1674089052
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/0fQVg8wK2BXzosmka18meS7P/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/0fQVg8wK2BXzosmka18meS7P/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/0fQVg8wK2BXzosmka18meS7P/image.png\"></a></div>",
        "id": 322427943,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1674190112
    },
    {
        "content": "<p>What's going on here?</p>",
        "id": 322427960,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1674190132
    },
    {
        "content": "<p>Well, I just built Mathlib4 myself and it works</p>",
        "id": 322429369,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1674191183
    },
    {
        "content": "<p>Very very fast</p>",
        "id": 322429386,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1674191201
    },
    {
        "content": "<p>Looks like a partial failure</p>",
        "id": 322445636,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674200483
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459227\">@Violeta Hernández</span> it's better to do <code>lake exe cache get!</code> once to purge corrupted files</p>",
        "id": 322509527,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674220368
    },
    {
        "content": "<p>Should we add some instructions for <code>lake exe get cache</code> on the mathlib4 readme.md?</p>",
        "id": 323064612,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1674491631
    },
    {
        "content": "<p>What's the plan for when we start getting hash collisions in <code>UInt64</code> btw?</p>",
        "id": 323232492,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674561681
    },
    {
        "content": "<p>Use a more reasonable hash?</p>",
        "id": 323233193,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674561862
    },
    {
        "content": "<p>That's the obvious part. But I mean, are we going to implement something in Lean? Use some C implementation? FFI to something that's done in Rust?</p>",
        "id": 323240219,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674563894
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/323232492\">said</a>:</p>\n<blockquote>\n<p>What's the plan for when we start getting hash collisions in <code>UInt64</code> btw?</p>\n</blockquote>\n<p>What's the chance of that happening?</p>",
        "id": 323242062,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1674564478
    },
    {
        "content": "<p>It's low but I don't have a clear intuition for how likely that is to happen in the next year</p>",
        "id": 323242455,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674564580
    },
    {
        "content": "<p>Does the presence of a <code>git</code> installation mean that you have a command-line hashing tool installed?</p>",
        "id": 323243269,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674564797
    },
    {
        "content": "<p>Eric, I don't know why you're communicating with questions like that. Yes, Git has a hashing algorithm. But that doesn't give us an obvious way to plug it in our hashing scheme</p>",
        "id": 323246642,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674565717
    },
    {
        "content": "<p>Sorry, let me try and be clearer: could you build a long string of all the data you want to hash, and pipe it to <code>git some-raw-hash-command</code> in order to punt the job of having native hashing down the road? Or would that be prohibitively slow? I'm not suggesting using git, but merely using the fact that git bundles a binary somewhere that can compute SHA1 hashes.</p>",
        "id": 323246808,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674565779
    },
    {
        "content": "<p>I found this: <a href=\"https://git-scm.com/docs/git-hash-object\">https://git-scm.com/docs/git-hash-object</a></p>",
        "id": 323247303,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674565939
    },
    {
        "content": "<p>The long string idea works, but we'd need to write it to a file and then hash. If we have ~1k files, that's ~1k writes and git hash calls though</p>",
        "id": 323247616,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674566042
    },
    {
        "content": "<p>We have an implementation of the SHA3 hash <a href=\"https://github.com/yatima-inc/Ipld.lean/blob/main/Ipld/Keccak.lean\">here</a>. But maybe that's an overkill. I know this is a very anticipated concern but I just don't want us to fall in a \"fixing a plane while it's flying\" territory. I think we should at least agree on a plan for when/if it happens</p>",
        "id": 323248714,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674566338
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/323247616\">said</a>:</p>\n<blockquote>\n<p>The long string idea works, but we'd need to write it to a file and then hash. If we have ~1k files, that's ~1k writes and git hash calls though</p>\n</blockquote>\n<p>Would piping it through stdin not work? Either way, the subprocess calls would add up I guess.</p>",
        "id": 323249619,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674566582
    },
    {
        "content": "<p>Yes, the ideal solution wouldn't rely on more IO overhead, IMO</p>",
        "id": 323250995,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674566932
    },
    {
        "content": "<p><code>git hash-object</code> indeed has a <code>--stdin</code> option.</p>",
        "id": 323254275,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674567826
    },
    {
        "content": "<p>i'm not sure it's worth worrying -- where do we rely on hashes to indicate equality?</p>",
        "id": 323258199,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674568820
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 323258263,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674568837
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/323258199\">said</a>:</p>\n<blockquote>\n<p>i'm not sure it's worth worrying -- where do we rely on hashes to indicate equality?</p>\n</blockquote>\n<p>The hash indicates which <code>olean</code> file we should download. A hash collision would trigger a download of some unrelated olean and I'm not fully aware of the consequences of that</p>",
        "id": 323259045,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674569031
    },
    {
        "content": "<p>Unless Lake's trace has the same collision, it will surely rebuild the file</p>",
        "id": 323259538,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1674569149
    },
    {
        "content": "<p>That's good news then. So in terms of build safety, we're backed up by Lake</p>",
        "id": 323260325,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674569327
    },
    {
        "content": "<p>A collision could also cause uploads to either fail or invalidate old caches, right?</p>",
        "id": 323260372,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674569338
    },
    {
        "content": "<p>Uploads would fail. But it's probably better to invalidate old caches <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 323260811,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674569445
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/287929-mathlib4/topic/lake.20get-cache/near/323259538\">said</a>:</p>\n<blockquote>\n<p>Unless Lake's trace has the same collision, it will surely rebuild the file</p>\n</blockquote>\n<p>Just to make sure... we also download <code>.ilean</code>, <code>.trace</code>, <code>.c</code> and <code>.c.trace</code> files. Would Lake still be able to recover from that? I'm asking because I don't know to what extend Lake trusts what's already in the file system versus always recomputing traces</p>",
        "id": 323267382,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674570851
    },
    {
        "content": "<p>Yes, comparing the trace on disk with the recomputed trace in memory is how Lake decides what to rebuild.</p>",
        "id": 323273736,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1674572366
    },
    {
        "content": "<p>Lake uses the same hash as <code>cache</code>, so a hash collision in the file contents would affect both of them.</p>",
        "id": 323333543,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674587605
    },
    {
        "content": "<p>I've been thinking about adding a better, cryptographic hash function.  For example blake3 is about as fast our current hash, at least if you use the optimized assembly version.  But then I saw that Lake needs to be built by three different build systems (make, nix, and lake) and my motivation dropped drastically.</p>",
        "id": 323334569,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674587854
    },
    {
        "content": "<p>We're using Rust's blake3 via FFI <a href=\"https://github.com/yatima-inc/LightData/blob/main/ffi.c\">here</a>. But that would require users to have <code>cargo</code> installed</p>",
        "id": 323335346,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674588064
    },
    {
        "content": "<p>Using blake3 via Rust is a very roundabout way of doing this.  Blake3 has a nice C implementation, there's no need to depend on Rust.  (At least when using it in Lean/Lake.  I guess you're already using Rust for other libraries as well, so it's not an extra dependency for you.)</p>",
        "id": 323337779,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674588859
    },
    {
        "content": "<p>On that, we would prefer using the C implementation directly. But configuring the Rust FFI looked easier than adapting the C code.</p>",
        "id": 323338947,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674589236
    },
    {
        "content": "<p>If you manage to get that into <code>std4</code>, it would not only make mathlib4's caching better but also our team happier</p>",
        "id": 323344564,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674591174
    },
    {
        "content": "<p>speaking of which, if someone wants to upstream the <code>cache</code> script to <code>std4</code> that would be great</p>",
        "id": 323346376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674591810
    },
    {
        "content": "<p>ideally in such a way that mathlib doesn't need to maintain a separate copy of the script</p>",
        "id": 323346520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674591850
    },
    {
        "content": "<p>The proper way of doing so is by having a generic package for caching</p>",
        "id": 323347534,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674592246
    },
    {
        "content": "<p>A less ideal way of doing so is by migrating <code>Cache</code> to <code>std4</code> so mathlib4 would inherit <code>lake exe cache</code></p>",
        "id": 323347796,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674592344
    },
    {
        "content": "<p>I have no idea how packages and lake scripts interact, but if you can make something work that's fine</p>",
        "id": 323347818,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674592355
    },
    {
        "content": "<p>I just want this capability to be widely available somehow</p>",
        "id": 323348022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674592434
    },
    {
        "content": "<p>I prefer not to add new packages though since they add maintenance overhead when we do lean bumps and the like</p>",
        "id": 323348225,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674592501
    },
    {
        "content": "<p>that feels like a wider conversation though that we don't need to broach now</p>",
        "id": 323348309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674592541
    }
]