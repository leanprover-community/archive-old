[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1663\">mathlib4#1663</a><br>\nWhile porting this, I get twice the error <code>redundant binder annotation update</code>. What is this about and how to fix it?</p>",
        "id": 322198769,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1674103212
    },
    {
        "content": "<p>There's already a <code>u</code> declared</p>",
        "id": 322201423,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674105777
    },
    {
        "content": "<p>It's weird because when you delete the <code>u</code>, theorems suddenly fail to typecheck, despite making no mention of <code>u</code> (which is confusingly a variable, not a universe) and then the error on the second variable declaration goes away.</p>",
        "id": 322201800,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674106101
    },
    {
        "content": "<p>I think what's going on is that you can declare <code>a</code> as implicit via then re-declare it as explicit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span>\n<span class=\"c1\">-- stuff</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"c1\">-- OK</span>\n</code></pre></div>\n<p>But you can't re-declare it as implicit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span>\n<span class=\"c1\">-- stuff</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"c1\">-- error about redundant binder annotation update</span>\n</code></pre></div>\n<p>I assume that the error about <code>u</code> made Lean not process the legal update to <code>s</code> so the (again legal) update back to explicit got the same error.</p>",
        "id": 322202421,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674106477
    },
    {
        "content": "<p>Thanks for the explanation!<br>\nI'm still not quite sure how to fix it...</p>",
        "id": 322215898,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1674114387
    },
    {
        "content": "<p>In the lean 3 file on line 222 u is made implicit when it's already implicit. In lean 3 this was a no-op and in lean 4 it's an error. Just remove u from the list.</p>",
        "id": 322220342,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674116174
    },
    {
        "content": "<p>Oh I see  -- and then you have to fix the proofs <del>that mathport has borked because it seems to have choked on the <code>variables</code> line and not made anything implicit at all</del>back to how they were. For example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">disjSups_subset_left</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">t₁</span> <span class=\"bp\">⊆</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">○</span> <span class=\"n\">t₁</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span> <span class=\"bp\">○</span> <span class=\"n\">t₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">disjSups_subset</span> <span class=\"n\">Subset.rfl</span> <span class=\"n\">ht</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">finset.disj_sups_subset_left</span> <span class=\"n\">Finset.disjSups_subset_left</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">disjSups_subset_right</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s₁</span> <span class=\"bp\">⊆</span> <span class=\"n\">s₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s₁</span> <span class=\"bp\">○</span> <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">s₂</span> <span class=\"bp\">○</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n  <span class=\"n\">disjSups_subset</span> <span class=\"n\">hs</span> <span class=\"n\">Subset.rfl</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">finset.disj_sups_subset_right</span> <span class=\"n\">Finset.disjSups_subset_right</span>\n</code></pre></div>\n<p>You can see from the mathlib3 file that this is what the proofs are supposed to be.</p>",
        "id": 322224668,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674117826
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">disjSups_subset_iff</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">○</span> <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">u</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">Disjoint</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n  <span class=\"n\">forallDisjSups_iff</span>\n</code></pre></div>\n<p>(again the same as the mathlib3 proof)</p>",
        "id": 322225070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674117949
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> it seems that if mathlib3 has any lines of the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n<span class=\"bp\">...</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>then Lean 4 complains about the second <code>variables {s t u}</code> (because <code>u</code> is already implicit) but Lean 3 doesn't. As a consequence mathport seems to completely ignore the <code>variables {s t u}</code> line and then translation is messed up because mathport puts in a bunch of <code>_</code>s which weren't there in Lean 3. This happens at least once in mathlib and who knows how often.</p>",
        "id": 322225725,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674118190
    },
    {
        "content": "<p>mathport can't possibly be affected by such an error</p>",
        "id": 322225895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674118237
    },
    {
        "content": "<p>Oh OK thanks. Maybe the user did this then :-)</p>",
        "id": 322225966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674118263
    },
    {
        "content": "<p>I would expect it to just regurgitate a line like <code>variable {s t u}</code> as is</p>",
        "id": 322225988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674118271
    },
    {
        "content": "<p>Yes sorry you're right, mathport is emitting the correct code. <span class=\"user-mention\" data-user-id=\"313038\">@Moritz Firsching</span> did you \"fix\" the proofs above and in fact my suggestions are just to un\"fix\" them to how mathport had them?</p>",
        "id": 322226265,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674118370
    },
    {
        "content": "<p>thanks, removing the <code>u</code> and reverting my \"fixes\" worked! I had indeed put in the <code>_ _ _ _</code></p>",
        "id": 322246813,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1674124860
    }
]