[
    {
        "content": "<p>I think we need to create a FAQ for the porting, listing all the small problems we get in porting a file and that are likely to bother someone else.</p>\n<p>For example, in <a href=\"https://github.com/leanprover-community/mathlib4/pull/626\">mathlib4#626</a>, I noticed that (with the long line)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">CommMonoid</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">MulOneClass</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">distrib</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span><span class=\"n\">m₁</span><span class=\"bp\">&gt;</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span><span class=\"n\">m₁</span><span class=\"bp\">&gt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span><span class=\"n\">m₁</span><span class=\"bp\">&gt;</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CommMonoid</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">*</span> <span class=\"bp\">·</span><span class=\"o\">),</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mul_comm</span> <span class=\"n\">h₁</span> <span class=\"n\">MulOneClass.IsUnital</span> <span class=\"n\">distrib</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comm</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"n\">h₁</span> <span class=\"n\">MulOneClass.IsUnital</span> <span class=\"n\">distrib</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">assoc</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>works, but (just putting <code>mul_assoc</code> on a new line to make the linter happy)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">CommMonoid</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">MulOneClass</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">distrib</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span><span class=\"n\">m₁</span><span class=\"bp\">&gt;</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span><span class=\"n\">m₁</span><span class=\"bp\">&gt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span><span class=\"n\">m₁</span><span class=\"bp\">&gt;</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CommMonoid</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">*</span> <span class=\"bp\">·</span><span class=\"o\">),</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mul_comm</span> <span class=\"n\">h₁</span> <span class=\"n\">MulOneClass.IsUnital</span> <span class=\"n\">distrib</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comm</span><span class=\"o\">,</span>\n      <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"n\">h₁</span> <span class=\"n\">MulOneClass.IsUnital</span> <span class=\"n\">distrib</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">assoc</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>doesn't, and the error is not clear at all. Scott quickly find the solution (also the <code>mul :=...</code> has to be on a new line), but I am sure this is going to confuse someone else.</p>\n<p>This is just an example, but it's worth to have a centralized place for questions like this one, rather than asking/searching on zulip each time.</p>",
        "id": 310777199,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668763382
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span>, could you please include this in the <a href=\"https://github.com/leanprover-community/mathlib4/wiki\">#port-guide</a>?</p>",
        "id": 310782063,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668765189
    },
    {
        "content": "<p>Ah yes, the paragraph \"Some common fixes\" is essentially what I wanted. Maybe we should move it to a separate wiki if it gets too big, but we will see. (I am updating it.)</p>\n<p>Another problem I found is that instances for <code>out_param</code> now need to be <code>out_param</code> themselves. For example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">SubAdditiveHomClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">Add</span> <span class=\"n\">β</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">LE</span> <span class=\"n\">β</span><span class=\"o\">)]</span> <span class=\"kd\">extends</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>doesn't work if <code>Add  α</code> is not an <code>outParam</code> (this is not the case in Lean3). If this is the correct way of fixing the problem I will also add it to the wiki.</p>",
        "id": 310784561,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668766049
    },
    {
        "content": "<p>Riccardo, I think I've mentioned that before: it would be great if everyone that encountered a non-trivial problem when porting files writes a short paragraph in the wiki on it got fixed (given that it might occur again).</p>",
        "id": 310786566,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1668766781
    },
    {
        "content": "<p>I don't understand your <code>outParam</code> example. It sounds like something could be broken, so a MWE would be great.</p>",
        "id": 310786755,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668766842
    },
    {
        "content": "<p>That's exactly my point. These issues will pop out over and over, we really need a centralized place for them.</p>\n<p>Let me write a mwe.</p>",
        "id": 310786834,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668766872
    },
    {
        "content": "<p>This</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Defs</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>gives the error \"invalid class, parameter <a href=\"https://github.com/leanprover-community/mathlib/pull/2\">#2</a> depends on <code>outParam</code>, but it is not an <code>outParam</code>\". This</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Defs</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">Zero</span> <span class=\"n\">F</span><span class=\"o\">)]</span> <span class=\"n\">where</span>\n  <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>is OK. In Lean3 it was not the case.</p>",
        "id": 310787552,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668767115
    },
    {
        "content": "<p>I feel like this is just Lean being unhelpful. Do you think you could come up with a MWE that doesn't have any imports, and then post an issue on the Lean 4 repo?</p>",
        "id": 310788195,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668767324
    },
    {
        "content": "<p>Let me try</p>",
        "id": 310789746,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668767863
    },
    {
        "content": "<p>That was easy.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">F</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">foobar</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">F</span>\n</code></pre></div>",
        "id": 310790283,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668768046
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/1852\">Voilà</a></p>",
        "id": 310791231,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668768394
    },
    {
        "content": "<p>This might be related to my PR <a href=\"https://github.com/leanprover-community/lean/pull/657\">lean#657</a> which changed some aspects of out_param handling in Lean 3</p>",
        "id": 310792393,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1668768840
    },
    {
        "content": "<p>I am also adding the fact that <code>include</code> and <code>omit</code> are gone and that the corresponding lines can just be deleted.</p>",
        "id": 310797139,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668770462
    },
    {
        "content": "<p>Can someone else comment my issue? Leo is asking if we prefer to omit the <code>outParam</code> in instances. Personally I think it's really better, but maybe I am missing something.</p>",
        "id": 310912616,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668802336
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 310968528,
        "sender_full_name": "Winston Yin",
        "timestamp": 1668838184
    },
    {
        "content": "<p>I wanted to remove the now unnecessary <code>outParam</code>, but if I remove any other <code>outParam</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/692\">#692</a> I get an error. I don't understand what's going on, the first <code>outParam</code> were removed without problems.</p>",
        "id": 311857164,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1669219776
    },
    {
        "content": "<p>It's really strange, if I remove the second <code>outParam</code> in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `NonArchimedeanHomClass F α β` states that `F` is a type of non-archimedean morphisms. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">NonArchimedeanHomClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">LinearOrder</span> <span class=\"n\">β</span><span class=\"o\">)]</span> <span class=\"kd\">extends</span> <span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- the image of a sum is less or equal than the maximum of the images. -/</span>\n  <span class=\"n\">map_add_le_max</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">nonarchimedean_hom_class</span> <span class=\"n\">NonArchimedeanHomClass</span>\n</code></pre></div>\n<p>I get an error (\"function expected at  <code>f</code> term has type <code>F</code>\") in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">le_map_mul_map_div</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommSemigroup</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SubMultiplicativeHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">div_mul_cancel'</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">map_mul_le_mul</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">b</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">le_map_mul_map_div</span> <span class=\"n\">le_map_mul_map_div</span>\n</code></pre></div>\n<p>even if this theorem seems unrelated to <code>NonArchimedeanHomClass</code>.</p>",
        "id": 311857938,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1669220016
    },
    {
        "content": "<p>Recent commits to master seem to have broken some classes that use <code>outParam</code>. The following example would've worked before:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">:</span><span class=\"n\">working_on_it</span><span class=\"o\">:</span>\n</code></pre></div>\n<p>The <code>outParam</code>s in <code>ZeroHomClass</code> should eventually (now?) be removed, but <code>#synth</code> still fails.</p>",
        "id": 312420214,
        "sender_full_name": "Winston Yin",
        "timestamp": 1669519410
    },
    {
        "content": "<p>Where are you expecting the instance to come from? You need to define an <code>instance ... : ZeroHomClass (ZeroHom M N) M N := ...</code>.</p>",
        "id": 312420396,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669519611
    },
    {
        "content": "<p>(Also, I think this is misuse of <code>&lt;|</code> notation. It's very helpful if the closing parenthesis would be far off in the distance and hard to keep track of, but probably just confusing for short expressions.)</p>",
        "id": 312420429,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669519675
    },
    {
        "content": "<p>Oops apologies let me fix the example</p>",
        "id": 312420638,
        "sender_full_name": "Winston Yin",
        "timestamp": 1669519830
    },
    {
        "content": "<blockquote>\n<p>Also, I think this is misuse of &lt;| notation</p>\n</blockquote>\n<p>I was hoping its awkwardness would remind me to revisit this once <code>outParam</code> works nicely <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 312420772,
        "sender_full_name": "Winston Yin",
        "timestamp": 1669519989
    }
]