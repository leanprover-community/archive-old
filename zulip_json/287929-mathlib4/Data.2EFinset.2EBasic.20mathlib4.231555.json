[
    {
        "content": "<p>I started a PR for this milestone.</p>",
        "id": 321250341,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673641448
    },
    {
        "content": "<p>Can we throw out the adhoc one entirely this time? I feel it just got in the way for Fin.Basic</p>",
        "id": 321251073,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673641774
    },
    {
        "content": "<p>I did</p>",
        "id": 321251307,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673641858
    },
    {
        "content": "<p>For <code>Fin.Basic</code> we also tried that. But <code>Data/UInt</code> (a new file) relied on it.</p>",
        "id": 321251361,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673641882
    },
    {
        "content": "<p>A promising start:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- import Mathlib.Tactic.Apply</span>\n<span class=\"c1\">-- import Mathlib.Tactic.NthRewrite.Default</span>\n<span class=\"c1\">-- import Mathlib.Tactic.Monotonicity.Default</span>\n</code></pre></div>",
        "id": 321251639,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673641971
    },
    {
        "content": "<p>I need to do some other stuff. So please feel free to take over.</p>",
        "id": 321256970,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673643859
    },
    {
        "content": "<p><code>finset.disj_union</code> and <code>finset.disj_Union</code> both exist.<br>\nWhat should their Lean 4 names become?</p>",
        "id": 321301874,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673673360
    },
    {
        "content": "<p>Currently they both translate to <code>Finset.disjUnion</code>. Lean 4 doesn't like that. And I can't really blame it <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 321302034,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673673510
    },
    {
        "content": "<p>Should the latter translate to <code>Finset.disj⋃nion</code> instead? <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 321302292,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673673657
    },
    {
        "content": "<p>Or maybe we should call the former <code>disjunion</code>?</p>",
        "id": 321305872,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673677338
    },
    {
        "content": "<p>This is just union vs Union again</p>",
        "id": 321309792,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673681008
    },
    {
        "content": "<p>So it should be <code>disjUnionᵢ</code></p>",
        "id": 321309808,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673681036
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EFinset.2EBasic.20mathlib4.231555/near/321302292\">said</a>:</p>\n<blockquote>\n<p>Should the latter translate to <code>Finset.disj⋃nion</code> instead? <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>\n</blockquote>\n<p>That would be such a trap <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 321317040,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673686075
    },
    {
        "content": "<p>My naive reading of the naming convention suggests that the structure field <code>Nodup : Nodup</code> should be <code>noDup : NoDup</code>?</p>",
        "id": 321360595,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1673704513
    },
    {
        "content": "<p>What did we do for Iist?</p>",
        "id": 321360818,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673704607
    },
    {
        "content": "<p>The convention that seems to be done in practice is that anything that was one word in Lean3 is also one word in Lean4, without underscores or upper case in the middle</p>",
        "id": 321360862,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673704636
    },
    {
        "content": "<p>on list it's <code>Nodup</code></p>",
        "id": 321361083,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673704755
    },
    {
        "content": "<p><code>Data.AList</code> even has <code>Nodupkeys</code></p>",
        "id": 321361152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673704785
    },
    {
        "content": "<p>Ok that would be <code>nodup : Nodup</code> then</p>",
        "id": 321361281,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1673704818
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EFinset.2EBasic.20mathlib4.231555/near/321361152\">said</a>:</p>\n<blockquote>\n<p><code>Data.AList</code> even has <code>Nodupkeys</code></p>\n</blockquote>\n<p>Zero thought went into this decision</p>",
        "id": 321361344,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673704852
    },
    {
        "content": "<p>my preference is for <code>Nodup</code> and <code>NodupKeys</code></p>",
        "id": 321361400,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673704870
    },
    {
        "content": "<p>If someone would like to give me the rights, I can commit this very minor change to make it <code>nodup : Nodup</code></p>",
        "id": 321361927,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1673705075
    },
    {
        "content": "<p>What is your github username?</p>",
        "id": 321362083,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673705153
    },
    {
        "content": "<p>agjftucker</p>",
        "id": 321362108,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1673705161
    },
    {
        "content": "<p>Great job at cleaning up the errors in this file!</p>",
        "id": 321572726,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673852084
    },
    {
        "content": "<p>There are two linter errors left, of the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp, norm_cast]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">coe_filter</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">s.filter</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">({</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Set.ext</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mem_filter</span>\n<span class=\"c\">/-</span><span class=\"cm\"> simplify fails on left-hand side:</span>\n<span class=\"cm\">tactic 'simp' failed, nested error:</span>\n<span class=\"cm\">(deterministic) timeout at 'whnf', maximum number of heartbeats (200000) has been reached (use 'set_option maxHeartbeats &lt;num&gt;' to set the limit) -/</span>\n</code></pre></div>",
        "id": 321572784,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673852109
    },
    {
        "content": "<p>Disabling <code>pp.coercions</code> show the goal as <code>toSet (filter p s) = { x | x ∈ s ∧ p x = true }</code></p>",
        "id": 321572844,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673852138
    },
    {
        "content": "<p>I don't know why <code>simp</code> wouldn't trigger on that.</p>",
        "id": 321572868,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673852151
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> okay if I merge master into 1555 to pick up the repeat change?</p>",
        "id": 321579440,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673855513
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> sure, go ahead!</p>",
        "id": 321579533,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673855541
    },
    {
        "content": "<p>Names are looking good, as far as I can see.</p>",
        "id": 321579795,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673855660
    },
    {
        "content": "<p>CI is happy!</p>",
        "id": 321580059,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673855766
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> I hope the merge isn't too painful?</p>",
        "id": 321580078,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673855776
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> your finsets are around the corner!</p>",
        "id": 321580135,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673855811
    },
    {
        "content": "<p>It seems like it just builds? Just checking if anything else needs fixing</p>",
        "id": 321580335,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673855899
    },
    {
        "content": "<p>Done</p>",
        "id": 321580612,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673856031
    },
    {
        "content": "<p>(Hurray for the caching - probably would've taken me another 20 minutes to build without it)</p>",
        "id": 321580976,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673856187
    }
]