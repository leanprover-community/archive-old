[
    {
        "content": "<p>I'm porting <code>Algebra.GCDMonoid.Basic</code> (<a href=\"https://github.com/leanprover-community/mathlib4/pull/1135\">mathlib4#1135</a>) and got stuck at one final error at line 1088. The goal is <code>l = 0</code>, which in mathlib3 is closed by <code>hl : l = 0</code>. Instead, in Lean4 we have <code>hl : Classical.choose (_ : Exists fun x ↦ (fun x ↦ 0 = gcd a 0 * x) x) = 0</code>. Earlier, we have a <code>set l := ...</code> that gives <code>l := Classical.choose (_ : gcd a 0 ∣ ↑normalize (a * 0))</code>. mathlib3 is able to use that to rewrite <code>hl</code> into <code>l = 0</code>, but Lean4 is unable to do so.</p>\n<p>What is the meaning of <code>Classical.choose (_ : p)</code> where <code>p</code> is not an existential proposition? Why is mathlib3 able to equate two <code>Classical.choose</code> terms with seemingly different propositions? What is a workaround in mathlib4?</p>",
        "id": 317491179,
        "sender_full_name": "Winston Yin",
        "timestamp": 1671769037
    },
    {
        "content": "<p>I found a workaround by using a pure <code>rw</code> instead of <code>simp</code> in an earlier line, preventing the propositions in <code>Classical.choose</code> to disagree. My other questions above still hold, nevertheless.</p>",
        "id": 317502491,
        "sender_full_name": "Winston Yin",
        "timestamp": 1671778425
    }
]