[
    {
        "content": "<p>Is the <code>change</code> tactic meant to work in mathlib4? It doesn't seem to like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Prod</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">lex_def</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">Prod.Lex</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">r</span> <span class=\"n\">p.1</span> <span class=\"n\">q.1</span> <span class=\"bp\">∨</span> <span class=\"n\">p.1</span> <span class=\"bp\">=</span> <span class=\"n\">q.1</span> <span class=\"bp\">∧</span> <span class=\"n\">s</span> <span class=\"n\">p.2</span> <span class=\"n\">q.2</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">],</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">),</span> <span class=\"n\">Or.inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lex.left</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">),</span> <span class=\"n\">Or.inr</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n      <span class=\"n\">change</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"n\">at</span> <span class=\"n\">e</span>\n      <span class=\"n\">subst</span> <span class=\"n\">e</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">lex.right</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>By the way, trying to jump to definition on <code>change</code> jumps, to the definition of <code>Iff</code>...</p>",
        "id": 304345134,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665949318
    },
    {
        "content": "<p><code>change</code> is just <code>show</code> now</p>",
        "id": 304349001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665951972
    },
    {
        "content": "<p>Then someone should tell <code>mathport</code> about it.</p>",
        "id": 304394026,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665990534
    },
    {
        "content": "<p><code>change e</code> defined in <code>Mathlib.Tactic.Basic</code> as an alias for <code>show e</code>, but the <code>at</code> form and <code>change .. with ..</code> are both defined without implementation in lean 4 core. These are just missing an implementation (and they should either be PR'd to lean 4 or moved to mathlib4).</p>",
        "id": 304396484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665991565
    },
    {
        "content": "<p>Switching from <code>change</code> to <code>show</code> doesn't fix anything</p>",
        "id": 304527437,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1666030774
    },
    {
        "content": "<p>It only makes a new weird error message: <code>expected '⟩'</code></p>",
        "id": 304527635,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1666030822
    },
    {
        "content": "<p>And trying to jump to the definition of <code>show</code> still jumps to the definition of <code>Iff</code></p>",
        "id": 304527688,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1666030842
    },
    {
        "content": "<p>that is, <code>change e at h</code> does not exist currently</p>",
        "id": 304528126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666030971
    },
    {
        "content": "<p>Oh, I thought you meant we need <code>show e at h</code></p>",
        "id": 304528239,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1666031001
    },
    {
        "content": "<p>What is the workaround then?</p>",
        "id": 304528268,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1666031010
    },
    {
        "content": "<p>(it should really be on the tactic porting list, I think it was missed because it is one of the few tactics that has syntax but no elab in lean 4 core)</p>",
        "id": 304528313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666031023
    },
    {
        "content": "<p>no workaround other than revert/intro</p>",
        "id": 304528360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666031041
    },
    {
        "content": "<p>or <code>rw</code></p>",
        "id": 304528421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666031048
    },
    {
        "content": "<p>or <code>have</code> I guess for the <code>change e at h</code> case</p>",
        "id": 304528475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666031068
    },
    {
        "content": "<p>Ok thanks. I guess this gives us a rather urgent tactic porting target.</p>",
        "id": 304528978,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1666031211
    },
    {
        "content": "<p><code>replace h : _ := h</code>, if that exists already?</p>",
        "id": 304529738,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1666031412
    },
    {
        "content": "<p>it does exist</p>",
        "id": 304529884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666031451
    },
    {
        "content": "<p>reported as <a href=\"https://github.com/leanprover/lean4/pull/1745\">lean4#1745</a>, I'll work on it</p>",
        "id": 304530023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666031485
    }
]