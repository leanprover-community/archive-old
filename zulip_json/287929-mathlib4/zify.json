[
    {
        "content": "<p>How do I create a <code>SimpTheorem</code> from some declaration? My goal is to create a custom list of <code>simp</code>-lemmas for the <code>lift_to_z</code> step in zify. I did not find a definition in Mathlib4 that constructs the whole <code>Simp.Context</code>, but I found most of the ingredients to do that</p>",
        "id": 302300773,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1664901155
    },
    {
        "content": "<p>Check <code>SimpTheorems.addConst</code>.</p>",
        "id": 302302009,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1664901534
    },
    {
        "content": "<p>BTW if you are working on zify, the analogous qify just got added to mathlib 3 today (see <a class=\"stream\" data-stream-id=\"116290\" href=\"/#narrow/stream/116290-rss\">#rss</a>). Might be worth considering if the internals can be merged somehow for mathlib4 or at least just writing qify when zify is done!</p>",
        "id": 302318442,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1664906924
    },
    {
        "content": "<p>Yeah, I saw that. I'll first have to figure out how to do <code>zify</code> with just one lemma and then I would try to see whether it is possible to factor out the general stuff in a way that both <code>zify</code> and <code>qify</code> are very simple (and that it becomes trivial to write extensions for the reals and the complex numbers).</p>",
        "id": 302320709,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1664907629
    },
    {
        "content": "<p>at the moment I am mainly trying to figure out how <code>simp</code> is working, which seems to be way more complicated than I've expected it to be</p>",
        "id": 302321056,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1664907746
    },
    {
        "content": "<p>I've tried to imitate what <code>zify</code> is doing in Lean 3, but I don't understand how <code>SimpTheorem</code> and <code>SimpTheorems</code> work. It seemed to me that there are several places where you could put a lemma in: <code>SimpTheorems</code> seems to be a list (tree) of <code>SimpTheorem</code>s with some additional stuff (<code>pre</code> and <code>post</code>) that I don't understand, but the simplifyer takes an array of <code>SimpTheorems</code>..<br>\nIs there a function that I can call for creating a <code>SimpContext</code> that behaves as a <code>simp only</code>? This sounds rather useful, but I could not find it.<br>\nI also wondered whether <code>zify</code> could be largely implemented in a macro (one needs a function to create the list of <code>simp only</code> lemmas, but apart from that the macro system might be able to do everything <code>zify</code> needs.<br>\nFinally, how do you debug meta code? I came up with the bad code below, it does not work and I have no idea how to find out what I am doing wrong.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.NormCast</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.ZifyAttr</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Meta</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Elab</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Elab.Command</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Elab.Tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Parser.Tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Std</span>\n\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">zify'</span><span class=\"o\">)</span> <span class=\"s2\">\"zify'\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">hasZifyAttr</span> <span class=\"o\">(</span><span class=\"n\">declName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"n\">return</span> <span class=\"n\">zifyAttr.hasTag</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"n\">declName</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">getZifyAttr</span> <span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">zifyAttr.ext.getState</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">toList</span>\n\n<span class=\"kd\">@[zify]</span> <span class=\"kd\">lemma</span> <span class=\"n\">eq_iff_coe</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">liftToZ</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">SimpTheorems</span> <span class=\"o\">:=</span> <span class=\"n\">default</span>\n    <span class=\"k\">let</span> <span class=\"n\">zifyList</span> <span class=\"bp\">←</span> <span class=\"n\">getZifyAttr</span>\n    <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">s.addConst</span> <span class=\"n\">zifyList</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">!</span>\n    <span class=\"k\">let</span> <span class=\"n\">simpThmsArray</span> <span class=\"o\">:</span> <span class=\"n\">SimpTheoremsArray</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mkEmpty</span> <span class=\"mi\">1</span>\n    <span class=\"k\">let</span> <span class=\"n\">simpCtx</span> <span class=\"o\">:</span> <span class=\"n\">Simp.Context</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">simpTheorems</span> <span class=\"o\">:=</span> <span class=\"n\">simpThmsArray.push</span> <span class=\"n\">s</span><span class=\"o\">}</span>\n    <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">simpAll</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span><span class=\"o\">)</span> <span class=\"n\">simpCtx</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">replaceMainGoal</span> <span class=\"o\">[]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">replaceMainGoal</span> <span class=\"o\">[</span><span class=\"n\">mvarId</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[tactic zify']</span> <span class=\"kd\">def</span> <span class=\"n\">evalZify'</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">zify'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"n\">liftToZ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">zify'</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>\n<p>and the contents of <code>ZifyAttr.lean</code> are</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">initialize</span> <span class=\"n\">zifyAttr</span> <span class=\"o\">:</span> <span class=\"n\">TagAttribute</span> <span class=\"bp\">←</span> <span class=\"n\">registerTagAttribute</span> <span class=\"bp\">`</span><span class=\"n\">zify</span> <span class=\"s2\">\"simple user defined attribute\"</span>\n</code></pre></div>",
        "id": 302981187,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1665217427
    },
    {
        "content": "<blockquote>\n<p>Is there a function that I can call for creating a SimpContext that behaves as a simp only? This sounds rather useful, but I could not find it.</p>\n</blockquote>\n<p>Yes, see the <code>mkSimpContext</code> function. Depending on what you are doing you may either want to call that function directly or do something similar to its implementation</p>",
        "id": 302981949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665217959
    },
    {
        "content": "<p>this is almost what I am looking for, but I was searching for a version without the elaboration parts. I don't think it is the correct way to write the syntax and then elaborate it. To me it seems there has to be version of <code>mkSimpContext</code>, which takes an inductive datatype that carries all the information that is in the syntax variable (minus the config) and the <code>SimpContext</code> created by <code>elabSimpArgs</code>.</p>",
        "id": 302990058,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1665222362
    },
    {
        "content": "<p>I am probably overcomplicating things, because I don't understand the logic behind the code, but my feeling is that <code>mkSimpContext</code> should not mix up the elaboration with the creation of the <code>SimpContext</code></p>",
        "id": 302990290,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1665222487
    },
    {
        "content": "<p>Moritz, I think the code for PushNeg should be a relatively simple example of the kind of thing you want to do.</p>",
        "id": 303031091,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1665241674
    },
    {
        "content": "<p>I finally have time again to work on this and I actually managed to get my initial attempt to work, but now I am stuck with the <code>push_cast</code> step.<br>\nIn Lean 3 this works fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(((</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">push_cast</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>whereas the analogue in Lean 4 does not:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(((</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">push_cast</span>\n</code></pre></div>\n<p>This is probably just a matter of the corresponding lemma not existing yet in mathlib4 with the <code>norm_cast</code> attribute, but this really hinders me in testing the tactic. Should I PR the tactic for now as it is and we add the more serious tests once the corresponding lemmas are available or should I just sit on it for now? I don't really have the time to get into the porting business.</p>",
        "id": 305646229,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1666521199
    },
    {
        "content": "<p>it seems to work fine for me, although you have to use <code>rfl</code> at the end if you want it to actually close the goal</p>",
        "id": 305646965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666521678
    },
    {
        "content": "<p>ah this also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">zify'</span>\n  <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>(and my <code>zify'</code> does not have the <code>push_cast</code> step in yet)</p>",
        "id": 305647524,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1666522048
    },
    {
        "content": "<p>this seems to be a difference between mathlib3 and 3 for some automatic coercions with <code>+ 1</code></p>",
        "id": 305647672,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1666522121
    },
    {
        "content": "<p>maybe my example was really bad since <code>refl</code>/<code>rfl</code> closes the goal anyways</p>",
        "id": 305647927,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1666522286
    },
    {
        "content": "<p>well, <code>with_reducible rfl</code> fails before and succeeds after so clearly it did something</p>",
        "id": 305651947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666524729
    },
    {
        "content": "<p>I don't actually know what issue you are hitting</p>",
        "id": 305651979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666524754
    },
    {
        "content": "<p>I've looked up what Rob wrote for the differences between <code>simp only zify push_cast</code> and <code>zify</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">`</span><span class=\"n\">zify</span><span class=\"bp\">`</span> <span class=\"n\">is</span> <span class=\"n\">very</span> <span class=\"n\">nearly</span> <span class=\"n\">just</span> <span class=\"bp\">`</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"k\">with</span> <span class=\"n\">zify</span> <span class=\"n\">push_cast</span><span class=\"bp\">`.</span> <span class=\"n\">There</span> <span class=\"n\">are</span> <span class=\"n\">a</span> <span class=\"n\">few</span> <span class=\"n\">minor</span> <span class=\"n\">differences</span><span class=\"o\">:</span>\n<span class=\"bp\">*</span> <span class=\"bp\">`</span><span class=\"n\">zify</span><span class=\"bp\">`</span> <span class=\"n\">lemmas</span> <span class=\"n\">are</span> <span class=\"n\">used</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">opposite</span> <span class=\"n\">order</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">standard</span> <span class=\"n\">simp</span> <span class=\"n\">form.</span>\n  <span class=\"n\">E.g.</span> <span class=\"n\">we</span> <span class=\"n\">will</span> <span class=\"n\">rewrite</span> <span class=\"k\">with</span> <span class=\"bp\">`</span><span class=\"n\">int.coe_nat_le_coe_nat_iff</span><span class=\"bp\">`</span> <span class=\"k\">from</span> <span class=\"n\">right</span> <span class=\"n\">to</span> <span class=\"n\">left.</span>\n<span class=\"bp\">*</span> <span class=\"bp\">`</span><span class=\"n\">zify</span><span class=\"bp\">`</span> <span class=\"n\">should</span> <span class=\"n\">fail</span> <span class=\"k\">if</span> <span class=\"n\">no</span> <span class=\"bp\">`</span><span class=\"n\">zify</span><span class=\"bp\">`</span> <span class=\"kd\">lemma</span> <span class=\"n\">applies</span> <span class=\"o\">(</span><span class=\"n\">i.e.</span> <span class=\"n\">it</span> <span class=\"n\">was</span> <span class=\"n\">unable</span> <span class=\"n\">to</span> <span class=\"n\">shift</span> <span class=\"n\">any</span> <span class=\"n\">proposition</span> <span class=\"n\">to</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n  <span class=\"n\">However</span><span class=\"o\">,</span> <span class=\"n\">once</span> <span class=\"n\">this</span> <span class=\"n\">succeeds</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">necessarily</span> <span class=\"n\">need</span> <span class=\"n\">to</span> <span class=\"n\">rewrite</span> <span class=\"k\">with</span> <span class=\"n\">any</span> <span class=\"bp\">`</span><span class=\"n\">push_cast</span><span class=\"bp\">`</span> <span class=\"n\">rules.</span>\n</code></pre></div>\n<p>(from <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/zify.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/tactic/zify.lean</a> )</p>\n<p>As discussed yesterday night, the first point is a complete non-issue (actually the lemmas are in the correct form in mathlib4). For the second point I think this is not too important and if it is at all addressed then maybe as an extension to <code>simp</code>, i.e., introduce a modifier to a <code>simp_attribute</code> such that <code>simp</code> fails if no lemma corresponding to that attribute gets applied; something along the lines of <code>simp only zify! push_cast</code> fail if no <code>zify</code>-tagged lemmas gets applied, but does not care whether <code>push_cast</code>-lemmas get used.</p>\n<p>For now are there any objections to PR <code>zify</code> as a macro for <code>simp only zify push_cast</code>?</p>",
        "id": 306587677,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1666936837
    },
    {
        "content": "<p>Ok, I've run into another problem: the additional <code>simpArgs</code> and I have no idea how to combine them with <code>[zifyArgs, push_cast]</code> in a macro. <br>\nThis does obviously not work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.NormCast</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.ZifyAttr</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Parser.Tactic</span>\n\n<span class=\"sd\">/-- tbw-/</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">zify</span><span class=\"o\">)</span> <span class=\"s2\">\"zify\"</span> <span class=\"o\">(</span><span class=\"n\">simpArgs</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">zify</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">zifyAttr</span><span class=\"o\">,</span> <span class=\"n\">push_cast</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">zify</span> <span class=\"bp\">$</span><span class=\"n\">simpArgs</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">zifyAttr</span><span class=\"o\">,</span> <span class=\"n\">push_cast</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">append</span> <span class=\"bp\">$</span><span class=\"n\">simpArgs</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 306606349,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1666946301
    },
    {
        "content": "<p>I've looked into mathlib and this feature is never used (<code>zify</code> itself is not used that often), so there is also the question whether to port it at all</p>",
        "id": 306606677,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1666946413
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">zify</span> <span class=\"bp\">$</span><span class=\"o\">[[</span><span class=\"bp\">$</span><span class=\"n\">simpArgs</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">]]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"n\">simpArgs.map</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">getElems</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">getD</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">zifyAttr</span><span class=\"o\">,</span> <span class=\"n\">push_cast</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 306610615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666947854
    },
    {
        "content": "<p>As per request by Scott, I have had a look at plumbing <code>zify</code> to <code>linarith</code>. My plan is to create a custom <code>Simp.Context</code> and then use <code>simpLocation</code> to do the simplifying and later worry about how that gets put into <code>linarith</code>'s <code>GlobalPreprocessor</code>. If this is the wrong approach for any reasons please let me know.<br>\nI have started with the <code>Simp.Context</code> and this is what I came up with. I want to get rid of the syntax altogether, but I have no idea how to put \"[zify_simps, push_cast]\" there instead. I vague remember that there was a cheatsheet for that, but I could not find it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Zify</span>\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Tactic.Zify</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Meta</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Parser.Tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Elab.Tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Elab.Tactic.Simp</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mkZifyContext</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Simp.Context</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">simpTheorems</span> <span class=\"bp\">←</span> <span class=\"n\">simpOnlyBuiltins.foldlM</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">addConst</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">({}</span> <span class=\"o\">:</span> <span class=\"n\">SimpTheorems</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">congrTheorems</span> <span class=\"bp\">←</span> <span class=\"n\">getSimpCongrTheorems</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">elabSimpArgs</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">eraseLocal</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">kind</span> <span class=\"o\">:=</span> <span class=\"n\">SimpKind.simp</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">config</span>      <span class=\"o\">:=</span> <span class=\"o\">{}</span><span class=\"c1\">--(← elabSimpConfigCore stx[1])</span>\n    <span class=\"n\">simpTheorems</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">simpTheorems</span><span class=\"o\">],</span> <span class=\"n\">congrTheorems</span>\n  <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"o\">:=</span> <span class=\"n\">r.ctx</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">simpTheorems</span> <span class=\"o\">:=</span> <span class=\"n\">ctx.simpTheorems</span>\n  <span class=\"k\">let</span> <span class=\"n\">hs</span> <span class=\"bp\">←</span> <span class=\"n\">getPropHyps</span>\n  <span class=\"n\">for</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"n\">hs</span> <span class=\"k\">do</span>\n    <span class=\"n\">unless</span> <span class=\"n\">simpTheorems.isErased</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">fvar</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n      <span class=\"n\">simpTheorems</span> <span class=\"bp\">←</span> <span class=\"n\">simpTheorems.addTheorem</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">fvar</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">h.getDecl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toExpr</span>\n  <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">ctx</span> <span class=\"k\">with</span> <span class=\"n\">simpTheorems</span> <span class=\"o\">}</span>\n  <span class=\"n\">return</span> <span class=\"n\">ctx</span>\n</code></pre></div>",
        "id": 310543008,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1668658836
    },
    {
        "content": "<p>and in the unlikely case that this is the correct approach, should I factor out the later part of that function to not duplicate code from <code>mkSimpContext</code>?</p>",
        "id": 310543187,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1668658978
    },
    {
        "content": "<p>what is <code>stx</code> here?</p>",
        "id": 310543692,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668659299
    },
    {
        "content": "<p>it came from <code>mkSimpContext</code>, but this is the part I want to get rid of</p>",
        "id": 310543748,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1668659331
    },
    {
        "content": "<p>okay but what is it?</p>",
        "id": 310543759,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668659339
    },
    {
        "content": "<p>this code has no entry point</p>",
        "id": 310543779,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668659350
    },
    {
        "content": "<p>I'm not clear on why you can't just call <code>mkSimpContext</code> with the <code>simp</code> syntax from before</p>",
        "id": 310543876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668659413
    },
    {
        "content": "<p>yes that would work as well</p>",
        "id": 310543958,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1668659508
    },
    {
        "content": "<p>and it is probably better</p>",
        "id": 310544006,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1668659531
    },
    {
        "content": "<p>but then I still have the same question on how to get the syntax</p>",
        "id": 310544038,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1668659562
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/zify/near/306610615\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">zify</span> <span class=\"bp\">$</span><span class=\"o\">[[</span><span class=\"bp\">$</span><span class=\"n\">simpArgs</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">]]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"n\">simpArgs.map</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">getElems</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">getD</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">zifyAttr</span><span class=\"o\">,</span> <span class=\"n\">push_cast</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">at</span> <span class=\"bp\">$</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>\n</blockquote>\n<p>?</p>",
        "id": 310545631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668661145
    },
    {
        "content": "<p>I only want to get the <code>Simp.Context</code> not the full tactic. If it is possible to somehow use the tactic directly in <code>linarith</code> I would be happy, but I don't know that could work</p>",
        "id": 310546204,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1668661686
    },
    {
        "content": "<p>If you call <code>mkSimpContext</code> with <code>&lt;- `(tactic| simp only [zifyAttr, push_cast, $args,*] $[at $location]?)</code> as argument, <code>simp</code> will not be run</p>",
        "id": 310546236,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668661726
    }
]