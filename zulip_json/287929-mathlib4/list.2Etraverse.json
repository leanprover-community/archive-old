[
    {
        "content": "<p>In mathlib3 we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.traverse\">docs#list.traverse</a> defined in <code>data.list.defs</code>. To my surprise there is no <code>Data.List.Defs</code> in mathlib4 even though there is plenty of list stuff, which makes me think that <code>Data.List.Defs</code> is somehow being subsumed by other files. But I can't find <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.traverse#doc\">docs4#List.traverse</a> . It's not hard to write -- but where do I put it?</p>",
        "id": 313025399,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669803533
    },
    {
        "content": "<p>PS looking up what mathlib3port has to say about the matter I see there's a dubious translation claim:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> warning: list.traverse -&gt; List.traverse is a dubious translation:</span>\n<span class=\"cm\">lean 3 declaration is</span>\n<span class=\"cm\">  forall {F : Type.{u} -&gt; Type.{v}} [_inst_1 : Applicative.{u v} F] {α : Type.{u_1}} {β : Type.{u}}, (α -&gt; (F β)) -&gt; (List.{u_1} α) -&gt; (F (List.{u} β))</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  forall {F : Type.{u} -&gt; Type.{v}} [_inst_1 : Applicative.{u v} F] {α : Type.{_aux_param_0}} {β : Type.{u}}, (α -&gt; (F β)) -&gt; (List.{_aux_param_0} α) -&gt; (F (List.{u} β))</span>\n<span class=\"cm\">Case conversion may be inaccurate. Consider using '#align list.traverse List.traverseₓ'. -/</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">traverse</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Applicative</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.cons</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">traverse</span> <span class=\"n\">xs</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">list.traverse</span> <span class=\"n\">List.traverse</span>\n</code></pre></div>\n<p>But the only thing dubious about that translation is that a universe seems to have an exotic name in the Lean 4 version. Is this somehow telling me that there might be universe unification issues with this declaration in Lean 4?</p>",
        "id": 313025829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669803695
    },
    {
        "content": "<p>This doesn't look dubious, and it being flagged as such is probably a bug in mathport.<br>\nSimilar to <a href=\"#narrow/stream/287929-mathlib4/topic/why.20dubious.3F\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/why.20dubious.3F</a></p>",
        "id": 313034236,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669806564
    },
    {
        "content": "<p>I think making a <code>Data.List.Defs</code> makes sense. Maybe there is some other stuff in that file that isn't already in Lean 4.</p>",
        "id": 313034498,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669806645
    },
    {
        "content": "<p>OK I'll add the new file and make a note that it's not an actual port.</p>",
        "id": 313034893,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669806792
    },
    {
        "content": "<p>I'm on <code>Data.List.Defs</code></p>",
        "id": 313106838,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669827737
    },
    {
        "content": "<p>It's going slowly -- most of it is <code>#align</code> statements to map to the right files in <code>Std4</code></p>",
        "id": 313106945,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669827762
    },
    {
        "content": "<p>Oh nice! I'd just started looking at this and was trying to work out whether it was suitable for me. Did you open a PR? If so then I can link to it and move onto something else. Thanks for letting me know!</p>",
        "id": 313109550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669828531
    },
    {
        "content": "<p>I haven't PRd yet -- wanted to get the thing into shape. Will do shortly and post the PR here.</p>",
        "id": 313111466,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669829035
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/804\">mathlib4#804</a></p>\n<p>Lots of odd type errors to fix and need to double check <code>#align</code>s</p>",
        "id": 313116717,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669830541
    },
    {
        "content": "<p>I had a suspicion on what is causing the issue, and it turns out to be correct. Here's the new output from mathport on this example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> warning: list.traverse -&gt; List.traverse is a dubious translation:</span>\n<span class=\"cm\">lean 3 declaration is</span>\n<span class=\"cm\">  forall {F : Type.{u1} -&gt; Type.{u2}} [_inst_1 : Applicative.{u1, u2} F] {α : Type.{u3}} {β : Type.{u1}}, (α -&gt; (F β)) -&gt; (List.{u3} α) -&gt; (F (List.{u1} β))</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  forall {F : Type.{u2} -&gt; Type.{u3}} [_inst_1 : Applicative.{u2, u3} F] {α : Type.{u1}} {β : Type.{u2}}, (α -&gt; (F β)) -&gt; (List.{u1} α) -&gt; (F (List.{u2} β))</span>\n<span class=\"cm\">Case conversion may be inaccurate. Consider using '#align list.traverse List.traverseₓ'. -/</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">traverse</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Applicative</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.cons</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">traverse</span> <span class=\"n\">xs</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">list.traverse</span> <span class=\"n\">List.traverse</span>\n</code></pre></div>\n<p>I said before that it matches the types modulo universe names, but that's not quite correct. Actually it has a specific order of universe parameters in mind, but the universes are being named different things. The names of the universes don't matter but the order of arguments is important and will cause type mismatches if they are messed up.</p>\n<p>In the output above, universe names are overwritten with their ordinal positions in the list of universes. So <code>u1</code> is the first universe in the list, <code>u2</code> is the second and so on. (Also bound variable names have been normalized to match to make diffing easier.)</p>\n<p>We can now see the issue clearly: There are three universes involved, corresponding to the named universes <code>u</code> and <code>v</code> in <code>F</code> and the unnamed universe which is the type of <code>α</code>. In Lean 3, this resulted in the list <code>[u, v, u_1]</code> where <code>u_1</code> is the anonymous universe, and in lean 4 it results in <code>[_aux_param_0, u, v]</code> where <code>_aux_param_0</code> is the anonymous universe. Note that the order is different, and this causes the mismatch.</p>",
        "id": 313206118,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669872027
    },
    {
        "content": "<p>Aah so this really is a dubious translation!</p>",
        "id": 313220798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669881089
    },
    {
        "content": "<p>Is there a porting hint to fix the output from <code>mathport</code> or does this not have implications for downstream code?</p>",
        "id": 313315893,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669911309
    },
    {
        "content": "<p>I <em>suspect</em> that this will have implications for downstream code if and only if there is an instance in mathlib3 of someone using explicit universe annotations with <code>traverse</code>. Do you know what, I suspect that you could probably actually get the universes right; I think it's just a case of variables being declared in the wrong order. But changing variable order might cause problems in other places. And searching for <code>traverse.{</code> gives 0 results in mathlib (if someone was explicitly giving universes to the function then it would look like <code>traverse.{u v w}</code>) so I suspect that you should just leave a porting note saying that universes are now in a different order and just leave it at that. It happens for <code>List.traverse</code> and <code>Sum.traverse</code> I think.</p>",
        "id": 313322601,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669913092
    },
    {
        "content": "<p>I think I <code>#align</code>d away most of the defs that had this issue, but I'll double check.</p>",
        "id": 313324836,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669913681
    },
    {
        "content": "<p>In category theory, though, explicit universe levels are passed a lot and it would be better to try not to change the order, if it's just a matter of being a bit careful with <code>variables</code> and such.</p>",
        "id": 313326385,
        "sender_full_name": "Reid Barton",
        "timestamp": 1669914083
    },
    {
        "content": "<p>Where by \"category theory\", I mean <code>category_theory/</code>.</p>",
        "id": 313326451,
        "sender_full_name": "Reid Barton",
        "timestamp": 1669914103
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> because Reid's comment made me paranoid I thought I would revisit this. You posted the new output from mathport on <code>List.traverse</code> (which is no longer my problem as it's being ported in a different file) above with no out_param universes in. But in <code>Sum.traverse</code> <a href=\"https://github.com/leanprover-community/mathlib3port/blob/05af919b0719e628e99b58bae61d6af952ec2f83/Mathbin/Control/Traversable/Basic.lean#L282-L289\">here</a> it's still reporting a possibly dubious translation, the universes look to match up, we still have out_param universes, and it's hard for me to tell whether there is still an issue with the translation or not because I don't know how to tell whether the order of the universes has been swapped. Do I just ignore and continue or is there still a possibility that something here is dubious?</p>",
        "id": 313705787,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670083050
    },
    {
        "content": "<p>I think I didn't update mathport to use the <code>u1, u2</code> style yet, that example above was only my local copy. But I did hunt down where these weird <code>_aux_param_0</code> universes are coming from and it is actually a bug in lean 3, see <a href=\"https://github.com/leanprover-community/lean/pull/788\">lean#788</a>. The issue is that we are actually aligning <code>sum.traverse._main</code> to <code>Sum.traverse</code> (because lean 3 generates this useless extra definition when you use the equation compiler and lean 4 doesn't), but even just aligning <code>sum.traverse._main</code> to <code>sum.traverse</code> is dubious because the <code>_main</code> definition uses an <code>_aux_param_0</code> universe and puts it at the start, while <code>sum.traverse</code> uses <code>u_1</code> and puts it at the end.</p>",
        "id": 313752005,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670117146
    },
    {
        "content": "<p>That is all to say that there is still a bug in generating these definitions that causes the translations to be dubious. You know you are in this case if you see a reference to <code>_aux_param_0</code> in the dubious translation message. For now, you should handle this like other implicit reorderings: add an <code>#align</code> with <code>\\_x</code>, and mention in the comment that this is about reordered universes.</p>",
        "id": 313752221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670117395
    },
    {
        "content": "<p>But I checked the order of the universes in <code>sum.traverse</code> and <code>Sum.traverse</code> and they were in the same order</p>",
        "id": 313781051,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670144672
    },
    {
        "content": "<p>Did you check <code>sum.traverse._main</code>?</p>",
        "id": 313787660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670148695
    },
    {
        "content": "<p>No. But why is that relevant if <code>Sum.traverse</code> is going to be aligned with <code>sum.traverse</code>?</p>",
        "id": 313787996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670148904
    },
    {
        "content": "<p>lol </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">sum.traverse.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">applicative.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">},</span>\n    <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">σ</span> <span class=\"bp\">⊕</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"n\">sum.traverse._main.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">applicative.</span><span class=\"o\">{</span><span class=\"n\">u_2</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">},</span>\n    <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">σ</span> <span class=\"bp\">⊕</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>So you're absolutely right: the universes get switched! But as I say, this shouldn't matter I guess, because <code>traverse._main</code> isn't ever used in mathlib, and the universes for Lean 3 <code>sum.traverse</code> and the Lean 4 <code>Sum.traverse</code> are the same way around, so we align those and everything should be fine.</p>",
        "id": 313963974,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670247174
    },
    {
        "content": "<p>The reason this matters for mathport is because binport performs the translation in declaration order, treating whichever of <code>sum.traverse._main</code> and <code>sum.traverse</code> comes first (and of course <code>sum.traverse._main</code> comes first, since <code>sum.traverse</code> is a wrapper over it). So binport ends up actually just translating <code>sum.traverse._main</code> to <code>Sum.traverse</code> (it needs to use the one that actually has a substantive definition), and then when it gets to <code>sum.traverse</code> it just says \"oh I guess I already translated this\" and moves on. We end up with two definitions that mapped to one, which would be fine if they had the same signature, but...</p>",
        "id": 314060026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670254185
    },
    {
        "content": "<p>So I can see that <em>in theory</em> there might be a problem, but in practice given that <code>traverse._main</code> never shows up in mathlib and neither does <code>traverse.{</code> I suspect that we can just not worry about this. Right? Or am I missing something?</p>",
        "id": 314114809,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670270630
    },
    {
        "content": "<p>You are free to align with <code>\\_x</code>, but if you align it directly it will cause failures in binport and the usual degradation of output. I have some ideas for how to fix mathport so that it uses the signature of <code>sum.traverse</code> instead of <code>sum.traverse._main</code> as the source of truth, but it hasn't been implemented yet.</p>",
        "id": 314115848,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670271043
    }
]