[
    {
        "content": "<p>I tried to update mathlib4 to todays nightly over here: <a href=\"https://github.com/leanprover-community/mathlib4/pull/261/files\">https://github.com/leanprover-community/mathlib4/pull/261/files</a> so I can make use of the new csimp attr doc-gen4 (the doc-gen4 master branch CI also deploys the mathlib4 docs so it would break if mathlib4 isnt nightly compatible...).</p>\n<p>There is a single thing still missing which is that right now here: <a href=\"https://github.com/leanprover-community/mathlib4/blob/87ed85b650faf850847f5416821e80f3066f302e/Mathlib/Tactic/RCases.lean#L521\">https://github.com/leanprover-community/mathlib4/blob/87ed85b650faf850847f5416821e80f3066f302e/Mathlib/Tactic/RCases.lean#L521</a> <code>ty</code> is already an <code>Option Syntax</code> since Lean now implicity calls <code>.getOptional</code> onto the optional argument. And I'm basically not exactly sure on what to do with it now. Does someone know? Maybe <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> since you are the author of it?</p>",
        "id": 279167165,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1650113688
    },
    {
        "content": "<p>The first parameter is just the span for error messages. So something like this should do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">rintro</span><span class=\"o\">)</span> <span class=\"n\">tk</span><span class=\"o\">:</span><span class=\"s2\">\"rintro\"</span> <span class=\"n\">pats</span><span class=\"o\">:(</span><span class=\"n\">ppSpace</span> <span class=\"n\">colGt</span> <span class=\"n\">rintroPat</span><span class=\"o\">)</span><span class=\"bp\">+</span> <span class=\"n\">ty</span><span class=\"o\">:(</span><span class=\"s2\">\" : \"</span> <span class=\"n\">term</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ty</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">ty.map</span> <span class=\"o\">(</span><span class=\"n\">Syntax.getOp</span> <span class=\"bp\">·</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"n\">replaceMainGoal</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">RCases.rintro</span> <span class=\"o\">(</span><span class=\"n\">ty.getD</span> <span class=\"n\">tk</span><span class=\"o\">)</span> <span class=\"n\">pats</span> <span class=\"n\">ty</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 279177072,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1650128680
    },
    {
        "content": "<p>Ah that did the trick yes...unfortunately now all the other tactics start blowing up as well xD, I'll see how far I get^^</p>",
        "id": 279177882,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1650129875
    },
    {
        "content": "<p>Hmm, the new errors go beyond my rather limited experience in meta world, I think it would be better if $someone else who knows what they are doing takes over there since I don't wanna break anything. (I pushed what I have to the PR)</p>",
        "id": 279178258,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1650130527
    },
    {
        "content": "<p>I fixed up the PR. One thing to keep in mind regarding the new behavior of <code>?</code> in <code>elab</code> args: <code>getOptional?</code> is a <em>lossy operation</em> when used on a parser that produces multiple syntax nodes. So it will almost always have to be disabled in such cases, by using an extra set of parentheses. For example, the <code>rintro</code> code above is incorrect, it should be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">rintro</span><span class=\"o\">)</span> <span class=\"s2\">\"rintro\"</span> <span class=\"n\">pats</span><span class=\"o\">:(</span><span class=\"n\">ppSpace</span> <span class=\"n\">colGt</span> <span class=\"n\">rintroPat</span><span class=\"o\">)</span><span class=\"bp\">+</span> <span class=\"n\">ty</span><span class=\"o\">:((</span><span class=\"s2\">\" : \"</span> <span class=\"n\">term</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ty</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">ty.map</span> <span class=\"o\">(</span><span class=\"n\">Syntax.getOp</span> <span class=\"bp\">·</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"n\">replaceMainGoal</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">RCases.rintro</span> <span class=\"n\">ty</span> <span class=\"n\">pats</span> <span class=\"n\">ty</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>which is the same as before except that it uses <code>ty:((\" : \" term)?)</code> instead of <code>ty:(\" : \" term)?</code>. Using the latter will silently always return <code>none</code>.</p>",
        "id": 279259724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1650259417
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> This is arguably a bug in <code>getOptional?</code>. I would suggest that it returns the syntax unchanged wrapped in <code>some</code> if the node has more than one child. (I know that you think multi-arg optional nodes should not exist, but I would really like things like <code>(\" : \" term)?</code> to Just Work and not need additional wrappers because this is a common case.)</p>",
        "id": 279259933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1650259750
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> That would \"fix\" this use case, yes. But I think <code>$[...]?</code> splices would still misbehave. I'm starting to believe that there is no way around tracking parser \"arity\" (number of produced nodes) in <code>ParserDescr</code>; I tried before for <code>Parser</code> and gave up because some coercions didn't quite work out, but for <code>ParserDescr</code> we have full control over the translation from <code>stx</code>. Then we could automatically insert the group around <code>\" : \" term</code>.</p>",
        "id": 279511877,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1650442775
    },
    {
        "content": "<p>And I wouldn't really be satisfied with <code>ty:(\" : \" term)?</code> either, as it can further be analyzed only by indexing, not via syntax patterns. It would also be problematic for a type-safe representation of syntax. I assume <code>(\" : \" ty:term)?</code> would be strictly more helpful, but that's not quite trivial to implement...</p>",
        "id": 279512316,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1650443054
    }
]