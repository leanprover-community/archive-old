[
    {
        "content": "<p>We don't have <code>refineStruct</code> yet, is it fine to do something like that in the meantime?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CompleteBooleanAlgebra</span> <span class=\"n\">PUnit</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span>\n    <span class=\"o\">{</span> <span class=\"n\">PUnit.booleanAlgebra</span> <span class=\"k\">with</span>\n      <span class=\"n\">supₛ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unit</span>\n      <span class=\"n\">infₛ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unit</span>\n      <span class=\"n\">le_supₛ</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">supₛ_le</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">infₛ_le</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">le_infₛ</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">inf_supₛ_le_sup</span><span class=\"bp\">ᵢ</span><span class=\"n\">_inf</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">inf</span><span class=\"bp\">ᵢ</span><span class=\"n\">_sup_le_sup_infₛ</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">}</span> <span class=\"bp\">&lt;;&gt;</span>\n  <span class=\"n\">intros</span> <span class=\"bp\">&lt;;&gt;</span>\n  <span class=\"n\">first</span><span class=\"bp\">|</span><span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 316754349,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1671459613
    },
    {
        "content": "<p>I also need <code>refine_struct</code> for the port of <code>algebra.hom.aut</code> and have the same question.</p>",
        "id": 316792570,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1671470463
    },
    {
        "content": "<p>You should currently be able to use e.g. <code>refine’ { s with x := 0, y := 1, .. }</code> if you have no defaults to synthesize!</p>",
        "id": 316795177,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671471315
    },
    {
        "content": "<p>(<code>..</code> notation is currently in core—it just fills all unspecified fields with <code>_</code> instead of naming the goals like <code>refine_struct</code> would.)</p>",
        "id": 316795706,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671471495
    },
    {
        "content": "<p>It's fine to do anything to patch around a broken proof, as long as you put a <code>-- Porting note</code> and try to make it clear how for someone to restore the slick proof later</p>",
        "id": 316802537,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671473759
    }
]