[
    {
        "content": "<p>I'm hoping to get some help using <code>linarith</code> with a custom discharger, cc <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>.  Here is an example in which <code>linarith</code> works, and a custom tactic works for the goal which (AFAICT) the discharger would be run on, but linarith does not work with that discharger.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Abel</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Linarith</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> This works, and according to `set_option trace.linarith true`, the contradiction found is:</span>\n<span class=\"cm\">[linarith] The expression</span>\n<span class=\"cm\">      OfNat.ofNat 4 * -1 + -(t - (4 - s * t)) + (t + s * t)</span>\n<span class=\"cm\">    should be both 0 and negative</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">-</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">abel_nf</span> <span class=\"bp\">;</span> <span class=\"n\">push_cast</span> <span class=\"o\">[</span><span class=\"n\">zsmul_eq_mul</span><span class=\"o\">]</span> <span class=\"bp\">;</span> <span class=\"n\">norm_num1</span><span class=\"o\">)))</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foo</span>\n\n<span class=\"c1\">-- the ad hoc tactic `foo` proves the appropriate expression is 0</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">-</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">foo</span>\n\n<span class=\"c1\">-- but `linarith` fails with `foo` set as the discharger</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">-</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">linarith</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">discharger</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span><span class=\"o\">})</span>\n</code></pre></div>",
        "id": 322824518,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674375650
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> The <code>OfNat.ofNat 4</code> in the trace message seems to be a bad sign, that is a double ofNat expression which should not happen. This is coupled with the fact that <code>foo</code> does not end in <code>; done</code> and it does not close all goals, which apparently causes <code>linarith</code> to drop those goals.</p>",
        "id": 322907996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674421990
    },
    {
        "content": "<p>if you put a <code>; trace_state</code> at the end of <code>foo</code> you will see there is a remaining subgoal after <code>norm_num1</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">st</span><span class=\"o\">:</span> <span class=\"n\">ℚ</span>\n<span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">-</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">t</span>\n<span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">OfNat.ofNat</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 322908106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674422046
    },
    {
        "content": "<p>Is something up with <code>norm_num</code> if it’s leaving a goal like that?</p>",
        "id": 322908237,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674422172
    },
    {
        "content": "<p>Or is this about what’s being fed to <code>norm_num</code>?</p>",
        "id": 322908419,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674422313
    },
    {
        "content": "<p>It's not <code>norm_num</code> doing the ofNat here, it is a function in linarith</p>",
        "id": 322912974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674425739
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1771\">mathlib4#1771</a></p>",
        "id": 322912992,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674425752
    },
    {
        "content": "<p>Thank you, Mario!</p>",
        "id": 322937186,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674446799
    }
]