[
    {
        "content": "<p>I am stuck at a goal that looks like this : <code>↑(fib n) * ↑(fib (1 + n) * 2) + ↑(fib (1 + n)) ^ 2 = ↑(fib n) * ↑(fib (1 + n)) * 2 + ↑(fib (1 + n)) ^ 2</code><br>\nThe only hiccup is to rewrite using a rule that would say<code>↑(fib (1 + n) * 2) = ↑(fib (1 + n)) * 2</code></p>",
        "id": 322185833,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674091941
    },
    {
        "content": "<p>But I can't find any coercion theorems which say that coercing Nats to Ints does not change their product.</p>",
        "id": 322185868,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674091974
    },
    {
        "content": "<p><code>ring</code> won't resolve this  (the variants <code>ring!</code> and the lean4 suggested <code>ring_nf</code> and <code>ring_nf!</code> did not resolve this either). Maybe that is reasonable. But it seems intuitively clear that coercing <code>Nat</code> to <code>Int</code> does not change their product.</p>",
        "id": 322186016,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674092127
    },
    {
        "content": "<p>The PR  in question: <a href=\"https://github.com/leanprover-community/mathlib4/pull/1644\">mathlib4#1644</a><br>\nSee theorem <code>fib_bit1_succ</code> on line <code>188</code> in  the latest commit on this branch</p>",
        "id": 322186247,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674092299
    },
    {
        "content": "<p>what about <code>norm_cast</code> or <code>zify</code>?</p>",
        "id": 322186267,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674092330
    },
    {
        "content": "<p>zify seems to be the cause. I got rid of most issues zify introduced by coercing subtractions.</p>",
        "id": 322186290,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674092351
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466334\">@Shreyas Srinivas</span> There are a lot of bugs in <code>zify</code>; you can basically expect it not to work until they are fixed.</p>",
        "id": 322186533,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674092540
    },
    {
        "content": "<p><a href=\"#narrow/stream/287929-mathlib4/topic/zify.20bugs.3F\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/zify.20bugs.3F</a></p>",
        "id": 322186546,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674092553
    },
    {
        "content": "<p>(It would be great if someone wanted to work on them .... <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> )</p>",
        "id": 322186564,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674092582
    },
    {
        "content": "<p>applying <code>zify</code> again followed by <code>simp</code> produced the following goal : <code>↑(fib n) * (↑(fib (1 + n)) * ↑2) = ↑(fib n) * ↑(fib (1 + n)) * 2</code></p>",
        "id": 322186570,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674092587
    },
    {
        "content": "<p>You might like to check whether zify works for the same goal in mathlib3.</p>",
        "id": 322186597,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674092623
    },
    {
        "content": "<p>Yeah it worked there.</p>",
        "id": 322186610,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674092634
    },
    {
        "content": "<p>Can you narrow that down to a self-contained test case and add it to the thread on zify bugs?</p>",
        "id": 322186674,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674092656
    },
    {
        "content": "<p>But in this case, all I am missing is something that can rewrite <code>↑2</code> to <code>2</code></p>",
        "id": 322186681,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674092665
    },
    {
        "content": "<p>Ah, that sounds like the same as the second zify bug listed on Rob's post.</p>",
        "id": 322186707,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674092691
    },
    {
        "content": "<p>update :  I got around it</p>",
        "id": 322186823,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674092775
    },
    {
        "content": "<p>Please add a porting note with a reference to the thread on zify bugs.</p>",
        "id": 322186848,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674092803
    },
    {
        "content": "<p>Or, better, the corresponding issue: <a href=\"https://github.com/leanprover-community/mathlib4/pull/1576\">mathlib4#1576</a></p>",
        "id": 322186883,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674092839
    },
    {
        "content": "<p>okay I will link it there. Basically I applied a sequence of <code>simp</code> operations more <code>zify</code> and , an <code>rw</code> with <code>mul_assoc</code></p>",
        "id": 322187128,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674093009
    },
    {
        "content": "<p>and it got sorted</p>",
        "id": 322187141,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674093019
    },
    {
        "content": "<p>A fix like that is definitely the right move for now, but since we used to have automation for this kind of proof, we want to record it so that we don't lose it permanently.</p>",
        "id": 322187290,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674093170
    },
    {
        "content": "<p>My best guess (based on my example)  is that either  zify only looks at the first one or two levels of the expression tree or it does not try enough coe + arithmetic theorems.  It seems that in lean 3, it can ensure that where possible, the up arrow is attached to the innermost possible expression (past all the arithmetic operations). I don't know if this is because of the changes in behaviour of coercions that I have read about often, between lean 3 and 4, or just a bug somewhere.</p>",
        "id": 322187679,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674093526
    },
    {
        "content": "<p>without my applying the  theorem<code>Int.coe_nat_sub</code>, <code>zify</code> was not even pushing past the top level arithmetic.</p>",
        "id": 322187862,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674093691
    },
    {
        "content": "<p>If you have time, can you please make a self-contained test case for your example?  It would be nice to know whether there are any new bugs appearing in your example or whether this is a repeat of the previously-reported ones.</p>",
        "id": 322188237,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674093986
    },
    {
        "content": "<p>This work is just as important as porting!</p>",
        "id": 322188311,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674094071
    },
    {
        "content": "<p>I have a guess : lean3 <code>zify</code> looks for all <code>norm_cast</code> lemmas ( guess based on  the line in the tactic def<code>(z2, p2) ← norm_cast.derive_push_cast extra_lems z1,</code>). </p>\n<p>lean4 <code>zify</code> doesn't seem to include <code>norm_cast</code> lemmas for some reason.</p>",
        "id": 322189239,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674094897
    },
    {
        "content": "<p>A large number of lemmas in <code>Data.Int.Cast...</code> seem to be tagged with <code>norm_cast</code>.</p>",
        "id": 322189326,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674094954
    },
    {
        "content": "<p>all the <code>coe_...</code> lemmas in <code>Data.Int.Basic</code> also seem to be tagged with <code>norm_cast</code> including the ones I used</p>",
        "id": 322189722,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674095288
    },
    {
        "content": "<p>I can't be 100% sure these lemmas are not being summoned indirectly somewhere else, but seeing as I had to apply them explicitly in lean4 while they were taken care of by lean3's <code>zify</code>, it seems like a reasonable guess.</p>",
        "id": 322189919,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674095496
    },
    {
        "content": "<p>Here's a simplified example to debug <code>zify</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.LinearCombination</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Zify</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Int.Cast.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Int.Cast.Lemmas</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- works in lean 3</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">attempt_1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">zify</span>\n  <span class=\"n\">ring</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">attempt_2</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">zify</span>\n  <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">Int.coe_nat_sub</span><span class=\"o\">]</span>\n  <span class=\"n\">ring</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">attempt_3</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">zify</span>\n  <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">Int.coe_nat_sub</span><span class=\"o\">]</span>\n  <span class=\"n\">ring_nf</span><span class=\"bp\">!</span>\n  <span class=\"n\">zify</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Int.mul_assoc</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">apply</span> <span class=\"n\">p</span>\n</code></pre></div>",
        "id": 322191088,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674096436
    },
    {
        "content": "<p>About the PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/1644\">mathlib4#1644</a> : </p>\n<ol>\n<li>There are 3 syntax errors in tactic code. I am not confident about debugging these parts. </li>\n<li>There are 3 other errors : one error each with attributes <code>@[mono]</code>,  <code>@[pp_nodot]</code> and <code>@[norm_num]</code>.<br>\n     2 a) <code>@[mono]</code> and <code>@[pp_nodot]</code> don't  seem to be valid names (perhaps there are imports for these). <br>\n     2 b) <code>@[norm_num]</code> on some <code>unsafe def</code> which requires extra terms, probably the function that is being implemented.</li>\n</ol>",
        "id": 322191681,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674096963
    },
    {
        "content": "<p><code>@[mono]</code> is an attribute for a tactic <code>mono</code> that isn't implemented yet.  Comment it and add a porting note.</p>\n<p>The declaration tagged with <code>@[norm_num]</code> is a tactic.  You can comment this whole section out (leave a porting note); eventually someone who knows how to write tactics will come along and port it.</p>",
        "id": 322192988,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674098078
    },
    {
        "content": "<p>Oh okay. I will wrap this up in the morning. It is too late for me today. Thanks a lot for helping me out :)</p>",
        "id": 322193219,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674098280
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466334\">@Shreyas Srinivas</span> I'm confused about the <a href=\"#narrow/stream/287929-mathlib4/topic/data.2Enat.2Efib.20mathlib4.231644/near/322191088\">example that you say works in Lean 3</a>.  Here is my translation, which doesn't work (and wouldn't be expected to work, because of nat-subtraction issues).  Did you perhaps over-simplify your example?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">attempt_1</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">zify</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span> <span class=\"c1\">-- a goal remains</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 322193791,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674098765
    },
    {
        "content": "<p>I think <code>apply p</code> would cover it</p>",
        "id": 322194132,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674099077
    },
    {
        "content": "<p>I did simplify it a bit</p>",
        "id": 322194159,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674099100
    },
    {
        "content": "<p>I will check tomorrow</p>",
        "id": 322194210,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674099125
    },
    {
        "content": "<p>The idea is to produce something which displays the bug in Lean 4, but whose exact translation to Lean 3 works fine.  Sorry if I wasn't clear.</p>",
        "id": 322194284,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674099224
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">\\</span><span class=\"n\">leq</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">attempt_1</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">zify</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">p</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 322194353,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674099258
    },
    {
        "content": "<p>Edit: I didn't put that last line in because there are two goals after zify. Solving the equation is the first one and this is where the issue lies. The other goal is exactly <code>p</code></p>",
        "id": 322194373,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674099283
    },
    {
        "content": "<p>(deleted erroneous statement)</p>",
        "id": 322194960,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674099804
    },
    {
        "content": "<p>I think this one is not actually a bug; rather, this is a mathlib3 feature of <code>zify</code> which hasn't been implemented yet.  In mathlib4 zify as currently implemented, it seems you need to specify any hypotheses used to simplify a nat-subtraction, like <code>zify [p]</code>.  This works in Lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Zify</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">attempt_1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">zify</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span>\n  <span class=\"n\">ring</span>\n</code></pre></div>",
        "id": 322195549,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674100319
    },
    {
        "content": "<p>In the mathlib3 version it will find relevant hypotheses without you specifying them.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.zify</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.ring</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"kn\">include</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">attempt_1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">zify</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 322195666,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674100405
    },
    {
        "content": "<p>It might be worth opening a separate issue for this; it looks like the missing feature hasn't been noted before.</p>",
        "id": 322195800,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674100497
    },
    {
        "content": "<p>The PR is on <a href=\"https://bit.ly/3cKk3ld\">#queue4</a></p>",
        "id": 322311959,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674142765
    }
]