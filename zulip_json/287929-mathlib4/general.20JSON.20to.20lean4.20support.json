[
    {
        "content": "<p>Hello! Very new to this zulip so apologies if I am posting this in the wrong stream.<br>\nI'm working on something where the goal is to compile to lean4 -- I've been looking at <a href=\"https://leanprover-community.github.io/archive/stream/113488-general/topic/AST.20export.20for.20lean.203.html\">this chat</a>, and just the mathport source in general -- if I'm not wrong it takes in a lean3 AST in JSON format and compiles that into lean4 code, which is something I think I could repurpose to my needs (though I might be wrong -- I haven't experimented yet). I was wondering if it's possible to get some more details about the same -- namely, can I generalize the code to take in a different AST if it is given the grammar for the same, and if yes, what the restrictions on the alternate grammar would be. I can provide more information if needed.</p>\n<p>Thank you!</p>",
        "id": 320596926,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1673412408
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 320720415,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673448458
    },
    {
        "content": "<p>Could you say a bit more about your use case? Perhaps the best option would be to write your compiler as a Lean 4 program. Then you'd have immediate access to the Lean 4 AST (and the concrete syntax tree) as well as the whole Lean 4 compiler.</p>",
        "id": 320734314,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1673452023
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> </p>\n<blockquote>\n<p>Could you say a bit more about your use case?</p>\n</blockquote>\n<p>Sure -- I'm trying to write a compiler from Coq to Lean, and the Coq AST is in the form of an s-expression (which i can easily convert to json / similar formats). I did just find out that the .ilean files contain just the AST object (not a big lean4 user and never thought it would be that simple to get the AST) -- so I might have a more direct way of going about this after all.</p>",
        "id": 320807614,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1673475270
    },
    {
        "content": "<p>In that case, I would indeed advise that you write the compiler in Lean 4. The concrete syntax tree is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Syntax#doc\">docs4#Lean.Syntax</a> and you can use quotations to construct <code>Syntax</code> objects, e.g. <code>`(Nat.succ (Nat.add $x $y))</code>. You can then render these <code>Syntax</code> objects using Lean's own pretty-printer.</p>\n<p>Alternatively, you could work with the Lean AST, which is mostly defined by the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Expr#doc\">docs4#Lean.Expr</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Declaration#doc\">docs4#Lean.Declaration</a> types. If you want to render declarations, you might need to write some pretty-printing code yourself.</p>\n<p>Is your goal to get human-readable output or merely something that the Lean kernel can typecheck? And are you aware of the existing prototype which one of the Coq devs wrote at some point? (I'd have to look for the link again.)</p>",
        "id": 320909160,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1673521435
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> I see -- thank you for the links! I'll definitely look into it.</p>\n<p>I haven't come across any existing prototype -- do you have more info on that? I specifically checked if something already existed, but all I could find was like informal translations between tactics, and a Lean import <em>for</em> coq</p>",
        "id": 321067006,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1673573150
    },
    {
        "content": "<p>Ah yes, <a href=\"https://coq.discourse.group/t/alpha-announcement-coq-is-a-lean-typechecker/581\">this</a> is what I had in mind and it is indeed in the wrong direction.</p>",
        "id": 321134472,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1673608532
    }
]