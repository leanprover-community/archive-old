[
    {
        "content": "<p>afaict, <code>rw</code> no longer leaves side goals, so I can't use <code>rw [mul_lt_mul_left]</code> anymore to proceed on a goal and get another side goal. What's the right way to do so?</p>",
        "id": 309102404,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1668123342
    },
    {
        "content": "<p>Use <code>?_</code> in the places you want the goals to be left as side goals perhaps.</p>",
        "id": 309102560,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1668123403
    },
    {
        "content": "<p>Actually I'm a bit confused, looks like <code>rw</code> does leave side goals for me, at least in simple situations, so I'm not sure whats making it not do so in your situation</p>",
        "id": 309102913,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1668123561
    },
    {
        "content": "<p>Let me look into this again</p>",
        "id": 309103006,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1668123594
    },
    {
        "content": "<p>Hmm -- works for me now in a scratch example. Not sure what happened</p>",
        "id": 309103835,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1668123965
    },
    {
        "content": "<p>Aha, I think I found what I mean:<br>\nmathlib3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.order.ring.lemmas</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">mul_zero_class</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">pos_mul_strict_mono</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">pos_mul_reflect_lt</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">mul_zero</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">mul_lt_mul_left</span><span class=\"o\">],</span>\n<span class=\"c1\">--^ c * 0 &lt; c * b ↔ 0 &lt; b</span>\n<span class=\"c1\">--               ^ c * (c * 0) &lt; c * b ↔ c * 0 &lt; b</span>\n<span class=\"c1\">--                                ^ 0 &lt; c ONLY</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>mathlib4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Zero.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Zero.toOfNat0</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"o\">‹</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">›</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LT</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Covariant</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n₁</span> <span class=\"n\">n₂</span><span class=\"o\">},</span> <span class=\"n\">r</span> <span class=\"n\">n₁</span> <span class=\"n\">n₂</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">m</span> <span class=\"n\">n₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">m</span> <span class=\"n\">n₂</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Contravariant</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n₁</span> <span class=\"n\">n₂</span><span class=\"o\">},</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">m</span> <span class=\"n\">n₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">m</span> <span class=\"n\">n₂</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">n₁</span> <span class=\"n\">n₂</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">CovariantClass</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">elim</span> <span class=\"o\">:</span> <span class=\"n\">Covariant</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">μ</span> <span class=\"n\">r</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">ContravariantClass</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">elim</span> <span class=\"o\">:</span> <span class=\"n\">Contravariant</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">μ</span> <span class=\"n\">r</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">PosMulStrictMono</span>  <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">CovariantClass</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">PosMulReflectLt</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ContravariantClass</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_lt_mul_left</span> <span class=\"o\">[</span><span class=\"n\">PosMulStrictMono</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">PosMulReflectLt</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">zero_lt_mul_left</span> <span class=\"o\">[</span><span class=\"n\">PosMulStrictMono</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">PosMulReflectLt</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">mul_zero</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">mul_lt_mul_left</span><span class=\"o\">]</span>\n<span class=\"c1\">--  ^ 0 &lt; c * b ↔ 0 &lt; b</span>\n<span class=\"c1\">--                  ^  c * 0 &lt; c * b ↔ c * 0 &lt; b</span>\n<span class=\"c1\">--                                  ^ 0 &lt; b ↔ c * 0 &lt; b AND 0 &lt; c</span>\n    <span class=\"n\">simp</span>\n<span class=\"c1\">--  ^ 0 &lt; b ↔ c * 0 &lt; b AND 0 &lt; c</span>\n<span class=\"c1\">--     ^ 0 &lt; c</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 309106249,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1668125131
    },
    {
        "content": "<p>this doesn't seem comparable. The lean 3 proof is showing <code>c * 0 &lt; c * b ↔ 0 &lt; b</code> but the lean 4 proof is <code>0 &lt; c * b ↔ 0 &lt; b</code></p>",
        "id": 309125825,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668139480
    }
]