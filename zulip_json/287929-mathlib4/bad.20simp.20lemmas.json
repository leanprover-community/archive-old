[
    {
        "content": "<p>Are simp lemmas like <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/set/function.lean#L73-L76\">https://github.com/leanprover-community/mathlib/blob/master/src/data/set/function.lean#L73-L76</a> necessary? The pattern is <code>?f ?x</code> and will basically always be tried, even with Lean4's discrimination tree.</p>",
        "id": 249803546,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1629257188
    },
    {
        "content": "<p>I thought in Lean3 that pattern meant that it would never be tried! I'm compiling mathlib3 without that <code>@[simp]</code> now.</p>",
        "id": 249803797,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629257540
    },
    {
        "content": "<p>If you had some programmatic way of identifying that lemma as having a bad pattern like that, I'd be happy to have a list to clean up.</p>",
        "id": 249804031,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629257866
    },
    {
        "content": "<p>My question was somewhat rhetorical -- even if a few proofs break in your run, we should definitely not have that instance in Mathlib4. I am starting to experiment with <code>simp</code> with binport deep in mathlib (DIM) and the traces are &gt;2/3 <code>Set.eq_on_empty</code>.</p>",
        "id": 249804077,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1629257887
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/bad.20simp.20lemmas/near/249804031\">said</a>:</p>\n<blockquote>\n<p>If you had some programmatic way of identifying that lemma as having a bad pattern like that, I'd be happy to have a list to clean up.</p>\n</blockquote>\n<p>Good idea. I will print out the end-of-mathlib simp discrimination tree.</p>",
        "id": 249804098,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1629257936
    },
    {
        "content": "<p>Huh?  This lemma was far from useless in Lean 3.  It worked just fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.function</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.simplify.rewrite</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set.eq_on</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">trace_simp_set</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.eq_on_empty</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 249818053,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1629273143
    },
    {
        "content": "<p>Difference is that Lean 3 didn't unfold the <code>set.eq_on</code>.  Maybe it would make more sense to remove the <code>@[reducible]</code> attribute instead?</p>",
        "id": 249818288,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1629273352
    },
    {
        "content": "<p>Does that mean we should revert <a href=\"https://github.com/leanprover-community/mathlib/issues/8736\">#8736</a>?</p>",
        "id": 249822591,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629276688
    },
    {
        "content": "<p>I'll back out <a href=\"https://github.com/leanprover-community/mathlib/issues/8736\">#8736</a> and see what happens without <code>@[reducible]</code>.</p>",
        "id": 249823039,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629277080
    },
    {
        "content": "<p>I think <a href=\"https://github.com/leanprover-community/mathlib/issues/8736\">#8736</a> was a bit premature, although it wasn't a big change since the simp lemma apparently wasn't used anywhere.  I wonder what's the best solution here though.</p>\n<ol>\n<li>Make <code>set.eq_on</code> (and <code>left_inv_on</code>) semireducible.</li>\n<li>Tweak the Lean 4 simplifier so that it doesn't unfold a definition when the result is an ill-conditioned equation.  (There's already a <code>whnfUntilBadKey</code> function which prevents unfolding if the result is a lambda.)</li>\n</ol>",
        "id": 249823288,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1629277223
    },
    {
        "content": "<p>In what sense is it ill-conditioned here?</p>",
        "id": 249823795,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629277604
    },
    {
        "content": "<p>The left-hand side is <code>?f ?x</code>, that is, an applied metavariable.</p>",
        "id": 249824092,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1629277815
    },
    {
        "content": "<p>Okay, <a href=\"https://github.com/leanprover-community/mathlib/issues/8738\">#8738</a> reverts the change from <a href=\"https://github.com/leanprover-community/mathlib/issues/8736\">#8736</a>, and instead removes the <code>@[reducible]</code> on <code>set.eq_on</code>, which doesn't appear to be necessary.</p>",
        "id": 249831295,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629282910
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> More bad ones:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- #print punit.eq_punit -- EDIT: whoops, this one is in Lean4</span>\n<span class=\"k\">#print</span> <span class=\"n\">list.cons_injective</span>\n<span class=\"k\">#print</span> <span class=\"n\">list.length_injective</span>\n<span class=\"k\">#print</span> <span class=\"n\">list.reverse_injective</span>\n</code></pre></div>\n<p>Note that <code>function.injective</code> is reducible.</p>",
        "id": 249866271,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1629300285
    },
    {
        "content": "<p>Where is <code>punit.eq_punit</code> defined?  It's not in my mathlib.</p>",
        "id": 249867203,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1629300617
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/bad.20simp.20lemmas/near/249867203\">said</a>:</p>\n<blockquote>\n<p>Where is <code>punit.eq_punit</code> defined?  It's not in my mathlib.</p>\n</blockquote>\n<p>Sorry, that one is in Lean4 itself. I back-translated the name <code>PUnit.eq_punit</code>.</p>",
        "id": 249868648,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1629301185
    },
    {
        "content": "<p><code>function.injective</code> should not be reducible either</p>",
        "id": 249899277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629314410
    },
    {
        "content": "<p>We have a linter that checks whether the function on the lhs in a local constant, however, that doesn't <code>whnf reducible</code> the expression. If I add that, I get exactly the same list as Daniel (this is on mathlib where Scott already fixed the first one). </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> Checking 85593 declarations (plus 87184 automatically generated ones) in all imported files (including this one) -/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The `simp_var_head2` linter reports: -/</span>\n<span class=\"c\">/-</span><span class=\"cm\"> LEFT-HAND SIDE HAS VARIABLE AS HEAD SYMBOL.</span>\n<span class=\"cm\">Some simp lemmas have a variable as head symbol of the left-hand side: -/</span>\n<span class=\"c1\">-- d:\\projects\\mathlib\\src\\data\\list\\basic.lean</span>\n<span class=\"k\">#print</span> <span class=\"n\">list.cons_injective</span> <span class=\"c\">/-</span><span class=\"cm\"> Left-hand side has variable as head symbol: a₁ -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">list.length_injective</span> <span class=\"c\">/-</span><span class=\"cm\"> Left-hand side has variable as head symbol: a₁ -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">list.reverse_injective</span> <span class=\"c\">/-</span><span class=\"cm\"> Left-hand side has variable as head symbol: a₁ -/</span>\n</code></pre></div>\n<p>So there shouldn't be more after these.</p>",
        "id": 249909221,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629319558
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> could you take a look at <a href=\"https://github.com/leanprover-community/mathlib/issues/8749\">#8749</a> (no hurry).</p>",
        "id": 249910327,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629320126
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/bad.20simp.20lemmas/near/249899277\">said</a>:</p>\n<blockquote>\n<p><code>function.injective</code> should not be reducible either</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/lean/issues/604\">lean#604</a> (I don't have a local build, so CI might not pass)</p>",
        "id": 249912838,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629321319
    },
    {
        "content": "<p>The injectivity lemmas are bad as reducible simp lemmas presumably because simp just looks at the <code>?x = ?y</code> goal and essentially discards the <code>f ?x = f ?y</code> hypothesis?</p>",
        "id": 249912844,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629321326
    },
    {
        "content": "<p>Could <code>simp</code> instead learn to just not pull off the last binder if the result had a bad head symbol? Or would that not be useful</p>",
        "id": 249913049,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629321430
    },
    {
        "content": "<p>The existence or non-existence of <code>f ?x = f ?y</code> is not relevant.<br>\nIf you make <code>t = s</code> a simp lemma, <code>t</code> cannot be in the form <code>?f ...</code> (a local constant applied to 0 or more arguments), since then <code>simp</code> has nothing to match on when deciding whether to use this rewrite rule.</p>",
        "id": 249913050,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629321432
    },
    {
        "content": "<p>I guess I'm questioning the assumption that a \"lemma\" is the bit that remains after pulling off all the pi binders.</p>",
        "id": 249913237,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629321520
    },
    {
        "content": "<p>If my goal is <code>(f a = f b → a = b) ∨ something_hard</code> my assumption was that <code>simp</code> ought to be able to say _\"oh I have a lemma that states <code>(f a = f b → a = b)</code> so that bit is just <code>true</code>\"_. I'm sure that's not how it actually works though</p>",
        "id": 249913510,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629321666
    },
    {
        "content": "<p><code>simp</code> has to decide how to rewrite with the simp lemma</p>\n<ul>\n<li>If your lemma is <code>t = s</code> or <code>t ↔ s</code> it will rewrite <code>t</code> to <code>s</code></li>\n<li>If your lemma is a definition, it will rewrite using the equation lemmas</li>\n<li>maybe some other rules</li>\n<li>If your lemma is a proposition <code>p</code> not falling into the above rules it will rewrite <code>p</code> to <code>true</code>.</li>\n</ul>\n<p>What you're suggestion is something <code>simp</code> can do, except that it tries to apply the first rule, not the last one.<br>\nTo get the behavior you want, you have to reformulate the lemma so that it states <code>(f a = f b → a = b) ↔ true</code>.</p>",
        "id": 249913979,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629321930
    },
    {
        "content": "<p>If you don't give the lemma in this form, how does <code>simp</code> know which of the following you want?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">true</span>\n<span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 249914164,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629322023
    },
    {
        "content": "<p>I'm guessing there are performance reasons why \"well all of them at once I suppose\" is not a good strategy, even if you prune all the ones with invalid head symbols first.</p>",
        "id": 249914582,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629322284
    },
    {
        "content": "<p>those rewrite rules also vary a lot in their acceptability wrt their contribution to the whole rewrite system used by <code>simp</code>. For example the first rewrite looks a lot more problematic than the second and third, because <code>a</code> and <code>b</code> could be the same thing</p>",
        "id": 249916245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629323379
    },
    {
        "content": "<p>you also don't need the fourth rewrite given the third since there is a rewrite for <code>(\\forall x, true) &lt;-&gt; true</code></p>",
        "id": 249916345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629323428
    }
]