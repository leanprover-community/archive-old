[
    {
        "content": "<p>I don't understand why the first of these works, but the second fails. An explanation would be most welcome. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">â„•</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Bar</span> <span class=\"kd\">extends</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span>\n  <span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>  <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Baz</span> <span class=\"kd\">extends</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span>\n  <span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 310921371,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668805693
    },
    {
        "content": "<p>I think this is related to <a href=\"#narrow/stream/270676-lean4/topic/when.20are.20struct.20field.20defaults.20evaluated.3F/near/290407486\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/when.20are.20struct.20field.20defaults.20evaluated.3F/near/290407486</a></p>",
        "id": 310926110,
        "sender_full_name": "David Renshaw",
        "timestamp": 1668807571
    },
    {
        "content": "<p>The <code>:= by</code> syntax means that the field is evaluated lazily as a tactic. In particular, it's not evaluated until an instance of the class is defined (if I understand correctly).</p>",
        "id": 310926324,
        "sender_full_name": "David Renshaw",
        "timestamp": 1668807653
    },
    {
        "content": "<p>In the second case, my understanding is that the plain <code>:=</code> syntax means that the term should be evaluated immediately.</p>",
        "id": 310926758,
        "sender_full_name": "David Renshaw",
        "timestamp": 1668807835
    },
    {
        "content": "<p>Note that your example doesn't work if you do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Bar</span> <span class=\"kd\">extends</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span>\n  <span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"o\">()</span> <span class=\"o\">:=</span> <span class=\"o\">()</span><span class=\"bp\">;</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 310927245,
        "sender_full_name": "David Renshaw",
        "timestamp": 1668808020
    },
    {
        "content": "<p>That avoids the special syntax overload for <code>:= by</code> and therefore causes the term to be evaluated eagerly.</p>",
        "id": 310927318,
        "sender_full_name": "David Renshaw",
        "timestamp": 1668808050
    },
    {
        "content": "<p>My feeling is that it would be better if we had actually clearly different syntax to distinguish these two different things.</p>",
        "id": 310927482,
        "sender_full_name": "David Renshaw",
        "timestamp": 1668808100
    },
    {
        "content": "<p>Hmmm... okay. This behavior is a bit strange to me. I would  have expected that the default proof would use the value from the default field. So I would have expected the eagerly evaluated one to work too.</p>",
        "id": 310927568,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668808138
    },
    {
        "content": "<p>But if this is the behavior, certainly a special syntax other than <code>by</code> would be preferable to highlight the distinction.</p>",
        "id": 310927628,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668808171
    },
    {
        "content": "<p><code>:= by</code> is a special keyword in this context</p>",
        "id": 310927731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668808202
    },
    {
        "content": "<p>I think you don't have enough information here to prove that <code>X = 5</code> eagerly.</p>",
        "id": 310927749,
        "sender_full_name": "David Renshaw",
        "timestamp": 1668808207
    },
    {
        "content": "<p>I usually use <code>:= (by ...</code> if I want to disable it</p>",
        "id": 310927775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668808216
    },
    {
        "content": "<p>yes, <code>by rfl</code> is the right solution in this example</p>",
        "id": 310927823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668808235
    },
    {
        "content": "<p>Like, it's a default value for <code>X</code>, right? and a different value for <code>X</code> could be supplied by an instance?</p>",
        "id": 310927826,
        "sender_full_name": "David Renshaw",
        "timestamp": 1668808236
    },
    {
        "content": "<p>Sure, I understand that, but I would have expected the eager evaluation to use the default value when compiling the class declaration and then when defining an instance of this class if the default value is overridden then the proof field needs to be supplied.</p>",
        "id": 310928099,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668808340
    },
    {
        "content": "<p>this is also the syntax for auto params BTW, <code>def foo (x : 0 &lt; y := by simp) : Nat := 0</code></p>",
        "id": 310928197,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668808381
    },
    {
        "content": "<p>Yes it is something to be aware of but I think it is a reasonable syntax. It makes more sense than lean 3's <code>x : Ty . tac</code> stylistically</p>",
        "id": 310928374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668808448
    }
]