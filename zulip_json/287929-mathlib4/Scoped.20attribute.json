[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/pull/1188\">#1188</a>, there is a scoped attribute being defined:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">scoped</span><span class=\"o\">[</span><span class=\"n\">Pointwise</span><span class=\"o\">]</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">Set.hasOne</span> <span class=\"n\">Set.hasZero</span>\n</code></pre></div>\n<p>This is apparently not implemented yet, I get the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">expected</span> <span class=\"bp\">'</span><span class=\"n\">binder_predicate'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">elab'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">elab_rules'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">infix</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">infixl</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">infixr</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">instance</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">macro'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">macro_rules'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">notation</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">notation3'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">postfix</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">prefix</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">syntax'</span> <span class=\"n\">or</span> <span class=\"bp\">'</span><span class=\"n\">unif_hint'</span>\n</code></pre></div>\n<p>Should I just wait for this to get fixed?</p>",
        "id": 317611042,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1671815797
    },
    {
        "content": "<p>The situation definitely improves if you add <code>import Mathlib.Tactic.ScopedNS</code> at top. However Lean still complains about scoped attribute not being implemented despite <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/ScopedNS.lean#L53\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/ScopedNS.lean#L53</a> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 319159442,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1672740154
    },
    {
        "content": "<p>The error message is simply</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elaboration</span> <span class=\"n\">function</span> <span class=\"n\">for</span> <span class=\"bp\">'</span><span class=\"n\">Mathlib.Tactic.scopedNS'</span> <span class=\"n\">has</span> <span class=\"n\">not</span> <span class=\"n\">been</span> <span class=\"n\">implemented</span>\n</code></pre></div>",
        "id": 319159514,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1672740184
    },
    {
        "content": "<p>on a line such as <code>scoped[Pointwise] attribute [instance] Set.hasInv Set.hasNeg</code></p>",
        "id": 319159548,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1672740200
    },
    {
        "content": "<p>I don't see any obvious reason for that. I assume the line has no doc comment or attributes?</p>",
        "id": 319160192,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672740434
    },
    {
        "content": "<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.ScopedNS</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"n\">scoped</span><span class=\"o\">[</span><span class=\"n\">Nat</span><span class=\"o\">]</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 319162000,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1672741049
    },
    {
        "content": "<p>This is using mathlib4 70c3e2a60de1a253fd835104382304384c3b14ad</p>",
        "id": 319162142,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1672741094
    },
    {
        "content": "<p>from four days ago.</p>",
        "id": 319162189,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1672741113
    },
    {
        "content": "<p>This appears to be a bug in syntax match itself. Reported as <a href=\"https://github.com/leanprover/lean4/pull/2005\">lean4#2005</a></p>",
        "id": 319314250,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672799176
    },
    {
        "content": "<p>Thanks a lot for investigating this!</p>",
        "id": 319337249,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1672818363
    }
]