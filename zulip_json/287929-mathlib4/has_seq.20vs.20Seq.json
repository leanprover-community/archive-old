[
    {
        "content": "<p>Note that in Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">has_seq.seq</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">β</span>\n</code></pre></div>\n<p>whereas in Lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Seq.seq</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">β</span>\n</code></pre></div>\n<p>What are we supposed to do about this? For example, in <code>control.functor</code> there is <code>functor.comp.seq</code> which then gets made into a <code>has_seq</code> instance for <code>functor.comp</code>. On the Lean 4 side should I change the type of <code>Functor.Comp.seq</code> so that it will match the <code>Seq</code> instance? If I do that do I need to <code>#align</code> it with an <code>ₓ</code>? I'm not sure what the protocol is here.</p>",
        "id": 310345849,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668580014
    },
    {
        "content": "<blockquote>\n<p>On the Lean 4 side should I change the type of <code>Functor.Comp.seq</code> so that it will match the <code>Seq</code> instance?</p>\n</blockquote>\n<p>Yes. The reason for the signature change is that the second argument to seq should be lazily evaluated, and function arguments are eagerly evaluated so anything that wraps a seq instance also needs to have the <code>Unit -&gt;</code> unless <code>f</code> is already known to be a function.</p>\n<blockquote>\n<p>If I do that do I need to <code>#align</code> it with an <code>ₓ</code>? I'm not sure what the protocol is here.</p>\n</blockquote>\n<p>Yes, that seems like the least breaking way to do this. You will still get errors at all uses of the constant but I think the breakage will be more localized.</p>",
        "id": 310354943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668585437
    }
]