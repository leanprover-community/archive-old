[
    {
        "content": "<p>I have started on this refactor at <a href=\"https://github.com/leanprover-community/mathlib4/pull/1036\">mathlib4#1036</a> . I'd claimed that I would have no time today but I'll push on a bit on the tube to work right now, so I'd like to \"claim\" this PR for the next hour; I will push some time before <time datetime=\"2022-12-15T13:00:00Z\">2022-12-15T13:00:00Z</time> and then if anyone else wants a go then please feel free but perhaps also flag that you're working on it in this thread, as ideally we don't want people duplicating work.</p>",
        "id": 316018381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671104666
    },
    {
        "content": "<p>Oh wow I've got all of mathlib4 building with the change. Very minimal changes were needed, which was surprising to me given that I changed the definition of a declaration which is used in a lot of places. This bodes very well for other changes of this nature, like <code>order_dual</code>. </p>\n<p>A few <code>rfl</code>s (which were working because of defeq abuse) needed to be changed into <code>by exact rfl</code> for some reason. Is this something I should think about? </p>\n<p>The only other issue was that a linter I didn't know existed complained about the following two declarations:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">semiconj_by_unop</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">},</span> <span class=\"n\">SemiconjBy</span> <span class=\"n\">a.unop</span> <span class=\"n\">y.unop</span> <span class=\"n\">x.unop</span> <span class=\"bp\">↔</span> <span class=\"n\">SemiconjBy</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">commute_unop</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">},</span> <span class=\"n\">Commute</span> <span class=\"n\">x.unop</span> <span class=\"n\">y.unop</span> <span class=\"bp\">↔</span> <span class=\"n\">Commute</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>are now (together with their additivised versions) victims of this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> The `simpComm` linter reports:</span>\n<span class=\"cm\">COMMUTATIVITY LEMMA IS SIMP.</span>\n<span class=\"cm\">Some commutativity lemmas are simp lemmas: -/</span>\n</code></pre></div>\n<p>Should I really not mark them as <code>simp</code>?? These look fine to me.</p>",
        "id": 316031143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671108332
    },
    {
        "content": "<p>That looks klike a bug in the linter to me</p>",
        "id": 316032992,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671108848
    },
    {
        "content": "<p>Unless lean knows how to match against <code>a b: α</code> <code>commute a b</code> by filling out the arguments with<code>commute (unop (op a)) (unop (op b))</code> in which case we're in trouble</p>",
        "id": 316033214,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671108898
    },
    {
        "content": "<p>I can report -- I don't have a clue about linters though. Is this in Std or core or mathlib?</p>",
        "id": 316067960,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671117928
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, it's in <code>Std.Tactic.Lint.Simp</code>.</p>",
        "id": 316208464,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671178755
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/make.20.60MulOpposite.60.20a.20structure/near/316033214\">said</a>:</p>\n<blockquote>\n<p>Unless lean knows how to match against <code>a b: α</code> <code>commute a b</code> by filling out the arguments with<code>commute (unop (op a)) (unop (op b))</code> in which case we're in trouble</p>\n</blockquote>\n<p>The thing is, Lean knows to do that know.  This is just an instance of structure eta.</p>",
        "id": 316534572,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1671331164
    },
    {
        "content": "<p>The \"good\" news is that the discrimination trees don't know that, so simp will only apply the lemma if there's a literal <code>unop</code> in the term.</p>",
        "id": 316534692,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1671331266
    },
    {
        "content": "<p>So what do I do?</p>",
        "id": 316556351,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671353121
    },
    {
        "content": "<p>This isn't even \"structure eta\" is it? This is <code>proj (ctor x) = x</code> not <code>ctor (proj x) = x</code>, which I think is iota reduction, and at any rate is true definitionally in Lean3.</p>",
        "id": 316613271,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671381985
    },
    {
        "content": "<p>Yes, you're right.  But I don't think the unifier even tried to solve that one before.  Now it can solve <code>x =?= ?x.unop</code>.</p>",
        "id": 316623341,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1671388341
    },
    {
        "content": "<p>I don't understand this conversation really, but is the conclusion that the linter is buggy and I should mark this as \"don't lint\" and leave a porting note and open an issue, or is the conclusion that the linter is not buggy and I should not mark this with <code>simp</code>, or is the conclusion that the linter is not buggy and these lemmas should not even exist in mathlib4, or is the conclusion something else, or is there no conclusion as yet?</p>",
        "id": 316627129,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671390488
    },
    {
        "content": "<p>For now it's safe to mark as nolint.</p>",
        "id": 316627188,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1671390531
    },
    {
        "content": "<p>It would be great if you could open an issue against the linter, and reference the issue number in a comment next to the nolint; that way, we can clean up all the nolints eventually</p>",
        "id": 316642684,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671401692
    },
    {
        "content": "<p>Mario has already fixed the linter.</p>",
        "id": 316645006,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1671403628
    }
]