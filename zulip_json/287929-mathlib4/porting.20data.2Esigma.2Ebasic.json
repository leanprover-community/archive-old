[
    {
        "content": "<p>Mathlib3 has</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- we generate this manually as `@[derive has_reflect]` fails</span>\n<span class=\"kd\">@[instance]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">sigma.reflect</span> <span class=\"o\">[</span><span class=\"n\">reflected_univ.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}]</span> <span class=\"o\">[</span><span class=\"n\">reflected_univ.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}]</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">reflected</span> <span class=\"n\">_</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">reflected</span> <span class=\"n\">_</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"n\">has_reflect</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hβ</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_reflect</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_reflect</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩,</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">reflect_name</span> <span class=\"o\">:</span> <span class=\"n\">reflected</span> <span class=\"n\">_</span> <span class=\"bp\">@</span><span class=\"n\">sigma.mk.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">subst₄</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>in data.sigma.basic; this has been translated to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:66:14: unsupported tactic `reflect_name #[]</span>\n<span class=\"c1\">-- we generate this manually as `@[derive has_reflect]` fails</span>\n<span class=\"kd\">@[instance]</span>\n<span class=\"kn\">protected</span> <span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">sigma.reflect.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">reflected_univ.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}]</span> <span class=\"o\">[</span><span class=\"n\">reflected_univ.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">reflected</span> <span class=\"n\">_</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">reflected</span> <span class=\"n\">_</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"n\">has_reflect</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hβ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_reflect</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">has_reflect</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">trace</span> <span class=\"s2\">\"./././Mathport/Syntax/Translate/Tactic/Builtin.lean:66:14: unsupported tactic `reflect_name #[]\"</span> <span class=\"o\">:</span>\n        <span class=\"n\">reflected</span> <span class=\"n\">_</span> <span class=\"bp\">@</span><span class=\"n\">Sigma.mk.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">subst₄</span>\n    <span class=\"o\">(</span><span class=\"n\">quote.1</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">quote.1</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">quote.1</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">quote.1</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>in mathlib4, which fails with the error <code>invalid use of explicit universe parameters, 'reflected_univ' is a local</code>. This is meta code in mathlib3 so it's beyond my pay grade. How do I ask for help here?</p>",
        "id": 304851532,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666132048
    },
    {
        "content": "<p>This is all meta stuff, so I would suggest just deleting it all and assuming that it is no longer relevant. :-)</p>",
        "id": 304851727,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666132154
    },
    {
        "content": "<p>If you're feeling cautious, add a </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Porting note: I have deleted an instance of `has_reflect (Σ a, β a)` here.</span>\n</code></pre></div>",
        "id": 304851806,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666132197
    },
    {
        "content": "<p>Even more cautious, also leave the mathport generated code, commented out.</p>",
        "id": 304851891,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666132223
    },
    {
        "content": "<p>In mathlib3 this code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Lean 3</span>\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">psigma'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">mk</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">fst</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">psigma'.mk.inj</span>\n<span class=\"c1\">-- psigma'.mk.inj : {fst := ?M_3, snd := ?M_4} = {fst := ?M_5, snd := ?M_6} → ?M_3 = ?M_5 ∧ ?M_4 == ?M_6</span>\n</code></pre></div>\n<p>generates a <code>mk.inj</code> lemma. I can't find the analogue of this lemma in Lean 4 (there is <code>PSigma.mk</code> and <code>PSigma.mkSkipLeft</code> and <code>PSigma.mk.sizeOf_spec</code> and a couple of other things which aren't right). Am I supposed to prove it myself (if so, where do I put it?) or just come up with another proof?</p>",
        "id": 304851937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666132256
    },
    {
        "content": "<p>Seriously, when there is meta stuff in the main theory files, it's just not your problem for porting.</p>",
        "id": 304851980,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666132285
    },
    {
        "content": "<p>OK.</p>",
        "id": 304851996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666132298
    },
    {
        "content": "<p>Re: <code>mk.inj</code>, I've run into this too, and would like to know the answer.</p>",
        "id": 304852005,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666132303
    },
    {
        "content": "<p>There is no analogue for that <code>has_reflect</code> instance because we don't have the <code>reflected</code> typeclass. (<code>has_reflect</code> is now <code>ToExpr</code>.) I agree with Scott, just remove it and hope it doesn't matter anymore</p>",
        "id": 304853140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666132959
    },
    {
        "content": "<p>Cc <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> who wrote this I tbink</p>",
        "id": 304853593,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1666133227
    },
    {
        "content": "<p>Injectivity theorems are no longer generated by default. They can be requested like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">gen_injective_theorems</span><span class=\"bp\">%</span> <span class=\"n\">PSigma</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">PSigma.mk.inj</span>\n<span class=\"c1\">-- theorem PSigma.mk.inj.{u, v} : ∀ {α : Sort u} {β : α → Sort v} {fst : α} {snd : β fst} {fst_1 : α} {snd_1 : β fst_1},</span>\n<span class=\"c1\">--   { fst := fst, snd := snd } = { fst := fst_1, snd := snd_1 } → fst = fst_1 ∧ HEq snd snd_1</span>\n</code></pre></div>",
        "id": 304854237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666133619
    },
    {
        "content": "<p>although because use of <code>gen_injective_theorems% PSigma</code> declares theorems in the <code>PSigma</code> namespace that can clash with other calls to the command, I would recommend PRing this to lean core if you find a definition from <code>Init</code> that lacks injective theorems.</p>",
        "id": 304854571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666133821
    },
    {
        "content": "<p>Actually I take it back, injectivity theorems are generated by default:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">psigma'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">mk</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">fst</span><span class=\"o\">)</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">psigma'.mk.inj</span>\n<span class=\"c1\">-- theorem psigma'.mk.inj.{u, v} : ∀ {α : Sort u} {β : α → Sort v} {fst : α} {snd : β fst} {fst_1 : α} {snd_1 : β fst_1},</span>\n<span class=\"c1\">--   { fst := fst, snd := snd } = { fst := fst_1, snd := snd_1 } → fst = fst_1 ∧ HEq snd snd_1</span>\n</code></pre></div>\n<p><code>PSigma</code> is just special because it is declared very early, when not all theorems required for the injectivity proof are available. <code>gen_injective_theorems%</code> is only required for these specific foundational inductives. There is a block of them in <code>Init.Core</code> but <code>PSigma</code> isn't on the list</p>",
        "id": 304854893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666134020
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, obviously it's annoying to run into these problems, but what Mario just found here is part of the payoff of starting porting!</p>",
        "id": 304855708,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666134522
    },
    {
        "content": "<p>If you need to get unstuck, just add <code>gen_injective_theorems% PSigma</code> somewhere appropriate in mathlib4 but this will probably be upstreamed at some point</p>",
        "id": 304855864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666134623
    },
    {
        "content": "<p>Shouldn't has_reflect become <code>ToExpr</code> then via <code>#align</code> or something?</p>",
        "id": 304856756,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666135205
    },
    {
        "content": "<p>No, because this is meta stuff, which we don't attempt to #align.</p>",
        "id": 304856807,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666135235
    },
    {
        "content": "<p>It's a whole new world. :-)</p>",
        "id": 304856819,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666135240
    },
    {
        "content": "<p>We can align it, but it's kind of pointless since you immediately run into much worse errors (see the lovely mathport error smuggled in a string literal above)</p>",
        "id": 304856897,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666135284
    },
    {
        "content": "<p>I would expect it to follow the pattern of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.instToExprProd#doc\">docs4#Lean.instToExprProd</a>... but that implementation looks like it's invalid in universes other than <code>0</code>!</p>",
        "id": 304856995,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666135348
    },
    {
        "content": "<p>Indeed it is. The whole typeclass doesn't really work for universes other than 0, it would need a level in addition to a type expression</p>",
        "id": 304857041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666135391
    },
    {
        "content": "<p>(I tried writing it based on instToExprProd, the issue is that you don't have an expr for beta and without some magic to synthesize <code>reflected</code> it's kind of pointless to assume you are given one.)</p>",
        "id": 304857219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666135505
    },
    {
        "content": "<p>So perhaps we need to forward-port mathlib3's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/reflected_univ\">docs#reflected_univ</a> to lean4 core?</p>",
        "id": 304857222,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666135507
    },
    {
        "content": "<p>If lean4 core isn't using it already, it probably isn't needed</p>",
        "id": 304857324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666135573
    },
    {
        "content": "<p>The <code>Qq</code> library is a much better approach to this kind of thing</p>",
        "id": 304857357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666135598
    },
    {
        "content": "<p>Well it's needed to make the existing instances not garbage. I guess removing the broken universe polymorphism from  <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.instToExprProd#src\">src4#Lean.instToExprProd</a> (and a bunch of other toExpr instances), and leaving universes to Qq would also make that a non-issue.</p>",
        "id": 304857455,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666135680
    },
    {
        "content": "<p>The typeclass itself can't be used if you care about reflecting expressions in other universes - it's not just the instances, the typeclass does not have enough data in it to implement sensible instances</p>",
        "id": 304857779,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666135885
    },
    {
        "content": "<p>but I'm not sure when that would ever come up</p>",
        "id": 304857795,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666135895
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/479\">mathlib4#479</a></p>",
        "id": 304937668,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666181125
    }
]