[
    {
        "content": "<p>Given the definition of <code>ByteSlice</code> as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">ByteSlice</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">off</span> <span class=\"n\">len</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I am surprised that the function below does not check for the possibility that <code>idx &gt;= self.len</code>.<br>\nShouldn't there be an error of some kind in that case?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Index into a byte slice. The `getOp` function allows the use of the `buf[i]` notation. -/</span>\n<span class=\"kd\">@[inline]</span> <span class=\"kd\">def</span> <span class=\"n\">getOp</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">ByteSlice</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">idx</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span> <span class=\"o\">:=</span> <span class=\"n\">self.arr.get</span><span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"n\">self.off</span> <span class=\"bp\">+</span> <span class=\"n\">idx</span><span class=\"o\">)</span>\n</code></pre></div>\n<ul>\n<li>Nicolas.</li>\n</ul>",
        "id": 269958440,
        "sender_full_name": "Nicolas Rouquette",
        "timestamp": 1643577857
    },
    {
        "content": "<p>The <code>get!</code> function does that check and calls <code>panic!</code> if the index is out of bounds.</p>",
        "id": 270006592,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1643623655
    },
    {
        "content": "<p><code>get!</code> will succeed if the slice is in the middle of the array and the access is OOB for the slice but within bounds of the array, no? So this looks like a bug to me.</p>",
        "id": 270037736,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1643638721
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 270042773,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1643640647
    },
    {
        "content": "<p>I wouldn't call it a bug in <code>getOp</code>.  The result is just unspecified if you access the array outside of its bounds, and here it happens to return a value other than <code>default</code>.</p>",
        "id": 270055214,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643644854
    },
    {
        "content": "<p>Other functions don't panic either if you pass them out-of-bounds indices; e.g. <code>modify</code> will silently do nothing.</p>",
        "id": 270055690,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643645007
    },
    {
        "content": "<p>A very unfortunate (and related) problem is that you can't prove panic-freeness of functions using these basic primitives in Lean 4 though.</p>",
        "id": 270055695,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643645008
    },
    {
        "content": "<p>Allowing an out-of-bound access seems to me an open door for a vulnerability that could be potentially serious for an application.<br>\nIf this vulnerability is intrinsically tied to our inability to prove panic-freeness, then is it really reasonable to use panic in mathlib4?</p>\n<p>Panic in lean corresponds to throwing an exception in Java/Scala. In Scala, functional programming guidelines suggest using an appropriate type to encapsulate the distinction between a value and an error; see: <a href=\"https://docs.scala-lang.org/scala3/book/fp-functional-error-handling.html\">https://docs.scala-lang.org/scala3/book/fp-functional-error-handling.html</a></p>\n<p>So, in the case of <code>ByteSlice</code>, instead of the panic-vulnerable interface:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">def</span> <span class=\"n\">getOp</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">ByteSlice</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">idx</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span>\n</code></pre></div>\n<p>We would have instead a monad like <code>Either</code> and a type of <code>Error</code> so that we could define a panic-free interface like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">def</span> <span class=\"n\">getOp</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">ByteSlice</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">idx</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Either</span> <span class=\"n\">Error</span> <span class=\"n\">UInt8</span>\n</code></pre></div>\n<p>Then presumably we could write a theorem that says that if the index is within bound, the result must be a <code>Right</code>, otherwise it must be a <code>Left</code>.</p>",
        "id": 270782714,
        "sender_full_name": "Nicolas Rouquette",
        "timestamp": 1644014359
    },
    {
        "content": "<p>You shouldn't use <code>getOp</code> if you need error checking</p>",
        "id": 270790527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644019978
    },
    {
        "content": "<p>there are other functions like <code>get?</code> for that</p>",
        "id": 270790535,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644019987
    },
    {
        "content": "<p>I don't see the sense in which this could cause a vulnerability, except in the general sense that an out of bounds read is probably a bug and if you aren't using the dependently typed <code>get</code> then you are making assertions that could be false</p>",
        "id": 270790649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644020070
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Q.2E.20about.20ByteSlice.2EgetOp/near/270790527\">said</a>:</p>\n<blockquote>\n<p>You shouldn't use <code>getOp</code> if you need error checking</p>\n</blockquote>\n<p>How so?</p>\n<p>Looking at the definition, it is unclear to me what error checking takes place and where.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Index into a byte slice. The `getOp` function allows the use of the `buf[i]` notation. -/</span>\n<span class=\"kd\">@[inline]</span> <span class=\"kd\">def</span> <span class=\"n\">getOp</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">ByteSlice</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">idx</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span> <span class=\"o\">:=</span> <span class=\"n\">self.arr.get</span><span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"n\">self.off</span> <span class=\"bp\">+</span> <span class=\"n\">idx</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>If <code>self.off + idx &gt; self.arr.size</code>, does <code>self.arr.get! ...</code> raise an error?<br>\nIf <code>idx &gt; self.len</code>, what catches that error?</p>\n<p>Looking at lean4's <code>ByteArray</code>, I would have expected a dependently typed index argument, something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">getOp</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"bp\">@&amp;</span> <span class=\"n\">ByteSlice</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">@&amp;</span> <span class=\"n\">Fin</span> <span class=\"n\">self.len</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">UInt8</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">self</span><span class=\"o\">⟩,</span> <span class=\"n\">idx</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">self.arr.get</span><span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"n\">self.off</span> <span class=\"bp\">+</span> <span class=\"n\">idx</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Isn't it preferable to use the type system as a mechanism to prevent errors?</p>",
        "id": 270853829,
        "sender_full_name": "Nicolas Rouquette",
        "timestamp": 1644101618
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"362579\">Nicolas Rouquette</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Q.2E.20about.20ByteSlice.2EgetOp/near/270853829\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Q.2E.20about.20ByteSlice.2EgetOp/near/270790527\">said</a>:</p>\n<blockquote>\n<p>You shouldn't use <code>getOp</code> if you need error checking</p>\n</blockquote>\n<p>How so?</p>\n<p>Looking at the definition, it is unclear to me what error checking takes place and where.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Index into a byte slice. The `getOp` function allows the use of the `buf[i]` notation. -/</span>\n<span class=\"kd\">@[inline]</span> <span class=\"kd\">def</span> <span class=\"n\">getOp</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">ByteSlice</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">idx</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span> <span class=\"o\">:=</span> <span class=\"n\">self.arr.get</span><span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"n\">self.off</span> <span class=\"bp\">+</span> <span class=\"n\">idx</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>If <code>self.off + idx &gt; self.arr.size</code>, does <code>self.arr.get! ...</code> raise an error?<br>\nIf <code>idx &gt; self.len</code>, what catches that error?</p>\n</blockquote>\n<p>The error handling behavior is inherited from <code>get!</code> here. If you use <code>Array.get!</code> with an out of bounds index, the program will not halt, you will get <code>default : A</code> back, and an error message will be printed on stderr (which is usually reserved for low level errors, and gives users an uncomfortable experience, so it should be avoided when possible). In other words, this is an <code>assert</code> statement which you should only use if you are sure it will not occur in your code. However note that memory safety is not compromised here, and a bounds check is still performed.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"362579\">Nicolas Rouquette</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Q.2E.20about.20ByteSlice.2EgetOp/near/270853829\">said</a>:</p>\n<blockquote>\n<p>Looking at lean4's <code>ByteArray</code>, I would have expected a dependently typed index argument, something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">getOp</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"bp\">@&amp;</span> <span class=\"n\">ByteSlice</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">@&amp;</span> <span class=\"n\">Fin</span> <span class=\"n\">self.len</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">UInt8</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">self</span><span class=\"o\">⟩,</span> <span class=\"n\">idx</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">self.arr.get</span><span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"n\">self.off</span> <span class=\"bp\">+</span> <span class=\"n\">idx</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Isn't it preferable to use the type system as a mechanism to prevent errors?</p>\n</blockquote>\n<p>It's certainly possible to define such a thing yourself. But <code>self.len</code> is not the right bound here, as you would see if you deferred to <code>Array.get</code> instead:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">getOp</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"bp\">@&amp;</span> <span class=\"n\">ByteSlice</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">@&amp;</span> <span class=\"n\">Fin</span> <span class=\"n\">self.len</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">UInt8</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">self</span><span class=\"o\">⟩,</span> <span class=\"n\">idx</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">self.arr.get</span> <span class=\"o\">⟨</span><span class=\"n\">self.off</span> <span class=\"bp\">+</span> <span class=\"n\">idx</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>At the <code>_</code> you will see that it expects a proof that <code>self.off + idx &lt; self.arr.size</code>, and your assumption <code>idx &lt; self.len</code> does not help to prove this.</p>",
        "id": 270872243,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644127180
    },
    {
        "content": "<p>I think it is reasonable to add more proofs to these data structures, to assert that <code>off + len &lt;= arr.size</code> in <code>ByteSlice</code> and possibly also <code>off &lt;= arr.size</code> in <code>ByteSliceT</code>. If we did so, then it would make more sense to provide an \"unchecked\" dependently typed <code>get</code> function. Currently a dependently typed get function would be useless because knowing that it is in bounds of the slice doesn't mean it is in bounds of the underlying array</p>",
        "id": 270872536,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644127484
    },
    {
        "content": "<p>However, I don't think that <code>getOp</code> (the one that gets the <code>a[i]</code> syntax) should be dependently typed. Following the lead of lean 4 core, this should just take a nat and it should have unspecified out of bounds behavior (it shouldn't do any checks it does not need to for memory safety)</p>",
        "id": 270872705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644127716
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Q.2E.20about.20ByteSlice.2EgetOp/near/270872536\">said</a>:</p>\n<blockquote>\n<p>I think it is reasonable to add more proofs to these data structures, to assert that <code>off + len &lt;= arr.size</code> in <code>ByteSlice</code> and possibly also <code>off &lt;= arr.size</code> in <code>ByteSliceT</code>. If we did so, then it would make more sense to provide an \"unchecked\" dependently typed <code>get</code> function. Currently a dependently typed get function would be useless because knowing that it is in bounds of the slice doesn't mean it is in bounds of the underlying array</p>\n</blockquote>\n<p>Thanks for the explanation! While I understand in principle the suggestion, it is still unclear to me how to do this.</p>\n<p>So, starting from the definition without assertions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">ByteSliceT</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">off</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Is it correct that to add support for these assertions, we have to effectively turn them into proof obligations?</p>\n<p>I tried this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">ByteSliceT</span> <span class=\"n\">where</span>\n  <span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span>\n  <span class=\"n\">off</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">isLt</span> <span class=\"o\">:</span> <span class=\"n\">Nat.lt</span> <span class=\"n\">off</span> <span class=\"n\">arr.size</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">ByteArray</span> <span class=\"o\">:=</span> <span class=\"o\">(((</span><span class=\"n\">ByteArray.empty.push</span> <span class=\"mi\">10</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">push</span> <span class=\"mi\">20</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">push</span> <span class=\"mi\">30</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">push</span> <span class=\"mi\">40</span>\n<span class=\"k\">#eval</span> <span class=\"n\">a</span> <span class=\"c1\">-- [10, 20, 30, 40]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">b1</span> <span class=\"o\">:</span> <span class=\"n\">ByteSliceT</span> <span class=\"o\">:=</span> <span class=\"n\">ByteSliceT.mk</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt</span> <span class=\"mi\">1</span> <span class=\"n\">a.size</span><span class=\"o\">)</span>\n\n<span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"o\">{</span> <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">off</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.lt</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">ByteArray.size</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">Nat.lt</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">ByteArray.size</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Nat.lt</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">ByteArray.size</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>It seems that the structure is close what what would be needed since it would reject this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">b3</span> <span class=\"o\">:</span> <span class=\"n\">ByteSliceT</span> <span class=\"o\">:=</span> <span class=\"n\">ByteSliceT.mk</span> <span class=\"n\">a</span> <span class=\"mi\">20</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt</span> <span class=\"mi\">1</span> <span class=\"n\">a.size</span><span class=\"o\">)</span>\n\n<span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"o\">{</span> <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">off</span> <span class=\"o\">:=</span> <span class=\"mi\">20</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.lt</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">ByteArray.size</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">Nat.lt</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">ByteArray.size</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Nat.lt</span> <span class=\"mi\">20</span> <span class=\"o\">(</span><span class=\"n\">ByteArray.size</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>There is something that I am missing but I am not sure what it is.</p>",
        "id": 270910830,
        "sender_full_name": "Nicolas Rouquette",
        "timestamp": 1644180387
    },
    {
        "content": "<p>first, you want the requirement to be <code>off &lt;= arr.size</code> not <code>off &lt; arr.size</code>. An empty byte slice at the end of the array should be okay</p>",
        "id": 270916023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644187246
    },
    {
        "content": "<p>The issue with <code>b1</code> is that you gave it <code>1 &lt; a.size</code> instead of a proof of <code>1 &lt; a.size</code>. In this case, it reduces to <code>1 &lt; 4</code> so <code>(by decide)</code> should work as a proof</p>",
        "id": 270916081,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644187323
    },
    {
        "content": "<p>The structure is otherwise correct. Most likely you would also want a \"smart constructor\" <code>mkByteSliceT</code> that does not take a proof, and instead sets the offset to <code>min off a.size</code> which can be proven to always be in bounds. That way users can use <code>mkByteSliceT</code> when they don't want to do the side proof, at the cost of doing a bounds check in the constructor</p>",
        "id": 270916156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644187458
    },
    {
        "content": "<p>Makes sense, though I am still struggling with how to write this properly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mkByteSliceT</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">off</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">off</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">arr.size</span> <span class=\"k\">then</span>\n    <span class=\"o\">(</span>\n      <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Nat.lt</span> <span class=\"n\">off</span> <span class=\"n\">arr.size</span>\n      <span class=\"bp\">|</span> <span class=\"n\">ByteSliceT.mk</span> <span class=\"o\">{</span><span class=\"n\">arr</span><span class=\"o\">:=</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">off</span><span class=\"o\">:=</span><span class=\"n\">off</span><span class=\"o\">,</span> <span class=\"n\">isLT</span><span class=\"o\">:=</span><span class=\"n\">h</span><span class=\"o\">}</span>\n    <span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">panic</span><span class=\"bp\">!</span> <span class=\"n\">s</span><span class=\"s2\">\"Error: offset, {off}, exceeds array size, {arr.size}\"</span>\n</code></pre></div>\n<p>Although I've read the doc several times, it is still unclear to me how to combine these aspects of computation and proof together.</p>",
        "id": 270921701,
        "sender_full_name": "Nicolas Rouquette",
        "timestamp": 1644195566
    },
    {
        "content": "<p>In case it is not obvious, I am stuck at how to do invoke <code>ByteSliteT.mk</code> from <code>mkByteSliceT</code>.<br>\nThat is, how can I convert a confirmation that <code>off &lt;= arr.size</code> into a proof suitable for calling <code>ByteSliteT.mk</code>  where <code>ByteSliceT</code> is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">ByteSliceT</span> <span class=\"n\">where</span>\n  <span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span>\n  <span class=\"n\">off</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">isLt</span> <span class=\"o\">:</span> <span class=\"n\">Nat.lt</span> <span class=\"n\">off</span> <span class=\"n\">arr.size</span>\n</code></pre></div>",
        "id": 271384475,
        "sender_full_name": "Nicolas Rouquette",
        "timestamp": 1644466635
    },
    {
        "content": "<p>again, you don't want <code>isLt</code>; it should be <code>isLe</code></p>",
        "id": 271385116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644467421
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">ByteSliceT</span> <span class=\"n\">where</span>\n  <span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span>\n  <span class=\"n\">off</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">isLe</span> <span class=\"o\">:</span> <span class=\"n\">off</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">arr.size</span>\n</code></pre></div>",
        "id": 271385123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644467436
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">ByteSliceT</span> <span class=\"n\">where</span>\n  <span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span>\n  <span class=\"n\">off</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">isLe</span> <span class=\"o\">:</span> <span class=\"n\">off</span> <span class=\"bp\">≤</span> <span class=\"n\">arr.size</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mkByteSliceT</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">off</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ByteSliceT</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">min</span> <span class=\"n\">off</span> <span class=\"n\">arr.size</span><span class=\"o\">,</span> <span class=\"n\">min_le_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 271385451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644467844
    },
    {
        "content": "<p>I don't think we want to panic on out of bounds input here. It is reasonable to want to create a suffix starting after the end of the array, and this simply doesn't span any elements</p>",
        "id": 271385538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644467954
    },
    {
        "content": "<p>Thanks for the clarification. </p>\n<p>Reasonable behavior can be subjective unless there is a way to describe what guarantees we can provide.</p>\n<p>Considering the signature of the function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mkByteSliceT</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">off</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ByteSliceT</span>\n</code></pre></div>\n<p>In conventional programming, there is the notion of pre/post condition to specify some properties about a function.<br>\nIt seems to me that with Lean, we do not need pre/post conditions per se, rather, it's the implementation of the function<br>\nthat, if written in a logical way, enables lean to \"reason\" about its properties as you've done for the constructor's 3rd argument:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mkByteT</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">off</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ByteSliceT</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">arr</span><span class=\"o\">,</span> <span class=\"n\">min</span> <span class=\"n\">off</span> <span class=\"n\">arr.size</span><span class=\"o\">,</span> <span class=\"n\">min_le_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Suppose we wanted another constructor whose contract is that it either succeeds with the offset as requested or fails if the offset is too large.<br>\nI agree that it is probably undesirable to use <code>panic</code> for this.<br>\nIn Scala, we would instead have a return type like this: <code>Either[String, ByteStringT]</code></p>\n<p>Are there recommendations for how to do this in lean4?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- what is the result type?</span>\n<span class=\"c1\">-- what is the implementation?</span>\n<span class=\"kd\">def</span> <span class=\"n\">mkByteSliceAsRequested</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">off</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">???</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">???</span>\n</code></pre></div>",
        "id": 271533555,
        "sender_full_name": "Nicolas Rouquette",
        "timestamp": 1644557340
    },
    {
        "content": "<p>We don't need a function with a precondition, because the constructor already serves that purpose</p>",
        "id": 271533649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644557475
    },
    {
        "content": "<p>a version that panics might be useful but it would still have to return a valid result, so it would probably just be a guarded version of <code>mkByteSliceT</code></p>",
        "id": 271533661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644557512
    },
    {
        "content": "<p>because unless you return an option or other enriched return type, even if you \"fail\" you are still required to not violate the type system because consistency of the logic depends on it</p>",
        "id": 271533727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644557622
    }
]