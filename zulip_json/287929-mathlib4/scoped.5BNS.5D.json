[
    {
        "content": "<p>I tried to use the <code>scoped[namespace]</code> syntax for localized notation but I got the error: <code>elaboration function for 'Mathlib.Tactic.scopedNS' has not been implemented</code> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 311517092,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669092253
    },
    {
        "content": "<p>did you import <code>Mathlib.Tactic.ScopedNS</code>? It works for me in a basic test</p>",
        "id": 311518228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669093306
    },
    {
        "content": "<p>yeah, I did. I'll play around and ask again tomorrow with a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> if it's still broken.</p>",
        "id": 311518647,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669093617
    },
    {
        "content": "<p>I think the problem is the notation I was trying to declare was <code>infixl</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.ScopedNS</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n\n<span class=\"c1\">-- scoped[Bar] infixl:40 \" ⟹ \" =&gt; Foo -- fails</span>\n<span class=\"n\">scoped</span><span class=\"o\">[</span><span class=\"n\">Bar</span><span class=\"o\">]</span> <span class=\"kd\">notation</span> <span class=\"s2\">\" ⟹ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Foo</span> <span class=\"c1\">-- succeeds</span>\n</code></pre></div>",
        "id": 311519396,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669094136
    },
    {
        "content": "<p>I understand. I guess it just needs another macro rule. I'll try to add it.</p>",
        "id": 311519552,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669094228
    },
    {
        "content": "<p>Oh, actually, it looks to me like it should be supported by the second rule. <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> And the docstring says it should support infix.</p>",
        "id": 311519833,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669094435
    },
    {
        "content": "<p>The type on <code>$mixfixKind:prefix</code> looks wrong. I thought it should be <code>$mixfixKind:mixfix</code>, but that doesn't work.</p>",
        "id": 311520329,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669094842
    },
    {
        "content": "<p>yeah, the notation wasn't designed in a way that facilitates matching on it</p>",
        "id": 311521365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669095692
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/676\">mathlib4#676</a></p>",
        "id": 311521768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669095945
    },
    {
        "content": "<p>Now <code>infixl</code> works but <code>notation</code> is broken (same error as before):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.ScopedNS</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n\n<span class=\"n\">scoped</span><span class=\"o\">[</span><span class=\"n\">Bar</span><span class=\"o\">]</span> <span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">40</span> <span class=\"s2\">\" ⟹ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Foo</span> <span class=\"c1\">-- succeeds</span>\n<span class=\"n\">scoped</span><span class=\"o\">[</span><span class=\"n\">Bar</span><span class=\"o\">]</span> <span class=\"kd\">notation</span> <span class=\"s2\">\" ⟹ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Foo</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 311751856,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669177041
    },
    {
        "content": "<p>I think it's just that the precedence changed from being optional to mandatory. I'll push a fix. (Note: it works if you include the precedence.)</p>",
        "id": 311753007,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669177857
    },
    {
        "content": "<p>Or is the mandatory precedence intentional?</p>",
        "id": 311753141,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669177973
    },
    {
        "content": "<p>I pushed a fix</p>",
        "id": 311753589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669178419
    },
    {
        "content": "<p>Thanks. You beat me to it, I had just made the PR.</p>",
        "id": 311753748,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669178575
    },
    {
        "content": "<p>I also added support for doc comments and attributes</p>",
        "id": 311753780,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669178622
    },
    {
        "content": "<p>Nice, thanks!</p>",
        "id": 311753843,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669178666
    },
    {
        "content": "<p>The scoped notation <code>[a, b]</code> for <code>Set.interval a b</code> doesn't work in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1062\">mathlib4#1062</a>. Lean4 thinks it's still a <code>List</code>. Any clue how to fix it?</p>",
        "id": 316151365,
        "sender_full_name": "Winston Yin",
        "timestamp": 1671142308
    },
    {
        "content": "<p>does that notation work \"normally\", without scopes?</p>",
        "id": 316156117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671144190
    },
    {
        "content": "<p>I expect it to be just as dreadfully ambiguous as it always has been</p>",
        "id": 316156151,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671144209
    },
    {
        "content": "<p>It's not ambiguous if you're a mathematician and are considering what the type is. Is that asking too much of lean?</p>",
        "id": 316164917,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671148553
    },
    {
        "content": "<p>no, lean supports this kind of thing in principle, I've just never found choice nodes to be reliable</p>",
        "id": 316165039,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671148615
    },
    {
        "content": "<p>since you quite often have these expressions in a context with no expected type</p>",
        "id": 316165067,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671148639
    },
    {
        "content": "<p>Removing the scope gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ambiguous</span><span class=\"o\">,</span> <span class=\"n\">possible</span> <span class=\"n\">interpretations</span>\n  <span class=\"o\">[</span><span class=\"bp\">↑</span><span class=\"n\">toDual</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">toDual</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">α</span><span class=\"bp\">ᵒᵈ</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n  <span class=\"o\">[</span><span class=\"bp\">↑</span><span class=\"n\">toDual</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">toDual</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">α</span><span class=\"bp\">ᵒᵈ</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 316168400,
        "sender_full_name": "Winston Yin",
        "timestamp": 1671150517
    },
    {
        "content": "<p>wait, so what does working look like?</p>",
        "id": 316177934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671157332
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/1062\">mathlib4#1062</a> I temporarily removed <code>scoped</code> and used <code>[[a, b]]</code> instead of <code>[a, b]</code></p>",
        "id": 316207443,
        "sender_full_name": "Winston Yin",
        "timestamp": 1671178305
    }
]