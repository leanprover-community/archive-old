[
    {
        "content": "<p>I noticed from <a href=\"https://math.commelin.net/files/port_status.html\">https://math.commelin.net/files/port_status.html</a> that <code>data.nat.bitwise</code> is ready to port, since <code>data.list.basic</code> was ported.<br>\nHowever, this file only has two dependencies: <code>set_theory.game.nim</code> and <code>data.nat.multiplicity</code>. I've gone through the latter, and it doesn't actually seem to use any of <code>data.nat.bitwise</code>'s definitions<br>\nis this file actually useful?</p>",
        "id": 319910300,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1673072588
    },
    {
        "content": "<p>The <code>simp [h, one_right h2.not_unit]</code> in <code>data.nat.multiplicity</code> uses a lemma from <code>data.nat.bitwise</code>.</p>",
        "id": 319910786,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673072860
    },
    {
        "content": "<p>It's perhaps not the most exciting file, but we'd like it ported eventually. If you're just getting started files like this (off the critical path) are actually pretty good as warm-up exercises. :-)</p>",
        "id": 319910908,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673072951
    },
    {
        "content": "<p>When you want to focus on the most important targets, I'd suggest instead of going to the port_status page, go to the <a href=\"#narrow/stream/287929-mathlib4/topic/port.20progress\">port progress</a> thread, and click on the links to the graphs that the port-progress-bot posts.</p>",
        "id": 319910940,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673072999
    },
    {
        "content": "<p>Light blue indicates files ready to port, dark blue means there is an open PR, which most likely could do with either help or review.</p>",
        "id": 319911034,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673073022
    },
    {
        "content": "<p>ah, right, simp lemmas <span aria-label=\"stuck out tongue closed eyes\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue closed eyes\">:stuck_out_tongue_closed_eyes:</span> <br>\nyes I was thinking this file might be a nice start, since it wasn't really blocking anything and seemed simple enough<br>\nI wasn't really able to find any light blue circles without a PR in <a href=\"#narrow/stream/287929-mathlib4/topic/port.20progress\">port progress</a> either, but I might have not looked hard enough</p>",
        "id": 319911170,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1673073179
    },
    {
        "content": "<p>Helping out on the dark blue circles is very important too! You're welcome to push fixes to anyone's PRs, by default.</p>",
        "id": 319912073,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673073942
    },
    {
        "content": "<p>I've started work in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1404\">mathlib4#1404</a><br>\nalready getting a little bit of weird behaivour here<br>\nfor example, simp is leaving me with a goal of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">bits</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">tail</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">List.head</span><span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"n\">bits</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which is closed by rfl.</p>\n<p>I can't add <code>rfl</code> to the list of lemmas, because simp won't allow that.<br>\ncode pointer: <a href=\"https://github.com/leanprover-community/mathlib4/pull/1404/files#diff-f6a569804f7aec89a2a69cc9f1c115b1da9ff00349ebd8df8845b35c85b3acb5R80\">https://github.com/leanprover-community/mathlib4/pull/1404/files#diff-f6a569804f7aec89a2a69cc9f1c115b1da9ff00349ebd8df8845b35c85b3acb5R80</a></p>",
        "id": 319918163,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1673078871
    },
    {
        "content": "<p>ah,  this is probably because the lean3 code is different, and <code>head</code> does not panic.</p>",
        "id": 319918629,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1673079217
    },
    {
        "content": "<p>I would try and figure out how that <code>match</code> is getting there. Looks like <code>simp</code> unfolded too much.</p>",
        "id": 319918713,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673079264
    },
    {
        "content": "<p>Yeah, in <code>Mathlib.Init.Data.List.Basic</code> <code>headI</code> is marked with <code>@[simp]</code>. That seems wrong.</p>",
        "id": 319919676,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673079974
    },
    {
        "content": "<p>You might want to merge <a href=\"https://github.com/leanprover-community/mathlib4/pull/1407\">mathlib4#1407</a> into <a href=\"https://github.com/leanprover-community/mathlib4/pull/1404\">mathlib4#1404</a>.</p>",
        "id": 319920527,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673080398
    },
    {
        "content": "<p>This  still leaves the goal <code>⊢ List.headI (bits n) = List.head! (bits n)</code> which is solved by rfl<br>\nseems like there needs to be a simp lemma stating these are equal<br>\neither that or we should start using <code>headI</code> instead of mixing <code>headI</code> and <code>head!</code></p>",
        "id": 319924227,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1673082554
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"382349\">Calvin Lee</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60data.2Enat.2Ebitwise.60/near/319924227\">said</a>:</p>\n<blockquote>\n<p>either that or we should start using <code>headI</code> instead of mixing <code>headI</code> and <code>head!</code></p>\n</blockquote>\n<p>Yeah I don't think we should be using <code>head!</code> at all, really; where did that come from?</p>",
        "id": 319932875,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673087088
    },
    {
        "content": "<p>Oh huh apparently we decided Lean 3's <code>head</code> maps to <code>head!</code> not <code>headI</code>; is that really right?</p>",
        "id": 319933715,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673087505
    },
    {
        "content": "<p>Some folks looked at what lean 4 had and thought that <code>head</code> should map to <code>head!</code></p>",
        "id": 319933892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673087580
    },
    {
        "content": "<p>Is that because <code>headI</code> didn't exist? I see it is in the invisible folder Mathlib.Init</p>",
        "id": 319933948,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673087601
    },
    {
        "content": "<p>yes</p>",
        "id": 319933955,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673087606
    },
    {
        "content": "<p><code>getI_zero_eq_head!</code> is just strange</p>",
        "id": 319933970,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673087620
    },
    {
        "content": "<p>I mean, given that <code>headI</code> is there too</p>",
        "id": 319933989,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673087629
    },
    {
        "content": "<p>yeah I think there is some cleanup to be had</p>",
        "id": 319933998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673087636
    },
    {
        "content": "<p>Just asking as I was probably the one who put <code>head!</code> in that file, what is the reason to prefer <code>headI</code> over <code>head!</code>? In what use cases is it better to silently use a default instead of doing so with a panic?</p>",
        "id": 319934920,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1673088094
    },
    {
        "content": "<p>I realize that using both is wrong. My question is why not <code>head!</code> always?</p>",
        "id": 319935000,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1673088125
    },
    {
        "content": "<p>why would it be wrong to use a default?</p>",
        "id": 319935017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673088145
    },
    {
        "content": "<p>it is only if you assume that [] means \"error\" that it would even make sense to panic</p>",
        "id": 319935086,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673088173
    },
    {
        "content": "<p>if the list represents a finitely supported function then I might just want the value <code>default</code> out of range</p>",
        "id": 319935166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673088218
    },
    {
        "content": "<p>I mean in my own code I would either use <code>head!</code> (if I am sure there is a head but don't want to bother to prove this) or <code>headD</code> and specify what I want as fallback. It is just that <code>headI</code> is very non-local.</p>",
        "id": 319935248,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1673088246
    },
    {
        "content": "<p><code>headI</code> is a shorter way to write <code>headD default</code></p>",
        "id": 319935288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673088269
    },
    {
        "content": "<p>because <code>default</code> is very often the thing you want to use as a default</p>",
        "id": 319935319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673088284
    },
    {
        "content": "<p><code>head!</code> is one of those functions that will be called a mistake in the future (and in the present, if you listen to the right people)</p>",
        "id": 319935391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673088333
    },
    {
        "content": "<p>I guess in time I will see many cases of calling <code>default</code> (so far I usually know what I want as default).</p>",
        "id": 319935477,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1673088368
    },
    {
        "content": "<p>There is nothing wrong with using <code>head!</code> when you know the list is nonempty, and you aren't interested in proving things about your code</p>",
        "id": 319935525,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673088406
    },
    {
        "content": "<p>I think of functions like <code>head!</code> as a compromise between proving correctness and silent unexpected behaviour.</p>",
        "id": 319935559,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1673088421
    },
    {
        "content": "<p>If you are going to prove things then you won't use <code>head!</code> in the first place. So lemmas about <code>head!</code> are sort of weird.</p>",
        "id": 319935591,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673088436
    },
    {
        "content": "<p>while I generally agree with that, in large scale programs it can get problematic to argue that a program doesn't panic</p>",
        "id": 319935661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673088482
    },
    {
        "content": "<p>this is a problem in rust for some applications</p>",
        "id": 319935744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673088526
    },
    {
        "content": "<p>it's kind of a false dichotomy to say \"either you want to prove things or you don't\" and then put programmers on the other side of that line</p>",
        "id": 319935988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673088636
    },
    {
        "content": "<p>Given Godel-Turing-Church etc it will be a pretty silly dichotomy anyway.</p>",
        "id": 319936127,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1673088719
    },
    {
        "content": "<p>Sure, I don't mean <code>head!</code> is the right tool for every case.</p>",
        "id": 319936134,
        "sender_full_name": "Reid Barton",
        "timestamp": 1673088721
    },
    {
        "content": "<p>it is especially problematic when you use it in foundational things (looking at you haskell <code>list.head</code>) because those permeate the ecosystem and make it so that everything of interest has a dependency that panics</p>",
        "id": 319936406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673088833
    },
    {
        "content": "<p>I guess I tended to think of <code>Inhabited</code> as <em>non-empty</em>, but that is the typeclass <code>NonEmpty</code>. If one thinks of <code>Inhabited</code> as <em>based</em> (i.e., with base point) it becomes natural to use <code>getI</code>, <code>headI</code> etc.</p>",
        "id": 319936814,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1673089054
    },
    {
        "content": "<p>But as a mathematician I would say the typeclass should be called <code>Based</code> in that case.</p>",
        "id": 319936923,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1673089100
    },
    {
        "content": "<p>I think we usually use the term <code>Pointed</code> for the mathematical notion</p>",
        "id": 319939804,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673090348
    },
    {
        "content": "<p>True, <code>pointed</code> is used. In topology one says based, e.g. \"based loop space\" versus \"free loop space\" maybe because \"pointed space\" sounds a bit weird, hence my bias.</p>",
        "id": 319942504,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1673091639
    },
    {
        "content": "<p>I guess the extra data is a basepoint, so there is a choice which part is dropped in making the adjective.</p>",
        "id": 319942618,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1673091712
    },
    {
        "content": "<p>On the flip side, with a vector space \"based\" sounds like with a basis, which would be confusing.</p>\n<p>The upshot is that I will update my mental view of <code>Inhabited</code>.</p>",
        "id": 319942984,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1673091879
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60data.2Enat.2Ebitwise.60/near/319933970\">said</a>:</p>\n<blockquote>\n<p><code>getI_zero_eq_head!</code> is just strange</p>\n</blockquote>\n<p>agree, changing to <code>getI_zero_eq_headI</code> which also solves the <code>simp</code> issue brought up in this thread</p>",
        "id": 319996902,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1673118140
    },
    {
        "content": "<p>just so I'm understanding the mathlib4 flow a little bit better<br>\nshould a fix like this be its own PR that is then merged back into the port PR?</p>",
        "id": 319996986,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1673118219
    },
    {
        "content": "<p>Is there any reason <code>Bool.and_assoc</code> and <code>Bool.or_assoc</code> from <code>Init.SimpLemmas</code> aren't marked as simp?<br>\nI just ported the <code>bitwise_assoc_tac</code> tactic, and had to add these two to the simp list to get all the goals to close</p>",
        "id": 320011343,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1673130221
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib4/pull/1404/commits/a7f5e50bff2ff558c14ed080cefc55c8e790c097\">https://github.com/leanprover-community/mathlib4/pull/1404/commits/a7f5e50bff2ff558c14ed080cefc55c8e790c097</a> for the relevant changes</p>",
        "id": 320011560,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1673130369
    },
    {
        "content": "<p>Associativity lemmas are usually not simp, but instead marked as simp locally when building the API.</p>",
        "id": 320015213,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673133512
    },
    {
        "content": "<p>So <code>local attribute [simp] Bool.or_assoc Bool.and_assoc</code> is likely the idiomatic solution</p>",
        "id": 320015252,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673133570
    },
    {
        "content": "<p>I got around it by changing the simp lemma list, which is fine with me<br>\nthis just appears to be a difference from mathlib where <code>band_assoc</code> and <code>bor_assoc</code> are simp</p>",
        "id": 320015810,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1673133995
    },
    {
        "content": "<p>Oh if they are simp in mathlib, then no problem.</p>",
        "id": 320016539,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673134599
    },
    {
        "content": "<p>one <code>sorry</code> left and this should be ready to land<br>\nit's a bit tricky through, since the last lemma runs <code>simp</code> on three different goals, and none really seem to succeed in lean4<br>\nwould be happy to let others take a look</p>",
        "id": 320025453,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1673142180
    },
    {
        "content": "<p>Ok, I decided to just manually prove the last lemma in this file, since the simplifier couldn't close it.</p>\n<p>The file should be ready to review<br>\ntests aren't passing though, because of <code>bit0</code> and <code>bit1</code> deprecation. Is there any way to get rid of these warnings?</p>",
        "id": 320031675,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1673148971
    },
    {
        "content": "<p><code>set_option linter.deprecated false</code> around any theorems using them</p>",
        "id": 320031718,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673149041
    }
]