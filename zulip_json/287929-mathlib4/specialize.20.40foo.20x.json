[
    {
        "content": "<p>Lean 3 and lean 4 parse <code>specialize</code> differently. In Lean 3, it is a term headed by a local constant, while in lean 4 it is <code>ident expr*</code>. The difference comes up around uses of <code>@</code> to change which variables are being provided implicitly; in lean 4 there is no place for this marker to go, and I would assume that it ignores binder modes and always acts like <code>@</code> is used.</p>",
        "id": 252428820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631092220
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Are you referring to the <code>specialize</code> tactic in Lean 3? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">The tactic `specialize h a₁ ... aₙ` works on local hypothesis `h`. The premises of this hypothesis, either universal quantifications or non-dependent implications, are instantiated by concrete terms coming either from arguments `a₁` ... `aₙ`. The tactic adds a new hypothesis with the same name `h := h a₁ ... aₙ` and tries to clear the previous one.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">specialize</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">focus1</span> <span class=\"bp\">$</span>\n<span class=\"k\">do</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">i_to_expr</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">expr.get_app_fn</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n   <span class=\"k\">if</span> <span class=\"n\">h.is_local_constant</span>\n   <span class=\"k\">then</span> <span class=\"n\">tactic.note</span> <span class=\"n\">h.local_pp_name</span> <span class=\"n\">none</span> <span class=\"n\">e</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">tactic.clear</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">rotate</span> <span class=\"mi\">1</span>\n   <span class=\"k\">else</span> <span class=\"n\">tactic.fail</span> <span class=\"s2\">\"specialize requires a term of the form `h x_1 .. x_n` where `h` appears in the local context\"</span>\n</code></pre></div>\n<p>If yes, we can add this tactic to Lean 4. We can use a similar parser when we add it.</p>",
        "id": 252463047,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1631109167
    },
    {
        "content": "<p>Just added the <code>specialize</code> tactic to Lean 4:<br>\n<a href=\"https://github.com/leanprover/lean4/blob/master/tests/lean/run/specialize1.lean\">https://github.com/leanprover/lean4/blob/master/tests/lean/run/specialize1.lean</a></p>",
        "id": 252476523,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1631113388
    },
    {
        "content": "<p>It's great to see the tactics slowly appearing, especially the ones I tell to the undergraduates!</p>",
        "id": 252487459,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631117185
    }
]