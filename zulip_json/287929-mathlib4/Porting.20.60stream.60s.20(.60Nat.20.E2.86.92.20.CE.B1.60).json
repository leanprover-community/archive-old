[
    {
        "content": "<p>Original discussion in <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/infinite.20lists\">#lean4 &gt; infinite lists</a>.</p>\n<p>I ported the <code>stream</code> type from <a href=\"https://github.com/leanprover-community/mathlib/tree/master/src/data/stream/defs.lean\"><code>mathlib/data/stream/defs.lean</code></a> and <a href=\"https://github.com/leanprover-community/mathlib/tree/master/src/data/stream/init.lean\"><code>mathlib/data/stream/init.lean</code></a> which encodes streams as functions over discrete time (<code>Nat → α</code>).</p>\n<ul>\n<li><a href=\"https://github.com/AdrienChampion/mathlib4/tree/streams/Mathlib/Data/FStream\">https://github.com/AdrienChampion/mathlib4/tree/streams/Mathlib/Data/FStream</a></li>\n</ul>\n<p>If deemed worth it, I would be interested in contributing this code to mathlib4. I wrote it as an exercise: naming the stream type <code>FStream</code> might not have been a good idea, and commits (all two of them) do not follow lean's commit conventions, but that's easily fixed.</p>",
        "id": 282638143,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1652793408
    },
    {
        "content": "<p>Not sure about this, but I'm guessing this will be covered by synport. Are you aware of the general <a href=\"https://leanprover-community.github.io/blog/posts/intro-to-mathport/\">porting strategy</a> for mathlib4?</p>",
        "id": 282674863,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1652807623
    },
    {
        "content": "<p>Well in the original discussion <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> pointed to the ported version of these files</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/Data/Stream/Defs.lean\">https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/Data/Stream/Defs.lean</a></li>\n<li><a href=\"https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/Data/Stream/Init.lean\">https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/Data/Stream/Init.lean</a></li>\n</ul>\n<p>I was then told that they would most likely not work right away, or at least the <code>Init</code>file, because of the dependency on <code>tactic.ext</code>. The port itself was initially more of an exercise than anything for me, so I did not investigate much.</p>\n<p>All I can say is that I was using the ported <code>Init.lean</code> and went back to the Lean 3 version when I ran into a few theorems/proofs that did not make sense. I don't remember precisely what the problem was but I can re-discover it if you want more details (I vaguely remember notation clashes or something like that but I'm not sure)</p>",
        "id": 282705008,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1652820659
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Porting.20.60stream.60s.20.28.60Nat.20.E2.86.92.20.CE.B1.60.29/near/282674863\">said</a>:</p>\n<blockquote>\n<p>Not sure about this, but I'm guessing this will be covered by synport. Are you aware of the general <a href=\"https://leanprover-community.github.io/blog/posts/intro-to-mathport/\">porting strategy</a> for mathlib4?</p>\n</blockquote>\n<p>To address your question no, I was not aware of this page. Thank you for mentioning it I'll read this asap</p>",
        "id": 282705140,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1652820723
    },
    {
        "content": "<p>Also, my version includes Lean-4-ifying some aspects that (I assume) synport would not cover. (Slightly) more documentation is one aspect, but I'm thinking more of defining functions in the appropriate namespace for accessibility and <code>val.fun args</code> notation. For instance the original version has <code>appendStream : List -&gt; stream a -&gt; stream a</code> which I changed to <code>List.appendStream</code>, and added <code>FStream.prependList</code>.</p>",
        "id": 282706086,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1652821165
    },
    {
        "content": "<p>Admittedly there are few situations like that in the port</p>",
        "id": 282706427,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1652821274
    },
    {
        "content": "<p>I think we should try not to make any naming changes for things that already exist, because this makes downstream porting a lot harder. If your innovations are possible to do in lean 3 as well as lean 4, it seems better to submit them first to mathlib and then port it to mathlib4.</p>",
        "id": 282791247,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652882133
    },
    {
        "content": "<p>Perhaps we should also back-port the new name, since <code>stream</code> is taken</p>",
        "id": 282791379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652882184
    },
    {
        "content": "<p>I understand. Sadly, I have virtually no experience with Lean 3 and not enough time to get into it for the sake of this (very minor) contribution :/</p>",
        "id": 283066924,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1653052307
    },
    {
        "content": "<p>Thank you all for the feedback though!</p>",
        "id": 283066991,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1653052327
    }
]