[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/pull/1424\">#1424</a>, the linter is unhappy due to e.g. a dangerous instance in <code>DistribMulActionHom.coe</code> ; fully typed it reads as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">DistribMulActionHom.coe.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">,</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">Monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"bp\">✝¹</span> <span class=\"o\">:</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"o\">:</span> <span class=\"n\">DistribMulAction</span> <span class=\"n\">M</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"o\">:</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst</span><span class=\"bp\">✝⁴</span> <span class=\"o\">:</span> <span class=\"n\">DistribMulAction</span> <span class=\"n\">M</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→+</span><span class=\"o\">[</span><span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→+</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Looking around in Zulip gave me the impression that this is usually fixed by making things outParams, so writing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">&lt;|</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddMonoid</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">AddMonoid</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DistribMulAction</span> <span class=\"n\">M</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DistribMulAction</span> <span class=\"n\">M</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→+</span><span class=\"o\">[</span><span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→+</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>However, the complaint of the linter remains unchanged, being</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> The `dangerousInstance` linter reports:</span>\n<span class=\"cm\">SOME INSTANCES ARE DANGEROUS</span>\n<span class=\"cm\">During type-class search, they produce subgoals like `Group ?M`.</span>\n<span class=\"cm\">Try marking the dangerous arguments as implicit instead. -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">coe</span> <span class=\"c\">/-</span><span class=\"cm\"> generates subgoals with metavariables: argument 4 inst✝⁴ : Monoid ?M -/</span>\n</code></pre></div>\n<p>What is the approach here?</p>",
        "id": 320326353,
        "sender_full_name": "Lukas Miaskiwskyi",
        "timestamp": 1673296648
    },
    {
        "content": "<p>Arguably we should first add a <code>FunLike</code> instance in the Lean3 code before porting</p>",
        "id": 320328369,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673297450
    }
]