[
    {
        "content": "<p><code>casesm</code> and <code>constructor_matching</code>/<code>constructorm</code> in mathlib4 are more forgiving when there is no match:</p>\n<p>mathlib3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">∧</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">constructor_matching</span> <span class=\"o\">[</span><span class=\"n\">_</span> <span class=\"bp\">∨</span> <span class=\"n\">_</span><span class=\"o\">],</span> <span class=\"c1\">-- error here. no match</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>mathlib4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructorm</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">∨</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"c1\">-- no error!</span>\n  <span class=\"n\">constructorm</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">∧</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">True.intro</span>\n</code></pre></div>\n<p>Is this what we want? I was tripped up by it while implementing <code>tauto</code>.</p>",
        "id": 321038909,
        "sender_full_name": "David Renshaw",
        "timestamp": 1673559419
    },
    {
        "content": "<p>No, tactics should generally not succeed if they didn't do anything.</p>",
        "id": 321039637,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1673559718
    },
    {
        "content": "<p>What about the <code>*</code> version of these tactics?<br>\nIn mathlib3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">∧</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">constructor_matching</span><span class=\"bp\">*</span> <span class=\"o\">[</span><span class=\"n\">_</span> <span class=\"bp\">∨</span> <span class=\"n\">_</span><span class=\"o\">],</span> <span class=\"c1\">-- no error</span>\n  <span class=\"n\">constructor_matching</span> <span class=\"o\">[</span><span class=\"n\">_</span> <span class=\"bp\">∧</span> <span class=\"n\">_</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">true.intro</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 321039877,
        "sender_full_name": "David Renshaw",
        "timestamp": 1673559820
    },
    {
        "content": "<p>This makes sense to me -- the <code>*</code> means \"zero or more times\".</p>",
        "id": 321039986,
        "sender_full_name": "David Renshaw",
        "timestamp": 1673559848
    },
    {
        "content": "<p>No strong opinion here. We generally want a \"one or more times\" tactic inside a begin-end block. But a \"zero or more times\" tactic is useful to define other tactics.</p>",
        "id": 321040469,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1673560040
    },
    {
        "content": "<p>Lean4 has the <code>try</code> tactic for 0 or 1 times, and <code>repeat</code> for zero or more times. Not sure if those existed in lean3 but they seem to cover most use cases nicely.</p>",
        "id": 321041583,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673560471
    },
    {
        "content": "<p>yes, they also exist in Lean 3</p>",
        "id": 321043134,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1673561093
    },
    {
        "content": "<p>It's confusing that <code>simp</code> in lean 4 succeeds if it does nothing</p>",
        "id": 321054455,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673566202
    },
    {
        "content": "<p>casesm/constructorm issue fixed in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1552\">https://github.com/leanprover-community/mathlib4/pull/1552</a></p>",
        "id": 321230280,
        "sender_full_name": "David Renshaw",
        "timestamp": 1673635033
    },
    {
        "content": "<p>just to clarify (because I was confused myself): this fixes the <code>constructorm</code>/<code>casesm</code> issue succeeding without progress, not <code>simp</code> succeeding without progress.</p>",
        "id": 321279860,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1673653727
    }
]