[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/993\">mathlib4#993</a> I ran into an issue which seems like a bug. The statement of <code>SetLike.exists</code> had massaged from <code>∃ x ∈ p, q ⟨x, ‹_›⟩</code> to <code>∃ (x : B) (h : x ∈ p), q ⟨x, ‹_›⟩</code>. The former worked in Lean 3 (and it expands to the latter).</p>",
        "id": 315702733,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1670972087
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> do you know what the expected behavior is here?</p>",
        "id": 315726787,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1670986230
    },
    {
        "content": "<p>As far as I'm aware we aspire in mathport to translate from <code>∃ x ∈ p</code> to <code>∃ (x : B) (h : x ∈ p)</code>, but don't always succeed, and don't currently have support for the former in lean4/mathlib4.</p>",
        "id": 315727505,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670986818
    },
    {
        "content": "<p>It's rather the opposite: mathport will expand all binders by default but it tries to use the existing binder collection support where possible for things like exists</p>",
        "id": 315728329,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670987435
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n<span class=\"k\">#check</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 315728480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670987554
    },
    {
        "content": "<p>Indeed, grepping for <code>∃.*:.*∈</code> turns up less than I remembered, and all the ones I looked at are necessary.</p>",
        "id": 315728775,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670987808
    },
    {
        "content": "<p>The reason why the original example doesn't work is because <code>∃ x ∈ p, q x</code> is now sugar for <code>∃ x, x ∈ p /\\ q x</code>, not <code>∃ x, ∃ h : x ∈ p, q</code></p>",
        "id": 315729660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670988559
    },
    {
        "content": "<p>Why was this syntactic sugar changed from mathlib3 to 4? I imagine it’ll break a lot of proofs during porting.</p>\n<p>How will Lean elaborate <code>∃ (x : A) (p x) (y : B) (q y), r x y</code> now? Will it be <code>∃ (h : p x)</code> or <code>p x ∧ ...</code>?</p>",
        "id": 315777271,
        "sender_full_name": "Winston Yin",
        "timestamp": 1671012082
    },
    {
        "content": "<p>Hmm, this is a bit annoying indeed, because there are some proofs that rely on swapping pairs of existential quantifiers.</p>",
        "id": 315785573,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671014498
    }
]