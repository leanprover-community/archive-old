[
    {
        "content": "<p>Mathlib.Init.Set.lean contains these lines:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">Subset</span> <span class=\"o\">(</span><span class=\"n\">s‚ÇÅ</span> <span class=\"n\">s‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s‚ÇÅ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">a</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s‚ÇÇ</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HasSubset</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">‚ü®</span><span class=\"n\">Set.Subset</span><span class=\"o\">‚ü©</span>\n</code></pre></div>\n<p>Mathlib.Data.Set.Basic.lean contains these lines:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">‚ü®</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">‚¶É</span><span class=\"n\">x</span><span class=\"o\">‚¶Ñ,</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">t</span><span class=\"o\">‚ü©</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HasSubset</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">‚ü®(</span><span class=\"bp\">¬∑</span> <span class=\"bp\">‚â§</span> <span class=\"bp\">¬∑</span><span class=\"o\">)‚ü©</span>\n</code></pre></div>\n<p>It appears to me that, as a result, sometimes \"subset\" gets interpreted with <code>‚àÄ {a}</code> and sometimes with <code>‚àÄ ‚¶Éx‚¶Ñ</code>.  For example, try this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"whnf\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">Lean.Elab.Tactic.withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">Lean.Elab.Tactic.getMainTarget</span>\n    <span class=\"k\">let</span> <span class=\"n\">w</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">Lean.Meta.whnf</span> <span class=\"n\">t</span>\n    <span class=\"n\">dbg_trace</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">whnf</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùí´</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">whnf</span>\n</code></pre></div>\n<p>In the first example, the output starts with <code>forall {{x : Nat}}</code>, and in the second it starts with <code>forall {a : Nat}</code>.  This seems confusing.  I suppose the differences in behavior will be rare, but occasionally \"subset\" will behave in inconsistent ways.  Shouldn't it be consistent?</p>",
        "id": 320332201,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1673298894
    },
    {
        "content": "<p>I think <code>Mathlib.Init.Set</code> was written before mathport was taought about semi-implicit brackets. So please change it, yes!</p>",
        "id": 320334981,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1673299901
    },
    {
        "content": "<p>I don't know how to do PRs.  Can someone else do it?</p>",
        "id": 320335718,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1673300196
    },
    {
        "content": "<p>Is there a reason for defining \"subset\" twice?</p>",
        "id": 320336515,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1673300559
    },
    {
        "content": "<p>No, this is weird too.</p>",
        "id": 320336601,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1673300604
    },
    {
        "content": "<p>There are two more duplications: instances of <code>Union</code> and <code>Inter</code> are defined in both files.  I suppose those are less of a problem, because the two definitions end up reducing to the same thing, so you won't have the kind of inconsistency that is happening with <code>HasSubset</code>.  But should these things only be defined once?</p>\n<p>I don't know Mathlib well enough to know what should be done about this, if anything.</p>",
        "id": 320720468,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1673448474
    },
    {
        "content": "<p>This is a remnant of the same duplication in Lean 3, I'm afraid.</p>",
        "id": 320720983,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1673448614
    },
    {
        "content": "<p>Here's what would make sense to me:</p>\n<ol>\n<li>Fix the definition of <code>Subset</code> in Mathlib.Init.Set.lean to use ‚¶É ‚¶Ñ rather than { }</li>\n<li>Remove the instances of <code>HasSubset</code>, <code>Union</code>, and <code>Inter</code> from Mathlib.Data.Set.Basic.lean, since they are duplicates of instances that already exist.</li>\n</ol>\n<p>But I don't know enough about Mathlib to know if that would cause problems.</p>",
        "id": 320722189,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1673448951
    },
    {
        "content": "<p>You can just change it and try building.</p>",
        "id": 320734382,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1673452046
    },
    {
        "content": "<p>I don't know how to do PRs.  If someone else thinks this change makes sense, perhaps they could do it?</p>",
        "id": 320738916,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1673453254
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Ya√´l Dillies</span>  No, I don't think the same duplication existed in Lean 3.  In Lean 3, the file core/init.data.set didn't define subset, union, or intersection.  Those definitions were only in mathlib/data.set.basic.  I think the duplication is the result of the fact that in Mathlib4, Mathlib/Init/Set.lean contains extra stuff that wasn't in Lean 3's core/init.data.set.  I'm not sure why that was done.</p>",
        "id": 321178096,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1673620938
    },
    {
        "content": "<p>I would guess this is junk left from the adhoc port</p>",
        "id": 321188680,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673623728
    },
    {
        "content": "<p>Should something be done to clean this up?  For a project I'm working on, it's really annoying that there are two definitions of subset that don't quite agree.</p>",
        "id": 321190434,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1673624197
    },
    {
        "content": "<p>Yes, just delete the ones that aren't there in mathlib3 and see what breaks</p>",
        "id": 321190726,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673624276
    },
    {
        "content": "<p>(and the best way to get something done is to do it yourself <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>)</p>",
        "id": 321190858,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1673624308
    },
    {
        "content": "<p>I've made an initial pass in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1550\">mathlib4#1550</a> but won't be able to babysit it in the coming days, please push fixes if you have time! :)</p>",
        "id": 321212815,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1673629863
    },
    {
        "content": "<p>Ah thank you I was about to do the same :)</p>",
        "id": 321215168,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1673630479
    },
    {
        "content": "<p>Thanks everyone!</p>",
        "id": 321215981,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1673630712
    },
    {
        "content": "<p>You were right that this could cause subtle problems: apparently Lean prefers to have the <code>‚â§</code> notation as primitive and then <code>‚äÜ</code> defined in terms of it, otherwise it won't accept <code>‚äÜ</code> hypotheses to <code>‚â§</code> theorems.</p>",
        "id": 321615312,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1673867865
    },
    {
        "content": "<p>Let's see if this fix doesn't cause further issues down the line...</p>",
        "id": 321615495,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1673867922
    }
]