[
    {
        "content": "<p>What's the correct syntax to unpack a structure in Lean4/Mathlib4?<br>\nFor instance, the lean3 code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">distrib_mul_action</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">distrib_mul_action</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">distrib_mul_action</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">×</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span><span class=\"n\">prod.distrib_smul</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>is converted by mathlib3port into</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Monoid</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddMonoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DistribMulAction</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">DistribMulAction</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">DistribMulAction</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">×</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">Prod.distribSmul</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>which doesn't work.</p>",
        "id": 316074906,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1671119568
    },
    {
        "content": "<p>Is it possible that the instance name has changed? That syntax should work otherwise.</p>",
        "id": 316075403,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1671119696
    },
    {
        "content": "<p>oh, that's probably it...</p>",
        "id": 316075560,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1671119739
    },
    {
        "content": "<p>the auto-generated name is <code>instDistribSMulProdInstAddZeroClassSum</code> <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 316075863,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1671119809
    },
    {
        "content": "<p>This reminds me of German lessons</p>",
        "id": 316075997,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671119842
    },
    {
        "content": "<p>I'd suggest you go back and give the instance an explicit name</p>",
        "id": 316076084,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1671119866
    },
    {
        "content": "<p>I asked this before re porting this file (group_theory/group_action/prod) and the answer was to keep the auto-generated name (which is how it's currently done in lean3)</p>",
        "id": 316076324,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1671119909
    },
    {
        "content": "<p>Or replacing the name by <code>inferInstanceAs (...)</code>, but I think we didn't like that?</p>",
        "id": 316076347,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1671119917
    },
    {
        "content": "<p>I think this is a real issue. <br>\nThese names get exponentially long, since they include other instance names occurring in the type. I'm worried that automatically generated instance names will get literally thousands of characters long...</p>",
        "id": 316076401,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1671119932
    },
    {
        "content": "<p>People have definitely been renaming instances as per Ruben's first suggestion, in other ported files.</p>",
        "id": 316076416,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671119935
    },
    {
        "content": "<p>Is there a consistent naming convention for instances in mathlib4?</p>",
        "id": 316076492,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1671119953
    },
    {
        "content": "<p>I think we've been doing all possible options :)</p>",
        "id": 316076494,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1671119953
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Syntax.20for.20unpacking.20structures/near/316076492\">said</a>:</p>\n<blockquote>\n<p>Is there a consistent naming convention for instances in mathlib4?</p>\n</blockquote>\n<p>I'm quite sure that is a no</p>",
        "id": 316076550,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1671119966
    },
    {
        "content": "<p>Also <code>{ ‹DivisionRing α›, (inferInstance : Semiring α) with }</code></p>",
        "id": 316076975,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1671120059
    },
    {
        "content": "<p>what's the naming convention for terms of prop-y typeclasses? E.g. <code>distribMulAction : DistribMulAction</code> seems natural to me, but is this correct?</p>",
        "id": 316082719,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1671121531
    },
    {
        "content": "<p>BTW, <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> if you don't mind, could you take a look at <a href=\"https://github.com/leanprover-community/mathlib4/pull/1056\">mathlib4#1056</a> to make sure I ported all the <code>to_additive</code> stuff properly?</p>",
        "id": 316084217,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1671121892
    },
    {
        "content": "<p>Yes, it looks good, besides current limitations of the <code>to_additive</code> attribute. Note that for most declarations you can even do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp, to_additive (reorder := 6)]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">pow_fst</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">p.fst</span> <span class=\"bp\">^</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"n\">smul_fst</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">prod.pow_fst</span> <span class=\"n\">Prod.pow_fst</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">prod.smul_fst</span> <span class=\"n\">Prod.smul_fst</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">prod.vadd_fst</span> <span class=\"n\">Prod.vadd_fst</span>\n\n<span class=\"kd\">@[simp, to_additive (reorder := 6)]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">pow_snd</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"n\">p.snd</span> <span class=\"bp\">^</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"n\">smul_snd</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">prod.pow_snd</span> <span class=\"n\">Prod.pow_snd</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">prod.smul_snd</span> <span class=\"n\">Prod.smul_snd</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">prod.vadd_snd</span> <span class=\"n\">Prod.vadd_snd</span>\n</code></pre></div>\n<p>then <code>to_additive</code> generates both the <code>smul</code> and the <code>vadd</code> lemma. It doesn't work for everything though, as discussed before. And the output of <code>to_additive?</code> is very misleading, since it only prints the proof term without the type of the lemma.</p>\n<p>I'll try to support the more general reordering of arguments, so that we can properly translate <code>pow_mk</code> and other lemmas.</p>",
        "id": 316087838,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1671122801
    },
    {
        "content": "<p>Yes I know I can cut things down, but I wanted to stay as close as possible to the mathlib3 file. I'll add a porting note note in the module doctring</p>",
        "id": 316088057,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1671122876
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Syntax.20for.20unpacking.20structures/near/316082719\">said</a>:</p>\n<blockquote>\n<p>what's the naming convention for terms of prop-y typeclasses? E.g. <code>distribMulAction : DistribMulAction</code> seems natural to me, but is this correct?</p>\n</blockquote>\n<p>I think that since <code>DistribMulAction M A : Type</code> is a structure at the end of the day, it makes sense to use <code>lowerCamelCase</code> for its terms/structure instances, in keeping with all other structure instances. The individual field projections (which have return types which are <code>Prop</code>s) are the things that will get named with <code>snake_case</code>. At least, that’s how it is under current naming conventions… :)</p>",
        "id": 316115141,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671130241
    },
    {
        "content": "<p>Also, as it happens, I had <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20How.20do.20you.20refer.20to.20instances.20in.20Lean4.3F\">this same issue with references to explicit instances</a> while porting!</p>\n<p>I wonder how widespread this issue will be during the port. It might be worth coming up with a standard way to rename instances (by at least making them shorter).</p>",
        "id": 316116096,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671130508
    },
    {
        "content": "<p>How have people who have renamed instances renamed them so far?</p>",
        "id": 316116122,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671130515
    },
    {
        "content": "<p>okay, maybe distrib_mul_action was a bad example since it's not actually prop-y (I thought it was a mixin on top of <code>mul_action</code>, but it's not as it extends it). A better example is something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/local_ring\">docs#local_ring</a></p>",
        "id": 316116574,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1671130656
    },
    {
        "content": "<p>The class will be called <code>LocalRing</code>, and it takes values in <code>Prop</code>, but it's still a class. Would terms be named <code>localRing</code> or <code>local_ring</code>?</p>",
        "id": 316116752,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1671130710
    },
    {
        "content": "<p>With Lean4 it seems like we use every single naming convention that exists. It's confusing.</p>",
        "id": 316116864,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1671130746
    },
    {
        "content": "<p>My vote is for <code>localRing</code> as opposed to <code>local_ring</code> in this case.</p>",
        "id": 316117165,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1671130831
    },
    {
        "content": "<p>They would be named <code>local_ring</code> according to current conventions! Terms of things which are <code>Prop</code>s are always <code>lower_snake_case</code>. I was a bit overeager saying “like all other structure instances”—for a second I assumed all structures were <code>Type</code>s 😅</p>",
        "id": 316117174,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671130834
    },
    {
        "content": "<p>(Of course, we <em>could</em> change the conventions—I’m just reporting how they work as written right now.)</p>",
        "id": 316117373,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671130885
    },
    {
        "content": "<p>I don't recall seeing anything about naming terms of structures all of whose fields are props.</p>",
        "id": 316117706,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1671130972
    },
    {
        "content": "<p>Right; but this doesn’t use that, does it? It just refers to the fact that <code>LocalRing … : Prop</code></p>",
        "id": 316117950,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671131049
    },
    {
        "content": "<p>It does. Classes are structures, and if all the fields of a structure are props, then the structure will take values in <code>Prop</code> as well</p>",
        "id": 316118244,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1671131154
    },
    {
        "content": "<p>The naming convention listed on the porting wiki mentions that theorem names are snake-case. Yes in some sense the fact that a given ring is local is a theorem, but in practice we declare these as instances.</p>",
        "id": 316118577,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1671131259
    },
    {
        "content": "<p>I see—I am indeed thinking of conversations I’ve had about this, not the naming convention per se! In those conversations it was said that all that matters is whether the type of something’s type is <code>Prop</code> or not, however it gets there. You’re right, this is not in fact clear from the naming conventions as written as I thought.</p>",
        "id": 316119144,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671131443
    },
    {
        "content": "<p><a href=\"#narrow/stream/287929-mathlib4/topic/.60Prop.60-valued.20field.20names\">This</a> is the conversation I’m thinking of</p>",
        "id": 316119471,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671131545
    },
    {
        "content": "<p>yup, I agree with <span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> as far as my current understanding of the naming convention. Instance or no, if it's a proof it is snake cased</p>",
        "id": 316119484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671131550
    },
    {
        "content": "<p>If you are going to be at the meeting we can also bring it up for discussion though</p>",
        "id": 316119622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671131600
    },
    {
        "content": "<p>Actually, reading it explicitly, this <em>is</em> intended to be covered by the naming convention, but I see the confusion. In the following</p>\n<blockquote>\n<ol>\n<li>Terms of <code>Prop</code>s (proofs, theorem names) are in snake_case.</li>\n</ol>\n</blockquote>\n<p>we could afford an “e.g.” in the parenthetical (since terms of things which are <code>Prop</code>s aren’t always thought of primarily as proofs, even if they technically are). I’ll put it there now…</p>",
        "id": 316120912,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671132008
    },
    {
        "content": "<p>Hmmm.... I think according to the naming conventions, the class should be called <code>LocalRing</code> (by 2 on the wiki), and terms of this class are terms of  som <code>Prop</code>, so they get snake_case by (1). <em>However</em>, by (5) this would lead to names like: <code>Field.to_localRing</code>, not <code>Field.to_local_ring</code>, or <code>i_am_a_localRing</code>, not <code>i_am_a_local_ring</code>.  (maybe this was already said above, but if it was I didn't parse it correctly.)</p>",
        "id": 316123383,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1671132819
    },
    {
        "content": "<p>I thought instances always matched defs</p>",
        "id": 316125934,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1671133676
    },
    {
        "content": "<p>I wish this was called IsLocalRing because it's a Prop</p>",
        "id": 316165486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671148878
    }
]