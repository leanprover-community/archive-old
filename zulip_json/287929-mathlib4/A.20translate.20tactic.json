[
    {
        "content": "<p>Thinking about it a bit more, if we had <code>translate</code>, <code>to_additive</code> could be described as</p>\n<ul>\n<li>additivise the statement of <code>mul_thm</code> to get the statement of <code>add_thm</code></li>\n<li>run <code>translate mul_thm</code> on <code>add_thm</code></li>\n</ul>",
        "id": 320544355,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673384625
    },
    {
        "content": "<p>It's basically just <code>exact_mod_cast</code> but with a different operator to <code>coe</code></p>",
        "id": 320544440,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673384648
    },
    {
        "content": "<p>And probably we'll want an additional argument to <code>translate</code> for it to know which dictionary to use.</p>",
        "id": 320544528,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673384682
    },
    {
        "content": "<p>Not sure what you mean by \"dictionary\"</p>",
        "id": 320544947,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673384847
    },
    {
        "content": "<p>I'm thinking of a dictionary as a set of lemmas to allow translating between, eg:</p>\n<ul>\n<li><code>set</code> → <code>finset</code></li>\n<li><code>list</code> → <code>array</code></li>\n<li>multiplicative world → additive world</li>\n<li>order theory → order theory again (but everything dualised)</li>\n<li>algebra → algebra again (but <code>a + b</code> → <code>b + a</code>)</li>\n<li>algebra → algebra again (but <code>a * b</code> → <code>b * a</code>)</li>\n</ul>",
        "id": 320545496,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673385091
    },
    {
        "content": "<p>This sounds to me like some kind of natural isomorphism stuff.</p>",
        "id": 320546037,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673385301
    },
    {
        "content": "<p>Yes, absolutely, a meta-theoretic one.</p>",
        "id": 320548800,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673386332
    },
    {
        "content": "<p>I'm quite surprised that this doesn't already exist! It sounds like a very natural abstraction, but I don't know how difficult implementing such a tactic would be.</p>",
        "id": 320549375,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673386566
    },
    {
        "content": "<p>My thinking is the way this would work, for two types <code>A</code> and <code>B</code></p>\n<ul>\n<li>Start with a lemma about a type <code>A</code></li>\n<li>Instantiate all the binders of a lemma with <code>B_to_A x</code></li>\n<li>Apply <code>A_to_B</code> around the outside of the outer <code>=</code> in the statement if there is one (TODO: recurse into iffs)</li>\n<li>Push the former inwards, and the latter outwards until they cross and cancel. The dictionary containing these types of lemma would be keyed by <code>(B_to_A, A_to_b)</code> or similar</li>\n<li>End up with a lemma about the type <code>B</code></li>\n</ul>",
        "id": 320549441,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673386592
    },
    {
        "content": "<p>When \"pushing\" in and out, that's where we'd use the lemmas mapping each operation over the isomorphism, presumably?</p>",
        "id": 320549721,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673386691
    },
    {
        "content": "<p>Yes, exactly</p>",
        "id": 320549772,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673386713
    },
    {
        "content": "<p>Things like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_opposite.op_mul\">docs#mul_opposite.op_mul</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/of_add_add\">docs#of_add_add</a></p>",
        "id": 320549881,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673386751
    },
    {
        "content": "<p>Note that in my explanation, I explicitly stated that <code>translate</code> shouldn't try to <em>generate</em> the statement. This is best done by specialised tools (the current <code>to_additive</code> dictionary) and might not have a single solution (in order theory there are exponentially many possible dualised statements).</p>",
        "id": 320550185,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673386852
    },
    {
        "content": "<p>Also note that we want to support more relations than just <code>=</code>, and not only relations. Eg <code>⊆</code>, <code>⊂</code>, <code>.nonempty</code></p>",
        "id": 320550290,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673386891
    },
    {
        "content": "<blockquote>\n<p>and might not have a single solution (in order theory there are exponentially many possible dualised statements).</p>\n</blockquote>\n<p>Can you give an example?</p>",
        "id": 320551103,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673387190
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/monotone.comp\">docs#monotone.comp</a> involves three orders, and two out of the three can be meaningfully dualised. which results in 4 lemmas.</p>",
        "id": 320551392,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673387300
    },
    {
        "content": "<p>Can you split this thread at what you think is an appropriate point? Arrays are far behind us...</p>",
        "id": 320551595,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673387380
    },
    {
        "content": "<p>While this discussion is taking place, can I add to the list of wishes also automation to prove results about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.trailing_degree\">docs#polynomial.trailing_degree</a>, from results about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.degree\">docs#polynomial.degree</a>?  <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 320551743,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1673387428
    },
    {
        "content": "<p>Hmm actually it seems that I can't...</p>",
        "id": 320551790,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673387455
    },
    {
        "content": "<p>19 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/Array\">#mathlib4 &gt; Array</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 320551838,
        "sender_full_name": "Notification Bot",
        "timestamp": 1673387480
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/A.20translate.20tactic/near/320549441\">said</a>:</p>\n<blockquote>\n<p>My thinking is the way this would work, for two types <code>A</code> and <code>B</code></p>\n<ul>\n<li>Start with a lemma about a type <code>A</code></li>\n<li>Instantiate all the binders of a lemma with <code>B_to_A x</code></li>\n<li>Apply <code>A_to_B</code> around the outside of the outer <code>=</code> in the statement if there is one (TODO: recurse into iffs)</li>\n</ul>\n</blockquote>\n<p>After applying your first three steps, would <code>aesop</code> be able to solve the resulting goal?</p>",
        "id": 320552134,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673387582
    },
    {
        "content": "<p>(after being taught the appropriate lemmas)</p>",
        "id": 320552191,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673387610
    },
    {
        "content": "<p>Oh yeah, Damiano, nice one.</p>",
        "id": 320552202,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673387616
    },
    {
        "content": "<p>I don't see Aesop being more useful than <code>simp only ...</code> here, but I could be mistaken</p>",
        "id": 320552325,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673387652
    },
    {
        "content": "<p>I think <code>aesop</code> is overkill here. We have a very well delimited domain.</p>",
        "id": 320552341,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673387654
    },
    {
        "content": "<p><code>simp only</code> sounds like a reasonable thing to use to perform the 4th step.</p>",
        "id": 320552657,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673387792
    },
    {
        "content": "<p>This doesn't seem like a particularly difficult tactic to write given all of the infrastructure - I'd be interested in trying to write (at least a prototype version of) it.</p>",
        "id": 320552779,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673387862
    },
    {
        "content": "<p>Step 4 alone would be a useful thing to prototype</p>",
        "id": 320553635,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673388208
    },
    {
        "content": "<p>To me, the first step (finding the correct <code>coe_inj</code>/<code>coe_subset</code>-like lemma and applying it) is the hardest.</p>",
        "id": 320553774,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673388249
    },
    {
        "content": "<p>It sounds like it to me too.</p>",
        "id": 320553822,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673388274
    },
    {
        "content": "<p>I think the tricky bit is building the lookup from \"push this application inwards / outwards\" to a list of the intended lemmas</p>",
        "id": 320553967,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673388345
    },
    {
        "content": "<p>Note that we have to be picky about the lemmas we provide <code>simp</code> with in the last step, as <code>coe_inj</code>/<code>coe_subset</code> are simp lemmas and risk reverting the goal to the original statement!</p>",
        "id": 320553983,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673388354
    },
    {
        "content": "<p>I think there's a lot of overlap with the norm_cast push/pull/elim framework here</p>",
        "id": 320554076,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673388384
    },
    {
        "content": "<p>I expect there to be wisdom to extract from <code>norm_cast</code>'s implementation.</p>",
        "id": 320554120,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673388403
    },
    {
        "content": "<p>Why am I even talking anymore? We clearly are the hive mind <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 320554203,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673388442
    },
    {
        "content": "<p>I may have some time tomorrow to look over this.</p>",
        "id": 320554207,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673388444
    },
    {
        "content": "<p>This also overlaps with the <code>push_hom</code>/<code>pull_hom</code> proposal</p>",
        "id": 320554212,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673388446
    },
    {
        "content": "<p>Yes, there might be a pair of generic <code>push</code>/<code>pull</code> tactics to extract from this as well.</p>",
        "id": 320554297,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673388484
    },
    {
        "content": "<p>I think probably a good step would just be writing out a list of all the sorts of lemmas we'd want to be able to push / pull, perhaps for:</p>\n<ul>\n<li><code>order_dual</code></li>\n<li><code>mul_opposite</code></li>\n<li><code>add_monoid_hom</code></li>\n</ul>",
        "id": 320554355,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673388495
    },
    {
        "content": "<p>I assume you mean functions rather than lemmas?</p>",
        "id": 320554578,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673388595
    },
    {
        "content": "<p>No, I mean lemmas. For the obvious push / pull actions in those areas, what lemmas would be valid things to apply</p>",
        "id": 320554676,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673388626
    },
    {
        "content": "<p>Oh \"(the sorts of lemmas we'd want) to be able to push\", not \"the sort of (lemmas we'd want to be able to push)\". Linear language be cursed.</p>",
        "id": 320554781,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673388686
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Array/near/320576366\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Array/near/320541677\">said</a>:</p>\n<blockquote>\n<p>Regarding <code>set</code> and <code>finset</code>, I found that <code>coe_inj.2 $ by { norm_cast, exact set.some_lemma }</code> (or the <code>coe_subset</code> version thereof) was a reliable way of proving <code>finset.some_lemma</code>. By now, there are many lemmas in mathlib I proved that way. So I think it is a sensible heuristic for implementing such a tactic.</p>\n</blockquote>\n<p>This is basically what the <code>norm_cast</code> tactic does, so I would say the tactic to do this already exists</p>\n</blockquote>\n<p>I'm not sure, no. <code>norm_cast</code> only goes one direction, and what happens here is that you first need to apply some lemmas in the <code>push_cast</code> direction, then some others in the <code>norm_cast</code> one.</p>",
        "id": 320623992,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673422626
    },
    {
        "content": "<p>Essentially, the diagram of possible cast normalisations is a square, and we're walking along three of its edges to deduce the fourth.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">set.X</span>  <span class=\"bp\">→</span> <span class=\"n\">finset.X</span>\n   <span class=\"bp\">↑</span>        <span class=\"bp\">↑</span>      <span class=\"n\">norm_cast</span>\n<span class=\"n\">set.X'</span> <span class=\"bp\">→</span> <span class=\"n\">finset.X'</span>\n</code></pre></div>",
        "id": 320624396,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673422695
    },
    {
        "content": "<p>In the vast majority of cases this is just something like <code>ext; simp</code></p>",
        "id": 320626797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673423156
    },
    {
        "content": "<p>the <code>ext</code> \"activates\" the simp lemmas, indicating that you want to go around the square</p>",
        "id": 320626935,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673423177
    },
    {
        "content": "<p>it would be a bad idea to go traversing that square without some explicit indication of such</p>",
        "id": 320627045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673423201
    },
    {
        "content": "<p>(unless you are in the context of a big closing tactic like <code>aesop</code>, where you can try stuff and roll back)</p>",
        "id": 320627303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673423253
    },
    {
        "content": "<p>Yes, I'm proposing we mark that information explicitly. And, no, <code>ext</code> won't cut it.</p>",
        "id": 320627324,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673423256
    },
    {
        "content": "<p>I haven't seen a convincing example of that</p>",
        "id": 320627409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673423276
    },
    {
        "content": "<p>Can you read the entire thread? I feel like you're missing context.</p>",
        "id": 320627417,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673423279
    },
    {
        "content": "<p>you yourself said that the proof is usually <code>apply ext_lemma; simp</code> or so</p>",
        "id": 320627613,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673423308
    },
    {
        "content": "<p>(in the thread from which you got my quote)</p>",
        "id": 320627794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673423347
    },
    {
        "content": "<p>I never said this, no. I rather said <code>rw ←norm_cast_lemma; norm_cast; simp</code></p>",
        "id": 320627817,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673423351
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.coe_subset\">docs#finset.coe_subset</a> is not an extensionality lemma, for example.</p>",
        "id": 320627954,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673423378
    },
    {
        "content": "<p>okay, either way it's a one liner already</p>",
        "id": 320628012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673423394
    },
    {
        "content": "<p>I don't see a motivation for writing a tactic here</p>",
        "id": 320628120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673423409
    },
    {
        "content": "<p>Well, it's a one-liner for the <code>set</code>/<code>finset</code> translation, but it's not for at least 4 of the other use cases I'm stating.</p>",
        "id": 320628728,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673423524
    },
    {
        "content": "<p>Simp lemmas do most of the work in all of those examples</p>",
        "id": 320629627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673423692
    },
    {
        "content": "<p><code>to_additive</code> is a lot of work to maintain and this sounds like it would be at least as complicated, if not more because you want it to apply to a bunch of very differently shaped domains</p>",
        "id": 320630141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673423784
    },
    {
        "content": "<p>The only thing that could feasibly cover all of those domains is a simp set, so we're back to <code>norm_cast</code></p>",
        "id": 320630478,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673423848
    },
    {
        "content": "<p>just make a macro for <code>simp [up]; simp [left]; simp [down]</code></p>",
        "id": 320630798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673423910
    },
    {
        "content": "<p>Another direction you might be interested in is to adapt locales (as seen in Isabelle). They seem to be quite good at implementing the kind of rewriting used by <code>to_additive</code> but in a more robust way. I don't know how effectively a basic implementation would mesh with existing Lean metaprogramming, but it's certainly worth mentioning as an alternative.</p>",
        "id": 320716872,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1673447529
    },
    {
        "content": "<p>I was thinking that an easy way to deal with the non-uniqueness of a goal is to perfom the rewriting lemmas on the hypothesis <em>and</em> the goal. Then they'll both be normalised to the same form, and the user just needs to make sure they write the goal in the way they'd like.</p>",
        "id": 320801718,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673472857
    },
    {
        "content": "<p>It also makes translating \"backwards\" just as easy as translating \"forwards\".</p>",
        "id": 320801768,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673472878
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/A.20translate.20tactic/near/320630478\">said</a>:</p>\n<blockquote>\n<p>The only thing that could feasibly cover all of those domains is a simp set, so we're back to <code>norm_cast</code></p>\n</blockquote>\n<p>Are are you saying that <code>norm_cast</code>itself could be used to do these sorts of simplifications for other domains like <code>Array&lt;-&gt;List</code>? Or just that you could get similar behavior using simp sets?</p>",
        "id": 321699781,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1673894500
    },
    {
        "content": "<p>To use <code>norm_cast</code> directly you need to be using things that are marked as <code>@[coe]</code></p>",
        "id": 321699909,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673894554
    },
    {
        "content": "<p>but it's a wrapper for simp with specific simp sets so you can make your own simp sets to do something with non-coes</p>",
        "id": 321699991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673894591
    },
    {
        "content": "<p>So we could have a macro which takes as arguments the appropriate simp sets.  Where if you pass it the <code>coe</code> simp sets, it behaves like norm_cast, but if you pass it other simp sets it could handle other isomporphisms?</p>",
        "id": 321700212,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1673894696
    },
    {
        "content": "<p>yes</p>",
        "id": 321700333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673894754
    },
    {
        "content": "<p>Ok that makes sense. I can give it a shot.  From a software engineering perspective, does it make sense to try to modify the <code>norm_cast</code> implementation to allow you to control the simp sets it is using, or does it make more sense to implement something from scratch?</p>",
        "id": 321700791,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1673894938
    },
    {
        "content": "<p>I think you should start by doing it from scratch (or rather, copy and paste) to make sure that it actually works as intended</p>",
        "id": 321701931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673895390
    }
]