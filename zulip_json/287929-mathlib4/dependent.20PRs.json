[
    {
        "content": "<p>I don't understand our workflow of, on the one hand, merging master into older PRs (versus rebasing) but, on the other hand, rebasing (and squashing) PRs onto master when they are merged. Once a PR has had master merged in, it seems to become impossible to tell what changes were intended to be part of the PR. How do people deal with this?</p>",
        "id": 319088813,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672689713
    },
    {
        "content": "<p>For example, in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1256\">mathlib4#1256</a>, the PR adds some files which were part of other PRs, and master has also added those files (by those PRs getting merged), but with different contents.</p>",
        "id": 319089140,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672689885
    },
    {
        "content": "<p>I guess I'll just assume the PR in question did not try to change those files, but this seems awkward in general</p>",
        "id": 319089436,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672690059
    },
    {
        "content": "<p>You can see from the diff with master that only two files were changed. Probably rebasing is better I guess, but I just use the mathlib3 workflow because it's all I know.</p>",
        "id": 319091128,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1672691127
    },
    {
        "content": "<p>I merged master into the open PRs</p>",
        "id": 319091246,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1672691205
    },
    {
        "content": "<p>I changed some global config on my git which...might be relevant here?</p>",
        "id": 319091252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672691211
    },
    {
        "content": "<p>There's not really a great way to do dependent PRs in github</p>",
        "id": 319091318,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1672691262
    },
    {
        "content": "<p>The right thing to do here is to merge master into any dependent PRs so that the diff view shows the right thing, before setting bors on the PR</p>",
        "id": 319094915,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672693660
    },
    {
        "content": "<p>Rebasing is possible too but usually requires a lot more work and for no payoff given that bors squashes everything</p>",
        "id": 319095010,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672693692
    },
    {
        "content": "<p>The problem is that merging master into PRs is likely to result in big merge conflicts, because of the rest of the workflow</p>",
        "id": 319095385,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672694001
    },
    {
        "content": "<p>It shouldn't do</p>",
        "id": 319096161,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672694549
    },
    {
        "content": "<p>In the cases where it does, there is a standard solution that always works</p>",
        "id": 319096195,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672694572
    },
    {
        "content": "<p>But also, I don't think github will even let you merge a PR if you don't solve those conflicts anyway?</p>",
        "id": 319096248,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672694598
    },
    {
        "content": "<p>I don't understand what you mean</p>",
        "id": 319096348,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672694647
    },
    {
        "content": "<p>Of course, there may be conflicts</p>",
        "id": 319096360,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672694659
    },
    {
        "content": "<p>It's quite likely if one PR is branched off another, and then the other PR has been merged after further changes</p>",
        "id": 319096489,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672694736
    },
    {
        "content": "<p>See my instructions <a href=\"#narrow/stream/113489-new-members/topic/Dependent.20PR.20-.20merge.20conflict/near/277015458\">here</a></p>",
        "id": 319096515,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672694760
    },
    {
        "content": "<p>It's a massive pain, but you <em>could</em> recreate the merge commit for the closed PR locally, and then merge it into the WIP branchâ€¦ (<em>cries in Pijul</em>)</p>",
        "id": 319151814,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1672737168
    },
    {
        "content": "<p>That's exactly what I describe in the link above, isn't it?</p>",
        "id": 319152250,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672737333
    },
    {
        "content": "<p>It is, sorry</p>",
        "id": 319155024,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1672738436
    },
    {
        "content": "<p>If I want to see changes relative to master, I either look at the diffs on github (which seems to pretty reliably get it right, unless an earlier dependent PR has been merged into master, but master hasn't been merged back to the PR branch), or merge master into my local copy of the PR branch and then <code>git diff</code>.</p>",
        "id": 319159841,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1672740307
    }
]