[
    {
        "content": "<p>I'm having trouble porting the following from mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">centroid_hom</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">map_mul_left'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">map_mul_left</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">],</span> <span class=\"c1\">-- squeeze gives simp only [map_mul_left, mul_add, add_monoid_hom.to_fun_eq_coe, add_monoid_hom.add_apply, coe_to_add_monoid_hom]</span>\n    <span class=\"n\">map_mul_right'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">map_mul_right</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">],</span> <span class=\"c1\">-- squeeze gives simp only [map_mul_right, add_mul, add_monoid_hom.to_fun_eq_coe, add_monoid_hom.add_apply, coe_to_add_monoid_hom]</span>\n    <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→+</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">⟩</span>\n</code></pre></div>\n<p>I messed around with it a bit and I currently have the following in mathlib4, which doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">CentroidHom</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">↦</span>\n    <span class=\"o\">{</span>\n      <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→+</span>\n          <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n      <span class=\"n\">map_mul_left'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">map_mul_left</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">to_fun_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">AddMonoidHom.add_apply</span><span class=\"o\">,</span> <span class=\"n\">coe_to_add_monoid_hom</span><span class=\"o\">]</span>\n      <span class=\"n\">map_mul_right'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">map_mul_right</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">to_fun_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">AddMonoidHom.add_apply</span><span class=\"o\">,</span> <span class=\"n\">coe_to_add_monoid_hom</span><span class=\"o\">]</span> <span class=\"o\">}⟩</span>\n</code></pre></div>",
        "id": 320401812,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1673340817
    },
    {
        "content": "<p>Which branch is this?</p>",
        "id": 320401919,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673340858
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1325\">mathlib4#1325</a></p>",
        "id": 320401979,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1673340896
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"570929\">@Maxwell Thum</span> You could do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">by</span>\n        <span class=\"k\">show</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">map_mul_left</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 320405427,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673342187
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Thanks; that and the analogous thing for <code>map_mul_right'</code> seem to work!</p>",
        "id": 320407333,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1673342844
    },
    {
        "content": "<p>In</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Eligible for `dsimp`</span>\n<span class=\"kd\">@[simp, norm_cast, nolint simpNF]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">coe_nsmul</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">CentroidHom</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>the <code>norm_cast</code> linter is telling me this is a badly shaped lemma. The infoview sees the lemma as <code>∀ {α : Type u_1} [inst : NonUnitalNonAssocSemiring α] (f : CentroidHom α) (n : ℕ), ↑(n • f) = ↑(n • f)</code>.</p>",
        "id": 320530154,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1673379450
    },
    {
        "content": "<p>should the rhs be n \\bub (\\u f)?</p>",
        "id": 320530358,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673379509
    },
    {
        "content": "<p><code>n \\bub (\\u= f)</code> works</p>",
        "id": 320533735,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1673380647
    },
    {
        "content": "<p>There's a comment in the file</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Making `centroid_hom` an old structure will allow the lemma `to_add_monoid_hom_eq_coe`</span>\n<span class=\"c1\">-- to be true by `rfl`. After upgrading to Lean 4, this should no longer be needed</span>\n<span class=\"c1\">-- because eta for structures should provide the same result.</span>\n</code></pre></div>\n<p>Does this mean I should just remove <code>to_add_monoid_hom_eq_coe</code> altogether?</p>",
        "id": 320546476,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1673385479
    },
    {
        "content": "<p>Old structures are not a thing in Lean 4. Please delete this comment.</p>",
        "id": 320548968,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673386408
    },
    {
        "content": "<p><code>simpNF</code> gives me </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">CentroidHom.to_fun_eq_coe</span> <span class=\"c\">/-</span><span class=\"cm\"> Left-hand side simplifies from</span>\n<span class=\"cm\">  ↑↑f.toAddMonoidHom</span>\n<span class=\"cm\">to</span>\n<span class=\"cm\">  ↑↑↑f</span>\n<span class=\"cm\">using</span>\n<span class=\"cm\">  simp only [CentroidHom.to_add_monoid_hom_eq_coe]</span>\n<span class=\"cm\">Try to change the left-hand side to the simplified term!</span>\n<span class=\"cm\"> -/</span>\n</code></pre></div>\n<p>for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">to_fun_eq_coe</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">CentroidHom</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">f.toFun</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">centroid_hom.to_fun_eq_coe</span> <span class=\"n\">CentroidHom.to_fun_eq_coe</span>\n</code></pre></div>\n<p>but when I change <code>f.toFun</code> to <code>↑↑↑f</code>, it becomes a tautology. Does this mean the lemma is redundant?</p>",
        "id": 320550947,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1673387134
    },
    {
        "content": "<p><code>simpNF</code> also gives me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">CentroidHom.coe_nat_cast</span> <span class=\"c\">/-</span><span class=\"cm\"> LINTER FAILED:</span>\n<span class=\"cm\">simplify fails on left-hand side:</span>\n<span class=\"cm\">maximum recursion depth has been reached (use `set_option maxRecDepth &lt;num&gt;` to increase limit) -/</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">CentroidHom.coe_int_cast</span> <span class=\"c\">/-</span><span class=\"cm\"> LINTER FAILED:</span>\n<span class=\"cm\">simplify fails on left-hand side:</span>\n<span class=\"cm\">maximum recursion depth has been reached (use `set_option maxRecDepth &lt;num&gt;` to increase limit) -/</span>\n</code></pre></div>\n<p>for<br>\n<code> theorem coe_nat_cast (n : ℕ) : ⇑(n : CentroidHom α) = n • (CentroidHom.id α) </code><br>\nand<br>\n<code> theorem coe_int_cast (z : ℤ) : ⇑(z : CentroidHom α) = z • (CentroidHom.id α) </code><br>\nrespectively.</p>",
        "id": 320551947,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1673387522
    },
    {
        "content": "<p>For <code>coe_nat_cast</code> and <code>coe_int_cast</code>, is Lean caught in a loop on <code>\\u=</code>?</p>",
        "id": 320560394,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1673391072
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"570929\">Maxwell Thum</span> <a href=\"#narrow/stream/287929-mathlib4/topic/help.20wanted.20porting.20Algebra.2EHom.2ECentroid/near/320550947\">said</a>:</p>\n<blockquote>\n<p><code>simpNF</code> gives me </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">CentroidHom.to_fun_eq_coe</span> <span class=\"c\">/-</span><span class=\"cm\"> Left-hand side simplifies from</span>\n<span class=\"cm\">  ↑↑f.toAddMonoidHom</span>\n<span class=\"cm\">to</span>\n<span class=\"cm\">  ↑↑↑f</span>\n<span class=\"cm\">using</span>\n<span class=\"cm\">  simp only [CentroidHom.to_add_monoid_hom_eq_coe]</span>\n<span class=\"cm\">Try to change the left-hand side to the simplified term!</span>\n<span class=\"cm\"> -/</span>\n</code></pre></div>\n<p>for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">to_fun_eq_coe</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">CentroidHom</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">f.toFun</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">centroid_hom.to_fun_eq_coe</span> <span class=\"n\">CentroidHom.to_fun_eq_coe</span>\n</code></pre></div>\n<p>but when I change <code>f.toFun</code> to <code>↑↑↑f</code>, it becomes a tautology. Does this mean the lemma is redundant?</p>\n</blockquote>\n<p>I looked at the porting wiki again and I guess the lemma was a tautology to begin with, so I removed it.</p>",
        "id": 320570015,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1673396501
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"570929\">Maxwell Thum</span> <a href=\"#narrow/stream/287929-mathlib4/topic/help.20wanted.20porting.20Algebra.2EHom.2ECentroid/near/320551947\">said</a>:</p>\n<blockquote>\n<p><code>simpNF</code> also gives me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">CentroidHom.coe_nat_cast</span> <span class=\"c\">/-</span><span class=\"cm\"> LINTER FAILED:</span>\n<span class=\"cm\">simplify fails on left-hand side:</span>\n<span class=\"cm\">maximum recursion depth has been reached (use `set_option maxRecDepth &lt;num&gt;` to increase limit) -/</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">CentroidHom.coe_int_cast</span> <span class=\"c\">/-</span><span class=\"cm\"> LINTER FAILED:</span>\n<span class=\"cm\">simplify fails on left-hand side:</span>\n<span class=\"cm\">maximum recursion depth has been reached (use `set_option maxRecDepth &lt;num&gt;` to increase limit) -/</span>\n</code></pre></div>\n<p>for<br>\n<code> theorem coe_nat_cast (n : ℕ) : ⇑(n : CentroidHom α) = n • (CentroidHom.id α) </code><br>\nand<br>\n<code> theorem coe_int_cast (z : ℤ) : ⇑(z : CentroidHom α) = z • (CentroidHom.id α) </code><br>\nrespectively.</p>\n</blockquote>\n<p>I ended up just telling <code>simpNF</code> to ignore these. Problem solved, I guess?</p>",
        "id": 320572697,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1673398049
    },
    {
        "content": "<p>Please leave a porting note every time you deviate from the script</p>",
        "id": 320878373,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673512370
    }
]