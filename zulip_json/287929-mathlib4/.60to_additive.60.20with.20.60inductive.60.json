[
    {
        "content": "<p>While trying to port <code>Deprecated.Submonoid</code>, I ran into troube with some <code>inductive</code> that has a <code>to_additive</code>, see <a href=\"https://github.com/leanprover-community/mathlib4/pull/1666\">mathlib4#1666</a>.<br>\nFor </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">closure.IsSubmonoid</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsSubmonoid</span> <span class=\"o\">(</span><span class=\"n\">Closure</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>there is an error is <code>unknown constant 'AddMonoid.InClosure.one'</code>. Above we defined the corresponding  <code>AddMonoid.InClosure.zero</code>, but it appears that <code>to_additive</code> is not finding it. What can be done about it?<br>\nLooking in the to_additive-Tactic, I find<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/3fbdae49475528e1e4014189f98d217e67ece6da/Mathlib/Tactic/ToAdditive.lean#L27-L29\">https://github.com/leanprover-community/mathlib4/blob/3fbdae49475528e1e4014189f98d217e67ece6da/Mathlib/Tactic/ToAdditive.lean#L27-L29</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">The</span> <span class=\"kn\">attribute</span> <span class=\"bp\">`</span><span class=\"n\">to_additive</span><span class=\"bp\">`</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">used</span> <span class=\"n\">to</span> <span class=\"n\">automatically</span> <span class=\"n\">transport</span> <span class=\"n\">theorems</span>\n<span class=\"n\">and</span> <span class=\"n\">definitions</span> <span class=\"o\">(</span><span class=\"n\">but</span> <span class=\"n\">not</span> <span class=\"kd\">inductive</span> <span class=\"n\">types</span> <span class=\"n\">and</span> <span class=\"n\">structures</span><span class=\"o\">)</span> <span class=\"k\">from</span> <span class=\"n\">a</span> <span class=\"n\">multiplicative</span>\n<span class=\"n\">theory</span> <span class=\"n\">to</span> <span class=\"n\">an</span> <span class=\"n\">additive</span> <span class=\"n\">theory.</span>\n</code></pre></div>\n<p>Could <code>to_additive</code> handle inductive types on mathlib3?</p>",
        "id": 322826373,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1674376787
    },
    {
        "content": "<p>It should work if you declare the additive inductive type first, which you do. I'll investigate.</p>",
        "id": 323020569,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674480863
    },
    {
        "content": "<p>Fixed by <a href=\"https://github.com/leanprover-community/mathlib4/pull/1783\">mathlib4#1783</a>. If you want, you can already work around by adding something like <code>attribute [to_additive AddMonoid.InClosure.zero] Monoid.InClosure.one</code></p>",
        "id": 323030738,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674483379
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"313038\">Moritz Firsching</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60to_additive.60.20with.20.60inductive.60/near/322826373\">said</a>:</p>\n<blockquote>\n<p>Could <code>to_additive</code> handle inductive types on mathlib3?</p>\n</blockquote>\n<p>It couldn't (other than making the declaration twice and telling to_additive to substitute one for the other.<br>\nIt was probably technically do-able to make this change in lean 3, but was one of those things where waiting for lean 4 to make to_additive quality of life improvements seemed more sensible.</p>",
        "id": 323035352,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1674484541
    },
    {
        "content": "<p>It was used to insert translations from the constructors of the source to those of the target (and for structures it also inserted the projections).</p>",
        "id": 323037742,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674485098
    },
    {
        "content": "<p>In Lean 4 we should indeed be able to generate the additive inductive type automatically</p>",
        "id": 323037842,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674485122
    },
    {
        "content": "<p>Cool, managed to finish it:  <a href=\"https://github.com/leanprover-community/mathlib4/pull/1666\">mathlib4#1666</a></p>",
        "id": 323361392,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1674597621
    }
]