[
    {
        "content": "<p>I have a decent start on <code>Data.Fin.Basic</code> at <a href=\"https://github.com/leanprover-community/mathlib4/pull/1084\">mathlib4#1084</a>, but it's a monster file. I won't be able to work on it any more tonight, so if anyone else wants to jump in that's fine, just say so here so people don't duplicate work. A few notes:</p>\n<ol>\n<li>I have included a few things from the ad hoc ported file, which I have labeled with <code>section from_ad_hoc</code>. I felt these things might be necessary / helpful.</li>\n<li>There are some hiccups in several places because <del>(a) <code>Fin</code> is now a structure rather than a subtype and (b)</del> numerals work differently in Lean 4. This has caused some <code>rfl</code> proofs to break.</li>\n<li>There are some syntactically duplicated lemmas (because coercions are unfolded) which I have left in for the moment, but we can perhaps remove them (with <code>#align</code>s to the other version) before finishing the PR.</li>\n</ol>",
        "id": 316372563,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1671229941
    },
    {
        "content": "<p><code>fin</code> being a structure has been backported to mathlib by Gabriel.</p>",
        "id": 316373356,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671230363
    },
    {
        "content": "<p>So it would be interested to figure out exactly why the refls broke.</p>",
        "id": 316373399,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671230390
    },
    {
        "content": "<p>the <code>rfl</code>s broke because of numerals I think, not the structure.</p>",
        "id": 316373470,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1671230412
    },
    {
        "content": "<p>Sorry, I got confused because the structure fields in mathlib3 are <code>val</code> and <code>property</code>, so I just thought it was a <code>subtype</code>.</p>",
        "id": 316373520,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1671230436
    },
    {
        "content": "<p>Ah okay, that would make sense.</p>",
        "id": 316373539,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671230443
    },
    {
        "content": "<p>I've fixed a couple of errors, but my Lean time is up for today (maybe a I do a bit more in the evening).</p>",
        "id": 316391059,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1671242077
    },
    {
        "content": "<p>I've removed the <code>{a b : Fin n}</code> and added the hypotheses where necessary as it caused really weird errors</p>",
        "id": 316436288,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1671275209
    },
    {
        "content": "<p>also I've changed quite a few proofs from <code>rfl</code> or <code>ext rfl</code> to <code>ext; simp</code>. This is might be bad for performance, but since we have to port this file, I think it is acceptable for now</p>",
        "id": 316436617,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1671275275
    },
    {
        "content": "<p>I think simp is the right way to go here because things just aren't rfl anymore. As for a, b, did you see the Zulip thread about this?</p>",
        "id": 316449545,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1671280480
    },
    {
        "content": "<p>What was <code>rfl</code> and is no longer <code>rfl</code>?</p>",
        "id": 316455732,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671282934
    },
    {
        "content": "<p>Not at my machine, but search the file for \"was\" and you should see some examples.</p>",
        "id": 316469453,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1671288581
    },
    {
        "content": "<p>Whatever this means:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">from_ad_hoc</span>\n<span class=\"c1\">-- porting note: this comes from the ad hoc port of this file</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">@[to_additive_fixed_numeral]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">Fin.ofNat'</span> <span class=\"n\">x</span> <span class=\"n\">Fin.size_positive'</span>\n</code></pre></div>\n<p>, it has the property that <code>(0 : Fin n).val = 0</code> is no longer <code>rfl</code>.</p>",
        "id": 316508002,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671309358
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Lean 3</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Lean 4 (quoting from core)</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">zero_mod</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">%</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mod_eq</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span>\n    <span class=\"n\">simp_all</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>That's the problem.</p>",
        "id": 316508270,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671309498
    },
    {
        "content": "<p>Any chance we can get rid of the weird mod stuff in <code>Fin</code>?</p>",
        "id": 316508362,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671309589
    },
    {
        "content": "<p>This is also in core Lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">ofNat</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n.succ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">Nat.mod_lt</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_lt_succ</span> <span class=\"n\">_</span><span class=\"o\">)⟩</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">ofNat'</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Nat.mod_lt</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n\n<span class=\"bp\">...</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">no_index</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"n\">i</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">Fin.ofNat</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 316508675,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671309836
    },
    {
        "content": "<p>It would be nice if numeric literals were just an error if they cannot be proved to be in range--is that possible in Lean 4?</p>",
        "id": 316509789,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671310642
    },
    {
        "content": "<p>it is kind of possible, but we are really limited by the fact that you can't call tactics in typeclass search</p>",
        "id": 316510510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671311127
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, the stuff from the ad hoc port didn't break <code>rfl</code>, it was already broken (most likely by the stuff in core).</p>",
        "id": 316515386,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1671314711
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EFin.2EBasic/near/316449545\">said</a>:</p>\n<blockquote>\n<p>I think simp is the right way to go here because things just aren't rfl anymore. As for a, b, did you see the Zulip thread about this?</p>\n</blockquote>\n<p>No I did not. I saw that there was a zulip thread linked in the source, but I just went ahead and fixed the errors <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 316521340,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1671319210
    },
    {
        "content": "<p>Is there a reason mod can't be defined in a way that makes this rfl?</p>",
        "id": 317432650,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671735525
    },
    {
        "content": "<p>Lean 3 says that there is no reason why it can't be done, but maybe that's not the question you mean.</p>",
        "id": 317436243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671736914
    },
    {
        "content": "<p>Is that true? Lean 3 didn't use mod here so it was irrelevant how it was defined</p>",
        "id": 317450264,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671742549
    },
    {
        "content": "<p>But defining ofNat casewise on 0 1 and n.succ.succ would presumably solve this for 0 and 1</p>",
        "id": 317450643,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671742689
    },
    {
        "content": "<p>Oh I think I misunderstood what \"this\" referred to.</p>",
        "id": 317451777,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671743142
    },
    {
        "content": "<p>In this file there is a well-founded definition that no longer works. In the current state of the file we see:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[elab_as_elim]</span>\n<span class=\"kd\">def</span> <span class=\"n\">reverseInduction</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hlast</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">Fin.last</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">i.succ</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">castSucc</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"n\">i</span>\n  <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">Fin.last</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">_root_.cast</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">C</span> <span class=\"n\">hi.symm</span><span class=\"o\">)</span> <span class=\"n\">hlast</span>\n    <span class=\"k\">else</span> <span class=\"kd\">by</span>\n      <span class=\"n\">set</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_lt_succ</span> <span class=\"n\">i.2</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hi</span> <span class=\"o\">(</span><span class=\"n\">Fin.ext</span> <span class=\"n\">h</span><span class=\"o\">)⟩</span> <span class=\"k\">with</span> <span class=\"n\">hj</span>\n      <span class=\"k\">have</span> <span class=\"n\">wf</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">j.succ</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Fin.eta</span> <span class=\"n\">i</span> <span class=\"n\">i.isLt</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">this</span><span class=\"o\">]</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">tsub_lt_tsub_iff_left_of_le</span><span class=\"o\">]</span>\n        <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">succ_mk</span><span class=\"o\">,</span> <span class=\"n\">lt_add_iff_pos_right</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_le_iff</span><span class=\"o\">]</span>\n        <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">succ_mk</span><span class=\"o\">,</span> <span class=\"n\">add_le_add_iff_right</span><span class=\"o\">]</span>\n          <span class=\"n\">exact</span> <span class=\"n\">j.isLt.le</span>\n      <span class=\"k\">have</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">Fin.castSucc</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">Fin.ext</span> <span class=\"n\">rfl</span>\n      <span class=\"n\">exact</span> <span class=\"n\">_root_.cast</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">C</span> <span class=\"n\">hi.symm</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">reverseInduction</span> <span class=\"n\">hlast</span> <span class=\"n\">hs</span> <span class=\"n\">j.succ</span><span class=\"o\">))</span>\n<span class=\"n\">termination_by'</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>with errors on the last two lines. I tried as a blind fix to change the last line to <code>termination_by' ⟨_, (measure fun i : Fin (n + 1) =&gt; n + 1 - i).wf⟩</code> which does get rid of the error on the last line, but still doesn't satisfy the termination checker.</p>",
        "id": 319165797,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1672742456
    },
    {
        "content": "<p>The syntax for termination_by is now a bit different.  You can just write <code>termination_by _ =&gt; n + 1 - i</code> now (and don't need to use <code>measure</code> etc.).</p>",
        "id": 319278394,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672779357
    },
    {
        "content": "<p>I've pushed a fixed version of <code>reverseInduction</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[elab_as_elim]</span>\n<span class=\"kd\">def</span> <span class=\"n\">reverseInduction</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hlast</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">Fin.last</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">i.succ</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">castSucc</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">Fin.last</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">_root_.cast</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">C</span> <span class=\"n\">hi.symm</span><span class=\"o\">)</span> <span class=\"n\">hlast</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">let</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_lt_succ</span> <span class=\"n\">i.2</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hi</span> <span class=\"o\">(</span><span class=\"n\">Fin.ext</span> <span class=\"n\">h</span><span class=\"o\">)⟩</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n      <span class=\"n\">lt_of_eq_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.add_sub_add_right</span> <span class=\"bp\">..</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n        <span class=\"o\">(</span><span class=\"n\">Nat.sub_lt_sub_left</span> <span class=\"n\">i.2</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_succ_self</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n    <span class=\"k\">have</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">Fin.castSucc</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">Fin.ext</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">_root_.cast</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">C</span> <span class=\"n\">hi.symm</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">reverseInduction</span> <span class=\"n\">hlast</span> <span class=\"n\">hs</span> <span class=\"n\">j.succ</span><span class=\"o\">))</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 319278496,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672779390
    },
    {
        "content": "<p>Thanks Gabriel!</p>",
        "id": 319282566,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1672781075
    },
    {
        "content": "<p>I proposed a fix for <code>addCases</code> at <a href=\"https://github.com/leanprover-community/mathlib4/pull/1084#discussion_r1062398734\">https://github.com/leanprover-community/mathlib4/pull/1084#discussion_r1062398734</a> . Regarding <code>succAbove_zero</code> no longer being <code>refl</code>, it can be proved by <code>simp [succAbove]</code>, but is the issue that we want it to be <code>rfl</code> or has that ship sailed?</p>",
        "id": 319579579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672923356
    },
    {
        "content": "<p>Adding this to the top of the <code>Data.Fin.Basic</code> file seems to restore the old semantics of 0 and 1:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- we do not want this instance, and want `instOfNat`, the one that goes via `AddMonoidWithOne`, instead</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">Fin.instOfNatFinHAddNatInstHAddInstAddNatOfNat</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">succ_pos</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">Fin.ofNat</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>cc <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>.</p>",
        "id": 319679847,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672955848
    },
    {
        "content": "<p>what is that instance?</p>",
        "id": 319679908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672955881
    },
    {
        "content": "<p>is that from core?</p>",
        "id": 319679983,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672955897
    },
    {
        "content": "<p>You mean it's not obvious from the name? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.instOfNatFinHAddNatInstHAddInstAddNatOfNat#doc\">docs4#Fin.instOfNatFinHAddNatInstHAddInstAddNatOfNat</a></p>",
        "id": 319679993,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672955901
    },
    {
        "content": "<p>Yes</p>",
        "id": 319679995,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672955902
    },
    {
        "content": "<p>I see, is there something we can do with priorities to avoid it?</p>",
        "id": 319680044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672955927
    },
    {
        "content": "<p><code>attribute [-instance]</code> doesn't really work, that's local-only</p>",
        "id": 319680099,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672955950
    },
    {
        "content": "<p><del>Where's the instance implied by <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddMonoidWithOne?#doc\">docs4#AddMonoidWithOne?</a></del> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instOfNat#doc\">docs4#instOfNat</a></p>",
        "id": 319680137,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672955970
    },
    {
        "content": "<p>We should add <code>superCaliFragilisticExpialiDocious</code> to the end of every instance name, just because we can.</p>",
        "id": 319680157,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672955978
    },
    {
        "content": "<p>What's the Lean4 syntax for instance priority?</p>",
        "id": 319680412,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672956064
    },
    {
        "content": "<p><code>instance (priority := high)</code></p>",
        "id": 319680648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672956136
    }
]