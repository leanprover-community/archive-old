[
    {
        "content": "<p>Is there a place where we can see how further in mathlib mathport goes successfully?<br>\nI think some kind of progress report would help motivating the community. Example:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Progress report\n  total files:   28%\n  algebra:       35%\n  combinatorics: 10%\n  ...\n</code></pre></div>",
        "id": 275649332,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647522542
    },
    {
        "content": "<p><a href=\"https://twitter.com/andy_kelley/status/1503618085789466624\">https://twitter.com/andy_kelley/status/1503618085789466624</a> comes to mind for a similar (and apparently popular) example</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/andy_kelley/status/1503618085789466624\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/9df5ed49aca30c6d95d1ce7547a09031edf764db/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313436303332383637313638383838343233312f33547851475662375f6e6f726d616c2e6a7067\"></a><p>Zig self-hosted compiler progress report:\n* 185,470 lines of code\n* Behavior Tests Passing:\n  - LLVM: 973/1096 (89%)\n  - WASM: 706/1096 (64%)\n  - C: 657/1096 (60%)\n  - x86_64: 607/1096 (55%)\n  - arm: 409/1096 (37%)\n  - aarch64: 366/1096 (33%)</p><span>- Andrew Kelley (@andy_kelley)</span></div></div>",
        "id": 275652223,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647523902
    },
    {
        "content": "<blockquote>\n<p>Is there a place where we can see how further in mathlib mathport goes successfully?</p>\n</blockquote>\n<p>The elephant in the room is of course what progress means at this stage of the port.  I can only think of two axes which you can measure in percent at the moment: and that's the tactics and metaprograms (i.e., <code>@[to_additive]</code> and co.).</p>\n<p>It might be useful to create issues on the mathlib4 repo for that (like Ed has done for to_additive).  Then you automatically get a progress bar if you put the issues in projects.  Check this out as an example: <a href=\"https://github.com/leanprover-community/mathlib/projects\">https://github.com/leanprover-community/mathlib/projects</a></p>",
        "id": 275656564,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647525687
    },
    {
        "content": "<p>To me, progress is something along the lines of \"how many of the files mathport successfully translates?\".</p>\n<p>It is indeed possible to create issues and make projects on GitHub that will give us an idea of progress. But I find it kind of blurry. E.g. I can't have an idea of the impact caused by the implementation of a certain set of things (some tactics and/or tags etc).</p>\n<p>In other words, my notion of completeness of the port is \"we will be done when all files from mathlib are translated to Lean 4\". So my most straightforward question is: \"how many of them can we successfully translate <em>now</em>?\"</p>",
        "id": 275658575,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647526435
    },
    {
        "content": "<p>At a later point in the porting process, we should try to compile the synported files on their own (i.e., without the binport).  Then we might get progress information like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">files</span> <span class=\"n\">w</span><span class=\"bp\">/</span> <span class=\"n\">syntax</span> <span class=\"n\">errors</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"bp\">%</span>\n<span class=\"n\">files</span> <span class=\"n\">w</span><span class=\"bp\">/</span> <span class=\"n\">errors</span> <span class=\"k\">in</span> <span class=\"n\">proofs</span><span class=\"o\">:</span> <span class=\"mi\">99</span><span class=\"bp\">%</span>\n<span class=\"n\">files</span> <span class=\"n\">w</span><span class=\"bp\">/</span> <span class=\"n\">errors</span> <span class=\"k\">in</span> <span class=\"n\">defs</span> <span class=\"n\">and</span> <span class=\"n\">thm</span> <span class=\"n\">stmts</span><span class=\"o\">:</span> <span class=\"mi\">90</span><span class=\"bp\">%</span>\n<span class=\"n\">files</span> <span class=\"n\">w</span><span class=\"bp\">/</span><span class=\"n\">o</span> <span class=\"n\">errors</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"bp\">%</span>\n</code></pre></div>\n<p>I'm not sure it makes sense to try this yet (because almost all files still have errors in definitions), but if you're motivated it would be awesome to have infrastructure for testing (and measuring) ready for this experiment.  After to_additive is ported the number of errors should go down significantly.  On the mathport side, <a href=\"https://github.com/leanprover-community/mathport/pull/131\">mathport#131</a> and <a href=\"https://github.com/leanprover-community/mathport/pull/106\">mathport#106</a> are two other big issues that break lots of instances (and with that, lots of dependent definitions).</p>\n<p>This experiment will also require some modifications to core Lean.  One to address <a href=\"https://github.com/leanprover-community/mathport/pull/53\">mathport#53</a>.  Then we'll also need options to ignore errors (i.e., save the olean even if there are errors so that we can continue compiling).</p>",
        "id": 275658674,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647526463
    },
    {
        "content": "<p>After flag day, we'll most certainly need to fix up the ported files.  Only then do we really get a progress bar of the form \"how many files compile successfully\".</p>",
        "id": 275658929,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647526565
    },
    {
        "content": "<p>Thanks a lot for the explanation! I'll try to stick to the Mathport low-hanging fruits (as you say it) because they're on the verge of my understanding and are good challenges for me at the moment. <em>Maybe</em> when those are done I will be knowledgeable enough to study Mathport code base and play with the porting experiments</p>",
        "id": 275664423,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647528673
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> Thank you so much for all that you are doing! It's lovely to see everyone contributing in all these different places with all these different skills.</p>",
        "id": 275666667,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647529458
    },
    {
        "content": "<p>Is there some place where there is a description of the tactics (I see some described in MathLib for lean 3), or can some wiki be created to make this easy? For example, I know the <code>decide</code> tactic, but what is <code>decide!</code>? Also is <code>symm</code> just <code>apply Eq.symm</code>or something more (similarly for <code>trans</code>).</p>",
        "id": 276018612,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1647851635
    },
    {
        "content": "<p>I assume you know about <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html\">https://leanprover-community.github.io/mathlib_docs/tactics.html</a> ?</p>",
        "id": 276022356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647853885
    },
    {
        "content": "<p>The tactics in <code>Syntax.lean</code> are just the lean 3 tactics, although I made use of some editorial license to change the syntax to be more lean-4-ish in a few places. <code>decide!</code> is the lean 4 version of the <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#dec_trivial\"><code>dec_trivial!</code> tactic</a></p>",
        "id": 276022700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647854102
    },
    {
        "content": "<p>As <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#symmetry\">the documentation says</a>, the <code>symm(etry)</code> tactic is not just <code>apply Eq.symm</code>, it will apply any lemma marked with the <code>@[symm]</code> attribute, which is placed on theorems of the form <code>r a b -&gt; r b a</code> for a variety of relations <code>r</code></p>",
        "id": 276022881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647854220
    },
    {
        "content": "<p>Thanks. Yes, that link was what I meant by \"MathLib for lean 3\". <br>\nAre all tactics then Lean 3 tactics, but with modified names and sometimes syntax? In that case, could someone in the know add comments giving the older name (where it is not obvious).</p>",
        "id": 276025208,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1647855558
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/234\">I've made some progress with to_additive.</a> There are still lots of bugs and todos but the majority of the mathlib code is now ported. There is a test file which is still failing but some of them are working <a href=\"https://github.com/leanprover-community/mathlib4/blob/42dba0238c60197c456f16a5052a5e24e56235b0/test/toAdditive.lean\">https://github.com/leanprover-community/mathlib4/blob/42dba0238c60197c456f16a5052a5e24e56235b0/test/toAdditive.lean</a></p>",
        "id": 279142706,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1650076854
    },
    {
        "content": "<p>It would be good to get some eyes on it because the PR is really big now</p>",
        "id": 279142791,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1650076942
    },
    {
        "content": "<p>Is there a place where I can read up on the plans for porting and the progress that has been made?  I'm new not only to Lean but also to Zulip, and I struggle nagivating here.  I can see that there are lots of discussions of these questions, but I fail to see what consensus has emerged.  The <a href=\"https://github.com/leanprover-community/mathlib4\">github page for mathlib4</a> only says that the \"real\" port hasn't even started.</p>",
        "id": 287705881,
        "sender_full_name": "Marcus Zibrowius",
        "timestamp": 1656417953
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/blog/posts/intro-to-mathport/\">https://leanprover-community.github.io/blog/posts/intro-to-mathport/</a> is still reasonably up to date</p>",
        "id": 287706784,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1656418520
    },
    {
        "content": "<p>mathlib is now 910K lines of code ;-)</p>",
        "id": 287707332,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656418828
    },
    {
        "content": "<p>Technically that's over 700K :)</p>",
        "id": 287707609,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1656419011
    },
    {
        "content": "<p>Since the porting strategies are somewhat involved, here's the long story short: there's an automated method to port mathlib code except for the metaprogramming part, which was completely revamped in Lean 4. That is, linters, tactics, tags etc have to be done by hand.</p>\n<p>There are also things that have to be done in Lean 4 core to facilitate such automation, but in the meantime we're working on spreading the metaprogramming word because that's the bottleneck for the community side of the effort</p>",
        "id": 287707979,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1656419208
    },
    {
        "content": "<p>And then programming in Lean 4 is a requisite for understanding metaprogramming. So there are books being written on both ends</p>",
        "id": 287708212,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1656419334
    },
    {
        "content": "<p>This is the WIP book for functional programming in Lean 4: <a href=\"https://leanprover.github.io/functional_programming_in_lean/\">https://leanprover.github.io/functional_programming_in_lean/</a></p>\n<p>This is the WIP book for metaprogramming in Lean 4: <a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book\">https://github.com/arthurpaulino/lean4-metaprogramming-book</a></p>",
        "id": 287708689,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1656419595
    },
    {
        "content": "<p>Besides the excellent documentation being written, one other piece of news that's not in the blog post comes from <a href=\"https://leanprover.github.io/talks/lean-update-2022-06-15.pdf\">https://leanprover.github.io/talks/lean-update-2022-06-15.pdf</a> (page 6): There will be increased focus on the mathlib port after <a href=\"https://icerm.brown.edu/topical_workshops/tw-22-lean/\">LftCM 2022</a>.</p>",
        "id": 287709206,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1656419847
    }
]