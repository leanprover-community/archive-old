[
    {
        "content": "<p>I started this PR</p>",
        "id": 322586890,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674239061
    },
    {
        "content": "<p>I fixed ~60% of the errors in this file. But I need to stop now for a bit</p>",
        "id": 322598885,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674242974
    },
    {
        "content": "<p>I'm not going to work on this PR for the rest of this evening. Feel free to take over.</p>",
        "id": 322615078,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674248583
    },
    {
        "content": "<p>I pushed a few things, but now stopping as well</p>",
        "id": 322615178,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1674248614
    },
    {
        "content": "<p>working on this for a bit</p>",
        "id": 322620221,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674250448
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> had a mathlib3 PR that was intended to make this port easier?</p>",
        "id": 322620334,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674250501
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/18245\">#18245</a></p>",
        "id": 322620732,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674250643
    },
    {
        "content": "<p>i don't think it will affect the port trhat much</p>",
        "id": 322620885,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674250697
    },
    {
        "content": "<p>It changes the last proof to reduce dependencies. Are all dependencies ported now?</p>",
        "id": 322622069,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674251166
    },
    {
        "content": "<p>I think so?</p>",
        "id": 322622221,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674251255
    },
    {
        "content": "<p>One thing I'm noticing here is that in the order-dualled proofs, putting on <code>(α := αᵒᵈ)</code> speeds things up massively, so it's probably worth doing in all proofs of this form, even if they already typecheck. Named arguments is an amazing feature!</p>",
        "id": 322622525,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674251385
    },
    {
        "content": "<p>Another point of view: this used not to be slow; hopefully we can figure out why it has become slow :-(</p>",
        "id": 322623973,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674252009
    },
    {
        "content": "<p>from my completely uneducated guess, Lean4 really doesn't want to modify its guesses about the metavars, whilst lean3 was a bit more free</p>",
        "id": 322624169,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674252099
    },
    {
        "content": "<p>this again just comes from my experience with it and isn't backed by any sentiment but stuff like <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/sensible.20constructor.20for.20.60add_comm_group.60/near/322621160\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/sensible.20constructor.20for.20.60add_comm_group.60/near/322621160</a> doesn't help</p>",
        "id": 322624287,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674252132
    },
    {
        "content": "<p>It'd be interesting to find out if this is one of the many things improved by <a href=\"https://github.com/leanprover/lean4/pull/2003\">lean4#2003</a></p>",
        "id": 322624561,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674252253
    },
    {
        "content": "<p>is there an easy way to get some code with that branch and toy with it?</p>",
        "id": 322624873,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674252383
    },
    {
        "content": "<p>I'm going to work on <code>Data.Set.Finite</code>.</p>",
        "id": 322628372,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674253742
    },
    {
        "content": "<p>I've just done working on it, sorry for the weird merge commits. There's only few things left.</p>",
        "id": 322628673,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674253862
    },
    {
        "content": "<p>Did you push?</p>",
        "id": 322630489,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674254531
    },
    {
        "content": "<p>About <code>fintypeBUnionᵢ</code>: it seems that <code>simp</code> fails to use <code>Set.mem_toFinset</code> because <code>[Fintype (t _)]</code> is not a local instance. I'm going to add <code>Set.mem_toFinset'</code> that takes <code>{_ : Fintype s}</code> instead of <code>[Fintype s]</code>.</p>",
        "id": 322631042,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674254736
    },
    {
        "content": "<p>I can't just replace the old lemma because it breaks rewrites right-to-left.</p>",
        "id": 322631189,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674254782
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>  What is the correct way to fix this?</p>",
        "id": 322631283,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674254822
    },
    {
        "content": "<p>(BTW, should I tag someone else for questions like \"how does Lean work?\")</p>",
        "id": 322631369,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674254862
    },
    {
        "content": "<p>I'm fixing the rest (unused args etc)</p>",
        "id": 322632349,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674255250
    },
    {
        "content": "<p>Indeed, this used to work in Lean 3 because we didn't try to synthesize instances in simp if they were already filled in by unification. <a href=\"https://github.com/leanprover-community/lean/blob/34f41e59146bbda3b58adb23dff350c30093e02b/src/library/tactic/simp_lemmas.cpp#L1368\">https://github.com/leanprover-community/lean/blob/34f41e59146bbda3b58adb23dff350c30093e02b/src/library/tactic/simp_lemmas.cpp#L1368</a></p>",
        "id": 322632603,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674255370
    },
    {
        "content": "<p>What should we do in Lean 4?</p>",
        "id": 322633581,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674255831
    },
    {
        "content": "<p>Add lemmas with <code>{}</code> arguments or change something where we want to use this lemma in <code>simp</code>?</p>",
        "id": 322633682,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674255877
    },
    {
        "content": "<p>I'm not a fan of changing things to <code>{}</code> just to make simp happy (and break <code>rw [← ..]</code> in the process).</p>",
        "id": 322633763,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674255924
    },
    {
        "content": "<p>As a temporary workaround, I've duplicated a lemma.</p>",
        "id": 322633977,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674256034
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2ESet.2EFinite.20mathlib4.231734/near/322631042\">said</a>:</p>\n<blockquote>\n<p>About <code>fintypeBUnionᵢ</code>: it seems that <code>simp</code> fails to use <code>Set.mem_toFinset</code> because <code>[Fintype (t _)]</code> is not a local instance. I'm going to add <code>Set.mem_toFinset'</code> that takes <code>{_ : Fintype s}</code> instead of <code>[Fintype s]</code>.</p>\n</blockquote>\n<p>are these <code>Fintype (t _)</code>s only in the term, and they're not getting matched via unification as the hope was that in lean4 that's never necessary? what is the workaround, I agree</p>",
        "id": 322634153,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674256117
    },
    {
        "content": "<p>These <code>Fintype (t _)</code> are deduced from <code>h</code> guarded by <code>∃</code>.</p>",
        "id": 322634397,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674256223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2ESet.2EFinite.20mathlib4.231734/near/322632603\">said</a>:</p>\n<blockquote>\n<p>Indeed, this used to work in Lean 3 because we didn't try to synthesize instances in simp if they were already filled in by unification.</p>\n</blockquote>\n<p>I think this property extends far beyond simp; there are many cases in Lean 3 where we were happy to use unification instead of typeclass search. There was the thread I made a while back where <code>{ foo := 1, bar := 2}</code> used to use unification to find typeclass arguments for <code>my_structure.mk</code>, but now the notation only works if the unification matches inference</p>",
        "id": 322634749,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674256423
    },
    {
        "content": "<p>IIRC it's not that Lean 4 can't do the unification, it's that it makes the conscious decision to discard it unless it can solve the typeclass problem and the solution it finds is the same</p>",
        "id": 322634835,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674256459
    },
    {
        "content": "<p>Here's a different approach that works out-of-the-box:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fintypeBUnion</span><span class=\"bp\">ᵢ</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">toFinset</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">H</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">i.2</span><span class=\"o\">)</span>\n  <span class=\"n\">Fintype.ofFinset</span> <span class=\"o\">(</span><span class=\"n\">s.toFinset.attach.bunion</span><span class=\"bp\">ᵢ</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFinset</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 322634865,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674256477
    },
    {
        "content": "<blockquote>\n<p>IIRC it's not that Lean 4 can't do the unification, it's that it makes the conscious decision to discard it unless it can solve the typeclass problem and the solution it finds is the same</p>\n</blockquote>\n<p>Yes, this is definitely not the only such case.  In general it's probably best to arrange things so that instances can always be resynthesized in the same (defeq) way.</p>",
        "id": 322635092,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674256570
    },
    {
        "content": "<p>That's certainly a nice property to have, but I don't yet see the argument for why the elaborator should force things to always have that property.</p>",
        "id": 322636978,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674257618
    },
    {
        "content": "<p>Because finding instances by unification doesn't mesh well with inheritance, or really any situation where the instances don't match up perfectly.  If <code>mem_toFinset</code> required <code>NonemptyFinLinOrd</code> (first child class I could find in the docs) instead of <code>Fintype</code>, then unification alone wouldn't be able to fill that in.</p>",
        "id": 322637606,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674258040
    },
    {
        "content": "<p>I fixed all <code>sorry</code>s</p>",
        "id": 322640348,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674259630
    },
    {
        "content": "<p>I modified some proofs. IMHO, we don't have to backport these changes.</p>",
        "id": 322640379,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674259652
    },
    {
        "content": "<p>(1 of the changes conflicts with my pending PR, I'll adjust one of them once the other is merged)</p>",
        "id": 322640456,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674259688
    },
    {
        "content": "<p>I didn't fix comments. Anyone wants to do this?</p>",
        "id": 322640688,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674259860
    },
    {
        "content": "<p>by comments do you mean docs? I fixed these I think</p>",
        "id": 322641058,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674260111
    },
    {
        "content": "<p>Should it be <code>Set.to_finite</code> or <code>Set.toFinite</code>?</p>",
        "id": 322641534,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674260382
    },
    {
        "content": "<p>Probably, <code>of_finset</code> should be <code>ofFinset</code> to align with <code>Fintype.ofFinset</code>.</p>",
        "id": 322641626,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674260421
    },
    {
        "content": "<p>I pushed <code>toFinite</code> and `ofFinite. Not sure if we should revert this commit.</p>",
        "id": 322642091,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674260676
    },
    {
        "content": "<p>I fixed a few names in comments.</p>",
        "id": 322657143,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674271506
    },
    {
        "content": "<p>I think this one is ready to go.</p>",
        "id": 322657155,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674271526
    }
]