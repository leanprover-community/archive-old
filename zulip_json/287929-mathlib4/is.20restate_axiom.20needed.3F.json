[
    {
        "content": "<p>With respect to <a href=\"#narrow/stream/287929-mathlib4/topic/getting.20started.20with.20joining.20the.20porting.20effort\">getting started with porting</a> I was looking at <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/restate_axiom.lean\">restate_axiom</a> because it seemed the simplest. But the <a href=\"https://github.com/leanprover-community/mathlib/blob/9facd190ef13859e5b7a0677182d87e529e7d8f8/src/tactic/restate_axiom.lean#L56\">demonstrative breaking example</a> given in that file doesn't seem to break in Lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">trivial</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">asdf</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z.x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">A.a'</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I guess the defeq algorithm has changed slightly in Lean 4?<br>\nSo maybe restate_axiom isn't needed? Are there any examples in the mathlib3port which would break without restate_axiom?</p>",
        "id": 274746275,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1646857091
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> (I think you wrote this, right?)</p>",
        "id": 274746367,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646857159
    },
    {
        "content": "<p>I think it is still useful, because referencing these expressions leads to messy types:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">trivial</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z.x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">z.a'</span>\n  <span class=\"c1\">-- z : A</span>\n  <span class=\"c1\">-- this : autoParam (A.x z = 1) _auto✝</span>\n  <span class=\"c1\">-- ⊢ A.x z = 1</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span>\n</code></pre></div>",
        "id": 274767937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646868451
    },
    {
        "content": "<p>Ok nice I'll have a go at porting. This might be too radical but maybe lean core could be edited so that structure projection erases autoParam and optParam?</p>",
        "id": 274844134,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1646923554
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> Sebastian and I are discussing how to filter this kind of auxiliary annotation. It is not just the projection, there are other places they leak into the local context.</p>",
        "id": 274845279,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1646924035
    },
    {
        "content": "<p>I've made restate_axiom. Should I delete the corresponding <code>syntax</code> in Mathlib/Mathport/syntax.lean or make my command use that?</p>",
        "id": 275421492,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1647371302
    },
    {
        "content": "<p>The former</p>",
        "id": 275421883,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647371508
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/228\">https://github.com/leanprover-community/mathlib4/pull/228</a></p>",
        "id": 275423192,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1647372201
    }
]