[
    {
        "content": "<p>I ported Logic.Function.Iterate, modulo two errors.  I will make MWEs of the errors if needed, but thought I would toss the output here wholesale in case they are particular gotchas that someone will immediately recognize.  One is:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>fail to show termination for\n  Function.RightInverse.iterate\nwith errors\nstructural recursion cannot be used\n\nwell-founded recursion cannot be used, 'Function.RightInverse.iterate' does not take any (non-fixed) arguments\n</code></pre></div>\n<p>and the other is</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>code generator does not support recursor 'Nat.rec' yet, consider using 'match ... with' and/or structural recursion\n</code></pre></div>",
        "id": 308473026,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1667854976
    },
    {
        "content": "<p>The second one should be self-explanatory, just avoid <code>*.rec</code>.</p>",
        "id": 308480190,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667857946
    },
    {
        "content": "<p>(This might be solved at some point in the future, but don't hold your breath.)</p>",
        "id": 308480219,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667857966
    },
    {
        "content": "<p>The <code>RightInverse.iterate</code> is a change in how name resolution works in recursive calls:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">RightInverse.iterate</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">RightInverse</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">h.iterate</span> <span class=\"c1\">-- refers to `RightInverse.iterate`</span>\n</code></pre></div>\n<p>while in Lean3 this referred to <code>left_inverse.iterate</code></p>",
        "id": 308480966,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667858285
    },
    {
        "content": "<p>In response to an error</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>code generator does not support recursor 'Nat.rec' yet, consider using\n'match ... with' and/or structural recursion\n</code></pre></div>\n<p>Gabriel suggested<br>\n<span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/two.20errors/near/308480190\">said</a>:</p>\n<blockquote>\n<p>just avoid <code>*.rec</code>.</p>\n</blockquote>\n<p>I think I can avoid using <code>*.rec</code> in the proof, but the name of the lemma itself is <code>Iterate.rec</code>.  (See <a href=\"https://github.com/leanprover-community/mathlib3port/blob/6b8613f2d840e5fe39d283f8dd76ef0d11c92474/Mathbin/Logic/Function/Iterate.lean#L184\">the mathport version</a>).  So should the lemma itself be deleted?</p>",
        "id": 309413852,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1668312242
    },
    {
        "content": "<p>Another option if the compiler gives you trouble is to mark the lemma as <code>noncomputable</code></p>",
        "id": 309414334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668312841
    },
    {
        "content": "<p>The fact that the lemma is named <code>*.rec</code> doesn't matter that much. The issue is only that built-in recursors are not code-genned properly</p>",
        "id": 309414496,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668312978
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/two.20errors/near/309414334\">said</a>:</p>\n<blockquote>\n<p>Another option if the compiler gives you trouble is to mark the lemma as <code>noncomputable</code></p>\n</blockquote>\n<p>Thanks, this works!</p>",
        "id": 309414689,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1668313242
    },
    {
        "content": "<p>If you can make it computable, by writing it as a recursive function instead, that is preferable since it will keep downstream things computable</p>",
        "id": 309414778,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668313345
    },
    {
        "content": "<p>I don't know how to do that (my intuition for computability is poor), but anyone should feel free to push to the branch: it's <a href=\"https://github.com/leanprover-community/mathlib4/pull/585\">mathlib4#585</a> and the declaration is <code>Iterate.rec</code>.</p>",
        "id": 309415362,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1668314081
    },
    {
        "content": "<p>How about implementing <code>.rec</code> manually for some important types before built-in recursors are supported?</p>",
        "id": 320057252,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1673172782
    },
    {
        "content": "<p>Also <code>to_additive</code> does not seem to support <code>match ... with</code>. It complains <code>code generator does not support recursor '*.brecOn' ...</code>.</p>",
        "id": 320057410,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1673172902
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455791\">Yuyang Zhao</span> <a href=\"#narrow/stream/287929-mathlib4/topic/two.20errors/near/320057252\">said</a>:</p>\n<blockquote>\n<p>How about implementing <code>.rec</code> manually for some important types before built-in recursors are supported?</p>\n</blockquote>\n<p>Like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">List</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rec'</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">[])</span>\n    <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">tail</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nil</span>\n  <span class=\"bp\">|</span> <span class=\"n\">hd</span><span class=\"o\">::</span><span class=\"n\">tl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cons</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span> <span class=\"o\">(</span><span class=\"n\">rec'</span> <span class=\"n\">nil</span> <span class=\"n\">cons</span> <span class=\"n\">tl</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">List</span>\n</code></pre></div>",
        "id": 320080444,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1673186775
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/two.20errors/near/308480219\">said</a>:</p>\n<blockquote>\n<p>(This might be solved at some point in the future, but don't hold your breath.)</p>\n</blockquote>\n<p>Would it be easier to implement this in core than it is to change every use of <code>rec</code> to a match in the port?</p>",
        "id": 320093587,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673194324
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455791\">Yuyang Zhao</span> <a href=\"#narrow/stream/287929-mathlib4/topic/two.20errors/near/320057410\">said</a>:</p>\n<blockquote>\n<p>Also <code>to_additive</code> does not seem to support <code>match ... with</code>. It complains <code>code generator does not support recursor '*.brecOn' ...</code>.</p>\n</blockquote>\n<p>Oh, that is a bug, and I'm not sure how easy it is to fix. As a workaround, explicitly write down the addivite definition as well (and then additivize the multiplicative one) (and include a porting note, mentioning the tracking issue I created: <a href=\"https://github.com/leanprover-community/mathlib4/pull/1428\">mathlib4#1428</a>).</p>",
        "id": 320100830,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1673198931
    }
]