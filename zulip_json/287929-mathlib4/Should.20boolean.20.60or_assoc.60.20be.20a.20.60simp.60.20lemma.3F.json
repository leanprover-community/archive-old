[
    {
        "content": "<p>In mathlib3, <code>bor_assoc</code> is a simp lemma; in core Lean 4 it's not. [Edit: actually what I mean here is \"it's not tagged @[simp] when it's declared; I realise I don't know how to check if something is a simp lemma in Lean 4, #print no longer seems to tell me] Do I leave it as not a <code>simp</code> lemma? Edit: same question for band_assoc.</p>\n<p>Random remark: boolean or is left associative; proppy or is right associative.</p>",
        "id": 305400529,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666370900
    },
    {
        "content": "<p>PS why the heck does this work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">||</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">||</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">||</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">||</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span>\n</code></pre></div>\n<p>What does <code>simp only</code> do in Lean 4? [Oh -- got it -- it uses decidability]</p>\n<p>PPS </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">||</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">||</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">||</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">||</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span>\n</code></pre></div>\n<p>also works but it doesn't say what you think it says ;-)</p>",
        "id": 305401784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666371296
    },
    {
        "content": "<p>Do we need a new command to ask if something is a simp lemma? This is essential information about the API.</p>",
        "id": 305713457,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666561976
    },
    {
        "content": "<p>I'd suggest preserving the <code>@[simp]</code> status of lemmas during the port as much as possible, even if that means adding simp attributes in mathlib4 to things defined in core. Anything else is a recipe for confusing proof failures later.</p>",
        "id": 305713506,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666562012
    },
    {
        "content": "<p>So #print is supposed to no longer work?</p>",
        "id": 305715611,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666563254
    },
    {
        "content": "<p>For the lemmas which weren't simp in lean 4 but were in lean 3, the linter complains that simp can already prove them, because lean 4 simp seems to use decide and decide can prove all the standard bool lemmas</p>",
        "id": 305715725,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666563318
    },
    {
        "content": "<p>It's become a bit more complicated in Lean 4, because each attribute is responsible for tracking itself, and while I think there was a proposal to have some uniform mechanism for looking up attributes, as far as I know it hasn't happened .... ? Thus for any given attribute one could teach #print to show it (and if this were to happen for any as a one-off, it should be <code>simp</code>), but perhaps there isn't a general mechanism.</p>",
        "id": 305715803,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666563363
    },
    {
        "content": "<p>I heard from Leo and/or Gabriel that they will probably change the flag that controls whether <code>simp</code> uses <code>decide</code> to <code>false</code> by default. I guess we want a decision on this sooner rather than later.</p>",
        "id": 305715941,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666563444
    },
    {
        "content": "<p>I tried disabling setting the default to <code>decide := false</code> (although turning it back on in <code>simp_arith</code>), but I'm running into the problem that <code>simp!</code> leaves <code>True</code> behind as a goal sometimes, and I'm not sure why.</p>",
        "id": 305728221,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666571816
    },
    {
        "content": "<p>I intend to make <code>#print</code> work eventually, this will require a new subsystem in lean 4 to manage \"attribute delaborators\"</p>",
        "id": 305740286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666581962
    }
]