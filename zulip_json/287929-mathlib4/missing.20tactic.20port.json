[
    {
        "content": "<p>I have a ported file that depends on a local tactic with a <code>meta</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">rbtree.default_lt</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">apply</span> <span class=\"n\">has_lt.lt</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>used like this: <code>(lt : α → α → Prop . rbtree.default_lt)</code></p>\n<p>What's the Lean4 approach for a default parameter value?</p>",
        "id": 310459431,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668619298
    },
    {
        "content": "<p>So, digging, it looks like <code>has_lt</code> is now spelled <code>LT</code> but subbing  the seeming equivalent statement <code>lt : α → α → Prop := by apply LT.lt </code> gets <code>invalid auto tactic</code></p>",
        "id": 310481587,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668626335
    },
    {
        "content": "<p>I'm just not sure if the goal is for the the comparator to be pluggable, or if the goal is to implicitly constrain <code>α</code> to be of class <code>LT</code>?</p>",
        "id": 310486112,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668627701
    },
    {
        "content": "<p>Or maybe the goal is: if I have an <code>lt</code>, use that, otherwise require the <code>α</code> to be of typeclass <code>LT</code> and use the native <code>lt</code>?</p>",
        "id": 310491632,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668629101
    },
    {
        "content": "<p>This tactic is only used to supply an auto_param. In Lean 4, you can use tactics in the default value, instead of using an autoparam.</p>",
        "id": 310513821,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668638039
    },
    {
        "content": "<p>i.e. replace <code>. rbtree.default_lt</code> in the structure definition with <code>:= by apply LT.lt</code>?</p>",
        "id": 310513928,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668638083
    },
    {
        "content": "<p>Oh, hmm, you tried that. What's your branch?</p>",
        "id": 310513940,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668638094
    },
    {
        "content": "<p>PR  <a href=\"https://github.com/leanprover-community/mathlib4/pull/611\">mathlib4#611</a>, <code>arienmalec/port_rbtree_init</code></p>",
        "id": 310515072,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668638664
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"542196\">@Arien Malec</span> : that's <a href=\"https://github.com/leanprover-community/mathlib4/pull/611\">mathlib4#611</a>, not <a href=\"https://github.com/leanprover-community/mathlib/pull/611\">#611</a></p>",
        "id": 310515177,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668638719
    },
    {
        "content": "<p>Gotcha -- Zulip defaults to <code>mathlib</code> PRs..</p>",
        "id": 310515403,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668638838
    },
    {
        "content": "<p>For now, yes. If you look in the \"Organization Settings\" menu you can see how the various linkifiers are expanded.</p>",
        "id": 310515616,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668638948
    },
    {
        "content": "<p>More details:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">RBTree</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">LT.lt</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">RBNode</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">t.WellFormed</span> <span class=\"n\">lt</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>(in file <code>Mathlib.Data.RBTree.Init</code> on the branch above) gives error <code>invalid auto tactic, identifier is not allowed</code> on <code>LT.lt</code></p>",
        "id": 310516833,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668639576
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span>  notes that <code>Std</code> has an <code>RBMap</code> so probably the call here is to deprecate <code>RBTree</code> and unwind the dependencies in the port. (The <code>RBMap</code> implementation punts on the fancy autoparam stuff, and just has you pass a comparator...</p>",
        "id": 310521290,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668641733
    },
    {
        "content": "<p>From what I could see, the dependencies in <code>mathlib</code> are through <code>data.tree</code>, and all <code>data.tree</code> does is allow conversion from an <code>rbtree</code></p>",
        "id": 310521658,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668641946
    },
    {
        "content": "<p>It also blocks <code>data.list.defs</code>but all that's done there is convert to an <code>rbtree</code></p>",
        "id": 310521935,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668642109
    },
    {
        "content": "<p>Also used in <code>ring2</code> which is separately ported.</p>",
        "id": 310522986,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668642792
    },
    {
        "content": "<p>Yes, sorry, should have thought to say this earlier. I don't think this file should be ported at all. :-)</p>",
        "id": 310523402,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668643052
    },
    {
        "content": "<p>Hmm. all <code>data.tree</code> seems to do is be used in tactics and testing -- not sure how it even got pulled into one of the dependency graphs.</p>",
        "id": 310529228,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668646776
    },
    {
        "content": "<p>When I look at the graph <strong>from</strong> <code>data.tree</code> it's basically everything, but comes in through the <code>tactic</code> metaverse.</p>",
        "id": 310529818,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668647241
    },
    {
        "content": "<p>eg, <code>linarith</code> via <code>cancel_denoms</code> which is the only direct dependency.</p>",
        "id": 310529903,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668647288
    },
    {
        "content": "<p>I'm doing the <code>--exclude-tactics</code> thing but maybe things are getting pulled in transitively...</p>\n<p><code>leanproject import-graph --from data.tree --exclude-tactics data.tree.pdf --port-status</code></p>",
        "id": 310531946,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668648960
    },
    {
        "content": "<p>Yes, I made a change so that when <code>--exclude-tactics</code> deletes a tactic node in the graph, it adds all \"grandparent\" edges.</p>",
        "id": 310533647,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668650511
    },
    {
        "content": "<p>Perhaps this was a bad idea and has led you astray. :-)</p>",
        "id": 310533659,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668650520
    },
    {
        "content": "<p>Perhaps just port as mostly empty file: just a comment to say that the code is no longer needed because it was only use in tactics, which are being reimplemented.</p>",
        "id": 310533771,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668650582
    },
    {
        "content": "<p>I think it might be better to remove nodes that have only a single edge from <code>tactic</code>/<code>meta</code></p>",
        "id": 310537164,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668653700
    },
    {
        "content": "<p>It's not really clear what the algorithm should be. What is there are theory files that are genuinely needed, but only imported in matlib3 transitively via tactics files?</p>",
        "id": 310537324,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668653852
    },
    {
        "content": "<p>well, we'd have to run that \"needed\" script again...</p>",
        "id": 310537334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668653876
    },
    {
        "content": "<p>you could try removing all tactic files including their edges in and out from the graph, but I suspect that there is quite a lot of \"cheating\" with declarations being transitively pulled in for stuff like <code>data.list.basic</code>, which is used by a downstream file which only does e.g. <code>import tactic.linarith</code></p>",
        "id": 310537480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668653984
    },
    {
        "content": "<p>Regarding this particular file, I suggest the following course of action:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/porting.20.60Data.2ERBTree.2EInit.60/near/309191810\">said</a>:</p>\n<blockquote>\n<p>I think a suitable \"port\" of the <code>data.rbtree</code> is: make a list of all the theorems about rbtree that don't yet exist in <code>Std.Data.RBMap</code>, open an issue for them on <code>std4</code>, and then remove everything from the module except for <code>#align</code>s if possible (if the types are too different, just leave them unaligned). <code>Std.Data.RBMap</code> intends to completely replace that directory.</p>\n</blockquote>",
        "id": 310537708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668654124
    },
    {
        "content": "<p>Have pushed part 2, with deprecate statements as well.</p>",
        "id": 310538881,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668655157
    },
    {
        "content": "<p>Will go through the <code>RBMap</code> theorems</p>",
        "id": 310538898,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668655192
    },
    {
        "content": "<p>Looks like <code>Std</code> heavily covers the well-formed invariants associated with insert/delete, but <code>mathlib</code> additionally covers the behavior or searching and ordering</p>",
        "id": 310539746,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668655894
    },
    {
        "content": "<p>yes, you should translate the mathlib statements to something about <code>RBMap</code>, then put them in the mathlib4 file for now (it's okay to comment out / sorry the proofs if the originals don't work) and open an issue to move them to std4</p>",
        "id": 310539849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668655993
    },
    {
        "content": "<p>we don't want to just delete the file if that means some theorems get lost without there being a replacement or an issue tracking said replacement</p>",
        "id": 310539939,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668656057
    },
    {
        "content": "<p>No theorems in <code>init.lean</code>;  <code>insert.lean</code> covers the wellfoundedness work that's already in <code>Std</code>, so it's  <code>basic.lean</code>, <code>find.lean</code> and <code>min_max.lean</code> that want to be saved.</p>",
        "id": 310540855,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668656988
    },
    {
        "content": "<p>Could you translate the statements into actual lean 4 theorems with <code>sorry</code>? That's the equivalent of porting work for these files</p>",
        "id": 310541220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668657307
    },
    {
        "content": "<p>K</p>",
        "id": 310541332,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668657441
    }
]