[
    {
        "content": "<p>I've been investigating backporting Lean4's version of <code>Nat.le</code> to Lean3.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">ble</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ble</span> <span class=\"n\">n</span> <span class=\"n\">m</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">le</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">nat.ble</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>Mostly it is fairly straightforward, but one annoying change is that we can no longer call <code>cases h</code> on a <code>h : x ≤ 0</code> hypothesis. I worry that this difficulty is going to propagate throughout mathlib.</p>\n<p>There's a related problem with <code>induction h</code> when <code>h : x ≤ y</code>, but this one might be solvable with a custom recursor.</p>",
        "id": 249827749,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629280355
    },
    {
        "content": "<p>What I've done so far is on the <code>nat.le</code> branch of <a href=\"https://github.com/leanprover-community/lean\">https://github.com/leanprover-community/lean</a></p>",
        "id": 249827801,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629280407
    },
    {
        "content": "<p><code>library/init/data/nat/basic.lean</code> has been fixed, but <code>library/init/data/nat/lemmas.lean</code> is still pending a knowing what to do with <code>cases</code> and <code>induction</code>.</p>",
        "id": 249827874,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629280460
    },
    {
        "content": "<p>(Linking to the previous discussion of this at <a href=\"#narrow/stream/287929-mathlib4/topic/Mario's.20FMM.202021.20talk/near/247742724\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Mario's.20FMM.202021.20talk/near/247742724</a>.)</p>",
        "id": 249828074,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629280616
    },
    {
        "content": "<p>If anyone has a suggestion for an ergonomic replacement for the <code>cases h</code> step that would be great.</p>",
        "id": 249829066,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629281220
    },
    {
        "content": "<p>I could add/find a <code>eq_zero_of_le_zero</code> and call <code>cases</code> on that.</p>",
        "id": 249829124,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629281256
    },
    {
        "content": "<p><code>cases le_zero_iff.mp h,</code> seems to work too</p>",
        "id": 249829467,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1629281474
    },
    {
        "content": "<p>Indeed. Using <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span>'s suggestion, and replacing one use of <code>induction</code>, Lean3 compiles with the backported definition.</p>",
        "id": 249832688,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629283956
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/pull/603\">https://github.com/leanprover-community/lean/pull/603</a></p>",
        "id": 249832765,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629284032
    },
    {
        "content": "<p>This should not be merged until there's a branch of mathlib that actually works with it. :-) mathlib uses <code>induction</code> on inequalities a lot, unfortunately.</p>",
        "id": 249832849,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629284075
    },
    {
        "content": "<p>I wanted to get some advice on the Nat.le backport.</p>\n<p>We recently merged <a href=\"https://github.com/leanprover-community/lean/pull/603\">https://github.com/leanprover-community/lean/pull/603</a>, backporting Lean4's definition of <code>Nat.le</code> to community Lean3.</p>\n<p>I had made <a href=\"https://github.com/leanprover-community/mathlib/pull/8756\">https://github.com/leanprover-community/mathlib/pull/8756</a>, the companion PR to mathlib, which wasn't so bad.</p>\n<p>However, while reviewing the PR to community Lean3, we discovered some timeout issues, which we resolved by making <code>nat.le</code> irreducible. I've just realised however, that this breaks <a href=\"https://github.com/leanprover-community/mathlib/pull/8756\">https://github.com/leanprover-community/mathlib/pull/8756</a> again, and will necessitate lots of further changes.</p>\n<p>These are all very doable, but I'm worried that people won't like them, so wanted to ask for advice before proceeding. A typical example is (in <code>data.list.basic</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">exists_mem_of_length_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">length</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">mem_cons_self</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>which now gives an error message <code>non-exhaustive match, the following cases are missing: exists_mem_of_length_pos nil _</code>.</p>\n<p>The fix is easy, but sad: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">exists_mem_of_length_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">length</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">lt_irrefl</span> <span class=\"n\">_</span> <span class=\"n\">h</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">mem_cons_self</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Options:<br>\n1) I just proceed with these changes for now.<br>\n2) Rethink making <code>nat.le</code> irreducible: I'd need help resolving the timeouts in tests in community Lean3.<br>\n3) Rethink the <code>Nat.le</code> backport entirely.<br>\n3) Someone has a clever idea!</p>",
        "id": 250185808,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629504295
    },
    {
        "content": "<p>(These are presumably questions for some combination of <span class=\"user-mention\" data-user-id=\"230999\">@Daniel Selsam</span> and <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>.)</p>",
        "id": 250185848,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629504350
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Thank you for trying to backport this. In light of all the issues you are hitting, we will revisit whether we can forward-port it instead. The forward-port is very delicate because it touches the kernel and the runtime, but Leo will take a shot at it this week.</p>",
        "id": 250187427,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1629506406
    },
    {
        "content": "<p>Good luck. :-) For now I'll back out the backport PR to community Lean.</p>",
        "id": 250187463,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629506493
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I modified the <code>Nat.le</code> in Lean 4. It is now equivalent to the one in Lean 3 and can be aligned by binport.</p>",
        "id": 250280446,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1629647462
    }
]