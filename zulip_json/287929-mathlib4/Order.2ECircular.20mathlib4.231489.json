[
    {
        "content": "<p>This has a <code>tauto</code> call that times out - would be great if someone could take a look</p>",
        "id": 320745971,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673455035
    },
    {
        "content": "<p>I think part of the problem is that we should be calling <code>casesMatching</code> with <code>(recursive := true)</code>.</p>",
        "id": 320765273,
        "sender_full_name": "David Renshaw",
        "timestamp": 1673460654
    },
    {
        "content": "<p>I already ported Order.Circular but was waiting on tauto—this was before we started immediately making PR’s for everything. I’m surprised it didn’t show up when running the port status script…</p>",
        "id": 320765942,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673460866
    },
    {
        "content": "<p>Unless my branch was second somehow? But it was definitely clear on the port status script when I started it…it’s on the branch <code>order.circular</code></p>",
        "id": 320766535,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673461074
    },
    {
        "content": "<p>No, my port was almost a month ago</p>",
        "id": 320767833,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673461476
    },
    {
        "content": "<p>But your port does clean up a couple comments mine missed... :)</p>",
        "id": 320769166,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673461913
    },
    {
        "content": "<p>All I'll say is that the name should be <code>SBtw</code>, not <code>Sbtw</code>, as discussed <a href=\"#narrow/stream/287929-mathlib4/topic/Naming.20clarification/near/315697419\">here</a>, since it's short for <code>S</code>trictly <code>B</code>e<code>tw</code>een</p>",
        "id": 320769445,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673461995
    },
    {
        "content": "<p>Also we can now fix the <code>tauto</code> issue by removing the <code>set ...</code>s and simply doing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">le_trans</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">le_trans</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">a</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">le_trans</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n    <span class=\"n\">tauto</span>\n</code></pre></div>\n<p>I'm going to commit this on the current PR if that's alright <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> ?</p>",
        "id": 320773676,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673463310
    },
    {
        "content": "<p>(I'll commit now, and we can always revert if necessary :) )</p>",
        "id": 320774561,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673463564
    },
    {
        "content": "<p>(I'm also going to change <code>Sbtw</code> to <code>SBtw</code> and we can similarly revert if we want.)</p>",
        "id": 320775081,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673463710
    },
    {
        "content": "<p>Actually, I'm curious—why did e.g. <code>HasBtw</code> become <code>Btw</code>? This leaves us with <code>btw : α → α → α → Prop</code>, which bucks the naming convention.</p>",
        "id": 320777794,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673464456
    },
    {
        "content": "<p>Is that different to how things are handled for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Membership#doc\">docs4#Membership</a> .mem or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LE#doc\">docs4#LE</a> .le ?</p>",
        "id": 320778372,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673464639
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Membership.mem#doc\">docs4#Membership.mem</a></p>",
        "id": 320778550,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673464690
    },
    {
        "content": "<p>Bucks the naming convention how? (And sorry for stepping on your toes - I thought I checked the PRs before starting)</p>",
        "id": 320778590,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673464703
    },
    {
        "content": "<p>Huh, all of these docs links give me 404 page not found.</p>",
        "id": 320778680,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673464742
    },
    {
        "content": "<p>Looks like you can't link to structure fields</p>",
        "id": 320778738,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673464761
    },
    {
        "content": "<p>Weird. it's there: <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#Membership.mem\">https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#Membership.mem</a></p>",
        "id": 320778767,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673464772
    },
    {
        "content": "<p>I'm now confused; what is the naming rule that justifies these names?</p>",
        "id": 320778820,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673464793
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Order.2ECircular.20mathlib4.231489/near/320778590\">said</a>:</p>\n<blockquote>\n<p>Bucks the naming convention how? (And sorry for stepping on your toes - I thought I checked the PRs before starting)</p>\n</blockquote>\n<p>Well, functions are meant to be named as though they were elements of their return type, and elements of <code>Prop</code> are meant to be <code>UpperCamelCase</code></p>",
        "id": 320778898,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673464806
    },
    {
        "content": "<p>(And no problem! Bound to happen in a project as big as this sooner or later :) )</p>",
        "id": 320778949,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673464822
    },
    {
        "content": "<blockquote>\n<p>I think part of the problem is that we should be calling casesMatching with (recursive := true)</p>\n</blockquote>\n<p>If I do this and also bump <code>maxHeartbeats</code> to 500000, then <code>tauto</code> does eventually succeed.</p>",
        "id": 320779313,
        "sender_full_name": "David Renshaw",
        "timestamp": 1673464926
    },
    {
        "content": "<p>Oh right, it's a Prop. I defer to anyone who's thought more about the naming convention :)</p>",
        "id": 320779540,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673464985
    },
    {
        "content": "<p>There is something to be said for patterning it after <code>mem</code> and <code>le</code> though! Is there a general pattern where something that was <code>has_foo</code>, <code>foo</code> in mathlib3 becomes <code>Foo</code>, <code>foo</code> in mathlib4 despite types? Or is this just a quirk of <code>mem</code> and <code>le</code> in particular?</p>",
        "id": 320780295,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673465206
    },
    {
        "content": "<p>What's the general rule?</p>",
        "id": 320780305,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673465208
    },
    {
        "content": "<p>(btw (pun intended), just to avoid race conditions, I'm going to try to add the remaining docstrings now :) )</p>",
        "id": 320780820,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673465376
    },
    {
        "content": "<p>I have some fixes that I think should make <code>tauto</code> work here, without needing to bump the timeout. I hope to have a PR ready later tonight.</p>",
        "id": 320815780,
        "sender_full_name": "David Renshaw",
        "timestamp": 1673479129
    },
    {
        "content": "<p>Neat! Just in case it got lost in the messages, though, <code>tauto</code> already works as-is with the new compactified version of the proof (which eliminates the <code>set</code>s)—just so you don’t feel rushed :)</p>",
        "id": 320817171,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673479992
    },
    {
        "content": "<p>ah, I see your fix here: <a href=\"https://github.com/leanprover-community/mathlib4/pull/1489/commits/4ae95c0700bcf42a4ee7522625119e630e4a6050\">https://github.com/leanprover-community/mathlib4/pull/1489/commits/4ae95c0700bcf42a4ee7522625119e630e4a6050</a></p>",
        "id": 320819095,
        "sender_full_name": "David Renshaw",
        "timestamp": 1673481103
    },
    {
        "content": "<p>Performance improvements here: <a href=\"https://github.com/leanprover-community/mathlib4/pull/1507\">https://github.com/leanprover-community/mathlib4/pull/1507</a></p>",
        "id": 320995199,
        "sender_full_name": "David Renshaw",
        "timestamp": 1673545064
    },
    {
        "content": "<p>I also observe a rather dramatic performance improvement if I switch some of the <code>~q()</code> matching to plain <code>Expr</code> pattern matching. (I think such a change would belong in a separate pull request.)</p>",
        "id": 320995518,
        "sender_full_name": "David Renshaw",
        "timestamp": 1673545138
    },
    {
        "content": "<p>This still seems strangely slow. Aesop dispatches the test case from your PR in negligible time:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Aesop</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Tauto</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">this1</span> <span class=\"o\">:</span> <span class=\"n\">x₀</span> <span class=\"bp\">→</span> <span class=\"n\">x₁</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">this2</span> <span class=\"o\">:</span> <span class=\"n\">x₁</span> <span class=\"bp\">→</span> <span class=\"n\">x₂</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">this3</span> <span class=\"o\">:</span> <span class=\"n\">x₂</span> <span class=\"bp\">→</span> <span class=\"n\">x₀</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"n\">x₀</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">x₁</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span>\n         <span class=\"o\">(</span><span class=\"n\">x₁</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">x₂</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">x₂</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">x₀</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span>\n       <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"bp\">∧</span> <span class=\"n\">x₁</span> <span class=\"bp\">∨</span> <span class=\"n\">x₁</span> <span class=\"bp\">∧</span> <span class=\"n\">x₂</span> <span class=\"bp\">∨</span> <span class=\"n\">x₂</span> <span class=\"bp\">∧</span> <span class=\"n\">x₀</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n         <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">aesop</span>\n</code></pre></div>",
        "id": 321002116,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1673546918
    },
    {
        "content": "<p>Yeah, I'm guessing <code>aesop</code> has better heuristics and doesn't waste as much time with inefficient pattern matching.</p>",
        "id": 321003644,
        "sender_full_name": "David Renshaw",
        "timestamp": 1673547353
    },
    {
        "content": "<p>My main objective here is to achieve parity with mathlib3 <code>tauto</code>, which takes about 3 seconds on this goal.</p>",
        "id": 321003840,
        "sender_full_name": "David Renshaw",
        "timestamp": 1673547406
    },
    {
        "content": "<p>[From PR]</p>\n<blockquote>\n<p>When I try your example on this branch, I still get a large number of timeouts at isDefEq and then a failure. Same with maxHeartbeats 1000000.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> I just tried again, and it seems to work for me (but is slow). Maybe you need to clear some local state?</p>",
        "id": 321004857,
        "sender_full_name": "David Renshaw",
        "timestamp": 1673547748
    },
    {
        "content": "<p>Weird. I'll try again.</p>",
        "id": 321004970,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1673547780
    },
    {
        "content": "<p><code>lake clean</code> fixed the issue with the <code>example</code>.</p>\n<p>The Aesop proof relies heavily on <code>simp_all</code> to finish off goals after splitting disjunctions. Since this seems to be very fast, it could also be interesting for <code>tauto</code>.</p>",
        "id": 321007069,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1673548430
    },
    {
        "content": "<p>A potential culprit for <code>tauto</code> slowness could be the repeated calls to <code>contradiction</code>. I had this in the default Aesop rule set at some point and it took up a large percentage of overall execution time, so I threw it out again. This is probably not an option for <code>tauto</code>, but it may be a good place to look for optimisation opportunities.</p>",
        "id": 321008476,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1673548899
    },
    {
        "content": "<p>Yeah, using some of these aesop learnings to improve <code>tauto</code> is probably a good idea. Shorter term, though, I see no reason not to just use <code>aesop</code> in the proof (for <code>Preoder.toCircularPreorder</code>) that inspired this discussion, since that saves us several seconds, and it's already imported.</p>",
        "id": 321009296,
        "sender_full_name": "David Renshaw",
        "timestamp": 1673549132
    }
]