[
    {
        "content": "<p>I'm working on this PR for a bit</p>",
        "id": 321765668,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673939387
    },
    {
        "content": "<p>I pushed.</p>",
        "id": 321769783,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673941290
    },
    {
        "content": "<p>There is some trouble aabout moving back and forth to <code>OrderDual</code>. We used to <code>convert</code> a lot of stuff. That no longer works because irreducible, I guess?</p>",
        "id": 321769936,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673941353
    },
    {
        "content": "<p>Is there a standard way too approach this now?</p>",
        "id": 321769959,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673941368
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OrderDual#doc\">docs4#OrderDual</a></p>",
        "id": 321774260,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673943307
    },
    {
        "content": "<p>It doesn't look irreducible to me?</p>",
        "id": 321774347,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673943353
    },
    {
        "content": "<p>Huh! Then I don't know what's going on.</p>",
        "id": 321774473,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673943407
    },
    {
        "content": "<p>Different order of elaboration is what's happening.</p>",
        "id": 321774601,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673943460
    },
    {
        "content": "<p>I pushed alternative proofs for some of the <code>OrderDual</code> issues. Still some errors and name changes needed, if someone wants to pick it up</p>",
        "id": 321786098,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673947636
    },
    {
        "content": "<p>one error left</p>",
        "id": 321792476,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673949921
    },
    {
        "content": "<p>Should <code>supr</code> now always be renamed to <code>sup\\i</code>?</p>",
        "id": 321792506,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673949934
    },
    {
        "content": "<p>final error fixed</p>",
        "id": 321793071,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673950116
    },
    {
        "content": "<p>There is one linter complaint.</p>",
        "id": 321793811,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673950363
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">sup_attach</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s.attach.sup</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s.sup</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- LHS does not simplify</span>\n</code></pre></div>",
        "id": 321793848,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673950380
    },
    {
        "content": "<p>Which I don't understand because</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s.attach.sup</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span><span class=\"bp\">?</span> <span class=\"c1\">-- simp only [sup_attach]</span>\n  <span class=\"c1\">-- goal is now `sup s f = a`</span>\n</code></pre></div>",
        "id": 321794155,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673950486
    },
    {
        "content": "<p>I think this one is ready for review</p>",
        "id": 321795504,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673950926
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/data.2Efinset.2Elattice.20mathlib4.231606/near/321769936\">said</a>:</p>\n<blockquote>\n<p>There is some trouble aabout moving back and forth to <code>OrderDual</code>. We used to <code>convert</code> a lot of stuff. That no longer works because irreducible, I guess?</p>\n</blockquote>\n<p>Maybe it's just that <code>convert</code> is broken generally?  Do the issues look like these ones?<br>\n<a href=\"#narrow/stream/287929-mathlib4/topic/convert.20failures\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/convert.20failures</a></p>",
        "id": 321872046,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673973020
    }
]