[
    {
        "content": "<p>/poll Name for a tactic that moves the first goal to the back<br>\nrotate<br>\nrotate_goals<br>\nroll<br>\nroll_goals</p>",
        "id": 270761336,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644002775
    },
    {
        "content": "<p>/poll Name for a tactic that moves the n-th goal to the top<br>\npop_goal<br>\nlift_goal<br>\npick_goal<br>\nraise_goal<br>\npop<br>\nlift<br>\npick<br>\nraise</p>",
        "id": 270763055,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644003660
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#lift\">tactic#lift</a> is already a thing, so it shouldn't be that!</p>",
        "id": 270763746,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1644004025
    },
    {
        "content": "<p>I really like the version involving the word goal. Otherwise there are simply too many conflicts with mathematical operations.</p>",
        "id": 270776484,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644010638
    },
    {
        "content": "<p>I second that. I would even suggest that it starts with the word goal</p>",
        "id": 270777904,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1644011545
    },
    {
        "content": "<p>Consensus is <del>impossible</del> really hard <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> <br>\nI hope the next tactics go more smoothly</p>",
        "id": 270782350,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644014091
    },
    {
        "content": "<p>/poll Which one do you prefer?<br>\nrotate, swap<br>\nrotate_goals, swap_goals</p>",
        "id": 270782402,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644014130
    },
    {
        "content": "<p>/poll Which one do you prefer?<br>\nrotate, swap<br>\nrotate_goals, swap_goals</p>",
        "id": 270782415,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644014148
    },
    {
        "content": "<p>Actually nevermind. I think there's enough data to move forward. Thanks everyone for the inputs!</p>",
        "id": 270783479,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644014832
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/178\">This is the PR</a> in case anyone wants to review it further.</p>",
        "id": 270784259,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644015373
    },
    {
        "content": "<p>I think the majority of uses of <code>swap</code> in mathlib are to close a goal not listed first. For this purpose, you really don't want to reorder the remaining goals: a literal <code>swap</code> is a useless tactic that I don't see any reason to have. I wonder if we should instead have a tactic like <code>case</code> but with ordinal goals. (In fact maybe it can even be <code>case</code>? Like <code>case 1 =&gt; ...</code>)</p>",
        "id": 270789014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644018884
    },
    {
        "content": "<p>It's awkward to do indentation around <code>swap</code> because it doesn't follow the usual goal structuring behavior: the previous tactic produced two goals so we would normally use braces afterward but we want to solve the goals in reverse order so it ends up looking like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">prove</span> <span class=\"n\">goal</span> <span class=\"mi\">2</span> <span class=\"o\">},</span>\n<span class=\"o\">{</span> <span class=\"n\">prove</span> <span class=\"n\">goal</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 270789175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644019004
    },
    {
        "content": "<p>I think in this case (which is syntactically fairly easy to detect in mathport) we should translate it to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">n</span>\n<span class=\"n\">case</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">prove</span> <span class=\"n\">goal</span> <span class=\"mi\">2</span>\n<span class=\"n\">prove</span> <span class=\"n\">goal</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>unless someone has a better idea for the name</p>",
        "id": 270789313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644019088
    },
    {
        "content": "<p>Isn't that <code>pick_goal 2</code>?</p>",
        "id": 270789730,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644019334
    },
    {
        "content": "<p>no, <code>pick_goal 2</code> isn't a combinator</p>",
        "id": 270789771,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644019363
    },
    {
        "content": "<p>this is <code>pick_goal 2; { ... }</code></p>",
        "id": 270789810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644019386
    },
    {
        "content": "<p>but the point is that these are actually connected operations, the swapping isn't the point, it's focusing on a non-first goal</p>",
        "id": 270789844,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644019421
    },
    {
        "content": "<p>and in particular we are adding the constraint of closing the goal at the end of the block</p>",
        "id": 270789927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644019465
    },
    {
        "content": "<p>although I think you can opt out of that with many lean 4 tactics if you use <code>?_</code> as the tactic</p>",
        "id": 270789942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644019488
    },
    {
        "content": "<p>so that <code>case 2 =&gt; ?_</code> would be equivalent to <code>pick_goal 2</code></p>",
        "id": 270789954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644019500
    },
    {
        "content": "<p>I dislike the new names for being too verbose for a structural operation, but if I can avoid the need for them then it's fine</p>",
        "id": 270790085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644019588
    },
    {
        "content": "<p>lean 4 tactic mode is all about finding better ways to structure proofs, so I don't mind discouraging these tactics that manipulate the goals in a low level way</p>",
        "id": 270790152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644019660
    },
    {
        "content": "<p>while we're in the renaming mood, I would suggest <code>work_on_goal n tacs</code> -&gt; <code>on_goal n =&gt; tacs</code></p>",
        "id": 270790301,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644019778
    },
    {
        "content": "<p>so it's just the same as <code>case</code> but it doesn't close the goal at the end</p>",
        "id": 270790317,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644019800
    },
    {
        "content": "<p><code>focusn</code></p>",
        "id": 270790554,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644020013
    },
    {
        "content": "<p>you mean for <code>case</code>?</p>",
        "id": 270790699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644020112
    },
    {
        "content": "<p><code>case</code> already exists and has exactly the right semantics so if possible I would just reuse that name</p>",
        "id": 270790714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644020130
    },
    {
        "content": "<p>that is, either overload the syntax to accept a numeral or modify the syntax in lean 4 core to allow <code>case 2 =&gt; ...</code></p>",
        "id": 270790772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644020165
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> something is wrong in my code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">on_goal</span><span class=\"o\">)</span> <span class=\"s2\">\"on_goal\"</span> <span class=\"n\">ppSpace</span> <span class=\"s2\">\"-\"</span><span class=\"bp\">?</span> <span class=\"n\">num</span> <span class=\"n\">ppSpace</span> <span class=\"n\">tacticSeq</span> <span class=\"n\">ppSpace</span> <span class=\"s2\">\"=&gt;\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">@[tactic on_goal]</span> <span class=\"kd\">def</span> <span class=\"n\">evalOnGoal</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n<span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">on_goal</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">$</span><span class=\"n\">seq</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span> <span class=\"bp\">=&gt;</span><span class=\"o\">)</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">onGoal</span> <span class=\"n\">n.toNat</span> <span class=\"n\">seq</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">on_goal</span> <span class=\"bp\">-$</span><span class=\"n\">n</span> <span class=\"bp\">$</span><span class=\"n\">seq</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span> <span class=\"bp\">=&gt;</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">onGoal</span> <span class=\"n\">n.toNat</span> <span class=\"n\">seq</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">onGoal</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">nth</span><span class=\"o\">,</span> <span class=\"n\">goals</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">roundTripNth</span> <span class=\"n\">n</span> <span class=\"n\">reverse</span>\n    <span class=\"k\">match</span> <span class=\"n\">nth</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"goals are 1-indexed\"</span>\n      <span class=\"bp\">|</span> <span class=\"n\">n'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">match</span> <span class=\"n\">goals.splitAt</span> <span class=\"n\">n'</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">[])</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"not enough goals\"</span>\n          <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">gls</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">::</span> <span class=\"n\">grs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"n\">setGoals</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">]</span>\n            <span class=\"n\">evalTactic</span> <span class=\"n\">seq</span>\n            <span class=\"n\">setGoals</span> <span class=\"bp\">$</span> <span class=\"n\">gls</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getUnsolvedGoals</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">grs</span>\n</code></pre></div>",
        "id": 270791106,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644020487
    },
    {
        "content": "<p>How to make the syntax for <code>on_goal n =&gt;</code>?</p>",
        "id": 270791133,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644020521
    },
    {
        "content": "<p>Ah, wait</p>",
        "id": 270791221,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644020593
    },
    {
        "content": "<p><code>syntax (name := on_goal) \"on_goal\" ppSpace \"-\"? num ppSpace \"=&gt;\" ppSpace tacticSeq : tactic</code> works <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 270791297,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644020651
    },
    {
        "content": "<p>PR updated</p>",
        "id": 270791464,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644020824
    },
    {
        "content": "<p>you can actually put spaces in the tokens if you need <code>ppSpace</code> around them</p>",
        "id": 270791774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644021102
    },
    {
        "content": "<p>like<br>\n<code>syntax (name := on_goal) \"on_goal \" \"-\"? num \" =&gt; \" tacticSeq : tactic</code></p>",
        "id": 270791787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644021116
    },
    {
        "content": "<p>Alright. While I'm at it, do you know a simple toy example that both <code>simp</code> and <code>rw</code> fail but <code>simp_rw</code> closes it? I'm also opening a PR with your code</p>",
        "id": 270791927,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644021237
    },
    {
        "content": "<p>does <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#simp_rw\">tactic#simp_rw</a> have anything?</p>",
        "id": 270792001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644021289
    },
    {
        "content": "<p>it does</p>",
        "id": 270792020,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644021311
    },
    {
        "content": "<p>Yeah but can we state that one in Mathlib4? I tried it and it but I didn't know what to import to make it work</p>",
        "id": 270792112,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644021397
    },
    {
        "content": "<p>it looks pretty basic, something like data.set.basic should suffice although I don't know if we have much of that</p>",
        "id": 270792245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644021546
    },
    {
        "content": "<p>We don't have <code>Data.Set</code> yet</p>",
        "id": 270792431,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644021746
    },
    {
        "content": "<p>Here's a standalone version of the example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 270793305,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644022622
    },
    {
        "content": "<p>What about copyrights? I'm copying a lot of stuff from mathlib repo, like tests and docstrings. I'm unsure how to proceed.<br>\nDo I mark the copyright with my name since I'm creating the file, but then list the original authors?</p>",
        "id": 270793734,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644022924
    },
    {
        "content": "<p>The copyright header on ported files should be copied from the original, although you can add your own name</p>",
        "id": 270795119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644024211
    }
]