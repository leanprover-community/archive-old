[
    {
        "content": "<p>Are there any good tutorials on how to use randomness, in particular the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Rand#doc\">docs4#Rand</a> monad?</p>",
        "id": 321191058,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673624360
    },
    {
        "content": "<p>The implementation looks a bit like <a href=\"https://hackage.haskell.org/package/MonadRandom-0.1.3/docs/Control-Monad-Random.html\">Control.Monad.Random</a> from haskell. They've probably got some good tutorials.</p>",
        "id": 321191450,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673624469
    },
    {
        "content": "<p>I think it's just you use <code>Rand A</code> as a monad, within which you can call <code>rand : Rand T</code> to get random elements of any type <code>T</code></p>",
        "id": 321191941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673624612
    },
    {
        "content": "<p>And how does one \"run\" it?</p>",
        "id": 321192179,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673624695
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IO.runRand#doc\">docs4#IO.runRand</a></p>",
        "id": 321192217,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673624703
    },
    {
        "content": "<p>Or to use it with a fixed seed presumably you can just use the <code>StateM</code> machinery</p>",
        "id": 321192338,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673624742
    },
    {
        "content": "<p>If it's just ported from mathlib, you can also use <code>(some_rand_obj.run (ULift.up (mkStdGen seed))).1</code> (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=mkStdGen#doc\">docs4#mkStdGen</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=StateT.run#doc\">docs4#StateT.run</a>)</p>",
        "id": 321192403,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673624758
    },
    {
        "content": "<p>Checking the impl of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IO.runRandWith#doc\">docs4#IO.runRandWith</a>, you can use <code>(StateT.run cmd { down := mkStdGen seed }).fst</code></p>",
        "id": 321192644,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673624815
    },
    {
        "content": "<p>Oh wait, so not much changed from the Lean 3 implementation?</p>",
        "id": 321192706,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673624831
    },
    {
        "content": "<p>Ah, Eric beat me to it!</p>",
        "id": 321192724,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673624835
    },
    {
        "content": "<p>You might be interested in <a href=\"#narrow/stream/113488-general/topic/Stating.20properties.20of.20the.20results.20of.20monads/near/319573258\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Stating.20properties.20of.20the.20results.20of.20monads/near/319573258</a>, <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>, which has some example code</p>",
        "id": 321193247,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673624969
    },
    {
        "content": "<p>Time to see whether the bug I found in <a href=\"#narrow/stream/113488-general/topic/Not.20so.20random\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Not.20so.20random</a> is still there <span aria-label=\"stuck out tongue closed eyes\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue closed eyes\">:stuck_out_tongue_closed_eyes:</span></p>",
        "id": 321193688,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673625074
    },
    {
        "content": "<p>it is, it's documented as such</p>",
        "id": 321195337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673625450
    },
    {
        "content": "<p>How would one fill this in?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Control.Random</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Random.pi</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">RandomGen</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">RandG</span> <span class=\"n\">g</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">RandG</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Do we have a typeclass to say that <code>α</code> is enumerable?</p>",
        "id": 321226842,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673633931
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Encodable#doc\">docs4#Encodable</a> a reasonable choice?</p>",
        "id": 321227306,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673634073
    },
    {
        "content": "<p>Ah! Not there yet.</p>",
        "id": 321227350,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673634090
    },
    {
        "content": "<p><del>You could fill it in as <code>pure default</code></del></p>",
        "id": 321228412,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673634438
    },
    {
        "content": "<p>What's the algorithm for an <a href=\"https://leanprover-community.github.io/mathlib_docs/find/encodable\">docs#encodable</a> type?</p>",
        "id": 321229396,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673634728
    },
    {
        "content": "<p>I don't see how you would generate an infinite series of bits with a finite number of invocations of the random number generator</p>",
        "id": 321229467,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673634749
    },
    {
        "content": "<p>I'm going with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Enum</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">enum</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n  <span class=\"n\">enum_nodup</span> <span class=\"o\">:</span> <span class=\"n\">enum.Nodup</span>\n  <span class=\"n\">mem_enum</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">enum</span>\n</code></pre></div>\n<p>which sounds like it should work?</p>",
        "id": 321229540,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673634780
    },
    {
        "content": "<p>So <code>fintype</code>?</p>",
        "id": 321229604,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673634801
    },
    {
        "content": "<p>No!</p>",
        "id": 321229656,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673634819
    },
    {
        "content": "<p>I need an order on the elements, else I cannot pass around the monad.</p>",
        "id": 321229729,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673634842
    },
    {
        "content": "<p>/me laughs in quot.unquot</p>",
        "id": 321229808,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673634858
    },
    {
        "content": "<p>I don't think you can prove anything interesting about <code>RandG</code> anyway</p>",
        "id": 321229863,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673634877
    },
    {
        "content": "<p>So peeking under the quotient feels like fair game</p>",
        "id": 321229883,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673634888
    },
    {
        "content": "<p>I can make it generate tests for my CATAM projects, however.</p>",
        "id": 321229928,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673634904
    },
    {
        "content": "<p>Right, my point is that the <code>unsafe</code> on <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quot.unquot#doc\">docs4#Quot.unquot</a> isn't a problem for you</p>",
        "id": 321230002,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673634937
    },
    {
        "content": "<p>In my case, <code>α</code> is <code>Fin n</code>, so it feels a bit dumb not providing <code>List.finRange</code> directly</p>",
        "id": 321230030,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673634948
    },
    {
        "content": "<p>To the compiler, I would guess finset.univ.unquot is exactly that</p>",
        "id": 321230172,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673634982
    },
    {
        "content": "<p>But I guess we don't have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fintype#doc\">docs4#Fintype</a> so that's irrelevant</p>",
        "id": 321230193,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673634991
    },
    {
        "content": "<p>Regardless, how do I then use this enumerating list to build my random function?</p>",
        "id": 321230231,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673635014
    },
    {
        "content": "<p>Oh, we have an ad-hoc port for precisely what you need! (the fin instances)</p>",
        "id": 321230233,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673635014
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Randomness/near/321230231\">said</a>:</p>\n<blockquote>\n<p>Regardless, how do I then use this enumerating list to build my random function?</p>\n</blockquote>\n<p><code>mmap</code> over the list of all <code>α</code>, and turn the list back into a function</p>",
        "id": 321230356,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673635064
    },
    {
        "content": "<p>Ah! <code>List.ofFn</code>!</p>",
        "id": 321230510,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673635096
    },
    {
        "content": "<p>No, the reverse; <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.get#doc\">docs4#List.get</a></p>",
        "id": 321230562,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673635112
    },
    {
        "content": "<p>Does that sound right?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">pi</span> <span class=\"o\">[</span><span class=\"n\">Enum</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">RandG</span> <span class=\"n\">g</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">RandG</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"o\">(</span><span class=\"n\">Enum.enum</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mapM</span> <span class=\"n\">r</span>\n</code></pre></div>",
        "id": 321231365,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673635392
    },
    {
        "content": "<p>That's only going to work for <code>Fin</code></p>",
        "id": 321234585,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673636321
    },
    {
        "content": "<p>You're going to need to produce a list of <code>(a, b)</code> pairs to do a lookup for other types (either by zipping with <code>Enum.enum</code>, or by using <code>do b &lt;- r a, pure (a, b)</code> in the map.</p>",
        "id": 321234673,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673636337
    },
    {
        "content": "<p>Which is also going to be slower</p>",
        "id": 321234707,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673636344
    },
    {
        "content": "<p>This is what it looks like now</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Enum</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">enum</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n  <span class=\"n\">enum_nodup</span> <span class=\"o\">:</span> <span class=\"n\">enum.Nodup</span>\n  <span class=\"n\">index</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Fin</span> <span class=\"n\">enum.length</span>\n  <span class=\"n\">enum_index</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">enum.get</span> <span class=\"o\">(</span><span class=\"n\">index</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Enum</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">enum</span> <span class=\"o\">:=</span> <span class=\"n\">List.finRange</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">enum_nodup</span> <span class=\"o\">:=</span> <span class=\"n\">List.nodup_finRange</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">index</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"bp\">↦</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.length_finRange</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">n.2</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">enum_index</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Random</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">RandomGen</span> <span class=\"n\">g</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pi</span> <span class=\"o\">[</span><span class=\"n\">Enum</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">RandG</span> <span class=\"n\">g</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">RandG</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">List.get</span> <span class=\"n\">l</span> <span class=\"bp\">$</span> <span class=\"o\">⟨</span><span class=\"n\">Enum.index</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩)</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"o\">(</span><span class=\"n\">Enum.enum</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mapM</span> <span class=\"n\">r</span>\n</code></pre></div>",
        "id": 321235043,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673636434
    },
    {
        "content": "<p>The problem is that I cannot fill in the <code>sorry</code> because I don't know that the list I'm getting out of the <code>mapM</code> has the right length, which is exactly the same problem as you had, right?</p>",
        "id": 321235210,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673636486
    },
    {
        "content": "<p>Yes, you need a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Vector.mapM#doc\">docs4#Vector.mapM</a> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/vector.mmap\">docs#vector.mmap</a>)</p>",
        "id": 321235304,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673636511
    },
    {
        "content": "<p>Or to map over the subtype</p>",
        "id": 321235333,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673636519
    },
    {
        "content": "<p>Do we not have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.length_mapM?#doc\">docs4#List.length_mapM?</a></p>",
        "id": 321235650,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673636590
    },
    {
        "content": "<p>How would you state it?</p>",
        "id": 321236085,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673636700
    },
    {
        "content": "<p>Oh</p>",
        "id": 321236519,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673636798
    },
    {
        "content": "<p>You could just grab that vector lemma from mathport</p>",
        "id": 321236593,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673636821
    },
    {
        "content": "<p>I guess I need to port <code>Data.Vector.Basic</code>, then :P</p>",
        "id": 321236607,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673636825
    },
    {
        "content": "<p>It has some dependencies yet</p>",
        "id": 321236652,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673636835
    },
    {
        "content": "<p>I think data.fin.tuple.basic and data.list.of_fn</p>",
        "id": 321236746,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673636862
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> You probably don't want an <code>Enum</code> that has an actual <code>List</code> of all elements if you're going to be choosing random elements for programming purposes (for example, a random 32-bit integer is impossible this way, or, equivalently, getting a random <code>Fin 32 -&gt; Fin 2</code>).</p>\n<p>Another option is to have <code>Enum</code> be a wrapper around <code>Equiv</code> to a <code>Fin n</code> for some <code>n</code>. A while back I had some experiment with this: <a href=\"https://gist.github.com/kmill/9055e1fc32d75b818cbb036650d309ed#file-vec_experiment2-lean-L73\">https://gist.github.com/kmill/9055e1fc32d75b818cbb036650d309ed#file-vec_experiment2-lean-L73</a> (not for randomness though)</p>",
        "id": 321240548,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673638078
    },
    {
        "content": "<p>I'm not sure I understand your objection.</p>",
        "id": 321241636,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673638426
    },
    {
        "content": "<p>I just managed to get a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>10</mn><mo>×</mo><mn>10</mn></mrow><annotation encoding=\"application/x-tex\">10 × 10</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">10</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">10</span></span></span></span> matrix of random <code>Bool</code>s!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[[</span><span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">],</span> <span class=\"o\">[</span><span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">],</span> <span class=\"o\">[</span><span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">],</span> <span class=\"o\">[</span><span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">],</span> <span class=\"o\">[</span><span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">],</span> <span class=\"o\">[</span><span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">],</span> <span class=\"o\">[</span><span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">],</span> <span class=\"o\">[</span><span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">],</span> <span class=\"o\">[</span><span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">],</span> <span class=\"o\">[</span><span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">]]</span>\n</code></pre></div>",
        "id": 321241802,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673638482
    },
    {
        "content": "<p>(and I set the probability to <code>0.33333333333</code>)</p>",
        "id": 321241948,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673638539
    },
    {
        "content": "<p>The other ingredient was</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Enum</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ToString</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"bp\">↦</span> <span class=\"n\">toString</span> <span class=\"bp\">$</span> <span class=\"n\">Enum.enum.map</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">toString</span> <span class=\"bp\">$</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 321242057,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673638569
    },
    {
        "content": "<p>That seems like bad ToString</p>",
        "id": 321242186,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673638625
    },
    {
        "content": "<p>Also, you'll get nice line-wrappign if you implement <code>Repr</code> instead</p>",
        "id": 321242210,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673638636
    },
    {
        "content": "<p>How should I unbad my <code>ToString</code>?</p>",
        "id": 321242291,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673638672
    },
    {
        "content": "<p>Well right now it pretends functions are lists</p>",
        "id": 321242402,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673638700
    },
    {
        "content": "<p>You could print it as <code>λ a ↦ [elems...].get ⟨Enum.index a, _⟩</code></p>",
        "id": 321242558,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673638757
    },
    {
        "content": "<p>That's the role of <code>Repr</code>, right? <code>ToString</code> can just \"look nice\"</p>",
        "id": 321242630,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673638786
    },
    {
        "content": "<p>I have no idea what <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ToString#doc\">docs4#ToString</a> is for</p>",
        "id": 321242723,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673638805
    },
    {
        "content": "<p>I thought you were using a different design, where you use <code>Enum</code> and choose elements uniformly at random, since this is something you can do for everything that implements <code>Enum</code>.</p>",
        "id": 321242989,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673638910
    },
    {
        "content": "<p>Ah no, the role of <code>Enum</code> here is to pick a canonical order in which to run the dice rolls.</p>",
        "id": 321243298,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673639006
    },
    {
        "content": "<p>I just defined</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">randFin'</span> <span class=\"o\">[</span><span class=\"n\">NeZero</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">RandG</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"n\">randNat</span> <span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"n\">n</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">Fin.ofNat'</span> <span class=\"n\">a</span> <span class=\"bp\">$</span> <span class=\"n\">NeZero.pos</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ULift.up</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Enum</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">NeZero</span> <span class=\"o\">(</span><span class=\"n\">Enum.enum</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">uniform</span> <span class=\"o\">[</span><span class=\"n\">Enum</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">RandG</span> <span class=\"n\">g</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Enum.enum.get</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">randFin'</span>\n</code></pre></div>\n<p>which I assume is what you meant?</p>",
        "id": 321247535,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673640411
    },
    {
        "content": "<p>I still don't understand your objection. If I had</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List.pi</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>then I would be able to provide an <code>Enum (Fin 32 → Fin 2)</code> instance and generate 32-bits integers uniformly at random.</p>",
        "id": 321247815,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673640500
    },
    {
        "content": "<p>Or is your argument that it is too slow?</p>",
        "id": 321247941,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673640546
    },
    {
        "content": "<p>Mathematically it's fine, but a <code>List (Fin 32 → Fin 2)</code> that enumerates that type would take 96 gigabytes of RAM minimum.</p>",
        "id": 321249631,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673641183
    },
    {
        "content": "<p>(That's two 8-byte pointers per <code>List.cons</code>, and 8 bytes per <code>Fin 32 -&gt; Fin 2</code>, which is an optimistic lower bound for how Lean would represent such a function.)</p>",
        "id": 321250204,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673641408
    },
    {
        "content": "<p>How is your suggested <code>Enum</code> better?</p>",
        "id": 321261181,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673645529
    },
    {
        "content": "<p>And more precisely does it make what I'm doing harder?</p>",
        "id": 321266571,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673647564
    },
    {
        "content": "<p>Right now, I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">pi</span> <span class=\"o\">[</span><span class=\"n\">Enum</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">RandG</span> <span class=\"n\">g</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">RandG</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">List.get</span> <span class=\"n\">l.toList</span> <span class=\"bp\">$</span> <span class=\"o\">⟨</span><span class=\"n\">Enum.index</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩)</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">Vector.mapM</span> <span class=\"n\">r</span> <span class=\"o\">⟨</span><span class=\"n\">Enum.enum</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Do you see any obvious way of generalizing it to dependent types?</p>",
        "id": 321266984,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673647745
    },
    {
        "content": "<p>Put sigma types in the list?</p>",
        "id": 321267406,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673647912
    },
    {
        "content": "<p>Yes but then I need a specific type of vectors whose keys are unique and complete.</p>",
        "id": 321267739,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673648041
    },
    {
        "content": "<p><code>DVector</code>, if you wish</p>",
        "id": 321267838,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673648079
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finmap\">docs#finmap</a>? But I guess of fixed-length</p>",
        "id": 321267957,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673648138
    },
    {
        "content": "<p>Is this an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem, or are you solving this problem because you find it interesting, independent of whether you actually need it?</p>",
        "id": 321268091,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673648178
    },
    {
        "content": "<p>The latter</p>",
        "id": 321268118,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673648191
    },
    {
        "content": "<p>I am happy to leave it as is, but I thought there might be something interesting here.</p>",
        "id": 321268211,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673648229
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Randomness/near/321267739\">said</a>:</p>\n<blockquote>\n<p>Yes but then I need a specific type of vectors whose keys are unique and complete.</p>\n</blockquote>\n<p>Why do you need the keys to be unique and complete? What goes wrong if you just have a vector of sigmas?</p>",
        "id": 321268299,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673648277
    },
    {
        "content": "<p>Okay, they may not need be unique, but I need to find the entry corresponding to a key, so I need the key to exist.</p>",
        "id": 321268701,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673648445
    },
    {
        "content": "<p>Can't you just look in the ith index like you do now?</p>",
        "id": 321268752,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673648471
    },
    {
        "content": "<p>Hmm...</p>",
        "id": 321268782,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673648488
    },
    {
        "content": "<p>Maybe you get stuck trying to cast the sigma type</p>",
        "id": 321268949,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673648541
    },
    {
        "content": "<p>Indeed, I have lost the information that <code>(l.toList.get $ Enum.index a).1 = a</code></p>\n<div class=\"codehilite\" data-code-language=\"def\"><pre><span></span><code>(λ l a ↦ _ -- `β a`\n) &lt;$&gt; Vector.mapM (λ a ↦ (r a).map $ Sigma.mk a) ⟨Enum.enum, rfl⟩\n</code></pre></div>",
        "id": 321272445,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673650084
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> This should be reasonably efficient (though it's still incomplete and would need more development). Generally, <code>Array</code> is more efficient than <code>List</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Equiv.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Control.Random</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Order.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Fin.arrayOf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mkEmpty</span> <span class=\"n\">n</span>\n  <span class=\"n\">for</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a.push</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h.2</span><span class=\"o\">⟩)</span>\n  <span class=\"n\">return</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Fin.size_arrayOf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fin.arrayOf</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">size</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">Fin.get_arrayof</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">Fin.arrayOf</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">size</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">Fin.arrayOf</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Fin.size_arrayOf</span> <span class=\"n\">f</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- should cast</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Enum</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">card</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">enum</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">card</span> <span class=\"bp\">≃</span> <span class=\"n\">α</span>\n  <span class=\"n\">arrayOf</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"c1\">-- a function, which prevents computing an `Array` unless one is actually needed.</span>\n  <span class=\"n\">arrayOf_eq</span> <span class=\"o\">:</span> <span class=\"n\">arrayOf</span> <span class=\"o\">()</span> <span class=\"bp\">=</span> <span class=\"n\">Fin.arrayOf</span> <span class=\"n\">enum</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Enum.size_arrayOf</span> <span class=\"o\">[</span><span class=\"n\">Enum</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Enum.arrayOf</span> <span class=\"o\">()</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">size</span> <span class=\"bp\">=</span> <span class=\"n\">Enum.card</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">arrayOf_eq</span><span class=\"o\">,</span> <span class=\"n\">Fin.size_arrayOf</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Enum</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">card</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n  <span class=\"n\">enum</span> <span class=\"o\">:=</span> <span class=\"n\">Equiv.refl</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"n\">arrayOf</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Fin.arrayOf</span> <span class=\"n\">id</span>\n  <span class=\"n\">arrayOf_eq</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Random</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">RandomGen</span> <span class=\"n\">g</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">randFin'</span> <span class=\"o\">[</span><span class=\"n\">NeZero</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">RandG</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"n\">randNat</span> <span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"n\">n</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">Fin.ofNat'</span> <span class=\"n\">a</span> <span class=\"bp\">$</span> <span class=\"n\">NeZero.pos</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ULift.up</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Enum</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">NeZero</span> <span class=\"o\">(</span><span class=\"n\">Enum.card</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">uniform</span> <span class=\"o\">[</span><span class=\"n\">Enum</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">RandG</span> <span class=\"n\">g</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Enum.enum</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">randFin'</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pi</span> <span class=\"o\">[</span><span class=\"n\">Enum</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">RandG</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">RandG</span> <span class=\"n\">g</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"c1\">-- graph of function we're constructing</span>\n    <span class=\"o\">(</span><span class=\"n\">Enum.arrayOf</span> <span class=\"o\">()</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mapM</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">return</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">⟩)</span>\n  <span class=\"c1\">-- can't prove these two within the do block:</span>\n  <span class=\"k\">have</span> <span class=\"n\">hsize</span> <span class=\"o\">:</span> <span class=\"n\">a.size</span> <span class=\"bp\">=</span> <span class=\"n\">Enum.card</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">have</span> <span class=\"n\">hprop</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"o\">(</span><span class=\"n\">a.get</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Enum.arrayOf</span> <span class=\"o\">())</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">Enum.size_arrayOf</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hsize</span><span class=\"o\">]</span> <span class=\"o\">}⟩</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">return</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span>\n    <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a.get</span> <span class=\"o\">⟨</span><span class=\"n\">Enum.enum.symm</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n      <span class=\"n\">subst</span> <span class=\"n\">this</span>\n      <span class=\"n\">exact</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 321351712,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673700517
    },
    {
        "content": "<p>Having both <code>Enum.enum</code> and <code>Enum.arrayOf</code> gives instances the ability to provide efficient implementations of them. Instances can also fill in one using the other if they don't want to do anything special.</p>",
        "id": 321351970,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673700653
    },
    {
        "content": "<p>Interesting! <del>As a test case, can you generalize the following to dependent functions?</del> Nevermind, you already have. Lean 4 notation is throwing me off.</p>",
        "id": 321403843,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673726457
    }
]