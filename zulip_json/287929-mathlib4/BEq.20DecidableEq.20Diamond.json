[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Data.List.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">instBEq</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"n\">instDecidableEqList</span><span class=\"bp\">=</span> <span class=\"n\">instBEqList</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">--fails</span>\n</code></pre></div>\n<p>Having both <code>BEq</code> and <code>DecidableEq</code> doing the exact same thing seems like a recipe for disaster to me</p>",
        "id": 320721218,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673448674
    },
    {
        "content": "<p>See also <a href=\"#narrow/stream/270676-lean4/topic/instBEqNat.20.3D.20instBEq.20.3A.3D.20rfl.20--fails/near/320613655\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/instBEqNat.20.3D.20instBEq.20.3A.3D.20rfl.20--fails/near/320613655</a> for that <code>Nat</code> version.</p>",
        "id": 320731283,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673451167
    },
    {
        "content": "<p>This is going to be a headache. I want to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.erase_sublist#doc\">docs4#List.erase_sublist</a>, but this lemma is miswritten as it requires <code>DecidableEq Œ±</code> instead of the mere <code>BEq Œ±</code> from <code>List.erase</code>. And now I am trying to prove the correct <code>List.erase_sublist</code> but I notice that I can't use <code>List.erase_eq_eraseP</code> because <code>eraseP</code> requires <code>DecidablePred</code> and adding <code>DecidableEq Œ±</code> to the proof context results in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instBEq#doc\">docs4#instBEq</a> being inferred (also, that's a terrible instance name).</p>",
        "id": 321422085,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1673741942
    },
    {
        "content": "<p>Ah! In fact that means <code>erase_eq_eraseP</code> is miswritten because the LHS should refer to any <code>BEq Œ±</code> instance (instead of <code>instBEq</code>) and the RHS to a <code>DecidableEq Œ±</code> one.</p>",
        "id": 321422201,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1673742070
    },
    {
        "content": "<p>This seems like the decidability conundrum got <em>worse</em> as we now have two typeclasses to annoy us rather than just one.</p>",
        "id": 321422235,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1673742117
    },
    {
        "content": "<p>Oh god, we don't even have <code>Subsingleton (BEq Œ±)</code></p>",
        "id": 321422553,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1673742365
    },
    {
        "content": "<p>(what's the new syntax for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HEq#doc\">docs4#HEq</a> now that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=BEq#doc\">docs4#BEq</a> steals <code>==</code>?)</p>",
        "id": 321424155,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1673743526
    },
    {
        "content": "<p><code>===</code></p>",
        "id": 321428228,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1673746871
    },
    {
        "content": "<p>there isn't one</p>",
        "id": 321428229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673746875
    },
    {
        "content": "<p>this is deliberate since we want you to feel bad for using it</p>",
        "id": 321428266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673746912
    },
    {
        "content": "<p>Oh really? I am misremembering.</p>",
        "id": 321428277,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1673746922
    },
    {
        "content": "<p>But it's very useful for sigma types. I think removing the notation is a bit too strong of a warning.</p>",
        "id": 321428332,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1673746953
    },
    {
        "content": "<p>you can still use it, <code>HEq</code> is not that hard to write</p>",
        "id": 321428350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673746980
    },
    {
        "content": "<p>It's definitely very useful in some circumstances</p>",
        "id": 321428362,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1673746989
    },
    {
        "content": "<p>but being useful doesn't mean it has to have notation</p>",
        "id": 321428369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673747002
    },
    {
        "content": "<p>It's quite hard to read equivalence relations without some infix notation, in my experience</p>",
        "id": 321428899,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1673747505
    },
    {
        "content": "<p>Compromise: an infix notation that‚Äôs terrible to look at</p>",
        "id": 321428959,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673747538
    },
    {
        "content": "<p>E.g. <code>a ‚â°‚â° b</code></p>",
        "id": 321429129,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673747708
    },
    {
        "content": "<p>(fwiw if I were suggesting a notation we were meant to like, I‚Äôd suggest <code>‚öç</code>, a ‚Äúbroken‚Äù equality)</p>",
        "id": 321429351,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673747891
    },
    {
        "content": "<p><code>a =üí•= b</code></p>",
        "id": 321429867,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673748360
    },
    {
        "content": "<p>BTW, should we simplify <code>decide (a = b)</code> to <code>a == b</code>?</p>",
        "id": 321447629,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673764648
    },
    {
        "content": "<p>(or should I move this question to a new thread?)</p>",
        "id": 321447630,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673764664
    }
]