[
    {
        "content": "<p>It seems that the way that coercions work seems to have changed significantly and I have no idea how to do transitive coercions.<br>\nThis is the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> version of what mathlib3port gave me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Coe</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CoeTC</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but it fails in Lean4.</p>",
        "id": 308555311,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1667902942
    },
    {
        "content": "<p>with <code>[Coe S M]</code> it does work, but I don't know whether this is correct solution for <code>Algebra.NeZero</code></p>",
        "id": 308557910,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1667903932
    },
    {
        "content": "<p>it is funny, <code>[CoeTC R S] [Coe S M]</code> works as well. Is there a transitive instance missing somewhere?</p>",
        "id": 308558380,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1667904120
    },
    {
        "content": "<p>Transitivity coercions are only added at the end of the chain, not at the beginning. I don't think that changed between Lean 3 and Lean 4.</p>",
        "id": 308558526,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667904167
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CoeHTCT#doc\">docs4#CoeHTCT</a>; Lean4 has a mechanism for chaining coercions at both ends</p>",
        "id": 308559393,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1667904510
    },
    {
        "content": "<p>Oh yeah, this instance won't work at all:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">coe_trans</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Coe</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CoeTail</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">NeZero</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">NeZero</span> <span class=\"o\">((</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">h.out</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 308688583,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667948275
    },
    {
        "content": "<p>In Lean 4, coercions are expanded eagerly by the elaborator.  So there's never a <code>coe</code> function appearing in the elaborated term, and there's nothing for TC synthesis to match on here.</p>",
        "id": 308688698,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667948331
    },
    {
        "content": "<p>Maybe another angle: in Lean 4, <code>NeZero (r : M)</code> and <code>NeZero ((r : S) : M)</code> will usually elaborate to syntactically the same term.</p>",
        "id": 308688903,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667948433
    },
    {
        "content": "<p>So I think this instance is no longer necessary.</p>",
        "id": 308688936,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667948456
    },
    {
        "content": "<p>Also: <code>[Coe A B]</code> assumptions are evil (because they don't work well with the eager coe expansion).  Avoid them outside of <code>instance [Coe A B] : Coe (List A) (List B)</code></p>",
        "id": 308689028,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667948505
    },
    {
        "content": "<p>Thanks Gabriel for the explanation.</p>",
        "id": 308696394,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1667952880
    },
    {
        "content": "<p>A funny thing happens on <a href=\"https://github.com/leanprover-community/mathlib4/pull/557\">mathlib4#557</a>: In the file I've added I am using the variable <code>n</code> but it is never declared and Lean magically knows that<code>n : Nat</code>. Is this just a very smart type inference system or are variables bleeding into other files?</p>",
        "id": 308697096,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1667953422
    },
    {
        "content": "<p>It's called auto-implicits.  It's the same mechanism that makes <code>def foo (xs : List α) : Nat := xs.length</code> work.</p>",
        "id": 308697257,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667953544
    },
    {
        "content": "<p>I was unsure of the name for a second.  This one is auto-implicits (with the <code>autoImplicit</code> option to turn it off).  Don't confuse it with implicit lambdas, which is also auto and implicit <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> but lambda.</p>",
        "id": 308697427,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1667953676
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span> one of the first things I do when porting a file is to add a bunch of imports so I have tools like library_search, and to turn autoImplicit off (because it can be confusing with files written by a computer). I delete this stuff at the end when the port of the file is finished.</p>",
        "id": 308727838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667977364
    }
]