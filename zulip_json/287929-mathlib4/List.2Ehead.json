[
    {
        "content": "<p><code>List.head</code> in Lean 4 is not <code>list.head</code> in Lean 3, because <code>List.head</code> in Lean 4 demands that the list is nonempty, and <code>list.head</code> in Lean 3 demands that the base type is inhabited. In <code>Mathlib.Init.Align</code> we see <code>#align list.head List.headₓ</code> but I can't find the Lean 4 declaration <code>List.headₓ</code> and suspect it's not there. Should we be making the Lean 4 analogue of <code>list.head</code> and if so, should it be called <code>List.headₓ</code> or is that a silly name? If we're making it, where does it go?</p>",
        "id": 313109126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669828406
    },
    {
        "content": "<p>The Lean4 version is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.head!#doc\">docs4#List.head!</a></p>",
        "id": 313109614,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669828551
    },
    {
        "content": "<p>Is it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">head</span><span class=\"bp\">!</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">panic</span><span class=\"bp\">!</span> <span class=\"s2\">\"empty list\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 313109720,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669828572
    },
    {
        "content": "<p>Mathematically it is, but I guess not as compiled code</p>",
        "id": 313109879,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669828617
    },
    {
        "content": "<p>Can you prove in Lean 4 that <code>[].head! = default _</code>?</p>",
        "id": 313110085,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669828678
    },
    {
        "content": "<p>Yes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">head</span><span class=\"bp\">!</span> <span class=\"bp\">=</span> <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 313110398,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669828757
    },
    {
        "content": "<p>Where should this get <code>#align</code>'d?</p>\n<p>Happy to do in the <code>Data.List.Defs</code> I'm working on...</p>",
        "id": 313110678,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669828823
    },
    {
        "content": "<p>But seems like the align above is incorrect and should be <code>#align</code>'d there...</p>",
        "id": 313110816,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669828862
    },
    {
        "content": "<p>My understanding is that everything in Std or core gets aligned in <code>Mathlib.Init.Align</code></p>",
        "id": 313111159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669828949
    },
    {
        "content": "<p>Hmm. so maybe I need to look at <code>Data.List.Defs</code> to see if the aligns need to move there....</p>",
        "id": 313117744,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669830792
    },
    {
        "content": "<p>For stuff which is defined in core/std in lean 4 but was defined in data.list.defs in Lean 3 (i.e. stuff where the declaration and the <code>#align</code> is commented out and replaced with a <code>#print</code>) I think it's fine to just uncomment the <code>#align</code> and leave it in mathlib4. Files in mathlib which use those declarations are going to be importing data.list.defs so they'll see the #align.</p>",
        "id": 313121049,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669831614
    },
    {
        "content": "<p><code>list.head</code> has not been aligned to a definition yet. My naming convention recommendation is <code>List.headI</code> to mean \"use <code>default</code> in the bad case\"</p>",
        "id": 313204716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669870981
    },
    {
        "content": "<p>I don't think we should align to <code>head!</code> because this could cause panics in code that was intending to use the <code>default</code> value on purpose</p>",
        "id": 313204762,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669871034
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/List.2Ehead/near/313111159\">said</a>:</p>\n<blockquote>\n<p>My understanding is that everything in Std or core gets aligned in <code>Mathlib.Init.Align</code></p>\n</blockquote>\n<p>That's not correct. The location of an <code>#align</code> depends on where the lean 3 file that makes the original declaration is located, not the lean 4 replacement. If it is in mathlib, it should go in the same-named mathlib4 file, and if it is in lean 3 <code>init</code> it should go in the same-named <code>Mathlib.Init</code> file. (If it is in lean 3 core but not in <code>init</code>, it should go in the same place as a mathlib file with the same name would.) However, if a <code>Mathlib.Init</code> file is nothing but <code>#align</code> declarations, then the contents are instead placed in <code>Mathlib.Init.Align</code>.</p>",
        "id": 313205162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669871339
    }
]