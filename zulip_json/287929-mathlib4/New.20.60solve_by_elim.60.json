[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I was experimenting with the refactored <code>solve_by_elim</code>, particularly with the new functionality to throw in <code>symm</code>s of hypotheses.  I expected the following to work; can you tell me if I am doing something wrong?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Int.ModEq</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">4</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≡</span> <span class=\"n\">a</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply_rules</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">]</span> <span class=\"c1\">-- doesn't resolve the goal</span>\n</code></pre></div>\n<p>The goal state after this is</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>a : ℤ\nha : a ≡ 2 [ZMOD 4]\nha_symm : 2 ≡ a [ZMOD 4]\n⊢ 2 ≡ a [ZMOD 4]\n</code></pre></div>\n<p>so at least it correctly formed the <code>symm</code> of <code>ha</code>.</p>",
        "id": 320288690,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673286882
    },
    {
        "content": "<p>I'm also curious why this one doesn't work: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Int.ModEq</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">4</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≡</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply_rules</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">Int.ModEq.add</span><span class=\"o\">,</span> <span class=\"n\">Int.ModEq.mul</span><span class=\"o\">,</span>\n    <span class=\"n\">Int.ModEq.pow</span><span class=\"o\">,</span> <span class=\"n\">Int.ModEq.rfl</span><span class=\"o\">]</span> <span class=\"c1\">-- doesn't resolve the goal</span>\n</code></pre></div>\n<p>After it runs there is one goal left which ought to be doable by <code>Int.ModEq.rfl</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>a b : ℤ\nha : a ≡ 2 [ZMOD 4]\nha_symm : 2 ≡ a [ZMOD 4]\n⊢ b ≡ b [ZMOD 4]\n</code></pre></div>\n<p>and it's strange because presumably it already resolved another <code>b ≡ b [ZMOD 4]</code> goal.</p>",
        "id": 320290164,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673287282
    },
    {
        "content": "<p>The first one is presumably a bug/feature that <code>only</code> doesn't pick up the <code>symm</code> version of that named lemma. I'll have to think about how to allow that.</p>",
        "id": 320326015,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673296512
    },
    {
        "content": "<p>If it would be easier, we could have the syntax <code>apply_rules only [←ha]</code></p>",
        "id": 320327187,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673296978
    },
    {
        "content": "<p><code>apply_rules only [←ha]</code> seems a bit superfluous given <code>apply_rules only [ha.symm]</code> works.</p>",
        "id": 321532956,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673818008
    },
    {
        "content": "<p>I can change the behaviour of <code>only</code> so it automatically includes all the symmetric versions, but then I worry someone will want <code>only only</code>.</p>",
        "id": 321532999,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673818040
    },
    {
        "content": "<p>Regarding the second example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">4</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≡</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply_rules</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">maxDepth</span> <span class=\"o\">:=</span> <span class=\"mi\">13</span><span class=\"o\">})</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">Int.ModEq.add</span><span class=\"o\">,</span> <span class=\"n\">Int.ModEq.mul</span><span class=\"o\">,</span>\n    <span class=\"n\">Int.ModEq.pow</span><span class=\"o\">,</span> <span class=\"n\">Int.ModEq.rfl</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>suffices.</p>",
        "id": 321533561,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673818454
    },
    {
        "content": "<p>We should probably increase the default maxDepth for <code>apply_rules</code>.</p>",
        "id": 321533575,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673818465
    },
    {
        "content": "<p>Reordering the lemmas as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">4</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≡</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply_rules</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">Int.ModEq.rfl</span><span class=\"o\">,</span> <span class=\"n\">Int.ModEq.add</span><span class=\"o\">,</span> <span class=\"n\">Int.ModEq.mul</span><span class=\"o\">,</span>\n    <span class=\"n\">Int.ModEq.pow</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>also works.</p>",
        "id": 321533605,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673818492
    },
    {
        "content": "<p>i.e. so it tries <code>rfl</code> on things before decomposing products and powers that match to begin with. I'm not sure if there is a sensible way to make these tactics try to find better orderings themselves. That's probably out of scope for now.</p>",
        "id": 321533650,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673818548
    },
    {
        "content": "<p>Is there a reason to have a maxDepth for <code>apply_rules</code> at all?  It seems like with a sensible rule set (no <code>symm</code>s) there's no way it would loop.</p>",
        "id": 321534781,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673819423
    },
    {
        "content": "<p>Actually, given that we already have the <code>config := { symm := false }</code> option, maybe <code>apply_rules only [ha]</code> could reasonably use <code>ha.symm</code> as well, and you have to write <code>apply_rules (config := {symm := false}) only [ha]</code> for the <code>only only</code> behaviour!</p>",
        "id": 321539018,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673823172
    },
    {
        "content": "<p>It would be nice if we could have different defaults: default to <code>symm := true</code> normally, but default to <code>symm := false</code> when called with <code>only</code>. Then users could call <code>apply_rules (config := { symm := true }) only [ha]</code> if they wanted the \"weird\" behaviour of <code>only</code> + <code>symm</code>.</p>",
        "id": 321539119,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673823259
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/287929-mathlib4/topic/New.20.60solve_by_elim.60/near/321534781\">said</a>:</p>\n<blockquote>\n<p>Is there a reason to have a maxDepth for <code>apply_rules</code> at all?  It seems like with a sensible rule set (no <code>symm</code>s) there's no way it would loop.</p>\n</blockquote>\n<p>Well, at some point we need a maxDepth, if only for implementation reasons. <a href=\"https://github.com/leanprover-community/mathlib/pull/1580\">mathlib#1580</a> changes the default to 50. <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>, feel free to merge as is or change the default to anything else that suits you.</p>",
        "id": 321540107,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673824261
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1580\">mathlib4#1580</a></p>",
        "id": 321541889,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673826233
    },
    {
        "content": "<p>From the <a href=\"https://github.com/leanprover-community/mathlib4/blob/3fd37757e9ae496854956fb2d0aec463d7e7d5a5/Mathlib/Tactic/SolveByElim.lean#L414\"><code>solve_by_elim</code> source</a>:</p>\n<blockquote>\n<p>(In mathlib3 we could also pass attributes, and all declarations with that attribute were included.  This has not been implemented here.)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Would it be difficult to implement that functionality?  It was very convenient in mathlib3.</p>\n<p>To <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> a bit, a typical use case for me would be to implement a tactic</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">mod_rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>which is a wrapper for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">apply_rules</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">mod_rules</span>\n</code></pre></div>\n<p>where <code>mod_rules</code> is an attribute which I have tagged <code>Int.ModEq.add</code>, <code>Int.ModEq.mul</code>, <code>Int.ModEq.pow</code> ... with.  I'm not sure how to do this without the attribute functionality.</p>",
        "id": 321542953,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673827374
    },
    {
        "content": "<p>It's the usual problem, that there isn't a \"standard\" for looking up everything with an attribute. Presumably it would suffice if this worked with something created via <code>register_simp_attr</code>?</p>",
        "id": 321543598,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673827896
    },
    {
        "content": "<p>(Or alternatively some relative of this, like <code>register_apply_attr</code> that we make up? It would also potentially be useful for aesop.)</p>",
        "id": 321543683,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673827952
    },
    {
        "content": "<p>I don't think the lemmas I will be tagging are technically suitable as simp-lemmas.  But I'm happy to \"abuse\" the functionality in this way if it will work.</p>",
        "id": 321543984,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673828184
    },
    {
        "content": "<p>Actually, can we just re-use the <code>declare_aesop_rule_sets [mod_rules]</code> functionality?</p>",
        "id": 321544046,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673828258
    },
    {
        "content": "<p>Presumably that sets up an attribute which has most of the code needed already written.</p>",
        "id": 321544217,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673828379
    },
    {
        "content": "<p>aesop rule sets are much more complicated</p>",
        "id": 321546534,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673830116
    },
    {
        "content": "<p>Do you have any ideas for a hack that could make my desired syntax</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">mod_rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>work without the attribute functionality?  Some kind of mini-tactic that</p>\n<ul>\n<li>appends a hard-coded list of lemmas to [h1, h2]</li>\n<li>runs <code>apply_rules only</code> on the resulting list</li>\n</ul>\n<p>?</p>",
        "id": 321549781,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673832677
    },
    {
        "content": "<p>I'm writing <code>register_tag_attr</code>, for attributes which have no function except being able to look up everything so tagged.</p>",
        "id": 321551404,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673834269
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/New.20.60solve_by_elim.60/near/321533605\">said</a>:</p>\n<blockquote>\n<p>Reordering the lemmas also works.</p>\n</blockquote>\n<p>By the way, when it comes to using <code>register_tag_attr</code> in <code>apply_rules</code>, it sounds like there will be a question of the relative priority of attribute-tagged lemmas vs lemmas listed individually by the user -- the tactic tries the lemmas in a fixed order, only trying a given lemma if all the previous lemmas failed.</p>\n<p>In my own use cases it is better that the attribute-tagged lemmas be given lower priority than the individually-listed lemmas.  In fact I am going to be bold and claim that this is better in most use cases.</p>",
        "id": 321552632,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673835516
    },
    {
        "content": "<p>Happily, this is what I implemented before reading this message. :-)</p>",
        "id": 321555084,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673838068
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1581\">mathlib4#1581</a></p>",
        "id": 321555095,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673838084
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>, there's a very simple test case</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[dummy_tag_attr]</span> <span class=\"kd\">axiom</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">fail_if_success</span> <span class=\"n\">solve_by_elim</span>\n  <span class=\"n\">solve_by_elim</span> <span class=\"n\">using</span> <span class=\"n\">dummy_tag_attr</span>\n</code></pre></div>\n<p>but I haven't tested it any beyond that. Please let me know how it goes. :-)</p>",
        "id": 321555378,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673838303
    },
    {
        "content": "<p>As far as I can tell, the attribute setup is working correctly.  Thank you <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>!</p>\n<p>I did discover a separate weird behaviour, which I suspect might be because the mathlib3 option for a transparency setting is not implemented yet.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Data.Int.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.SolveByElim</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Int.ModEq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">a</span> <span class=\"s2\">\" ≡ \"</span> <span class=\"n\">b</span> <span class=\"s2\">\" [ZMOD \"</span> <span class=\"n\">n</span> <span class=\"s2\">\"]\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Int.ModEq</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Int.ModEq.add</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≡</span> <span class=\"n\">d</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">≡</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply_rules</span> <span class=\"o\">[</span><span class=\"n\">Int.ModEq.add</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 321584684,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673857729
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/lean-web-editor/#code=import%20tactic.interactive%0A%0Adef%20Int.ModEq%20%28n%20a%20b%20%3A%20%E2%84%A4%29%20%3A%3D%20a%20%25%20n%20%3D%20b%20%25%20n%0A%0Anotation%20a%20%60%20%E2%89%A1%20%60%3A50%20b%20%60%20%5BZMOD%20%60%3A50%20n%20%60%5D%60%3A0%20%3A%3D%20Int.ModEq%20n%20a%20b%0A%0Avariables%20%7Ba%20b%20c%20d%20n%20%3A%20%E2%84%A4%7D%0A%0Atheorem%20Int.ModEq.add%20%28h%E2%82%81%20%3A%20a%20%E2%89%A1%20b%20%5BZMOD%20n%5D%29%20%28h%E2%82%82%20%3A%20c%20%E2%89%A1%20d%20%5BZMOD%20n%5D%29%20%3A%0A%20%20%20%20a%20%2B%20c%20%E2%89%A1%20b%20%2B%20d%20%5BZMOD%20n%5D%20%3A%3D%0A%20%20sorry%0A%0Aexample%20%7Ba%20b%20%3A%20%E2%84%A4%7D%20%3A%20a%20%2B%20b%20%E2%89%A1%20a%20%2B%20a%20%5BZMOD%204%5D%20%3A%3D%0Abegin%0A%20%20apply_rules%20%5BInt.ModEq.add%5D%2C%0A%0Aend%0A\">In mathlib3</a>,  <code>apply_rules</code> does what I want here, which is to leave the following goal state:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>2 goals\na b : ℤ\n⊢ a ≡ a [ZMOD 4]\n\na b : ℤ\n⊢ b ≡ a [ZMOD 4]\n</code></pre></div>\n<p>In the mathlib4 implementation the goal state after the <code>apply_rules</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">HAdd.hAdd</span> <span class=\"bp\">=</span> <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>However, if I mark <code>def Int.ModEq</code> as <code>@[irreducible]</code>, then I get back the mathlib3 behaviour.  So I'm guessing that if <code>apply_rules { md := reducible }</code> were implemented then the mathlib4 version would do what I want.</p>",
        "id": 321584709,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673857737
    },
    {
        "content": "<p>(In the mathlib3 <code>apply_rules</code> I always set <code>{ md := reducible }</code>.)</p>",
        "id": 321584973,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673857816
    },
    {
        "content": "<p>Hmm, actually it can't just be transparency level, because the discrepancy in behaviour persists even without any definitions or notations.  Compare mathlib4</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Data.Int.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.SolveByElim</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Int.ModEq.add</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply_rules</span> <span class=\"o\">[</span><span class=\"n\">Int.ModEq.add</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>with mathlib3</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.interactive</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Int.ModEq.add</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply_rules</span> <span class=\"o\">[</span><span class=\"n\">Int.ModEq.add</span><span class=\"o\">],</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 321586469,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673858419
    },
    {
        "content": "<p>Note that in this example <code>apply_rules [Int.ModEq.add]</code> actually produces a different goal list than <code>apply Int.ModEq.add</code>.</p>",
        "id": 321729004,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673909570
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Aha!  I think the change in behaviour is that <code>apply_rules</code> now has the following feature, from being implemented on top of <code>solve_by_elim</code>: per the <a href=\"https://github.com/leanprover-community/mathlib4/blob/65e2763c915d63463bc27d473549e38ddc301f58/Mathlib/Tactic/SolveByElim.lean#L298\">source</a>,</p>\n<blockquote>\n<p><code>mkAssumptionSet</code> builds a collection of lemmas for use in the backtracking search in <code>solve_by_elim</code>.</p>\n<ul>\n<li>By default, it includes all local hypotheses, along with <code>rfl</code>, <code>trivial</code>, <code>congrFun</code> and <code>congrArg</code>.</li>\n</ul>\n</blockquote>",
        "id": 321733625,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673913045
    },
    {
        "content": "<p>Indeed, the term proof produced by the version which makes the weird goals</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply_rules</span> <span class=\"o\">[</span><span class=\"n\">Int.ModEq.add</span><span class=\"o\">]</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>includes <code>congrFun</code> and <code>congrArg</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>congrFun (congrArg HMod.hMod (congrFun (congrFun (sorryAx (HAdd.hAdd = fun {a b} =&gt; a + a)) a) b)) 4\n</code></pre></div>\n<p>Whereas with the <code>only</code> flag (which your docs say will omit those default lemmas from the applyset), i.e. running</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply_rules</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Int.ModEq.add</span><span class=\"o\">]</span>\n  <span class=\"bp\">.</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">.</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I get the goals I expected, and the term proof indeed has no <code>congrArg</code> or <code>congrFun</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Int.ModEq.add (sorryAx (a % 4 = a % 4)) (sorryAx (b % 4 = a % 4))\n</code></pre></div>",
        "id": 321733631,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673913051
    },
    {
        "content": "<p>What would you think about changing the order of the collection of lemmas built by <code>mkAssumptionSet</code>, so that the default lemmas <code>rfl</code>, <code>trivial</code>, <code>congrFun</code> and <code>congrArg</code> are tried last (after lemmas provided by the user, local hypotheses, and lemmas tagged with listed attributes)?  It seems like that would prevent the behaviour I observed here.</p>",
        "id": 321733733,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673913180
    },
    {
        "content": "<p>This change will conflict slightly with <a href=\"https://github.com/leanprover-community/mathlib4/pull/1581\">mathlib4#1581</a> which hasn't been merged yet, so I propose making this change part of that PR.</p>",
        "id": 321736787,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673915581
    },
    {
        "content": "<p>Done.</p>",
        "id": 321736984,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673915745
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 321736992,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673915759
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/New.20.60solve_by_elim.60/near/321555378\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span>, there's a very simple test case</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[dummy_tag_attr]</span> <span class=\"kd\">axiom</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">fail_if_success</span> <span class=\"n\">solve_by_elim</span>\n  <span class=\"n\">solve_by_elim</span> <span class=\"n\">using</span> <span class=\"n\">dummy_tag_attr</span>\n</code></pre></div>\n<p>but I haven't tested it any beyond that. Please let me know how it goes. :-)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> OK, testing the attribute functionality a little more.  How would I use an attribute in a macro, like the <a href=\"https://github.com/leanprover-community/mathlib4/blob/875dc09121167f061d9f8974fa511cdaebb3b73e/Mathlib/Tactic/SolveByElim.lean#L538\">last line of the <code>apply_rules</code> macro</a>?  I tried writing </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">liftMetaTactic</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">solveByElim.processSyntax</span> <span class=\"n\">cfg</span> <span class=\"n\">true</span> <span class=\"n\">star</span> <span class=\"n\">add</span> <span class=\"n\">remove</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">mod_rules</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>but it complains that <code>mod_rules</code> is a Name, not an Ident.</p>",
        "id": 321757050,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673933822
    },
    {
        "content": "<p>(I can provide the full macro if needed, but it's pretty close to the <code>apply_rules</code> macro except that I want to hard-code a choice of attribute.)</p>",
        "id": 321757066,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673933852
    },
    {
        "content": "<p>Was scrolling through old messages and saw this, so it might be resolved by now, but if that's the error, does <code>mkIdent `mod_rules</code> work?</p>",
        "id": 322411148,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674176785
    },
    {
        "content": "<p>it does (solved in PMs)</p>",
        "id": 322411193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674176810
    }
]