[
    {
        "content": "<p>What typeclasses do we need in mathlib4 to prove that 1+1 is 2? It only needs <code>has_one</code> and <code>has_add</code> in mathlib3, but it seems like that doesn't work anymore</p>",
        "id": 311126929,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1668944107
    },
    {
        "content": "<p>that depends on what you mean by <code>1</code>, and <code>+</code>, and <code>2</code> :)</p>",
        "id": 311127386,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668944374
    },
    {
        "content": "<p>Probably whatever we currently need for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.cast_add\">docs#nat.cast_add</a></p>",
        "id": 311127529,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668944440
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">⟩</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>look ma, no semirings</p>",
        "id": 311127571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668944473
    },
    {
        "content": "<p>The usual class expected by <code>norm_num</code> to handle numeral terms sensibly is <code>AddMonoidWithOne</code></p>",
        "id": 311127715,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668944545
    },
    {
        "content": "<p>Okay, <code>AddMonoidWithOne</code> works - but now for <code>two_mul  [has_add α] [mul_one_class α] [right_distrib_class α] : 2 * n = n + n</code> I need to combine it with something that also implies <code>1 * n = n</code></p>",
        "id": 311127922,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1668944675
    },
    {
        "content": "<p>(this is for <a href=\"https://github.com/leanprover-community/mathib4/pull/655\">mathib4#655</a>, btw)</p>",
        "id": 311128369,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1668944911
    },
    {
        "content": "<p>that looks like a semiring theorem</p>",
        "id": 311131140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668946404
    },
    {
        "content": "<p>less cheating than Mario's version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Cast.Defs</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddZeroClass</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">unaryCast</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">change</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_add</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 311142631,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1668952256
    },
    {
        "content": "<p>oh no, I actually might need to add this lemma to mathlib (for <a href=\"https://github.com/leanprover-community/mathlib4/pull/664\">mathlib4#664</a>)</p>",
        "id": 311144073,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1668953018
    }
]