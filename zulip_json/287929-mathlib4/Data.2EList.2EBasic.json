[
    {
        "content": "<p>This thread can serve to coordinate work on Data.List.Basic. Please write here if you would like to claim a section of it to work on (and then \"unclaim\" when you finish work).</p>",
        "id": 316422117,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671268654
    },
    {
        "content": "<p>I just pushed the mathlib 3 source header</p>",
        "id": 316427849,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671271668
    },
    {
        "content": "<p>Trying <code>reverseRecOn</code></p>",
        "id": 316427989,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1671271722
    },
    {
        "content": "<p>Fixed line 1036</p>",
        "id": 316428307,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671271864
    },
    {
        "content": "<p>I'll claim 1037 -- 1105</p>",
        "id": 316428361,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671271891
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EList.2EBasic/near/316427989\">said</a>:</p>\n<blockquote>\n<p>Trying <code>reverseRecOn</code></p>\n</blockquote>\n<p>done and pushed</p>",
        "id": 316429126,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1671272167
    },
    {
        "content": "<p>I'm working on <code>bidirectionalRec</code></p>",
        "id": 316429449,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671272306
    },
    {
        "content": "<p>done</p>",
        "id": 316430678,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671272957
    },
    {
        "content": "<p>From std:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> @[refl] -/</span> <span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">Sublist.refl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;+</span> <span class=\"n\">l</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">slnil</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Sublist.refl</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cons₂</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I guess this commented-out <code>@[refl]</code> is intentional? It breaks a proof in <code>Data.List.Basic</code>.</p>",
        "id": 316431069,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671273157
    },
    {
        "content": "<p>It wasn't legal at the time, in fact it probably still isn't because the refl attribute is in mathlib</p>",
        "id": 316431123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671273200
    },
    {
        "content": "<p>You can add the refl attribute in the corresponding mathlib file</p>",
        "id": 316431167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671273222
    },
    {
        "content": "<p>I guess that file is <code>Data.List.Basic</code>?</p>",
        "id": 316431242,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671273247
    },
    {
        "content": "<p>I had to manually replace <code>sublist.cons2</code> with <code>Sublist.cons₂</code>. Is that something that mathport ought to do?<br>\n(This was in the instance <code>decidableSublist</code>.)</p>",
        "id": 316432007,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671273610
    },
    {
        "content": "<p>I did a global replace <code>index_of</code> -&gt; <code>indexOf</code>.</p>",
        "id": 316432470,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671273858
    },
    {
        "content": "<p>Oops! That messed up <code>#align</code> statements. Will fix.</p>",
        "id": 316432525,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671273894
    },
    {
        "content": "<p>Pushed a better replace</p>",
        "id": 316432736,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671274032
    },
    {
        "content": "<p>I think we need to add an #align for sublist.cons2. (Because it is defined in Std.)</p>",
        "id": 316432783,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671274058
    },
    {
        "content": "<p>Done <code>map_take</code>. In general I am working from the end and trying termination errors.</p>",
        "id": 316434030,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1671274629
    },
    {
        "content": "<p>globally replacing <code>erasep</code> with <code>eraseP</code></p>",
        "id": 316436333,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1671275230
    },
    {
        "content": "<p>Sorry that was a mistake which I undid. The first terms of <code>align</code> should ha <code>erasep</code></p>",
        "id": 316437231,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1671275387
    },
    {
        "content": "<p>That said a lot of fixes are this replacement and finding that stuff is already in <code>Std</code></p>",
        "id": 316437337,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1671275417
    },
    {
        "content": "<p>I recall doing at least one pass over data.list.basic and porting everything I could to std, so I would expect there to be a lot of #align-only code here</p>",
        "id": 316441122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671277102
    },
    {
        "content": "<p>Yes, most of the work is correcting cases, finding stuff is then in <code>Std</code> and keeping only the align.<br>\nI am also adding attributes where things are marked <code>[simp]</code>. Is that correct? Some seemed not to be simp in Std</p>",
        "id": 316446445,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1671279232
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">indexOf_cons</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">indexOf</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">indexOf</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>this used to be <code>rfl</code> but it no longer is.<br>\nIs that a problem?</p>",
        "id": 316468827,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671288309
    },
    {
        "content": "<p>let's assume not until proven otherwise</p>",
        "id": 316469320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671288512
    },
    {
        "content": "<p>In the Data.Fin.Basic thread we see that <code>0 % b = 0</code> used to be <code>rfl</code> and no longer is, and all that happens is that a bunch of proofs break and have to be fixed manually. Does that count as a problem?</p>",
        "id": 316509265,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671310256
    },
    {
        "content": "<p>that one is going to be more annoying (it's not that <code>0 % b = 0</code> was rfl but rather that the definition of <code>0 : Fin n</code> changed from <code>0</code> to <code>0 % n</code>), but I don't see much of an option without making  fin have two different <code>OfNat</code> instances, which is also a headache</p>",
        "id": 316509491,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671310428
    },
    {
        "content": "<p>Cleaning up lines 1300 - 1500 right now (mostly good, a few spread-out errors)</p>",
        "id": 316519908,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671318106
    },
    {
        "content": "<p>Moving onto 1500 - 1600</p>",
        "id": 316527119,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671324075
    },
    {
        "content": "<p>Do we rename or delete <code>ext</code>? There's already <code>List.ext</code> from <code>Std</code>, but that one uses <code>get?</code> and this one uses <code>nth</code></p>",
        "id": 316528691,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671325094
    },
    {
        "content": "<p>The <code>get?</code> version seems to make the subsequent theorems throw errors</p>",
        "id": 316528818,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671325224
    },
    {
        "content": "<p>I've temporarily renamed it <code>ext_nth</code> in keeping with <code>ext_le</code> below it.</p>",
        "id": 316529858,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671326082
    },
    {
        "content": "<p>is <code>get?</code> different from <code>nth</code>?</p>",
        "id": 316531140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671327315
    },
    {
        "content": "<p><code>List.nth</code> is identical to <code>List.get?</code>. It should be deleted and <code>#align</code>ed</p>",
        "id": 316531648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671327891
    },
    {
        "content": "<p>other definitions in Mathlib.Init.Data.List.Basic that are duplicates:</p>\n<ul>\n<li><code>List.map₂</code>-&gt; <code>List.zipWith</code></li>\n<li><code>List.mapWithIndex</code> -&gt; <code>List.mapIdx</code></li>\n<li><code>List.findIndex</code> -&gt; <code>List.findIdxₓ</code> (prop -&gt; bool)</li>\n<li><code>List.updateNth</code> -&gt; <code>List.set</code></li>\n<li><code>List.bor</code> -&gt; <code>List.or</code></li>\n<li><code>List.band</code> -&gt; <code>List.and</code></li>\n<li><code>List.repeat</code> -&gt; <code>List.replicateₓ</code> (argument order)</li>\n<li><code>List.init</code> -&gt; <code>List.dropLast</code></li>\n</ul>",
        "id": 316532089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671328401
    },
    {
        "content": "<p>A lot (100+) of theorems use <code>nth</code> somewhere in their name;  is it better to use <code>nth</code> as an alias for <code>get?</code> or to ctrl+F and change all of the theorem names to reference <code>get</code>? (Likewise for the other ones with significantly different names which might be referenced in theorems, I guess, but it's probably not as big a deal)</p>",
        "id": 316533791,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671330241
    },
    {
        "content": "<p>Fixing errors in <code>indexOf</code> section (~1250 -1300)</p>",
        "id": 316534361,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671330941
    },
    {
        "content": "<p>mathport is the new ctrl-F</p>",
        "id": 316537273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671333978
    },
    {
        "content": "<p>the theorems I'm talking about are all in <code>Data.List.Basic</code> already, not future files</p>",
        "id": 316537951,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671334798
    },
    {
        "content": "<p>also I'm just asking a stylistic question, not saying it's difficult...like, do we want lots of theorem names to have <code>_get?_</code> in the middle? or do we want to use <code>nth</code> in those names by having an alias</p>",
        "id": 316538412,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671335300
    },
    {
        "content": "<p>Ok, ported the <code>indexOf</code> section—as mentioned, the previous proofs were very short (e.g. rfl), whereas these new ones require diving into <code>findIdx.go</code>. I reordered a couple so I could use them as components. I tried to keep them more elementary than fancy, e.g. \"string of rewrites\" instead of <code>simp</code>—hopefully they can be golfed nonetheless, though. But in the meantime, they work! :)</p>",
        "id": 316547100,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671344845
    },
    {
        "content": "<p>Ideally there are no more <code>nth</code>s at all. We're replacing it with <code>get?</code>.</p>",
        "id": 316562576,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671357448
    },
    {
        "content": "<p>Cleaning up <code>nth_injective</code> and <code>indexOf_cons_ne</code></p>",
        "id": 316624317,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671388959
    },
    {
        "content": "<p>I pushed a tiny bit more progress</p>",
        "id": 316827247,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671482326
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EList.2EBasic/near/316562576\">said</a>:</p>\n<blockquote>\n<p>Ideally there are no more <code>nth</code>s at all. We're replacing it with <code>get?</code>.</p>\n</blockquote>\n<p>I'm not entirely sure about this decision. Maybe leave the <code>nthLe</code>s there for now and tidy stuff up after mathlib is ported. It's easier to fix all in one go and minimize design changes while porting?</p>",
        "id": 316836417,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1671486166
    },
    {
        "content": "<p>Sorry, ignore me, that was an completely stupid thing for me to say. Of course we're not changing <code>nth</code> to <code>get?</code>.</p>",
        "id": 316837196,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671486507
    },
    {
        "content": "<p>I thought this was just a rename. <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 316837241,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671486525
    },
    {
        "content": "<p>but it is a rename?</p>",
        "id": 316838831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671487260
    },
    {
        "content": "<p><code>nth</code> is gone, long live <code>get?</code>. <code>nthLe</code> is still around though</p>",
        "id": 316838929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671487308
    },
    {
        "content": "<p>also to address <span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span> 's naming question re: <code>get?</code> in the middle of theorem names: yes, it's just treated like any other name. You get names like <code>get?_of_nthLe</code> and so on</p>",
        "id": 316839181,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671487416
    },
    {
        "content": "<p>If we switch every <code>nth</code> to <code>get?</code>, why would we not also switch <code>nthLe</code> to <code>get?Le</code>? isn’t <code>nthLe</code> meant to conjure up <code>nth</code>? And if there is no <code>nth</code>…</p>",
        "id": 316840487,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671488026
    },
    {
        "content": "<p>there isn't an <code>le</code> in <code>nthLe</code> either, it's a bad name</p>",
        "id": 316842183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671488680
    },
    {
        "content": "<p>(I think I named it, but I don't know what I was thinking)</p>",
        "id": 316842246,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671488703
    },
    {
        "content": "<p>but until we're ready to rename it it should just stay as is</p>",
        "id": 316842323,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671488740
    },
    {
        "content": "<p>i'll <code>take'</code> on the section <code>Take'</code> (~ 2540 - 2570) right now</p>",
        "id": 316847143,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671490629
    },
    {
        "content": "<p>Isn't <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.nth_le\">docs#list.nth_le</a> ultimately obsolete in favor of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.get#doc\">docs4#List.get</a>, but we're delaying the refactor till after the port?</p>",
        "id": 316848044,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671491049
    },
    {
        "content": "<p>I vote yes</p>",
        "id": 316848085,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1671491074
    },
    {
        "content": "<p>(unless someone wants to backport it to mathlib3 first, but it doesn't seem very important)</p>",
        "id": 316848141,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671491096
    },
    {
        "content": "<p>there are some advantages to having them be separate arguments for induction proofs, but it can probably be marginalized to just some specialized situations</p>",
        "id": 316849477,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671491764
    },
    {
        "content": "<p>if it won't be used much but is still useful occasionally, <code>get'</code>? or <code>getLT</code>?</p>",
        "id": 316850802,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671492521
    },
    {
        "content": "<p>also I'm noticing that <code>take'</code> doesn't actually match with <code>takeD</code>—the new <code>takeD</code> allows any element to be specified as a default, whereas <code>take</code> required <code>[Inhabited α]</code>. should we:</p>\n<ul>\n<li>correspondingly generalize the theorems by adding that explicit value as an (implicit?) argument to the theorems in <code>take</code></li>\n<li>just use <code>default</code> and maintain that these theorems require <code>[Inhabited α]</code></li>\n</ul>",
        "id": 316851513,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671492965
    },
    {
        "content": "<p><code>std</code> seems to have chosen the first option when it absorbed <code>take'_nil</code> as <code>takeD_nil</code>, so I'll do that as well if there aren't any objections.</p>",
        "id": 316851825,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671493195
    },
    {
        "content": "<p>Hmm...in general, in cases like this, is it worth putting <code>porting note:</code>s in <code>/-- ... -/</code> docstrings so that people who are porting can see that we've e.g. changed the arguments required on mouseover?</p>",
        "id": 316852215,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671493416
    },
    {
        "content": "<p>done (without docstrings) (I'll change it back to using <code>[Inhabited α]</code> if I made the wrong choice)</p>",
        "id": 316853862,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671494461
    },
    {
        "content": "<p>The inhabited-taking version should be named <code>takeI</code></p>",
        "id": 316853890,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671494477
    },
    {
        "content": "<p>Do we want to use that instead? Or have both? Currently <code>take'</code> is aligned with <code>takeD</code>. Is that a mistake?</p>",
        "id": 316853951,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671494515
    },
    {
        "content": "<p>or wait. <code>takeI</code> doesn't exist yet—you're talking about in the future</p>",
        "id": 316854332,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671494721
    },
    {
        "content": "<p>What is the type of <code>take'</code>?</p>",
        "id": 316854402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671494762
    },
    {
        "content": "<p><code>Π {α : Type u} [_inst_1 : inhabited α], ℕ → list α → list α</code></p>",
        "id": 316854818,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671494995
    },
    {
        "content": "<p>then it should be renamed to <code>takeI</code></p>",
        "id": 316854990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671495066
    },
    {
        "content": "<p>and not aligned to <code>takeD</code> which is a different function</p>",
        "id": 316855006,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671495079
    },
    {
        "content": "<p>Alright, that align is in <code>Data.List.Defs</code> (and the definition of <code>take'</code> was there too). So...I'll make a PR on a separate branch to fix <code>Data.List.Defs</code> and define <code>takeI</code> there?</p>",
        "id": 316856408,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671496053
    },
    {
        "content": "<p>Hang on. <code>Mathlib.Data.List.Defs</code> currently depends on <code>Mathlib.Data.List.Basic</code>?? Not the other way around?</p>",
        "id": 316856512,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671496131
    },
    {
        "content": "<p>I suppose I'll define <code>takeI</code> in <code>Data.List.Basic</code> until I figure out what's going on.</p>",
        "id": 316856895,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671496407
    },
    {
        "content": "<p>That import is definitely an error</p>",
        "id": 316856928,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671496432
    },
    {
        "content": "<p>the import of <code>Data.List.Chain</code> seems to be the issue</p>",
        "id": 316857009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671496471
    },
    {
        "content": "<p>don't work around an ad hoc port issue by adding more ad hoc port issues</p>",
        "id": 316857048,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671496501
    },
    {
        "content": "<p>when in doubt, copy the structure of mathlib3</p>",
        "id": 316857066,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671496516
    },
    {
        "content": "<blockquote>\n<p>the import of Data.List.Chain seems to be the issue</p>\n</blockquote>\n<p>and in turn <code>Data.List.Pairwise</code> which imports <code>Data.List.Basic</code> directly</p>",
        "id": 316857827,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671497012
    },
    {
        "content": "<p>Ok, here's the current state of things.</p>",
        "id": 316859120,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671497903
    },
    {
        "content": "<p><code>Data.List.Defs</code> has a <code>Chain</code> section where it defines <code>decidableChain</code>, <code>decidableChain'</code>. This needs <code>chain_cons</code> and is the only reason <code>Data.List.Chain</code> is imported.</p>",
        "id": 316859209,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671497978
    },
    {
        "content": "<p>However, things were different in mathlib3: <code>chain_cons</code> was defined in <code>data.list.defs</code>, not <code>data.list.chain</code>.</p>",
        "id": 316859318,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671498042
    },
    {
        "content": "<p>As far as I can tell, <code>data.list.defs</code> did not depend on <code>data.list.chain</code> in mathlib3. This is a new dependency introduced in mathlib4.</p>",
        "id": 316859524,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671498157
    },
    {
        "content": "<p>In fact, I think it was the other way around: <code>data.list.chain</code> depended on <code>data.list.defs</code>.</p>",
        "id": 316860075,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671498490
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EList.2EBasic/near/316857066\">said</a>:</p>\n<blockquote>\n<p>when in doubt, copy the structure of mathlib3</p>\n</blockquote>",
        "id": 316861380,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671499485
    },
    {
        "content": "<p>Move everything where it is supposed to be and everything will be resolved</p>",
        "id": 316861420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671499512
    },
    {
        "content": "<p>Alright, I'll try my best—the imports are totally different for lots of things in mathlib3, it's not just that one file. (For example, seems like old <code>data.list.basic</code> depended on <code>data.list.defs</code> but doesn't anymore, so that'll be a new import in <code>Data.List.Basic</code>.)</p>",
        "id": 316868035,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671504970
    },
    {
        "content": "<p>The definition of <code>take'</code> (through <code>mathlib3port</code> was </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">take'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l.head</span> <span class=\"o\">::</span> <span class=\"n\">take'</span> <span class=\"n\">n</span> <span class=\"n\">l.tail</span>\n</code></pre></div>\n<p>The misalignment was my mistake based on an assumption that <code>D</code> = <code>Default</code> (although I got the naming convention right elsewhere)</p>\n<p>The import of <code>Data.List.Chain</code> was required to port the  defs for the <code>Chain</code> section -- as noted, moving that whole section to <code>Data.List.Chain</code> will remove the dependency (but will also be a divergence from mathlib3)./</p>",
        "id": 316870423,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671507116
    },
    {
        "content": "<p>I did the reverse: move <code>chain_cons</code> to Data.List.Defs. This is how it was in mathlib3</p>",
        "id": 316870509,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671507189
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1118\">mathlib4#1118</a></p>",
        "id": 316870519,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671507211
    },
    {
        "content": "<p>All other chain definitions previously in data.list.defs are now in std, so it was the only one that needed to be moved :)</p>",
        "id": 316870596,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671507259
    },
    {
        "content": "<p>Still trying to make it build, though. Is there some reason the dependency needs to flow from <code>Data.List.Chain</code> -&gt; <code>Data.List.Defs</code> now?</p>",
        "id": 316871304,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671507882
    },
    {
        "content": "<p>No idea... <code>Data.List.Chain</code> existed before the port of <code>Data.List.Defs</code></p>",
        "id": 316871476,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671508056
    },
    {
        "content": "<p>Fortunately, the only reference to <code>takeD</code> is in <code>Data.List.Defs</code> so removing the align and adding <code>takeI</code> should be fine.</p>",
        "id": 316871569,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671508145
    },
    {
        "content": "<p>I think it would be better to define <code>takeI</code> as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">takeI</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n  <span class=\"n\">List.takeD</span> <span class=\"n\">default</span>\n</code></pre></div>",
        "id": 316871696,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671508244
    },
    {
        "content": "<p>I think we're on the same page—I defined it in the PR as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">takeI</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">takeD</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"n\">default</span>\n</code></pre></div>",
        "id": 316873053,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671509491
    },
    {
        "content": "<p>Ok, neat; <a href=\"https://github.com/leanprover-community/mathlib4/pull/1118\">mathlib4#1118</a> is good to go, and should fix things.</p>",
        "id": 316878233,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671514321
    },
    {
        "content": "<p>it worked :) now fixing 2600 - 2620</p>",
        "id": 316885024,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671519217
    },
    {
        "content": "<p>Did <code>foldrRecOn</code> etc.; had to work around the code generator not handling <code>List.rec</code> for now. I'll double-check the <code>IH</code>'s I manually gave tomorrow; it's late :)</p>",
        "id": 316890800,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671522307
    },
    {
        "content": "<p><code>List.mem_cons</code> is in Std. What is the canonical place to add <code>#align list.mem_cons_iff List.mem_cons</code>?</p>",
        "id": 316901304,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671526461
    },
    {
        "content": "<p>The first error in Data.List.Basic is on</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">nthLe_insertNth_self</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">l.length</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hn'</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">insertNth</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">length_insertNth</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_succ_iff</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n</code></pre></div>\n<p>with error message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">auto</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">identifier</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">allowed</span>\n</code></pre></div>\n<p>on the <code>length_insertNth</code></p>",
        "id": 316901606,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671526578
    },
    {
        "content": "<p>How should we do these auto tactics?</p>",
        "id": 316901639,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671526592
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EList.2EBasic/near/316901304\">said</a>:</p>\n<blockquote>\n<p><code>List.mem_cons</code> is in Std. What is the canonical place to add <code>#align list.mem_cons_iff List.mem_cons</code>?</p>\n</blockquote>\n<p>I see, it is already on L21. But it hasn't been used in the rest of the file yet.</p>",
        "id": 316904663,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671527699
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EList.2EBasic/near/316901304\">said</a>:</p>\n<blockquote>\n<p><code>List.mem_cons</code> is in Std. What is the canonical place to add <code>#align list.mem_cons_iff List.mem_cons</code>?</p>\n</blockquote>\n<p>The canonical place to put an <code>#align</code> is in the same place and ordering as the original mathlib3 definition, regardless of whether the lean 4 definition is in mathlib4 or upstream. If the definition is in mathlib4, it should come immediately before the <code>#align</code> unless there is a reason it has to be moved elsewhere</p>",
        "id": 316923100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671534112
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EList.2EBasic/near/316901606\">said</a>:</p>\n<blockquote>\n<p>The first error in Data.List.Basic is on</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">nthLe_insertNth_self</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">l.length</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hn'</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">insertNth</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">length_insertNth</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_succ_iff</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n</code></pre></div>\n<p>with error message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">auto</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">identifier</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">allowed</span>\n</code></pre></div>\n<p>on the <code>length_insertNth</code></p>\n</blockquote>\n<p>How did that happen? Mathport will not generate autoparams like that</p>",
        "id": 316923365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671534200
    },
    {
        "content": "<p>No idea... but that's the code I found on the branch</p>",
        "id": 316925209,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671534805
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EList.2EBasic/near/316923100\">said</a>:</p>\n<blockquote>\n<p>The canonical place to put an <code>#align</code> is in the same place and ordering as the original mathlib3 definition, regardless of whether the lean 4 definition is in mathlib4 or upstream. If the definition is in mathlib4, it should come immediately before the <code>#align</code> unless there is a reason it has to be moved elsewhere</p>\n</blockquote>\n<p>But somehow a lot of <code>#align</code>s are missing, when the definitions ended up in Std.</p>",
        "id": 316938271,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671539180
    },
    {
        "content": "<p>I think Data.List.Basic is quite a mess. E.g., apparently those autoparams are also garbage that shouldn't roll out of mathport.</p>",
        "id": 316938423,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671539235
    },
    {
        "content": "<p>And because of all the missing <code>#align</code>s there are many names that need tweaking and fixing.</p>",
        "id": 316938465,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671539254
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Do you think you could take a look? And maybe use some oneshot magic trickery to get this file to behave?</p>",
        "id": 316938597,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671539286
    },
    {
        "content": "<p>Roughly 2900 lines are now error free. But there's another 2400 lines in that file.</p>",
        "id": 316938705,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671539319
    },
    {
        "content": "<p>Was the port botched in some way? Do we need to start over from mathport output?</p>",
        "id": 316938760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671539345
    },
    {
        "content": "<p>I dunno. Throwing away 3000 lines of porting effort also feels sad.</p>",
        "id": 316938818,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671539366
    },
    {
        "content": "<p>well it's fine if they are good code, I'm not sure exactly what the problem is here</p>",
        "id": 316938879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671539397
    },
    {
        "content": "<p>I'll take a look, data.rat.order needs a review</p>",
        "id": 316938988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671539427
    },
    {
        "content": "<p>For anyone else who is working on this file: I'm currently doing major brain surgery on it, you might want to wait until afterwards and hopefully you already committed any changes you had</p>",
        "id": 316952510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671543653
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EList.2EBasic/near/316923365\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EList.2EBasic/near/316901606\">said</a>:</p>\n<blockquote>\n<p>The first error in Data.List.Basic is on</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">nthLe_insertNth_self</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">l.length</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hn'</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">insertNth</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">length_insertNth</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_succ_iff</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n</code></pre></div>\n<p>with error message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">auto</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">identifier</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">allowed</span>\n</code></pre></div>\n<p>on the <code>length_insertNth</code></p>\n</blockquote>\n<p>How did that happen? Mathport will not generate autoparams like that</p>\n</blockquote>\n<p>I ran across this issue while going over mathport's data.list.basic output again. I see what happened now: in lean 3 the proof looked like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">nth_le_insert_nth_self</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">l.length</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn'</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">insert_nth</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">length_insert_nth</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">nat.lt_succ_iff</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">insert_nth</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"n\">n</span> <span class=\"n\">hn'</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>That is, there is an opt param whose value is given by a <code>by</code> block. In lean 4 this syntax (that is, <code>(x : ty := by tac)</code> has been reappropriated for auto params (in which <code>:= by</code> is a composite keyword), and if you want an opt param whose value is a by block you have to write <code>(x : ty := (by tac))</code> instead. Pinging <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> since this is another parenthesizer bug that isn't about precedence</p>",
        "id": 316964248,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671546849
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EList.2EBasic/near/316964248\">said</a>:</p>\n<blockquote>\n<p>another parenthesizer bug that isn't about precedence</p>\n</blockquote>\n<p>Yes, and because of that I don't think the general parenthesizer framework should solve this, or at least I don't see any reasonable way short of some crazy grammar analysis. But this specific case (and I already forgot the other one) is easy enough to fix. <a href=\"https://github.com/leanprover/lean4/commit/96ccf192e8a5fe216bbc63c688a06b2032bd14f5\">https://github.com/leanprover/lean4/commit/96ccf192e8a5fe216bbc63c688a06b2032bd14f5</a></p>",
        "id": 316997612,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671556411
    },
    {
        "content": "<p>I don't think we should have crazy grammar analysis, I think we should have special case parenthesizers which handle this stuff</p>",
        "id": 316998968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671556823
    },
    {
        "content": "<p>the other one is <code>(try foo); bar</code> turning into <code>try foo; bar</code></p>",
        "id": 316999121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671556881
    },
    {
        "content": "<p>Okay, I'm releasing my hold on Data.List.Basic. I did the first 2900 lines, plus renaming stuff for the part that still hasn't been touched yet.</p>",
        "id": 317012839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671561057
    },
    {
        "content": "<p>fixing 2900-2970</p>",
        "id": 317029720,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671566449
    },
    {
        "content": "<p>Hmm, <code>foldrM_cons</code> was moved to std, but now requires an instance of <code>LawfulMonad</code> which was not previously assumed for the <code>Data.List.Basic</code> version of it.</p>\n<p>How should we proceed? Make all of the downstream theorems also depend on a <code>LawfulMonad</code> instance, or use a different name?</p>",
        "id": 317034372,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671568215
    },
    {
        "content": "<p>yes, the downstream theorems are almost certainly assuming <code>LawfulMonad</code> anyway</p>",
        "id": 317034680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671568337
    },
    {
        "content": "<p>it's not true without the assumption anymore</p>",
        "id": 317034717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671568352
    },
    {
        "content": "<p>working on <code>splitAt_eq_take_drop</code></p>",
        "id": 317079141,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671594177
    },
    {
        "content": "<p><code>splitOnP</code> now takes a <code>Bool</code>-valued predicate instead of a <code>Prop</code>-valued one—we're rewriting everything related to <code>splitOnP</code> to match, not keeping a separate <code>Prop</code>-predicate version of <code>splitOnP</code>, right? just checking.</p>",
        "id": 317082121,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671596986
    },
    {
        "content": "<p>Seems reasonable. You'll want to #align with an <code>ₓ</code>.</p>",
        "id": 317085536,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671600366
    },
    {
        "content": "<p>Having trouble proving things about the new definition of <code>splitOnP</code>. Can't even seem to prove the equation lemmas for <code>splitOnP.go</code></p>",
        "id": 317157743,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1671629243
    },
    {
        "content": "<p>I'll try to work on it rn (~3000 - 3220)</p>",
        "id": 317222608,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671647434
    },
    {
        "content": "<p>Can we safely get rid of theorems of the form <code>split_on_p_aux*</code>? It seems like they're only used to help prove facts about <code>splitOnP</code>, and it might be easier to prove those from scratch due to the new plumbing in <code>splitOnP</code>. (I can't find any occurrences for each of them anywhere else in mathlib3.)</p>",
        "id": 317228972,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671649382
    },
    {
        "content": "<p>I think so</p>",
        "id": 317261841,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1671662736
    },
    {
        "content": "<p>Ok, I think I’ve broken through the worst of the <code>go</code>’s—whew! haven’t committed because I’ve got a bunch of false starts lying around, and don’t want to subject anyone else to the mess :) I’ll resume in a couple hours and try to get a clean commit in for this section.</p>",
        "id": 317276076,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671672171
    },
    {
        "content": "<p>Is the general consensus for this file that lemmas about e.g. <code>filter</code> should take as argument <code>p : α → Bool</code> and not <code>α → Prop</code>?</p>",
        "id": 317378228,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671719251
    },
    {
        "content": "<p>It seems to be really hard to apply versions with <code>Prop</code> in situations where you have <code>Bool</code>, because the <code>p</code> in <code>filter p</code> is not actually the variable like it appears</p>",
        "id": 317378591,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671719320
    },
    {
        "content": "<p>I think the lemmas should use <code>A -&gt; Bool</code> iff the function does</p>",
        "id": 317378766,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671719368
    },
    {
        "content": "<p>it doesn't make any sense for them not to match</p>",
        "id": 317378857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671719391
    },
    {
        "content": "<p>And if the lemma also involves an <code>if</code> about <code>p x</code> where <code>p : A -&gt; Bool</code>, then should it be changed to <code>bif</code>?</p>",
        "id": 317379795,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671719608
    },
    {
        "content": "<p>Seems like maybe sticking with <code>if</code> is better, since <code>if</code> is used in a lot of other places?</p>",
        "id": 317385290,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671721072
    },
    {
        "content": "<p>We may or may not want two versions in those cases. I think <code>if</code> is handled a bit better than <code>bif</code>, which is really just syntax for <code>cond</code> and doesn't get special handling by the <code>split</code>/<code>split_ifs</code> tactics</p>",
        "id": 317387542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671721658
    },
    {
        "content": "<p>finished <code>splitOnP</code>! moving onto <code>lookmap</code>—it seems to be the same sort of <code>go</code>-wrangling.</p>",
        "id": 317448520,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671741790
    },
    {
        "content": "<p>Oh, I wanted to ask: I proved a couple of thorny theorems about <code>modifyLast</code> that dive into <code>modifyLast.go</code>, but didn’t wind up needing them. Though, they fit pretty well in <code>Data.List.Basic</code> and are natural equalities to want (<code>modifyLast f (l ++ [a]) = l ++ [f a]</code> and <code>modifyLast f (l₁ ++ l₂) = l₁ ++ modifyLast f l₂</code> given <code>l₂ ≠ []</code>).</p>\n<p>Should I leave them in their own new section as they are now, or save them til after the port/discard them?</p>",
        "id": 317458706,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671746207
    },
    {
        "content": "<p>Lean complains on L4128 (the first error in the file)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">list.erasep</span> <span class=\"n\">List.erasePₓ</span> <span class=\"c1\">-- prop -&gt; bool</span>\n<span class=\"c1\">-- list.erasep has already been aligned (to List.erasep)</span>\n</code></pre></div>",
        "id": 317460090,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671746945
    },
    {
        "content": "<p>Can we just erase it?</p>",
        "id": 317460112,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671746966
    },
    {
        "content": "<p>I guess so. The align is done in <code>Data.List.Defs</code>.</p>",
        "id": 317460266,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671747050
    },
    {
        "content": "<p>Pushed a minifix</p>",
        "id": 317460272,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671747055
    },
    {
        "content": "<p>I think something else should be done: it's currently aligned to something that doesn't change <code>prop</code> to <code>Bool</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `erasep p l` removes the first element of `l` satisfying the predicate `p`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">erasep</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"n\">l</span> <span class=\"k\">else</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">erasep</span> <span class=\"n\">p</span> <span class=\"n\">l</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">list.erasep</span> <span class=\"n\">List.erasep</span>\n</code></pre></div>",
        "id": 317460283,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671747058
    },
    {
        "content": "<p>Note the name: <code>erasep</code> vs. <code>eraseP</code>, the latter of which is in Std and makes the switch from <code>Prop</code> to <code>Bool</code></p>",
        "id": 317460329,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671747091
    },
    {
        "content": "<p>First error is now on L4313. Second error on L4729. Getting close!</p>",
        "id": 317460336,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671747097
    },
    {
        "content": "<p>I think <code>erasep</code> should be deleted from <code>Data.List.Defs</code></p>",
        "id": 317460359,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671747112
    },
    {
        "content": "<p>Aha, that sounds sensible!</p>",
        "id": 317460416,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671747127
    },
    {
        "content": "<p>Feel free to revert my minifix</p>",
        "id": 317460426,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671747135
    },
    {
        "content": "<p>I'm not seeing your minifix on github; I'll just fix it as-is and hope it goes through <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 317460771,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671747357
    },
    {
        "content": "<p>What's the canonical place for <code>#align</code>s between Lean 3 core and Std? (Here the relevant aligns were <code>ball_cons</code> to <code>forall_mem_cons</code> and <code>ball_nil</code> to <code>forall_mem_nil</code>, all in the namespace <code>list</code>/<code>List</code>)</p>",
        "id": 317672257,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671855627
    },
    {
        "content": "<p>in the relevant mathlib4 file</p>",
        "id": 317672779,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671856431
    },
    {
        "content": "<p><code>ball_cons</code> is in <code>init.data.list.lemmas</code>, so the <code>#align ball_cons forall_mem_cons</code> should go in <code>Mathlib.Init.Data.List.Lemmas</code> (in the same order as the lean 3 declarations)</p>",
        "id": 317672857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671856523
    },
    {
        "content": "<p>I see, I didn't realize Lean core had that sort of correspondence with mathlib—makes sense now that I do :)</p>",
        "id": 317673505,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671857294
    },
    {
        "content": "<p>I don't want to get anyone too excited but Data.List.Basic now compiles without errors.</p>",
        "id": 317718573,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671885450
    },
    {
        "content": "<p>What now?</p>",
        "id": 317718584,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671885453
    },
    {
        "content": "<p>I read through the whole file and it seems to be in pretty good shape actually. Some remaining questions:</p>\n<ul>\n<li>Should we align <code>list.repeat</code> and <code>List.replicate</code>?</li>\n<li>Are we really adding <code>instance : Monad List</code>?</li>\n<li>We don't want to keep these enormous \"dubious translation\" comments, do we?</li>\n<li>Do we need to add dozens of xs, e.g. on all the lemmas about <code>filter</code>? How?</li>\n</ul>",
        "id": 317734465,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671892754
    },
    {
        "content": "<p>I think the answers to the first and third ones are \"no\".</p>",
        "id": 317736467,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671893704
    },
    {
        "content": "<p>Repeat and replicate have the arguments in the opposite order, so I think not</p>",
        "id": 317738955,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1671894936
    },
    {
        "content": "<p>The suggestion elsewhere was to backport the argument reorder</p>",
        "id": 317740744,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671895789
    },
    {
        "content": "<p>Right. So presumably that doesn't require any action in mathlib4 for now</p>",
        "id": 317741718,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671896402
    },
    {
        "content": "<p>If we backport first then we can align and not have to merge things later</p>",
        "id": 317747316,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671899998
    },
    {
        "content": "<p>Hmm, I'd almost rather not backport/align at all</p>",
        "id": 317748487,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671900944
    },
    {
        "content": "<p>We can also not backport and <code>#align</code> with x. The resulting files will not compile because they will e.g. call List.replicate with arguments in the wrong order, but that might be good enough for manual porting work, since we've probably already seen most of the uses of this function in this file</p>",
        "id": 317752931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671904816
    },
    {
        "content": "<p>Ad <code>Monad List</code>, does <code>attribute [local instance]</code> work in Lean 4?</p>",
        "id": 317759867,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671911283
    },
    {
        "content": "<p>Maybe we can just make a <code>def</code> and locally make it an instance to state its API lemmas and wherever else the instance is needed in mathlib</p>",
        "id": 317759897,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671911319
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">}</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">foo</span> <span class=\"n\">Nat</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">bar</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">foo</span> <span class=\"n\">Nat</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>Looks like it's OK</p>",
        "id": 317760121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671911568
    },
    {
        "content": "<p>We could make <code>Monad List</code> a scoped instance</p>",
        "id": 317761016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671912256
    },
    {
        "content": "<p>I fixed the non simp_nf linting errors</p>",
        "id": 317928748,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672047554
    },
    {
        "content": "<p>Scoped to <code>List</code>, or to something more specific (<code>ListMonad</code>?)?</p>",
        "id": 317931820,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672049286
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- somewhere in Std</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">getLast_eq_getLastD</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">getLast</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">getLastD</span> <span class=\"n\">l</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Is this a good simp lemma? Should <code>getLastD</code> be the snf?</p>",
        "id": 317932648,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672049688
    },
    {
        "content": "<p>What should we do with lint errors like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">List.mem_map_swap</span> <span class=\"c\">/-</span><span class=\"cm\"> Left-hand side simplifies from</span>\n<span class=\"cm\">  (y, x) ∈ List.map Prod.swap xs</span>\n<span class=\"cm\">to</span>\n<span class=\"cm\">  Exists fun a ↦ Exists fun b ↦ (a, b) ∈ xs ∧ b = y ∧ a = x</span>\n<span class=\"cm\">using</span>\n<span class=\"cm\">  simp only [List.mem_map', Prod.exists, Prod.swap_prod_mk, Prod.mk.injEq]</span>\n<span class=\"cm\">Try to change the left-hand side to the simplified term!</span>\n<span class=\"cm\"> -/</span>\n</code></pre></div>",
        "id": 317935251,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672051118
    },
    {
        "content": "<p>Should we</p>\n<ol>\n<li>remove the <code>@[simp]</code> and do nothing else</li>\n<li>remove the <code>@[simp]</code> and create a new simp-lemma with a simplified LHS as instructed by the linter</li>\n<li>just modify the statement, as instructed</li>\n</ol>",
        "id": 317935315,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672051174
    },
    {
        "content": "<p>I've fixed all the trivial linting errors. The remaining ones are variations on <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 317935448,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672051235
    },
    {
        "content": "<p>I guess maybe the first question is what is the situation in mathlib 3? Does the LHS not simplify with mathlib's simp set?</p>",
        "id": 317935568,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672051315
    },
    {
        "content": "<p>I think <code>Std</code> introduces a bunch of simp lemmas that diverge from the mathlib3 simpset</p>",
        "id": 317935664,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672051351
    },
    {
        "content": "<p>Both of the examples look like reasonable simp lemmas. <code>List.map_mem_swap</code> less so</p>",
        "id": 317937167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672052205
    },
    {
        "content": "<p><code>getLastD</code> has better defeqs than <code>getLast</code></p>",
        "id": 317937401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672052304
    },
    {
        "content": "<p>Hello, I'd like to contribute to Data.List.Basic or its successor. I could find that there were intense discussions on linting Data.List.Basic, and the only work left is about linting. As I'm still kind of new here, I'd like to ask if I can start porting the successor like Data.List.TFAE, or it should start after every linting errors are corrected.</p>",
        "id": 319317813,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1672802687
    },
    {
        "content": "<p>You can always work on a file which is still in PR stage, you just need to make your PR dependent on that one. If it's still giving linting errors then you will most likely see those same errors in CI for your branch, so it won't be able to be merged either until the other one is fixed and your branch merges the fixes in, but otherwise it shouldn't be a blocker to preparing the PR</p>",
        "id": 319321365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672806457
    },
    {
        "content": "<p>For the record, this is what's left here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Found 4 errors in 25005 declarations (plus 59456 automatically generated ones) in mathlib with 13 linters</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The `simpNF` linter reports:</span>\n<span class=\"cm\">SOME SIMP LEMMAS ARE NOT IN SIMP-NORMAL FORM.</span>\n<span class=\"cm\">see note [simp-normal form] for tips how to debug this.</span>\n<span class=\"cm\">https://leanprover-community.github.io/mathlib_docs/notes.html#simp-normal%20form -/</span>\n<span class=\"c1\">-- Mathlib.Data.List.Basic</span>\n<span class=\"k\">#check</span> <span class=\"n\">List.get_insertNth_self.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"c\">/-</span><span class=\"cm\"> Left-hand side does not simplify, when using the simp lemma on itself.</span>\n<span class=\"cm\">This usually means that it will never apply.</span>\n<span class=\"cm\"> -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">List.nthLe_insertNth_self.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"c\">/-</span><span class=\"cm\"> Left-hand side does not simplify, when using the simp lemma on itself.</span>\n<span class=\"cm\">This usually means that it will never apply.</span>\n<span class=\"cm\"> -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">List.init_cons_of_ne_nil.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"c\">/-</span><span class=\"cm\"> simp can prove this:</span>\n<span class=\"cm\">  by simp only [_private.Std.Data.List.Init.Lemmas.0.List.dropLast._eq_3]</span>\n<span class=\"cm\">One of the lemmas above could be a duplicate.</span>\n<span class=\"cm\">If that's not the case try reordering lemmas or adding @[priority].</span>\n<span class=\"cm\"> -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">List.attach_map_coe'.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"c\">/-</span><span class=\"cm\"> Left-hand side does not simplify, when using the simp lemma on itself.</span>\n<span class=\"cm\">This usually means that it will never apply.</span>\n<span class=\"cm\"> -/</span>\n</code></pre></div>",
        "id": 319469499,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672864894
    },
    {
        "content": "<p>These seem to be final end-bosses.</p>",
        "id": 319469626,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672864951
    },
    {
        "content": "<p>Does it make sense to delete <code>init_cons_of_ne_nil</code> and <code>#noalign</code> it? It seems it can replaced in a <code>simp</code> call by <code>simp only [dropLast]</code> now. Or do we align it with the equation for <code>dropLast</code>, if that's possible?</p>",
        "id": 319505510,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1672885140
    },
    {
        "content": "<p>if the theorem is still true I don't see any reason to remove it</p>",
        "id": 319505598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672885184
    },
    {
        "content": "<p>ok! so just remove <code>@[simp]</code> from it?</p>",
        "id": 319505656,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1672885208
    },
    {
        "content": "<p>is <code>dropLast</code> marked as simp?</p>",
        "id": 319505789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672885336
    },
    {
        "content": "<p>ah...no, it's not.</p>",
        "id": 319505849,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1672885408
    },
    {
        "content": "<p>however, <code>example {α : Type _} {x : α} {l : List α} (_ : l ≠ []) : (x :: l).dropLast = x :: l.dropLast := by simp</code> works and the trace shows that it uses a <code>dropLast</code> definition lemma (<code>@List.dropLast._eq_3</code>, as expected)</p>",
        "id": 319506106,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1672885616
    },
    {
        "content": "<p>(maybe I don't know the appropriate way to check if <code>dropLast</code> is marked as simp...all I know is <code>@[simp]</code> doesn't appear above the declaration)</p>",
        "id": 319506364,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1672885845
    },
    {
        "content": "<p>There's an <code>attribute [simp] dropLast</code> in std4.</p>",
        "id": 319507149,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672886577
    },
    {
        "content": "<p>(ah, ok, I see how it works now!)</p>",
        "id": 319507372,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1672886740
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EList.2EBasic/near/319507149\">said</a>:</p>\n<blockquote>\n<p>There's an <code>attribute [simp] dropLast</code> in std4.</p>\n</blockquote>\n<p>Wait, I thought those weren't global? Am I mistaken?</p>",
        "id": 319523225,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672901385
    },
    {
        "content": "<p><code>attribute [simp]</code> is global, but <code>attribute [local simp]</code> and <code>attribute [-simp]</code> are not</p>",
        "id": 319533212,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672906419
    },
    {
        "content": "<p>oooh! I see. That's not what I expected.</p>",
        "id": 319533972,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672906837
    },
    {
        "content": "<p>That certainly is a bit confusing. Is there a hover or something else that will teach people this?</p>",
        "id": 319536440,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672908122
    },
    {
        "content": "<p>This file is now passing the linter! Thanks <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 319543991,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672911067
    },
    {
        "content": "<p>What do we do here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">nthLe_reverse'</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.reverse.length</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">l.reverse.nthLe</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"bp\">=</span> <span class=\"n\">l.nthLe</span> <span class=\"o\">(</span><span class=\"n\">l.length</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">hn'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">convert</span> <span class=\"n\">nthLe_reverse</span> <span class=\"n\">l.reverse</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span><span class=\"o\">)</span> <span class=\"n\">hn</span> <span class=\"n\">using</span> <span class=\"mi\">1</span>\n  <span class=\"n\">simp</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">list.nth_le_reverse'</span> <span class=\"n\">List.nthLe_reverse'</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">get_reverse'</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">l.reverse.get</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">l.get</span> <span class=\"o\">⟨</span><span class=\"n\">l.length</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">nthLe_reverse'</span> <span class=\"bp\">..</span>\n\n<span class=\"c1\">-- FIXME: prove it the other way around</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">deprecated</span> <span class=\"n\">get_reverse'</span><span class=\"o\">]</span> <span class=\"n\">nthLe_reverse'</span>\n</code></pre></div>",
        "id": 319594659,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672928185
    },
    {
        "content": "<p>Note that the types don't line up:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">nthLe_reverse'</span>\n<span class=\"c1\">-- List.nthLe_reverse'.{u} {α : Type u} (l : List α) (n : ℕ) (hn : n &lt; length (reverse l))</span>\n<span class=\"c1\">--   (hn' : length l - 1 - n &lt; length l) : nthLe (reverse l) n hn = nthLe l (length l - 1 - n) hn'</span>\n<span class=\"k\">#check</span> <span class=\"n\">get_reverse'</span>\n<span class=\"c1\">-- List.get_reverse'.{u} {α : Type u} (l : List α) (n : Fin (length (reverse l))) (hn' : length l - 1 - ↑n &lt; length l) :</span>\n<span class=\"c1\">--   get (reverse l) n = get l { val := length l - 1 - ↑n, isLt := hn' }</span>\n</code></pre></div>",
        "id": 319594817,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672928227
    },
    {
        "content": "<p>So I'm questioning whether the <code>attribute [deprecated]</code> is even correct.</p>",
        "id": 319594913,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672928252
    },
    {
        "content": "<p>Ooh, I guess this is just a very general thing about <code>nthLe</code> vs <code>get</code>?</p>",
        "id": 319595373,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672928379
    },
    {
        "content": "<p>I'm not sure we should have deprecated <code>nthLe</code> in that case. Sounds like something that should better be done after the port.</p>",
        "id": 319595518,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672928409
    },
    {
        "content": "<p>We're doing too many refactors on the fly.</p>",
        "id": 319595546,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672928418
    },
    {
        "content": "<p>I fixed two of the <code>FIXME</code>s in the file. What remains is very non-urgent.</p>",
        "id": 319599567,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672929603
    },
    {
        "content": "<p>I'm going to kick this on the queue.</p>",
        "id": 319599619,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672929610
    },
    {
        "content": "<p>Ooh, <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> was faster (-;</p>",
        "id": 319599688,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672929639
    },
    {
        "content": "<p><img alt=\":merge:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/18527.png\" title=\"merge\"> done <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 319604153,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672931010
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EList.2EBasic/near/319595546\">said</a>:</p>\n<blockquote>\n<p>We're doing too many refactors on the fly.</p>\n</blockquote>\n<p><code>deprecated</code> is explicitly <em>not</em> a refactor. It is a marker which is used to prepare the library for a future refactor. Importantly, the original lemmas still exist and still have the types required for downstream stuff.</p>",
        "id": 319657918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672947141
    },
    {
        "content": "<p>the <code>nthLe</code> refactor cannot proceed until we have at least the majority of code using <code>nthLe</code> available, which means it will not be removed / reassessed until after the port</p>",
        "id": 319658089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672947222
    },
    {
        "content": "<p>in general <code>deprecated</code> is being used when the replacement lemma is more than a little different, such that it would be too much to do the refactor on the fly</p>",
        "id": 319658359,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672947307
    },
    {
        "content": "<p>but the deprecated linter can be an annoying speedbump. Should we be lax about nolinting in that case?</p>",
        "id": 319662931,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672948909
    },
    {
        "content": "<p>nolint doesn't work on the deprecated linter, since it's not a real linter but just a warning that is thrown up when you use a deprecated definition directly during elaboration. You have to use <code>set_option linter.deprecated false</code> to turn it off or else CI will complain</p>",
        "id": 319674368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672953536
    },
    {
        "content": "<p>So should we be lax with that option?</p>",
        "id": 319676080,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672954262
    },
    {
        "content": "<p>yes</p>",
        "id": 319678331,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672955232
    },
    {
        "content": "<p>I mean it's a requirement in any case</p>",
        "id": 319678353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672955241
    },
    {
        "content": "<p>Or you rewrite the proof... which can be tedious.</p>",
        "id": 319679298,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672955621
    },
    {
        "content": "<p>for a theorem which mentions <code>nthLe</code> rewriting the proof isn't an option</p>",
        "id": 319679627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672955763
    },
    {
        "content": "<p>sure, but I've seen examples where only the proof used deprecated decls.</p>",
        "id": 319679732,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672955800
    },
    {
        "content": "<p>I vote for allowing those during the port.</p>",
        "id": 319679759,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672955812
    },
    {
        "content": "<p>for theorems which use <code>nthLe</code> internally but not in the statement, I will leave it up to the porter whether they want to try removing it or not</p>",
        "id": 319679791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672955824
    },
    {
        "content": "<p>leaving it alone is totally fine</p>",
        "id": 319679828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672955839
    }
]