[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/949\">mathlib4#949</a> we have lots of theorems that look like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">preimage_coe_compl'</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">Subtype.val</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">ᶜ</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span>\n  <span class=\"n\">preimage_coe_eq_empty.2</span> <span class=\"o\">(</span><span class=\"n\">compl_inter_self</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>that previously were written using <code>coe</code>. For now I've just left a porting note about this, and may merge soon, but I want to discuss what we should be doing here.</p>\n<p>Options:</p>\n<ol>\n<li>use <code>Subtype.val</code> as in the current statements.</li>\n<li>write <code>fun x : s =&gt; (x : α)</code> (which Lean will compile to <code>Subtype.val</code> anyway!)</li>\n<li>introduce a new <code>def</code> synonym of <code>Subtype.val</code> for this purpose.</li>\n</ol>",
        "id": 315289342,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670821622
    },
    {
        "content": "<p>I think my inclination is: go with 1. while porting, but consider when we might switch to 3.</p>",
        "id": 315289373,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670821660
    },
    {
        "content": "<p>Currently there are copies of theorems in both 1 and 2</p>",
        "id": 315290730,
        "sender_full_name": "Winston Yin",
        "timestamp": 1670822661
    },
    {
        "content": "<p>I don't see why to have a synonym for <code>Subtype.val</code></p>",
        "id": 315295445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670825738
    },
    {
        "content": "<p>it seems like a perfectly good normal form</p>",
        "id": 315295499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670825749
    },
    {
        "content": "<p>We've talked about breaking the defeq of <code>Set</code> and <code>⬝ → Prop</code>, after which presumably it wouldn't be <code>Subtype.val</code> anymore, but still would be <code>fun x : s =&gt; (x : α)</code>.</p>",
        "id": 315301521,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670829162
    }
]