[
    {
        "content": "<p>I have the line in a proof in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1464\">mathlib4#1464</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">TProd.mk</span> <span class=\"n\">l</span> <span class=\"n\">f</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.TProd</span> <span class=\"n\">l</span> <span class=\"n\">t</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>which gives <code>unexpected syntax</code> &amp; I'm not exactly sure what that's supposed to mean?</p>",
        "id": 321763911,
        "sender_full_name": "Arien Malec",
        "timestamp": 1673938100
    },
    {
        "content": "<p>What happens if you try <code>let foo := TProd.mk l f...t i</code>? Does that typecheck?</p>",
        "id": 321774623,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673943473
    },
    {
        "content": "<p>First thing I tried &amp; same issue <span aria-label=\"smiling face with tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"smiling face with tear\">:smiling_face_with_tear:</span></p>",
        "id": 321851478,
        "sender_full_name": "Arien Malec",
        "timestamp": 1673967792
    },
    {
        "content": "<p>Does <code>change _ at _</code> syntax exist yet?</p>",
        "id": 321853106,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673968208
    },
    {
        "content": "<p>The only <code>change ... at ...</code> in mathlib4 I've seen is in a porting note.</p>",
        "id": 321853302,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673968265
    },
    {
        "content": "<p>Here's a workaround. Change your <code>have</code> to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">TProd.mk</span> <span class=\"n\">l</span> <span class=\"n\">f</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.TProd</span> <span class=\"n\">l</span> <span class=\"n\">t</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">change</span> <span class=\"n\">f</span> <span class=\"bp\">∈</span> <span class=\"n\">TProd.mk</span> <span class=\"n\">l</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">Set.TProd</span> <span class=\"n\">l</span> <span class=\"n\">t</span> <span class=\"bp\">↔</span> <span class=\"n\">f</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">t</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mk_preimage_tprod</span> <span class=\"n\">l</span> <span class=\"n\">t</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 321853389,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673968279
    }
]