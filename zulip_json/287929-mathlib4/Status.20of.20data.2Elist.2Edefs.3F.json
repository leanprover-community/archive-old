[
    {
        "content": "<p>This one shows up in the dependency graph all over the place. It's spuriously \"blocked\" by <code>RBTree</code>/<code>RBMap</code>, I think (these are now upstream).</p>\n<p>When I look at this file, it has a bunch of commented out lines that I haven't investigated -- my supposition is that these are method that are implemented upstream as well?</p>",
        "id": 312674954,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669655011
    },
    {
        "content": "<p>Most of the definitions are in Lean 4 core.</p>",
        "id": 312677851,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669655801
    },
    {
        "content": "<p>The first exception I found was <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.nth_le\">docs#list.nth_le</a>. There is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.get#doc\">docs4#List.get</a> but it bundles the arguments.</p>",
        "id": 312678011,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669655846
    },
    {
        "content": "<p>So, we need to either introduce <code>List.get'</code> or migrate <code>mathlib</code> to the Lean 4-style API.</p>",
        "id": 312678182,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669655887
    },
    {
        "content": "<p>Also, you can start migrating files that depend on <code>data.list.defs</code> and hope that all the required definitions are in the Std library.</p>",
        "id": 312678312,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669655920
    },
    {
        "content": "<p>Let's introduce primed versions to make porting easy. We can eventually add a @[deprecated] tag and do a rename PR.</p>",
        "id": 312707886,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669664672
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>  -- are you working on this? I'm wading through &amp; happy to do the dirty work with you as a reviewer. I'm trying to cross align through name changes, etc.</p>",
        "id": 312745138,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669680543
    },
    {
        "content": "<p>No, I'm not working. I had a look, then decided not to start actual work.</p>",
        "id": 312749876,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669683793
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>  this is ready for review in <a href=\"https://github.com/leanprover-community/mathlib4/pull/803\">mathlib4#803</a></p>\n<p>There are still a few typing issues that are eluding me, and some comments I've mostly marked with \"porting notes\" or \"TODO\" that might require review.</p>",
        "id": 313189646,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669858779
    },
    {
        "content": "<p>This branch doesn't compile for me; <code>PermutationsAux.rec</code> can't prove that it terminates and I've just spent over an hour banging my head against a wall trying to figure out how <code>termination_by</code> works :-(</p>",
        "id": 313566638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670006986
    },
    {
        "content": "<p>what's the declaration?</p>",
        "id": 313567891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670007386
    },
    {
        "content": "<p>looking at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.permutations_aux.rec/src\">src#list.permutations_aux.rec</a> (which I assume is what you are talking about), it looks like the termination metric is <code>(length l + length i, length l)</code>, so something along the lines of <code>termination_by _ ts is =&gt; (length ts + length is, length ts)</code> should work</p>",
        "id": 313568395,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670007563
    },
    {
        "content": "<p>FYI, the lean 4 name of that definition should be <code>List.permutationsAux.rec</code>. The <code>permutationsAux</code> part should not be upcased because this is an inner function</p>",
        "id": 313568583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670007617
    },
    {
        "content": "<p>Yeah, Scott already observed that in the PR. Your suggestion doesn't work; Lean can't prove the false goal <code>length ts + succ (length is) &lt; succ (length ts) + length is</code></p>",
        "id": 313569097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670007764
    },
    {
        "content": "<p>I'm not sure what the default order is on Nat x Nat but I want to use prod.lex</p>",
        "id": 313569219,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670007803
    },
    {
        "content": "<p>that should be the default order</p>",
        "id": 313569258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670007814
    },
    {
        "content": "<p>if you want to use a relation directly instead of a type that happens to be well founded, you should use <code>termination_by'</code> (which should have been the output of mathport)</p>",
        "id": 313569388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670007850
    },
    {
        "content": "<p>Oh is that actually a thing?</p>",
        "id": 313569435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670007864
    },
    {
        "content": "<p>I assumed it was a bug!</p>",
        "id": 313569461,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670007872
    },
    {
        "content": "<p>do you have a MWE?</p>",
        "id": 313569467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670007874
    },
    {
        "content": "<p>addressed naming</p>\n<p>Working on <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 313569491,
        "sender_full_name": "Arien Malec",
        "timestamp": 1670007884
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/803\">mathlib4#803</a></p>",
        "id": 313569520,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670007894
    },
    {
        "content": "<p>MWE</p>",
        "id": 313569561,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670007909
    },
    {
        "content": "<p>I assume the declaration on its own works as such</p>",
        "id": 313569622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670007927
    },
    {
        "content": "<p>since we're talking about data.list.defs here</p>",
        "id": 313569658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670007937
    },
    {
        "content": "<p>ironically the only reason I was trying to get this file fixed was to get hold of <code>List.nthLe</code> which doesn't seem to be in this file anyway</p>",
        "id": 313569719,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670007958
    },
    {
        "content": "<p>Talking of which, has anyone seen <code>List.map₂</code>?</p>",
        "id": 313569820,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670007978
    },
    {
        "content": "<p>what about it?</p>",
        "id": 313570058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670008075
    },
    {
        "content": "<p>I was trying to port <code>lean_core.data.vector</code> but it needs <code>List.nthLe</code> and <code>List.map₂</code></p>",
        "id": 313570174,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670008104
    },
    {
        "content": "<p>that's zipWith isn't it?</p>",
        "id": 313570308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670008152
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.map₂/src\">src#list.map₂</a> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.zip_with/src\">src#list.zip_with</a></p>",
        "id": 313570350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670008172
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.Nat.Lemmas</span>\n<span class=\"kn\">open</span> <span class=\"n\">List</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">meas</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">length</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Local notation for termination relationship used in `rec` below</span>\n<span class=\"sd\">-/</span>\n<span class=\"kn\">local</span> <span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" ≺ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">InvImage</span> <span class=\"o\">(</span><span class=\"n\">Prod.Lex</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">))</span> <span class=\"n\">meas</span>\n\n<span class=\"sd\">/-- A recursor for pairs of lists. To have `C l₁ l₂` for all `l₁`, `l₂`, it suffices to have it for</span>\n<span class=\"sd\">`l₂ = []` and to be able to pour the elements of `l₁` into `l₂`. -/</span>\n<span class=\"kd\">@[elab_as_elim]</span>\n<span class=\"kd\">def</span> <span class=\"n\">permutationsAux.rec</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H0</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">is</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"o\">[]</span> <span class=\"n\">is</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"n\">ts</span> <span class=\"n\">is</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">ts</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">is</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">is</span> <span class=\"o\">[]</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">ts</span><span class=\"o\">)</span> <span class=\"n\">is</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">is</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">H0</span> <span class=\"n\">is</span>\n  <span class=\"bp\">|</span> <span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">ts</span><span class=\"o\">,</span> <span class=\"n\">is</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">⟨</span><span class=\"n\">ts</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">is</span><span class=\"o\">⟩</span> <span class=\"bp\">≺</span> <span class=\"o\">⟨</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">ts</span><span class=\"o\">,</span> <span class=\"n\">is</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n      <span class=\"k\">show</span> <span class=\"n\">Prod.Lex</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n           <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">ts</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">is</span><span class=\"o\">),</span> <span class=\"n\">length</span> <span class=\"n\">ts</span><span class=\"o\">)</span>\n           <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">ts</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">is</span><span class=\"o\">,</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">ts</span><span class=\"o\">))</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_add</span><span class=\"o\">]</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Prod.Lex.right</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">lt_succ_self</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">⟨</span><span class=\"n\">is</span><span class=\"o\">,</span> <span class=\"o\">[]⟩</span> <span class=\"bp\">≺</span> <span class=\"o\">⟨</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">ts</span><span class=\"o\">,</span> <span class=\"n\">is</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Prod.Lex.left</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_add_of_pos_left</span> <span class=\"o\">(</span><span class=\"n\">succ_pos</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n    <span class=\"n\">H1</span> <span class=\"n\">t</span> <span class=\"n\">ts</span> <span class=\"n\">is</span> <span class=\"o\">(</span><span class=\"n\">permutationsAux.rec</span> <span class=\"n\">H0</span> <span class=\"n\">H1</span> <span class=\"n\">ts</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">is</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">permutationsAux.rec</span> <span class=\"n\">H0</span> <span class=\"n\">H1</span> <span class=\"n\">is</span> <span class=\"o\">[])</span>\n    <span class=\"n\">termination_by'</span>\n      <span class=\"o\">⟨(</span><span class=\"bp\">·</span> <span class=\"bp\">≺</span> <span class=\"bp\">·</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">InvImage.wf</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">meas</span> <span class=\"o\">(</span><span class=\"n\">Prod.instWellFoundedRelationProd</span> <span class=\"n\">lt_wfRel</span> <span class=\"n\">lt_wfRel</span><span class=\"o\">)⟩</span>\n</code></pre></div>",
        "id": 313570509,
        "sender_full_name": "Arien Malec",
        "timestamp": 1670008211
    },
    {
        "content": "<p>I think both <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  and <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> have tried to crack this one...</p>",
        "id": 313570688,
        "sender_full_name": "Arien Malec",
        "timestamp": 1670008284
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">permutationsAux.rec</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H0</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">is</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"o\">[]</span> <span class=\"n\">is</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"n\">ts</span> <span class=\"n\">is</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">ts</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">is</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">is</span> <span class=\"o\">[]</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">ts</span><span class=\"o\">)</span> <span class=\"n\">is</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">is</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">H0</span> <span class=\"n\">is</span>\n  <span class=\"bp\">|</span> <span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">ts</span><span class=\"o\">,</span> <span class=\"n\">is</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">H1</span> <span class=\"n\">t</span> <span class=\"n\">ts</span> <span class=\"n\">is</span> <span class=\"o\">(</span><span class=\"n\">permutationsAux.rec</span> <span class=\"n\">H0</span> <span class=\"n\">H1</span> <span class=\"n\">ts</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">is</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">permutationsAux.rec</span> <span class=\"n\">H0</span> <span class=\"n\">H1</span> <span class=\"n\">is</span> <span class=\"o\">[])</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">ts</span> <span class=\"n\">is</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">ts</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">is</span><span class=\"o\">,</span> <span class=\"n\">length</span> <span class=\"n\">ts</span><span class=\"o\">)</span>\n<span class=\"n\">decreasing_by</span> <span class=\"n\">simp_wf</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_add</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">decreasing_tactic</span>\n</code></pre></div>",
        "id": 313571487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670008542
    },
    {
        "content": "<p>alternatively:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">Nat.succ_add</span> <span class=\"k\">in</span>\n<span class=\"sd\">/-- A recursor for pairs of lists. To have `C l₁ l₂` for all `l₁`, `l₂`, it suffices to have it for</span>\n<span class=\"sd\">`l₂ = []` and to be able to pour the elements of `l₁` into `l₂`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">permutationsAux.rec</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H0</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">is</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"o\">[]</span> <span class=\"n\">is</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"n\">ts</span> <span class=\"n\">is</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">ts</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">is</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">is</span> <span class=\"o\">[]</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">ts</span><span class=\"o\">)</span> <span class=\"n\">is</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">is</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">H0</span> <span class=\"n\">is</span>\n  <span class=\"bp\">|</span> <span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">ts</span><span class=\"o\">,</span> <span class=\"n\">is</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">H1</span> <span class=\"n\">t</span> <span class=\"n\">ts</span> <span class=\"n\">is</span> <span class=\"o\">(</span><span class=\"n\">permutationsAux.rec</span> <span class=\"n\">H0</span> <span class=\"n\">H1</span> <span class=\"n\">ts</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">is</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">permutationsAux.rec</span> <span class=\"n\">H0</span> <span class=\"n\">H1</span> <span class=\"n\">is</span> <span class=\"o\">[])</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">ts</span> <span class=\"n\">is</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">ts</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">is</span><span class=\"o\">,</span> <span class=\"n\">length</span> <span class=\"n\">ts</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 313571645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670008600
    },
    {
        "content": "<p>Now it just doesn't like <code>[elab_as_elim]</code></p>",
        "id": 313571950,
        "sender_full_name": "Arien Malec",
        "timestamp": 1670008688
    },
    {
        "content": "<p>note that I removed it</p>",
        "id": 313571979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670008697
    },
    {
        "content": "<p>lean 4 is more picky about elab_as_elim declarations</p>",
        "id": 313572082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670008731
    },
    {
        "content": "<p>Will add as porting comment</p>",
        "id": 313572092,
        "sender_full_name": "Arien Malec",
        "timestamp": 1670008735
    },
    {
        "content": "<p>Where is <code>decreasing_tactic</code> documented? I was so close on this....</p>",
        "id": 313572749,
        "sender_full_name": "Arien Malec",
        "timestamp": 1670008973
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=tacticDecreasing_tactic#doc\">docs4#tacticDecreasing_tactic</a></p>",
        "id": 313573661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670009321
    },
    {
        "content": "<p>basically, if you don't provide a <code>decreasing_by</code> clause then it acts like <code>decreasing_by decreasing_tactic</code>, which calls <code>simp</code> and a few other simple things for reducing common WF proof goals</p>",
        "id": 313573974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670009423
    },
    {
        "content": "<p>and if it fails it prints the big error message you can see at <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=tacticDecreasing_with_#src\">src4#tacticDecreasing_with_</a></p>",
        "id": 313574052,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670009461
    },
    {
        "content": "<p>The last issue here is making my eyes cross:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.Nat.Lemmas</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">List</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">permutationsAux2</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ts</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">List</span> <span class=\"n\">β</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">ts</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">us</span><span class=\"o\">,</span> <span class=\"n\">zs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">permutationsAux2</span> <span class=\"n\">t</span> <span class=\"n\">ys</span> <span class=\"n\">r</span> <span class=\"n\">ys</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">us</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">us</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">zs</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- A recursor for pairs of lists. To have `C l₁ l₂` for all `l₁`, `l₂`, it suffices to have it for</span>\n<span class=\"sd\">`l₂ = []` and to be able to pour the elements of `l₁` into `l₂`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">permutationsAux.rec</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H0</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">is</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"o\">[]</span> <span class=\"n\">is</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"n\">ts</span> <span class=\"n\">is</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">ts</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">is</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">is</span> <span class=\"o\">[]</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">ts</span><span class=\"o\">)</span> <span class=\"n\">is</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">is</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">H0</span> <span class=\"n\">is</span>\n  <span class=\"bp\">|</span> <span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">ts</span><span class=\"o\">,</span> <span class=\"n\">is</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">H1</span> <span class=\"n\">t</span> <span class=\"n\">ts</span> <span class=\"n\">is</span> <span class=\"o\">(</span><span class=\"n\">permutationsAux.rec</span> <span class=\"n\">H0</span> <span class=\"n\">H1</span> <span class=\"n\">ts</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">is</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">permutationsAux.rec</span> <span class=\"n\">H0</span> <span class=\"n\">H1</span> <span class=\"n\">is</span> <span class=\"o\">[])</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">ts</span> <span class=\"n\">is</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">ts</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">is</span><span class=\"o\">,</span> <span class=\"n\">length</span> <span class=\"n\">ts</span><span class=\"o\">)</span>\n  <span class=\"n\">decreasing_by</span> <span class=\"n\">simp_wf</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_add</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">decreasing_tactic</span>\n\n\n<span class=\"sd\">/-- An auxiliary function for defining `permutations`. `permutations_aux ts is` is the set of all</span>\n<span class=\"sd\">permutations of `is ++ ts` that do not fix `ts`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">permutationsAux</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">permutationsAux.rec</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">is</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[])</span> <span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"n\">ts</span> <span class=\"n\">is</span> <span class=\"n\">IH1</span> <span class=\"n\">IH2</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">foldr</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">permutationsAux2</span> <span class=\"n\">t</span> <span class=\"n\">ts</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"n\">id</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">IH1</span> <span class=\"o\">(</span><span class=\"n\">is</span> <span class=\"o\">::</span> <span class=\"n\">IH2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The <code>fun _ _ =&gt; List (List α)</code> bit is a direct translation from <code>mathlib</code>, but fails here with what looks like a universe issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"bp\">@</span><span class=\"n\">permutationsAux.rec</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"n\">argument</span>\n  <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.45085</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.45092</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.45055</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.45084</span> <span class=\"bp\">?</span><span class=\"n\">u.45087</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.45055</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.45082</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.45082</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>If I provide more inference hints (<code>(fun (xs: List α) (ys: List α) =&gt; List (List α))</code>), I get a different type issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"bp\">@</span><span class=\"n\">permutationsAux.rec</span> <span class=\"k\">fun</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"bp\">↦</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"n\">argument</span>\n  <span class=\"k\">fun</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"bp\">↦</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.45055</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.45055</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.45082</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.45082</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>where we are in the same universe at least.</p>",
        "id": 313585380,
        "sender_full_name": "Arien Malec",
        "timestamp": 1670013764
    },
    {
        "content": "<p>The more that I look at that <code>fun</code> the less I understand what it even wants to do</p>",
        "id": 313585836,
        "sender_full_name": "Arien Malec",
        "timestamp": 1670013921
    },
    {
        "content": "<p>Or how it was supposed to work in Lean 3 -- it looks like I'm taking two lists and producing a type...</p>",
        "id": 313586144,
        "sender_full_name": "Arien Malec",
        "timestamp": 1670014023
    },
    {
        "content": "<p>I think there are just earlier arguments that you need to specify if you're using <code>@</code>?</p>",
        "id": 313597157,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670018701
    },
    {
        "content": "<p>That did it!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- An auxiliary function for defining `permutations`. `permutations_aux ts is` is the set of all</span>\n<span class=\"sd\">permutations of `is ++ ts` that do not fix `ts`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">permutationsAux</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">permutationsAux.rec</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[])</span> <span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"n\">ts</span> <span class=\"n\">is</span> <span class=\"n\">IH1</span> <span class=\"n\">IH2</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">foldr</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">permutationsAux2</span> <span class=\"n\">t</span> <span class=\"n\">ts</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"n\">id</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">IH1</span> <span class=\"o\">(</span><span class=\"n\">is</span> <span class=\"o\">::</span> <span class=\"n\">IH2</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">list.permutations_aux</span> <span class=\"n\">List.permutationsAux</span>\n</code></pre></div>",
        "id": 313598967,
        "sender_full_name": "Arien Malec",
        "timestamp": 1670019586
    }
]