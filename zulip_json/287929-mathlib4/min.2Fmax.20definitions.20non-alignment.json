[
    {
        "content": "<p>In mathlib3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">min_def</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">max_def</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>in mathlib4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">min_def</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">max_def</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">b</span> <span class=\"k\">else</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> you ported the mathlib4 lines. I am running into this clash in trying to (ab)use <code>OrderDual</code> defeq for <code>LinearOrder (OrderDual _)</code>. Do we want to prefer the mathlib3 style of swapping the inequality, or the current mathlib4 style of swapping the then-else branches?</p>",
        "id": 308492361,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1667863487
    },
    {
        "content": "<p>Those definitions ultimately derive from the lean 4 implementation of max and min, which uses that order deliberately so that <code>(min a b, max a b)</code> can get optimized using common subexpression elimination to only involve one comparison</p>",
        "id": 308492567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667863586
    },
    {
        "content": "<p>That said, the max/min support in <code>LinearOrder</code> was hacked together without too much thought so it's totally fine if you have a better approach as long as it still allows for custom max/min implementations</p>",
        "id": 308492816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667863707
    },
    {
        "content": "<p>OK -- do we want to then align <code>max_def</code> to have a non <code>LinearOrder.max_def ..</code> proof?</p>",
        "id": 308492906,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1667863751
    },
    {
        "content": "<p>basically, naked <code>max_def</code> and <code>LinearOrder.max_def</code> aren't syntactically equal</p>",
        "id": 308492942,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1667863773
    },
    {
        "content": "<p>or, we can change it in both places, and have a smarter autoParam proof?</p>",
        "id": 308493052,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1667863816
    },
    {
        "content": "<p>What does mathlib do? We should probably do that</p>",
        "id": 308493120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667863827
    },
    {
        "content": "<p>seems like we probably want to align <code>max</code> to match lattice join</p>",
        "id": 308493160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667863849
    },
    {
        "content": "<p>I see, mathlib is using a separate <code>linear_order</code> from lattices because it is mostly in core</p>",
        "id": 308493455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667864017
    },
    {
        "content": "<p>In the meantime, here's what the <code>LinearOrder (OrderDual _)</code> proof looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"bp\">ᵒᵈ</span> <span class=\"n\">where</span>\n  <span class=\"n\">__</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">PartialOrder</span> <span class=\"n\">α</span><span class=\"bp\">ᵒᵈ</span><span class=\"o\">)</span>\n  <span class=\"n\">le_total</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">le_total</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n  <span class=\"n\">decidable_le</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">DecidableRel</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"n\">decidable_lt</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">DecidableRel</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"n\">min</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">max</span> <span class=\"n\">α</span> <span class=\"n\">_</span>\n  <span class=\"n\">max</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">min</span> <span class=\"n\">α</span> <span class=\"n\">_</span>\n  <span class=\"n\">min_def</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"k\">let</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n    <span class=\"k\">let</span> <span class=\"n\">b'</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">b</span>\n    <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Max.mk</span> <span class=\"n\">α</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">max</span> <span class=\"n\">a'</span> <span class=\"n\">b'</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">b'</span> <span class=\"bp\">≤</span> <span class=\"n\">a'</span> <span class=\"k\">then</span> <span class=\"n\">a'</span> <span class=\"k\">else</span> <span class=\"n\">b'</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">max_def</span><span class=\"o\">]</span>\n    <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">hab</span> <span class=\"n\">hba</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">le_antisymm</span> <span class=\"n\">hba</span> <span class=\"n\">hab</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_le</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n      <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">hab.trans</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›)</span> <span class=\"o\">(</span><span class=\"n\">lt_irrefl</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">max_def</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"k\">let</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n    <span class=\"k\">let</span> <span class=\"n\">b'</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">b</span>\n    <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Min.mk</span> <span class=\"n\">α</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">min</span> <span class=\"n\">a'</span> <span class=\"n\">b'</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">b'</span> <span class=\"bp\">≤</span> <span class=\"n\">a'</span> <span class=\"k\">then</span> <span class=\"n\">b'</span> <span class=\"k\">else</span> <span class=\"n\">a'</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">min_def</span><span class=\"o\">]</span>\n    <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">hab</span> <span class=\"n\">hba</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">le_antisymm</span> <span class=\"n\">hab</span> <span class=\"n\">hba</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_le</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n      <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">hab.trans</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›)</span> <span class=\"o\">(</span><span class=\"n\">lt_irrefl</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 308493975,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1667864332
    },
    {
        "content": "<p>those proofs seem unnecessarily long. It should just be an application of <code>max_comm</code> to convert between the two possible interpretations</p>",
        "id": 308494128,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667864404
    },
    {
        "content": "<p>also, isn't there already a proof of this?</p>",
        "id": 308494228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667864469
    },
    {
        "content": "<p>so something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">min_def</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"k\">let</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n    <span class=\"k\">let</span> <span class=\"n\">b'</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">b</span>\n    <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Max.mk</span> <span class=\"n\">α</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">max</span> <span class=\"n\">a'</span> <span class=\"n\">b'</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">b'</span> <span class=\"bp\">≤</span> <span class=\"n\">a'</span> <span class=\"k\">then</span> <span class=\"n\">a'</span> <span class=\"k\">else</span> <span class=\"n\">b'</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">max_comm</span><span class=\"o\">,</span> <span class=\"n\">max_def</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>?</p>",
        "id": 308494268,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1667864499
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/d78a3d45bf33119f21ca18cfd2f822b747cc9a98/Mathlib/Order/Basic.lean#L420-L429\">https://github.com/leanprover-community/mathlib4/blob/d78a3d45bf33119f21ca18cfd2f822b747cc9a98/Mathlib/Order/Basic.lean#L420-L429</a></p>",
        "id": 308494275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667864502
    },
    {
        "content": "<p>ah, I overwrote it =C. Thanks.</p>",
        "id": 308494336,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1667864523
    },
    {
        "content": "<blockquote>\n<p>seems like we probably want to align <code>max</code> to match lattice join</p>\n</blockquote>\n<p>In fact I have a branch to core that does exactly this, but I guess rather open it to std4 now</p>",
        "id": 308496698,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667865877
    },
    {
        "content": "<p>Oh wait, is <code>LinearOrder</code> in mathlib now?</p>",
        "id": 308496729,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667865895
    },
    {
        "content": "<p>It is, but only as an ad-hoc port.</p>",
        "id": 308496914,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1667866000
    },
    {
        "content": "<p>The whole order hierarchy is part of mathlib4 now, so these kinds of refactors are presumbably easier (except that we still care about mathlib alignment so we would rather backport something like this if possible)</p>",
        "id": 308500411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667868286
    },
    {
        "content": "<p>Oh I like that!</p>",
        "id": 308548235,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667900259
    }
]