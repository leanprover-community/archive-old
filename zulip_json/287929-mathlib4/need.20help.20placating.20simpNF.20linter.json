[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/523\">mathlib4#523</a> I port the parts of core Lean 3 <code>init.data.bool.basic</code> and <code>init.data.bool.lemmas</code> which didn't make the cut in Lean 4. Everything's compiling but I have a linter error, with the <code>simpNF</code> linter complaining that my port of the core Lean 3 lemma <code>cond_a_a</code> (defined <a href=\"https://github.com/leanprover-community/lean/blob/fc13c8c72a15dab71a2c2b31410c2cadc3526bd7/library/init/data/bool/lemmas.lean#L11\">here</a>) is problematic: my port is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cond_a_a.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cond</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>and the linter says</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code> /- The `simpNF` linter reports:\nSOME SIMP LEMMAS ARE NOT IN SIMP-NORMAL FORM.\nsee note [simp-normal form] for tips how to debug this.\nhttps://leanprover-community.github.io/mathlib_docs/notes.html#simp-normal%20form -/\n#check @Bool.cond_a_a /- Left-hand side simplifies from\n  bif b then a else a\nto\n  match b with\n| true =&gt; a\n| false =&gt; a\nusing\n  simp only [cond]\nTry to change the left-hand side to the simplified term!\n -/\n</code></pre></div>\n<p>This doesn't make much sense to me: presumably I am not supposed to be doing a match in the <em>statement</em> of a lemma? (or am I?) What should I do to placate the linter? The lemma has such a horrible name and is never used explicitly in mathlib but I can quite believe that the simplifier might use it here and there.</p>",
        "id": 306966890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667140250
    },
    {
        "content": "<p>PS if this lemma survives, how about <code>cond_self</code> as a name?</p>",
        "id": 306967102,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667140360
    },
    {
        "content": "<p>OK so</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">cond_self.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span> <span class=\"k\">match</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n      <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n    <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>does placate the linter, which now then immediately complains about the next lemma involving <code>xor</code>.</p>\n<p>Updated question then: should the core Lean 3 line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">cond</span> <span class=\"n\">bor</span> <span class=\"n\">band</span> <span class=\"n\">bnot</span> <span class=\"n\">bxor</span>\n</code></pre></div>\n<p><a href=\"https://github.com/leanprover-community/lean/blob/fc13c8c72a15dab71a2c2b31410c2cadc3526bd7/library/init/data/bool/lemmas.lean#L9\">here</a> simply be deleted in mathlib4?</p>",
        "id": 306967611,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667140671
    },
    {
        "content": "<p>How about just not tagging it with <code>@[simp]</code>?</p>",
        "id": 306967665,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1667140686
    },
    {
        "content": "<p>Or adding it to the nolints</p>",
        "id": 306967688,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1667140703
    },
    {
        "content": "<p>You mean not tagging <code>cond</code> with <code>simp</code> or not tagging <code>cond_a_a</code> with <code>simp</code>?</p>",
        "id": 306967701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667140713
    },
    {
        "content": "<p>Not tagging <code>cond_a_a</code> with <code>simp</code></p>",
        "id": 306967710,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1667140724
    },
    {
        "content": "<p>Well then the simplifier won't be able to prove it (I checked) so we might get random breakage down the line.</p>",
        "id": 306967901,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667140844
    },
    {
        "content": "<p>It sounds like <code>cond</code> is marked as <code>simp</code>, which seems wrong</p>",
        "id": 306967933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667140864
    },
    {
        "content": "<p>who did that?</p>",
        "id": 306967935,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667140868
    },
    {
        "content": "<p>I faithfully ported the lean 3 tag to lean 4 in the same PR (see my third post above)</p>",
        "id": 306967971,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667140890
    },
    {
        "content": "<p>marking <code>cond</code> as simp will make that match expression appear in any <code>cond</code> lemma</p>",
        "id": 306967999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667140906
    },
    {
        "content": "<p>ah yeah</p>",
        "id": 306968022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667140918
    },
    {
        "content": "<p>remove <code>cond</code> there</p>",
        "id": 306968069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667140925
    },
    {
        "content": "<p>Actually I think this needs to be fixed in lean 4, the meaning of <code>@[simp]</code> on definitions by pattern matching has changed</p>",
        "id": 306968098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667140957
    },
    {
        "content": "<p>I'm afraid I know very little about the simplifier and in particular about any differences between lean 3 and lean 4's conventions on simp. I can confirm that deleting</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">cond</span> <span class=\"n\">or</span> <span class=\"n\">and</span> <span class=\"n\">not</span> <span class=\"n\">xor</span>\n</code></pre></div>\n<p>fixes 7 issues which the <code>simpNF</code> linter is whining about in that PR.</p>",
        "id": 306968168,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667141017
    },
    {
        "content": "<p>Although putting <code>@[simp]</code> on recursive definitions works as you expect (they only are unfolded if one of the match arms applies), putting <code>@[simp]</code> on nonrecursive definitions, even if they use the equation compiler, will unfold directly to a match expression</p>",
        "id": 306968223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667141043
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[macro_inline]</span> <span class=\"kd\">def</span> <span class=\"n\">or</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">true</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>In Lean 3 <code>or</code> this has a <code>@[simp]</code> tag. Should it have one in Lean 4?</p>",
        "id": 306968311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667141109
    },
    {
        "content": "<p>Another example linter error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">Bool.xor_true</span> <span class=\"c\">/-</span><span class=\"cm\"> Left-hand side simplifies from</span>\n<span class=\"cm\">  xor b true</span>\n<span class=\"cm\">to</span>\n<span class=\"cm\">  match b, true with</span>\n<span class=\"cm\">| true, false =&gt; true</span>\n<span class=\"cm\">| false, true =&gt; true</span>\n<span class=\"cm\">| x, x_1 =&gt; false</span>\n<span class=\"cm\">using</span>\n<span class=\"cm\">  simp only [xor, forall_const]</span>\n<span class=\"cm\">Try to change the left-hand side to the simplified term!</span>\n</code></pre></div>",
        "id": 306968401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667141154
    },
    {
        "content": "<p>Right now, it will break things to do so. What I have been doing for the list definitions is to manually write the equations and mark them as simp instead</p>",
        "id": 306968414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667141162
    },
    {
        "content": "<p>so in this case, <code>@[simp] theorem : or true y = true</code> and <code>@[simp] theorem : or false y = y</code></p>",
        "id": 306968526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667141203
    },
    {
        "content": "<p>I've made the PR, if you like you could comment there on what I should be doing. You'll have to give me a few more clues than \"manually write the equations\" -- maybe do one or two for me and I'll do the rest?</p>",
        "id": 306968535,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667141211
    },
    {
        "content": "<p>Oh sorry, you just gave me the clues as I was writing that.</p>",
        "id": 306968587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667141232
    },
    {
        "content": "<p>Thanks -- I'll give this a go.</p>",
        "id": 306968610,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667141247
    },
    {
        "content": "<p>You can see me doing a bunch of this <a href=\"https://github.com/leanprover/std4/blob/439263f585961c94df05c181616b1561063d8f3f/Std/Data/List/Init/Lemmas.lean#L18-L39\">here</a>, those lemmas that aren't in the <code>attribute [simp]</code> block are exactly the equation lemmas for nonrecursive list functions defined by pattern matching</p>",
        "id": 306968854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667141383
    },
    {
        "content": "<p>gaargh do we have <code>#print prefix</code> yet? I don't know the names of the equation lemmas :-/</p>",
        "id": 306969075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667141486
    },
    {
        "content": "<p>(by the way, basically the entirety of this file is going to end up in std4 instead of mathlib4, although I will wait until it gets merged in mathlib4 first)</p>",
        "id": 306969086,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667141493
    },
    {
        "content": "<p>The equation lemmas don't exist if you just try looking for them</p>",
        "id": 306969130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667141516
    },
    {
        "content": "<p>they are generated lazily</p>",
        "id": 306969182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667141523
    },
    {
        "content": "<p>(this is also a lean 4 behavior change)</p>",
        "id": 306969209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667141541
    },
    {
        "content": "<p>so in practice this means that I should write the equation lemmas myself. I was hoping to not have to generate my own names for them but I'll give it a go.</p>",
        "id": 306969275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667141571
    },
    {
        "content": "<p>Should I #align them with the lean 3 equation lemmas or will this not be necessary because it will only be the simplifier which is using them?</p>",
        "id": 306969378,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667141604
    },
    {
        "content": "<p>TBH I think this gives some flexibility to do the equation lemmas a bit better</p>",
        "id": 306969402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667141611
    },
    {
        "content": "<p>like the lemmas for <code>or</code> can have both sides, <code>or true y = true</code> and <code>or x true = true</code></p>",
        "id": 306969480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667141642
    },
    {
        "content": "<p>which is like your classic example of definitional equality being stupid</p>",
        "id": 306969593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667141684
    },
    {
        "content": "<p>Aah I see, now is my change to somehow create all the correct <code>simp</code> lemmas as opposed to just the ones which the equation compiler generated.</p>",
        "id": 306969625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667141706
    },
    {
        "content": "<p>Is <code>xor a a = false</code> a good <code>simp</code> lemma by the way?</p>",
        "id": 306969677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667141747
    },
    {
        "content": "<p>yeah, presumably all the equation lemmas are reasonable theorems about these functions in their own right, just give them good names</p>",
        "id": 306969685,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667141754
    },
    {
        "content": "<p>yeah that's a simp lemma</p>",
        "id": 306969691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667141758
    },
    {
        "content": "<p>It would only fire when the two inputs are syntactically equal, right?</p>",
        "id": 306969758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667141783
    },
    {
        "content": "<p>no, I think they need to be the same up to reducible defeq</p>",
        "id": 306969786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667141802
    },
    {
        "content": "<p>which is the same unfolding relation used by rw and most other tactics when you don't specifically ask for unfolding</p>",
        "id": 306969837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667141831
    },
    {
        "content": "<p>OK thanks a lot! I'll see if I can placate the linter.</p>",
        "id": 306969859,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667141843
    },
    {
        "content": "<p>Oh many (but not all) of these are already in core. I still don't know how to check if a lemma is tagged <code>@[simp]</code> (especially if it was not tagged <code>@[simp]</code> when it was created).</p>",
        "id": 306970411,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667142129
    },
    {
        "content": "<p>BTW I went to a one day AI workshop on Friday and bumped into Ed Ayres; I moaned to him that I couldn't jump to definition using widgets in Lean 4 (in the sense that the arrow wasn't there like it was in Lean 3) and he told me to ctrl/command click :D . I just discovered that this trick even works with linter output even though it's \"plain text\" as opposed to \"tactic state\" <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 306971060,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667142501
    }
]