[
    {
        "content": "<p>Here's a silly file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n  <span class=\"n\">trivial</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n  <span class=\"n\">trivial</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>If I position the cursor at the end of the first <code>let</code> line, then the tactic state includes this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">_example.match_1</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>If I position the cursor at the end of either the second or the third <code>let</code> line, then the tactic state includes this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Why the difference?  The two examples are exactly the same; why does putting a theorem between them cause Lean to treat the second example differently?  (And what does <code>_example.match_1</code> mean?)</p>",
        "id": 311917514,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1669243286
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 311919866,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1669244901
    },
    {
        "content": "<p>Fixed by <a href=\"https://github.com/leanprover/lean4/pull/1880\">https://github.com/leanprover/lean4/pull/1880</a></p>",
        "id": 311975144,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669282730
    },
    {
        "content": "<p>Thanks.  I wonder if the following behavior is related.  This example works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"bp\">|</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"bp\">⊆</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"bp\">|</span> <span class=\"n\">x.1</span> <span class=\"bp\">=</span> <span class=\"n\">x.2</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">p</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>After <code>intro h</code>, the tactic state includes <code>h : p ∈ { x | match x with | (a, b) =&gt; a = b }</code>.  But the following doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"bp\">|</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"bp\">⊆</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"bp\">|</span> <span class=\"n\">x.1</span> <span class=\"bp\">=</span> <span class=\"n\">x.2</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">p</span>\n  <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"bp\">|</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">})</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>I get a red squiggle under <code>(a, b)</code>, and the error message is <code>invalid pattern, constructor or constant marked with '[match_pattern]' expected</code>.  Shouldn't this work?<br>\nWill your change fix this too, or is it a different problem?  Or am I doing something wrong?</p>",
        "id": 312041147,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1669304094
    },
    {
        "content": "<p>That looks like an unrelated bug. Could you file an issue with an MWE?</p>",
        "id": 312053720,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669308631
    },
    {
        "content": "<p>Will the example I gave count as a MWE?  (I'm not sure I understand what counts as a MWE.)</p>",
        "id": 312054048,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1669308758
    },
    {
        "content": "<p>Mathlib should generally be avoided in an MWE :) . This issue should be independent of it.</p>",
        "id": 312054543,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669308968
    },
    {
        "content": "<p>OK, I think I have an example that doesn't require Mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x.1</span> <span class=\"bp\">=</span> <span class=\"n\">x.2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">p</span>\n  <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"k\">match</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>I get the same error on the <code>intro</code>.  This should work, right?</p>",
        "id": 312054975,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1669309176
    },
    {
        "content": "<p>Should I call this a problem with <code>match</code>?  Or a problem with <code>intro</code>?</p>",
        "id": 312055223,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1669309267
    },
    {
        "content": "<p>Mmh, more probably <code>intro</code>?</p>",
        "id": 312055676,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669309458
    },
    {
        "content": "<p>I don't think the usage <code>intro (x : A)</code> was intended to be honest, but it <em>usually</em> works as a pattern</p>",
        "id": 312055783,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669309526
    },
    {
        "content": "<p>I've been writing tactics for use by students learning to write proofs.  One of my tactics is for introducing assumptions.  I want students to write <code>assume h : p</code>.  My tactic checks that the goal is an implication, and then it does <code>intro (h : p)</code>.  For students learning to write proofs, I think it might be helpful to ask them to state what they are assuming, so that Lean can correct them if they are confused about what the assumption is.  And then it is helpful if <code>h</code> is listed in the tactic state as <code>p</code>, not something definitionally equal to <code>p</code>.</p>\n<p>I'll file an issue.</p>",
        "id": 312056620,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1669309915
    },
    {
        "content": "<p>I don't know if this is related, but I tried this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p.1</span> <span class=\"bp\">=</span> <span class=\"n\">p.2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h'</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"k\">match</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">h'</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>This works, but in the tactic state, <code>h</code> is listed as <code>match p, h' with | (a, b), h' =&gt; a = b</code>.  Is that what it's supposed to be?  Shouldn't it be what I said I wanted <code>h</code> to be?</p>",
        "id": 312059555,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1669311243
    },
    {
        "content": "<p>This is probably due to match auto generalization. I would avoid restating <code>match</code> terms like this. If you need the same <code>match</code> twice, it should be a function.</p>",
        "id": 312060942,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669311929
    },
    {
        "content": "<p>I was trying it as a possible workaround for the problem with <code>intro (h : match ...)</code>.  I thought perhaps my tactic, instead of calling <code>intro (h : p)</code>, could instead do <code>intro h'; have h : p := h'; clear h'</code>.  But it looks like that won't work if <code>p</code> is a <code>match</code>?</p>",
        "id": 312062705,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1669312720
    }
]