[
    {
        "content": "<p>I see that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.nth\">docs#list.nth</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.nthd\">docs#list.nthd</a> are called <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.get?#doc\">docs4#List.get?</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.getD#doc\">docs4#List.getD</a> in Lean 4. What shoudl we do about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.inth\">docs#list.inth</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.nth_le\">docs#list.nth_le</a>? For the former, we can't use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.get!#doc\">docs4#List.get!</a> because it panics on the empty list. For the latter, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/List.nth\">docs#List.nth</a> is very similar but it bundles arguments into a <code>Fin l.length</code>, so lemmas like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.nth_le_tail\">docs#list.nth_le_tail</a> will look weird. What should we do?</p>",
        "id": 312123260,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669357680
    },
    {
        "content": "<p>We should try to align <code>list.nth_le</code> to <code>List.get</code> where possible, I think</p>",
        "id": 312129337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669361636
    },
    {
        "content": "<p>we can have an unbundled version if necessary, say <code>List.get'</code></p>",
        "id": 312129417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669361655
    },
    {
        "content": "<p><code>list.inth</code> should become <code>List.getI</code></p>",
        "id": 312129475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669361678
    },
    {
        "content": "<p>note that most theorems about lists are automatically on the short list to move to <code>Std</code>, but it's fine to PR them to mathlib4 first</p>",
        "id": 312129652,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669361771
    },
    {
        "content": "<p>What should we do with lemmas like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.nth_le_tail\">docs#list.nth_le_tail</a>?</p>",
        "id": 312135346,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669364466
    },
    {
        "content": "<p>How would you formulate it with <code>def list.get (l : list α) (n : fin l.length) : α := l.nth_le n n.is_lt</code>?</p>",
        "id": 312135413,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669364503
    }
]