[
    {
        "content": "<p>Context: I was fixing theorem <a href=\"https://github.com/leanprover-community/mathlib4/blob/ed0e914dd60473da62bd7fcb9b6777c5be685952/Mathlib/Data/Real/CauSeqCompletion.lean#L365\"><code>theorem lim_mul_lim</code></a>  at mathlib4.<br>\nThis reports a timeout, so I tried removing the simp at L371 to get a code like below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">lim_mul_lim</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">CauSeq</span> <span class=\"n\">β</span> <span class=\"n\">abv</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lim</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">lim</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">lim</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">eq_lim_of_const_equiv</span> <span class=\"bp\">&amp;</span><span class=\"n\">lt</span><span class=\"bp\">;|</span>\n    <span class=\"k\">show</span> <span class=\"n\">LimZero</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">abv</span> <span class=\"o\">(</span><span class=\"n\">lim</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">lim</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"kd\">by</span>\n      <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span>\n        <span class=\"n\">const</span> <span class=\"n\">abv</span> <span class=\"o\">(</span><span class=\"n\">lim</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">lim</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"bp\">=</span>\n          <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">abv</span> <span class=\"o\">(</span><span class=\"n\">lim</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">const</span> <span class=\"n\">abv</span> <span class=\"o\">(</span><span class=\"n\">lim</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">abv</span> <span class=\"o\">(</span><span class=\"n\">lim</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n            <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">const_mul</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_add_neg</span> <span class=\"n\">_</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_add_neg</span> <span class=\"n\">_</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">]</span>\n            <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">abv</span> <span class=\"o\">(</span><span class=\"n\">lim</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">const</span> <span class=\"n\">abv</span> <span class=\"o\">(</span><span class=\"n\">lim</span> <span class=\"n\">g</span><span class=\"o\">))]</span> <span class=\"c1\">-- bottleneck</span>\n            <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₀</span><span class=\"o\">]</span>\n            <span class=\"c1\">--simp [const_mul (lim f), mul_add, add_mul, sub_eq_add_neg, add_comm, add_left_comm]</span>\n            <span class=\"gr\">admit</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n        <span class=\"n\">add_limZero</span> <span class=\"o\">(</span><span class=\"n\">mul_limZero_left</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Setoid.symm</span> <span class=\"o\">(</span><span class=\"n\">equiv_lim</span> <span class=\"n\">_</span><span class=\"o\">)))</span>\n          <span class=\"o\">(</span><span class=\"n\">mul_limZero_right</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Setoid.symm</span> <span class=\"o\">(</span><span class=\"n\">equiv_lim</span> <span class=\"n\">_</span><span class=\"o\">)))</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">cau_seq.lim_mul_lim</span> <span class=\"n\">CauSeq.lim_mul_lim</span>\n</code></pre></div>\n<p>However, rewrite-ing the add_assoc seems to take a long time. Can someone investigate this?</p>\n<ul>\n<li>this is a crosspost from lean4 with same title, but it seems like that stream was not a good place to ask this.</li>\n</ul>",
        "id": 320422963,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1673348080
    },
    {
        "content": "<p>That's an odd thing to fail. Thanks for looking into it</p>",
        "id": 320425175,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673348834
    },
    {
        "content": "<p>I only now see this, but I <a href=\"https://github.com/leanprover-community/mathlib4/commit/675f526c6d634a65b584411c97e89423e80a2212\">seem to have fixed this timeouting simp earlier.</a> Not sure what went on behind the scenes there, but applying some extensionality lemma (both <code>Subtype.ext</code> and <code>CauSeq.ext</code>work) before doing anything makes it behave more nicely with <code>simp</code>.</p>",
        "id": 320480654,
        "sender_full_name": "Lukas Miaskiwskyi",
        "timestamp": 1673365340
    }
]