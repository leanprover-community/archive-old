[
    {
        "content": "<p>In <code>control.monad.writer</code>, <code>writer_t</code> is a structure. As ported, it looks like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">WriterT</span> <span class=\"o\">(</span><span class=\"n\">ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">where</span>\n  <span class=\"n\">run</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">ω</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>In the stub ported <code>Control.Writer</code>, <code>WriterT</code> is a <code>def</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">WriterT</span> <span class=\"o\">(</span><span class=\"n\">ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n  <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">ω</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Except for universes, the types are identical.</p>\n<p>This difference isn't possible to <code>#align</code> away, for callers that rely, e.g., on naked constructors, or use proofs that rely on constructors.</p>\n<p>I <em>think</em> all such callers are within <code>Control.Writer.WriterT</code> (grepping across the <code>mathlib</code> codebase, it seems so), but it might be better just to follow the structure based definition of the existing code (which would also resolve the difference is universes).</p>",
        "id": 314274026,
        "sender_full_name": "Arien Malec",
        "timestamp": 1670344410
    },
    {
        "content": "<p><em>removing</em> a structure is something we can <code>#align</code></p>",
        "id": 314276594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670345161
    },
    {
        "content": "<p>adding a structure is not</p>",
        "id": 314276662,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670345168
    },
    {
        "content": "<p>(well, we can align it regardless, it will just break sometimes)</p>",
        "id": 314276707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670345187
    },
    {
        "content": "<p>Lean 4 generally prefers structures for this kind of thing though; I would follow the examples in core here</p>",
        "id": 314276884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670345251
    },
    {
        "content": "<p>What I mean here is I can construct a <code>WriterT</code> with the original syntax as <code>⟨pure (a, 1)⟩</code> which fails for the <code>def</code> because there's no constructor, and I can destructure via tactics, which fails for the <code>def</code>.</p>\n<p>But no issue since I'll go with <code>structure</code> here...</p>",
        "id": 314278911,
        "sender_full_name": "Arien Malec",
        "timestamp": 1670345823
    },
    {
        "content": "<p>When I looked at this earlier, the lean4 version of <code>ReaderT</code> switched to using <code>def</code> instead of <code>structure</code>.</p>",
        "id": 314299280,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1670351930
    }
]