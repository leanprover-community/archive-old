[
    {
        "content": "<p>lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.ring</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sum_range_square</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∑</span><span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">6</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n\n<span class=\"c1\">-- lemma sum_range_square (n : ℕ) :</span>\n<span class=\"c1\">--    ∑i in Finset.range n, (i+1)^2 = n * (n + 1) * (2*n + 1)/6 := sorry</span>\n<span class=\"c1\">-- error:</span>\n<span class=\"c1\">-- failed to synthesize instance</span>\n<span class=\"c1\">--  AddCommMonoid Prop</span>\n\n\n<span class=\"c1\">-- need to add parens:</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">sum_range_square</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∑</span><span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">6</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 322530717,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674226087
    },
    {
        "content": "<p>Hmm, I don't know anything about how to set up notation in Lean 4. But I agree that it's important that we try to get this right soon.</p>",
        "id": 322530886,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674226131
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/75cca33f9caefa5e17d29fb1896d1923417cc59c/Mathlib/Algebra/BigOperators/Basic.lean#L122\">https://github.com/leanprover-community/mathlib4/blob/75cca33f9caefa5e17d29fb1896d1923417cc59c/Mathlib/Algebra/BigOperators/Basic.lean#L122</a></p>",
        "id": 322530947,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674226148
    },
    {
        "content": "<p>I think we might need to add a <code>term:51</code> there</p>",
        "id": 322530979,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674226155
    },
    {
        "content": "<p>let me try that...</p>",
        "id": 322531029,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674226166
    },
    {
        "content": "<p>yep, that does it</p>",
        "id": 322531444,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674226245
    },
    {
        "content": "<p>I'll submit a PR</p>",
        "id": 322531469,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674226253
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1723\">https://github.com/leanprover-community/mathlib4/pull/1723</a></p>",
        "id": 322536188,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674227386
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243791\">@David Renshaw</span> does this still work/apply?</p>\n<blockquote>\n<p>library_note \"operator precedence of big operators\"/--<br>\nThere is no established mathematical convention<br>\nfor the operator precedence of big operators like <code>∏</code> and <code>∑</code>.<br>\nWe will have to make a choice.<br>\nOnline discussions, such as <a href=\"https://math.stackexchange.com/q/185538/30839\">https://math.stackexchange.com/q/185538/30839</a><br>\nseem to suggest that <code>∏</code> and <code>∑</code> should have the same precedence,<br>\nand that this should be somewhere between <code>*</code> and <code>+</code>.<br>\nThe latter have precedence levels <code>70</code> and <code>65</code> respectively,<br>\nand we therefore choose the level <code>67</code>.<br>\nIn practice, this means that parentheses should be placed as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"n\">k</span> <span class=\"bp\">→</span>\n  <span class=\"bp\">∏</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(Example taken from page 490 of Knuth's <em>Concrete Mathematics</em>.)</p>\n</blockquote>",
        "id": 322537156,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674227638
    },
    {
        "content": "<p>let me try</p>",
        "id": 322537231,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674227650
    },
    {
        "content": "<p>If it no longer applies, please update that note as well.</p>",
        "id": 322537242,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674227653
    },
    {
        "content": "<p>I'm not sure about how closely the exact precedence values are lining up between lean 4 and lean 3.</p>",
        "id": 322537333,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674227671
    },
    {
        "content": "<p>yeah, I think making those precedences 67 is the right thing to do</p>",
        "id": 322538942,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674228038
    },
    {
        "content": "<p>doing so shakes out a bunch of bad parenthesization downstream</p>",
        "id": 322539045,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674228066
    }
]