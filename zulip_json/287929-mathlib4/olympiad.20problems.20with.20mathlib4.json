[
    {
        "content": "<p>I think we're at the point where we can try some simple olympiad problems with mathlib4, so I'm going to try that right now on stream: <a href=\"https://www.twitch.tv/dwrensha\">https://www.twitch.tv/dwrensha</a></p>",
        "id": 314346813,
        "sender_full_name": "David Renshaw",
        "timestamp": 1670369294
    },
    {
        "content": "<p>Can mathport not translate this stuff for you?</p>",
        "id": 314347599,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670369633
    },
    {
        "content": "<p>yeah, but that's less fun</p>",
        "id": 314347739,
        "sender_full_name": "David Renshaw",
        "timestamp": 1670369689
    },
    {
        "content": "<p>But can LeanAid (<a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/LeanAide.20translation.3A.20Natural.20language.20to.20Lean.204\">#lean4 &gt; LeanAide translation: Natural language to Lean 4</a>) translate it for you.  That sounds fun!</p>",
        "id": 314350021,
        "sender_full_name": "Jason Rute",
        "timestamp": 1670370864
    },
    {
        "content": "<p>First problem: done!<br>\n<a href=\"https://github.com/dwrensha/math-puzzles-in-lean4/blob/5e87d4a793f9ec04846b63bdbbdd4ebe5c73f949/MathPuzzles/russia1998_q42.lean\">https://github.com/dwrensha/math-puzzles-in-lean4/blob/5e87d4a793f9ec04846b63bdbbdd4ebe5c73f949/MathPuzzles/russia1998_q42.lean</a></p>",
        "id": 314354201,
        "sender_full_name": "David Renshaw",
        "timestamp": 1670372699
    },
    {
        "content": "<p>I at first had </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NeZero</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">CancelMonoidWithZero</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>and that didn't work due to an error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Iff.mp</span> <span class=\"o\">(</span><span class=\"n\">mul_right_inj'</span> <span class=\"bp\">?</span><span class=\"n\">m.7061</span><span class=\"o\">)</span> <span class=\"n\">h2</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">h2</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">HMul.hMul</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHMul</span> <span class=\"n\">R</span> <span class=\"n\">NonUnitalNonAssocRing.toMul</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">HMul.hMul</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHMul</span> <span class=\"n\">R</span> <span class=\"n\">MulZeroClass.toMul</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 314354418,
        "sender_full_name": "David Renshaw",
        "timestamp": 1670372781
    },
    {
        "content": "<p>but then when I did </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">RealLike</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span>\n  <span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">NeZero</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">CancelMonoidWithZero</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NeZero</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">CancelMonoidWithZero</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>it worked.</p>",
        "id": 314354486,
        "sender_full_name": "David Renshaw",
        "timestamp": 1670372808
    },
    {
        "content": "<p>(I don't think this is a Lean 3 / Lean 4 difference, just something that I stumbled on when trying to mock out the real numbers)</p>",
        "id": 314354632,
        "sender_full_name": "David Renshaw",
        "timestamp": 1670372866
    },
    {
        "content": "<p>Tonight I'm going to try formalizing some MiniF2F problems with Mathlib4.  <a href=\"https://www.twitch.tv/dwrensha\">https://www.twitch.tv/dwrensha</a></p>",
        "id": 320567868,
        "sender_full_name": "David Renshaw",
        "timestamp": 1673395279
    },
    {
        "content": "<p>Good luck!  But I imagine <a href=\"https://github.com/leanprover-community/mathlib4/pull/1102\">mathlib4#1102</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/1189\">mathlib4#1189</a> will be major obstacles ...</p>",
        "id": 320568065,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673395361
    },
    {
        "content": "<p>yeah, I'm probably going to mostly stick to ints and nats</p>",
        "id": 320568746,
        "sender_full_name": "David Renshaw",
        "timestamp": 1673395752
    },
    {
        "content": "<p>We found a bug in one of the problems! <a href=\"https://github.com/openai/miniF2F/issues/125\">https://github.com/openai/miniF2F/issues/125</a></p>",
        "id": 320576044,
        "sender_full_name": "David Renshaw",
        "timestamp": 1673400218
    },
    {
        "content": "<p>miniF2F has many such problems, there was a thread about that elsewhere. Facebook's version fixes a small fraction of those.</p>",
        "id": 320577242,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673401029
    },
    {
        "content": "<p>fwiw, this particular bug is not fixed on the Facebook fork: <a href=\"https://github.com/facebookresearch/miniF2F/blob/5271ddec788677c815cf818a06f368ef6498a106/lean/src/valid.lean#L57-L66\">https://github.com/facebookresearch/miniF2F/blob/5271ddec788677c815cf818a06f368ef6498a106/lean/src/valid.lean#L57-L66</a></p>",
        "id": 320577415,
        "sender_full_name": "David Renshaw",
        "timestamp": 1673401195
    }
]