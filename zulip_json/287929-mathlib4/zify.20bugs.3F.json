[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> and I have come across a few issues with <code>zify</code>, sometimes in relation to other tactics. I'm not up to speed on Lean 4 numerals and not sure how to fix these.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.LinearCombination</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Zify</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">zify</span> <span class=\"c1\">-- turns the 4 into 1 + 1 + 1 + 1</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n   <span class=\"n\">ring_nf</span> <span class=\"c1\">-- if this is `norm_num` instead, replicates the above</span>\n   <span class=\"n\">zify</span> <span class=\"c1\">-- leaves a coercion ℤ → ℕ on the numeral 2</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">zify</span> <span class=\"n\">at</span> <span class=\"n\">h1</span>\n  <span class=\"n\">linear_combination</span> <span class=\"n\">h1</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">synthetic hole has already been defined and assigned to value incompatible with the current context</span>\n<span class=\"cm\">  h1</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Any thoughts on these?</p>",
        "id": 321257973,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1673644248
    },
    {
        "content": "<p>This might be relevant here: <a href=\"#narrow/stream/287929-mathlib4/topic/data.2Enat.2Efib.20mathlib4.231644/near/322189239\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/data.2Enat.2Efib.20mathlib4.231644/near/322189239</a></p>",
        "id": 322191767,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674097043
    },
    {
        "content": "<p>to me it sounds like there is a missing <code>norm_cast</code> attribute for the numeral coercion. Probably you can reduce the problem to a <code>norm_cast</code> bug</p>",
        "id": 322220387,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1674116207
    },
    {
        "content": "<p>I can't see where norm_cast lemmas have been called in the lean 4 version of zify. In lean3 there is a line doing something with norm_cast lemmas. Are they summoned indirectly in the lean4 version? I had an issue where lemmas labelled norm_cast weren't applied (see linked thread) in lean 4 while the equivalent in lean 3 seems to have done so</p>",
        "id": 322237953,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674122275
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 322238080,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674122306
    },
    {
        "content": "<p>it is the <code>push_cast</code> in the macro. It uses the <code>pushCastExt</code> <code>simpAttr</code>, so one reason why <code>zify</code> does not use a lemma that has been labelled as <code>norm_cast</code> is that there might be something worng in how the <code>norm_cast</code> attribute creates the <code>push_cast</code> <code>simpAttr</code>:<br>\n<a href=\"https://github.com/leanprover/std4/blob/5770b609aeae209cb80ac74655ee8c750c12aabd/Std/Tactic/NormCast/Ext.lean#L115\">https://github.com/leanprover/std4/blob/5770b609aeae209cb80ac74655ee8c750c12aabd/Std/Tactic/NormCast/Ext.lean#L115</a></p>",
        "id": 322269554,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1674131903
    }
]