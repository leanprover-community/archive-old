[
    {
        "content": "<p>Thanks to Mario:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">Mathlib.Prelude.Rename.getRenameMap</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span>\n  <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">fr</span><span class=\"o\">,</span> <span class=\"n\">to'</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">ToAdditive.translations.getState</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n    <span class=\"k\">match</span> <span class=\"n\">m.toLean3.contains</span> <span class=\"n\">fr</span><span class=\"o\">,</span> <span class=\"n\">m.toLean3.contains</span> <span class=\"n\">to'</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"s2\">\"❌ {to'} &lt;- ✅ {fr}\"</span>\n    <span class=\"bp\">|</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"s2\">\"❌ {fr} -&gt; ✅ {to'}\"</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 322135293,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674070049
    },
    {
        "content": "<p>Output: <a href=\"https://gist.github.com/jcommelin/1299f6a0b10e823c96bb251902f209ef\">https://gist.github.com/jcommelin/1299f6a0b10e823c96bb251902f209ef</a></p>",
        "id": 322135320,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674070059
    },
    {
        "content": "<p>I think that together with mathlib3, we can auto-generate the missing #align statements</p>",
        "id": 322135920,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674070259
    },
    {
        "content": "<blockquote>\n<p><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> Con.instPowQuotientToMulToMulOneClassNat -&gt; <span aria-label=\"cross mark\" class=\"emoji emoji-274c\" role=\"img\" title=\"cross mark\">:cross_mark:</span> AddCon.Quotient.nsmul</p>\n</blockquote>\n<p>How did that ever become a to_additive pair?</p>",
        "id": 322136316,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674070407
    },
    {
        "content": "<p>actually the <span aria-label=\"cross mark\" class=\"emoji emoji-274c\" role=\"img\" title=\"cross mark\">:cross_mark:</span> is on the left in both cases</p>",
        "id": 322137373,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674070786
    },
    {
        "content": "<p>the arrow indicates which one is the multiplicative and which is the additive</p>",
        "id": 322137458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674070805
    },
    {
        "content": "<p>oops, contravariance is hard</p>",
        "id": 322137537,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674070833
    },
    {
        "content": "<p>Fixed the code above, and updated the gist</p>",
        "id": 322137955,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674070963
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1816\">!4#1816</a> fixes 1020 of these</p>",
        "id": 323272992,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674572175
    },
    {
        "content": "<p>merge conflict already :)</p>",
        "id": 323275808,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674572824
    },
    {
        "content": "<p>Fixed</p>",
        "id": 323276686,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674573021
    },
    {
        "content": "<p>Is it ready for review?</p>",
        "id": 323278438,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674573377
    },
    {
        "content": "<p>I think so.</p>",
        "id": 323278525,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674573395
    },
    {
        "content": "<p>Let's find out whether CI agrees</p>",
        "id": 323278563,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674573402
    },
    {
        "content": "<p>How automatically-generated is this PR? Maybe it would be better to proceed with <a href=\"https://github.com/leanprover-community/mathlib4/pull/1502\">!4#1502</a> first?</p>",
        "id": 323280782,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674573873
    },
    {
        "content": "<p>It is pretty automatically generated</p>",
        "id": 323280869,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674573899
    },
    {
        "content": "<p>oh, 1502 is actually not as big as I feared</p>",
        "id": 323281047,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674573954
    },
    {
        "content": "<p>I'm fixing its conflicts</p>",
        "id": 323281303,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674573987
    },
    {
        "content": "<p>On 1502, or 1816?</p>",
        "id": 323281442,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674574011
    },
    {
        "content": "<p>1502</p>",
        "id": 323281477,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674574020
    },
    {
        "content": "<p>OK, I will look over 1816 then.</p>",
        "id": 323282018,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674574139
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> <a href=\"https://github.com/leanprover-community/mathlib4/pull/1502\">!4#1502</a> is mergable without conflicts</p>",
        "id": 323282229,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674574194
    },
    {
        "content": "<p>I'm lost</p>",
        "id": 323282607,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674574278
    },
    {
        "content": "<p>Are we merging 1502 first, or 1816?</p>",
        "id": 323282707,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674574300
    },
    {
        "content": "<p>I think 1502</p>",
        "id": 323282728,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674574306
    },
    {
        "content": "<p>Because afaik it's ready to go</p>",
        "id": 323282761,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674574313
    },
    {
        "content": "<p>Presumably 1816 will have merge conflicts after that, and you will fix them?</p>",
        "id": 323282881,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674574334
    },
    {
        "content": "<p>Yeps</p>",
        "id": 323282935,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674574350
    },
    {
        "content": "<p>I'm going to merge master into 1502 manually first, I don't really trust what github thinks</p>",
        "id": 323283218,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674574420
    },
    {
        "content": "<p>Because I think I probably modified some of the Lean 3 names in these <code>#align</code> statements.<br>\nSo for reviewing at least it would be good to be looking at the correct thing</p>",
        "id": 323283492,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674574481
    },
    {
        "content": "<p>Right so now the first diff is</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">-@[to_additive (attr := simp)]</span><span class=\"w\"></span>\n<span class=\"gi\">+-- todo: should nat power be called `nsmul` here?</span><span class=\"w\"></span>\n<span class=\"gi\">+@[to_additive (attr := simp) smul_right]</span><span class=\"w\"></span>\n<span class=\"w\"> </span>theorem pow_right (h : Commute a b) (n : ℕ) : Commute a (b ^ n) :=<span class=\"w\"></span>\n<span class=\"w\"> </span>  SemiconjBy.pow_right h n<span class=\"w\"></span>\n<span class=\"w\"> </span>#align commute.pow_right Commute.pow_rightₓ<span class=\"w\"></span>\n<span class=\"w\"> </span>#align add_commute.nsmul_right AddCommute.smul_rightₓ<span class=\"w\"></span>\n<span class=\"w\"> </span>-- `MulOneClass.toHasMul` vs. `MulOneClass.toMul`<span class=\"w\"></span>\n</code></pre></div>",
        "id": 323283929,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674574594
    },
    {
        "content": "<p>I assume we actually want the name <code>AddCommute.nsmul_right</code> now</p>",
        "id": 323283975,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674574611
    },
    {
        "content": "<p>OK, then I will try to update these</p>",
        "id": 323284235,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674574682
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> I'm confused. When I locally try to merge master, I don't get any conflicts.</p>",
        "id": 323284394,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674574710
    },
    {
        "content": "<p>Indeed there are no conflicts as detected by git</p>",
        "id": 323284432,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674574718
    },
    {
        "content": "<p>Ooh, ok</p>",
        "id": 323284478,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674574724
    },
    {
        "content": "<p>but there are logical conflicts</p>",
        "id": 323284498,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674574729
    },
    {
        "content": "<p>gotcha</p>",
        "id": 323284519,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674574734
    },
    {
        "content": "<p>e.g. why have add_commute.nsmul_right translated to AddCommute.smul_right</p>",
        "id": 323284549,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674574741
    },
    {
        "content": "<p>yes, understood. I should have stared at the diff a bit more</p>",
        "id": 323284729,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674574781
    },
    {
        "content": "<p>OK I think I updated 1502, though there's a chance of a build failure</p>",
        "id": 323290384,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674576110
    },
    {
        "content": "<p>I think/hope that <a href=\"https://github.com/leanprover-community/mathlib4/pull/1816\">!4#1816</a> now compiles</p>",
        "id": 323290415,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674576115
    },
    {
        "content": "<p>I discovered some <code>to_additive</code> clashes that already exist in ml3.</p>",
        "id": 323290566,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674576144
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/b69c9a770ecf37eb21f7b8cf4fa00de3b62694ec/src/algebra/order/hom/basic.lean#L118\">https://github.com/leanprover-community/mathlib/blob/b69c9a770ecf37eb21f7b8cf4fa00de3b62694ec/src/algebra/order/hom/basic.lean#L118</a><br>\nclashes with the decl above it.<br>\nThe two decls below it also clash.</p>",
        "id": 323291097,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674576252
    },
    {
        "content": "<p>Pushed more fixes</p>",
        "id": 323295982,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674577478
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> do you have anything to add to <a href=\"https://github.com/leanprover-community/mathlib4/pull/1502\">!4#1502</a>? I think it is ready to go</p>",
        "id": 323300403,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674578595
    },
    {
        "content": "<blockquote>\n<p>I added a note to \"nat smul lemmas\" that were called smul in mathlib3 to rename them.</p>\n</blockquote>\n<p>I think these were bad guesses by porters, and in most cases the lemmas were really called <code>nsmul</code> in mathlib3 as well.</p>",
        "id": 323300501,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674578623
    },
    {
        "content": "<p>I'm happy for it to be merged, I'm still catching up on the rest of this thread.</p>",
        "id": 323302156,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674579011
    },
    {
        "content": "<p>It seems good to fix all the names that I marked. I was just being conservative.</p>",
        "id": 323302274,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674579042
    },
    {
        "content": "<p>OK, the rest of this thread is really unrelated, except that it will probably have merge conflicts.</p>",
        "id": 323302336,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674579059
    },
    {
        "content": "<p>I put 1502 on the queue then.</p>",
        "id": 323302553,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674579102
    },
    {
        "content": "<p>I updated the commit message of <a href=\"https://github.com/leanprover-community/mathlib4/pull/1502\">!4#1502</a></p>",
        "id": 323302578,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674579110
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/to_additive.20align.20failures/near/323290566\">said</a>:</p>\n<blockquote>\n<p>I discovered some <code>to_additive</code> clashes that already exist in ml3.</p>\n</blockquote>\n<p>Sometimes you have two operations in a lemma statement that each can be multiplicative or additive independently of each other, which gives 4 possible lemmas. However, additivizing any of them will give you the \"fully additive\" one, so multiple multiplicative lemmas can have the same additivized version. I think this is probably usefully used in some places of mathlib3.</p>",
        "id": 323303372,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674579298
    },
    {
        "content": "<p>I delegated <a href=\"https://github.com/leanprover-community/mathlib4/pull/1816\">!4#1816</a> btw, but you should merge with master first after <a href=\"https://github.com/leanprover-community/mathlib4/pull/1502\">!4#1502</a> is merged</p>",
        "id": 323303592,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674579348
    }
]