[
    {
        "content": "<p>I realized I don't have an idea of which of these is better to use for verified hash-based data structures. It seems that in LeanColls, <span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span> tends to <a href=\"https://github.com/JamesGallicchio/LeanColls/blob/fbbe70b5098c129fcbae50eac6a498f87b117e1e/LeanColls/HashMap.lean#L15\">use <code>DecidableEq</code></a>, whereas in std4, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> tends to <a href=\"https://github.com/leanprover/std4/blob/735cbeae0fe896a7029d616b651e6a71e27653f8/Std/Data/HashMap/Basic.lean#L14\">use <code>LawfulHashable</code></a>. The latter seems more generic in that both implementations could be \"equally broken\", for example if everything is <code>BEq</code>-equal and everything also hashes to the same value. But do we really want to allow that rather than requiring <code>LawfulBEq</code>, at which point one maybe might as well require <code>DecidableEq</code>? (Even though <code>DecidableEq</code> is a bit stronger still than <code>LawfulBEq</code> since <code>LawfulBEq</code> does not entail that <code>!(a == b) → a ≠ b</code>, right?)</p>",
        "id": 302300576,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1664901093
    },
    {
        "content": "<p>I'm not done with the hash proofs yet, that class may need refinement. At first I thought I wanted <code>LawfulBEq</code> for the invariant that everything in a bucket is <code>!=</code>, but it probably suffices for the BEq to be an equivalence relation</p>",
        "id": 302300994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664901234
    },
    {
        "content": "<p>The purpose of those classes is not really to take a stand on what we \"should allow\" so much as what the hash map requires for it to actually be able to preserve its invariants. I anticipate that they will be much weaker than you actually <del>need</del> have in practice and there will be an instance deriving <code>LawfulHashable</code> from <code>LawfulBEq</code> (which itself can be derived from <code>DecidableEq</code>)</p>",
        "id": 302301753,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664901461
    },
    {
        "content": "<p>I assume you mean \"weaker than you actually <em>have</em> in practice\"? Anyhow okay, using the weakest assumptions that suffice to prove that the map is well-behaved does sound like a good approach.</p>",
        "id": 302302445,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1664901686
    },
    {
        "content": "<p>Yeah, I'm not sure what is the minimal assumption I could use here... Equivalence relation seems right.</p>",
        "id": 302309763,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664904021
    }
]