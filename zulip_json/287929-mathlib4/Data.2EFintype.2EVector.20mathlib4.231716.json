[
    {
        "content": "<p>On</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">Vector.fintype</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Fintype.ofEquiv</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Equiv.vectorEquivFin</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>\n<p>I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">IR</span> <span class=\"n\">check</span> <span class=\"n\">failed</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">Fintype.ofBijective._at.Vector.fintype._spec_2._rarg'</span><span class=\"o\">,</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">fintype'</span>\n</code></pre></div>",
        "id": 322513787,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674221582
    },
    {
        "content": "<p>Making it noncomputable of course fixes the issue. But I imagine that's not what we want.</p>",
        "id": 322513843,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674221599
    },
    {
        "content": "<p><code>Pi.fintype</code> definitely does exist, as <code>#check</code> confirms.</p>",
        "id": 322513880,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674221611
    },
    {
        "content": "<p>Aha. <code>Pi.fintype</code> is noncomputable!</p>",
        "id": 322514712,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674221830
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.fintype\">docs#pi.fintype</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Pi.fintype#doc\">docs4#Pi.fintype</a></p>",
        "id": 322515090,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674221927
    },
    {
        "content": "<p>It was computable in mathlib3</p>",
        "id": 322515192,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674221951
    },
    {
        "content": "<p>What changed?</p>",
        "id": 322515197,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674221953
    },
    {
        "content": "<p>The Lean version?</p>",
        "id": 322515245,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674221972
    },
    {
        "content": "<p>I've regularly had lean4 claim things needed to be noncomputable when they weren't in lean3. I haven't looked into why</p>",
        "id": 322515300,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1674221994
    },
    {
        "content": "<p>Ah, this is because <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Multiset.recOn#doc\">docs4#Multiset.recOn</a> is noncomputable</p>",
        "id": 322515913,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674222169
    },
    {
        "content": "<p>Like all other recursors</p>",
        "id": 322515930,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674222172
    },
    {
        "content": "<p><del>Perhaps the thing to do is to write a <code>recOn'</code> with pattern matching</del></p>",
        "id": 322516033,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674222198
    },
    {
        "content": "<p>Actually, this comes down to computability of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Multiset.rec#doc\">docs4#Multiset.rec</a> which in turn goes down to <code>List.rec</code></p>",
        "id": 322516376,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674222296
    },
    {
        "content": "<p>All is fixed. Ready for review</p>",
        "id": 322519044,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674223023
    },
    {
        "content": "<p>Modulo removing the noncomputable once <code>List.rec</code> is fixed, of course.</p>",
        "id": 322519115,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674223046
    },
    {
        "content": "<p>I wonder why <a href=\"#narrow/stream/270676-lean4/topic/csimp.20on.20recursors/near/322520199\"><code>csimp</code> doesn't work on <code>List.rec</code>...</a></p>",
        "id": 322519737,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674223227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I'm not sure, but in case you want to work on making these fintypes computable, here's a computable <code>Multiset.rec</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">rec_aux</span> <span class=\"o\">(</span><span class=\"n\">C_0</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C_cons</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span><span class=\"bp\">ₘ</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">C_cons_heq</span> <span class=\"o\">:</span>\n      <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"n\">m</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">HEq</span> <span class=\"o\">(</span><span class=\"n\">C_cons</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">a'</span> <span class=\"o\">::</span><span class=\"bp\">ₘ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C_cons</span> <span class=\"n\">a'</span> <span class=\"n\">m</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">C_cons</span> <span class=\"n\">a'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span><span class=\"bp\">ₘ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C_cons</span> <span class=\"n\">a</span> <span class=\"n\">m</span> <span class=\"n\">b</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">Quotient.mk</span> <span class=\"o\">(</span><span class=\"n\">isSetoid</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">C_0</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">C_cons</span> <span class=\"n\">a</span> <span class=\"bp\">⟦</span><span class=\"n\">l</span><span class=\"bp\">⟧</span> <span class=\"o\">(</span><span class=\"n\">rec_aux</span> <span class=\"n\">C_0</span> <span class=\"n\">C_cons</span> <span class=\"n\">C_cons_heq</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">rec_aux_eq</span> <span class=\"o\">:</span>\n    <span class=\"n\">rec_aux</span> <span class=\"n\">C_0</span> <span class=\"n\">C_cons</span> <span class=\"n\">C_cons_heq</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">List.rec</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">C</span> <span class=\"bp\">⟦</span><span class=\"n\">l</span><span class=\"bp\">⟧</span><span class=\"o\">)</span> <span class=\"n\">C_0</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">C_cons</span> <span class=\"n\">a</span> <span class=\"bp\">⟦</span><span class=\"n\">l</span><span class=\"bp\">⟧</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">l</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">rec_aux</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- Dependent recursor on multisets.</span>\n<span class=\"sd\">TODO: should be @[recursor 6], but then the definition of `Multiset.pi` fails with a stack</span>\n<span class=\"sd\">overflow in `whnf`.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kn\">protected</span>\n<span class=\"kd\">def</span> <span class=\"n\">rec</span> <span class=\"o\">(</span><span class=\"n\">C_0</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C_cons</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span><span class=\"bp\">ₘ</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">C_cons_heq</span> <span class=\"o\">:</span>\n      <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"n\">m</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">HEq</span> <span class=\"o\">(</span><span class=\"n\">C_cons</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">a'</span> <span class=\"o\">::</span><span class=\"bp\">ₘ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C_cons</span> <span class=\"n\">a'</span> <span class=\"n\">m</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">C_cons</span> <span class=\"n\">a'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span><span class=\"bp\">ₘ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C_cons</span> <span class=\"n\">a</span> <span class=\"n\">m</span> <span class=\"n\">b</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Quotient.hrecOn</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">rec_aux</span> <span class=\"n\">C_0</span> <span class=\"n\">C_cons</span> <span class=\"n\">C_cons_heq</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rec_aux_eq</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h.rec_heq</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hl</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">congr</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">Quot.sound</span> <span class=\"n\">hl</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">C_cons_heq</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">⟦</span><span class=\"n\">_</span><span class=\"bp\">⟧</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 322522152,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674223847
    },
    {
        "content": "<p>I'd argue it would be easier to just write a computable <code>list.rec</code> and swap that in everywhere; I think all the derived types end up comptuable automatically</p>",
        "id": 322522304,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674223907
    },
    {
        "content": "<p>I think using recursors for computation is \"wrong\" though, since Lean eagerly evaluates arguments. I'm pretty sure it's not that <code>List.rec</code> is noncomputable, but rather that the Lean compiler is by design pushing the user away from using it for computations.</p>",
        "id": 322522940,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674224090
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">List.rec</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>gives (emphasis mine)</p>\n<blockquote>\n<p>code generator does not support recursor 'List.rec' <strong>yet</strong>, consider using 'match ... with' and/or structural recursion</p>\n</blockquote>\n<p>which suggests this is not by design but by it not being prioritized</p>",
        "id": 322523371,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674224200
    },
    {
        "content": "<p>2 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/csimp.20on.20recursors\">#lean4 &gt; csimp on recursors</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 322526176,
        "sender_full_name": "Notification Bot",
        "timestamp": 1674224929
    },
    {
        "content": "<p>It's still arguably suboptimal to use List.rec because (as Kyle alluded to) you have to evaluate the empty list case even when the list is not empty</p>",
        "id": 322531406,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674226237
    },
    {
        "content": "<p>Of course it doesn't matter if you only care about \"does Lean complain about <code>noncomputable</code>\"</p>",
        "id": 322532321,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674226449
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1720\">mathlib4#1720</a> makes a very large number of things computable by adding those <code>csimp</code> lemmas</p>",
        "id": 322532652,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674226527
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EFintype.2EVector.20mathlib4.231716/near/322531406\">said</a>:</p>\n<blockquote>\n<p>It's still arguably suboptimal to use List.rec because (as Kyle alluded to) you have to evaluate the empty list case even when the list is not empty</p>\n</blockquote>\n<p>I would guess that in almost all cases the empty list case is entirely trivial anyway, so evaluation costs very little</p>",
        "id": 322532740,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674226556
    },
    {
        "content": "<p>It should also be noted (as usual) that this \"computability\" is not the same as being able to reduce things</p>",
        "id": 322533336,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674226701
    },
    {
        "content": "<p>Presumably both <code>List.rec</code> and <code>Nat.rec</code> already reduce correctly</p>",
        "id": 322533991,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674226854
    },
    {
        "content": "<p>On the other hand this \"computability\" will make porting easier, with fewer confusing errors.</p>",
        "id": 322545612,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674229676
    },
    {
        "content": "<p>Notably there are some <code>Decidable</code> instances that describe some algorithms on lists. It's pretty silly to say \"oh, this algorithm is just as noncomputable as using <code>choice</code> would be\".</p>",
        "id": 322546221,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674229819
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1728\">https://github.com/leanprover-community/mathlib4/pull/1728</a></p>",
        "id": 322549972,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1674230705
    },
    {
        "content": "<p>I made this on a fork because I wasn't planning on PRing it, but maybe I should PR from a branch of leanprover-community for CI</p>",
        "id": 322550324,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1674230794
    },
    {
        "content": "<p>CI seems to have kicked in now so I'll leave it</p>",
        "id": 322552417,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1674231368
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> Can you also fix <code>Data.Fintype.Vector</code> please?</p>",
        "id": 322552876,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674231487
    },
    {
        "content": "<p>does Lean 4 still give an error when you mark something <code>noncomputable</code> that's computable?</p>",
        "id": 322552955,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674231513
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EFintype.2EVector.20mathlib4.231716/near/322546221\">said</a>:</p>\n<blockquote>\n<p>Notably there are some <code>Decidable</code> instances that describe some algorithms on lists. It's pretty silly to say \"oh, this algorithm is just as noncomputable as using <code>choice</code> would be\".</p>\n</blockquote>\n<p>AFAIK we don't ever evaluate <code>Decidable</code> instances (that's not how <code>dec_trivial</code> works)</p>",
        "id": 322553173,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674231588
    },
    {
        "content": "<p>This <code>rg noncomputable | rg orting</code> gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Multiset</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"kd\">noncomputable</span> <span class=\"c1\">-- Porting note: added</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Multiset</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"kd\">noncomputable</span> <span class=\"c1\">-- Porting note: added</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Multiset</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"kd\">noncomputable</span> <span class=\"c1\">-- Porting note: added</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Multiset</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"kd\">noncomputable</span> <span class=\"c1\">-- Porting note: added</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Multiset</span><span class=\"bp\">/</span><span class=\"n\">Sections.lean</span><span class=\"o\">:</span><span class=\"c1\">-- Porting note: `Sections` depends on `recOn` which is noncomputable.</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Multiset</span><span class=\"bp\">/</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"c1\">--Porting note: Added noncomputable</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Finset</span><span class=\"bp\">/</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"c1\">--Porting note: marked noncomputable</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Fin</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"c1\">--Porting note: marked noncomputable</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Fin</span><span class=\"bp\">/</span><span class=\"n\">Tuple</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"c1\">-- Porting note: I made this noncomputable because Lean seemed to think it should be</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Vector</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"c1\">-- porting notes: requires noncomputable</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Vector</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"c1\">-- porting notes: requires noncomputable</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Vector</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"c1\">-- porting notes: requires noncomputable</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">PNat</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"c1\">-- Porting note: added `noncomputable` because of</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Fintype</span><span class=\"bp\">/</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"c1\">--Porting note: added noncomputable</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Fintype</span><span class=\"bp\">/</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"c1\">--Porting note: added noncomputable</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Set</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"c1\">-- Porting note: remove `noncomputable` later</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Group</span><span class=\"bp\">/</span><span class=\"n\">Units.lean</span><span class=\"o\">:</span><span class=\"c1\">-- Porting note: `to_additive` doesn't carry over `noncomputable` so we make an explicit defn</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">FreeMonoid</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"c1\">-- Porting note: added noncomputable</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Order</span><span class=\"bp\">/</span><span class=\"n\">RelClasses.lean</span><span class=\"o\">:</span><span class=\"c1\">-- Porting note: WellFounded.fix is noncomputable, at 2022-10-29 lean</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Order</span><span class=\"bp\">/</span><span class=\"n\">RelClasses.lean</span><span class=\"o\">:</span><span class=\"c1\">-- Porting note: WellFounded.fix is noncomputable, at 2022-10-29 lean</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Order</span><span class=\"bp\">/</span><span class=\"n\">RelClasses.lean</span><span class=\"o\">:</span><span class=\"c1\">-- Porting note: WellFounded.fix is noncomputable, at 2022-10-29 lean</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Control</span><span class=\"bp\">/</span><span class=\"n\">Fix.lean</span><span class=\"o\">:</span><span class=\"c1\">-- porting note: added noncomputable, because WellFounded.fix is noncomputable (for now?)</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Control</span><span class=\"bp\">/</span><span class=\"n\">Fix.lean</span><span class=\"o\">:</span><span class=\"c1\">-- porting note: added noncomputable, because WellFounded.fix is noncomputable (for now?)</span>\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Control</span><span class=\"bp\">/</span><span class=\"n\">Fix.lean</span><span class=\"o\">:</span><span class=\"c1\">-- porting note: added noncomputable, because WellFounded.fix is noncomputable (for now?)</span>\n</code></pre></div>",
        "id": 322554238,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674231874
    },
    {
        "content": "<p>I'm on a train, so this was on an ancient master (from 12 hrs ago, or so)</p>",
        "id": 322554396,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674231909
    },
    {
        "content": "<p>I think I have most of those removed my PR</p>",
        "id": 322561149,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674233747
    },
    {
        "content": "<p>I think it's just the <code>WellFounded.fix</code> things that remain noncomputable</p>",
        "id": 322578780,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674236933
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EFintype.2EVector.20mathlib4.231716/near/322553173\">said</a>:</p>\n<blockquote>\n<p>AFAIK we don't ever evaluate <code>Decidable</code> instances (that's not how <code>dec_trivial</code> works)</p>\n</blockquote>\n<p>Oh, that's a very good point. I guess it's still nice for metaprograms, but the application is admittedly niche.</p>",
        "id": 322578982,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674237006
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EFintype.2EVector.20mathlib4.231716/near/322578780\">said</a>:</p>\n<blockquote>\n<p>I think it's just the <code>WellFounded.fix</code> things that remain noncomputable</p>\n</blockquote>\n<p>I recall early in the ad-hoc phase I did something similar to your <code>List.recC</code> for <code>WellFounded.fix</code> - you can just add a csimp lemma and then anything using <code>WellFounded.fix</code> will be computable</p>",
        "id": 322587053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674239133
    },
    {
        "content": "<p>Oh, I wasn't aware it was possible to write one</p>",
        "id": 322587788,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674239357
    }
]