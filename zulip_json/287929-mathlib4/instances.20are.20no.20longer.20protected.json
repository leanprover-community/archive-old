[
    {
        "content": "<p>I just found out that in Lean 4 instances are not protected by default. E.g. the following fails without the <code>protected</code> tag:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">instance</span> <span class=\"n\">OrderDual.Pow</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Pow</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Pow</span> <span class=\"n\">α</span><span class=\"bp\">ᵒᵈ</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n<span class=\"kd\">instance</span> <span class=\"n\">OrderDual.Pow'</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Pow</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Pow</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"bp\">ᵒᵈ</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>That is very unfortunate. Is that something Core Lean 4 is willing to change?</p>",
        "id": 312049992,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669307156
    },
    {
        "content": "<p>I'm not sure I understand the issue, what fails without <code>protected</code>?</p>",
        "id": 312052660,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669308217
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">od</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">postfix</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"ᵒᵈ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">od</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">OrderDual.Pow</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Pow</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Pow</span> <span class=\"n\">α</span><span class=\"bp\">ᵒᵈ</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n<span class=\"kd\">instance</span> <span class=\"n\">OrderDual.Pow'</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Pow</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Pow</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"bp\">ᵒᵈ</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n<span class=\"c\">/-</span><span class=\"cm\"> error on `Pow α β` argument</span>\n<span class=\"cm\">function expected at</span>\n<span class=\"cm\">  Pow</span>\n<span class=\"cm\">term has type</span>\n<span class=\"cm\">  _root_.Pow ?m.6684ᵒᵈ ?m.6685</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 312054052,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669308760
    },
    {
        "content": "<p>This is the same surprising namespace behavior <a href=\"#narrow/stream/270676-lean4/topic/Surprising.20namespaces.20in.20elaboration.20of.20type.20of.20function/near/311672737\">I was complaining about</a>. The <code>Pow</code> in the second line is referring to <code>OrderDual.Pow</code> rather than <code>Pow</code> itself because the instance definition is taking place in the <code>OrderDual</code> namespace.</p>",
        "id": 312054394,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669308905
    },
    {
        "content": "<p>Oh wow, I completely missed it even after participating in the other thread...</p>",
        "id": 312054645,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669309016
    },
    {
        "content": "<p>Isn't the convention to call the instance <code>instPow</code> instead to avoid this issue?</p>",
        "id": 312055149,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669309236
    },
    {
        "content": "<p>I was not aware of this naming convention. This convention is currently followed by ~2 out of ~160 manually named instances in Mathlib4. So it's clearly not a well-established convention.</p>",
        "id": 312059179,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669311055
    },
    {
        "content": "<p>I suggest we leave instances anonymous where possible</p>",
        "id": 312060474,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1669311700
    },
    {
        "content": "<p>Isn't <code>instPow</code> the name that used when they're anonymous?</p>",
        "id": 312062320,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669312547
    }
]