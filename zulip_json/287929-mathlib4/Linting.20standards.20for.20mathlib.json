[
    {
        "content": "<p>A couple of questions about how happy we should make the linter:</p>\n<ol>\n<li>Should comments and docstrings both stick to the â‰¤ 100 character line limit? I'd imagine that we wouldn't want odd newlines appearing suddenly in docstrings (but rather let the dosctring-viewer handle word wrapping itself, since it'll likely display it in a proportional font, which can make newlines after 100 characters seem out of place), but I'm not sure.</li>\n</ol>",
        "id": 310712205,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1668724444
    },
    {
        "content": "<p>No, <em>everything</em> is cut to 100 chars; this is the same as in mathlib3. The docstrings are formatted by doc-gen4, so it's not really an issue.</p>",
        "id": 310712446,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668724566
    },
    {
        "content": "<ol start=\"2\">\n<li>I have a lot of definitions that only are to be used within the file. Should these also have a docstring to make the linter happy? Or should they be marked <code>private</code> or something like that?</li>\n</ol>",
        "id": 310712512,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1668724605
    },
    {
        "content": "<p>As for the linter, you should make it perfectly happy always (* technically there are certain circumstances where it's okay to add a <code>nolint</code> attribute, but those are comparatively rare).</p>",
        "id": 310712547,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668724621
    },
    {
        "content": "<p>(there is one exception to the line length limit, which is lines that contain a URL; those usually can't be line-broken and are excluded by the style linter)</p>",
        "id": 310712562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668724625
    },
    {
        "content": "<p>There's some special context here: I'm basing my current work off of an existing file in <code>Lean/Elab</code>, which doesn't have docstrings nor <code>private</code> declarations for most definitions. Also I've noticed several comments and docstrings (none of which contain a URL) in the source file that are &gt; 100 characters. Should those be changed?</p>",
        "id": 310712603,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1668724649
    },
    {
        "content": "<p>Leo has a giant monitor and does not observe the 100 character line length convention</p>",
        "id": 310712692,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668724683
    },
    {
        "content": "<p>I don't think Lean 4 core has the same linting restrictions as Mathlib.</p>",
        "id": 310712694,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668724684
    },
    {
        "content": "<p>Hmmm. Should I make sure my additions are lint-free and then somehow turn off the linter on this particular file, since it's a minimally-invasive modification of <code>StructInst.lean</code>in lean 4 core? Or should I wrangle its original contents into conformity?</p>",
        "id": 310713390,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1668725001
    },
    {
        "content": "<p>And, as part of this: how should I handle the missing docstrings on 95% of the function's existing definitions (which aren't used outside the file)?</p>",
        "id": 310713560,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1668725059
    },
    {
        "content": "<p>everything should be lint-free</p>",
        "id": 310713739,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668725151
    },
    {
        "content": "<p>If it's intended as a modification to <code>StructInst.lean</code> then it should be a PR to core and then the linters don't matter</p>",
        "id": 310713877,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668725211
    },
    {
        "content": "<p>Although note that some changes (not sure here!) that <em>could</em> go in core, should not, for sake of not using up core developer's bandwidth. mathlib4 is happy to take things in the meantime, but in that case wants complete lint compliance. :-)</p>",
        "id": 310714543,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668725500
    },
    {
        "content": "<p>Ok! But, if we put it in mathlib in the meantime, with an eye towards putting it in core eventually...does that mean attaching a docstring to every function in this file without one (about 101 declarations), even though they're just used within the file and nowhere else?</p>\n<p>Which, I mean, I guess I couldâ€”I understand it well enough by now! ðŸ˜… I just wonder if my mathlib-contribution time could be put to better use. (Or should I maybe attach an empty/copy-pasted docstring?)</p>",
        "id": 310716825,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1668726593
    },
    {
        "content": "<p>Only definitions <em>need</em> docstrings.</p>",
        "id": 310716971,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1668726646
    },
    {
        "content": "<p>Yes, but <code>#lint</code> tells me there are 101 of those in this file. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 310717045,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1668726684
    },
    {
        "content": "<p>This file just defines a term elaborator, so all of its definitions only really go towards that. So if there's a way I can <code>private</code> them all or something...not sure if that would fix it anyway, though.</p>",
        "id": 310717117,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1668726720
    },
    {
        "content": "<p>Then you're in for a rough time <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 310717159,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1668726723
    },
    {
        "content": "<p>Hmm... I'm inclined to say it's still valuable, since of course core should have the doc-strings too. :-) But I hear your pain.</p>",
        "id": 310718579,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668727380
    },
    {
        "content": "<p>Adding all those doc-strings might be a nice present to go along with the core PR. :-)</p>",
        "id": 310718666,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668727417
    },
    {
        "content": "<p>Yeah. Core could always use more doc strings.</p>",
        "id": 310722206,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668729002
    },
    {
        "content": "<p>Ok, I'll give the docstrings  a shot! :)</p>",
        "id": 310723298,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1668729298
    },
    {
        "content": "<p>Alright! Docstrings written, linting (and build) passed! <span aria-label=\"smiling face\" class=\"emoji emoji-263a\" role=\"img\" title=\"smiling face\">:smiling_face:</span> Still <a href=\"#narrow/stream/270676-lean4/topic/.5BRFC.5D.20refine_struct.20functionality.20via.20new.20.3F.2E.2E.20syntax/near/310715244\">a couple design choices that can be made/tweaked/confirmed</a> and some comment cleanup once that's done, but it's up and running! :)</p>",
        "id": 311109890,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1668932894
    }
]