[
    {
        "content": "<p>I think that if people type e.g. <code>3 / 4</code>, there's a ‚â•90% chance they mean three fourths instead of <code>0</code>‚Äîbut <code>0</code> is the default interpretation, since <code>/</code> among nats defaults to <code>Nat.div</code>, and <code>/</code> among ints defaults to the similar <code>Int.div</code>.</p>\n<p>I understand the desire to have operations default to a <code>Œ± ‚Üí Œ± ‚Üí Œ±</code> type signature, but my expectation is that that just doesn't reflect the most common actual usage in this particular case.</p>\n<p>I feel as though type annotations should be required to specify that I actually want  e.g. <code>Int.div</code> instead of type annotations being required to get a rational number. (If type annotations wouldn't work in this case for whatever reason, could we either move to another symbol or just rely on <code>Int.div</code> or <code>Nat.div</code>?)</p>\n<p>Is there any support for having <code>/</code> among nats and ints always land in <code>‚Ñö</code> in mathlib4?</p>",
        "id": 322657562,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674271867
    },
    {
        "content": "<p>Currently, we try to be as close to <code>mathlib3</code> as possible.</p>",
        "id": 322670582,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674281089
    },
    {
        "content": "<p>While Lean 4 supports <code>HDiv</code>, we don't use it (yet).</p>",
        "id": 322670634,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674281145
    },
    {
        "content": "<p>Once the migration is complete, we can talk about possible refactors.</p>",
        "id": 322670684,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674281169
    },
    {
        "content": "<p>E.g., we don't use <code>HMul</code> for scalar multiplication.</p>",
        "id": 322670777,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674281283
    },
    {
        "content": "<p>You‚Äôre right, I should have saved this thought until after the port! :)</p>\n<p>‚Ä¶If we dare to think that far in advance, though, how do people feel about this? üëÄ</p>",
        "id": 322673166,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674283492
    },
    {
        "content": "<p>I guess you'll also propose making nat-subtraction give an integer?</p>",
        "id": 322673325,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674283630
    },
    {
        "content": "<p>That DOES seem reasonable to me! :) But if I had to make a case for just one change, I would say that there‚Äôs a bit of a stronger one for <code>/</code>, since <code>/</code> is not ‚Äújust‚Äù a binary operation, but also our primary way of writing nonintegral rational numbers.</p>",
        "id": 322673704,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674283860
    },
    {
        "content": "<p>Agda uses ‚à∏ for Nat subtraction, which seems sensible and would reduce the number of \"how come I can't prove this [false] lemma\" questions</p>",
        "id": 322674004,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674284113
    },
    {
        "content": "<p>I might also suggest the notation <code>√∑</code> for nat and int division, which would coincidentally be visually consistent with <code>‚à∏</code>! (‚Ä¶In the distant future, of course. üôÉ)</p>",
        "id": 322674112,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674284188
    },
    {
        "content": "<p>We considered monus early in Lean 4 and discarded it for being entirely too strange for programming. I'm afraid I don't have a satisfying answer here.</p>",
        "id": 322687890,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1674292561
    },
    {
        "content": "<p>Perhaps making the \"bad\" instances scoped would be acceptable for programmers if we also had a system to suggest opening that namespace on failed TC inference to avoid the immediate \"WTF\" reaction</p>",
        "id": 322688137,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1674292674
    },
    {
        "content": "<p>Hmm, it might be too strange for programming, but is it too strange for mathematics? If not, would localizing the notation to mathlib4 somehow be a potential solution?</p>",
        "id": 322688478,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674292829
    },
    {
        "content": "<p>How would that help if there is still a global <code>Sub Nat</code> instance in core?</p>",
        "id": 322688620,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1674292905
    },
    {
        "content": "<p>Would it make sense for <code>2 / 3</code> with natural number literals to desugar to <code>ofFraction 2 3</code>? Then that typeclass could just be missing for Int and Nat, and you could force int division with <code>(2)/3</code> or something</p>",
        "id": 322695590,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674295919
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/287929-mathlib4/topic/default.20.22.2F.22.20meaning/near/322687890\">said</a>:</p>\n<blockquote>\n<p>We considered monus early in Lean 4 and discarded it for being entirely too strange for programming. I'm afraid I don't have a satisfying answer here.</p>\n</blockquote>\n<p>But isn't the semantics of <code>-</code> on Nat even more \"too strange for programming\"? I thought this would be an advantage of monus, not a disadvantage</p>",
        "id": 322697169,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674296631
    },
    {
        "content": "<p>For instance if you write <code>a[i-1]</code> and <code>i : Nat</code> is zero then I think it's very unlikely you silently want to return <code>a[0]</code></p>",
        "id": 322697693,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674296831
    },
    {
        "content": "<p>Right, but usually we use subtraction in that way when we're relatively sure it cannot overflow... famous last words. What I'm trying to say is, I think programmers expect that there is <em>some</em> subtraction that does the right thing in the happy case, and are aware that it probably doesn't do what they need in other cases.</p>",
        "id": 322698138,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1674297057
    },
    {
        "content": "<p>If <code>i - 1 = -1 : Int</code> then you can make a <code>GetElem</code> instance that does the right thing e.g. <code>a[-1]? = none</code>, or you can use dotminus and then be aware that you need to check somethinig</p>",
        "id": 322698202,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674297091
    },
    {
        "content": "<p>In advent of code I basically never used Nat, since it's so obviously full of footguns</p>",
        "id": 322698242,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674297113
    },
    {
        "content": "<p>Like it's possible to write correct code with Nat sure, but why try</p>",
        "id": 322698469,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674297194
    },
    {
        "content": "<p>True, our APIs are perhaps more Nat-focused than they should be. Though <code>/</code> is not quite as easy to solve.</p>",
        "id": 322698539,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1674297234
    }
]