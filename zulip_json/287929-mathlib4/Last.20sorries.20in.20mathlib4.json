[
    {
        "content": "<p>As ported files replace ad-hoc files written to support tactics, the sorry count in mathlib4 has gone down.  See eg <a href=\"https://github.com/leanprover-community/mathlib4/pull/1100\">mathlib4#1100</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/1106\">mathlib4#1106</a>.</p>\n<p>Now it seems the only sorries left in mathlib4 are these three in <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Positivity/Core.lean\">Tactic.Positivity.Core</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">pos_of_isNat</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddMonoidWithOne</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">NormNum.IsNat</span> <span class=\"n\">e</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Nat.ble</span> <span class=\"mi\">1</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nonneg_of_isNat</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddMonoidWithOne</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">NormNum.IsNat</span> <span class=\"n\">e</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nz_of_isNegNat</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">NormNum.IsInt</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">negOfNat</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Nat.ble</span> <span class=\"mi\">1</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Does anyone who knows about boolean-le and OfNat want to take them on?</p>",
        "id": 318913606,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672613599
    },
    {
        "content": "<p>Looks like at least the first one is invalid, as currently written.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Cast.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Positivity.Core</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Mathlib.Meta.Positivity.pos_of_isNat</span> <span class=\"n\">ℤ</span><span class=\"bp\">ᵒᵈ</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 318921631,
        "sender_full_name": "David Renshaw",
        "timestamp": 1672621655
    },
    {
        "content": "<p>I guess maybe we need to add <code>[ZeroLEOneClass A]</code>?</p>",
        "id": 318921729,
        "sender_full_name": "David Renshaw",
        "timestamp": 1672621727
    },
    {
        "content": "<p>Sounds reasonable!</p>",
        "id": 318927014,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672627448
    },
    {
        "content": "<p>I opened an issue, <a href=\"https://github.com/leanprover-community/mathlib4/pull/1362\">mathlib4#1362</a>, for these sorries.  It'd be great if someone could take them on!</p>",
        "id": 319704333,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672968457
    },
    {
        "content": "<p>I think at the time the appropriate partial order / semiring combo class was not available, and I wasn't interested in working out what it should be. I don't think <code>ZeroLEOneClass</code> is the answer though</p>",
        "id": 319705353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672969190
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Last.20sorries.20in.20mathlib4/near/319705353\">said</a>:</p>\n<blockquote>\n<p>I think at the time the appropriate partial order / semiring combo class was not available</p>\n</blockquote>\n<p>Do you know if this class is now available?</p>",
        "id": 319707091,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672970438
    },
    {
        "content": "<p>E.g. were you thinking of <code>CanonicallyOrderedAddMonoid</code>?</p>",
        "id": 319707251,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672970534
    },
    {
        "content": "<p>canonically ordered sounds a bit strong</p>",
        "id": 319707618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672970814
    },
    {
        "content": "<p>what we want is to know that <code>Nat.cast (n+1) &gt; 0</code>, something like an ordered semiring should suffice</p>",
        "id": 319707697,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672970879
    },
    {
        "content": "<p>the relevant lemma in lean 3 (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.cast_pos\">docs#nat.cast_pos</a>) is stated for nontrivial ordered semirings</p>",
        "id": 319707916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672971015
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">pos_of_isNat</span> <span class=\"o\">[</span><span class=\"n\">StrictOrderedSemiring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">NormNum.IsNat</span> <span class=\"n\">e</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Nat.ble</span> <span class=\"mi\">1</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">NormNum.IsNat.to_eq</span> <span class=\"n\">h</span> <span class=\"n\">rfl</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.cast_pos.2</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nonneg_of_isNat</span> <span class=\"o\">[</span><span class=\"n\">OrderedSemiring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">NormNum.IsNat</span> <span class=\"n\">e</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">NormNum.IsNat.to_eq</span> <span class=\"n\">h</span> <span class=\"n\">rfl</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Nat.cast_nonneg</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nz_of_isNegNat</span> <span class=\"o\">[</span><span class=\"n\">StrictOrderedRing</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">NormNum.IsInt</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">negOfNat</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Nat.ble</span> <span class=\"mi\">1</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">NormNum.IsInt.neg_to_eq</span> <span class=\"n\">h</span> <span class=\"n\">rfl</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne_eq</span><span class=\"o\">,</span> <span class=\"n\">neg_eq_zero</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ne_of_gt</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">w</span>\n</code></pre></div>\n<p>work, but then <code>def normNumPositivity</code> can't generate the relevant typeclasses.</p>",
        "id": 319727670,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1672988423
    },
    {
        "content": "<p>Huh ... do you think it's because the <code>Qq</code> business in the <a href=\"https://github.com/leanprover-community/mathlib4/blob/cfd16dd8874d0989ff38ccd8b4727b59f17683e7/Mathlib/Tactic/Positivity/Core.lean#L136-L147\">existing code</a> for <code>normNumPositivity</code> needs to be adapted to the new typeclasses?</p>",
        "id": 319729158,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672989400
    },
    {
        "content": "<p>I wasn't sure how to resolve this. The problem is that <code>NormNum.derive</code> is returning results with (weaker) typeclasses in them, so we can't just add <code>let _ ← synthInstanceQ (q(StrictOrderedSemiring $α) : Q(Type u))</code>.</p>",
        "id": 319730503,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1672990147
    },
    {
        "content": "<p>This issue already comes up in the other positivity extensions, you have to clear the weaker typeclasses and then use type ascriptions to tell Qq that it should pretend the original exprs have a type written in terms of the new typeclass</p>",
        "id": 319739428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672995049
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1375\">mathlib4#1375</a></p>",
        "id": 319747948,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1672998682
    }
]