[
    {
        "content": "<p>Hey, I've got a \"working\" port of this file, but I had to do some <em>bricolage</em> e.g. to get it there without <code>wlog</code>.<br>\nIt's a bit uglier than it was in <code>mathlib3</code> (I'm still figuring out lean4) so I don't know if I should PR it or not? Or if it's even worth working on it some more.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Copyright (c) 2017 Johannes Hölzl. All rights reserved.</span>\n<span class=\"cm\">Released under Apache 2.0 license as described in the file LICENSE.</span>\n<span class=\"cm\">Authors: Johannes Hölzl</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Order.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.SwapVar</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\"># Set enumeration</span>\n<span class=\"cm\">This file allows enumeration of sets given a choice function.</span>\n<span class=\"cm\">The definition does not assume `sel` actually is a choice function, i.e. `sel s ∈ s` and</span>\n<span class=\"cm\">`sel s = none ↔ s = ∅`. These assumptions are added to the lemmas needing them.</span>\n<span class=\"cm\">-/</span>\n\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Function</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Set</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Enumerate</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sel</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Given a choice function `sel`, enumerates the elements of a set in the order</span>\n<span class=\"sd\">`a 0 = sel s`, `a 1 = sel (s \\ {a 0})`, `a 2 = sel (s \\ {a 0, a 1})`, ... and stops when</span>\n<span class=\"sd\">`sel (s \\ {a 0, ..., a n}) = none`. Note that we don't require `sel` to be a choice function. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">enumerate</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sel</span> <span class=\"n\">s</span>\n  <span class=\"bp\">|</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">sel</span> <span class=\"n\">s</span>\n    <span class=\"n\">enumerate</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">})</span> <span class=\"n\">n</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">set.enumerate</span> <span class=\"n\">Set.enumerate</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">enumerate_eq_none_of_sel</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">sel</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">enumerate</span> <span class=\"n\">sel</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">none</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">enumerate</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"o\">(</span><span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">enumerate</span><span class=\"o\">]</span> <span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">set.enumerate_eq_none_of_sel</span> <span class=\"n\">Set.enumerate_eq_none_of_sel</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">enumerate_eq_none</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">n₁</span> <span class=\"n\">n₂</span><span class=\"o\">},</span> <span class=\"n\">enumerate</span> <span class=\"n\">sel</span> <span class=\"n\">s</span> <span class=\"n\">n₁</span> <span class=\"bp\">=</span> <span class=\"n\">none</span> <span class=\"bp\">→</span> <span class=\"n\">n₁</span> <span class=\"bp\">≤</span> <span class=\"n\">n₂</span> <span class=\"bp\">→</span> <span class=\"n\">enumerate</span> <span class=\"n\">sel</span> <span class=\"n\">s</span> <span class=\"n\">n₂</span> <span class=\"bp\">=</span> <span class=\"n\">none</span>\n  <span class=\"bp\">|</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">enumerate_eq_none_of_sel</span> <span class=\"n\">sel</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">hm</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">sel</span> <span class=\"n\">s</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">enumerate_eq_none_of_sel</span> <span class=\"n\">sel</span> <span class=\"n\">hs</span>\n    <span class=\"bp\">·</span> <span class=\"n\">cases</span> <span class=\"n\">m</span>\n      <span class=\"n\">case</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.eq_zero_of_le_zero</span> <span class=\"n\">hm</span>\n        <span class=\"n\">contradiction</span>\n      <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"n\">m'</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">enumerate</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span>\n        <span class=\"k\">have</span> <span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m'</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.le_of_succ_le_succ</span> <span class=\"n\">hm</span>\n        <span class=\"n\">exact</span> <span class=\"n\">enumerate_eq_none</span> <span class=\"n\">h</span> <span class=\"n\">hm</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">set.enumerate_eq_none</span> <span class=\"n\">Set.enumerate_eq_none</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">enumerate_mem</span> <span class=\"o\">(</span><span class=\"n\">h_sel</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">sel</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"n\">a</span><span class=\"o\">},</span> <span class=\"n\">enumerate</span> <span class=\"n\">sel</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span>\n  <span class=\"bp\">|</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h_sel</span> <span class=\"n\">s</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">sel</span> <span class=\"n\">s</span>\n    <span class=\"n\">case</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">enumerate_eq_none_of_sel</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"n\">case</span> <span class=\"n\">some</span> <span class=\"n\">a'</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">enumerate</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">enumerate</span> <span class=\"n\">sel</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">a'</span><span class=\"o\">})</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">a'</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">enumerate_mem</span> <span class=\"n\">h_sel</span> <span class=\"n\">h'</span>\n        <span class=\"n\">this.left</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">set.enumerate_mem</span> <span class=\"n\">Set.enumerate_mem</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">enumerate_inj</span> <span class=\"o\">{</span><span class=\"n\">n₁</span> <span class=\"n\">n₂</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h_sel</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">sel</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">enumerate</span> <span class=\"n\">sel</span> <span class=\"n\">s</span> <span class=\"n\">n₁</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">enumerate</span> <span class=\"n\">sel</span> <span class=\"n\">s</span> <span class=\"n\">n₂</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n₁</span> <span class=\"bp\">=</span> <span class=\"n\">n₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">le_total</span> <span class=\"n\">n₁</span> <span class=\"n\">n₂</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">hn</span><span class=\"bp\">|</span><span class=\"n\">hn</span><span class=\"o\">)</span>\n  <span class=\"n\">on_goal</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">swap_var</span> <span class=\"n\">n₁</span> <span class=\"bp\">↔</span> <span class=\"n\">n₂</span><span class=\"o\">,</span> <span class=\"n\">h₁</span> <span class=\"bp\">↔</span> <span class=\"n\">h₂</span>\n  <span class=\"n\">all_goals</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">Nat.le.dest</span> <span class=\"n\">hn</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n    <span class=\"n\">clear</span> <span class=\"n\">hn</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n₁</span> <span class=\"n\">generalizing</span> <span class=\"n\">s</span>\n    <span class=\"n\">case</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">cases</span> <span class=\"n\">m</span>\n      <span class=\"n\">case</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n      <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">enumerate</span> <span class=\"n\">sel</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">})</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">enumerate</span><span class=\"o\">,</span> <span class=\"n\">Nat.zero_eq</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_eq</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h₂</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">enumerate_mem</span> <span class=\"n\">sel</span> <span class=\"n\">h_sel</span> <span class=\"n\">h'</span>\n        <span class=\"n\">simp_all</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_diff_singleton</span><span class=\"o\">]</span>\n    <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">sel</span> <span class=\"n\">s</span>\n      <span class=\"n\">case</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">self_eq_add_left</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_succ</span><span class=\"o\">,</span> <span class=\"n\">enumerate_eq_none_of_sel</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"n\">case</span> <span class=\"n\">some</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">self_eq_add_left</span><span class=\"o\">,</span> <span class=\"n\">enumerate</span><span class=\"o\">,</span> <span class=\"n\">Option.some.injEq</span><span class=\"o\">,</span>\n                       <span class=\"n\">Nat.add_succ</span><span class=\"o\">,</span> <span class=\"n\">enumerate._eq_2</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ.injEq</span><span class=\"o\">]</span>\n        <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span>\n\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">set.enumerate_inj</span> <span class=\"n\">Set.enumerate_inj</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Enumerate</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Set</span>\n</code></pre></div>",
        "id": 315973235,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671089464
    },
    {
        "content": "<p>yes, uglier is fine as long as you make a porting note whenever you uglified the proof relative to the lean 3 version</p>",
        "id": 315973407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671089582
    },
    {
        "content": "<p>OK, then I'll do that, thanks!</p>",
        "id": 315973690,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671089739
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1041\">https://github.com/leanprover-community/mathlib4/pull/1041</a> &lt;- I interpreted \"porting note\" simply as comments in the code.</p>",
        "id": 315976961,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671091303
    },
    {
        "content": "<p>\"porting note\" means \"put comments in the file and these comments should contain the string <code>porting note</code>\"</p>",
        "id": 315977236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671091423
    },
    {
        "content": "<p>Ideally where you change a proof you actually preserve the old proof in the comments, in a format that allows someone to try restoring it without having to go back to mathlib3port or mathlib3..</p>",
        "id": 315989382,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671095904
    },
    {
        "content": "<p>(No need to do this it is is \"minor\" --- only do this when you expect that once a major tactic is implemented the original proof should work.)</p>",
        "id": 315989453,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671095939
    },
    {
        "content": "<p>Noted. In this case, the change is not that big: instead of a <code>wlog n₁ ≤ n₁</code>I do a case on <code>le_total</code>, swap some arguments in one of the goals, and then keep essentially the same proof.</p>",
        "id": 315989935,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1671096117
    }
]