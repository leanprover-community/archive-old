[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/1276/files/f9f6d214c1005a38eb0790b94c7cbb781772a191#diff-082e27c2d8ada924681efc56ebfbf1aab3f294d31cbb251cb3f706fcf76b0197\">this PR</a> I was having some issues with the linter. As mo271 pointer out, if you don't rely on implicit coercion and change <code>f x</code> to <code>f.toRingEquiv x</code> you can solve the issues. That being said, using <code>.toRingEquiv</code> is a bit uglier in my opinion, and neither of us are sure how to go about handling this issue. Does anyone have any advice?</p>",
        "id": 320525868,
        "sender_full_name": "zbatt",
        "timestamp": 1673378108
    },
    {
        "content": "<p>The solution here is to implement the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fun_like\">docs#fun_like</a> boilerplate in Lean3 first</p>",
        "id": 320526246,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673378237
    },
    {
        "content": "<p>I think we should do a cleanup pass of every <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_coe_to_fun\">docs#has_coe_to_fun</a> instance in Lean 3 and create the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fun_like\">docs#fun_like</a> instances</p>",
        "id": 320526295,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673378258
    },
    {
        "content": "<p>In the meantime, is there a way I should handle this PR (either adding a type class to fix this specifically or something else) or should I wait until what you suggested happens?</p>",
        "id": 321392729,
        "sender_full_name": "zbatt",
        "timestamp": 1673719565
    },
    {
        "content": "<p>Of course if you want to move PRs like this forward, you can always try to construct the necessary stuff to lean3 yourself first :) But I understand that this is difficult here. I myself have tried to understand how <code>Hom</code>s should be coerced in the last days, and it has been a path of learning, but mostly a path of suffering. </p>\n<p>But if I now have a somewhat reliable picture about this (big if!), I think this is close to the issues we've been having with Algebra.Hom.GroupAction. As I understand, the preferred way to implement coercions for <code>Hom</code> structures is by extending them together with their corresponding <code>HomClass</code> classes, defining a <code>HomClass.toHom</code> function, implementing an instance of <code>Hom</code>s as <code>HomClass</code>es, and finally implementing a CoeTC instance that handles coercion from instances of <code>HomClass</code> (Look at Algebra.Ring.Equiv with <code>HomClass</code> = <code>RingEquivClass</code> for a close example of this). But, eh, yeah, this is complicated.</p>\n<p>Regardless, I think a first step is creating a <code>ring_invo_class</code> class in mathlib3 first, which does not exist, even though it should, since every time <code>ring_equiv</code> is extended, <code>ring_equiv_class</code> should be, too. I pushed a PR for this in <a href=\"https://github.com/leanprover-community/mathlib/pull/18175\">#18175</a>. I'll also push some changes which I think are good for the mathlib4 file.</p>",
        "id": 321410467,
        "sender_full_name": "Lukas Miaskiwskyi",
        "timestamp": 1673731767
    },
    {
        "content": "<p>Thanks so much!! This is a bit confusing, but at least big picture I have a much better idea of what's to happen. Out of curiosity, since your changes will enable RingInvo to be ported to mathlib4 successfully, will anything need to happen with the changes you made in mathlib3 in terms of  \"re-porting\" to mathlib4, or do we now just consider RingInvo done with the PR you put to mathlib3 \"back-ported\" so to speak</p>",
        "id": 321411502,
        "sender_full_name": "zbatt",
        "timestamp": 1673732679
    },
    {
        "content": "<p>I think it's good to first wait for the PR to mathlib3 to be merged, and then we can see how to process with the mathlib4 file. That being said, my changes have reintroduced another #lint error, which has problems with <code>RingInvo.map_eq_zero_iff</code> being @[simp]. So we're not done either way :D</p>",
        "id": 321412340,
        "sender_full_name": "Lukas Miaskiwskyi",
        "timestamp": 1673733397
    },
    {
        "content": "<p>oops I fixed the lint issue,  I can unfix it if you want to mark it as not ready to merge until the mathlib3 PR is done</p>",
        "id": 321413015,
        "sender_full_name": "zbatt",
        "timestamp": 1673734026
    }
]