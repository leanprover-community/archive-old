[
    {
        "content": "<p>It looks like <code>mfld_set_tac</code> is currently broken, and that's been blocking <a href=\"https://github.com/leanprover-community/mathlib4/pull/1052\">mathlib4#1052</a>. Would any of the tactic gurus please take a look at this?</p>\n<p>Speaking of <a href=\"https://github.com/leanprover-community/mathlib4/pull/1052\">mathlib4#1052</a>, some proofs that used to be golfed by <code>simp</code> in mathlib3 don't work in mathlib4, but <code>rw [the, lemmas, printed, by, tracing, the, simp]</code> work. I would've thought that <code>simp</code> should be strictly more powerful than <code>rw</code> in these kinds of cases, but I haven't gotten to the bottom of this.</p>",
        "id": 319713378,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1672975627
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416472\">@Winston Yin (尹維晨)</span> I see that the mathport base used by Chris three weeks ago<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/1052/commits/cf6c85053f1e55e8b9d4577d415360f7ed344bee\">https://github.com/leanprover-community/mathlib4/pull/1052/commits/cf6c85053f1e55e8b9d4577d415360f7ed344bee</a><br>\ndiffers substantially from current mathport output<br>\n<a href=\"https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/Logic/Equiv/LocalEquiv.lean\">https://github.com/leanprover-community/mathlib3port/blob/master/Mathbin/Logic/Equiv/LocalEquiv.lean</a><br>\nIn particular it's missing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">mfld_simps</span><span class=\"o\">]</span>\n  <span class=\"n\">id.def</span> <span class=\"n\">Function.comp.left_id</span> <span class=\"n\">Set.mem_setOf_eq</span> <span class=\"n\">Set.image_eq_empty</span> <span class=\"n\">Set.univ_inter</span> <span class=\"n\">Set.preimage_univ</span> <span class=\"n\">Set.prod_mk_mem_set_prod_eq</span> <span class=\"n\">and_true_iff</span> <span class=\"n\">Set.mem_univ</span> <span class=\"n\">Set.mem_image_of_mem</span> <span class=\"n\">true_and_iff</span> <span class=\"n\">Set.mem_inter_iff</span> <span class=\"n\">Set.mem_preimage</span> <span class=\"n\">Function.comp_apply</span> <span class=\"n\">Set.inter_subset_left</span> <span class=\"n\">Set.mem_prod</span> <span class=\"n\">Set.range_id</span> <span class=\"n\">Set.range_prod_map</span> <span class=\"n\">and_self_iff</span> <span class=\"n\">Set.mem_range_self</span> <span class=\"n\">eq_self_iff_true</span> <span class=\"n\">forall_const</span> <span class=\"n\">forall_true_iff</span> <span class=\"n\">Set.inter_univ</span> <span class=\"n\">Set.preimage_id</span> <span class=\"n\">Function.comp.right_id</span> <span class=\"n\">not_false_iff</span> <span class=\"n\">and_imp</span> <span class=\"n\">Set.prod_inter_prod</span> <span class=\"n\">Set.univ_prod_univ</span> <span class=\"n\">true_or_iff</span> <span class=\"n\">or_true_iff</span> <span class=\"n\">Prod.map_mk</span> <span class=\"n\">Set.preimage_inter</span> <span class=\"n\">heq_iff_eq</span> <span class=\"n\">Equiv.sigma_equiv_prod_apply</span> <span class=\"n\">Equiv.sigma_equiv_prod_symm_apply</span> <span class=\"n\">Subtype.coe_mk</span> <span class=\"n\">Equiv.to_fun_as_coe</span> <span class=\"n\">Equiv.inv_fun_as_coe</span>\n</code></pre></div>",
        "id": 319713864,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672976071
    },
    {
        "content": "<p>Having those lemmas not marked as <code>mfld_simps</code> would definitely make <code>mfld_set_tac</code> toothless!</p>",
        "id": 319713935,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672976154
    },
    {
        "content": "<p>Oh! I was wondering why the test file for <code>mfld_set_tac</code> had <code>Set.mem_setOf_eq</code> but there's no <code>mfld_simps</code> attribute on its definition. Thanks!</p>",
        "id": 319714213,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1672976404
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1052\">mathlib4#1052</a> now compiles, preserving old functionality!</p>",
        "id": 319720791,
        "sender_full_name": "Winston Yin (尹維晨)",
        "timestamp": 1672983112
    }
]