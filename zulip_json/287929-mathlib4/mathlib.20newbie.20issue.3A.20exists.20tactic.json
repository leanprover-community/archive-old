[
    {
        "content": "<p>Hi, I'm not new to theorem proving but am fairly new to Lean and just embarking on my first adventure with mathlib4, and have encountered something surprising:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mwe</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">exists</span> <span class=\"mi\">3</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>This code yields an error for \"exists 3\":  <code>tactic 'Lean.Parser.Tactic.existsi' has not been implemented</code><br>\nSince the exists tactic works fine with plan old Lean4, I'm guessing Mathlib overrides the tactic in some way, but I'm having trouble figuring out what to expect here. Am I using the mathlib4 version of exists incorrectly? Am I missing an import? Am I simply not supposed to use \"exists\" at all, and I should instead just apply Exists.intro (which works)?</p>\n<p>Beyond this specific question, where would I expect to find information on this sort of thing? I realize mathlib4 is experimental, etc., and I'm not expecting super-polished documentation or anything, but I'm having trouble figuring out where to start looking for stuff like this.</p>\n<p>Thanks in advance.</p>",
        "id": 280067568,
        "sender_full_name": "Colin Gordon",
        "timestamp": 1650892718
    },
    {
        "content": "<p>There's a fair number of mathlib3 tactics that haven't been implemented yet in mathlib4, but do have their syntax reserved. I'm guessing you ht one of those</p>",
        "id": 280068137,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1650893002
    },
    {
        "content": "<p>Mathlib is currently overwriting the built in exists syntax here: <a href=\"https://github.com/leanprover-community/mathlib4/blob/1b6c2fbe04b01ab498cf743d2f4725bc1bb3dcfb/Mathlib/Mathport/Syntax.lean#L182\">https://github.com/leanprover-community/mathlib4/blob/1b6c2fbe04b01ab498cf743d2f4725bc1bb3dcfb/Mathlib/Mathport/Syntax.lean#L182</a> but doesnt provide an elaborator for it yet which causes this error, I'm not entirely sure on the semantics of exists in Lean 3 so maybe there is actually work to be done here or its just a matter of removing this line becaus its a built in by now.</p>",
        "id": 280068434,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1650893129
    },
    {
        "content": "<p>It might also be worth trying to alias it to <code>use</code>: <a href=\"https://github.com/leanprover-community/mathlib4/blob/1b6c2fbe04b01ab498cf743d2f4725bc1bb3dcfb/Mathlib/Tactic/Use.lean\">https://github.com/leanprover-community/mathlib4/blob/1b6c2fbe04b01ab498cf743d2f4725bc1bb3dcfb/Mathlib/Tactic/Use.lean</a></p>",
        "id": 280068737,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1650893278
    },
    {
        "content": "<p>Thanks for the explanations and pointers!</p>",
        "id": 280069709,
        "sender_full_name": "Colin Gordon",
        "timestamp": 1650893729
    },
    {
        "content": "<p>Note that lean 4 is adding tactics in parallel with mathlib4, and there is often overlap, meaning that it is possible for a new lean 4 version to add support for a tactic that is already on the mathlib 4 todo list (which is almost certainly going to happen unless it's a brand new tactic or the lean 4 devs decided on a different syntax). In this case, we will either scratch it from the mathlib todo list if it's a full implementation, or keep it / add a <code>'</code> if the mathlib syntax is more generic.</p>",
        "id": 280109680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1650911190
    },
    {
        "content": "<p>In this case, I believe the mathlib syntax is more generic: it accepts <code>\"exists\" term,+</code> but the one in lean only accepts <code>\"exists\" term</code></p>",
        "id": 280109750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1650911237
    },
    {
        "content": "<p>we could certainly delegate to the lean tactic in the overlap case however</p>",
        "id": 280109775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1650911262
    },
    {
        "content": "<p>I don't think we can alias it to <code>use</code>. <code>use</code> has some known oddities which make it not a complete replacement for <code>existsi</code>, and mathlib in point of fact uses both tactics. If we wanted to remove one or the other, this would have to start as a mathlib refactor</p>",
        "id": 280109974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1650911362
    },
    {
        "content": "<p>This has been fixed in core: <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Extending.20.60exists.60.3F/near/280133936\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.E2.9C.94.20Extending.20.60exists.60.3F/near/280133936</a></p>",
        "id": 280145377,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1650930903
    }
]