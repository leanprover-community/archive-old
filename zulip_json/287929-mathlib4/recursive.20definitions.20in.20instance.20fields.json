[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/672\">mathlib4#672</a> I seem to be stuck on an issue of how to construct something recursively with pattern matching. In Lean 3, it looks like this, and I have included the tactic state at the relevant place (note the <code>_match</code>). In Lean 4, I had to add the extra arguments to match on, but I can't seem to refer recursively to the <code>conn</code> function, where in Lean 3 we could do this with <code>_match</code>.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Lean 3</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">is_order_connected</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">is_order_connected</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_trichotomous</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_order_connected</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lex</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">l₁</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">l₁</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span>     <span class=\"o\">[],</span>    <span class=\"n\">c</span><span class=\"o\">::</span><span class=\"n\">l₃</span><span class=\"o\">,</span> <span class=\"n\">nil</span>    <span class=\"o\">:=</span> <span class=\"n\">or.inr</span> <span class=\"n\">nil</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span>     <span class=\"o\">[],</span>    <span class=\"n\">c</span><span class=\"o\">::</span><span class=\"n\">l₃</span><span class=\"o\">,</span> <span class=\"n\">rel</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">or.inr</span> <span class=\"n\">nil</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span>     <span class=\"o\">[],</span>    <span class=\"n\">c</span><span class=\"o\">::</span><span class=\"n\">l₃</span><span class=\"o\">,</span> <span class=\"n\">cons</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">or.inr</span> <span class=\"n\">nil</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span>     <span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">::</span><span class=\"n\">l₃</span><span class=\"o\">,</span> <span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"n\">or.inl</span> <span class=\"n\">nil</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">l₁</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">::</span><span class=\"n\">l₃</span><span class=\"o\">,</span> <span class=\"n\">rel</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">is_order_connected.conn</span> <span class=\"n\">_</span> <span class=\"n\">b</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"n\">rel</span> <span class=\"n\">rel</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">l₁</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">::</span><span class=\"n\">l₃</span><span class=\"o\">,</span> <span class=\"n\">cons</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">trichotomous_of</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">ab</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">ab</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or.inl</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"n\">ab</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">      α : Type u,</span>\n<span class=\"cm\">      r : α → α → Prop,</span>\n<span class=\"cm\">      _inst_1 : is_order_connected α r,</span>\n<span class=\"cm\">      _inst_2 : is_trichotomous α r,</span>\n<span class=\"cm\">      l₁ : list α,</span>\n<span class=\"cm\">      _match : ∀ (_a b c : list α), lex r _a c → lex r _a b ∨ lex r b c,</span>\n<span class=\"cm\">      a : α,</span>\n<span class=\"cm\">      l₁ l₂ l₃ : list α,</span>\n<span class=\"cm\">      h : lex r l₁ l₃</span>\n<span class=\"cm\">      ⊢ lex r (a :: l₁) (a :: l₂) ∨ lex r (a :: l₂) (a :: l₃)</span>\n<span class=\"cm\">      -/</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">_match</span> <span class=\"n\">_</span> <span class=\"n\">l₂</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"n\">cons</span> <span class=\"n\">cons</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or.inr</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"n\">ab</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n  <span class=\"kd\">end</span>\n<span class=\"kd\">end</span><span class=\"o\">⟩</span>\n</code></pre></div>\n</div></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Lean 4</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">isOrderConnected</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">IsOrderConnected</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsTrichotomous</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsOrderConnected</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Lex</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">conn</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">l₃</span> <span class=\"n\">r'</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">l₁</span><span class=\"o\">,</span> <span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"n\">l₃</span><span class=\"o\">,</span> <span class=\"n\">r'</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">[],</span> <span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">l₃</span><span class=\"o\">,</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"n\">nil</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">[],</span> <span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">l₃</span><span class=\"o\">,</span> <span class=\"n\">rel</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"n\">nil</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">[],</span> <span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">l₃</span><span class=\"o\">,</span> <span class=\"n\">cons</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"n\">nil</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">l₃</span><span class=\"o\">,</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"n\">nil</span>\n    <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l₁</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">l₃</span><span class=\"o\">,</span> <span class=\"n\">rel</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">IsOrderConnected.conn</span> <span class=\"n\">_</span> <span class=\"n\">b</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"n\">rel</span> <span class=\"n\">rel</span>\n    <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l₁</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"n\">l₃</span><span class=\"o\">,</span> <span class=\"n\">cons</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">trichotomous_of</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">ab</span><span class=\"o\">)</span>\n      <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Or.inl</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"n\">ab</span><span class=\"o\">)</span>\n      <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"gr\">sorry</span> <span class=\"c1\">--(_match _ l₂ _ h).imp cons cons</span>\n      <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Or.inr</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"n\">ab</span><span class=\"o\">)</span>\n</code></pre></div>\n</div></div>",
        "id": 311408415,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669044861
    },
    {
        "content": "<p>FYI: asked this in the Lean 4 stream on a simplified example: <a href=\"#narrow/stream/270676-lean4/topic/recursive.20definition.20in.20structure.20fields\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/recursive.20definition.20in.20structure.20fields</a></p>",
        "id": 311421515,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669048675
    },
    {
        "content": "<p>You could use <code>let rec</code> I suppose. I don't know if this is the best approach though</p>",
        "id": 311428337,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669050762
    },
    {
        "content": "<p>yeah, I thought of that as a last resort, but surely there is (or at least needs to be) a better way, especially because in that case I have to write down the full type.</p>",
        "id": 311429597,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669051160
    },
    {
        "content": "<p>I guess the following isn't too verbose:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.le_refl</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.le_trans</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n.le_succ</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.le_refl</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.le_trans</span> <span class=\"o\">(</span><span class=\"n\">_example</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n.le_succ</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Bar</span> <span class=\"o\">:=</span>\n  <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myBar</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"n\">where</span>\n  <span class=\"n\">bar</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">aux</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.le_refl</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.le_trans</span> <span class=\"o\">(</span><span class=\"n\">aux</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n.le_succ</span>\n  <span class=\"n\">aux</span>\n</code></pre></div>",
        "id": 311430994,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669051647
    },
    {
        "content": "<p>but I agree that there should be a better way to do this.</p>",
        "id": 311431019,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669051663
    },
    {
        "content": "<p>In <em>this</em> case it's not too verbose, but if Lean can't infer the type of <code>aux</code> and it's relatively painful to write, then it gets silly.</p>",
        "id": 311431532,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669051822
    },
    {
        "content": "<p>That being said, it can infer the type in my situation as well.</p>",
        "id": 311431853,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669051930
    },
    {
        "content": "<p>Note that this works as well</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.le_refl</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.le_trans</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n.le_succ</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.le_refl</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.le_trans</span> <span class=\"o\">(</span><span class=\"n\">_example</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n.le_succ</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Bar</span> <span class=\"o\">:=</span>\n  <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myBar</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"n\">where</span>\n  <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">aux</span> <span class=\"n\">where</span>\n  <span class=\"n\">aux</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.le_refl</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.le_trans</span> <span class=\"o\">(</span><span class=\"n\">aux</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n.le_succ</span>\n</code></pre></div>",
        "id": 311431992,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669051970
    },
    {
        "content": "<p>and I suppose that's better for the issue you brought up</p>",
        "id": 311432260,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669052054
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/recursive.20definitions.20in.20instance.20fields/near/311431532\">said</a>:</p>\n<blockquote>\n<p>In <em>this</em> case it's not too verbose, but if Lean can't infer the type of <code>aux</code> and it's relatively painful to write, then it gets silly.</p>\n</blockquote>\n<p>shouldn't it always be able to infer the type given that it is used right afterwards as a value for a field where the type is known?</p>",
        "id": 311435843,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1669053275
    },
    {
        "content": "<p>But doesn't it have to <del>parse</del> elaborate the <code>let</code> binding first? I thought that's why Adam's second solution would be better in general.</p>",
        "id": 311436201,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669053340
    },
    {
        "content": "<p>Not necessarily, the elaboration procedure can always \"yield\" back to the next highe relaborator and let it do some more work before continuing with its own elaboration later on in hopes that more information (such as the type) might be available. While I am not sure that this is the case here it is very much a possiblity.</p>",
        "id": 311436563,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1669053468
    },
    {
        "content": "<p>For example you can use <code>sorry</code> in the let here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myBar</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"n\">where</span>\n  <span class=\"n\">bar</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">aux</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">aux</span>\n</code></pre></div>\n<p>in which case it is impossible for lean to derive the type of <code>aux</code> just from looking at the value because <code>sorry</code> already expects the type to be known so I would expect that this delayed elaboration (or some variation) is indeed what is happening here</p>",
        "id": 311436755,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1669053540
    },
    {
        "content": "<p>Regardless, it seems pretty silly that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">aux</span> <span class=\"n\">where</span>\n  <span class=\"n\">aux</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>works but </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>   <span class=\"n\">bar</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>doesn't</p>",
        "id": 311438918,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669054247
    },
    {
        "content": "<p>ugh... this hack doesn't pass the <code>defLemma</code> linter (and hence also it wants a docstring so it doesn't pass <code>docBlame</code> either).</p>",
        "id": 311444311,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669056038
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I'm not sure how to proceed here.</p>",
        "id": 311445834,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669056574
    },
    {
        "content": "<p>The use of <code>_match</code> is a dirty hack in lean 3 to emulate <code>let rec</code></p>",
        "id": 311446262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669056706
    },
    {
        "content": "<p>okay, so do I just add <code>nolint</code>s?</p>",
        "id": 311446441,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669056766
    },
    {
        "content": "<p>what does the code look like?</p>",
        "id": 311446527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669056801
    },
    {
        "content": "<p>see <a href=\"https://github.com/leanprover-community/mathlib4/pull/672\">mathlib4#672</a>, the instances of <code>isOrderConnected</code>, <code>isTrichotomous</code> and <code>isAsymm</code>.</p>",
        "id": 311446748,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669056885
    },
    {
        "content": "<p>this is fixed in <a href=\"https://github.com/leanprover/lean4/pull/1866\">lean4#1866</a>, you can add these to the nolints file (not the <code>nolint</code> attribute) until then</p>",
        "id": 311455975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669059840
    }
]