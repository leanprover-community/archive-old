[
    {
        "content": "<p>As I've kind of announced a while ago, I started trying to port <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> 's <code>rcases</code> tactic. <a href=\"https://github.com/javra/mathlib4/blob/rcases/Mathlib/Tactic/RCases.lean\">This</a> is what I have so far.</p>",
        "id": 265778399,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1640162330
    },
    {
        "content": "<p>Am I right thinking that the whole thing with <code>get_local_and_type</code> isn't really needed as long as we carry along the <code>FVarSubst</code> to prevent losing track of variables?</p>",
        "id": 265778536,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1640162419
    },
    {
        "content": "<p>Yes. I haven't looked into the new APIs for this but it looks like that should work</p>",
        "id": 265778955,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640162691
    },
    {
        "content": "<p>There's <code>substCore</code> which just returns the updated <code>FVarsSubst</code>, and I think <code>cases</code> does the same</p>",
        "id": 265779108,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1640162847
    },
    {
        "content": "<p>Looking at the code for <code>substCore</code> though, it only ever seems to insert into the <code>FVarsSubst</code>, not read from it</p>",
        "id": 265779122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640162871
    },
    {
        "content": "<p>In the common case I guess there is a lot of overwriting in that map?</p>",
        "id": 265779221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640162934
    },
    {
        "content": "<p>well, try it and see I guess. I'm sure leo &amp; co already put some thought into it, and <code>rcases</code> just delegates to those functions</p>",
        "id": 265779356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640163018
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/rcases/near/265779221\">said</a>:</p>\n<blockquote>\n<p>In the common case I guess there is a lot of overwriting in that map?</p>\n</blockquote>\n<p>Yes, it's usually only read if we want to correlate an \"old\" fvarId to a \"new\" one after the substitution</p>",
        "id": 265783971,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1640165885
    },
    {
        "content": "<p>Seems to me as if compared to Lean 3 it's now become easier to use all of these things in <code>MetaM</code> instead of <code>TacticM</code>, that's also quite a change</p>",
        "id": 265784092,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1640165972
    },
    {
        "content": "<p>Yes, all the bulk work should be done in <code>MetaM</code></p>",
        "id": 265784387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640166134
    },
    {
        "content": "<p>Or maybe <code>TermElabM</code> for some tactics</p>",
        "id": 265784419,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640166153
    },
    {
        "content": "<p><code>TacticM</code> is mostly only for interactive / frontend tactics</p>",
        "id": 265784473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640166200
    },
    {
        "content": "<p><code>rcases</code> is done in <a href=\"https://github.com/leanprover-community/mathlib4/pull/182\">mathlib4#182</a> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 270883272,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644144377
    },
    {
        "content": "<p>How do I call <code>rcases</code> from another tactic?</p>",
        "id": 312388455,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669490816
    },
    {
        "content": "<p>Do you want to call the \"frontend\", by generating the syntax (in which case you might be looking for <code>evalTactic</code>)?</p>",
        "id": 312389545,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669491547
    },
    {
        "content": "<p>Otherwise <code>Std.Tactic.RCases.rcases</code> looks like a reasonable entrypoint.</p>",
        "id": 312389704,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669491649
    },
    {
        "content": "<p>The original line was</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rcases</span> <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"n\">pexpr.of_expr</span> <span class=\"n\">temp_e</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"n\">rcases_patt.tuple</span> <span class=\"o\">([</span><span class=\"n\">new_nm</span><span class=\"o\">,</span> <span class=\"n\">eq_nm</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">rcases_patt.one</span><span class=\"o\">),</span>\n</code></pre></div>",
        "id": 312390880,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669492445
    },
    {
        "content": "<p>So, probably I need the second option.</p>",
        "id": 312390912,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669492472
    },
    {
        "content": "<p>What is the meaning of the arguments to <code>Std.Tactic.RCases.rcases</code>?</p>",
        "id": 312393761,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669494491
    },
    {
        "content": "<p>I can guess the meaning of <code>pat</code> (the <code>rcases</code> pattern) and <code>g</code> (main goal). What is <code>tgts</code>?</p>",
        "id": 312393827,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669494582
    },
    {
        "content": "<p>Targets I would guess?</p>",
        "id": 312394085,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1669494746
    },
    {
        "content": "<p>I see that it expects <code>Syntax</code> here and there. How do I convert an <code>Expr</code> to a <code>Syntax</code>?</p>",
        "id": 312394626,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669495214
    },
    {
        "content": "<p>Do I need to add it as a local constant first?</p>",
        "id": 312394685,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669495252
    },
    {
        "content": "<p>(used <code>Expr.toSyntax</code> and <code>Syntax.missing</code>)</p>",
        "id": 312397048,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669497252
    },
    {
        "content": "<p>(Side comment: I find the frequent need to interface with functions that want <code>Syntax</code> astonishingly painful. Your <code>simp</code> question on the other thread is another typical example.)</p>",
        "id": 312400312,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669500315
    },
    {
        "content": "<p>Would people except me be interested in having an extension of  the <code>rcases</code> syntax with a token to cause the obtained variable to be cleared immediately? I'm working with big structures of which I sometimes want to omit some variables but using <code>_</code> still clutters my contexts.</p>",
        "id": 317449783,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1671742349
    },
    {
        "content": "<p>This already is the case.</p>",
        "id": 317449900,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671742402
    },
    {
        "content": "<p>Nevermind, I'm thinking of Lean 3</p>",
        "id": 317450108,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671742476
    },
    {
        "content": "<p>Perfect <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> Just completely skipped that line in the doc, couldn't remember the syntax</p>",
        "id": 317450131,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1671742485
    },
    {
        "content": "<p>Wait, does this syntax work in Lean 4?</p>",
        "id": 317450235,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671742537
    },
    {
        "content": "<p>I really have to make <a class=\"stream\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4\">#mathlib4</a> bright red or something on my side. I keep wanting to give Lean 3 answers to Lean 4 questions.</p>",
        "id": 317450335,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671742564
    },
    {
        "content": "<p>It's in the doc of <code>Std.Tactic.RCases</code>, so I guess it works :D</p>",
        "id": 317451076,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1671742847
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/SkK_8hyYddSNavOfBOkgyPHt/brightred.png\">brightred.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/SkK_8hyYddSNavOfBOkgyPHt/brightred.png\" title=\"brightred.png\"><img src=\"/user_uploads/3121/SkK_8hyYddSNavOfBOkgyPHt/brightred.png\"></a></div>",
        "id": 317451940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671743206
    },
    {
        "content": "<p>I'm not sure I can make it blink, though!</p>",
        "id": 317452017,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671743242
    },
    {
        "content": "<p>In the app: cog in top right -&gt; manage streams, click on stream and change colour. I was confused by this when I saw someone else using Zulip and all their colours were different. They might be assigned randomly for each user?</p>",
        "id": 317452231,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671743321
    },
    {
        "content": "<p>Yeah, I know all that. I think they are random.</p>",
        "id": 317452291,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671743341
    }
]