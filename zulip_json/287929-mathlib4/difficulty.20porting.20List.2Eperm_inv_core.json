[
    {
        "content": "<p>I need to port <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/list/perm.lean#L490\">List.perm_inv_core</a> from mathlib3 to mathlib4. </p>\n<p>To do so, I have copied and pasted (and slightly cleaned up) the beginning of mathport's suggestion, adding</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[elabAsElim]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">perm_induction_on</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">[]</span> <span class=\"o\">[])</span>\n    <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"n\">l₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">l₂</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"n\">l₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">l₂</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">l₃</span><span class=\"o\">,</span> <span class=\"n\">l₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"n\">l₂</span> <span class=\"bp\">~</span> <span class=\"n\">l₃</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">l₂</span> <span class=\"n\">l₃</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">l₁</span> <span class=\"n\">l₃</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">P_refl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">l</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.recOn</span> <span class=\"n\">l</span> <span class=\"n\">h₁</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h₂</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"n\">Perm.refl</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"n\">ih</span>\n  <span class=\"n\">Perm.recOn</span> <span class=\"n\">p</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h₃</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">l</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">Perm.refl</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P_refl</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"bp\">@</span><span class=\"n\">h₄</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">perm_inv_core</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₂</span> <span class=\"bp\">→</span> <span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">r₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span> <span class=\"bp\">++</span> <span class=\"n\">r₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">e₁</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"n\">s₁</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">l₂</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₂</span> <span class=\"bp\">=</span> <span class=\"n\">s₂</span>\n  <span class=\"n\">intro</span> <span class=\"n\">p</span>\n  <span class=\"n\">revert</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">perm_induction_on</span> <span class=\"n\">p</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"n\">p</span> <span class=\"n\">IH</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"n\">p</span> <span class=\"n\">IH</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"n\">t₃</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"n\">IH₁</span> <span class=\"n\">IH₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>to the bottom of <code>Mathlib/Data/List/Perm.lean</code> in the <code>master</code> branch of mathlib4.</p>\n<p>However, the <code>refine'</code> tactic is producing a result that I haven't been able to understand. </p>\n<p>The goals become:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">refine'_1</span>\n<span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">s₁s₂</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n<span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">s₁</span> <span class=\"bp\">~</span> <span class=\"n\">s₂</span>\n<span class=\"n\">l₁</span><span class=\"bp\">✝</span><span class=\"n\">l₂</span><span class=\"bp\">✝</span><span class=\"n\">r₁</span><span class=\"bp\">✝</span><span class=\"n\">r₂</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">l₁</span><span class=\"bp\">✝</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₁</span><span class=\"bp\">✝</span> <span class=\"bp\">=</span> <span class=\"n\">s₁</span> <span class=\"bp\">→</span> <span class=\"n\">l₂</span><span class=\"bp\">✝</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₂</span><span class=\"bp\">✝</span> <span class=\"bp\">=</span> <span class=\"n\">s₂</span> <span class=\"bp\">→</span> <span class=\"n\">l₁</span><span class=\"bp\">✝</span> <span class=\"bp\">++</span> <span class=\"n\">r₁</span><span class=\"bp\">✝</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span><span class=\"bp\">✝</span> <span class=\"bp\">++</span> <span class=\"n\">r₂</span><span class=\"bp\">✝</span>\n<span class=\"n\">case</span> <span class=\"n\">refine'_2</span>\n<span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">s₁s₂</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n<span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">s₁</span> <span class=\"bp\">~</span> <span class=\"n\">s₂</span>\n<span class=\"n\">l₁</span><span class=\"bp\">✝</span><span class=\"n\">l₂</span><span class=\"bp\">✝</span><span class=\"n\">r₁</span><span class=\"bp\">✝</span><span class=\"n\">r₂</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">α</span> <span class=\"bp\">→</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n    <span class=\"n\">t₁</span> <span class=\"bp\">~</span> <span class=\"n\">t₂</span> <span class=\"bp\">→</span>\n      <span class=\"o\">(</span><span class=\"n\">l₁</span><span class=\"bp\">✝</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₁</span><span class=\"bp\">✝</span> <span class=\"bp\">=</span> <span class=\"n\">s₁</span> <span class=\"bp\">→</span> <span class=\"n\">l₂</span><span class=\"bp\">✝</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₂</span><span class=\"bp\">✝</span> <span class=\"bp\">=</span> <span class=\"n\">s₂</span> <span class=\"bp\">→</span> <span class=\"n\">l₁</span><span class=\"bp\">✝</span> <span class=\"bp\">++</span> <span class=\"n\">r₁</span><span class=\"bp\">✝</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span><span class=\"bp\">✝</span> <span class=\"bp\">++</span> <span class=\"n\">r₂</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n        <span class=\"n\">l₁</span><span class=\"bp\">✝</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₁</span><span class=\"bp\">✝</span> <span class=\"bp\">=</span> <span class=\"n\">s₁</span> <span class=\"bp\">→</span> <span class=\"n\">l₂</span><span class=\"bp\">✝</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₂</span><span class=\"bp\">✝</span> <span class=\"bp\">=</span> <span class=\"n\">s₂</span> <span class=\"bp\">→</span> <span class=\"n\">l₁</span><span class=\"bp\">✝</span> <span class=\"bp\">++</span> <span class=\"n\">r₁</span><span class=\"bp\">✝</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span><span class=\"bp\">✝</span> <span class=\"bp\">++</span> <span class=\"n\">r₂</span><span class=\"bp\">✝</span>\n<span class=\"n\">case</span> <span class=\"n\">refine'_3</span>\n<span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">s₁s₂</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n<span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">s₁</span> <span class=\"bp\">~</span> <span class=\"n\">s₂</span>\n<span class=\"n\">l₁</span><span class=\"bp\">✝</span><span class=\"n\">l₂</span><span class=\"bp\">✝</span><span class=\"n\">r₁</span><span class=\"bp\">✝</span><span class=\"n\">r₂</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">α</span> <span class=\"bp\">→</span>\n  <span class=\"n\">α</span> <span class=\"bp\">→</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n      <span class=\"n\">t₁</span> <span class=\"bp\">~</span> <span class=\"n\">t₂</span> <span class=\"bp\">→</span>\n        <span class=\"o\">(</span><span class=\"n\">l₁</span><span class=\"bp\">✝</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₁</span><span class=\"bp\">✝</span> <span class=\"bp\">=</span> <span class=\"n\">s₁</span> <span class=\"bp\">→</span> <span class=\"n\">l₂</span><span class=\"bp\">✝</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₂</span><span class=\"bp\">✝</span> <span class=\"bp\">=</span> <span class=\"n\">s₂</span> <span class=\"bp\">→</span> <span class=\"n\">l₁</span><span class=\"bp\">✝</span> <span class=\"bp\">++</span> <span class=\"n\">r₁</span><span class=\"bp\">✝</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span><span class=\"bp\">✝</span> <span class=\"bp\">++</span> <span class=\"n\">r₂</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n          <span class=\"n\">l₁</span><span class=\"bp\">✝</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₁</span><span class=\"bp\">✝</span> <span class=\"bp\">=</span> <span class=\"n\">s₁</span> <span class=\"bp\">→</span> <span class=\"n\">l₂</span><span class=\"bp\">✝</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₂</span><span class=\"bp\">✝</span> <span class=\"bp\">=</span> <span class=\"n\">s₂</span> <span class=\"bp\">→</span> <span class=\"n\">l₁</span><span class=\"bp\">✝</span> <span class=\"bp\">++</span> <span class=\"n\">r₁</span><span class=\"bp\">✝</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span><span class=\"bp\">✝</span> <span class=\"bp\">++</span> <span class=\"n\">r₂</span><span class=\"bp\">✝</span>\n<span class=\"n\">case</span> <span class=\"n\">refine'_4</span>\n<span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">s₁s₂</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n<span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">s₁</span> <span class=\"bp\">~</span> <span class=\"n\">s₂</span>\n<span class=\"n\">l₁</span><span class=\"bp\">✝</span><span class=\"n\">l₂</span><span class=\"bp\">✝</span><span class=\"n\">r₁</span><span class=\"bp\">✝</span><span class=\"n\">r₂</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"n\">t₃</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"n\">t₁</span> <span class=\"bp\">~</span> <span class=\"n\">t₂</span> <span class=\"bp\">→</span>\n    <span class=\"n\">t₂</span> <span class=\"bp\">~</span> <span class=\"n\">t₃</span> <span class=\"bp\">→</span>\n      <span class=\"o\">(</span><span class=\"n\">l₁</span><span class=\"bp\">✝</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₁</span><span class=\"bp\">✝</span> <span class=\"bp\">=</span> <span class=\"n\">s₁</span> <span class=\"bp\">→</span> <span class=\"n\">l₂</span><span class=\"bp\">✝</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₂</span><span class=\"bp\">✝</span> <span class=\"bp\">=</span> <span class=\"n\">s₂</span> <span class=\"bp\">→</span> <span class=\"n\">l₁</span><span class=\"bp\">✝</span> <span class=\"bp\">++</span> <span class=\"n\">r₁</span><span class=\"bp\">✝</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span><span class=\"bp\">✝</span> <span class=\"bp\">++</span> <span class=\"n\">r₂</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n        <span class=\"o\">(</span><span class=\"n\">l₁</span><span class=\"bp\">✝</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₁</span><span class=\"bp\">✝</span> <span class=\"bp\">=</span> <span class=\"n\">s₁</span> <span class=\"bp\">→</span> <span class=\"n\">l₂</span><span class=\"bp\">✝</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₂</span><span class=\"bp\">✝</span> <span class=\"bp\">=</span> <span class=\"n\">s₂</span> <span class=\"bp\">→</span> <span class=\"n\">l₁</span><span class=\"bp\">✝</span> <span class=\"bp\">++</span> <span class=\"n\">r₁</span><span class=\"bp\">✝</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span><span class=\"bp\">✝</span> <span class=\"bp\">++</span> <span class=\"n\">r₂</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n          <span class=\"n\">l₁</span><span class=\"bp\">✝</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₁</span><span class=\"bp\">✝</span> <span class=\"bp\">=</span> <span class=\"n\">s₁</span> <span class=\"bp\">→</span> <span class=\"n\">l₂</span><span class=\"bp\">✝</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₂</span><span class=\"bp\">✝</span> <span class=\"bp\">=</span> <span class=\"n\">s₂</span> <span class=\"bp\">→</span> <span class=\"n\">l₁</span><span class=\"bp\">✝</span> <span class=\"bp\">++</span> <span class=\"n\">r₁</span><span class=\"bp\">✝</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span><span class=\"bp\">✝</span> <span class=\"bp\">++</span> <span class=\"n\">r₂</span><span class=\"bp\">✝</span>\n</code></pre></div>\n<p>whereas in mathlib3 at the corresponding point they were </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">4</span> <span class=\"n\">goals</span>\n<span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">uu</span>\n<span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">s₁s₂</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">s₁</span> <span class=\"bp\">~</span> <span class=\"n\">s₂</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"n\">nil</span> <span class=\"bp\">→</span> <span class=\"n\">l₂</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₂</span> <span class=\"bp\">=</span> <span class=\"n\">nil</span> <span class=\"bp\">→</span> <span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">r₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span> <span class=\"bp\">++</span> <span class=\"n\">r₂</span>\n<span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">uu</span>\n<span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">s₁s₂</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">s₁</span> <span class=\"bp\">~</span> <span class=\"n\">s₂</span>\n<span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">t₁</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"n\">t₂</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">t₁</span> <span class=\"bp\">~</span> <span class=\"n\">t₂</span>\n<span class=\"n\">IH</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"n\">t₁</span> <span class=\"bp\">→</span> <span class=\"n\">l₂</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₂</span> <span class=\"bp\">=</span> <span class=\"n\">t₂</span> <span class=\"bp\">→</span> <span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">r₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span> <span class=\"bp\">++</span> <span class=\"n\">r₂</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">t₁</span> <span class=\"bp\">→</span> <span class=\"n\">l₂</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₂</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">t₂</span> <span class=\"bp\">→</span> <span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">r₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span> <span class=\"bp\">++</span> <span class=\"n\">r₂</span>\n<span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">uu</span>\n<span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">s₁s₂</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">s₁</span> <span class=\"bp\">~</span> <span class=\"n\">s₂</span>\n<span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">t₁</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"n\">t₂</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">t₁</span> <span class=\"bp\">~</span> <span class=\"n\">t₂</span>\n<span class=\"n\">IH</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"n\">t₁</span> <span class=\"bp\">→</span> <span class=\"n\">l₂</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₂</span> <span class=\"bp\">=</span> <span class=\"n\">t₂</span> <span class=\"bp\">→</span> <span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">r₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span> <span class=\"bp\">++</span> <span class=\"n\">r₂</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">t₁</span> <span class=\"bp\">→</span> <span class=\"n\">l₂</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₂</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">t₂</span> <span class=\"bp\">→</span> <span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">r₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span> <span class=\"bp\">++</span> <span class=\"n\">r₂</span>\n<span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">uu</span>\n<span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">s₁s₂</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">s₁</span> <span class=\"bp\">~</span> <span class=\"n\">s₂</span>\n<span class=\"n\">t₁</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"n\">t₂</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"n\">t₃</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"n\">p₁</span><span class=\"o\">:</span> <span class=\"n\">t₁</span> <span class=\"bp\">~</span> <span class=\"n\">t₂</span>\n<span class=\"n\">p₂</span><span class=\"o\">:</span> <span class=\"n\">t₂</span> <span class=\"bp\">~</span> <span class=\"n\">t₃</span>\n<span class=\"n\">IH₁</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"n\">t₁</span> <span class=\"bp\">→</span> <span class=\"n\">l₂</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₂</span> <span class=\"bp\">=</span> <span class=\"n\">t₂</span> <span class=\"bp\">→</span> <span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">r₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span> <span class=\"bp\">++</span> <span class=\"n\">r₂</span>\n<span class=\"n\">IH₂</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"n\">t₂</span> <span class=\"bp\">→</span> <span class=\"n\">l₂</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₂</span> <span class=\"bp\">=</span> <span class=\"n\">t₃</span> <span class=\"bp\">→</span> <span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">r₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span> <span class=\"bp\">++</span> <span class=\"n\">r₂</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"n\">t₁</span> <span class=\"bp\">→</span> <span class=\"n\">l₂</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₂</span> <span class=\"bp\">=</span> <span class=\"n\">t₃</span> <span class=\"bp\">→</span> <span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">r₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span> <span class=\"bp\">++</span> <span class=\"n\">r₂</span>\n</code></pre></div>\n<p>Can anyone assist me in working out how to successfully apply <code>perm_induction_on</code> here?</p>",
        "id": 299490718,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1663552799
    },
    {
        "content": "<p>It looks like implicit lambdas triggered just before the <code>perm_induction_on</code> application, meaning that it's actually doing <code>refine' fun {l1 l2 r1 r2} =&gt; perm_induction_on p _ (fun x t₁ t₂ p IH =&gt; _) (fun x y t₁ t₂ p IH =&gt; _) (fun t₁ t₂ t₃ p₁ p₂ IH₁ IH₂ =&gt; _)</code> which is not what you want</p>",
        "id": 299498915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663561223
    },
    {
        "content": "<p>You can disable implicit lambdas by using <code>@</code> before <code>perm_induction_on</code>, although that will also make the arguments to <code>perm_induction_on</code> explicit; possibly<code>@(perm_induction_on ..)</code> does what you want (EDIT: confirmed)</p>",
        "id": 299499447,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663561686
    },
    {
        "content": "<p>Thanks. That solves the tombstone issue. I now see that there are two separate problems: note that the goal in the first branch is now </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">refine'_1</span>\n<span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">s₁s₂</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n<span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">s₁</span> <span class=\"bp\">~</span> <span class=\"n\">s₂</span>\n<span class=\"n\">l₁l₂r₁r₂</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n<span class=\"n\">e₁</span><span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"n\">s₁</span>\n<span class=\"n\">e₂</span><span class=\"o\">:</span> <span class=\"n\">l₂</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₂</span> <span class=\"bp\">=</span> <span class=\"n\">s₂</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">r₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span> <span class=\"bp\">++</span> <span class=\"n\">r₂</span>\n</code></pre></div>\n<p>whereas in the mathlib3 version we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">e₁</span><span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"n\">nil</span>\n<span class=\"n\">e₂</span><span class=\"o\">:</span> <span class=\"n\">l₂</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₂</span> <span class=\"bp\">=</span> <span class=\"n\">nil</span>\n</code></pre></div>\n<p>(which is what we need to proceed!)</p>",
        "id": 299499961,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1663562274
    },
    {
        "content": "<p>I  don't understand that goal at all, it looks like you didn't do anything</p>",
        "id": 299500244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663562539
    },
    {
        "content": "<p>what's the actual term you used?</p>",
        "id": 299500253,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663562550
    },
    {
        "content": "<p>also <code>show_term</code> might help</p>",
        "id": 299500260,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663562571
    },
    {
        "content": "<p>maybe the motive didn't abstract over <code>s1</code> and <code>s2</code> correctly? <code>elabAsElim</code> is relatively untested for mathlib problems so there could be an elaboration bug</p>",
        "id": 299500436,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663562732
    },
    {
        "content": "<p><code>show_term\n    refine' @(perm_induction_on p _ (fun x t₁ t₂ p IH =&gt; _) (fun x y t₁ t₂ p IH =&gt; _) (fun t₁ t₂ t₃ p₁ p₂ IH₁ IH₂ =&gt; _))</code> prints:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">𝔗𝔯𝔶</span> <span class=\"bp\">𝔱𝔥𝔦𝔰</span><span class=\"o\">:</span> <span class=\"n\">refine</span>\n  <span class=\"bp\">@</span><span class=\"n\">perm_induction_on</span> <span class=\"n\">α</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"n\">s₁</span> <span class=\"bp\">→</span> <span class=\"n\">l₂</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">r₂</span> <span class=\"bp\">=</span> <span class=\"n\">s₂</span> <span class=\"bp\">→</span> <span class=\"n\">l₁</span> <span class=\"bp\">++</span> <span class=\"n\">r₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span> <span class=\"bp\">++</span> <span class=\"n\">r₂</span><span class=\"o\">)</span> <span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"n\">p</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">l₁</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@?</span><span class=\"n\">_</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"n\">p</span> <span class=\"n\">IH</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@?</span><span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"n\">p</span> <span class=\"n\">IH</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"n\">p</span> <span class=\"n\">IH</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@?</span><span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"n\">p</span> <span class=\"n\">IH</span><span class=\"o\">)</span>\n    <span class=\"k\">fun</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"n\">t₃</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"n\">IH₁</span> <span class=\"n\">IH₂</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@?</span><span class=\"n\">_</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"n\">t₃</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"n\">IH₁</span> <span class=\"n\">IH₂</span>\n</code></pre></div>",
        "id": 299500787,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1663563063
    },
    {
        "content": "<p>This is pretty trivial to separate from mathlib, so I'll create a Lean4 issue, as it seems it's an elaboration bug with <code>elabAsElim</code>.</p>",
        "id": 299501148,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1663563420
    }
]