[
    {
        "content": "<p>In core Lean 3, in <code>init.data.quot</code> we had</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">eqv_gen</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">rel</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">eqv_gen</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">eqv_gen</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">symm</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">eqv_gen</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">eqv_gen</span> <span class=\"n\">y</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">trans</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">eqv_gen</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">eqv_gen</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">eqv_gen</span> <span class=\"n\">x</span> <span class=\"n\">z</span>\n</code></pre></div>\n<p>(the equivalence relation generated by a relation) which kind of feels to me like a fundamental thing, so I was surprised I couldn't find it in Lean 4 even though we have <code>Quot</code> and <code>Quotient</code>. I looked for <code>EqvGen</code> and variants. Shall I just make my own and put it in <code>Mathlib.Init.Data.Quot</code> or did I miss it?</p>",
        "id": 308790774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668001867
    },
    {
        "content": "<p>Yes, it should go in <code>Mathlib.Init.Data.Quot</code>. The main reason it was front-loaded so early in lean 3 was because it is used in the statement of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quot.exact\">docs#quot.exact</a>, but this is basically a curiosity and not actually used anywhere to my knowledge.</p>",
        "id": 308791687,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668002124
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> has <code>EqvGen</code> in their PR</p>",
        "id": 308791944,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1668002187
    },
    {
        "content": "<p>It probably makes more sense to move it to <code>logic.relation</code> if we are in a refactoring mood</p>",
        "id": 308791957,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668002191
    },
    {
        "content": "<p>Nice -- I have <code>logic.relation</code> completely working apart from the last few lines which mention EqvGen, and I've just pulled into St Pancras International.</p>",
        "id": 308792132,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668002251
    },
    {
        "content": "<blockquote>\n<p>The main reason it was front-loaded so early in lean 3 was because it is used in the statement of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quot.exact\">docs#quot.exact</a>, but this is basically a curiosity and not actually used anywhere to my knowledge.</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.eq\">docs#quotient.eq</a> seems to be used <a href=\"https://github.com/leanprover-community/mathlib/search?q=quotient.eq\">a lot of times</a>, e.g. <a href=\"https://github.com/leanprover-community/mathlib/blob/4ee988db5cf978e135270a23ef268cabd58d40b2/src/group_theory/commensurable.lean#L56\">here</a>, and <a href=\"#narrow/stream/252551-graph-theory/topic/Decidability.20for.20connected.20components/near/304871277\">this recent question</a> also uses <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.decidable_eq\">docs#quotient.decidable_eq</a>. Does Lean 4 directly establish the setoid version without going through the eqv_gen version for general relations?</p>",
        "id": 308809597,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1668007206
    }
]