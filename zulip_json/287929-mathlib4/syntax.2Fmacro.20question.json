[
    {
        "content": "<p>Is there a way to do the following without introducing <code>foo</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">str</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">my_attribute</span><span class=\"o\">)</span> <span class=\"s2\">\"my_attribute\"</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">attr</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"my_macro\"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">attr</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">attr</span><span class=\"bp\">|</span> <span class=\"n\">my_attribute</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I want to write something like <code>x:(ppSpace str)?</code>, but that is not accepted.</p>",
        "id": 319252368,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1672769600
    },
    {
        "content": "<p>The type of <code>x</code> in <code>x:(ppSpace str)?</code> should give you a hint. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 319256606,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672771017
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">my_attribute</span><span class=\"o\">)</span> <span class=\"s2\">\"my_attribute\"</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">str</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">attr</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"my_macro\"</span> <span class=\"n\">x</span><span class=\"o\">:(</span><span class=\"n\">ppSpace</span> <span class=\"n\">str</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">attr</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">attr</span><span class=\"bp\">|</span> <span class=\"n\">my_attribute</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 319256610,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672771019
    },
    {
        "content": "<p>Thank you, that works. <br>\nTo be honest, I don't really understand the <code>$[$x]?</code> or <code>$[$y]*</code> in syntax patterns like this. But I'm glad it works now :-)</p>",
        "id": 319258099,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1672771493
    },
    {
        "content": "<p>We call it a splice it is described in the meta programming book <a href=\"http://github.com/arthurpaulino/lean4-metaprogramming-book/\">github.com/arthurpaulino/lean4-metaprogramming-book/</a></p>\n<p>If you know python it is a liiittle bit like a list comprehension. if $x is a list of syntax stuff you can use the <code>$[$y]*</code> to basically say \"for all elements in the list of syntax objects <code>y</code> construct the syntax that is inside of the <code>[]</code> and the <code>?</code> is similar but slightly different in the sense that <code>$x</code> is an optional thing so here the splice says \"if it was passed do the thing in the <code>[]</code> otherwise skip it.</p>",
        "id": 319264389,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1672773739
    }
]