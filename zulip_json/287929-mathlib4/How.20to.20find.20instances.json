[
    {
        "content": "<p>Are there docs for std4 or core?  In particular, I'd like to know how to find the instances of a class, which is something I would do in mathlib3 by finding the class in the docs and clicking \"Instances of this typeclass\".</p>\n<p><a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> Has a <code>Trans</code> instance for <code>&lt;</code> been implemented yet?</p>",
        "id": 310285199,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1668544055
    },
    {
        "content": "<p><code>#synth</code> answers the xy problem</p>",
        "id": 310285569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668544165
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Trans#doc\">docs4#Trans</a> - maybe?</p>",
        "id": 310285649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668544196
    },
    {
        "content": "<p>Yes, that list includes mathlib4 instances</p>",
        "id": 310285828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668544231
    },
    {
        "content": "<p>so the answer to your question is no, it only exists over <code>Nat</code> not a <code>Preorder</code></p>",
        "id": 310285898,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668544269
    },
    {
        "content": "<p>basically, mathlib4 doc-gen already includes all of core + std4</p>",
        "id": 310285961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668544294
    },
    {
        "content": "<p>Thanks, #synth and the core + std4 coverage of the mathlib4 docs were both new to me.</p>\n<p>I'll add the Trans instance for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Preorder#doc\">docs4#Preorder</a>; should it live in the same file (<code>Init.Algebra.Order</code>) as <code>Preorder</code> itself?</p>\n<p>What about the class <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Std.TransCmp#doc\">docs4#Std.TransCmp</a>?  Should it also have a Trans instance?</p>",
        "id": 310287126,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1668544674
    },
    {
        "content": "<p>(PS: why does std have this separate order hierarchy?)</p>",
        "id": 310287312,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1668544719
    },
    {
        "content": "<p>The <code>TransCmp</code> class is intended specifically for the Std data structures; it could have a <code>Trans</code> instance for <code>cmpLe</code> but is not intended to be general purpose</p>",
        "id": 310287760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668544854
    },
    {
        "content": "<p>I'm still on the fence about whether we can move <code>Preorder</code> / <code>PartialOrder</code> / <code>LinearOrder</code> to std4, similar to what we had in lean 3 core. It would really restrict the number of imports it can have</p>",
        "id": 310288000,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668544931
    },
    {
        "content": "<p>maybe things are better after <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> 's refactor of the algebraic hierarchy, or maybe it needs another refactor, but it is easier to invent a separate hierarchy on the side than import portions of the official one along with half of mathlib</p>",
        "id": 310288238,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668545025
    }
]