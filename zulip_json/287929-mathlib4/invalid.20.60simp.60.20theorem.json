[
    {
        "content": "<p>I just looked at the file <code>CategoryTheory/ConcreteCategory/Bundled.lean</code> and was surprised that the following MWE now fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"sd\">/-- `bundled` is a type bundled with a type class instance for that type. Only</span>\n<span class=\"sd\">the type class is exposed as a parameter. -/</span>\n<span class=\"c1\">-- @[nolint has_nonempty_instance]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Bundled</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"n\">where</span>\n  <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n  <span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeSort</span> <span class=\"o\">(</span><span class=\"n\">Bundled</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">Bundled.α</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">coe_mk</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">str</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Bundled.mk</span> <span class=\"n\">c</span> <span class=\"n\">α</span> <span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">CategoryTheory</span>\n</code></pre></div>\n<p>The error is <code>invalid simp theorem, equation is equivalent to α = α</code>. Indeed, <code>by dsimp</code> also proves the theorem. I believe mathlib3 has quite a few of these <code>coe_mk</code> lemmas. Are they just not needed anymore?</p>",
        "id": 306720115,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1666980758
    },
    {
        "content": "<p>Yes, Lean 4 eagerly expands the coe notation.  The <code>↑</code> etc. functions are no longer present in the elaborated term.</p>",
        "id": 306720757,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1666980939
    },
    {
        "content": "<p>So the <code>coe_mk</code> is no longer needed because <code>simp</code> reduces <code>(Bundled.mk α str).α</code> to <code>α</code> by itself.</p>",
        "id": 306721418,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1666981137
    }
]