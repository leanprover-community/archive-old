[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/pull/1135\">#1135</a> (and often elsewhere), the linter complains that some simp lemmas' LHS can be \"simplified\" to some other expression. For example, <code>normalize x</code> can be simp-ed to <code>x * ↑(normUnit x)</code>. But that doesn't look simpler, and it makes the lemmas a lot less meaningful. What should I do in these cases?</p>",
        "id": 318018031,
        "sender_full_name": "Winston Yin",
        "timestamp": 1672099835
    },
    {
        "content": "<p>This is presumably <a href=\"https://github.com/leanprover-community/mathlib4/pull/1135\">mathlib4#1135</a></p>",
        "id": 318019018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672100828
    },
    {
        "content": "<p>In general, I think changing the lemma statement (as in one of the suggestions of the linter) is rarely/never the right thing to do.<br>\nI would start by investigating why the lemmas it is using to simplify the LHS are simp lemmas.</p>",
        "id": 318049020,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672128035
    },
    {
        "content": "<p>(Changing the lemma statement would be sensible for a new lemma, but not for a lemma being ported.)</p>",
        "id": 318049039,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672128053
    },
    {
        "content": "<p>In this case, it's possible that coercion for a <code>GroupWithZeroHom</code> unfolds to something with <code>toFun</code> instead of <code>CoeFun.coe</code>.</p>",
        "id": 318049505,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1672128301
    },
    {
        "content": "<p>I don't understand how the situation wasn't the same in mathlib 3, given</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">normalize_apply</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">normalize</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">norm_unit</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">normalize_zero</span> <span class=\"o\">:</span> <span class=\"n\">normalize</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">normalize.map_zero</span>\n</code></pre></div>\n<p>and then a bunch more lemmas about <code>normalize</code>. How did these pass the <code>simp_nf</code> linter?</p>",
        "id": 318050362,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672128795
    },
    {
        "content": "<p>In any case, I don't think <code>normalize_apply</code> is a good simp lemma</p>",
        "id": 318050377,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672128811
    },
    {
        "content": "<p>And indeed <code>normalize</code> is really a <code>monoid_with_zero_hom</code>, but I don't see why that should matter...</p>",
        "id": 318050565,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672128935
    },
    {
        "content": "<p>Agreed. The coercion is a projection, but here we don't want to break the <code>normalize</code> abstraction. This is because the bundling of <code>normalize</code> is an implementation detail.</p>",
        "id": 318050636,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672128968
    },
    {
        "content": "<p>Probably, I was wrong about coercion. About <code>normalize_apply</code> in mathlib3, I think that <code>simp</code> applied lemmas in the reverse order.</p>",
        "id": 318050845,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1672129106
    },
    {
        "content": "<p>So, if at some level it can apply both <code>normalize_apply</code> and a more specific lemma about <code>normalize</code>, then it will apply the more specific lemma first.</p>",
        "id": 318050896,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1672129142
    },
    {
        "content": "<p>I guess we don't have the simp normal form linter in mathlib 3, but it would have fired if we'd had it?</p>",
        "id": 318051578,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1672129534
    },
    {
        "content": "<p>It definitely exists: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/lint/simp.lean#L170\">https://github.com/leanprover-community/mathlib/blob/master/src/tactic/lint/simp.lean#L170</a><br>\nI don't know whether it actually runs, or works.</p>",
        "id": 318051734,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672129599
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/simp.20normal.20form/near/318051578\">said</a>:</p>\n<blockquote>\n<p>I guess we don't have the simp normal form linter in mathlib 3, but it would have fired if we'd had it?</p>\n</blockquote>\n<p>Of course we do. I'm sure it bothered you (as any of us) more than once <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 318051829,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672129652
    },
    {
        "content": "<p>My memories of mathlib 3 are clearly rapidly fading <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 318054274,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1672130860
    },
    {
        "content": "<p>My understanding (from Mario explaining this to me a few weeks ago) is that the simplifier applies lemmas in what should be interpreted as a random order (which might not be preserved by the port), so if the simp set is not confluent then perhaps it's not impossible that the simp_nf linter might fire in mathlib4 but not in mathlib3?</p>",
        "id": 318101216,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672149443
    },
    {
        "content": "<p>Is the idea that the <code>simp_nf</code> linter runs with the simp set that's been extended with the new lemma, so if we're lucky(?) then it will trigger on itself, rather than the other lemma triggering?</p>",
        "id": 318125588,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672158777
    },
    {
        "content": "<p>The difference is not with the linter (it works in both mathlib 3 and 4!).  It is with simp itself.  In Lean 3, simp tried the lemmas in the order that they were declared/imported in (or in the reverse order, I can never remember).  In Lean 4, this is a bit more random (simp will still respect priorities though).</p>",
        "id": 318127303,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672159456
    },
    {
        "content": "<p>So, the proper fix in this case is to give the <code>normalize_apply</code> lemma a lower priority?</p>",
        "id": 318130174,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1672160710
    },
    {
        "content": "<p>That would replicate the Lean 3 behavior, yes.</p>",
        "id": 318130522,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672160853
    },
    {
        "content": "<p>How do I assign priority to simp lemmas in Lean4? <code>@[simp, priority 1100]</code> doesn't seem to work.</p>",
        "id": 318156517,
        "sender_full_name": "Winston Yin",
        "timestamp": 1672173511
    },
    {
        "content": "<p><code>@[simp 1100]</code></p>",
        "id": 318157410,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672174052
    },
    {
        "content": "<p>Does this work differently for declaration in <code>core</code>? Even modifying the priority in the Lean declaration the linter keeps complaining that the left hand side can be modified, by a <code>simp</code> lemma in core.</p>",
        "id": 318255492,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1672234133
    },
    {
        "content": "<p>What do people think of the following workflow to systematically deal with <code>simp_nf</code> linting errors? (This issue is holding up several PRs by now. We should resolve it.)</p>\n<ol>\n<li>make a copy of the statement, add <code>'</code> to the name</li>\n<li>in the original statement remove <code>@[simp]</code></li>\n<li>in the copy, simplify the LHS, to make the linter happy</li>\n<li>keep the <code>#align</code> on the original, but don't align the copy.</li>\n<li>add a <code>-- Porting note: simp_nf copy</code> just before the copied statement</li>\n</ol>",
        "id": 318397217,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672312388
    },
    {
        "content": "<p>LGTM</p>",
        "id": 318399561,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1672313302
    },
    {
        "content": "<p>I've been out of the loop since before Christmas and haven't seen these new issues. Is the problem with the linter or the lemmas, or are we not sure? What are examples of PRs being held up by this issue?</p>",
        "id": 318400309,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672313630
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1135\">mathlib4#1135</a>  by Winston (who started the thread) and  <a href=\"https://github.com/leanprover-community/mathlib4/pull/966\">mathlib4#966</a> (data.list.basic)</p>",
        "id": 318400812,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672313829
    },
    {
        "content": "<p>There's probably more.</p>",
        "id": 318400821,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672313834
    },
    {
        "content": "<p>Priming the names will bring you trouble, but, if you instead suffix <code>_simp_nf</code> or  something like that, it should never conflict</p>",
        "id": 318403813,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672315056
    },
    {
        "content": "<p>OK so I've had a look at the lint errors in data.list.basic and it seems to me that there are several possibly different issues with the declarations in this file, which <code>simpNF</code> is objecting to. I write them here just to summarise what the main problems seem to be currently.</p>\n<p>1) \"Left-hand side simplifies\". Example: <code>List.modify_head_modify_head</code>. The linter claims that the (lousy) move <code>simp only [List.modifyHead]</code> \"simplifies\" <code>List.modifyHead g (List.modifyHead f l)</code> to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">match</span>\n  <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span>\n</code></pre></div>\n<p>No doubt it does. I think that this one might be easy to fix: right now we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Apply `f` to the head of the list, if it exists. -/</span>\n<span class=\"kd\">@[simp, inline]</span> <span class=\"kd\">def</span> <span class=\"n\">modifyHead</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span>\n</code></pre></div>\n<p>and in Lean 3 the <code>simp</code> attribute attaches <code>simp</code> to the equation lemmas, but in Lean 4 it also attaches <code>simp</code> to the declaration itself, i.e. telling the simplifier \"unfold this to a match whenever you see it, please\". This is in <code>std</code>. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> should <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.modifyHead#doc\">docs4#List.modifyHead</a> be tagged <code>@[simp]</code> in Lean 4? Similar comments apply to <code>List.filterMap</code> -- this is tagged <code>@[specialize]</code> -- does this somehow imply <code>@[simp]</code>? The most confusing example is <code>List.find?</code> -- <code>simpNF</code> is claiming that <code>List.find? p (a :: l)</code> is being simplified to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">match</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.find</span><span class=\"bp\">?</span> <span class=\"n\">p</span> <span class=\"n\">l</span>\n</code></pre></div>\n<p>but it doen't seem that <code>List.find?</code> is tagged with <code>@[simp]</code> at all? Another example is <code>List.nthLe_repeat</code> which mentions <code>List.repeat</code>; this declaration is in mathlib4 in Data.List.Basic and tagged with <code>@[simp]</code>. If we're tagging <code>List.repeat</code> with <code>@[simp]</code> then it is true that no <code>simp</code> lemma should mention <code>List.repeat</code>, and <code>List.nthLe_repeat</code> does.</p>\n<p>2) \"Left-hand side does not simplify\". This we've seen before, and it might be a bug in the linter. Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">l.attach.map</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">l.map</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"bp\">?</span>\n</code></pre></div>\n<p>This works fine; the simplfier suggests <code>simp only [attach_map_coe']</code>. And yet <code>simpNF</code> reports on <code>List.attach_map_coe'</code> that the left hand side doesn't simplify. I have seen this issue before and reported it ; <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> suggested that in this case I ignore the issue and just nolint simpNF. Gabriel is that also true for this example? The declaration is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">attach_map_coe'</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">l.attach.map</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">//</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">l.map</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">attach</span><span class=\"o\">,</span> <span class=\"n\">map_pmap</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">pmap_eq_map</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>3) \"simp can prove this\". There are two of these. For <code>List.init_cons_of_ne_nil</code> it doesn't actually seem to be true: the claimed proof is the funny-looking <code>simp only [_private.Std.Data.List.Init.Lemmas.0.List.dropLast._eq_3]</code> so I'm wondering if this is a bug in the linter. For the other one, <code>List.indexOf_nil</code>, it is true that <code>simp</code> can prove it by the end of the file. I propose not tagging it with <code>simp</code>.</p>",
        "id": 318468183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672339077
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/simp.20normal.20form/near/318468183\">said</a>:</p>\n<blockquote>\n<p>I think that this one might be easy to fix: right now we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Apply `f` to the head of the list, if it exists. -/</span>\n<span class=\"kd\">@[simp, inline]</span> <span class=\"kd\">def</span> <span class=\"n\">modifyHead</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span>\n</code></pre></div>\n<p>and in Lean 3 the <code>simp</code> attribute attaches <code>simp</code> to the equation lemmas, but in Lean 4 it also attaches <code>simp</code> to the declaration itself, i.e. telling the simplifier \"unfold this to a match whenever you see it, please\". This is in <code>std</code>. <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> should <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.modifyHead#doc\">docs4#List.modifyHead</a> be tagged <code>@[simp]</code> in Lean 4?</p>\n</blockquote>\n<p>No it should not. Currently <code>@[simp]</code> on a nonrecursive function unfolds in this unhelpful way, differently to lean 3, and the correct way to reproduce the lean 3 behavior in lean 4 is to remove <code>@[simp]</code> from the definition and add it to the equation lemmas (writing them if necessary).</p>\n<blockquote>\n<p>Similar comments apply to <code>List.filterMap</code> -- this is tagged <code>@[specialize]</code> -- does this somehow imply <code>@[simp]</code>? </p>\n</blockquote>\n<p>No, <code>specialize</code> is an instruction for the compiler, it is unrelated to <code>simp</code>.</p>\n<blockquote>\n<p>The most confusing example is <code>List.find?</code> -- <code>simpNF</code> is claiming that <code>List.find? p (a :: l)</code> is being simplified to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">match</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.find</span><span class=\"bp\">?</span> <span class=\"n\">p</span> <span class=\"n\">l</span>\n</code></pre></div>\n<p>but it doen't seem that <code>List.find?</code> is tagged with <code>@[simp]</code> at all?</p>\n</blockquote>\n<p>Perhaps the attribute is being applied later? Or it is applied to an equation lemma.</p>\n<blockquote>\n<p>Another example is <code>List.nthLe_repeat</code> which mentions <code>List.repeat</code>; this declaration is in mathlib4 in Data.List.Basic and tagged with <code>@[simp]</code>. If we're tagging <code>List.repeat</code> with <code>@[simp]</code> then it is true that no <code>simp</code> lemma should mention <code>List.repeat</code>, and <code>List.nthLe_repeat</code> does.</p>\n</blockquote>\n<p>With <code>List.repeat</code>, I'm not sure if we should set up the simp lemmas so that <code>repeat</code> immediately unfolds to <code>replicate</code> and then <code>replicate</code> has all the useful lemmas, or whether <code>repeat</code> should not unfold unconditionally but instead it has parallel lemmas to <code>replicate</code>, tagged with <code>@[simp]</code> in the same places.</p>\n<blockquote>\n<p>3) \"simp can prove this\". There are two of these. For <code>List.init_cons_of_ne_nil</code> it doesn't actually seem to be true: the claimed proof is the funny-looking <code>simp only [_private.Std.Data.List.Init.Lemmas.0.List.dropLast._eq_3]</code> so I'm wondering if this is a bug in the linter. For the other one, <code>List.indexOf_nil</code>, it is true that <code>simp</code> can prove it by the end of the file. I propose not tagging it with <code>simp</code>.</p>\n</blockquote>\n<p>It seems that a private lemma got marked as a global <code>@[simp]</code> lemma somehow?</p>",
        "id": 318471016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672340204
    },
    {
        "content": "<p>What about trying a partial solution and changing later if it doesn't work?</p>\n<p>I tried to find the private lemma corresponding to <code>_private.Std.Data.List.Init.Lemmas.0.List.dropLast._eq_3</code> but I didn't find it :(</p>",
        "id": 318713332,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1672483017
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Does this mean that we should update <code>std</code> before continuing with fixing linting errors in <code>Data.List.Basic</code>?</p>",
        "id": 319202874,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672755037
    },
    {
        "content": "<p>when a bug occurs upstream, it's best not to block the downstream on that bug unless there is no other choice. In this case you can just use <code>attribute [-simp]</code> and or <code>nolint</code> to move on in <code>Data.List.Basic</code> (in addition to sending a PR to std if I don't get to it in time)</p>",
        "id": 319283862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672781717
    },
    {
        "content": "<p>Johan, Mario is probably busy with <a href=\"#narrow/stream/287929-mathlib4/topic/Scoped.20attribute/near/319162000\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Scoped.20attribute/near/319162000</a> which is indeed blocking.</p>",
        "id": 319284117,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1672781831
    },
    {
        "content": "<p><code>attribute [-simp]</code> only seems to apply locally.</p>",
        "id": 319415911,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672847050
    },
    {
        "content": "<p><code>attribute [-some_attribute]</code> means the same as Lean 3's <code>local attribute [-some_attribute]</code>, because we can't remove attribute globally anymore.</p>",
        "id": 319416120,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672847115
    },
    {
        "content": "<p>Here is one \"fun\" case.<br>\nStd has <code>@[simp] theorem reverse_map (f : α → β) (l : List α) : (l.map f).reverse = l.reverse.map f</code><br>\nwhile Mathlib has <code>@[simp] theorem map_reverse (f : α → β) (l : List α) : map f (reverse l) = reverse (map f l)</code></p>",
        "id": 319416147,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672847120
    },
    {
        "content": "<p>I don't want to start a discussion about which lemma is \"better\", except to say that in the context of porting mathlib, the better lemma is the one that proofs in the rest of mathlib expect to exist.</p>",
        "id": 319416437,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672847199
    },
    {
        "content": "<p>But it seems that <code>attribute [-simp]</code> is not a possible tool to work around the new lemma in Std, and in fact it cannot be worked around at all.</p>",
        "id": 319416500,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672847221
    },
    {
        "content": "<p>A bigger issue is the stuff related to <code>getLastD</code> because mathlib has no lemmas about that--I created <a href=\"https://github.com/leanprover/std4/pull/75\">https://github.com/leanprover/std4/pull/75</a></p>",
        "id": 319419374,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672848158
    },
    {
        "content": "<p>(\"Bigger\" because in the case of <code>reverse_map</code>/<code>map_reverse</code>, one could reasonably let Std \"win\" and hope there are no consequences for the rest of mathlib)</p>",
        "id": 319420039,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672848351
    },
    {
        "content": "<p>Otoh, a confluent simp set probably needs to be consistent wrt <code>map_&lt;foobar&gt;</code> / <code>&lt;foobar&gt;_map</code> for (almost) all values of <code>&lt;foobar&gt;</code> in mathlib.</p>",
        "id": 319420966,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672848600
    },
    {
        "content": "<p>Yeah it's not at all clear that there would be no consequences.</p>",
        "id": 319421155,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672848645
    },
    {
        "content": "<p>Std is supposed to be non-opinionated, right?  It seems to me that the non-opinionated choice when an attribute is debatable is for Std not to mark with that attribute, and then for a downstream library which wants the attribute to make an alias which does have the attribute.</p>",
        "id": 319422908,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672849188
    },
    {
        "content": "<p>Of course, that only works for lemmas, not for definitions.</p>",
        "id": 319424039,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672849474
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/pull/76\">https://github.com/leanprover/std4/pull/76</a> removes <code>@[simp]</code> from <code>reverse_map</code> in Std.</p>",
        "id": 319436176,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672853425
    },
    {
        "content": "<p>I hope these ad-hoc developments in Std aren't going to throw many wrenches in the wheels of the porting process. Because it's quite annoying.</p>",
        "id": 319471368,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672865697
    },
    {
        "content": "<p>It seems reasonable to switch from <code>reverse_map</code> to <code>map_reverse</code> here (it would be better if the other lemma was actually upstreamed though instead of just removing the simp attribute from <code>reverse_map</code>)</p>",
        "id": 319477729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672868303
    },
    {
        "content": "<p>I'm still unhappy about the <code>getLastD</code> issue, but I won't block the port on it. The obvious solution to not having enough lemmas about <code>getLastD</code> is to add more lemmas about <code>getLastD</code></p>",
        "id": 319477943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672868408
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/287929-mathlib4/topic/simp.20normal.20form/near/319416437\">said</a>:</p>\n<blockquote>\n<p>I don't want to start a discussion about which lemma is \"better\", except to say that in the context of porting mathlib, the better lemma is the one that proofs in the rest of mathlib expect to exist.</p>\n</blockquote>\n<p>I fully agree with this statement.  Now is not the time to refactor, also not in std4.  If std4 bites off pieces of mathlib, then those pieces need to remain mathlib-compatible until the port is done.</p>",
        "id": 319484595,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672871298
    },
    {
        "content": "<p>We can certainly do <code>xs.getLast h = xs.getLastD</code> <em>after</em> the port is done, but the std4 PR should come with a corresponding mathlib4 PR then.</p>",
        "id": 319484758,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672871388
    }
]