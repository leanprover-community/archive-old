[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp, to_additive coe_unzero]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">coe_unone</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">WithOne</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">unone</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"n\">WithBot.coe_unbot</span> <span class=\"n\">x</span> <span class=\"n\">hx</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">with_one.coe_unone</span> <span class=\"n\">WithOne.coe_unone</span>\n</code></pre></div>\n<p>says the autoporter. But should we also be doing </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">with_zero.coe_unzero</span> <span class=\"n\">WithZero.coe_unzero</span>\n</code></pre></div>\n<p>?</p>",
        "id": 313866505,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670197103
    },
    {
        "content": "<p>Yes</p>",
        "id": 313866518,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1670197123
    },
    {
        "content": "<p>thought so. And can someone write some code to flag all the times in mathlib where this hasn't happened? While they're at it, currently all <code>@[coe, to_additive]</code> and <code>@[norm_cast, to_additive]</code> are not affecting the additivised declarations either :-/</p>",
        "id": 313866617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670197204
    },
    {
        "content": "<p>And perhaps <code>@[elab_as_elim, to_additive]</code> too, although I don't know how to check this because I only half-understand <code>elab_as_elim</code> and it is apparently difficult to figure out if a declaration is tagged with an attribute.</p>",
        "id": 313866754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670197345
    },
    {
        "content": "<p>except for <code>simp</code> and <code>instance</code> all attributes are ignored by <code>to_additive</code></p>",
        "id": 313866794,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1670197403
    },
    {
        "content": "<p>So I conjecture that there are a bunch of errors in mathlib4 coming from these issues. I was about to merge <code>Algebra.Group.WithOne.Defs</code> but now I'm going through methodically fixing all of these things in this one file.</p>",
        "id": 313867063,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670197690
    },
    {
        "content": "<p>I would assumet that these will become more annoying later on, when proofs randomly break.</p>",
        "id": 313867099,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1670197757
    },
    {
        "content": "<p>if you find any more attributes that are used with <code>to_additive</code> either ping me or add an issue on github. In my current PR for <code>norm_cast</code> I've added todos for <code>symm</code> and <code>refl</code> already and I will add <code>elab_as_elim</code> later</p>",
        "id": 313867308,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1670197993
    },
    {
        "content": "<p>Should <code>unzero</code> be called <code>unZero</code>?</p>",
        "id": 313867546,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670198250
    },
    {
        "content": "<p>a bit off-topic, but the reason why it is non-trivial to add attributes is that they can do whatever they want, so it is up to the implementation of the attribute whether it has API to find out whether an declaration is flagged with that attribute. In the case of <code>simp</code> and <code>norm_cast</code> this is easy because one just copies the <code>SimpExtension</code> and this has said API, for <code>instance</code> I had to make a core issue (Leo added the API immediately), but for example for <code>symm</code> and <code>refl</code> this is very weird, because it does not provide a list/hashmap to lookup the names.</p>",
        "id": 313867603,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1670198288
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/to_additive.20and.20.23align/near/313867308\">said</a>:</p>\n<blockquote>\n<p>if you find any more attributes that are used with <code>to_additive</code> either ping me or add an issue on github. In my current PR for <code>norm_cast</code> I've added todos for <code>symm</code> and <code>refl</code> already and I will add <code>elab_as_elim</code> later</p>\n</blockquote>\n<p>pinging you to say that <code>coe</code> is the other one I've seen.</p>",
        "id": 313868094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670198673
    }
]