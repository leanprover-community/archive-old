[
    {
        "content": "<p><code>theorem smul_singleton : s • {b} = (· • b) '' s</code> is giving me </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">typeclass</span> <span class=\"kd\">instance</span> <span class=\"n\">problem</span> <span class=\"n\">is</span> <span class=\"n\">stuck</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">often</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">metavariables</span>\n  <span class=\"n\">Singleton</span> <span class=\"n\">β</span> <span class=\"bp\">?</span><span class=\"n\">m.3944</span>\n</code></pre></div>\n<p>The type should be <code>Set \\b</code>, right? If so, how do I tell Lean this?</p>",
        "id": 320584147,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1673406707
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"570929\">@Maxwell Thum</span> Please give imports or a link to the line in a branch.</p>",
        "id": 320584278,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673406838
    },
    {
        "content": "<p>The imports are</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Module.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Pairwise</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Pointwise.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.ByContra</span>\n</code></pre></div>",
        "id": 320584405,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1673406948
    },
    {
        "content": "<p>Here is a link to the line in a recent PR (I think) <a href=\"https://github.com/leanprover-community/mathlib4/pull/1473/commits/813e3d1c41c962f98567d495a03b5d5643c91d4c#diff-bb3fe98a6d8a82c76f7f4bd9412449f57c1e421d63c526705c14dab92432dc86R138\">https://github.com/leanprover-community/mathlib4/pull/1473/commits/813e3d1c41c962f98567d495a03b5d5643c91d4c#diff-bb3fe98a6d8a82c76f7f4bd9412449f57c1e421d63c526705c14dab92432dc86R138</a></p>",
        "id": 320584522,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1673407059
    },
    {
        "content": "<p>That link doesn't work, but this does:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/813e3d1c41c962f98567d495a03b5d5643c91d4c/Mathlib/Data/Set/Pointwise/Smul.lean#L138\">https://github.com/leanprover-community/mathlib4/blob/813e3d1c41c962f98567d495a03b5d5643c91d4c/Mathlib/Data/Set/Pointwise/Smul.lean#L138</a></p>",
        "id": 320584702,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673407147
    },
    {
        "content": "<p>However, it looks like that branch isn't up to date with any work you have done.  Can you please push so we can look at it in context?</p>",
        "id": 320585717,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673407599
    },
    {
        "content": "<p>Alternatively, provide a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (the imports, but also variable declarations, etc).</p>",
        "id": 320585812,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673407643
    },
    {
        "content": "<p>I don't think I've significantly changed the context, but I'll still push; I'll just be a minute.</p>",
        "id": 320585999,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1673407723
    },
    {
        "content": "<p>Okay, here it is. <a href=\"https://github.com/leanprover-community/mathlib4/blob/port/Data.Set.Pointwise.Smul/Mathlib/Data/Set/Pointwise/Smul.lean#L144\">https://github.com/leanprover-community/mathlib4/blob/port/Data.Set.Pointwise.Smul/Mathlib/Data/Set/Pointwise/Smul.lean#L144</a></p>",
        "id": 320586464,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1673407924
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"570929\">Maxwell Thum</span> <a href=\"#narrow/stream/287929-mathlib4/topic/typeclass.20instance.20problem.20with.20singleton/near/320585999\">said</a>:</p>\n<blockquote>\n<p>I don't think I've significantly changed the context</p>\n</blockquote>\n<p>(You changed <code>[HasSmul α β]</code> to <code>[SMul α β]</code>, which made the line make sense!)</p>",
        "id": 320586698,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673408018
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"570929\">Maxwell Thum</span> <a href=\"#narrow/stream/287929-mathlib4/topic/typeclass.20instance.20problem.20with.20singleton/near/320584147\">said</a>:</p>\n<blockquote>\n<p>The type should be <code>Set \\b</code>, right? If so, how do I tell Lean this?</p>\n</blockquote>\n<p>OK, yes.  You want</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">smul_singleton</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">•</span> <span class=\"o\">({</span><span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">•</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">''</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 320586857,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673408077
    },
    {
        "content": "<p>It's unfortunate that this change is needed, <del>but my guess is that it falls into a well-known class of behaviour where Lean 4 (unlike Lean 3) can't use one side of an equation to help elaborate the other.</del> (edit: see below)</p>",
        "id": 320587011,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673408154
    },
    {
        "content": "<p>Perfect; thank you!</p>",
        "id": 320587089,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1673408174
    },
    {
        "content": "<p>Actually, I don't think I've seen this problem before.  Does anyone want to try to make an import-free example?  This fails in Lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.NAry</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Defs</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Set.hasSmul</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Set.image2</span> <span class=\"n\">SMul.smul</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"bp\">•</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>and this works in Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.n_ary</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group.defs</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_smul</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Set.hasSmul</span> <span class=\"o\">:</span> <span class=\"n\">has_smul</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">set.image2</span> <span class=\"n\">has_smul.smul</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"bp\">•</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 320589048,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673408997
    },
    {
        "content": "<p>I notice that this works in Lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">SMul.smul</span> <span class=\"n\">s</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>So maybe the problem is our having added the extra layer of HSMul.  I'm really not convinced that change was a good idea ...</p>",
        "id": 320589541,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673409178
    }
]