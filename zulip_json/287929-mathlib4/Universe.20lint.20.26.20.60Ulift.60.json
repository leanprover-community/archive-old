[
    {
        "content": "<p>I'm getting a \"bad universe levels<code> lint for ported code for </code>Mathlib.Control.ULift` <a href=\"https://github.com/leanprover-community/mathlib4/pull/638\">mathlib4#638</a></p>\n<p>It's quite possible that the fix is to go through and set explicit universe annotations in all the <code>ULift</code> references &amp; also possible that this is a false positive and I'm not clear on which...</p>",
        "id": 311092815,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668914517
    },
    {
        "content": "<p>If I make all the references to <code>ULift.up</code> into <code>ULift.up.{u}</code> will that solve the lint?</p>",
        "id": 311093016,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668914736
    },
    {
        "content": "<p>do you have a MWE? (Use <code>#lint</code> to run the linter yourself at the end of a file.)</p>",
        "id": 311093725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668915546
    },
    {
        "content": "<p>linting reveals zero issues with the code as is...</p>",
        "id": 311094353,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668916273
    },
    {
        "content": "<p>I'll call <code>runLinter</code> explicitly.</p>",
        "id": 311094512,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668916462
    },
    {
        "content": "<p>I believe the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> would be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">ULift</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n\n<span class=\"sd\">/-- Functorial action. -/</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ULift</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ULift</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ULift.up</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a.down</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Embedding of pure values. -/</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">pure</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ULift</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">up</span>\n\n<span class=\"sd\">/-- Applicative sequencing. -/</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">seq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ULift</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">ULift</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ULift</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ULift.up</span> <span class=\"o\">(</span><span class=\"n\">f.down</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">())</span><span class=\"bp\">.</span>\n\n<span class=\"sd\">/-- Monadic bind. -/</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ULift</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ULift</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ULift</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"n\">f</span> <span class=\"n\">a.down</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">ULift</span> <span class=\"n\">where</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">ULift.map</span>\n  <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">ULift.pure</span>\n  <span class=\"n\">seq</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">ULift.seq</span>\n  <span class=\"n\">bind</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">ULift.bind</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">ULift</span>\n</code></pre></div>",
        "id": 311094611,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668916617
    },
    {
        "content": "<p>Again with <code>runLinter</code> locally lints pass.</p>",
        "id": 311095198,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668917234
    },
    {
        "content": "<p>only happens in CI</p>",
        "id": 311095216,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668917265
    },
    {
        "content": "<p>try <code>#lint</code> at the bottom of the file</p>",
        "id": 311095385,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668917511
    },
    {
        "content": "<p>you have a syntax error on the <code>seq</code> definition</p>",
        "id": 311095439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668917539
    },
    {
        "content": "<p>At the <strong>end</strong> of the file.</p>",
        "id": 311095445,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668917562
    },
    {
        "content": "<p>this shows the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.Lint</span>\n<span class=\"kd\">instance</span> <span class=\"n\">instMonadULift</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">ULift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">#</span><span class=\"n\">lint</span> <span class=\"n\">checkUnivs</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> The `checkUnivs` linter reports:</span>\n<span class=\"cm\">THE STATEMENTS OF THE FOLLOWING DECLARATIONS HAVE BAD UNIVERSE LEVELS.  -/</span>\n<span class=\"c1\">-- Mathlib.Test</span>\n<span class=\"k\">#check</span> <span class=\"n\">instMonadULift</span> <span class=\"c\">/-</span><span class=\"cm\"> universes [u, v] only occur together. -/</span>\n</code></pre></div>",
        "id": 311095467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668917618
    },
    {
        "content": "<p><code>seq</code> as defined typechecks...</p>\n<p>The code as ported through <code>mathlib3port</code> was</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Applicative sequencing. -/</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">seq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">PLift</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">PLift</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">PLift</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"n\">PLift.up</span> <span class=\"o\">(</span><span class=\"n\">f.down</span> <span class=\"n\">x.down</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but this didn't match the type signature of <code>seq</code> so I added the explicit <code>Unit → ULift α</code> to match the signature and adjusted the call to fit.</p>",
        "id": 311095935,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668918220
    },
    {
        "content": "<p>I didn't compile it but the <code>seq</code>  you wrote above has unbalanced parentheses and a trailing dot</p>",
        "id": 311095988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668918258
    },
    {
        "content": "<p>Oops, cut n paste issue -- corrected above.</p>",
        "id": 311096105,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668918461
    },
    {
        "content": "<p>Adding <code>.up.{u}</code> throughout removes the linting errors.</p>",
        "id": 311096157,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668918494
    },
    {
        "content": "<p>Fixed on std4 master. Merge with mathlib4 master and then <code>lake update</code> on your branch to clear the CI error on your branch <span class=\"user-mention\" data-user-id=\"542196\">@Arien Malec</span></p>",
        "id": 311098253,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668920797
    },
    {
        "content": "<p>Lints are breaking now...</p>",
        "id": 311098530,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668921135
    },
    {
        "content": "<p>whole build breaks...</p>",
        "id": 311098908,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668921610
    },
    {
        "content": "<p>I merged master and it seems to compile fine, so I pushed.</p>",
        "id": 311104778,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668928061
    },
    {
        "content": "<p>and then merged.</p>",
        "id": 311104960,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668928272
    }
]