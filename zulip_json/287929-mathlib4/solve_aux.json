[
    {
        "content": "<p>Do we already have a lean4 version of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `solve_aux type tac` synthesize an element of 'type' using tactic 'tac' -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">solve_aux</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tac</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>somewhere? I remember this is something that had duplicates at various times in mathlib3, so I don't want to write yet another one in mathlib4. :-)</p>",
        "id": 302563156,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665013847
    },
    {
        "content": "<p>I would guess no. But you can write one and put it in a well named location so no one else has to :)</p>",
        "id": 302563613,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665014179
    },
    {
        "content": "<p>it's a bit awkward since while the input is a <code>TacticM</code> the output might be <code>MetaM</code> or <code>TermElabM</code></p>",
        "id": 302563687,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665014233
    },
    {
        "content": "<p>Perhaps just</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">solve_aux</span> <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tac</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"n\">type</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">run</span> <span class=\"n\">m.mvarId</span><span class=\"bp\">!</span> <span class=\"n\">tac</span>\n  <span class=\"n\">return</span> <span class=\"n\">m</span>\n</code></pre></div>\n<p>would do.</p>\n<p>This differs slightly from the mathlib3 version, which captures the value produced by <code>tac</code> as well. Looking at how it is used, in 95% of cases this is just getting in the way. Options:</p>\n<ol>\n<li>reproduce the mathlib3 behaviour, which is simple enough by providing a variant of <code>run</code>.</li>\n<li>keep it simple, possibly backporting this change mathlib3 to avoid confusion.</li>\n</ol>\n<p>While we're at it, can we have a better name than <code>solve_aux</code>? (I'd leave a comment so people can still find it.) Perhaps something like <code>synthesizeUsing</code>?</p>",
        "id": 302578608,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665027490
    },
    {
        "content": "<p>I was never really a fan of the alphas, that was a late addition</p>",
        "id": 302578784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665027676
    },
    {
        "content": "<p>especially <code>repeat</code> returning a list of results seems like a bad idea</p>",
        "id": 302578806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665027699
    },
    {
        "content": "<p>you should return <code>m.instantiateMVars</code> though</p>",
        "id": 302578899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665027773
    },
    {
        "content": "<p>or at least <code>m.getAssignment</code></p>",
        "id": 302578907,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665027784
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/452\">mathlib4#452</a></p>",
        "id": 302581673,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665030741
    }
]