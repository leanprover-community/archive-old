[
    {
        "content": "<p>It seems like mathlib3 <code>to_additive</code> can translate <code>pow</code> to <code>nsmul</code> rather than <code>smul</code> (e.g. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.nsmul_subset_nsmul\">docs#set.nsmul_subset_nsmul</a>), but mathlib4 doesn't. Is that known?</p>",
        "id": 320792115,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673469280
    },
    {
        "content": "<p>Nevermind, I can't read</p>",
        "id": 320792208,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673469317
    },
    {
        "content": "<p>In Lean 3 we had the translations </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">pow</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nsmul</span>\n<span class=\"n\">npow</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nsmul</span>\n<span class=\"n\">zpow</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">zsmul</span>\n</code></pre></div>\n<p>This is a bit inconsistent, and in many files we translate <code>pow</code> to <code>smul</code>, so I tried changing the translation in mathlib4: <code>pow -&gt; smul</code>. This was probably a bad idea without backporting the change. Shall I change it back to <code>pow -&gt; nsmul</code> in mathlib4? <br>\nDo we have an idea whether we have more lemmas that we want to be called <code>nsmul</code> than lemmas that want to be called <code>smul</code>?</p>",
        "id": 320923101,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1673525814
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/1502\">mathlib4#1502</a> as WIP PR</p>",
        "id": 320924376,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1673526175
    },
    {
        "content": "<p>I woudl expect the vast majority want to be called <code>nsmul</code>, there are vanishingly few places where the <code>pow</code> operator is generalized to more than just <code>nat</code></p>",
        "id": 320926606,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673526892
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.has_pow\">docs#pi.has_pow</a> is the only one that comes to mind)</p>",
        "id": 320926644,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673526905
    },
    {
        "content": "<p>But we're not consistent in always calling <code>(n : ℕ) • _</code> <code>nsmul</code> and <code>_ ^ (n : ℕ) </code> <code>pow</code>. But you're probably right anyway, that the Lean 3 heuristic matches the current lemma names much better.</p>",
        "id": 320927676,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1673527236
    },
    {
        "content": "<p>My claim would be that that inconsistency is accidental not deliberate, and we should fix such cases when we find them</p>",
        "id": 320928238,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673527412
    },
    {
        "content": "<p>I'll try to flag such inconsistencies in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1502\">mathlib4#1502</a>. After that is merged, someone can go through the comments and change the names.</p>",
        "id": 320929027,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1673527667
    },
    {
        "content": "<p>I think I fixed all errors in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1502\">mathlib4#1502</a>, which is now ready for review</p>",
        "id": 323022875,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674481453
    }
]