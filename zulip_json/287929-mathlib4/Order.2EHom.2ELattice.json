[
    {
        "content": "<p>I started this PR (<a href=\"https://github.com/leanprover-community/mathlib4/pull/1636\">https://github.com/leanprover-community/mathlib4/pull/1636</a>) a bit ago, and I've been looking at the issues on and off over the last few days.</p>\n<p>I think most of the errors are coming from a bunch of the instances of <code>RelHomClass</code> not being inferred (starting around line 188). I've tried debugging the best I can, but someone who understand this stuff better than I should probably take a look.</p>\n<p>There are some totally unhelpful error messages like</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>type mismatch\n  map_top\nhas type\n  ∀ (f : F), ↑f ⊤ = ⊤ : Prop\nbut is expected to have type\n  ∀ (f : F), ↑f ⊤ = ⊤ : Prop\n</code></pre></div>\n<p>where if I hover over any given sub-expression all the types match up.</p>\n<p>This is one of the files in the direction of <code>Data.Complex.Basic</code>, but it doesn't have a lot of immediate descendants so it's not blocking all that much right now.</p>",
        "id": 323360873,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1674597398
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">2000</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n<span class=\"c1\">-- See note [lower instance priority]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"n\">BoundedLatticeHomClass.toBoundedOrderHomClass</span> <span class=\"o\">[</span><span class=\"n\">Lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Lattice</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">BoundedOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BoundedOrder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BoundedLatticeHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">BoundedOrderHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">OrderHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n<span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"o\">(</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_abstMVar.0</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n        <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_abstMVar.1</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n          <span class=\"o\">(</span><span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_abstMVar.2</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n            <span class=\"o\">(</span><span class=\"n\">x_3</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_abstMVar.3</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n              <span class=\"o\">(</span><span class=\"n\">x_4</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_abstMVar.4</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                <span class=\"o\">(</span><span class=\"n\">x_5</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_abstMVar.5</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                  <span class=\"o\">(</span><span class=\"n\">x_6</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_abstMVar.6</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                    <span class=\"o\">(</span><span class=\"n\">x_7</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_abstMVar.7</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                      <span class=\"o\">(</span><span class=\"n\">x_8</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_abstMVar.8</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                        <span class=\"o\">(</span><span class=\"n\">x_9</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_abstMVar.9</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                          <span class=\"o\">(</span><span class=\"n\">x_10</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_abstMVar.10</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                            <span class=\"o\">(</span><span class=\"n\">x_11</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_abstMVar.11</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                              <span class=\"o\">(</span><span class=\"n\">x_12</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_abstMVar.12</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                                <span class=\"o\">(</span><span class=\"n\">x_13</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_abstMVar.13</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                                  <span class=\"o\">(</span><span class=\"n\">x_14</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_abstMVar.14</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                                    <span class=\"o\">(</span><span class=\"n\">x_15</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_abstMVar.15</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                                      <span class=\"o\">(</span><span class=\"n\">x_16</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_abstMVar.16</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                                        <span class=\"o\">(</span><span class=\"n\">x_17</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_abstMVar.17</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                                          <span class=\"o\">(</span><span class=\"n\">x_18</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_abstMVar.18</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                                            <span class=\"n\">Bot</span>\n                                              <span class=\"o\">((</span><span class=\"n\">WithTop</span> <span class=\"n\">x_0</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                                                <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"n\">x_1</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                                                  <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"n\">x_2</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                                                    <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"n\">x_3</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                                                      <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"n\">x_4</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                                                        <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"n\">x_5</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                                                          <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"n\">x_6</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                                                            <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"n\">x_7</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                                                              <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"n\">x_8</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                                                                <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"n\">x_9</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                                                                  <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"n\">x_10</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                                                                    <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"n\">x_11</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                                                                      <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"n\">x_12</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                                                                        <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"n\">x_13</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                                                                          <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"n\">x_14</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                                                                            <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"n\">x_15</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                                                                              <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"n\">x_16</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                                                                                <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"n\">x_17</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                                                                                  <span class=\"o\">(</span><span class=\"n\">WithTop</span>\n                                                                                      <span class=\"n\">x_18</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Bot</span>\n        <span class=\"o\">((</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.21896</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n          <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.21897</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n            <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.21898</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n              <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.21899</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.21900</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                  <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.21901</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                    <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.21902</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                      <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.21903</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                        <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.21904</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                          <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.21905</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                            <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.21906</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                              <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.21907</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                                <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.21908</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                                  <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.21909</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                                    <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.21910</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                                      <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.21911</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                                        <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.21912</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                                          <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.21913</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                                            <span class=\"o\">(</span><span class=\"n\">WithTop</span>\n                                                <span class=\"bp\">?</span><span class=\"n\">m.21914</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Bot</span>\n        <span class=\"o\">((</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.21154</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n          <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.21896</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n            <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.21897</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n              <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.21898</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.21899</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                  <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.21900</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                    <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.21901</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                      <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.21902</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                        <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.21903</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                          <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.21904</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                            <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.21905</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                              <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.21906</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                                <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.21907</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                                  <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.21908</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                                    <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.21909</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                                      <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.21910</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                                        <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.21911</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span>\n                                          <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.21912</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.21913</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.21914</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"o\">(</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_abstMVar.0</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n        <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_abstMVar.1</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n          <span class=\"o\">(</span><span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_abstMVar.2</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n            <span class=\"o\">(</span><span class=\"n\">x_3</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_abstMVar.3</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 323362423,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674598001
    },
    {
        "content": "<p><a href=\"#narrow/stream/287929-mathlib4/topic/slow.20.60positivity.60/near/322871598\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/slow.20.60positivity.60/near/322871598</a></p>",
        "id": 323362541,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674598052
    },
    {
        "content": "<p>Just telling Lean how to do it works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"n\">BoundedLatticeHomClass.toBoundedOrderHomClass</span> <span class=\"o\">[</span><span class=\"n\">Lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Lattice</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">BoundedOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BoundedOrder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BoundedLatticeHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">BoundedOrderHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"k\">show</span> <span class=\"n\">OrderHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"k\">from</span> <span class=\"n\">SupHomClass.toOrderHomClass</span><span class=\"o\">,</span> <span class=\"o\">‹</span><span class=\"n\">BoundedLatticeHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">›</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 323363404,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674598437
    },
    {
        "content": "<p>This isn't going to end well either:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Lattice</span> <span class=\"n\">α</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Lattice</span> <span class=\"n\">α</span> <span class=\"n\">of</span> <span class=\"n\">Lattice</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Lattice</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Lattice</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">of</span> <span class=\"n\">Lattice</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Lattice</span>\n        <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Lattice</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"n\">of</span> <span class=\"n\">Lattice</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"n\">α</span><span class=\"o\">)))</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Lattice</span>\n        <span class=\"o\">(</span><span class=\"n\">WithTop</span>\n          <span class=\"o\">(</span><span class=\"n\">WithTop</span>\n            <span class=\"o\">(</span><span class=\"n\">WithTop</span>\n              <span class=\"n\">α</span><span class=\"o\">)))</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Lattice</span>\n        <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"n\">α</span><span class=\"o\">)))</span> <span class=\"n\">of</span> <span class=\"n\">Lattice</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"n\">α</span><span class=\"o\">))))</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Lattice</span>\n        <span class=\"o\">(</span><span class=\"n\">WithTop</span>\n          <span class=\"o\">(</span><span class=\"n\">WithTop</span>\n            <span class=\"o\">(</span><span class=\"n\">WithTop</span>\n              <span class=\"o\">(</span><span class=\"n\">WithTop</span>\n                <span class=\"n\">α</span><span class=\"o\">))))</span> <span class=\"n\">to</span> <span class=\"n\">subgoal</span> <span class=\"n\">Lattice</span>\n        <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"n\">α</span><span class=\"o\">))))</span> <span class=\"n\">of</span> <span class=\"n\">Lattice</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"n\">α</span><span class=\"o\">)))))</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[</span><span class=\"n\">resume</span><span class=\"o\">]</span> <span class=\"n\">propagating</span> <span class=\"n\">Lattice</span>\n</code></pre></div>",
        "id": 323363896,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674598609
    },
    {
        "content": "<p>Here's the behaviour on <code>master</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Hom.Basic</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">SupHomClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">&lt;|</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">HasSup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HasSup</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"kd\">extends</span>\n  <span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n  <span class=\"n\">map_sup</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">f</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">LatticeHomClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">&lt;|</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Lattice</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"kd\">extends</span>\n  <span class=\"n\">SupHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n  <span class=\"n\">map_inf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">f</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">BoundedLatticeHomClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">&lt;|</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Lattice</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">BoundedOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BoundedOrder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">LatticeHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n  <span class=\"n\">map_top</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">⊤</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span>\n  <span class=\"n\">map_bot</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">⊥</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"n\">SupHomClass.toOrderHomClass</span> <span class=\"o\">[</span><span class=\"n\">SemilatticeSup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SemilatticeSup</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">SupHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OrderHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"o\">‹</span><span class=\"n\">SupHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">›</span> <span class=\"k\">with</span>\n    <span class=\"n\">map_rel</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">sup_eq_right</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">map_sup</span><span class=\"o\">,</span> <span class=\"n\">sup_eq_right.2</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Lattice</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BoundedOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BoundedOrder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BoundedLatticeHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">OrderHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"n\">SupHomClass.toOrderHomClass</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">400</span> <span class=\"k\">in</span> <span class=\"c1\">-- to stop huge outputs crashing VS code</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Lattice</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BoundedOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BoundedOrder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BoundedLatticeHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">OrderHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"n\">inferInstance</span> <span class=\"c1\">-- loops</span>\n</code></pre></div>",
        "id": 323367618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674599930
    },
    {
        "content": "<p>People who understand these traces better than me can usually stare at the output below and instantly go \"it went wrong at precisely this point and that's your bad instance\".</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">💥</span> <span class=\"n\">RelHomClass</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">RelHomClass</span> <span class=\"n\">F</span> <span class=\"n\">_tc.2</span> <span class=\"n\">_tc.3</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">SupHomClass.toOrderHomClass</span> <span class=\"n\">to</span> <span class=\"n\">RelHomClass</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">WithTop.semilatticeSup</span> <span class=\"n\">to</span> <span class=\"n\">SemilatticeSup</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.2939</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">Prod.semilatticeSup</span> <span class=\"n\">to</span> <span class=\"n\">SemilatticeSup</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.2943</span> <span class=\"bp\">×</span> <span class=\"bp\">?</span><span class=\"n\">m.2944</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">WithTop.semilatticeSup</span> <span class=\"n\">to</span> <span class=\"n\">SemilatticeSup</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.2956</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">Prod.semilatticeSup</span> <span class=\"n\">to</span> <span class=\"n\">SemilatticeSup</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.2960</span> <span class=\"bp\">×</span> <span class=\"bp\">?</span><span class=\"n\">m.2961</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">OrderDual.semilatticeSup</span> <span class=\"n\">to</span> <span class=\"n\">SemilatticeSup</span> <span class=\"bp\">?</span><span class=\"n\">m.2965</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">WithTop.semilatticeInf</span> <span class=\"n\">to</span> <span class=\"n\">SemilatticeInf</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.2976</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">Prod.semilatticeInf</span> <span class=\"n\">to</span> <span class=\"n\">SemilatticeInf</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.2980</span> <span class=\"bp\">×</span> <span class=\"bp\">?</span><span class=\"n\">m.2981</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">OrderDual.semilatticeInf</span> <span class=\"n\">to</span> <span class=\"n\">SemilatticeInf</span> <span class=\"bp\">?</span><span class=\"n\">m.2985</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">WithBot.semilatticeInf</span> <span class=\"n\">to</span> <span class=\"n\">SemilatticeInf</span> <span class=\"o\">(</span><span class=\"n\">WithBot</span> <span class=\"bp\">?</span><span class=\"n\">m.2988</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">semilatticeInf</span> <span class=\"n\">to</span> <span class=\"n\">SemilatticeInf</span> <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.2991</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.2992</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">WithTop.semilatticeInf</span> <span class=\"n\">to</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.2991</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SemilatticeInf</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.3006</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">Prod.semilatticeInf</span> <span class=\"n\">to</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.2991</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SemilatticeInf</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.3015</span> <span class=\"n\">i</span> <span class=\"bp\">×</span> <span class=\"bp\">?</span><span class=\"n\">m.3016</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">OrderDual.semilatticeInf</span> <span class=\"n\">to</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.2991</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SemilatticeInf</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.3025</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">WithTop.semilatticeSup</span> <span class=\"n\">to</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.2991</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SemilatticeSup</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.3042</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">Prod.semilatticeSup</span> <span class=\"n\">to</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.2991</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SemilatticeSup</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.3051</span> <span class=\"n\">i</span> <span class=\"bp\">×</span> <span class=\"bp\">?</span><span class=\"n\">m.3052</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">OrderDual.semilatticeSup</span> <span class=\"n\">to</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.2991</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SemilatticeSup</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.3061</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">WithBot.semilatticeSup</span> <span class=\"n\">to</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.2991</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SemilatticeSup</span> <span class=\"o\">(</span><span class=\"n\">WithBot</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.3069</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">semilatticeSup</span> <span class=\"n\">to</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.2991</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SemilatticeSup</span> <span class=\"o\">((</span><span class=\"n\">i_1</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.3077</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.3078</span> <span class=\"n\">i</span> <span class=\"n\">i_1</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">WithTop.semilatticeSup</span> <span class=\"n\">to</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.2991</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">i_1</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.3077</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SemilatticeSup</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.3098</span> <span class=\"n\">i</span> <span class=\"n\">i_1</span><span class=\"o\">))</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">Prod.semilatticeSup</span> <span class=\"n\">to</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.2991</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">i_1</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.3077</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SemilatticeSup</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.3112</span> <span class=\"n\">i</span> <span class=\"n\">i_1</span> <span class=\"bp\">×</span> <span class=\"bp\">?</span><span class=\"n\">m.3113</span> <span class=\"n\">i</span> <span class=\"n\">i_1</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">OrderDual.semilatticeSup</span> <span class=\"n\">to</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.2991</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">i_1</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.3077</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SemilatticeSup</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.3127</span> <span class=\"n\">i</span> <span class=\"n\">i_1</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">WithTop.semilatticeInf</span> <span class=\"n\">to</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.2991</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">i_1</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.3077</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SemilatticeInf</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.3150</span> <span class=\"n\">i</span> <span class=\"n\">i_1</span><span class=\"o\">))</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">Prod.semilatticeInf</span> <span class=\"n\">to</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.2991</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">i_1</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.3077</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SemilatticeInf</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.3164</span> <span class=\"n\">i</span> <span class=\"n\">i_1</span> <span class=\"bp\">×</span> <span class=\"bp\">?</span><span class=\"n\">m.3165</span> <span class=\"n\">i</span> <span class=\"n\">i_1</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">OrderDual.semilatticeInf</span> <span class=\"n\">to</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.2991</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">i_1</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.3077</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SemilatticeInf</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.3179</span> <span class=\"n\">i</span> <span class=\"n\">i_1</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">WithBot.semilatticeInf</span> <span class=\"n\">to</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.2991</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">i_1</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.3077</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SemilatticeInf</span> <span class=\"o\">(</span><span class=\"n\">WithBot</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.3192</span> <span class=\"n\">i</span> <span class=\"n\">i_1</span><span class=\"o\">))</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">semilatticeInf</span> <span class=\"n\">to</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.2991</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n        <span class=\"o\">(</span><span class=\"n\">i_1</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.3077</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SemilatticeInf</span> <span class=\"o\">((</span><span class=\"n\">i_2</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.3205</span> <span class=\"n\">i</span> <span class=\"n\">i_1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.3206</span> <span class=\"n\">i</span> <span class=\"n\">i_1</span> <span class=\"n\">i_2</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">WithTop.semilatticeInf</span> <span class=\"n\">to</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.2991</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n        <span class=\"o\">(</span><span class=\"n\">i_1</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.3077</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">i_2</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.3205</span> <span class=\"n\">i</span> <span class=\"n\">i_1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SemilatticeInf</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.3232</span> <span class=\"n\">i</span> <span class=\"n\">i_1</span> <span class=\"n\">i_2</span><span class=\"o\">))</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">Prod.semilatticeInf</span> <span class=\"n\">to</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.2991</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n        <span class=\"o\">(</span><span class=\"n\">i_1</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.3077</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">i_2</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.3205</span> <span class=\"n\">i</span> <span class=\"n\">i_1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SemilatticeInf</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.3251</span> <span class=\"n\">i</span> <span class=\"n\">i_1</span> <span class=\"n\">i_2</span> <span class=\"bp\">×</span> <span class=\"bp\">?</span><span class=\"n\">m.3252</span> <span class=\"n\">i</span> <span class=\"n\">i_1</span> <span class=\"n\">i_2</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">OrderDual.semilatticeInf</span> <span class=\"n\">to</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.2991</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n        <span class=\"o\">(</span><span class=\"n\">i_1</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.3077</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">i_2</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.3205</span> <span class=\"n\">i</span> <span class=\"n\">i_1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SemilatticeInf</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.3271</span> <span class=\"n\">i</span> <span class=\"n\">i_1</span> <span class=\"n\">i_2</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">WithTop.semilatticeSup</span> <span class=\"n\">to</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.2991</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n        <span class=\"o\">(</span><span class=\"n\">i_1</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.3077</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">i_2</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.3205</span> <span class=\"n\">i</span> <span class=\"n\">i_1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SemilatticeSup</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.3300</span> <span class=\"n\">i</span> <span class=\"n\">i_1</span> <span class=\"n\">i_2</span><span class=\"o\">))</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">Prod.semilatticeSup</span> <span class=\"n\">to</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.2991</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n        <span class=\"o\">(</span><span class=\"n\">i_1</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.3077</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">i_2</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.3205</span> <span class=\"n\">i</span> <span class=\"n\">i_1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SemilatticeSup</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.3319</span> <span class=\"n\">i</span> <span class=\"n\">i_1</span> <span class=\"n\">i_2</span> <span class=\"bp\">×</span> <span class=\"bp\">?</span><span class=\"n\">m.3320</span> <span class=\"n\">i</span> <span class=\"n\">i_1</span> <span class=\"n\">i_2</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"n\">OrderDual.semilatticeSup</span> <span class=\"n\">to</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.2991</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n        <span class=\"o\">(</span><span class=\"n\">i_1</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.3077</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">i_2</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.3205</span> <span class=\"n\">i</span> <span class=\"n\">i_1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SemilatticeSup</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.3339</span> <span class=\"n\">i</span> <span class=\"n\">i_1</span> <span class=\"n\">i_2</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵈ</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">WithBot.semilatticeSup</span> <span class=\"n\">to</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.2991</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n        <span class=\"o\">(</span><span class=\"n\">i_1</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.3077</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">i_2</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.3205</span> <span class=\"n\">i</span> <span class=\"n\">i_1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SemilatticeSup</span> <span class=\"o\">(</span><span class=\"n\">WithBot</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.3357</span> <span class=\"n\">i</span> <span class=\"n\">i_1</span> <span class=\"n\">i_2</span><span class=\"o\">))</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">semilatticeSup</span> <span class=\"n\">to</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.2991</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n        <span class=\"o\">(</span><span class=\"n\">i_1</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.3077</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">i_2</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.3205</span> <span class=\"n\">i</span> <span class=\"n\">i_1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SemilatticeSup</span> <span class=\"o\">((</span><span class=\"n\">i_3</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.3375</span> <span class=\"n\">i</span> <span class=\"n\">i_1</span> <span class=\"n\">i_2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.3376</span> <span class=\"n\">i</span> <span class=\"n\">i_1</span> <span class=\"n\">i_2</span> <span class=\"n\">i_3</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">WithTop.semilatticeSup</span> <span class=\"n\">to</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.2991</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n        <span class=\"o\">(</span><span class=\"n\">i_1</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.3077</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n          <span class=\"o\">(</span><span class=\"n\">i_2</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.3205</span> <span class=\"n\">i</span> <span class=\"n\">i_1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">i_3</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.3375</span> <span class=\"n\">i</span> <span class=\"n\">i_1</span> <span class=\"n\">i_2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">SemilatticeSup</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.3408</span> <span class=\"n\">i</span> <span class=\"n\">i_1</span> <span class=\"n\">i_2</span> <span class=\"n\">i_3</span><span class=\"o\">))</span> <span class=\"bp\">▶</span>\n</code></pre></div>",
        "id": 323367975,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674600107
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> you're one of those people ;-)</p>",
        "id": 323368071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674600130
    },
    {
        "content": "<p>Is it this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">💥</span> <span class=\"n\">RelHomClass</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">RelHomClass</span> <span class=\"n\">F</span> <span class=\"n\">_tc.2</span> <span class=\"n\">_tc.3</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">instances</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">OrderIsoClass.toOrderHomClass</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">SupHomClass.toOrderHomClass</span><span class=\"o\">]</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">SupHomClass.toOrderHomClass</span> <span class=\"n\">to</span> <span class=\"n\">RelHomClass</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">RelHomClass</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span> <span class=\"bp\">≟</span> <span class=\"n\">RelHomClass</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span>\n    <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">SemilatticeSup</span> <span class=\"n\">_tc.0</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[</span><span class=\"n\">instances</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">Lattice.toSemilatticeSup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">semilatticeSup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">WithBot.semilatticeSup</span><span class=\"o\">,</span> <span class=\"n\">OrderDual.semilatticeSup</span><span class=\"o\">,</span> <span class=\"n\">Prod.semilatticeSup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">WithTop.semilatticeSup</span><span class=\"o\">]</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">WithTop.semilatticeSup</span> <span class=\"n\">to</span> <span class=\"n\">SemilatticeSup</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.2939</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">SemilatticeSup</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.2939</span><span class=\"o\">)</span> <span class=\"bp\">≟</span> <span class=\"n\">SemilatticeSup</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.2939</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 323368211,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674600208
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `RelHomClass F r s` asserts that `F` is a type of functions such that all `f : F`</span>\n<span class=\"sd\">satisfy `r a b → s (f a) (f b)`.</span>\n\n<span class=\"sd\">The relations `r` and `s` are `outParam`s since figuring them out from a goal is a higher-order</span>\n<span class=\"sd\">matching problem that Lean usually can't do unaided.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">class</span> <span class=\"n\">RelHomClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">&lt;|</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- A `RelHomClass` sends related elements to related elements -/</span>\n  <span class=\"n\">map_rel</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 323368508,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674600354
    },
    {
        "content": "<p>It looks like the <code>SemilatticeSup α</code> goal in <code>SupHomClass.toOrderHomClass</code> is not being treated like an out-param</p>",
        "id": 323368516,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674600359
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">SupHomClass.toOrderHomClass</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n  <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n    <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n      <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">SemilatticeSup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">SemilatticeSup</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">SupHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">OrderHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n</code></pre></div>\n<p>No mention of outparams there</p>",
        "id": 323368692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674600418
    },
    {
        "content": "<p>it looks like <a href=\"https://github.com/leanprover/lean4/pull/1852\">lean4#1852</a></p>",
        "id": 323368733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674600437
    },
    {
        "content": "<p>Can you explain more precisely what this means? I only have the vaguest concept of what an out-param is.</p>",
        "id": 323368814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674600480
    },
    {
        "content": "<p>this is all to do with when...unification?...tries to fill in a hole?</p>",
        "id": 323368999,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674600539
    },
    {
        "content": "<p>Specifically, we have the goal <code>OrderHomClass F ?α ?β</code> (where <code>?α, ?β</code> are forcibly made into metavariables because they are outparams) and want to find a solution to the typeclass problem which will determine <code>?α, ?β</code></p>",
        "id": 323369077,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674600570
    },
    {
        "content": "<p><code>SemilatticeSup α</code> does not have <code>α</code> as an outparam, so it would be a bad idea to do a typeclass search for <code>SemilatticeSup ?α</code> immediately, because that will enumerate all semilattices</p>",
        "id": 323369284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674600636
    },
    {
        "content": "<p>which it's doing, right?</p>",
        "id": 323369329,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674600655
    },
    {
        "content": "<p>right</p>",
        "id": 323369336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674600659
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"n\">SupHomClass.toOrderHomClass</span> <span class=\"o\">[</span><span class=\"n\">outparam</span> <span class=\"o\">(</span><span class=\"n\">SemilatticeSup</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">SemilatticeSup</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">SupHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OrderHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"o\">‹</span><span class=\"n\">SupHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">›</span> <span class=\"k\">with</span>\n    <span class=\"n\">map_rel</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">sup_eq_right</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">map_sup</span><span class=\"o\">,</span> <span class=\"n\">sup_eq_right.2</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">invalid binder annotation, type is not a class instance</span>\n<span class=\"cm\">  ?m.1448</span>\n<span class=\"cm\">use the command `set_option checkBinderAnnotations false` to disable the check</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 323369469,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674600713
    },
    {
        "content": "<p>The correct order of evaluation here is:</p>\n<ol>\n<li><code>SupHomClass F ?α ?β</code>, which solves <code>?α := α</code> and <code>?β := β</code></li>\n<li><code>SemilatticeSup α</code></li>\n<li><code>SemilatticeSup β</code></li>\n</ol>",
        "id": 323369483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674600715
    },
    {
        "content": "<p>you misspelled <code>outParam</code></p>",
        "id": 323369583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674600740
    },
    {
        "content": "<p>it would be great if that worked, if only as a workaround, but I think that outparam annotations are ignored on instances</p>",
        "id": 323369676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674600776
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"n\">SupHomClass.toOrderHomClass</span>  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">&lt;|</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">SemilatticeSup</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">SemilatticeSup</span> <span class=\"n\">β</span><span class=\"o\">)]</span>\n    <span class=\"o\">[</span><span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">SupHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">OrderHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"o\">‹</span><span class=\"n\">SupHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">›</span> <span class=\"k\">with</span>\n    <span class=\"n\">map_rel</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">sup_eq_right</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">map_sup</span><span class=\"o\">,</span> <span class=\"n\">sup_eq_right.2</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>This doesn't fix it</p>",
        "id": 323369932,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674600867
    },
    {
        "content": "<p>Gabriel's workaround is to use <code>{_ : SemilatticeSup α}</code> in the instance, but I think that won't work here because <code>SupHomClass</code> requires <code>HasSup</code> instead of <code>SemilatticeSup</code></p>",
        "id": 323370063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674600928
    },
    {
        "content": "<p>I don't understand why this is happening</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">💥</span> <span class=\"n\">RelHomClass</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">RelHomClass</span> <span class=\"n\">F</span> <span class=\"n\">_tc.2</span> <span class=\"n\">_tc.3</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">instances</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">OrderIsoClass.toOrderHomClass</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">SupHomClass.toOrderHomClass</span><span class=\"o\">]</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">SupHomClass.toOrderHomClass</span> <span class=\"n\">to</span> <span class=\"n\">RelHomClass</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">RelHomClass</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span> <span class=\"bp\">≟</span> <span class=\"n\">RelHomClass</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span>\n    <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">SemilatticeSup</span> <span class=\"n\">_tc.0</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[</span><span class=\"n\">instances</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">Lattice.toSemilatticeSup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">semilatticeSup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">WithBot.semilatticeSup</span><span class=\"o\">,</span> <span class=\"n\">OrderDual.semilatticeSup</span><span class=\"o\">,</span> <span class=\"n\">Prod.semilatticeSup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">WithTop.semilatticeSup</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>when we have this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">RelHomClass</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span> <span class=\"bp\">→</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">)}</span> <span class=\"bp\">→</span>\n    <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">)}</span> <span class=\"bp\">→</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"n\">u_3</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Oh! The outParam falls off in this trace:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">💥</span> <span class=\"n\">RelHomClass</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">RelHomClass</span> <span class=\"n\">F</span> <span class=\"n\">_tc.2</span> <span class=\"n\">_tc.3</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">instances</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">OrderIsoClass.toOrderHomClass</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">SupHomClass.toOrderHomClass</span><span class=\"o\">]</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">SupHomClass.toOrderHomClass</span> <span class=\"n\">to</span> <span class=\"n\">RelHomClass</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">RelHomClass</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span> <span class=\"bp\">≟</span> <span class=\"n\">RelHomClass</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">x_1</span>\n    <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">SemilatticeSup</span> <span class=\"n\">_tc.0</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[</span><span class=\"n\">instances</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">Lattice.toSemilatticeSup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">semilatticeSup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">WithBot.semilatticeSup</span><span class=\"o\">,</span> <span class=\"n\">OrderDual.semilatticeSup</span><span class=\"o\">,</span> <span class=\"n\">Prod.semilatticeSup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">WithTop.semilatticeSup</span><span class=\"o\">]</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">WithTop.semilatticeSup</span> <span class=\"n\">to</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">SemilatticeSup</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.2962</span><span class=\"o\">))</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">SemilatticeSup</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.2962</span><span class=\"o\">))</span> <span class=\"bp\">≟</span> <span class=\"n\">SemilatticeSup</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"bp\">?</span><span class=\"n\">m.2962</span><span class=\"o\">)</span>\n    <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">SemilatticeSup</span> <span class=\"n\">_tc.0</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[</span><span class=\"n\">instances</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">Lattice.toSemilatticeSup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">semilatticeSup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">WithBot.semilatticeSup</span><span class=\"o\">,</span> <span class=\"n\">OrderDual.semilatticeSup</span><span class=\"o\">,</span> <span class=\"n\">Prod.semilatticeSup</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">WithTop.semilatticeSup</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>The new goal was <code>outParam (SemilatticeSup _tc.0)</code> and then it became <code>SemilatticeSup _tc.0</code></p>",
        "id": 323370751,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674601211
    },
    {
        "content": "<p>outParam isn't really a tag on goals, it's a tag on arguments to a typeclass</p>",
        "id": 323370897,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674601274
    },
    {
        "content": "<p>when it shows up elsewhere it's just a thing to be unfolded</p>",
        "id": 323370933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674601297
    },
    {
        "content": "<p>What needs to be changed to make type class inference not try to solve <code>SemilatticeSup _tc.0</code>? Is this something which can be fixed in mathlib or does it need a change in core Lean? Do we need a new meme?</p>",
        "id": 323372189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674601888
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"n\">SupHomClass.toOrderHomClass</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">&lt;|</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">SemilatticeSup</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">SemilatticeSup</span> <span class=\"n\">β</span><span class=\"o\">)]</span>\n    <span class=\"o\">[</span><span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">SupHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">OrderHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"o\">‹</span><span class=\"n\">SupHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">›</span> <span class=\"k\">with</span>\n    <span class=\"n\">map_rel</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">sup_eq_right</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">map_sup</span><span class=\"o\">,</span> <span class=\"n\">sup_eq_right.2</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>This doesn't fix it.</p>",
        "id": 323374173,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674602848
    },
    {
        "content": "<p>It's a core lean issue. Maybe <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> has some ideas?</p>",
        "id": 323376164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674603994
    },
    {
        "content": "<p>I didn't look through the whole thread yet.  Does using <code>{}</code> instead of <code>[]</code> on the out-params help?  Note that <code>SupHomClass</code> should not be an outparam.</p>",
        "id": 323376367,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674604125
    }
]