[
    {
        "content": "<p>When writing </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive, simps]</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>It seems that<code>@[simps]</code> doesn't get the environment after <code>@[to_additive]</code> has finished running. <br>\n<code>@[to_additive]</code> runs <code>modifyEnv (ToAdditive.translations.addEntry · (src, tgt))</code>, but if <code>@[simps]</code> then runs <code>(ToAdditive.translations.getState env).find? src</code> it will return <code>none</code>.<br>\nIt does work as expected when writing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simps</span><span class=\"o\">]</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>Is there a way for <code>@[to_additive, simps]</code> to do the same?</p>",
        "id": 312953068,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669762120
    },
    {
        "content": "<p>I can post a MWE if desired.</p>",
        "id": 312953261,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669762205
    },
    {
        "content": "<p>Presumably this will need a fix to Lean 4, for which a MWE will be helpful.</p>",
        "id": 312958830,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669764212
    },
    {
        "content": "<p>Does it work the other way around with <code>@[simps, to_additive]</code>?</p>",
        "id": 312959863,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1669764714
    },
    {
        "content": "<p>Oh, I think I found the culprit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">initialize</span> <span class=\"n\">registerBuiltinAttribute</span> <span class=\"o\">{</span>\n    <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">to_additive</span>\n    <span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- Because `@[simp]` runs after compilation,</span>\n    <span class=\"c1\">-- we have to as well to be able to copy attributes correctly.</span>\n    <span class=\"n\">applicationTime</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">afterCompilation</span>\n  <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 312960990,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669765352
    },
    {
        "content": "<p>It still doesn't work if I put <code>applicationTime := .afterCompilation</code> also in <code>simpsAttr</code>. Is it possible that <code>ParametricAttribute</code> is added before <code>BuiltinAttribute</code>? Should be make <code>to_additive</code> not a <code>BuiltinAttribute</code>?</p>",
        "id": 312961662,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669765734
    },
    {
        "content": "<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Mathlib.test</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Lean.NameMapAttribute</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Exception</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span>\n\n<span class=\"n\">initialize</span> <span class=\"n\">dict</span> <span class=\"o\">:</span> <span class=\"n\">NameMapExtension</span> <span class=\"n\">Name</span> <span class=\"bp\">←</span> <span class=\"n\">registerNameMapExtension</span> <span class=\"n\">_</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">attr1</span><span class=\"o\">)</span> <span class=\"s2\">\"attr1\"</span> <span class=\"o\">:</span> <span class=\"n\">attr</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">attr2</span><span class=\"o\">)</span> <span class=\"s2\">\"attr2\"</span> <span class=\"o\">:</span> <span class=\"n\">attr</span>\n\n<span class=\"n\">initialize</span> <span class=\"n\">registerBuiltinAttribute</span> <span class=\"o\">{</span>\n    <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">attr1</span>\n    <span class=\"n\">descr</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span>\n    <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">src</span> <span class=\"n\">stx</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">attr</span><span class=\"bp\">|</span> <span class=\"n\">attr1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">modifyEnv</span> <span class=\"o\">(</span><span class=\"n\">dict.addEntry</span> <span class=\"bp\">·</span> <span class=\"o\">(</span><span class=\"n\">src</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">foo</span><span class=\"o\">))</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n    <span class=\"n\">applicationTime</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">afterCompilation</span> <span class=\"o\">}</span>\n\n<span class=\"n\">initialize</span> <span class=\"n\">attr2Attr</span> <span class=\"o\">:</span> <span class=\"n\">ParametricAttribute</span> <span class=\"n\">Name</span> <span class=\"bp\">←</span>\n  <span class=\"n\">registerParametricAttribute</span> <span class=\"o\">{</span>\n    <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">attr2</span>\n    <span class=\"n\">descr</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span><span class=\"o\">,</span>\n    <span class=\"n\">getParam</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">nm</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">attr</span><span class=\"bp\">|</span> <span class=\"n\">attr2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{(dict.getState (← getEnv)).find? nm}\"</span>\n      <span class=\"n\">return</span> <span class=\"bp\">`</span><span class=\"n\">bar</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n    <span class=\"n\">applicationTime</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">afterCompilation</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>then we get the following output:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.test</span>\n\n<span class=\"kd\">@[attr1, attr2]</span> <span class=\"c1\">-- none</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">@[attr2, attr1]</span> <span class=\"c1\">-- none</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">@[attr1]</span>\n<span class=\"kd\">def</span> <span class=\"n\">baz</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">attr2</span><span class=\"o\">]</span> <span class=\"n\">baz</span>  <span class=\"c1\">-- some (foo)</span>\n</code></pre></div>",
        "id": 312962059,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669765997
    },
    {
        "content": "<p>Oh, it looks like <code>registerParametricAttribute</code> completely ignores the <code>applicationTime</code> field...</p>",
        "id": 312962841,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1669766434
    }
]