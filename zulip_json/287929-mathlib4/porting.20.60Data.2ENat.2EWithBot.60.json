[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1255\">https://github.com/leanprover-community/mathlib4/pull/1255</a></p>\n<p>I'm trying to port data.nat.with_bot. The problem here seems to be that the tactic \"tauto\" is used. I thought because of <a href=\"https://github.com/leanprover-community/mathlib4/pull/1081\">https://github.com/leanprover-community/mathlib4/pull/1081</a> might be enough, but when I <code>import Mathlib.Tactic.Tauto</code> I the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">whnf'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">1000000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(after increasing the number of heartbeats).</p>\n<p>So is there something wrong with <code>tauto</code> and should I wait until that tactic has been improved or is there some way to proceed with the port of that file?</p>",
        "id": 318386122,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1672307854
    },
    {
        "content": "<p>You can try to prove the goals manually</p>",
        "id": 318388251,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1672308785
    },
    {
        "content": "<p>Maybe <code>show_term { tauto }</code> on the mathlib3 side can help</p>",
        "id": 318388311,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1672308823
    },
    {
        "content": "<p>good idea!<br>\n<code>show_term { tautology }</code> is giving </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"o\">{</span><span class=\"n\">mp</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">none</span> <span class=\"bp\">+</span> <span class=\"n\">none</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">option.no_confusion</span> <span class=\"n\">ᾰ</span><span class=\"o\">,</span>\n <span class=\"n\">mpr</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">none</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">none</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n          <span class=\"n\">ᾰ.dcases_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_left</span> <span class=\"n\">ᾰ_right</span> <span class=\"o\">:</span> <span class=\"n\">none</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">option.no_confusion</span> <span class=\"n\">ᾰ_left</span><span class=\"o\">)}</span>\n</code></pre></div>",
        "id": 318391121,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1672310016
    },
    {
        "content": "<p>Try doing a combination of <code>cases</code> and <code>refl</code>.</p>",
        "id": 318395650,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672311787
    },
    {
        "content": "<p>I managed to make the ported file work, <a href=\"https://github.com/leanprover-community/mathlib4/pull/1255/files\">https://github.com/leanprover-community/mathlib4/pull/1255/files</a>, but it is a bit ridiculous because there are things like this now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">·</span> <span class=\"n\">refine'</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Option.noConfusion</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">hl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Option.noConfusion</span> <span class=\"n\">hl.1</span>\n    <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">hr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">hr</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">hrl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Option.noConfusion</span> <span class=\"n\">hrl.1</span>\n      <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">hrr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">hrr</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">hrrl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Option.noConfusion</span> <span class=\"n\">hrrl.1</span>\n        <span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">hrrr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Option.noConfusion</span> <span class=\"n\">hrrr.1</span>\n</code></pre></div>\n<p>I tried to use <code>rcases</code> instead, but couldn't get it to work.  How can I make <code>rcases</code> it to keep splitting of the or's and then use  <code>exact Option.noConfusion h.1</code>?</p>",
        "id": 318958568,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1672651785
    },
    {
        "content": "<p>You could also try to throw Aesop at the goals. It's not a complete replacement for <code>tauto</code>, but in practice it often works.</p>",
        "id": 318983502,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1672662560
    },
    {
        "content": "<p>That worked, thanks!</p>",
        "id": 318985678,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1672663468
    }
]