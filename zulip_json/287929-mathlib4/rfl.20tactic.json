[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"443984\">@Newell Jensen</span>, I agree <code>relationAppM?</code> belongs higher up. <a href=\"https://github.com/leanprover-community/mathlib/pull/253\">#253</a> hasn't seen much progress recently; perhaps one solution is to make a mini-PR with just <code>relationAppM?</code> in some \"central\" location. You can then use it for your work, and <a href=\"https://github.com/leanprover-community/mathlib/pull/253\">#253</a> can be refactored to use it.</p>",
        "id": 299484347,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1663544666
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> from the current directory structure my suggestion would be to make a directory <code>Relation</code> in the <code>Tactic</code> folder and then within it that we could have <code>Symm.lean, Trans.lean, Rfl.lean</code> and <code>Main.lean</code> (this actually follows the directory structure in <a href=\"https://github.com/leanprover/lean4/tree/master/src/Lean/Meta/Tactic\">Lean4</a>).</p>",
        "id": 299484907,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1663545414
    },
    {
        "content": "<p>That sounds fine. Where in would you put something like <code>relationAppM?</code>? That feels like it should go somewhere even more central, e.g. <code>Mathlib/Lean/Expr.lean</code>.</p>",
        "id": 299484971,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1663545491
    },
    {
        "content": "<p>I was thinking in the <code>Main.lean</code> but if others think it should be somewhere else and have better reasons than that is probably the better solution.  I was just modeling my suggestion after the directory structure within <code>Lean4</code>s tactics.</p>",
        "id": 299484998,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1663545570
    },
    {
        "content": "<p>From the other code in <code>Mathlb/Lean/Expr</code> folder seems better to keep tactic code in the <code>Tactic</code> directory IMHO.</p>",
        "id": 299485207,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1663545794
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> here is <a href=\"https://github.com/leanprover-community/mathlib4/pull/425\">#425</a>.  Thanks for the input.</p>",
        "id": 299486796,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1663547845
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"443984\">@Newell Jensen</span> Note that you can write <code>mathlib4#425</code> and zulip will turn this into <a href=\"https://github.com/leanprover-community/mathlib4/pull/425\">mathlib4#425</a>. This works with every repo in the leanprover-community organization on github.</p>",
        "id": 299502919,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663565146
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span></p>",
        "id": 299503272,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1663565425
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> just put up <a href=\"https://github.com/leanprover-community/mathlib4/pull/436\">mathlib4#436</a> and let me know if you can think of any further corner cases to check for the attribute parsing.  I based this branch off of <a href=\"https://github.com/leanprover-community/mathlib4/pull/425\">mathlib4#425</a> but for some reason github is showing the additional file from <a href=\"https://github.com/leanprover-community/mathlib4/pull/425\">mathlib4#425</a> (will most likely go away if that branch lands first).</p>",
        "id": 300239411,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1663878112
    },
    {
        "content": "<p>From what I read online having two PRs from dependent branches would be handled appropriately.  Seeing the commit history of the parent branch in the child PR is making me queasy... <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 300240084,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1663878393
    },
    {
        "content": "<p>yeah that's normal</p>",
        "id": 300242505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663879472
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> updated the branch to use <code>elab_rules</code> and pushed.  However, something I noticed, and this may not be a big deal, is that the docstring that pops up from the tool tip seems to be affected by the priority.  For example, in the tests, if you however over <code>by rfl</code> in the example that uses the <code>refl</code> attribute, it will show the docstring from Lean 4 and not the docstring for the tactic I wrote.  Is there a way to also set the priority of the docstring?</p>",
        "id": 300257728,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1663885308
    },
    {
        "content": "<p>Yes, that's intentional. It's not priority based, it's just the docs on the syntax declaration that are being shown, which should incorporate elements of all the elab_rules associated to that syntax</p>",
        "id": 300258018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663885454
    },
    {
        "content": "<p>which makes things a bit awkward for something like a mathlib extension of a core tactic</p>",
        "id": 300258054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663885478
    },
    {
        "content": "<p>it might be possible to overwrite the doc string on the original syntax?</p>",
        "id": 300258098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663885509
    },
    {
        "content": "<p>Nope, it panics if you call <code>addDocString</code> on a declaration from another module</p>",
        "id": 300258424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663885705
    },
    {
        "content": "<p>I mean, its not a big deal, at least IMHO, since the docstring from Lean 4 is valid as well so.... just wanted to bring your attention to it in case you felt like it should be changed somehow.</p>",
        "id": 300258617,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1663885814
    },
    {
        "content": "<p>yeah, the easiest way to address the problem is to make the docstring of the core tactic vague enough to apply to your version as well</p>",
        "id": 300259080,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663886094
    },
    {
        "content": "<p>Its just the docstring for <code>macro \"rfl\" : tactic =&gt; `(eq_refl)</code> that shows up, so unless you think we should change that, won't pay it anymore mind.  The only suggestion that I would have is that we could change that dosctring so it doesn't mention the extensibility, i.e. the second sentence, and extract that to sit in a non-docstring comment.</p>",
        "id": 300259552,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1663886376
    },
    {
        "content": "<p>The docstring there <em>is</em> the main docstring for <code>rfl</code></p>",
        "id": 300259870,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663886551
    },
    {
        "content": "<p>it's probably a bit misleading that it's written using the <code>macro</code> command since it's supposed to be only the first of multiple implementations</p>",
        "id": 300259914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663886588
    },
    {
        "content": "<p>why wouldn't we mention the extensibility? That's an important piece of information for readers, especially if they are looking at a definition that says only <code>macro \"rfl\" : tactic =&gt; `(eq_refl)</code></p>",
        "id": 300260173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663886753
    },
    {
        "content": "<p>I don't know where all the docstrings show up within the ecosystem so that suggestion could definitely be misplaced.  I was only viewing it from a tooltip perspective.  Where are all the places that the docstrings show up?</p>",
        "id": 300260436,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1663886892
    },
    {
        "content": "<p>The tooltip shows the documentation on the <code>syntax \"rfl\"</code> declaration</p>",
        "id": 300261178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663887289
    },
    {
        "content": "<p>so if you have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- doc 1 -/</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"sd\">/-- doc 2 -/</span>\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n<span class=\"sd\">/-- doc 3 -/</span>\n<span class=\"n\">elab_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>then you will see only <code>doc 1</code> in the tooltip</p>",
        "id": 300261291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663887356
    },
    {
        "content": "<p><code>doc 2</code> and <code>doc 3</code> are more code-reading focused documentation</p>",
        "id": 300261381,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663887391
    },
    {
        "content": "<p><code>doc 1</code> should summarize all the macro_rules and elab_rules that will be declared for it because it's the user-facing documentation</p>",
        "id": 300261658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663887557
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/rfl.20tactic/near/300261658\">said</a>:</p>\n<blockquote>\n<p><code>doc 1</code> should summarize all the macro_rules and elab_rules that will be declared for it because it's the user-facing documentation</p>\n</blockquote>\n<p>If I am following you correctly then this would imply that I would need to create a branch in Lean 4 to update this <code>doc 1</code>, correct?</p>",
        "id": 300264186,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1663888736
    },
    {
        "content": "<p>yes</p>",
        "id": 300269024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663891508
    },
    {
        "content": "<p>but lean 4 welcomes documentation improvements so I don't think this would be a major problem</p>",
        "id": 300269070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663891540
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I see that you are trying to merge the <code>rfl</code> branch before the one that was stubbed out with some code from Siddhartha.   It might be too late and not a big deal since the one has the code from the other.</p>",
        "id": 301499678,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1664474438
    },
    {
        "content": "<p>I removed that part</p>",
        "id": 301499892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664474485
    },
    {
        "content": "<p>Yeah just saw that</p>",
        "id": 301499928,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1664474496
    },
    {
        "content": "<p>Cool, will start looking at next tactic I should take on...thanks for the help.</p>",
        "id": 301500021,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1664474518
    },
    {
        "content": "<p>The original implementation wasn't great, and I don't think it's needed here anyway since you are already checking that the two sides are defeq</p>",
        "id": 301500117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664474535
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"443984\">@Newell Jensen</span> A procedural note: you should make PRs originating in the mathlib4 repo itself, from a branch you create to master, or else the CI won't run on it</p>",
        "id": 301500968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664474771
    },
    {
        "content": "<p>What did I do (just to be clear where my error was)?</p>",
        "id": 301501264,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1664474868
    },
    {
        "content": "<p>You PR'd from your fork of mathlib4</p>",
        "id": 301501961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664475078
    },
    {
        "content": "<p>the mathlib4 CI doesn't run on forks</p>",
        "id": 301502263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664475156
    },
    {
        "content": "<p>Ah okay, so used to doing it from forks didn't realize that I needed to just  do it directly to the repo. <code>mathlib4</code> seems unique in this regard (compared to <code>lean 4</code> etc)</p>",
        "id": 301503353,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1664475481
    },
    {
        "content": "<p>it's the same procedure used in <code>mathlib</code> repo, but yes it is a bit unique compared to most github projects</p>",
        "id": 301503590,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664475546
    },
    {
        "content": "<p>We don't need <a href=\"https://github.com/leanprover-community/mathlib4/pull/425\">mathlib4#425</a> then now correct?</p>",
        "id": 301505583,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1664476184
    }
]