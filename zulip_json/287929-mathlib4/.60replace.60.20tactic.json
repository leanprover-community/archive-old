[
    {
        "content": "<p>I see two syntaxes for <code>replace</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">replace</span><span class=\"o\">)</span> <span class=\"s2\">\"replace \"</span> <span class=\"n\">Term.haveDecl</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">replace'</span><span class=\"o\">)</span> <span class=\"s2\">\"replace \"</span> <span class=\"n\">Term.haveIdLhs</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n</code></pre></div>\n<p>Ctrl+clicking on them I see:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">haveIdLhs</span> <span class=\"o\">:=</span> <span class=\"n\">optional</span> <span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">many</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"o\">(</span><span class=\"n\">simpleBinderWithoutType</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">bracketedBinder</span><span class=\"o\">)))</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">optType</span>\n<span class=\"kd\">def</span> <span class=\"n\">haveDecl</span>  <span class=\"o\">:=</span> <span class=\"n\">nodeWithAntiquot</span> <span class=\"s2\">\"haveDecl\"</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Term.haveDecl</span> <span class=\"o\">(</span><span class=\"n\">haveIdDecl</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">letPatDecl</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">haveEqnsDecl</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>What are those? I don't understand this way of (syntax?) declaration</p>",
        "id": 275449406,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647386761
    },
    {
        "content": "<p>For the purpose of understanding the parsed syntax, you can ignore the <code>&gt;&gt;</code>, the <code>ppSpace</code>, as well as the <code>nodeWithAntiquot .. ..</code>).  Also note that optional=?, many=*, and many1=+, etc.</p>",
        "id": 275479320,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647419513
    },
    {
        "content": "<p>So <code>haveIdLhs</code> parses <code>(ident (simpleBWT &lt;|&gt; bracketedB)+)? optType</code> and <code>haveDecl</code> parses <code>haveIdDecl &lt;|&gt; letPatDecl &lt;|&gt; haveEqnsDecl</code>.</p>",
        "id": 275479461,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647419600
    },
    {
        "content": "<p>This is my current code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab.Tactic</span> <span class=\"n\">Meta</span> <span class=\"n\">Parser</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"replace \"</span> <span class=\"n\">Term.haveDecl</span>  <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"replace \"</span> <span class=\"n\">Term.haveIdLhs</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">handle</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">hId</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLCtx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">findFromUserName</span><span class=\"bp\">?</span> <span class=\"n\">name</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"k\">fun</span> <span class=\"n\">d</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">d.fvarId</span>\n    <span class=\"k\">if</span> <span class=\"n\">name.toString</span> <span class=\"bp\">=</span> <span class=\"s2\">\"this\"</span> <span class=\"k\">then</span>\n      <span class=\"n\">evalTactic</span> <span class=\"bp\">$</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"k\">have</span> <span class=\"bp\">$</span><span class=\"o\">[:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">evalTactic</span> <span class=\"bp\">$</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"k\">have</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"o\">[:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">)</span>\n    <span class=\"k\">match</span> <span class=\"n\">hId</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">hId</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">replaceMainGoal</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Meta.clear</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span><span class=\"o\">)</span> <span class=\"n\">hId</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">replace</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"o\">[:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">handle</span> <span class=\"n\">h.getId</span> <span class=\"n\">t</span> <span class=\"n\">v</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">replace</span> <span class=\"n\">this</span> <span class=\"bp\">$</span><span class=\"o\">[:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">handle</span> <span class=\"bp\">`</span><span class=\"n\">this</span> <span class=\"n\">t</span> <span class=\"n\">v</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">replace</span> <span class=\"bp\">$</span><span class=\"o\">[:</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span>          <span class=\"bp\">=&gt;</span> <span class=\"n\">handle</span> <span class=\"bp\">`</span><span class=\"n\">this</span> <span class=\"n\">t</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">h</span> <span class=\"c1\">-- h is not glowing blue</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 275505049,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647434791
    },
    {
        "content": "<p>I just don't understand why h is not glowing blue when I call <code>replace h ...</code><br>\nIs it a bug?</p>",
        "id": 275505247,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647434910
    },
    {
        "content": "<p>Also, what would be an use example of the second syntax?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"replace \"</span> <span class=\"n\">Term.haveIdLhs</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n</code></pre></div>\n<p>I don't recall seeing it anywhere</p>",
        "id": 275505672,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647435144
    },
    {
        "content": "<p>The second syntax creates a goal for the replacement, used like <code>replace hn : s ≤ (n : ℤ) • r, { simpa, },</code></p>",
        "id": 275506762,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647435698
    },
    {
        "content": "<p>And we don't have support for <code>have</code> with such syntax yet, right?</p>",
        "id": 275522296,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647442519
    },
    {
        "content": "<p>No, that's another one of these low-hanging fruit.  I've been trying to leave some easy tactics to port so that other people have some easy tasks to get started.</p>",
        "id": 275547743,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647451481
    },
    {
        "content": "<p>It's ready for review: <a href=\"https://github.com/leanprover-community/mathlib4/pull/230\">https://github.com/leanprover-community/mathlib4/pull/230</a></p>",
        "id": 275562255,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647457243
    },
    {
        "content": "<p>A bit of an accident here after <a href=\"https://github.com/leanprover-community/mathlib4/pull/230#discussion_r829321541\">Mario's comment</a><br>\nI kinda like the error though. Maybe it could be improved, askinf the user to use <code>have</code> instead?</p>",
        "id": 275700346,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647539225
    },
    {
        "content": "<p>I'm not a fan of things that are explicitly supposed to do X and Y but fail silently when doing X and then just do Y</p>",
        "id": 275701428,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647539666
    },
    {
        "content": "<p>Speaking of things that happen to work but probably shouldn't:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">replace</span> <span class=\"n\">hmmm</span> <span class=\"o\">:=</span> <span class=\"mi\">42</span>\n</code></pre></div>",
        "id": 275701876,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647539885
    },
    {
        "content": "<p>But that's specified in the docstring:</p>\n<blockquote>\n<p>Acts like <code>have</code>, but removes a hypothesis with the same name as<br>\nthis one.</p>\n</blockquote>",
        "id": 275702261,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647540020
    },
    {
        "content": "<p>Having strict behavior isn't always good when writing automation, for example I remember writing <code>iterate 23 { replace h := thm h (by norm_num) }</code> in some real number approximation lemma</p>",
        "id": 275702313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647540037
    },
    {
        "content": "<p>if you combine it with <code>induction x; { ... }</code> proofs you can get into a situation where failing to do a thing when you clearly have a good approximation to the thing is tricky to work around</p>",
        "id": 275702559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647540144
    },
    {
        "content": "<p>Most <code>clear</code> tactics in lean 3 in fact use <code>tryClear</code></p>",
        "id": 275702618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647540170
    },
    {
        "content": "<p>for Gabriel's example, I think that behavior is more regular, it means you can safely replace <code>have</code> with <code>replace</code> everywhere as long as you don't use <code>assumption</code> or other tactics that access inaccessible names</p>",
        "id": 275702805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647540279
    },
    {
        "content": "<p>Early on I recall we discussed whether this should in fact be the default behavior of <code>have</code></p>",
        "id": 275703021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647540372
    },
    {
        "content": "<p>We can change the docstring to</p>\n<blockquote>\n<p>Acts like <code>have</code>, but tries to remove a hypothesis with the same name as<br>\nthis one.</p>\n</blockquote>",
        "id": 275703119,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647540419
    },
    {
        "content": "<p>I don't regard the clearing as the primary purpose of <code>replace</code>, that's just a cleanup operation to keep the statement small</p>",
        "id": 275703149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647540434
    },
    {
        "content": "<blockquote>\n<p>Acts like <code>have</code>, but removes a hypothesis with the same name as<br>\nthis one if possible.</p>\n</blockquote>",
        "id": 275703323,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647540504
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/238\">mathlib4#238</a></p>",
        "id": 275704575,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647541090
    }
]