[
    {
        "content": "<p>As can be seen elsewhere, I wanted to open a PR to start working on <code>order.complete_lattice</code>. And the very first line is tricky. I'm sure this has been discussed but I can't find it. In Lean 3 we had <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_sup\">docs#has_sup</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_Sup\">docs#has_Sup</a>. How do we translate those?</p>",
        "id": 316080054,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671120834
    },
    {
        "content": "<p>I've found <a href=\"#narrow/stream/270676-lean4/topic/sup.2FSup\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/sup.2FSup</a> but it was inconclusive. Now is the time to decide something.</p>",
        "id": 316081201,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671121143
    },
    {
        "content": "<p>We just decided to keep the Lean 3 capitalisation for <code>Icc</code> and friends. Should we do the same for <code>sup</code> and <code>Sup</code>?</p>",
        "id": 316081387,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671121187
    },
    {
        "content": "<p>Also, wait until you get to <a href=\"https://tqft.net/mathlib/probability/independence\">file#probability/independence</a> <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 316081525,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671121209
    },
    {
        "content": "<p>Oh no. SUP?</p>",
        "id": 316082309,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1671121411
    },
    {
        "content": "<p>That doesn't work for lemma names, because it would get turned back into <code>sup</code></p>",
        "id": 316082587,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671121488
    },
    {
        "content": "<p>SupCat</p>",
        "id": 316091435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671123739
    },
    {
        "content": "<p>what if <code>has_sup</code> becomes <code>BinarySup</code> and <code>has_Sup</code> becomes <code>Sup</code>?</p>",
        "id": 316092947,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1671124156
    },
    {
        "content": "<p>That matches e.g. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.has_binary_products\">docs#category_theory.limits.has_binary_products</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.has_products\">docs#category_theory.limits.has_products</a></p>",
        "id": 316093037,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1671124181
    },
    {
        "content": "<p>So you want to write <code>binarySup_binarySup_binarySup_comm</code> for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sup_sup_sup_comm\">docs#sup_sup_sup_comm</a>?</p>",
        "id": 316093180,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671124205
    },
    {
        "content": "<p>that lemma has a ridiculous name anyway</p>",
        "id": 316093246,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1671124217
    },
    {
        "content": "<p>Thanks! I named it</p>",
        "id": 316093330,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671124238
    },
    {
        "content": "<p>This is about the name of the class not the notation though</p>",
        "id": 316093340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671124239
    },
    {
        "content": "<p>e.g. the name of the class for <code>\\in</code> is <code>Membership</code></p>",
        "id": 316093477,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671124281
    },
    {
        "content": "<p>but the operator is called <code>mem</code></p>",
        "id": 316093506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671124295
    },
    {
        "content": "<p>I don't think a longer name is much of a problem here since it will be rarely used</p>",
        "id": 316093658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671124325
    },
    {
        "content": "<p>I think binary sup (the operator) should be called <code>sup</code> and I hope that's not under discussion</p>",
        "id": 316093810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671124362
    },
    {
        "content": "<p>Oops, I manage to split this conversation into two threads because I wanted to connect with the older discussion.</p>",
        "id": 316094682,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671124571
    },
    {
        "content": "<p>let's keep this one on the name of the notation classes</p>",
        "id": 316095062,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671124667
    },
    {
        "content": "<p>although I suppose that it depends somewhat on the name of the operations</p>",
        "id": 316095176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671124689
    },
    {
        "content": "<p>I actually find <code>sup</code> for the binary operation the most confusing one</p>",
        "id": 316102479,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671126613
    },
    {
        "content": "<p>in part because it's not the terminology I'm used to, e.g., <a href=\"https://ncatlab.org/nlab/show/join\">nlab</a></p>\n<blockquote>\n<p>A poset that has all finite joins is a join-semilattice [= <code>semilattice_sup + has_bot</code>]. A poset that has all suprema is a suplattice [= <code>complete_semilattice_Sup</code>].</p>\n</blockquote>",
        "id": 316106317,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671127635
    },
    {
        "content": "<p>The other thread is <a href=\"#narrow/stream/270676-lean4/topic/sup.2FSup\">here</a></p>",
        "id": 316137706,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671137444
    },
    {
        "content": "<p>We now settled on names for those functions. I started to update the file. But it would be nice to have help from mathport. Indeed mathport decided to rename all <code>Sup</code> to <code>sup</code> and it doesn't help at all with search and replace to enforce the new names. Can we somehow tell mathport to try again with the chosen <code>sup supₛ supᵢ inf infₛ infᵢ </code> as well as the corresponding class names (see <a href=\"https://github.com/leanprover-community/mathlib4/pull/1053\">mathlib4#1053</a>).</p>",
        "id": 316225369,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671184830
    },
    {
        "content": "<p>Can you get the oneshot feature to work?</p>",
        "id": 316225433,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671184861
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathport/blob/master/Oneshot/README.md\">https://github.com/leanprover-community/mathport/blob/master/Oneshot/README.md</a></p>",
        "id": 316225501,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671184883
    },
    {
        "content": "<p>I'll try that later today</p>",
        "id": 316227722,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671185669
    },
    {
        "content": "<p>If you already have a port of a file, you should be able to get git to help you here, by setting up your history as</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>old-mathport-output ------ your-partial-port\n     \\\n      \\------- new-mathport-output\n</code></pre></div>\n<p>and then merging the heads</p>",
        "id": 316228053,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671185769
    },
    {
        "content": "<p>I did some more by hand, pushing hopefully complete fixes up to line 465. But I'm going to stop for the night (possibly even the whole weekend...)</p>",
        "id": 316241798,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671190016
    },
    {
        "content": "<p>I did a mathport oneshot pass and pushed</p>",
        "id": 316256991,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671194805
    },
    {
        "content": "<p>I did a big renaming and cleanup pass. The file now starts to make sense. I'm releasing the lock on this PR.</p>",
        "id": 316275364,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671199685
    },
    {
        "content": "<p>Awesome! I did a little more, and we're getting closer.</p>",
        "id": 316409207,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671259431
    },
    {
        "content": "<p>Okay, it compiles now, and I fixed a bunch of names involving <code>Sup</code>.</p>",
        "id": 316411816,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671261346
    },
    {
        "content": "<p>There is some linting to do, if someone wants to look at that.</p>",
        "id": 316411831,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671261355
    },
    {
        "content": "<p>The complete lattice file is almost linted but there are two remaining errors about a simp lemma not being able to simplify its left-hand side.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">sup</span><span class=\"bp\">ᵢ</span><span class=\"n\">_inf</span><span class=\"bp\">ᵢ</span><span class=\"n\">_ge_nat_add</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">⨅</span> <span class=\"n\">i</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">⨆</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">⨅</span> <span class=\"n\">i</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Monotone</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">⨅</span> <span class=\"n\">i</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">binf</span><span class=\"bp\">ᵢ</span><span class=\"n\">_mono</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h.trans</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Monotone.sup</span><span class=\"bp\">ᵢ</span><span class=\"n\">_nat_add</span> <span class=\"n\">hf</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">inf</span><span class=\"bp\">ᵢ</span><span class=\"n\">_ge_eq_inf</span><span class=\"bp\">ᵢ</span><span class=\"n\">_nat_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.add_assoc</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Note that, right after this lemma (where the linter already complains), you can try</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">⨅</span> <span class=\"n\">i</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">⨆</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">⨅</span> <span class=\"n\">i</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n   <span class=\"n\">simp</span>\n</code></pre></div>\n<p>and it works. The version with <code>simp only [supᵢ_infᵢ_ge_nat_add]</code> also works. The only weird thing is that <code>simp?</code> reports <code>simp only [not_le, supᵢ_infᵢ_ge_nat_add]</code>. And <code>simp only [not_le]</code> doesn't seem to do anything.</p>",
        "id": 316497982,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671302660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> do you understand what is going with the simp linter in this example?</p>",
        "id": 316515073,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671314479
    },
    {
        "content": "<p>This is in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1053\">mathlib4#1053</a></p>",
        "id": 316515093,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671314501
    },
    {
        "content": "<p>This is a hard nut to crack.  I can't really tell what's going on here either.  Weirdly enough, if I call <code>simpNF.test</code> directly then the linter passes.  It's only when run via <code>#lint</code> that it complains. <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 316533972,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1671330431
    },
    {
        "content": "<p>Either way, <code>supᵢ_infᵢ_ge_nat_add</code> should not be marked simp, the subterm <code>?f (i + ?k)</code> produces an ugly higher-order unification problem.</p>",
        "id": 316534036,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1671330507
    },
    {
        "content": "<p>Okay, I've removed the simp there, and left a link to this thread. I'll merge this PR soon! Thanks all for the work on this one. On to <code>data.list.basic</code>. :-)</p>",
        "id": 316562493,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671357371
    },
    {
        "content": "<p>Is the use of <code>ge</code> instead of <code>le</code> causing the issue?</p>",
        "id": 317129679,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671619942
    },
    {
        "content": "<p>It doesn't seem to be. Interestingly, Patrick's example is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">⨅</span> <span class=\"n\">i</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">⨆</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">⨅</span> <span class=\"n\">i</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>and Chris' example <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2ESet.2ELattice/near/317124508\">here</a> is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">⋂</span> <span class=\"n\">i</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">⋃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">⋂</span> <span class=\"n\">i</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>which are, erm, kind of similar.</p>",
        "id": 317183548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671636085
    },
    {
        "content": "<p>I've recorded the issue <a href=\"https://github.com/leanprover/std4/issues/71\">here</a> but clearly the short term solution is just to remove the <code>simp</code> and move on.</p>",
        "id": 317188231,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671637362
    }
]