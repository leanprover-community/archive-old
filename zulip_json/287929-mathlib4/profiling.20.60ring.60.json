[
    {
        "content": "<p>With Mario's fix, I can profile <code>ring</code> in mathlib3 vs mathlib4. Unfortunately there's some work to do before we catch up.</p>\n<p>It's currently both slow, and getting slower faster, relative to mathlib3's ring.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Util.Time</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">1000000</span>\n\n<span class=\"c1\">-- Takes about 11s vs 13s with mathlib3</span>\n<span class=\"bp\">#</span><span class=\"n\">time</span> <span class=\"kd\">lemma</span> <span class=\"n\">ring_timing_5</span> <span class=\"o\">(</span><span class=\"n\">x1</span> <span class=\"n\">x2</span> <span class=\"n\">x3</span> <span class=\"n\">x4</span> <span class=\"n\">x5</span> <span class=\"n\">x6</span> <span class=\"n\">x7</span> <span class=\"n\">x8</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">x1</span> <span class=\"bp\">+</span> <span class=\"n\">x2</span> <span class=\"bp\">+</span> <span class=\"n\">x3</span> <span class=\"bp\">+</span> <span class=\"n\">x4</span> <span class=\"bp\">+</span> <span class=\"n\">x5</span> <span class=\"bp\">+</span> <span class=\"n\">x6</span> <span class=\"bp\">+</span> <span class=\"n\">x7</span> <span class=\"bp\">+</span> <span class=\"n\">x8</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x8</span> <span class=\"bp\">+</span> <span class=\"n\">x7</span> <span class=\"bp\">+</span> <span class=\"n\">x6</span> <span class=\"bp\">+</span> <span class=\"n\">x5</span> <span class=\"bp\">+</span> <span class=\"n\">x4</span> <span class=\"bp\">+</span> <span class=\"n\">x3</span> <span class=\"bp\">+</span> <span class=\"n\">x2</span> <span class=\"bp\">+</span> <span class=\"n\">x1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">5</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">ring</span>\n\n<span class=\"c1\">-- Takes about 34s vs 22s with mathlib3</span>\n<span class=\"bp\">#</span><span class=\"n\">time</span> <span class=\"kd\">lemma</span> <span class=\"n\">ring_timing_6</span> <span class=\"o\">(</span><span class=\"n\">x1</span> <span class=\"n\">x2</span> <span class=\"n\">x3</span> <span class=\"n\">x4</span> <span class=\"n\">x5</span> <span class=\"n\">x6</span> <span class=\"n\">x7</span> <span class=\"n\">x8</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">x1</span> <span class=\"bp\">+</span> <span class=\"n\">x2</span> <span class=\"bp\">+</span> <span class=\"n\">x3</span> <span class=\"bp\">+</span> <span class=\"n\">x4</span> <span class=\"bp\">+</span> <span class=\"n\">x5</span> <span class=\"bp\">+</span> <span class=\"n\">x6</span> <span class=\"bp\">+</span> <span class=\"n\">x7</span> <span class=\"bp\">+</span> <span class=\"n\">x8</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">6</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x8</span> <span class=\"bp\">+</span> <span class=\"n\">x7</span> <span class=\"bp\">+</span> <span class=\"n\">x6</span> <span class=\"bp\">+</span> <span class=\"n\">x5</span> <span class=\"bp\">+</span> <span class=\"n\">x4</span> <span class=\"bp\">+</span> <span class=\"n\">x3</span> <span class=\"bp\">+</span> <span class=\"n\">x2</span> <span class=\"bp\">+</span> <span class=\"n\">x1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">6</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">ring</span>\n\n<span class=\"c1\">-- Takes about 84s vs 37s with mathlib3</span>\n<span class=\"bp\">#</span><span class=\"n\">time</span> <span class=\"kd\">lemma</span> <span class=\"n\">ring_timing_7</span> <span class=\"o\">(</span><span class=\"n\">x1</span> <span class=\"n\">x2</span> <span class=\"n\">x3</span> <span class=\"n\">x4</span> <span class=\"n\">x5</span> <span class=\"n\">x6</span> <span class=\"n\">x7</span> <span class=\"n\">x8</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">x1</span> <span class=\"bp\">+</span> <span class=\"n\">x2</span> <span class=\"bp\">+</span> <span class=\"n\">x3</span> <span class=\"bp\">+</span> <span class=\"n\">x4</span> <span class=\"bp\">+</span> <span class=\"n\">x5</span> <span class=\"bp\">+</span> <span class=\"n\">x6</span> <span class=\"bp\">+</span> <span class=\"n\">x7</span> <span class=\"bp\">+</span> <span class=\"n\">x8</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x8</span> <span class=\"bp\">+</span> <span class=\"n\">x7</span> <span class=\"bp\">+</span> <span class=\"n\">x6</span> <span class=\"bp\">+</span> <span class=\"n\">x5</span> <span class=\"bp\">+</span> <span class=\"n\">x4</span> <span class=\"bp\">+</span> <span class=\"n\">x3</span> <span class=\"bp\">+</span> <span class=\"n\">x2</span> <span class=\"bp\">+</span> <span class=\"n\">x1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">7</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">ring</span>\n</code></pre></div>\n<p>For comparison, on the same machine Coq manages the <code>^15</code> version in about 5s.</p>",
        "id": 249825404,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629278829
    },
    {
        "content": "<p>Even without thinking about optimising <code>ring</code> in Mathlib4, I would love to see how the performance changes if we compile the <code>ring</code> tactic!</p>",
        "id": 249825605,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629278973
    },
    {
        "content": "<p>I get the error <code>'ring_timing' has already been declared</code> with your example.</p>",
        "id": 249825711,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1629279032
    },
    {
        "content": "<p>Fixed, sorry.</p>",
        "id": 249825789,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629279083
    },
    {
        "content": "<p>I also get very different timings (4s, 13s, 32s), but that just seems to be constant factor of 10x.</p>",
        "id": 249825868,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1629279127
    },
    {
        "content": "<p>I've found <code>tests/plugin/</code> in the <code>lean4</code> repo, and successfully run it, but it's not quite enough information for me to work out how to use a compiled version of Mathlib4.</p>",
        "id": 249825874,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629279131
    },
    {
        "content": "<p>(My back is sore and I'm working on an ancient laptop on the floor this evening.... I guess it really is ancient. :-)</p>",
        "id": 249825928,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629279171
    },
    {
        "content": "<p>Ah, crap. I had a copy of mathlib building in another window. Those numbers are not right. :-(</p>",
        "id": 249826323,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629279450
    },
    {
        "content": "<p>I've re-run the numbers. They now start off at <code>n=5</code> the same as mathlib3's <code>ring</code>, and then gradually fall behind for higher <code>n</code>.</p>",
        "id": 249826775,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629279747
    },
    {
        "content": "<p>So it's not quite as worrying, but still not great.</p>",
        "id": 249826843,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629279799
    },
    {
        "content": "<p>Would be interesting to check (e.g. with <code>perf</code>) if most time is spent in the interpreter (which we found to be faster than Lean 3's on simple programs) or in some other part that behaves differently from Lean 3</p>",
        "id": 249834384,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1629285227
    },
    {
        "content": "<p>What Aurélien didn't port yet is the norm_num instance cache we had in Lean 3.  I thought we might get away without the custom cache in Lean 4, but according to perf a large amount of the time is spent in mkAppM.</p>",
        "id": 249838759,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1629288235
    },
    {
        "content": "<p>While synthesizing instances? Might be worth investigating why the built-in <code>SynthInstanceCache</code> doesn't trigger here.</p>",
        "id": 249839712,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1629288811
    },
    {
        "content": "<p>I'm not sure if I read the results correctly, but a big part of the runtime was type inference, in particular the hash computation for the type inference cache.</p>",
        "id": 249840847,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1629289516
    },
    {
        "content": "<p>Tip: whenever something like this is much faster in Lean3, especially if it is an artificial example with a lot of structure/symmetries, try commenting out <a href=\"https://github.com/leanprover-community/lean/blob/master/src/kernel/expr.cpp#L222-L223\">https://github.com/leanprover-community/lean/blob/master/src/kernel/expr.cpp#L222-L223</a> and seeing if lean3 becomes slow.</p>",
        "id": 249853904,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1629295483
    },
    {
        "content": "<p>I started working on a rewrite / improvement of <code>normNum</code> yesterday. Using the OfNat dependent numerals leads to a lot of unnecessary work constructing exprs with strange shapes. Additionally I noticed that we're calling <code>synthInstance</code> in every numeral, which wasn't there before, as well as <code>mkAppM</code> as mentioned already. Those all look like low hanging fruits</p>",
        "id": 249899793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629314671
    },
    {
        "content": "<p>I just re-ran my profiling of <code>ring</code>, after <span class=\"user-mention\" data-user-id=\"399706\">@Aurélien Saue</span>'s optimisations <a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20mathlib4.3Amaster/near/250010269\">landed yesterday</a>. Things look better now, and the results from</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">time</span> <span class=\"kd\">lemma</span> <span class=\"n\">ring_timing_7</span> <span class=\"o\">(</span><span class=\"n\">x1</span> <span class=\"n\">x2</span> <span class=\"n\">x3</span> <span class=\"n\">x4</span> <span class=\"n\">x5</span> <span class=\"n\">x6</span> <span class=\"n\">x7</span> <span class=\"n\">x8</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">x1</span> <span class=\"bp\">+</span> <span class=\"n\">x2</span> <span class=\"bp\">+</span> <span class=\"n\">x3</span> <span class=\"bp\">+</span> <span class=\"n\">x4</span> <span class=\"bp\">+</span> <span class=\"n\">x5</span> <span class=\"bp\">+</span> <span class=\"n\">x6</span> <span class=\"bp\">+</span> <span class=\"n\">x7</span> <span class=\"bp\">+</span> <span class=\"n\">x8</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x8</span> <span class=\"bp\">+</span> <span class=\"n\">x7</span> <span class=\"bp\">+</span> <span class=\"n\">x6</span> <span class=\"bp\">+</span> <span class=\"n\">x5</span> <span class=\"bp\">+</span> <span class=\"n\">x4</span> <span class=\"bp\">+</span> <span class=\"n\">x3</span> <span class=\"bp\">+</span> <span class=\"n\">x2</span> <span class=\"bp\">+</span> <span class=\"n\">x1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">7</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">ring</span>\n</code></pre></div>\n<p>for various values of <code>7</code> are now essentially indistinguishable from the numbers from mathlib3's <code>ring</code>. In particular the growth rates seem to match again.</p>",
        "id": 250070156,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629425413
    }
]