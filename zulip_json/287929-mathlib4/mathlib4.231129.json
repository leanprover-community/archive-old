[
    {
        "content": "<p>Could someone look at what the instance issue is with this PR? I can get on hover that Lean 4 thinks we only know <code>0 &lt; ↑x ^ ?m.1594</code>, I think for the type of the subset, but it's confusing because the type only shows up when I look \"between\" parameters of <code>zpow_pos_of_pos</code></p>",
        "id": 317036865,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671569143
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Pow</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">zpow_pos_of_pos</span> <span class=\"n\">x.2</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩</span>\n</code></pre></div>",
        "id": 317057587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671578096
    },
    {
        "content": "<p>I am worried about this syntactic tautology stuff. The linter says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- porting note: syntatic tautology in Lean 4</span>\n<span class=\"c1\">-- @[simp]</span>\n<span class=\"c1\">-- theorem coe_zpow (x : { x : K // 0 &lt; x }) (n : ℤ) : ↑(x ^ n) = (x ^ n : K) :=</span>\n<span class=\"c1\">--   rfl</span>\n<span class=\"c1\">-- #align positive.coe_zpow Positive.coe_zpow</span>\n</code></pre></div>\n<p>but the autoporter has not correctly translated this statement from Lean 3 to Lean 4 because of the changes in elaboration which I explained in <a href=\"https://github.com/leanprover/lean4/issues/1915\">https://github.com/leanprover/lean4/issues/1915</a> . What worries me is that people might be thinking \"oh a linter is telling me I don't need this lemma any more so I'll ignore it\" -- what needs to be done is that the lemma needs to be reformulated so that it actually reflects the lemma which is supposed to be ported. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is there anything which the autoporter can do about this?</p>",
        "id": 317057914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671578265
    },
    {
        "content": "<p>Mathport will notice if you port the wrong theorem, even if you did so on mathport's recommendation. Assuming the syntaut linter wasn't there and we ported this theorem, after performing the <code>#align</code> mathport will tell you about how it's a dubious translation and so you should take another look at it and either fix it or document why it is expected to be a mismatch.</p>",
        "id": 317058668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671578632
    },
    {
        "content": "<p>What I'm worried about it users just deleting the lemmas because they're being informed that they're \"no longer needed\".</p>",
        "id": 317058765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671578669
    },
    {
        "content": "<p>If you just delete the theorem then mathport will put it back, treating it similarly to a new mathlib theorem</p>",
        "id": 317058835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671578711
    },
    {
        "content": "<p>the only case where it won't is if you <code>#noalign</code> it</p>",
        "id": 317058863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671578722
    },
    {
        "content": "<p>We should probably have review standards around <code>#noalign</code> to require documentation or otherwise some kind of indication why it should not be ported</p>",
        "id": 317058982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671578778
    },
    {
        "content": "<p>What the lemma should say is <code>↑(x ^ n) = (↑x) ^ n</code>. In Lean 3 one could write this as <code>↑(x ^ n : { x : K // 0 &lt; x }) = (x ^ n : K)</code> but in Lean 4 this is being interpreted as a syntactic tautology and one needs to write instead e.g. <code>↑(x ^ n) = (x : K) ^ n</code> because elaboration is no longer happening from the outside in.</p>",
        "id": 317058983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671578779
    },
    {
        "content": "<p>right, there's a core lean issue open about this</p>",
        "id": 317059042,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671578817
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mathlib4.231129/near/317058835\">said</a>:</p>\n<blockquote>\n<p>If you just delete the theorem then mathport will put it back, treating it similarly to a new mathlib theorem</p>\n</blockquote>\n<p>I'm talking about human porters deleting the lemma because the autoporter's message is confusing, and making a PR which get hurriedly merged.</p>",
        "id": 317059088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671578855
    },
    {
        "content": "<p>yes I know</p>",
        "id": 317059179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671578891
    },
    {
        "content": "<p>what I said will still happen</p>",
        "id": 317059205,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671578900
    },
    {
        "content": "<p>if you just delete stuff from a port file then mathport will think you didn't finish the job and point out everything you missed</p>",
        "id": 317059226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671578927
    },
    {
        "content": "<p>we need to get in the habit of checking mathport results on already ported files occasionally to incorporate new stuff from mathlib and also catch errors like this, but it's fine if we only do it once in a while since it's usually an order of magnitude easier than the initial port</p>",
        "id": 317059406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671579024
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"542196\">@Arien Malec</span> you are using <code>Positive.Subtype.hasInv</code> for the inverse instance However the naming convention has changed. You now need to use <code>instInvSubtypeLtToLTToPreorderToPartialOrderToStrictOrderedRingToLinearOrderedRingToLinearOrderedCommRingOfNatToOfNat0ToZeroToCommMonoidWithZeroToCommGroupWithZeroToSemifieldToLinearOrderedSemifield</code>.</p>",
        "id": 317059597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671579133
    },
    {
        "content": "<p>we also need to do a diff between mathlib3 and mathlib4 to fix style issues for syntax patterns that are ignored by mathport, but this is also something that we can do in bulk later</p>",
        "id": 317059617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671579144
    },
    {
        "content": "<p>Alternatively you might want to change the name of the auto-generated instance.</p>",
        "id": 317059628,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671579151
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">Subtype.hasInv</span> <span class=\"o\">:</span> <span class=\"n\">Inv</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"n\">inv_pos.2</span> <span class=\"n\">x.2</span><span class=\"o\">⟩⟩</span>\n</code></pre></div>\n<p>I'll let you choose whether you want to go with the auto-generated instance or rename it like the above. Then you can use <code>Positive.Subtype.hasInv</code> as suggested by the autoporter.</p>",
        "id": 317059754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671579236
    },
    {
        "content": "<p>I think we need to make a \"instance with long name\" linter to prevent the issue <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> mentioned about exponential growth of instance names</p>",
        "id": 317059840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671579267
    },
    {
        "content": "<p>I like that better, but to be clear, that's not where I'm stuck....</p>",
        "id": 317059842,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671579267
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Positive</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Subtype.inv</span> <span class=\"o\">:</span> <span class=\"n\">Inv</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"n\">inv_pos.2</span> <span class=\"n\">x.2</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">coe_inv</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">positive.coe_inv</span> <span class=\"n\">Positive.coe_inv</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Subtype.pow</span> <span class=\"o\">:</span> <span class=\"n\">Pow</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">zpow_pos_of_pos</span> <span class=\"n\">x.2</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">coe_zpow</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">positive.coe_zpow</span> <span class=\"n\">Positive.coe_zpow</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrderedCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">Positive.Subtype.inv</span><span class=\"o\">,</span> <span class=\"n\">Positive.linearOrderedCancelCommMonoid</span> <span class=\"k\">with</span>\n    <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Subtype.ext</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">inv_mul_cancel</span> <span class=\"n\">a.2.ne'</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Positive</span>\n</code></pre></div>\n<p>The final instance still doesn't work but I need to sleep now. The other issues are fixed.</p>",
        "id": 317060083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671579412
    },
    {
        "content": "<p>Thx...</p>",
        "id": 317060196,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671579479
    },
    {
        "content": "<p>Oh no!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">2000000</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrderedCommGroup</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">Positive.Subtype.inv</span><span class=\"o\">,</span> <span class=\"n\">Positive.linearOrderedCancelCommMonoid</span> <span class=\"k\">with</span>\n    <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Subtype.ext</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">inv_mul_cancel</span> <span class=\"n\">a.2.ne'</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>works! The default max heartbeats is not enough :-( This does not bode well.</p>",
        "id": 317060267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671579510
    },
    {
        "content": "<p>ugh...</p>",
        "id": 317060470,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671579621
    },
    {
        "content": "<p><code>set_option maxHeartbeats 304000</code> works, but <code>303000</code> doesn't.</p>",
        "id": 317060522,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671579662
    },
    {
        "content": "<p>Pushed and credited to <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> ..</p>\n<p>The instance issue that I flagged still persists and the updated lemma is no longer <code>rfl</code>....</p>",
        "id": 317060787,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671579847
    },
    {
        "content": "<p>Sorry, what are you flagging? For me the file was compiling.</p>",
        "id": 317060869,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671579919
    },
    {
        "content": "<p>Oh, I see the diff.</p>",
        "id": 317060921,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671579953
    },
    {
        "content": "<p>I can't guarantee that I've given the instances good names, in afraid I'm still baffled by the naming convention.</p>",
        "id": 317061099,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671580049
    },
    {
        "content": "<p>Super odd that Lean 4 infers the correct type in the binder <code>fun x n</code> then loses it in the function body.</p>",
        "id": 317061124,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671580075
    },
    {
        "content": "<p>Probably <code>Positive.Subtype.instInv</code>?</p>",
        "id": 317061235,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671580138
    },
    {
        "content": "<p>I'm a big fan of the auto-generated instance names but my impression is that I'm in a minority.</p>",
        "id": 317061278,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671580175
    },
    {
        "content": "<p>There was a discussion about these recently... search for \"exponential blowup\" <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 317061381,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1671580218
    },
    {
        "content": "<p>Yeah I'm also a fan of that.</p>",
        "id": 317061414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671580240
    },
    {
        "content": "<p>Move fast and blow up stuff</p>",
        "id": 317061440,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671580260
    },
    {
        "content": "<p>So:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Field.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Positive.Ring</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedField</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Pow</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">zpow_pos_of_pos</span> <span class=\"n\">x.2</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩</span>\n</code></pre></div>\n<p>Lean fails to infer that <code>x</code> is <code>K</code> in the function body.</p>",
        "id": 317061603,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671580370
    },
    {
        "content": "<p>Lean needs </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Pow</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">zpow_pos_of_pos</span> <span class=\"n\">x.2</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩</span>\n</code></pre></div>\n<p>to typecheck properly.</p>",
        "id": 317061679,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671580417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"542196\">Arien Malec</span> <a href=\"#narrow/stream/287929-mathlib4/topic/mathlib4.231129/near/317061235\">said</a>:</p>\n<blockquote>\n<p>Probably <code>Positive.Subtype.instInv</code>?</p>\n</blockquote>\n<p>I think just <code>Positive.Subtype.inv</code>. We haven't been including <code>inst</code> in most of the manually named instances so far.</p>",
        "id": 317073450,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671589012
    }
]