[
    {
        "content": "<p>In Lean 3, there's a call to <code>unfold</code> of the form <code>unfold btw at ⊢ h</code> that turns the tactic state</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">btw</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">btw</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>into the state</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span>\n</code></pre></div>\n<p>(It's not important what the details are; if people like I can minimize it, though.)</p>\n<p>But in Lean 4, the ported version (<code>unfold Btw at h⊢</code>) turns the state</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.4043</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">Preorder</span> <span class=\"n\">α</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">Btw</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Btw</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>into the more complex</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.4043</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">Preorder</span> <span class=\"n\">α</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">Btw</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">↦</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">{</span> <span class=\"n\">Btw</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">↦</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>I can recover the Lean 3 version, but I need to apply <code>simp</code> after the unfold (<code>dsimp</code> doesn't work, even though I might naively expect it to—after all, we're just using projections and applying functions, things I would have thought would be definitional).</p>\n<p>So it's not really a problem per se, but: is it a sign of something gone awry? Just in case, I thought I'd bring it up.</p>",
        "id": 315889795,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671043076
    },
    {
        "content": "<p>Actually, just made an MWE anyway: <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">class</span> <span class=\"n\">Bar</span> <span class=\"kd\">extends</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n<span class=\"kd\">def</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"n\">where</span>\n  <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">True</span>\n  <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">Foo.foo</span> <span class=\"c1\">-- unsolved goals</span>\n</code></pre></div>\n<p>Tactic state at the end:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"o\">{</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">True</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>Contrast with Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"n\">Bar</span> <span class=\"kd\">extends</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">Foo.foo</span> <span class=\"o\">}</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 315903734,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671047649
    },
    {
        "content": "<p>Note: if we absorb <code>bar</code> into <code>Foo</code> to avoid an <code>extends</code>, we don't even need to unfold in Lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n  <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Baz</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">True</span>\n  <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 315904198,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671047817
    },
    {
        "content": "<p>(maybe this should be moved to the <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a> stream, now that I think about it.)</p>",
        "id": 315904603,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671047969
    }
]