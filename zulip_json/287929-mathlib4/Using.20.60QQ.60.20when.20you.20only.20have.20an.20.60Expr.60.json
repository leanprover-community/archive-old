[
    {
        "content": "<p>A question for <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>, about your <a href=\"https://github.com/gebner/quote4/blob/master/examples/matching.lean\">example</a> from <code>QQ</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Qq</span>\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">summands</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"bp\">$</span><span class=\"n\">u</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Add</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">summands</span> <span class=\"n\">inst</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">summands</span> <span class=\"n\">inst</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>If I have a mere <code>e : Expr</code>, which I happen to believe is a term of some type <code>α</code> for which <code>Add α</code> is available, how do I call <code>summands</code> on <code>e</code>?</p>\n<p>I'm presuming I need to infer the type of <code>e</code>, and synthesize an <code>Add</code> instance, but this doomed attempt</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">e</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"n\">ty</span>\n  <span class=\"k\">let</span> <span class=\"n\">inst</span> <span class=\"bp\">←</span> <span class=\"n\">synthInstance</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">Add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">ty</span><span class=\"o\">])</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"n\">inst</span>\n  <span class=\"n\">summands</span> <span class=\"n\">inst</span> <span class=\"n\">e</span>\n</code></pre></div>\n<p>quite reasonably fails (with <code>don't know how to synthesize implicit argument @summands (?m.69032 e ty x✝¹ a✝ inst x✝) (?m.69033 e ty x✝¹ a✝ inst x✝) inst e</code>, phew!).</p>\n<p>I'm missing the step where I first get inside the <code>QQ</code> world, so that I can use <code>q(inferInstance)</code> to type-safely produce the instance.</p>",
        "id": 303344538,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665449272
    },
    {
        "content": "<p>There's <code>inferTypeQ</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">inferTypeQ</span> <span class=\"n\">e</span>\n<span class=\"k\">let</span> <span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Add</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">synthInstanceQ</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Add</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 303346189,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1665450751
    },
    {
        "content": "<p>Note that <code>q(inferInstance)</code> only works when you can <em>statically</em> determine the instance.  Since we don't have <code>∀ α, Add α</code>, this won't be the case here.</p>",
        "id": 303346212,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1665450783
    },
    {
        "content": "<p>Thanks! <code>inferTypeQ</code> didn't quite work for me, as you get <code>α : Q(Sort u)</code>, but then <code>q(Add $a)</code> doesn't typecheck, because <code>Add</code> expects <code>Type</code> rather than <code>Sort</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">inferTypeQ'</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">((</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Level</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"bp\">$</span><span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"bp\">×</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">α</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">e</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">whnf</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"not a type{indentExpr α}\"</span>\n  <span class=\"n\">pure</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>presumably works as a work-around, but perhaps there's a better solution?</p>",
        "id": 303349037,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665453379
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>, is there some better way to use <code>Qq</code> here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Qq</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Inhabited</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">synthInstanceQ</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Inhabited</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Inhabited</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">synthInstanceQ</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Inhabited</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"c1\">-- fails: `incompatible metavariable`</span>\n<span class=\"kd\">def</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Inhabited</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">synthInstanceQ</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Inhabited</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 304372347,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665976198
    },
    {
        "content": "<p>I noticed this when I found I needed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">CommSemiring</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">synthInstanceQ</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">CommSemiring</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 304372479,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665976315
    }
]