[
    {
        "content": "<p>For my sins I am porting <code>Control.Traversable.Basic</code> and at some point near the end of the file it uses that <code>id</code> is a monad. I traced this back to an instance in core Lean 3 which might not exist in Lean 4? Assuming it doesn't, I want to port <code>init.control.id</code> from core Lean 3 into mathlib4 (<a href=\"https://github.com/leanprover-community/lean3port/blob/master/Leanbin/Init/Control/Id.lean\">here</a> is lean3port's opinion on the matter). However this file contains two things: the instance I want, and an instance of <code>MonadRun id id</code>, and <code>MonadRun</code> is defined in <code>init.control.lift</code> which is <a href=\"https://github.com/leanprover-community/lean3port/blob/master/Leanbin/Init/Control/Lift.lean\">here in lean3port</a> and <a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/control/lift.lean\">here in lean3</a> and is full of monad-like-coercion-like things so I think it's time to confess I'm out of my depth. do I just port the monad instance and ignore <code>monad_run</code> or does <code>init.control.lift</code> need to be ported too?</p>",
        "id": 312958762,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669764186
    },
    {
        "content": "<p><code>Id</code> is a monad, but <code>id</code> isn't.</p>",
        "id": 312958918,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669764243
    },
    {
        "content": "<p>I'll learn the naming convention one of these days! Thanks! I suspect there might be more to it than this but now it's time for bed; I have clearly misdiagonosed the actual problem (which I'll get back to tomorrow)</p>",
        "id": 312959079,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669764347
    },
    {
        "content": "<p>OK so the actual problem is that <code>id.mk : α → id α</code> but I want a term of type <code>α → Id α</code>; <code>id (id.mk)</code> works... So in fact I wasn't being completely stupid -- I think <code>id</code> _is_ a monad in Lean 3, and the translation of <code>id</code> to Lean 4 is <code>id</code> but then there's also <code>Id</code>, which is a monad in Lean 4 but which doesn't have as much API as <code>id</code>.</p>",
        "id": 312961102,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669765426
    },
    {
        "content": "<p>this (i.e. <code>α → Id α</code>) is <code>pure</code></p>",
        "id": 312961527,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669765638
    }
]