[
    {
        "content": "<p>There are places in mathlib (e.g. <code>algebra.group.type_tags</code>) which do the following thing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">semigroup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_semigroup</span> <span class=\"o\">(</span><span class=\"n\">additive</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">mul_assoc</span> <span class=\"n\">α</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">additive.has_add</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">comm_semigroup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_semigroup</span> <span class=\"o\">(</span><span class=\"n\">additive</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">mul_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">additive.add_semigroup</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>where the definition of the latter instance depends on the auto-generated name of the former. Since the instance name generation changed in Lean 4, I am wondering what to do here. Since relying on autogenerated names is never a good idea, my intuition is to either</p>\n<ul>\n<li>manually name the first instance <code>Additive.addSemigroup</code>; or</li>\n<li>define the latter instance by</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">CommSemigroup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">AddCommSemigroup</span> <span class=\"o\">(</span><span class=\"n\">Additive</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">AddSemigroup</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">mul_comm</span> <span class=\"n\">α</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>I am leaning towards the second option because it doesn't rely on <em>any</em> name, autogenerated or not. The only worry is that it picks up the wrong instance; but since in this particular case (<code>Additive</code>/<code>Multiplicative</code>) I think the instances should be canonical, maybe that is not a worry?</p>",
        "id": 313593527,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1670016988
    },
    {
        "content": "<p>Doesn't <code>inferInstanceAs</code> create a different term (essentially with an <code>id</code> wrapper function)? Does it work for cases like <code>..foo.add_monoid, ..foo.monoid</code>?</p>",
        "id": 313593861,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670017183
    },
    {
        "content": "<p>This example works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">AddMonoid</span> <span class=\"o\">(</span><span class=\"n\">Additive</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">AddZeroClass</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">AddSemigroup</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n    <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n    <span class=\"n\">nsmul</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Monoid.npow</span> <span class=\"n\">α</span> <span class=\"n\">h</span>\n    <span class=\"n\">nsmul_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Monoid.npow_zero</span> <span class=\"n\">α</span> <span class=\"n\">_</span>\n    <span class=\"n\">nsmul_succ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Monoid.npow_succ</span> <span class=\"n\">α</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Relative to what mathport gave, I had to explicitly specify <code>α</code> in the last two fields since it was inferring <code>Additive α</code>, but that is an elaboration change for which the <code>inferInstanceAs</code> part doesn't seem to matter.</p>",
        "id": 313594262,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1670017372
    },
    {
        "content": "<p>The original is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid</span> <span class=\"o\">(</span><span class=\"n\">additive</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">zero</span>     <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">add</span>      <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">),</span>\n  <span class=\"n\">nsmul</span>    <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">monoid.npow</span> <span class=\"n\">α</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">nsmul_zero'</span> <span class=\"o\">:=</span> <span class=\"n\">monoid.npow_zero'</span><span class=\"o\">,</span>\n  <span class=\"n\">nsmul_succ'</span> <span class=\"o\">:=</span> <span class=\"n\">monoid.npow_succ'</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">additive.add_zero_class</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">additive.add_semigroup</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 313594332,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1670017419
    },
    {
        "content": "<p>Something else to consider when relying on generated names;  referring to instances in docstrings such that <a href=\"https://leanprover-community.github.io/mathlib4_docs\">#docs4</a> links them</p>",
        "id": 313594415,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670017448
    },
    {
        "content": "<p><del>Note that <code>inferInstanceAs</code> is an <code>abbrev</code> so there should be no extra function application.</del> Looks like I made this up, apologies. There is a special <a href=\"https://github.com/leanprover/lean4/blob/eac410db4ee0e035c2de45c8d2f7e006bc6b1b1c/src/Lean/Elab/DefView.lean#L13\">definition kind</a> and <a href=\"https://github.com/leanprover/lean4/blob/09c4af26fce85559202a9c8a65837da88fefcd5e/src/kernel/declaration.h#L17\">reducibility hint</a> which are tracked.</p>",
        "id": 313594442,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1670017473
    },
    {
        "content": "<p>Are <code>abbrev</code>s in Lean 4 unfolded immediately like <code>coe</code>? (in Lean 3 it was a bit less clear than that)</p>",
        "id": 313594545,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670017535
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Relying.20on.20instance.20names/near/313594415\">said</a>:</p>\n<blockquote>\n<p>Something else to consider when relying on generated names;  referring to instances in docstrings such that <a href=\"https://leanprover-community.github.io/mathlib4_docs\">#docs4</a> links them</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Lean/Meta/Instances.html#Lean.Meta.instInhabitedInstanceEntry\">Here</a> is an example autogenerated name.</p>",
        "id": 313594548,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1670017538
    },
    {
        "content": "<p>My view here would be that we should teach mathport some heuristics to align instance names; because in the long term we can then use the resulting #align data to clear up instance-references in comments</p>",
        "id": 313594676,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670017588
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> has expressed opinions related to this in another thread at some point</p>",
        "id": 313594785,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670017655
    },
    {
        "content": "<p>I'm interested in the answer to the original question because this evening I just ported a bunch of code by changing instance names to the new lean 4 instance names without even thinking that this might be a problem</p>",
        "id": 313595262,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670017892
    },
    {
        "content": "<p>Whenever a problem comes up that involves instance names, I've been adding manual names and using those.</p>",
        "id": 313596911,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670018600
    },
    {
        "content": "<p>I'd be happy with the <code>inferInstanceAs</code> solution.</p>",
        "id": 313596945,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670018618
    },
    {
        "content": "<p>I have also been using manual names. I actually prefer to name instances, just so we can refer to them if we want to (which does come up from time to time), or else have the autogenerated names be nice and predictable.</p>",
        "id": 313600548,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1670020269
    },
    {
        "content": "<p>Alrighty, I will write down the manual lean3-style instance names when needed, despite this being less automated, since Eric is right to point out that they are not exactly the same term and iirc instances can be annoyingly sensitive to this kind of detail (it is unclear to me whether an <code>abbrev</code>, being \"very-reducible\", could cause issues; but just in case).</p>",
        "id": 313600904,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1670020425
    },
    {
        "content": "<p>Would <code>(inferInstance : insert-type-here)</code> have the same problem as <code>inferInstanceAs</code>? I would expect not, but I could be wrong.</p>",
        "id": 313601169,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1670020561
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Relying.20on.20instance.20names/near/313594676\">said</a>:</p>\n<blockquote>\n<p>My view here would be that we should teach mathport some heuristics to align instance names; because in the long term we can then use the resulting #align data to clear up instance-references in comments</p>\n</blockquote>\n<p>The names are not really related by any kind of direct map. Lean 4 names take into consideration a lot more of the type and as a result they can be very long. The simplest way to do what you are suggesting would be to just run the instance name generator on the synthesized lean 4 type for any instance which is not named; but one difficulty with this is that binport is the one doing the naming (by going over the lean 3 environment) and synport is the one that knows whether the instance is named (because it goes over the lean 3 syntax), and binport runs first</p>",
        "id": 313601501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670020714
    },
    {
        "content": "<p>The fact that <code>inferInstance</code> inserts a literal term (an application of <code>inferInstance</code> which is an identity function) also bothers me. The <code>synth_instance</code> tactic is actually just sugar for <code>exact inferInstance</code> so it also introduces this extra term, and this is something we have to go to pains to avoid in the implementation of the <code>ring</code>/<code>norm_num</code> tactics</p>",
        "id": 313601849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670020883
    },
    {
        "content": "<p>It would be great if they could just magically disappear at elaboration time, but the magic for <code>coe</code> is specific to it and if we wanted to do something similar for <code>inferInstance</code> it would have to be a macro</p>",
        "id": 313602060,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670020981
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Relying.20on.20instance.20names/near/313601849\">said</a>:</p>\n<blockquote>\n<p>The fact that <code>inferInstance</code> inserts a literal term (an application of <code>inferInstance</code> which is an identity function) also bothers me. The <code>synth_instance</code> tactic is actually just sugar for <code>exact inferInstance</code> so it also introduces this extra term, and this is something we have to go to pains to avoid in the implementation of the <code>ring</code>/<code>norm_num</code> tactics</p>\n</blockquote>\n<p>This is getting a little off-track but why is the extra term an issue for <code>ring</code>?</p>",
        "id": 313602303,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1670021090
    },
    {
        "content": "<p>Since it has the <code>abbrev</code> reducibility hint, it's not quite the same from the typechecker's point of view as inserting <code>id</code>.</p>",
        "id": 313602486,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1670021178
    },
    {
        "content": "<p>it is an extra constant factor on the construction of expressions, and the typechecking of the result, and it's just an unnecessarily longer proof</p>",
        "id": 313602550,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670021210
    },
    {
        "content": "<p>because we are talking about an additional identity function wrapping every single + and * and lemma inside the generated proof</p>",
        "id": 313602715,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670021298
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/902\">mathlib4#902</a> I've encountered a few instance names (in already ported files) that are rediculously long by default: <code>instance WithBot.instNoTopOrderWithBotInstLEWithBot [LE α] [NoTopOrder α] [Nonempty α] : NoTopOrder (WithBot α) :=</code>. Since I need to use them explicitely as above discussed, I wonder if there is an opinion on whether they should be manually shortened to <code>WithBot.instNoTopOrder</code> or just bite the bullet and spell out the name every time.</p>",
        "id": 314620270,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1670485730
    },
    {
        "content": "<p>Please rename to just <code>WithBot.noTopOrder</code>.</p>",
        "id": 314620857,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670486010
    },
    {
        "content": "<p>By the way, another possibility which was under discussion recently was to avoid using the names completely and to use instance synthesis, but I tried this in Algebra.Group.WithOne.Defs and just found that it still made the code longer without any obvious gain. The long name is hilarious. Maybe this is just a transient issue -- I'm not sure that in the big theory files people are explicitly using instance names.</p>",
        "id": 314621640,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670486367
    },
    {
        "content": "<p>Re the renaming suggestion above -- you want no <code>inst</code> at all in the name?</p>",
        "id": 314621687,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670486389
    }
]