[
    {
        "content": "<p>In Lean 4, the notation <code>{x | p x}</code> is hard-coded to be about <code>Set</code>. This makes the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Sep#doc\">docs4#Sep</a> class useless. In <code>Finset.Basic</code> I have written a porting note:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Porting note: The notation `{ x ∈ s | p x }` in Lean 4 is hardcoded to be about `Set`.</span>\n<span class=\"c1\">-- So at the moment the whole `Sep`-class is useless, as it doesn't have notation.</span>\n<span class=\"c1\">-- /-- The following instance allows us to write `{x ∈ s | p x}` for `Finset.filter p s`.</span>\n<span class=\"c1\">--   We don't want to redo all lemmas of `Finset.filter` for `Sep.sep`, so we make sure that `simp`</span>\n<span class=\"c1\">--   unfolds the notation `{x ∈ s | p x}` to `Finset.filter p s`.</span>\n<span class=\"c1\">-- -/</span>\n<span class=\"c1\">-- noncomputable instance {α : Type _} : Sep α (Finset α) :=</span>\n<span class=\"c1\">--   ⟨fun p x =&gt; x.filter p⟩</span>\n\n<span class=\"c1\">-- -- @[simp] -- Porting note: not a simp-lemma until `Sep`-notation is fixed.</span>\n<span class=\"c1\">-- theorem sep_def {α : Type _} (s : Finset α) (p : α → Prop) : { x ∈ s | p x } = s.filter p := by</span>\n<span class=\"c1\">--   ext</span>\n<span class=\"c1\">--   simp</span>\n<span class=\"c1\">-- #align finset.sep_def Finset.sep_def</span>\n</code></pre></div>\n<p>How important is sep notation on finsets?</p>",
        "id": 321579038,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673855331
    },
    {
        "content": "<p>Huh, that instance has <a href=\"https://github.com/leanprover-community/mathlib/blame/9003f28797c0664a49e4179487267c494477d853/src/data/finset/basic.lean#L1884\">been around for 3 years</a> and I've never noticed it. I think all of us who use <code>finset</code> mathematically use <code>finset.filter</code> directly, and when we want to use separation notation then we use <code>set</code> and <code>set.finite</code>.</p>\n<p>One reason I wouldn't use <code>has_sep</code> for <code>finset</code> (even though I'm now aware of it) is that all the lemmas are in terms of <code>finset.filter</code>. If this were notation that unfolded immediately to <code>finset.filter</code>, then that would be more practical.</p>",
        "id": 321593751,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673860985
    },
    {
        "content": "<p>I guess that's why there's a simp lemma that converts to <code>filter</code></p>",
        "id": 321594149,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673861099
    },
    {
        "content": "<p>Yep, but that's not enough since you can't write any <code>simp</code> lemmas that use sep notation on the LHS.</p>",
        "id": 321595319,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673861446
    },
    {
        "content": "<p>Its pointless noncomputability also makes using it undesirable</p>",
        "id": 321602367,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673863712
    },
    {
        "content": "<p>If somehow there could be separation notation that elaborates to <code>finset.filter</code> and picks up on a decidability instance, that'd be cool.</p>\n<p>I'd also be cool if big unions and big intersections could work equally well for sets and finsets. That's something I'd tried doing with complicated typeclasses, but it never worked quite right -- I'm hopefully that we'll eventually exploit Lean 4 features to get this to work, though after everything's been ported.</p>",
        "id": 321603588,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1673864113
    }
]