[
    {
        "content": "<p>I was playing with the latest Mathlib4 version (<code>3a835b7</code>) and the <code>ring</code> tactic output was a bit strange:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sum</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sum</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mulDist</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">twoTimesSumEqTimesSucc</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">sum</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"n\">hi</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sum</span><span class=\"o\">]</span>\n      <span class=\"n\">iterate</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mulDist</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hi</span><span class=\"o\">]</span>\n      <span class=\"n\">ring</span> <span class=\"c1\">-- unknown free variable '_uniq.1942'</span>\n</code></pre></div>\n<p>Is this a bug or a misuse of the tactic?</p>",
        "id": 269273059,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643124600
    },
    {
        "content": "<p>That's a bug.</p>",
        "id": 269273925,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643124942
    },
    {
        "content": "<p>Alright, I'm going to try and debug it</p>",
        "id": 269274428,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643125137
    },
    {
        "content": "<p>The error message indicates that some <code>Expr</code> constructed by the tactic contains an <code>FVarId</code> that doesn't exist. Usually this means that the <code>Expr</code> is used in the wrong context. Maybe that helps with the debugging.</p>",
        "id": 269275378,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1643125466
    },
    {
        "content": "<p>The problem happens when calling <code>(m {α := ty, univ := u, cs := inst }).run' {}</code> as the return of <code>RingM.run</code></p>",
        "id": 269277999,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643126423
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/issues/165\">https://github.com/leanprover-community/mathlib4/issues/165</a></p>",
        "id": 269280393,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643127324
    },
    {
        "content": "<p>And it's closed <span aria-label=\"open mouth\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"open mouth\">:open_mouth:</span></p>",
        "id": 269304461,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643136539
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 269339378,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643152206
    }
]