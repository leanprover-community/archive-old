[
    {
        "content": "<p>While porting <code>data.fintype.option</code>, I replaced an <code>inductive'</code> tactic with an explicit structural recursion to maintain computability.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A recursor principle for finite types, analogous to `Nat.rec`. It effectively says</span>\n<span class=\"sd\">that every `Fintype` is either `Empty` or `Option α`, up to an `Equiv`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">truncRecEmptyOption</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">of_equiv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">},</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_empty</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">PEmpty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_option</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">P</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Trunc</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">suffices</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">Trunc</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">ULift</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n    <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"c1\">-- porting note: do a manual recursion, instead of `induction` tactic,</span>\n  <span class=\"c1\">-- to ensure the result is computable</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">ind</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">Trunc</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">ULift</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ind</span>\n</code></pre></div>\n<p>The lint complains that <code>ind</code> is missing a docstring </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">DEFINITIONS</span> <span class=\"n\">ARE</span> <span class=\"n\">MISSING</span> <span class=\"n\">DOCUMENTATION</span> <span class=\"n\">STRINGS</span><span class=\"o\">:</span> <span class=\"bp\">-/</span>\n<span class=\"c1\">-- Mathlib.Data.Fintype.Option</span>\n<span class=\"k\">#check</span> <span class=\"n\">Fintype.truncRecEmptyOption.ind.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"c\">/-</span><span class=\"cm\"> definition missing documentation string -/</span>\n</code></pre></div>\n<p>But, I cannot attach a docstring to a <code>let rec</code> binding, it complains that a declaration was expected.</p>",
        "id": 322292382,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1674138222
    },
    {
        "content": "<p>For now, just add a <code>-- Porting note</code> and a <code>attribute [nolint]</code>, I guess?</p>",
        "id": 322293083,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674138411
    },
    {
        "content": "<p>I forgot about <code>nolint</code>, thanks for the suggestion</p>",
        "id": 322294077,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1674138612
    },
    {
        "content": "<p>Ah, that doesn't work. It seems the <code>nolint</code> only applies to the original definition, but the auxiliary <code>truncRecEmptyOption.ind</code> definition is still being complained about.<br>\nI'll go for plan B, explicitly moving <code>ind</code> to a separate definition, rather than relying on <code>let rec</code></p>",
        "id": 322294883,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1674138784
    },
    {
        "content": "<p>Does it work to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">nolint</span> <span class=\"n\">SomeLinterName</span><span class=\"o\">]</span> <span class=\"n\">truncRecEmptyOption.ind</span>\n</code></pre></div>\n<p>after the defn?</p>",
        "id": 322295056,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674138820
    },
    {
        "content": "<p>Yes, that did the trick!</p>",
        "id": 322295513,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1674138921
    },
    {
        "content": "<p>Would something along these lines work as well?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- doc string for `f`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">newDef</span> <span class=\"n\">where</span>\n    <span class=\"sd\">/--  I am a docstring -/</span>\n    <span class=\"n\">newDef</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.succ</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">f</span> <span class=\"mi\">3</span>\n<span class=\"k\">#check</span> <span class=\"n\">f.newDef</span> <span class=\"c1\">-- hover over me</span>\n</code></pre></div>",
        "id": 322297271,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1674139309
    },
    {
        "content": "<p>Yes, that one works as well, and is probably a bit cleaner</p>",
        "id": 322300693,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1674140179
    },
    {
        "content": "<p>Ok, I am happy to know that this would have worked: I found the syntax cool and was hoping that it would work in such situations!</p>",
        "id": 322301375,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1674140342
    }
]