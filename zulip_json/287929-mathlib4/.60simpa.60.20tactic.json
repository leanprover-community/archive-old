[
    {
        "content": "<p>After some extra experience, I was able to have a go at the <code>simpa</code> tactic. The PR is not handling \"!\" and \"?\" yet, but it's a start!<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/224\">https://github.com/leanprover-community/mathlib4/pull/224</a></p>",
        "id": 274974848,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647005650
    },
    {
        "content": "<blockquote>\n<p>The PR is not handling \"!\" and \"?\" yet,</p>\n</blockquote>\n<p>At the current stage I think it's best to add the flags to the simpa syntax and add a TODO in the code.</p>",
        "id": 274976984,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647006595
    },
    {
        "content": "<p>I can't figure out how to mitigate the problem that Gabriel pointed <a href=\"https://github.com/leanprover-community/mathlib4/pull/224#issuecomment-1065153028\">here</a>. Any idea what I'm doing wrong?</p>",
        "id": 274999920,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647017189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> I tried your suggestion (using a macro) but the problem is something else. I'm not being able to pass <code>args</code> to <code>simp</code>. For some reason it's being ignored</p>",
        "id": 275020417,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647025888
    },
    {
        "content": "<p>The problem is with how you construct the syntax object for simp.</p>",
        "id": 275020583,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647025959
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">simp</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">cfg</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">disch</span><span class=\"bp\">?.</span><span class=\"n\">getOptional</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Here e.g. args has the syntax kind simpArg', which does not appear in the simp syntax at all.</p>",
        "id": 275020871,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647026089
    },
    {
        "content": "<p>Typically you should annotate the antiquotations with their kind to prevent these kinds of mismatches:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">simp</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">cfg</span><span class=\"o\">:</span><span class=\"n\">config</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"o\">:</span><span class=\"n\">simpArg'</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>etc.</p>",
        "id": 275021064,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647026169
    },
    {
        "content": "<p>Of course this won't work because the simp parser knows nothing about simpArg'.</p>",
        "id": 275021105,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647026197
    },
    {
        "content": "<p>The proper replacement is something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">cfg</span><span class=\"o\">:</span><span class=\"n\">config</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">disch</span><span class=\"bp\">?</span><span class=\"o\">:</span><span class=\"n\">discharger</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 275021205,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647026261
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> What is the proper way to conditionally match/insert the <code>only</code> keyword in simp. I.e., what should the ??? be here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">only</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">simp</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">only</span> <span class=\"bp\">???</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 275021316,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647026316
    },
    {
        "content": "<p>Hmm, I suppose token antiquotations can be mis(?)used for this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"mysimp \"</span> <span class=\"n\">only</span><span class=\"bp\">?</span><span class=\"o\">:(</span><span class=\"bp\">&amp;</span><span class=\"s2\">\"only \"</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">only</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">only</span><span class=\"bp\">?.</span><span class=\"n\">getOptional</span><span class=\"bp\">?</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">simp</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">only</span><span class=\"bp\">%$</span><span class=\"n\">only</span><span class=\"bp\">?</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 275022371,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647026873
    },
    {
        "content": "<p>Should <code>simp only</code> work without a list of lemma names?</p>",
        "id": 275023597,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647027532
    },
    {
        "content": "<p>Another question: what does <code>&amp;</code> in <code>&amp;\"only \"</code> do?</p>",
        "id": 275023867,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647027660
    },
    {
        "content": "<p>I suppose it doesn't make all that much sense, but I don't think it's worth complicating the grammar for that</p>",
        "id": 275023870,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647027662
    },
    {
        "content": "<p>I thought <code>simp only</code> works already.</p>",
        "id": 275023942,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647027705
    },
    {
        "content": "<p>I understood the question to be that Arthur would like to see it not be accepted, but even just <code>simp only</code> can change the goal through e.g. reductions</p>",
        "id": 275024335,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647027857
    },
    {
        "content": "<p>What does <code>&amp;</code> in <code>&amp;\"only \"</code> do?</p>",
        "id": 275028026,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647029704
    },
    {
        "content": "<p>It does not reserve the token, so it can still be used as an identifier in other places. <code>&amp;</code> should only be used where an identifier would <em>not</em> be accepted in any case, e.g. not after <code>term</code>.</p>",
        "id": 275029385,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647030379
    },
    {
        "content": "<p>Alright, getting back to it I just realized that <code>only</code> was not the problematic part. I can't get this to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"mysimp \"</span> <span class=\"n\">args</span><span class=\"bp\">?</span><span class=\"o\">:(</span><span class=\"s2\">\" [\"</span> <span class=\"n\">simpArg</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\"] \"</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"n\">args</span><span class=\"bp\">?.</span><span class=\"n\">getOptional</span><span class=\"bp\">?</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"n\">args</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">simp</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">):</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">mysimp</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"c1\">-- dbg_trace: none</span>\n<span class=\"c1\">-- error: unsolved goals</span>\n<span class=\"c1\">-- P : Prop</span>\n<span class=\"c1\">-- p : P</span>\n<span class=\"c1\">-- ⊢ P</span>\n</code></pre></div>",
        "id": 275097171,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647091914
    },
    {
        "content": "<p>This is not working either:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"mysimp \"</span> <span class=\"n\">args</span><span class=\"o\">:(</span><span class=\"s2\">\" [\"</span> <span class=\"n\">simpArg</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\"] \"</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"n\">args</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">simp</span> <span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">):</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">mysimp</span> <span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"c1\">-- dbg_trace: \"[\"</span>\n<span class=\"c1\">-- error: cannot evaluate code because 'sorryAx' uses 'sorry' and/or contains errors</span>\n</code></pre></div>",
        "id": 275097248,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647092019
    },
    {
        "content": "<p>I have an idea to test</p>",
        "id": 275097628,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647092535
    },
    {
        "content": "<p>This was exactly what I needed: <a href=\"#narrow/stream/270676-lean4/topic/build.20simp.20syntax.3F/near/234368072\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/build.20simp.20syntax.3F/near/234368072</a></p>",
        "id": 275104412,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647101506
    },
    {
        "content": "<p>Okay I was finally able to reach a version of <code>simpa</code> that I think is stable:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/224\">https://github.com/leanprover-community/mathlib4/pull/224</a></p>\n<p>Can someone propose some tests for it, please? I couldn't find tests for <code>simpa</code> in the mathlib3 repo <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 275156294,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647180593
    },
    {
        "content": "<p>This is exciting enough to get me to pull mathlib4 into my project <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> I'll try it out!</p>",
        "id": 275175799,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1647206742
    },
    {
        "content": "<p>Would be nice to have test cases that</p>\n<ul>\n<li>use different configurations</li>\n<li>use different dischargers</li>\n<li>rely on simplifications performed on an existing <code>this</code> before calling <code>assumption</code></li>\n<li>rely on simplifications performed on the provided term <code>e</code> with <code>using e</code> before calling <code>exact e</code></li>\n</ul>\n<p>Help is very much appreciated! <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 275269693,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647278509
    },
    {
        "content": "<p>Added some tests and <a href=\"https://github.com/leanprover-community/mathlib4/blob/6fa280f1f3c894a2e5c7a37f8c0f4e48ced3d857/Mathlib/Tactic/Core.lean#L27-L40\">syntax extraction helpers</a> that might help with future tactics implementations. I suspect the PR is in good shape now (despite the short test suite <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span>)</p>",
        "id": 275278534,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647282432
    },
    {
        "content": "<p>I'm not sure how useful the extraction helpers are in practice.  It's typically easy enough to just pattern match on the syntax.</p>",
        "id": 275280205,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647283200
    },
    {
        "content": "<p>It helps with readability. As an example, instead of writing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">match</span> <span class=\"n\">using</span><span class=\"bp\">?.</span><span class=\"n\">getOptional</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span>   <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">evalTactic</span> <span class=\"bp\">$</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">try</span> <span class=\"n\">simp</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">cfg</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">disch</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">only</span><span class=\"bp\">%$</span><span class=\"n\">only</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[[</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"o\">],</span><span class=\"bp\">*</span><span class=\"o\">]]</span><span class=\"bp\">?</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">)</span>\n    <span class=\"n\">evalTactic</span> <span class=\"bp\">$</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">assumption</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">u</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">usingStx</span><span class=\"bp\">|</span><span class=\"n\">using</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">evalTactic</span> <span class=\"bp\">$</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span>\n      <span class=\"n\">evalTactic</span> <span class=\"bp\">$</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">try</span> <span class=\"n\">simp</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">cfg</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">disch</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">only</span><span class=\"bp\">%$</span><span class=\"n\">only</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[[</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"o\">],</span><span class=\"bp\">*</span><span class=\"o\">]]</span><span class=\"bp\">?</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n      <span class=\"n\">evalTactic</span> <span class=\"bp\">$</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span>                    <span class=\"bp\">=&gt;</span> <span class=\"n\">Elab.throwUnsupportedSyntax</span>\n</code></pre></div>\n<p>I wrote</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">match</span> <span class=\"bp\">←</span> <span class=\"n\">using</span><span class=\"bp\">?.</span><span class=\"n\">getOptional</span><span class=\"bp\">?.</span><span class=\"n\">mapM</span> <span class=\"n\">getUsingArg</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span>   <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">evalTactic</span> <span class=\"bp\">$</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">try</span> <span class=\"n\">simp</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">cfg</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">disch</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">only</span><span class=\"bp\">%$</span><span class=\"n\">only</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[[</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"o\">],</span><span class=\"bp\">*</span><span class=\"o\">]]</span><span class=\"bp\">?</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">)</span>\n    <span class=\"n\">evalTactic</span> <span class=\"bp\">$</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">assumption</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">evalTactic</span> <span class=\"bp\">$</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span>\n    <span class=\"n\">evalTactic</span> <span class=\"bp\">$</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">try</span> <span class=\"n\">simp</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">cfg</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">disch</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">only</span><span class=\"bp\">%$</span><span class=\"n\">only</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[[</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"o\">],</span><span class=\"bp\">*</span><span class=\"o\">]]</span><span class=\"bp\">?</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n    <span class=\"n\">evalTactic</span> <span class=\"bp\">$</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 275280592,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647283373
    },
    {
        "content": "<p>I usually write separate syntax definitions and elab_rules for this.  That is something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"simpa\"</span> <span class=\"o\">(</span><span class=\"s2\">\"using\"</span> <span class=\"n\">term</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">elab_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">simpa</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">using</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"bp\">..</span> <span class=\"c1\">-- e : Option Syntax</span>\n</code></pre></div>",
        "id": 275280897,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647283520
    },
    {
        "content": "<p>We might also want to extend the simple elab-syntax so that you don't need this separation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"simpa\"</span> <span class=\"o\">(</span><span class=\"s2\">\"using\"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span> <span class=\"c1\">-- does not work yet</span>\n</code></pre></div>",
        "id": 275281057,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647283572
    },
    {
        "content": "<p>I spent a lot of time trying to understand what was wrong with my code until I realized it wasn't possible to do it yet <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 275281327,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647283685
    },
    {
        "content": "<p>Actually nvm. I spent a lot of time trying to do something else, which I cannot remember <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 275285452,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647285406
    }
]