[
    {
        "content": "<p><code>data.nat.basic</code> (<a href=\"https://github.com/leanprover-community/mathlib4/pull/729\">mathlib4#729</a>) uses <code>nat.bit</code> and <code>nat.binary_rec</code> which depend on <code>bit0</code>/<code>bit1</code>, which are deprecated. Thoughts?</p>",
        "id": 312649038,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1669648022
    },
    {
        "content": "<p>The consensus is that we could reintroduce them. They are just less central as before.</p>",
        "id": 312649526,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1669648171
    },
    {
        "content": "<p>The annoying bit (<em>ahem</em>) is that they exist but give deprecation warnings</p>",
        "id": 312649826,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1669648253
    },
    {
        "content": "<p>I have encountered (two?) places that used <code>nat.binary_rec</code> and in each place I have just reimplemented it from scratch. See for intance <code>Data.Num.Basic</code>.</p>",
        "id": 312650452,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669648441
    },
    {
        "content": "<p>For things which explicitly use <code>bit0</code> and <code>bit1</code>, I have been marking those declarations as deprecated but turning off the deprecation linter for those declarations.</p>",
        "id": 312650712,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669648505
    },
    {
        "content": "<p>I've just encountered this problem while porting <code>Logic/Equiv/Nat</code> (and in particular <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.nat_sum_nat_equiv_nat_apply\">docs#equiv.nat_sum_nat_equiv_nat_apply</a>). So while we definitely don't need this anymore from a technical point of view, maybe there is still a mathematical point in having operations for manipulating natural numbers in binary. What should we do?</p>",
        "id": 317983013,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1672073789
    },
    {
        "content": "<p>In particular, wouldn't these come up again in the <code>computability</code> library?</p>",
        "id": 317983084,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1672073857
    },
    {
        "content": "<p>yes, the concept of decomposition into binary isn't going anywhere</p>",
        "id": 317985651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672075433
    },
    {
        "content": "<p>it's just the specific functions bit0 and bit1 that may be reconsidered</p>",
        "id": 317985728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672075455
    },
    {
        "content": "<p>On <code>Nat</code> there is a much more sensible way to write those functions, namely <code>2*n</code> and <code>2*n + 1</code></p>",
        "id": 317985828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672075520
    },
    {
        "content": "<p>Okay so I decided to use <code>bit false</code> and <code>bit true</code> instead because <code>bit</code> is not tagged as deprectated. I realize this is a bit stupid because <code>bit</code> is defined in terms of <code>bit0</code> and <code>bit1</code>, but I figured it would be best to \"stop\" the deprecation-zone at the definition of <code>bit</code>. That way, when we want to get rid of them definitively, we only have to provide the definition of <code>bit</code>, which seems like it would be useful anyway to write <code>2*n + (b : Nat)</code>. Does that sound right?</p>",
        "id": 318301766,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1672250326
    },
    {
        "content": "<p>I'd be inclined to make changes like that after the port</p>",
        "id": 318306702,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1672252496
    },
    {
        "content": "<p>yes, I think we aren't ready to do a bit0/bit1 refactor yet</p>",
        "id": 318308793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672253456
    },
    {
        "content": "<p>let's wait until we have all the dependent code available so that we can assess what kind of refactor makes sense</p>",
        "id": 318308840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672253480
    },
    {
        "content": "<p>for now it's just deprecation-tagging to find all the dependents</p>",
        "id": 318308889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672253503
    },
    {
        "content": "<p>Okay so I'll stay with <code>bit0</code> and <code>bit1</code> then</p>",
        "id": 318310410,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1672254211
    },
    {
        "content": "<p>Just to confirm, <code>bit</code> is not being deprecated right?<br>\nJust asking because <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> marked the statement</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">test_bit_zero</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">testBit</span> <span class=\"o\">(</span><span class=\"n\">bit</span> <span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>as deprecated in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1159\">mathlib4#1159</a>, but I don't understand why.</p>",
        "id": 318892596,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672597707
    },
    {
        "content": "<p>I don't think it was me, I think it was someone else working on the PR. There are a whole bunch of deprecated attributes in that file to satisfy the linter</p>",
        "id": 318892686,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1672597777
    },
    {
        "content": "<p>Hmm, I checked <code>git blame</code> on the PR branch for that line</p>",
        "id": 318892767,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672597812
    },
    {
        "content": "<p>It probably was me then. The only reason I would have done it was to satisfy the linter. If the linter doesn't complain about that lemma then it was a mistake.</p>",
        "id": 318893082,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1672598043
    },
    {
        "content": "<p>OK, thanks!</p>",
        "id": 318893425,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672598250
    }
]