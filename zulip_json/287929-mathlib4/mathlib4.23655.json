[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, I've been trying to get <a href=\"https://github.com/leanprover-community/mathlib4/pull/655\">mathlib4#655</a> (<code>Mathlib.Algebra.Ring.Defs</code>) working, but unfortunately the ring / norm_num tactic broke, and I haven't been able to sort it out.</p>\n<ol>\n<li>\n<p>There was previously a mistake in the hierarchy, so <code>NonUnitalNonAssocSemiring</code> was extending <code>AddMonoidWithOne</code>. Hence I made the change to <code>norm_num</code> at <a href=\"https://github.com/leanprover-community/mathlib4/pull/655/files#diff-bd47f2da8493316da2d623a0a737a2eaa7eac3da3bd640c622b60647255fdc87L207\">https://github.com/leanprover-community/mathlib4/pull/655/files#diff-bd47f2da8493316da2d623a0a737a2eaa7eac3da3bd640c622b60647255fdc87L207</a>. This is a bit of a hack anyway, and we probably should document why this <code>Foo.toBar</code> has to be there.</p>\n</li>\n<li>\n<p>But after that the <code>ring</code> tactic wasn't compiling, so I tried the changes at <a href=\"https://github.com/leanprover-community/mathlib4/pull/655/files#diff-535f9e0c361638f97d8fb4b2991f36cff3a21794330dac0ae7fab465f2f3057aL838\">https://github.com/leanprover-community/mathlib4/pull/655/files#diff-535f9e0c361638f97d8fb4b2991f36cff3a21794330dac0ae7fab465f2f3057aL838</a>. This makes it compile, but now all the examples involving <code>CommRing</code> (but not <code>CommSemiring</code> or <code>Ring</code>??) time out.</p>\n</li>\n</ol>\n<p>Would you be able to have a look at this PR?</p>",
        "id": 311106400,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668929746
    },
    {
        "content": "<p>Looks like an instance diamond, there are two ways to get to <code>Distrib</code> from <code>CommRing</code>, going via <code>Ring</code> or <code>CommSemiring</code> and they don't seem to be (obviously) defeq</p>",
        "id": 311110979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668933826
    },
    {
        "content": "<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Ring.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Clear</span><span class=\"bp\">!</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">4000</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">rα</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">CommSemiring</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">CommRing.toCommSemiring</span><span class=\"bp\">;</span> <span class=\"n\">clear</span> <span class=\"n\">rα</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 311111873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668934534
    },
    {
        "content": "<p>Oh dear, so it's a problem in mathlib3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring.defs</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">rα</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">comm_semiring</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">comm_ring.to_comm_semiring</span><span class=\"bp\">;</span> <span class=\"n\">clear</span> <span class=\"n\">rα</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 311112644,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668935008
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">synthesized</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">expression</span> <span class=\"n\">inferred</span> <span class=\"kd\">by</span> <span class=\"n\">typing</span> <span class=\"n\">rules</span><span class=\"o\">,</span> <span class=\"n\">synthesized</span>\n  <span class=\"bp\">@</span><span class=\"n\">distrib.to_has_add.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_distrib.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_ring.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">rα</span><span class=\"o\">))</span>\n<span class=\"n\">inferred</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_2</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">_inst</span> <span class=\"o\">:</span> <span class=\"n\">comm_semiring.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 311112671,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668935024
    },
    {
        "content": "<p>not necessarily; in mathlib3 because of old_structures this ends up unfolding to all the ring fields and then proving them individually defeq, which is kind of dumb but should work. I've been reading the trace and this typeclass defeq proof also seems dumb</p>",
        "id": 311113030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668935289
    },
    {
        "content": "<p>the first bad step I see is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">@</span><span class=\"n\">Distrib.toAdd.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toDistrib.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocSemiring.toNonUnitalNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommSemiring.toSemiring.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toCommSemiring.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n              <span class=\"n\">rα</span><span class=\"o\">)))))</span> <span class=\"bp\">=?=</span>\n  <span class=\"bp\">@</span><span class=\"n\">Distrib.toAdd.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toDistrib.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocRing.toNonUnitalNonAssocRing.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toNonAssocRing.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">rα</span><span class=\"o\">)))))</span>\n\n<span class=\"c1\">--&gt;</span>\n\n  <span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toDistrib.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocSemiring.toNonUnitalNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommSemiring.toSemiring.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toCommSemiring.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n            <span class=\"n\">rα</span><span class=\"o\">))))</span> <span class=\"bp\">=?=</span>\n  <span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toDistrib.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocRing.toNonUnitalNonAssocRing.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toNonAssocRing.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">rα</span><span class=\"o\">))))</span>\n</code></pre></div>\n<p>This turns the problem of proving two <code>Add A</code> structures equal into proving two <code>Distrib A</code> structures equal. Note that <code>NonUnitalNonAssocSemiring.toDistrib</code> is a non-preferred parent structure, so it has a definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">NonUnitalNonAssocSemiring.toDistrib.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">NonUnitalNonAssocSemiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">Distrib</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">α</span> <span class=\"o\">[</span><span class=\"n\">NonUnitalNonAssocSemiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">Distrib.mk</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The right move is to reduce <code>@Distrib.toAdd.{u} α (@NonUnitalNonAssocSemiring.toDistrib.{u} α inst)</code> to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">Distrib.toAdd.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddMonoid.toAddSemigroup.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddCommMonoid.toAddMonoid.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">inst</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>which uses only preferred parents (this is the <code>whnf</code> of the expression).</p>",
        "id": 311113503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668935732
    },
    {
        "content": "<p>what the heck? I \"cleaned up\" <code>Algebra.Ring.Defs</code> by replacing </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"n\">CommRing.toCommSemiring</span> <span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CommSemiring</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">mul_zero</span> <span class=\"o\">:=</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span> <span class=\"o\">:=</span> <span class=\"n\">zero_mul</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"n\">CommRing.toCommSemiring</span> <span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CommSemiring</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>and now that rfl proof is fine</p>",
        "id": 311114395,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668936415
    },
    {
        "content": "<p>Okay, that is weird.</p>",
        "id": 311114912,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668936795
    },
    {
        "content": "<p>it's not completely unexpected; when I was clicking my way through the defeq trace I noticed that it got to that point and then started unfolding multiplications inside the type of the proof of <code>mul_zero</code> in this instance</p>",
        "id": 311115377,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668937136
    }
]