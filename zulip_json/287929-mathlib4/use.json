[
    {
        "content": "<p>I don't know if it's been noticed that the mathlib4 <code>use</code> behaves differently than the mathlib3 one: it seems to behave effectively as <code>use; try { refl }</code>.  So this is a full proof in mathlib4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Data.Nat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Use</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">15</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">use</span> <span class=\"mi\">5</span>\n</code></pre></div>\n<p>whereas the corresponding mathlib3 proof is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.interactive</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">15</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">use</span> <span class=\"mi\">5</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 306747842,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1666990611
    },
    {
        "content": "<p>I would like to advocate for the old behaviour -- <code>use</code> is disproportionately used by novices (power users being more likely to use <code>refine</code>) and novices might find it easier to understand the single-purpose version of the tactic.  (I remember <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> has the NNG disable a similar behaviour in <code>rw</code>, for the same reason.)</p>\n<p>If the consensus is for the new behaviour, would anyone mind at least having an option to toggle the old behaviour?</p>",
        "id": 306750438,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1666991583
    },
    {
        "content": "<p>We've had a discussion about this some time ago.  See the messages around <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20status.3F/near/270894463\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Tactic.20status.3F/near/270894463</a></p>",
        "id": 306754069,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1666993109
    },
    {
        "content": "<p>The following closes the goal. So probably the Lean 3 <code>use</code> only closes syntactic equalities (just like Lean 3 <code>rw</code>), but Lean 4 goes one step further?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.interactive</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">use</span> <span class=\"mi\">5</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 306754313,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1666993209
    },
    {
        "content": "<p>My take on this is that we should change the <code>use</code> behavior anhow.  As I've mentioned there, the current behavior is way too magic and nondeterministic, which also prevents us from producing useful error messages.</p>",
        "id": 306754332,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1666993221
    },
    {
        "content": "<p>I think both using and not using rfl have arguments going for it.  Other tactics like <code>rw</code> do rfl automatically, others don't.</p>",
        "id": 306754468,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1666993291
    },
    {
        "content": "<blockquote>\n<p><code>use</code> is disproportionately used by novices (power users being more likely to use <code>refine</code>)</p>\n</blockquote>\n<p>I really don't think we should have special tactics for novices in mathlib.  This just increases the amount of tactics users have to learn (since you'll have to learn the \"grown-up\" versions anyhow).</p>",
        "id": 306754777,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1666993440
    },
    {
        "content": "<p>(I can see the point of simplified/restricted versions of tactics for courses though.)</p>",
        "id": 306754974,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1666993520
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/use/near/306754777\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p><code>use</code> is disproportionately used by novices (power users being more likely to use <code>refine</code>)</p>\n</blockquote>\n<p>I really don't think we should have special tactics for novices in mathlib.  This just increases the amount of tactics users have to learn (since you'll have to learn the \"grown-up\" versions anyhow).</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> To clarify -- are you saying we should get rid of <code>use</code> altogether?</p>",
        "id": 306755590,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1666993765
    },
    {
        "content": "<p>Relatedly, I don't think that the power user / novice split for <code>refine</code> / <code>use</code> is because <code>use</code> is simpler.  It's because <code>use</code> breaks very easily.  For example you can't do <code>use _</code>.</p>",
        "id": 306755620,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1666993774
    },
    {
        "content": "<blockquote>\n<p>are you saying we should get rid of use altogether?</p>\n</blockquote>\n<p>No, I think that a simpler <code>use</code> would be much more useful.  One where <code>use foo</code> simply means <code>refine ⟨foo, ?_⟩</code>.</p>",
        "id": 306755803,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1666993832
    },
    {
        "content": "<p>This had never occurred to me: can you use <code>use</code> on iffs?</p>",
        "id": 306756283,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1666994025
    },
    {
        "content": "<p>(either the Lean3 or Lean4 version)</p>",
        "id": 306756363,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1666994055
    },
    {
        "content": "<p>E.g. Gabriel's last suggestion seems to make <code>use _</code> a possibile alternative to <code>split</code>.</p>",
        "id": 306756487,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1666994118
    },
    {
        "content": "<p>Yes, I'm also so curious that I'm tempted to turn on the computer and try it!</p>\n<p>I'll go to sleep instead... <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 306756613,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1666994193
    },
    {
        "content": "<p>This works in Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.interactive</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">∧</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">use</span> <span class=\"n\">true.intro</span>\n</code></pre></div>",
        "id": 306757478,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1666994682
    },
    {
        "content": "<p>I think this is very much intentional so that you can <code>use x hx</code> on <code>∃ y, 0 &lt; y ∧ p y</code>.</p>",
        "id": 306757669,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1666994779
    },
    {
        "content": "<p>I use <code>use</code> pretty frequently. For example, it's useful if you have a goal that's an existential and the term that you need to provide is some complicated deeply nested structure that's eventually just, say, a natural number with various properties at each layer. It's much quicker to write <code>use 37</code> and have the tactic add all the sidegoals as opposed to <code>refine &lt;&lt;&lt;&lt;37,_&gt;,_&gt;,_&gt;,...&gt;</code></p>",
        "id": 306757766,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666994830
    },
    {
        "content": "<p>I was more curious about <code>use h</code> when the goal is <code>P ↔ Q</code> and <code>h : P → Q</code>.  Does it work?</p>",
        "id": 306758017,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1666994955
    },
    {
        "content": "<p>I think it does?</p>",
        "id": 306758044,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666994970
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">↔</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">use</span> <span class=\"n\">id</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">id</span>\n</code></pre></div>",
        "id": 306758094,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1666995002
    },
    {
        "content": "<p>Never, until this discussion, had I thought that <code>use</code> could work in this case!</p>",
        "id": 306758381,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1666995125
    },
    {
        "content": "<p>Here is what I have in mind:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">D</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">use</span> <span class=\"mi\">37</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 306758389,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666995132
    },
    {
        "content": "<p>I would rather not use <code>refine</code> in this case</p>",
        "id": 306758397,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666995138
    },
    {
        "content": "<p>That is an interesting application.. do we use this often in mathlib?  I would have never guessed that you can use <code>use</code> for that (and I guess it only works on the first field).</p>",
        "id": 306758961,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1666995442
    },
    {
        "content": "<p>right it only works for the first field.</p>",
        "id": 306759073,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666995506
    },
    {
        "content": "<p>I've certainly used it somewhere... I don't remember exactly where (either mathlib or LTE)</p>",
        "id": 306759095,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666995528
    },
    {
        "content": "<p>What I would really like is to be able to write <code>use A _ B</code> and have it behave as <code>refine &lt;&lt;A,_&gt;,B,_,_,...&gt;</code> (with the obvious generalizations)</p>",
        "id": 306759587,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666995792
    },
    {
        "content": "<p>As Gabriel may remember, <code>use</code> exists because the core Lean 3 <code>existsi</code> was poor at type unification (eg I think things like <code>existsi 37</code> wouldn't make progress on <code>exists n : int, ...</code>) and Rob wrote <code>use</code> as a more user-friendly version. IIRC <code>existsi  _</code> works though.</p>",
        "id": 306760961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666996417
    },
    {
        "content": "<p>I think the reason for not allowing placeholders in <code>use</code> is the expected type is unknown; for example in <code>⟨⟨A,B⟩,C⟩</code>, <code>use _</code> could match either the first field of the first field (A) or the entire first field ⟨A,B⟩. Maybe it could fallback to either destruct nothing or destruct everything? <code>use [A, B, C]</code> is allowed though.</p>",
        "id": 306761566,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1666996784
    },
    {
        "content": "<p><code>existsi</code> in mathlib4 is defined as <code>refine &lt;e, _&gt;</code>, see <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Existsi.lean\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Existsi.lean</a><br>\nwhich is <code>use</code> without trying <code>trivial</code></p>",
        "id": 306772051,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1667004449
    },
    {
        "content": "<p>I thought that we were already aligning <code>existsi</code> to the <code>exists</code> tactic in lean 4?</p>",
        "id": 306772163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667004561
    },
    {
        "content": "<p>I cannot remember having a discussion about something like that, maybe that was before I was porting <code>existsi</code>?</p>",
        "id": 306772519,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1667004930
    },
    {
        "content": "<p>Also it seems that <code>use</code> and <code>exists</code> are literally the same tactic.</p>",
        "id": 306772770,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1667005195
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"use \"</span> <span class=\"n\">es</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">+</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">$</span><span class=\"n\">es</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"n\">trivial</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"exists \"</span> <span class=\"n\">es</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">+</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">$</span><span class=\"n\">es</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"n\">trivial</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 306772863,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1667005261
    },
    {
        "content": "<p>Can you prove that two tactics are equal with <code>rfl</code>?</p>",
        "id": 306789639,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667022280
    },
    {
        "content": "<p>You can state it, but it's not true:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>\n    <span class=\"n\">Mathlib.Tactic.</span><span class=\"bp\">«</span><span class=\"n\">_aux_Mathlib_Tactic_Use___macroRules_Mathlib_Tactic_tacticUse_</span><span class=\"o\">,,</span><span class=\"n\">_1</span><span class=\"bp\">»</span> <span class=\"bp\">=</span>\n    <span class=\"n\">Lean.Parser.Tactic.</span><span class=\"bp\">«</span><span class=\"n\">_aux_Init_Tactics___macroRules_Lean_Parser_Tactic_tacticExists_</span><span class=\"o\">,,</span><span class=\"n\">_1</span><span class=\"bp\">»</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>the reason being that one of them replaces applications of <code>use ...</code> with stuff and the other replaces <code>exists ...</code></p>",
        "id": 306790479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667023154
    },
    {
        "content": "<p>I never cease to be surprised by how literal computers are... <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span></p>",
        "id": 306792382,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1667024957
    },
    {
        "content": "<p>Is there a simple way to obtain the actual name of a tactic/macro, like the ones that Mario used above?</p>",
        "id": 306845571,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667053047
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> I use <code>use</code> relatively frequently to instantiate an existential over a subtype, to get two proof obligations (that the term is in the subtype and also the body of the existential). This is a simpler version of Adam's example.</p>",
        "id": 306848628,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667054470
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/287929-mathlib4/topic/use/near/306845571\">said</a>:</p>\n<blockquote>\n<p>Is there a simple way to obtain the actual name of a tactic/macro, like the ones that Mario used above?</p>\n</blockquote>\n<p>Probably inserting a <code>whatsnew in</code> before the <code>macro</code>.</p>",
        "id": 306892518,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1667081694
    },
    {
        "content": "<p>I reused some tricks from the <code>#help</code> command implementation: you can get the name of a <code>macro_rules</code> by searching for uses of the macro attribute corresponding to the <code>syntax</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">macroAttribute.getEntries</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"bp\">``</span><span class=\"n\">Lean.Parser.Tactic.</span><span class=\"bp\">«</span><span class=\"n\">tacticExists_</span><span class=\"o\">,,</span><span class=\"bp\">»</span> <span class=\"k\">do</span>\n    <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"n\">i.declName</span>\n</code></pre></div>\n<p>The name of the syntax itself can be found by hovering on the <code>macro</code> in <code>macro \"exists \" ...</code></p>",
        "id": 306898692,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667087775
    },
    {
        "content": "<p>I'd like to reopen this discussion from October about the <code>use</code> tactic.  The old <code>use</code> had many features, some advocated for by Adam and Kyle upthread, some considered</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/use/near/306754332\">said</a>:</p>\n<blockquote>\n<p>way too magic and nondeterministic</p>\n</blockquote>\n<p>by Gabriel.  Personally I don't mind whether we implement all the features of the old <code>use</code> or not, but I would really like to get rid of the <code>rfl</code> after filling the existential, since in addition to succeeding or failing by apparent \"magic\" this could get quite slow.</p>\n<p>Two options:</p>\n<ul>\n<li>get rid of the <code>rfl</code> check entirely, so the tactic is literally <code>refine ⟨foo, ?_⟩</code> as Gabriel <a href=\"#narrow/stream/287929-mathlib4/topic/use/near/306755803\">suggested</a></li>\n<li>use only equality up to <code>reducible</code>, the way we <a href=\"https://github.com/leanprover-community/mathlib/blob/0743cc5d9d86bcd1bba10f480e948a257d65056f/src/tactic/interactive.lean#L727\">had in mathlib3</a> by having it invoke the <code>trivial'</code> tactic rather than the <code>trivial</code> tactic</li>\n</ul>",
        "id": 317200864,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671640959
    },
    {
        "content": "<p>I've opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/1153\">mathlib4#1153</a> implementing the first option.  If we prefer the second option, it will take a tiny bit more work, because we don't seem to have <code>trivial'</code> implemented yet.</p>",
        "id": 317204264,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671641950
    },
    {
        "content": "<p>We have <code>existsi</code> as <code>refine ⟨foo, ?_⟩</code> already</p>",
        "id": 317264304,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1671663921
    },
    {
        "content": "<p>You also pointed out last time we discussed this that the previous implementation of <code>use</code> was the same as <code>exists</code>:<br>\n<a href=\"#narrow/stream/287929-mathlib4/topic/use/near/306772863\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/use/near/306772863</a></p>",
        "id": 317264472,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671664018
    },
    {
        "content": "<p>three tactics for two tasks is one tactic too many</p>",
        "id": 317264635,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1671664094
    },
    {
        "content": "<p>What do you think we should do then?  Maybe my second suggestion?</p>\n<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/287929-mathlib4/topic/use/near/317200864\">said</a>:</p>\n<blockquote>\n<ul>\n<li>use only equality up to <code>reducible</code>, the way we <a href=\"https://github.com/leanprover-community/mathlib/blob/0743cc5d9d86bcd1bba10f480e948a257d65056f/src/tactic/interactive.lean#L727\">had in mathlib3</a> by having it invoke the <code>trivial'</code> tactic rather than the <code>trivial</code> tactic</li>\n</ul>\n</blockquote>",
        "id": 317264732,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671664153
    },
    {
        "content": "<p>Then it will be three tactics for three tasks, and the nicest name (<code>use</code>) will go to, in my opinion, the best general-purpose choice among those three.</p>",
        "id": 317264812,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671664204
    },
    {
        "content": "<p>So then we need <code>trivial'</code> (i.e. <code>trivial</code> at the level of reducible); does anyone know whether its skipping so far was deliberate or accidental?  It doesn't show up even on a very early version of the tactic syntax file.<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/b0c3952f590d4b2e301d2ffe13bb815856fff1e5/Mathlib/Mathport/Syntax.lean\">https://github.com/leanprover-community/mathlib4/blob/b0c3952f590d4b2e301d2ffe13bb815856fff1e5/Mathlib/Mathport/Syntax.lean</a></p>",
        "id": 317265164,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671664415
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> told me about <code>with_reducible</code>, which should avoid the need for the variant <code>trivial'</code>.  But I don't understand how it works.  Is this supposed to be reducibly, definitionally true?  (It is accepted by Lean.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">with_reducible</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 317444788,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671740206
    }
]