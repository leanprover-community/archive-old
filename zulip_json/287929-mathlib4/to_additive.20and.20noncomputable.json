[
    {
        "content": "<p>The plain <code>@[to_additive]</code> decorator does not properly transmit <code>noncomputable</code> to the derived definition. It works fine if the tagging is done after the fact:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.ToAdditive</span>\n\n<span class=\"kd\">@[to_additive Bar]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">@[to_additive Bar.bar]</span> <span class=\"c1\">-- this does not work</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Foo.foo</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.choose</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Foo.foo2</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.choose</span> <span class=\"n\">h</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Bar.baz</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.choose</span> <span class=\"n\">h</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">Bar.baz</span><span class=\"o\">]</span> <span class=\"n\">Foo.foo2</span> <span class=\"c1\">-- this works</span>\n</code></pre></div>",
        "id": 310541981,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1668657965
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/625\">mathlib4#625</a></p>",
        "id": 310611650,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1668692561
    }
]