[
    {
        "content": "<p>I hope we can consider the <a class=\"stream\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4\">#mathlib4</a> stream an acceptable location for simple mathematically-inspired tactic questions.</p>\n<p>Question: How can I make a <code>TacticM</code> which performs <code>simp only [one_mul, neg_mul]</code>?</p>",
        "id": 322816864,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674369114
    },
    {
        "content": "<p><code>evalTactic `(simp only [one_mul, neg_mul])</code> is the easy way</p>",
        "id": 322816927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674369144
    },
    {
        "content": "<p>I've also encountered <code>evalTactic (←`(tactic| ring))</code> in mathlib4:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/3fbdae49475528e1e4014189f98d217e67ece6da/Mathlib/Tactic/Linarith/Datatypes.lean#L322\">https://github.com/leanprover-community/mathlib4/blob/3fbdae49475528e1e4014189f98d217e67ece6da/Mathlib/Tactic/Linarith/Datatypes.lean#L322</a><br>\nThat's similar, right?</p>",
        "id": 322816985,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674369239
    },
    {
        "content": "<p>that's what I meant (making MWEs takes a while)</p>",
        "id": 322817433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674369668
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Ring.Defs</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">neg_mul</span><span class=\"o\">]))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 322817526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674369776
    },
    {
        "content": "<p>Ah :-)</p>",
        "id": 322817550,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674369811
    },
    {
        "content": "<p>Isn't there usually a <code>TacticM</code> version of a tactic, though?  I had the impression that it was considered good style to separate out the frontend/syntax from the rest, and that in a situation like this there was some prewritten <code>TacticM</code> <code>simp</code> which I would use.</p>",
        "id": 322817632,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674369871
    },
    {
        "content": "<p>Every tactic is a <code>TacticM</code>. The good style is to make a <code>MetaM</code> version of the tactic, but support for that depends on the tactic and for a lot of things from core you still basically need a syntax on hand unless you want to bypass / redo a lot of the front end work</p>",
        "id": 322817830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674370071
    },
    {
        "content": "<p>calling <code>simp</code>-the-<code>TacticM</code> looks almost the same:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">evalSimp</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">neg_mul</span><span class=\"o\">]))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 322817919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674370130
    },
    {
        "content": "<p>you still need to pass it a syntax in this form</p>",
        "id": 322817936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674370145
    },
    {
        "content": "<p>It seems a bit wordy.  Am I working against intended use in some way?  Would it be more compact if there were a <code>simp</code>-the-<code>MetaM</code> for this?</p>",
        "id": 322818092,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674370314
    },
    {
        "content": "<p>oh if you think this is wordy you don't want to see what calling simp the MetaM looks like</p>",
        "id": 322818212,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674370412
    },
    {
        "content": "<p>Ok, I'll run with this.  If I want a tactic which chains several things together (something I would have written in Lean 3 as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">tac1</span> <span class=\"o\">},</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">tac2</span> <span class=\"o\">},</span> <span class=\"n\">tac3</span><span class=\"o\">,</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">tac4</span> <span class=\"o\">}]</span>\n</code></pre></div>\n<p>) would it be better style to write it as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">tac1</span> <span class=\"o\">}</span> <span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">tac2</span> <span class=\"o\">}</span> <span class=\"bp\">;</span> <span class=\"n\">tac3</span> <span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">tac4</span> <span class=\"o\">})</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">do</span>\n<span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">tac1</span> <span class=\"o\">})</span>\n<span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">tac2</span> <span class=\"o\">})</span>\n<span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">tac3</span><span class=\"o\">)</span>\n<span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">tac4</span> <span class=\"o\">})</span>\n</code></pre></div>",
        "id": 322818420,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674370626
    },
    {
        "content": "<p>And if I need to split it across multiple lines where do I put the linebreaks?</p>",
        "id": 322818498,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674370695
    },
    {
        "content": "<p>Here's the no-stx version of calling simp:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">simpTheorems</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">simpOnlyBuiltins</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"bp\">``</span><span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"bp\">``</span><span class=\"n\">neg_mul</span><span class=\"o\">])</span>\n    <span class=\"bp\">|&gt;.</span><span class=\"n\">foldlM</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">addConst</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">({}</span> <span class=\"o\">:</span> <span class=\"n\">SimpTheorems</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">simpTheorems</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">simpTheorems</span><span class=\"o\">],</span> <span class=\"n\">congrTheorems</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">getSimpCongrTheorems</span> <span class=\"o\">}</span>\n  <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">simpLocation</span> <span class=\"n\">ctx</span> <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">targets</span> <span class=\"bp\">#</span><span class=\"o\">[]</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 322818507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674370722
    },
    {
        "content": "<p>what's a stx?</p>",
        "id": 322818522,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674370747
    },
    {
        "content": "<p>it's actually not as bad as I thought it would be, this is obtained by inlining <code>evalSimp</code>, <code>mkSimpContext</code>, <code>elabSimpArgs</code> with your particular invocation arguments</p>",
        "id": 322818598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674370809
    },
    {
        "content": "<p>stx short for <code>Syntax</code> meaning the part where we construct the expression <code> `(tactic| simp only [one_mul, neg_mul])</code> only to parse it for the actual arguments to pass to the backend</p>",
        "id": 322818624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674370861
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/287929-mathlib4/topic/making.20a.20TacticM/near/322818420\">said</a>:</p>\n<blockquote>\n<p>Ok, I'll run with this.  If I want a tactic which chains several things together (something I would have written in Lean 3 as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">tac1</span> <span class=\"o\">},</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">tac2</span> <span class=\"o\">},</span> <span class=\"n\">tac3</span><span class=\"o\">,</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">tac4</span> <span class=\"o\">}]</span>\n</code></pre></div>\n<p>) would it be better style to write it as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">tac1</span> <span class=\"o\">}</span> <span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">tac2</span> <span class=\"o\">}</span> <span class=\"bp\">;</span> <span class=\"n\">tac3</span> <span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">tac4</span> <span class=\"o\">})</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">do</span>\n<span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">tac1</span> <span class=\"o\">})</span>\n<span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">tac2</span> <span class=\"o\">})</span>\n<span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">tac3</span><span class=\"o\">)</span>\n<span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">tac4</span> <span class=\"o\">})</span>\n</code></pre></div>\n</blockquote>\n<p>Personally I like to do as much control flow stuff as possible in the do block rather than in the syntax, so I would write it like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">do</span>\n  <span class=\"n\">try</span> <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">tac1</span><span class=\"o\">))</span> <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n  <span class=\"n\">try</span> <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">tac2</span><span class=\"o\">))</span> <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n  <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">tac3</span><span class=\"o\">))</span>\n  <span class=\"n\">try</span> <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">tac4</span><span class=\"o\">))</span> <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>(assuming I didn't have any better way to call tac1-4)</p>",
        "id": 322818780,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674371039
    },
    {
        "content": "<p>but either way works</p>",
        "id": 322818851,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674371081
    },
    {
        "content": "<p>The main thing to keep in mind is that <code>tac1; tac2</code> is not actually a tactic (it is a sequence of tactics), so I don't think <code> `(tactic| tac1; tac2)</code> will parse, you have to write <code> `(tactic| (tac1; tac2))</code></p>",
        "id": 322818913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674371139
    },
    {
        "content": "<p>In this case <code>tac2</code> is <code>abel_nf</code>.  I found <code>abelNFTarget</code> which is nearly a TacticM except it needs an <code>AbelNF.Config</code> argument.  Is there a quick way to make an empty one on the fly?</p>",
        "id": 322819011,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674371228
    },
    {
        "content": "<p><code>{}</code> probably</p>",
        "id": 322819034,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674371246
    },
    {
        "content": "<p>Yup!  Thanks!</p>",
        "id": 322819045,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674371267
    }
]