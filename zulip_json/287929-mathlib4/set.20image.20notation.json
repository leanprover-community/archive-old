[
    {
        "content": "<p>I'm happy to fix support for <code>''</code> if there's consensus on that notation (at least for the time being)</p>",
        "id": 314664303,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670502443
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"560559\">Richard Osborn</span> <a href=\"#narrow/stream/287929-mathlib4/topic/data.2Eset.2Ebasic/near/314577573\">said</a>:</p>\n<blockquote>\n<p>Would a unicode double quote work? Not sure which one would best</p>\n</blockquote>\n<p>I would recommend against using unicode symbols that look an awful lot like ascii symbols. There would be debugging nightmares. You would have a cascade of errors if someone accidentally used the wrong kind of symbol in some critical part of mathlib for instance.</p>",
        "id": 314666871,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1670503193
    },
    {
        "content": "<p>If fixing it is easy, we should stick with <code>''</code>. The time to change the notation (if we are going to change it) is after the port, not during it</p>",
        "id": 314667346,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670503336
    },
    {
        "content": "<p>Oh my god, I only just realized that <code>'''</code> is valid syntax for the apostrophe <code>Char</code></p>",
        "id": 314668182,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670503616
    },
    {
        "content": "<p>I don't think that's intended though, let's fix that as well</p>",
        "id": 314668248,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670503630
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/287929-mathlib4/topic/data.2Eset.2Ebasic/near/314668248\">said</a>:</p>\n<blockquote>\n<p>I don't think that's intended though, let's fix that as well</p>\n</blockquote>\n<p>What would the correct notation for the apostrophe Char  be?</p>",
        "id": 314668507,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1670503712
    },
    {
        "content": "<p><code>'\\''</code>, which is in fact used by the character literal parser itself</p>",
        "id": 314668615,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670503755
    },
    {
        "content": "<p>And probably most other languages with similar literal syntax</p>",
        "id": 314668663,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670503771
    },
    {
        "content": "<p>I've noticed that computer scientists are in general much more paranoid about \"oh no two characters which look similar\" than mathematicians. Number theorists use <code>dvd</code> everywhere and this is a weird symbol which looks like pipe but isn't, and things are fine, you just learn the gotcha early on and it's fine. You can't use the wrong symbol in any context because it's an immediate syntax error.</p>",
        "id": 314669038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670503920
    },
    {
        "content": "<p>I am not an expert on what the standard symbols are in specific areas of mathematics, but I would extreme caution in choosing apostrophes as symbol for anything other than chars and strings. The tooling (potentially syntax highlighting) could get messed up. </p>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  : We are paranoid for a good reason. Unlike in latex math, debuggability is important in programming, and anything that makes a piece of syntax less easy to read at a quick glance is harmful for debugging.</p>",
        "id": 314669396,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1670504036
    },
    {
        "content": "<p>So it is not enough that the compiler and tools show syntax errors (which depends as much on your text editor as your language).</p>",
        "id": 314669565,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1670504082
    },
    {
        "content": "<p>86 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/data.2Eset.2Ebasic\">#mathlib4 &gt; data.set.basic</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 314669653,
        "sender_full_name": "Notification Bot",
        "timestamp": 1670504110
    },
    {
        "content": "<p>The tooling concern is not really changed between Lean 3 and 4 though, so I'm happy to give this rope to mathematicians</p>",
        "id": 314670015,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670504222
    },
    {
        "content": "<p>Sounds to me like we're still pushing for <code>''</code>, if it's not too much trouble.</p>",
        "id": 314670225,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670504283
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/287929-mathlib4/topic/set.20image.20notation/near/314670015\">said</a>:</p>\n<blockquote>\n<p>The tooling concern is not really changed between Lean 3 and 4 though, so I'm happy to give this rope to mathematicians</p>\n</blockquote>\n<p>Being tied to the reliability of specific tooling is not a good idea either.</p>",
        "id": 314670253,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1670504297
    },
    {
        "content": "<p>I still personally think <code>''</code> awful though, and that all that's happened is that we have been conditioned to get used to it. However I don't know of a better solution (I do like the idea of weird brackets though, it would be much closer to what mathematicians write on paper, and we are already using weird brackets for field extensions). Patrick's <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mo>∗</mo></msub><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f_*(S)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1757em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span> is the best really, in terms of what we use in other contexts. I don't even know why we're talking about unicode, can't you just let us use LaTeX somehow and it all be displayed in VS Code?</p>",
        "id": 314670283,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670504310
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/1931\">https://github.com/leanprover/lean4/pull/1931</a></p>",
        "id": 314670342,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670504336
    },
    {
        "content": "<p>A quick readability check  : </p>\n<ol>\n<li>This is &lt;single quote&gt;&lt;backslash&gt;&lt;double quote&gt;<code>'\\\"</code> </li>\n<li>This is &lt;single quote&gt;&lt;backslash&gt;&lt;single quote&gt;&lt;single quote&gt; <code>'\\''</code></li>\n</ol>",
        "id": 314670718,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1670504465
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/set.20image.20notation/near/314670283\">said</a>:</p>\n<blockquote>\n<p>I still personally think <code>''</code> awful though, and that all that's happened is that we have been conditioned to get used to it. However I don't know of a better solution (I do like the idea of weird brackets though, it would be much closer to what mathematicians write on paper, and we are already using weird brackets for field extensions). Patrick's <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mo>∗</mo></msub><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f_*(S)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1757em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span> is the best really, in terms of what we use in other contexts. I don't even know why we're talking about unicode, can't you just let us use LaTeX somehow and it all be displayed in VS Code?</p>\n</blockquote>\n<p>I thought the latex is converted to unicode</p>",
        "id": 314670835,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1670504506
    },
    {
        "content": "<p>In general I have the following suggestion: When choosing notation, ask yourself the following question: If this code were written in notepad, would you be able to read it and debug it quickly.</p>",
        "id": 314671267,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1670504635
    },
    {
        "content": "<p>Right, which is a lot uglier than what we are used to seeing in the textbooks. Lean looks more like the textbooks than other ITPs (because other ITPs are dominated by the computer science community which has a far more cautious approach to these matters) and I've heard people say on several occasions that what has drawn them to Lean is that it looks more like mathematics than mathematics written in other systems, but LaTeX rendered the way LaTeX renders it would be better than these clunky unicode versions.</p>",
        "id": 314671424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670504676
    },
    {
        "content": "<p>But lean is an <strong>interactive</strong> theorem prover. Reading it in notepad is very much not an intended use case</p>",
        "id": 314671427,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1670504676
    },
    {
        "content": "<p>Right -- that's the point. We read mathematics in pdf, not notepad. We're not computer scientists.</p>",
        "id": 314671481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670504697
    },
    {
        "content": "<p>In any case, if the notation already worked in lean4, we'd never consider changing it during the port</p>",
        "id": 314671712,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1670504763
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/287929-mathlib4/topic/set.20image.20notation/near/314671427\">said</a>:</p>\n<blockquote>\n<p>But lean is an <strong>interactive</strong> theorem prover. Reading it in notepad is very much not an intended use case</p>\n</blockquote>\n<p>I am aware. Nevertheless, if you want to avoid debugging nightmares, it is safer to have to rely on fewer things working perfectly (in this case tooling).</p>",
        "id": 314672285,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1670504970
    },
    {
        "content": "<p>Further, tying your language design to one toolset is a bad idea. Then the language lives and dies with that toolset.</p>",
        "id": 314672520,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1670505047
    },
    {
        "content": "<p>Also, even within vscode, people use all sorts of themes for all sorts of reasons. These themes make font and styling changes which can also hinder readability if there are very similar looking symbols.</p>",
        "id": 314672802,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1670505156
    },
    {
        "content": "<p>I don't think I've got anything else to add to the discussion, so I'm going to disengage</p>",
        "id": 314673133,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1670505268
    },
    {
        "content": "<blockquote>\n<p>if you want to avoid debugging nightmares</p>\n</blockquote>\n<p>Debugging lean code without access to the lean server (via VSCode, vim, etc) is effectively impossible anyway. There's no way you can meaninfully do so in notepad</p>",
        "id": 314673656,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670505459
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/set.20image.20notation/near/314673656\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>if you want to avoid debugging nightmares</p>\n</blockquote>\n<p>Debugging lean code without access to the lean server (via VSCode, vim, etc) is effectively impossible anyway. There's no way you can meaninfully do so in notepad</p>\n</blockquote>\n<p>I would say I am using \"notepad  readability\"as a metaphor for a situation where you need to debug something and the tools are not functioning properly or don't  clearly tell you what is going wrong. Language designers are careful about potential readability issues for good reasons.</p>",
        "id": 314675429,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1670505999
    },
    {
        "content": "<p>Designing ITPs to function well without any tooling whatsoever is not reasonable. ITPs need to do much more than programming languages.</p>",
        "id": 314675856,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1670506134
    },
    {
        "content": "<p>It would be desirable to have <code>Monad</code>s be universe polymorphic regardless of what the set image notation is, right?</p>",
        "id": 314890053,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1670591038
    },
    {
        "content": "<p>That way I can sell Haskellers with lines like \"You can use <code>f &lt;$&gt; xs</code> to express the image of a set just like in Haskell, just that mathematicians don't like the notation\".</p>",
        "id": 314890386,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1670591133
    },
    {
        "content": "<p>Here's a <a href=\"#narrow/stream/113488-general/topic/Changing.20the.20functor.20typeclasses/near/265813573\">discussion about changing the typeclasses to achieve that in Lean 3</a>, and <a href=\"#narrow/stream/270676-lean4/topic/universe.20polymorphic.20IO/near/282494539\">one about universe-polymorphic IO in Lean 4</a>.</p>",
        "id": 314905323,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670595742
    }
]