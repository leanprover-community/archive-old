[
    {
        "content": "<p>Ok, the macro works, but the issue is that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Convert</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">using</span> <span class=\"mi\">2</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>fails. I think the issue is that the old convert used the assumption in the context, but the Lean 4 version does not do that.</p>\n<p>In fact in mathlib3 this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.congr</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group.defs</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">using</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 306801813,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1667031697
    },
    {
        "content": "<p>Can you isolate the issue to something that <code>congr</code> is doing?</p>",
        "id": 306811665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667036881
    },
    {
        "content": "<p>I can try it, but I don't think I'll have the time for that today.</p>",
        "id": 306812496,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1667037260
    },
    {
        "content": "<p>I don't think that <code>congr</code> is the issue here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Convert</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">using</span> <span class=\"mi\">0</span>\n  <span class=\"n\">congr</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">using</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h</span> <span class=\"n\">using</span> <span class=\"mi\">0</span>\n  <span class=\"n\">congr</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h</span> <span class=\"n\">using</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">H'</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 307266648,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1667291571
    },
    {
        "content": "<p>the first two fail, the last three succeed</p>",
        "id": 307266675,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1667291589
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/convert_to/near/306801813\">said</a>:</p>\n<blockquote>\n<p>I think the issue is that the old convert used the assumption in the context, but the Lean 4 version does not do that.</p>\n</blockquote>\n<p>Just to give a bit of information about the internals of <code>convert</code>/<code>convert_to</code> in mathlib3, they use a special version of <code>congr</code> called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.congr'\">docs#tactic.congr'</a> that <a href=\"https://github.com/leanprover-community/mathlib/blob/65ee8572c60e2909cd78f053024d0f989b76878e/src/tactic/congr.lean#L73\">uses <code>assumption</code></a> among other things.</p>",
        "id": 307267175,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667291855
    },
    {
        "content": "<p>but does <code>convert .. using 0</code> use <code>congr'</code> at all?</p>",
        "id": 307267720,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1667292104
    },
    {
        "content": "<p>Yes, <a href=\"https://github.com/leanprover-community/mathlib/blob/65ee8572c60e2909cd78f053024d0f989b76878e/src/tactic/congr.lean#L191\">it's always used</a></p>",
        "id": 307268026,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667292250
    },
    {
        "content": "<p>And the number <a href=\"https://github.com/leanprover-community/mathlib/blob/65ee8572c60e2909cd78f053024d0f989b76878e/src/tactic/congr.lean#L74\">controls how many times tactic.congr_core'</a> is recursively run.  Even if it's <code>using 0</code> it will at least try <code>assumption &lt;|&gt; reflexivity transparency.none &lt;|&gt; by_proof_irrel</code> first.</p>",
        "id": 307268183,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667292334
    },
    {
        "content": "<p>convert is definitively not the issue: commenting that part out in the tactic is does help</p>",
        "id": 307276696,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1667296211
    },
    {
        "content": "<p>(maybe not too unexpected since it is completely in try-catch blocks)</p>",
        "id": 307276765,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1667296241
    },
    {
        "content": "<p>the issue seems to be <code>elabTermWithHoles</code> in <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Convert.lean#L107\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Convert.lean#L107</a></p>",
        "id": 307278319,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1667296871
    },
    {
        "content": "<p>setting <code>allowNaturalHoles</code>to <code>true</code> in <code>elabTermWithHoles</code> solves the issue</p>",
        "id": 307278732,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1667297030
    },
    {
        "content": "<p>now the question is why was false used and what is the correct thing for <code>convert</code>?</p>",
        "id": 307278887,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1667297091
    },
    {
        "content": "<p>other question: there is an explanation of <code>allowNaturalHoles</code> in the file <code>ElabTerm</code>, but it feels to me that this explanation should be in the docstring of <code>elabTermWithHoles</code> as well. any objections to adding that?</p>",
        "id": 307297923,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1667304772
    },
    {
        "content": "<p>I've made a new PR for this, too <a href=\"https://github.com/leanprover-community/mathlib4/pull/527\">mathlib4#527</a> this time as a branch on leanprover-community.</p>",
        "id": 307302985,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1667306753
    },
    {
        "content": "<p>The difference between <code>allowNaturalHoles</code> and not is the difference between <code>refine'</code> and <code>refine</code></p>",
        "id": 307348520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667319483
    },
    {
        "content": "<p>when it is true, you get a behavior closer to lean 3 where all <code>_</code> (including automatically generated ones from implicit args) are turned into subgoals</p>",
        "id": 307349000,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667319640
    },
    {
        "content": "<p>We would like to migrate to the lean 4 behavior where subgoals are explicitly marked in the syntax with <code>?_</code></p>",
        "id": 307349073,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667319666
    },
    {
        "content": "<p>thanks for explanation, I saw that <code>?_</code> was a thing in Lean 4, but I did not know what it was exactly about.</p>",
        "id": 307422761,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1667345961
    }
]