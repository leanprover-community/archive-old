[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1799\">mathlib4#1799</a> is <code>help-wanted</code>, so I'm going to fix some compile errors.</p>",
        "id": 323164573,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674535629
    },
    {
        "content": "<p>What is the Lean 4 version of has_lift_t?</p>",
        "id": 323164823,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674535864
    },
    {
        "content": "<p><code>MonadLiftT</code>?</p>",
        "id": 323164978,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674535949
    },
    {
        "content": "<p>What \"monad\" means here?</p>",
        "id": 323165012,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674535989
    },
    {
        "content": "<p>The types don't line up.... Grr.</p>",
        "id": 323165270,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674536219
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MonadLiftT#doc\">docs4#MonadLiftT</a> is presumably <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_monad_lift\">docs#has_monad_lift</a>, not has_lift_t</p>",
        "id": 323200010,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674552054
    },
    {
        "content": "<p>It should be something like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CoeTC#doc\">docs4#CoeTC</a> but I'm not sure which one of these Coe* classes should I use.</p>",
        "id": 323206475,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674554022
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/order.2Efilter.2Egerm/near/323164823\">said</a>:</p>\n<blockquote>\n<p>What is the Lean 4 version of has_lift_t?`</p>\n</blockquote>\n<p>I believe there is no direct equivalent of <code>lift</code>, where the coercion needs an explicit <code>â†‘</code>. I suppose we'll have to go for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CoeTail#doc\">docs4#CoeTail</a> since it's the best equivalent to the lean3 semantics, where the resulting type is fixed but the input type could be changed by further coercions. (I understand <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CoeTC#doc\">docs4#CoeTC</a> is there for technical reasons, not meant for implementing further instances.)</p>",
        "id": 323214851,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1674556433
    },
    {
        "content": "<p>My guess would be that there is no such thing as <code>lift</code> for the same reason that there is no such thing as <code>coe</code></p>",
        "id": 323221636,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674558461
    },
    {
        "content": "<p><del>I think you're expected to write a function with a name for <code>lift_t</code>s</del></p>",
        "id": 323221733,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674558484
    },
    {
        "content": "<p>Oh nevermind, <code>lift_t</code> still has a place because it's transitive</p>",
        "id": 323221837,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674558516
    },
    {
        "content": "<p>Maybe we should just forward-port <code>lift_t</code>?</p>",
        "id": 323221864,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674558524
    }
]