[
    {
        "content": "<p>I've started the initial work for porting over <code>CategoryTheory.NaturalIsomorphism</code> and noticed that we had renamed <code>category_theory.isomorphism</code> to <code>CategoryTheory.Iso</code>. Should this name change be reflected in other uses of the word isomorphism? Also, I have been running into issues with lean4 not being able use <code>category.assoc</code> in rewrites. Has anyone else ran into this issue? Seems like <code>category.assoc</code>'s type is more general over universes, but it isn't clear how lean is getting confused.</p>",
        "id": 313414909,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1669946945
    },
    {
        "content": "<p>Sorry, that file rename was my doing, and probably ill-considered. The type has always been named <code>iso</code> (now <code>Iso</code>), so it shouldn't be too much trouble. But we can also just change the name back.</p>",
        "id": 313415489,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669947461
    },
    {
        "content": "<p>We should either rename <code>CategoryTheory.NaturalIsomorphism</code> to <code>CategoryTheory.NatIso</code>, or rename <code>CategoryTheory.Iso</code> back to <code>CategoryTheory.Isomorphism</code>.</p>",
        "id": 313415558,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669947510
    },
    {
        "content": "<p>I'm a bit surprised about the rewrite issues with <code>assoc</code>, I hadn't see that yet. Is there a branch to look at?</p>",
        "id": 313415643,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669947542
    },
    {
        "content": "<p>It seems like the convention is shortening the names (<code>NatTrans.lean</code>), so I will follow that for now. Will push a branch momentarily</p>",
        "id": 313416030,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1669947899
    },
    {
        "content": "<p>Ok, I've created the PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/820\">mathlib4#820</a>. Will continue to work around the <code>category.assoc</code> errors.</p>",
        "id": 313416962,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1669948632
    },
    {
        "content": "<p>lean4 is also having trouble using <code>Iso.inv_hom_id_app_assoc</code> and <code>Iso.inv_hom_id_assoc</code> . Probably a similar issue.</p>",
        "id": 313417766,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1669949284
    },
    {
        "content": "<p>My understanding of the error in <a href=\"https://github.com/leanprover-community/mathlib4/pull/820\">mathlib4#820</a> is that it is the <code>reassoc</code> attribute which is at fault. Right now it's auto-generating <code>X_assoc</code> errors which do not correspond to the Lean 3 declarations (are these being auto-aligned BTW?). I didn't observe any problems rewriting with <code>category.assoc</code> itself. In the file <code>NatIso.lean</code> in the branch:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp, reassoc]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">inv_hom_id_app</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">‚âÖ</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Œ±.inv.app</span> <span class=\"n\">X</span> <span class=\"bp\">‚â´</span> <span class=\"n\">Œ±.hom.app</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"mi\">ùüô</span> <span class=\"o\">(</span><span class=\"n\">G.obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">NatTrans.app</span> <span class=\"n\">Œ±.inv_hom_id</span><span class=\"o\">)</span> <span class=\"n\">X</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">category_theory.iso.inv_hom_id_app</span> <span class=\"n\">CategoryTheory.Iso.inv_hom_id_app</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">inv_hom_id_app_assoc</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">NatTrans.app (Œ±.inv ‚â´ Œ±.hom) X ‚â´ h = NatTrans.app (ùüô ?m.1943) X ‚â´ h</span>\n<span class=\"cm\">-/</span>\n<span class=\"c1\">-- this is definitely wrong: for example the ùüô should have been cancelled.</span>\n<span class=\"c1\">-- The below lemma is what I believe should have been generated:</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">inv_hom_id_app_assoc'</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">‚âÖ</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G.obj</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Œ±.inv.app</span> <span class=\"n\">X</span> <span class=\"bp\">‚â´</span> <span class=\"n\">Œ±.hom.app</span> <span class=\"n\">X</span> <span class=\"bp\">‚â´</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">Category.assoc</span><span class=\"o\">,</span> <span class=\"n\">inv_hom_id_app</span><span class=\"o\">,</span> <span class=\"n\">Category.id_comp</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>And now <code>simp</code> works fine to close the goal in <code>naturality_1</code> later on. Unfortunately I can't understand how <code>reassoc</code> works but this I believe is the core issue.</p>",
        "id": 313544814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670000650
    },
    {
        "content": "<p>Great, thanks for diagnosing. The reassoc attribute is a completely different implementation than in mathlib3, so likely I missed something. I'll look later today.</p>",
        "id": 313545944,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670000973
    },
    {
        "content": "<p>Okay, I've pushed a fix to <code>reassoc</code> directly to this branch.</p>",
        "id": 313553724,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670003111
    },
    {
        "content": "<p><code>reassoc</code> was reading the proof, and inferring the type it was meant to be reassociating from that, and I just needed to tell it to read the declared type instead.</p>",
        "id": 313553823,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670003146
    }
]