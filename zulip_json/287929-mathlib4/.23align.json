[
    {
        "content": "<p>I'm still not clear on #align. Porting data.bool.basic I find that mathlib3port has renamed lean 3's <code>decidable_of_decidable_of_iff</code> to <code>decidableOfDecidableOfIff</code>, but in core Lean 4 it is still called <code>decidable_of_decidable_of_iff</code>. So something needs to be #align ed, but if I try using #align in mathlib4 it doesn't work -- do I need an import or am I supposed to be #align ing it elsewhere?</p>",
        "id": 305397516,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666369985
    },
    {
        "content": "<p>Similarly <code>ff</code> needs to be aligned to <code>false</code>. Ideally I should be making these alignments the moment I spot them, presumably?</p>",
        "id": 305398015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666370137
    },
    {
        "content": "<p>Wait -- something is actually broken here in the auto porting program. Lean 3 <code>theorem bnot_false : bnot ff = tt</code> is being translated to theorem bnot_false : bnot false = tt<code> and similarly the port program has generated </code>theorem bnot_true : bnot true = ff<code>. So </code>bnot<code> is not being changed to </code>not<code>, and </code>tt<code> and </code>ff<code> are sometimes not changed to </code>true<code> and </code>false`. Is this an issue or do I just muddle on?</p>",
        "id": 305399010,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666370424
    },
    {
        "content": "<p>You need to <code>import Mathlib.Mathport.Rename</code> before you can use the <code>#align</code> command (since it is defined in mathlib4 itself), but you can do so from any file. Regarding the last point, it is possible that mathport will fail to apply a rename if it is unable to figure out what a name resolves to; I suspect that's what is happening with <code>bnot_true</code> and <code>bnot_false</code>.</p>",
        "id": 305440424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666385396
    },
    {
        "content": "<p>I need to know more about how <code>#align</code> works in order to align <code>data.bool.basic</code> (all the lemmas are ported but aligning is holding me up). Here's an example of what I don't know. If I <code>#align bool Bool</code> and I <code>#align to_bool decide</code>, then do I still need to <code>#align bool.to_bool_coe Bool.decide_coe</code>? If so then is it correct to be aligning the full names with the changed namespaces?</p>\n<p>Another question: if I <code>#align bool Bool</code> then I don't get an error, suggesting that it's not already been <code>#align</code>ed. But how come mathlib3port is changing <code>namespace bool</code> to <code>namespace Bool</code>?</p>",
        "id": 307416368,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667342631
    },
    {
        "content": "<blockquote>\n<p>If I <code>#align bool Bool</code> and I <code>#align to_bool decide</code>, then do I still need to <code>#align bool.to_bool_coe Bool.decide_coe</code>? If so then is it correct to be aligning the full names with the changed namespaces?</p>\n</blockquote>\n<p>Yes, and yes</p>",
        "id": 307416518,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667342703
    },
    {
        "content": "<blockquote>\n<p>Another question: if I <code>#align bool Bool</code> then I don't get an error, suggesting that it's not already been <code>#align</code>ed. But how come mathlib3port is changing <code>namespace bool</code> to <code>namespace Bool</code>?</p>\n</blockquote>\n<p>That's because mathport uses a default snake-to-camel-case renaming convention if you don't give it any explicit renaming instructions. <code>bool</code> is a type, so it gets the capital camel case convention, which yields the name <code>Bool</code> (which happens to be the right answer, so no <code>#align</code> is necessary).</p>",
        "id": 307416619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667342760
    },
    {
        "content": "<p>In general if I <code>#align foo bar</code> then I still need to <code>#align foo_iff bar_iff</code>?</p>",
        "id": 307417196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667343008
    },
    {
        "content": "<p>Do I need to <code>#align foo.mk bar.mk</code>?</p>",
        "id": 307417225,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667343021
    },
    {
        "content": "<p>yes and yes</p>",
        "id": 307419966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667344348
    },
    {
        "content": "<p>for the latter, I would like to improve mathport so it can align namespaces, but I don't think it does currently</p>",
        "id": 307419994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667344372
    },
    {
        "content": "<p>although you can sometimes get namespace alignment \"by accident\" simply because the namespace is only written in one place (in the <code>namespace</code> command) so aligning that automatically moves all the lemmas too</p>",
        "id": 307420069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667344430
    },
    {
        "content": "<p>but that doesn't help if you refer to the lemma directly by name later, outside the namespace</p>",
        "id": 307420141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667344455
    },
    {
        "content": "<p>OK so basically I should maximally #align. Thanks!</p>",
        "id": 307421260,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667345119
    },
    {
        "content": "<p>Just to check, are many to one mappings, for when <code>coe</code> makes things syntactically equal, ok?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">foo.val_bar</span> <span class=\"n\">Foo.val_bar</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">foo.coe_bar</span> <span class=\"n\">Foo.val_bar</span>\n</code></pre></div>",
        "id": 320998376,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673545929
    },
    {
        "content": "<p>Yes, Mario told me so this morning.</p>",
        "id": 321007693,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673548639
    }
]