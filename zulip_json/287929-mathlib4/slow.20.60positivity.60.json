[
    {
        "content": "<p>I have a <code>positivity</code> call that seems very slow.  Maybe an expert (<span class=\"user-mention\" data-user-id=\"243791\">@David Renshaw</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ?) could look at it?  Or perhaps I could do some diagnosis myself if someone can suggest some tools (e.g. is there a way to time how long  variations on this take)?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Rat.Order</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Positivity</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">positivity</span>\n</code></pre></div>",
        "id": 322813569,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674365942
    },
    {
        "content": "<p>It apparently spends a long time trying to decide whether <code>2 * b^2 + a^2</code> is definitionally equal to <code>8</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">146166</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=?=</span> <span class=\"mi\">8</span>\n  <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">146093</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">instHAdd.1</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">Rat.instOfNatRat.1</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">146072</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Add.add</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"mi\">8</span><span class=\"o\">)</span>\n      <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">146044</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Add.add</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">IntCast.intCast</span> <span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"mi\">8</span><span class=\"o\">)</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">146019</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Rat.instAddRat.1</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">Rat.instIntCastRat.1</span> <span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"mi\">8</span><span class=\"o\">)</span>\n          <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">146008</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Rat.add</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">Rat.ofInt</span> <span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"mi\">8</span><span class=\"o\">)</span>\n            <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">145997</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Rat.add</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">Rat.mk'</span> <span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"mi\">1</span>\n              <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000000</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">ℚ</span> <span class=\"bp\">=?=</span> <span class=\"n\">ℚ</span>\n              <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">434544</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"o\">(</span><span class=\"n\">Rat.add</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"bp\">=?=</span> <span class=\"n\">Int.ofNat</span> <span class=\"mi\">8</span>\n                <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">434532</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"o\">(</span><span class=\"n\">Rat.add</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"n\">Int.ofNat</span> <span class=\"mi\">8</span>\n                  <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.onFailure</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">956389</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"o\">(</span><span class=\"n\">Rat.add</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"n\">Int.ofNat</span> <span class=\"mi\">8</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 322854307,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674391848
    },
    {
        "content": "<p>ah, <code>with_reducible positivity</code> goes a lot faster</p>",
        "id": 322854402,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674391916
    },
    {
        "content": "<p>(so, similar to <a href=\"#narrow/stream/287929-mathlib4/topic/congr.20tactic.20hitting.20max.20recursion.20depth/near/322619083\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/congr.20tactic.20hitting.20max.20recursion.20depth/near/322619083</a> )</p>",
        "id": 322854709,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674392040
    },
    {
        "content": "<p>This takes a long time to fail:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 322859494,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674394406
    },
    {
        "content": "<p>A bit more minimal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Rat.Basic</span>\n\n<span class=\"c1\">-- I expect this to fail quickly with a `type mismatch` error or similar.</span>\n<span class=\"c1\">-- Instead, I get, after waiting many seconds:</span>\n<span class=\"c1\">--   timeout at 'whnf', maximum number of heartbeats (200000) has been reached</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 322860489,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674394874
    },
    {
        "content": "<p>Would <a href=\"https://github.com/leanprover/lean4/pull/2003\">lean4#2003</a> be useful here?</p>",
        "id": 322866143,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1674397498
    },
    {
        "content": "<p>That should be a meme</p>",
        "id": 322866173,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674397511
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/PTkUCubzRvQJYkfwPJDa8L_j/image.png\">image.png</a> as requested</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/PTkUCubzRvQJYkfwPJDa8L_j/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/PTkUCubzRvQJYkfwPJDa8L_j/image.png\"></a></div>",
        "id": 322871598,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674399944
    },
    {
        "content": "<p>even more minimal</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Rat.Basic</span>\n\n<span class=\"c1\">-- I expect this to fail quickly with a `type mismatch` error or similar.</span>\n<span class=\"c1\">-- Instead, I get, after waiting many seconds:</span>\n<span class=\"c1\">--   timeout at 'whnf', maximum number of heartbeats (200000) has been reached</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 322877369,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674402796
    },
    {
        "content": "<p>what does <code>#whnf</code> do on that example?</p>",
        "id": 322877630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674402914
    },
    {
        "content": "<p>what exact syntax do you want me to type? I'm unfamiliar with <code>#whnf</code></p>",
        "id": 322877764,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674402972
    },
    {
        "content": "<p><code>#whnf</code> is like <code>#simp</code>, <code>#eval</code>, etc you give it a term and it whnfs it</p>",
        "id": 322877788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674402993
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Rat.Basic</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span>\n<span class=\"bp\">#</span><span class=\"n\">whnf</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>I guess</p>",
        "id": 322877828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674403025
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Rat.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">whnf</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Decidable.rec</span>\n<span class=\"cm\">  (fun h =&gt;</span>\n<span class=\"cm\">    (fun hg =&gt;</span>\n<span class=\"cm\">        let den := (1 * a ^ 2).den / Nat.gcd (1 * a ^ 2).den 1.den * 1.den;</span>\n<span class=\"cm\">        let num :=</span>\n<span class=\"cm\">          (1 * a ^ 2).num * ↑(1.den / Nat.gcd (1 * a ^ 2).den 1.den) +</span>\n<span class=\"cm\">            1.num * ↑((1 * a ^ 2).den / Nat.gcd (1 * a ^ 2).den 1.den);</span>\n<span class=\"cm\">        let g1 := Nat.gcd (Int.natAbs num) (Nat.gcd (1 * a ^ 2).den 1.den);</span>\n<span class=\"cm\">        let_fun den_nz := (_ : (1 * a ^ 2).den / Nat.gcd (1 * a ^ 2).den 1.den * 1.den ≠ 0);</span>\n<span class=\"cm\">        let_fun e :=</span>\n<span class=\"cm\">          (_ :</span>\n<span class=\"cm\">            let den := (1 * a ^ 2).den / Nat.gcd (1 * a ^ 2).den 1.den * 1.den;</span>\n<span class=\"cm\">            let num :=</span>\n<span class=\"cm\">              (1 * a ^ 2).num * ↑(1.den / Nat.gcd (1 * a ^ 2).den 1.den) +</span>\n<span class=\"cm\">                1.num * ↑((1 * a ^ 2).den / Nat.gcd (1 * a ^ 2).den 1.den);</span>\n<span class=\"cm\">            Nat.gcd (Int.natAbs num) (Nat.gcd (1 * a ^ 2).den 1.den) = Nat.gcd (Int.natAbs num) den);</span>\n<span class=\"cm\">        Rat.maybeNormalize num den g1 (_ : den / g1 ≠ 0) (_ : Nat.coprime (Int.natAbs (Int.div num ↑g1)) (den / g1)))</span>\n<span class=\"cm\">      h)</span>\n<span class=\"cm\">  (fun h =&gt;</span>\n<span class=\"cm\">    (fun hg =&gt;</span>\n<span class=\"cm\">        let_fun den_nz := (_ : (1 * a ^ 2).den * 1.den ≠ 0);</span>\n<span class=\"cm\">        let_fun reduced :=</span>\n<span class=\"cm\">          (_ :</span>\n<span class=\"cm\">            Nat.gcd (Int.natAbs ((1 * a ^ 2).num * ↑1.den + 1.num * ↑(1 * a ^ 2).den)) ((1 * a ^ 2).den * 1.den) = 1);</span>\n<span class=\"cm\">        Rat.mk' ((1 * a ^ 2).num * ↑1.den + 1.num * ↑(1 * a ^ 2).den) ((1 * a ^ 2).den * 1.den))</span>\n<span class=\"cm\">      h)</span>\n<span class=\"cm\">  (Nat.instDecidableCoprime (1 * a ^ 2).den 1.den)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 322877898,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674403063
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/slow.20.60positivity.60/near/322866173\">said</a>:</p>\n<blockquote>\n<p>That should be a meme</p>\n</blockquote>\n<p>We may have found a new universal New Yorker cartoon caption.<br>\n<a href=\"/user_uploads/3121/83JRECTRBVWr5C1hDbgh9jYE/lean4-2003.png\">lean4-2003.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/83JRECTRBVWr5C1hDbgh9jYE/lean4-2003.png\" title=\"lean4-2003.png\"><img src=\"/user_uploads/3121/83JRECTRBVWr5C1hDbgh9jYE/lean4-2003.png\"></a></div>",
        "id": 322881360,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674404867
    },
    {
        "content": "<p>oh interesting, I can't reproduce the issue in std</p>",
        "id": 322882017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674405242
    },
    {
        "content": "<p><code>a ^ 2</code> isn't valid using only std, and <code>a * a</code> doesn't exhibit the issue</p>",
        "id": 322882091,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674405269
    },
    {
        "content": "<p>yep, I noticed that too</p>",
        "id": 322882103,
        "sender_full_name": "David Renshaw",
        "timestamp": 1674405281
    },
    {
        "content": "<p>and <code>example {a : ℚ} : a^2 = a * a := rfl</code> is also slow</p>",
        "id": 322882142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674405306
    },
    {
        "content": "<p>well I guess the definition is <code>example {a : ℚ} : a^2 = a * (a * 1) := rfl</code> and this works (quickly)</p>",
        "id": 322882208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674405343
    },
    {
        "content": "<p>here's a mathlib-free version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.Rat.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Rat.npow</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Rat</span> <span class=\"bp\">→</span> <span class=\"n\">Rat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">Rat.npow</span> <span class=\"n\">n</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">Rat.npow</span> <span class=\"mi\">2</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 322882805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674405677
    },
    {
        "content": "<p>Thanks for looking into this. This:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"243791\">David Renshaw</span> <a href=\"#narrow/stream/287929-mathlib4/topic/slow.20.60positivity.60/near/322854402\">said</a>:</p>\n<blockquote>\n<p>ah, <code>with_reducible positivity</code> goes a lot faster</p>\n</blockquote>\n<p>solves all the problems in my use case (maybe that should be the default behaviour of <code>positivity</code> anyway?).</p>",
        "id": 322885847,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674407362
    },
    {
        "content": "<p>However, the minimized example is pretty horrifying, hope we fix it!</p>",
        "id": 322885870,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674407380
    },
    {
        "content": "<p>it's already fixed in std</p>",
        "id": 322887687,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674408471
    },
    {
        "content": "<p>(What was the fix?)</p>",
        "id": 322888118,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674408718
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/commit/04b3c9831e0c141713a70e68af7e40973ec9a1ff\">https://github.com/leanprover/std4/commit/04b3c9831e0c141713a70e68af7e40973ec9a1ff</a></p>",
        "id": 322888474,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1674408937
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/leanprover-community/mathlib4/pull/1767\">mathlib4#1767</a> to get that change into mathlib, hope I did it right.</p>",
        "id": 322893475,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674412154
    },
    {
        "content": "<p>Looks like <code>Mathlib/Data/Rat/Defs.lean</code> no longer compiles</p>",
        "id": 322896697,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1674414279
    },
    {
        "content": "<p>Hopefully it's a matter of adding a few <code>delta Rat.mul</code>?  I don't have time today but would be grateful if someone else wants to pick it up.</p>",
        "id": 322897062,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674414506
    },
    {
        "content": "<p>Yeah, fixed. (Too bad there's no <code>Rat.inv_zero</code> lemma in Std)</p>",
        "id": 322901063,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1674417263
    },
    {
        "content": "<p>PR's welcome..</p>",
        "id": 322902022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674417884
    },
    {
        "content": "<p>I was avoiding that under the assumption that you'd be moving a lot of mathlib code anyway at some point, but could do</p>",
        "id": 322910981,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1674424221
    },
    {
        "content": "<p>I'm guessing lots of Rat lemmas would fall in Std purview, but it takes a lot of work to figure out which can / can't be disentangled from mathlib</p>",
        "id": 322918971,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674430727
    },
    {
        "content": "<p>all of them should be disentanglable, except for the ones that involve mathlib typeclasses in the statement</p>",
        "id": 322939630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674449201
    }
]