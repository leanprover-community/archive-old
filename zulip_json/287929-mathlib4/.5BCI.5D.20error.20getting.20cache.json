[
    {
        "content": "<p>on <a href=\"https://github.com/leanprover-community/mathlib4/pull/1692\">mathlib4#1692</a>, I'm getting a CI error due to cache. how can I fix this? I already tried rerunning CI: <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/3962301364/jobs/6788845462\">https://github.com/leanprover-community/mathlib4/actions/runs/3962301364/jobs/6788845462</a></p>",
        "id": 322386482,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674165129
    },
    {
        "content": "<p>Importing <code>Mathlib.Data.Int.Gcd</code> is causing <code>cache</code> to search for a <code>Mathlib/Data/Int/Gcd.lean</code>, but the file is called <code>Mathlib/Data/Int/GCD.lean</code></p>",
        "id": 322396059,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674168927
    },
    {
        "content": "<p>Is Lean's import system case insensitive? (and out of curiosity, if so, why?)</p>",
        "id": 322396159,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674168968
    },
    {
        "content": "<p>Anyway, the easy solution is doing <code>import Mathlib.Data.Int.GCD</code> instead</p>",
        "id": 322396764,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674169210
    },
    {
        "content": "<p>Can we make <code>cache</code> ignore import errors?</p>",
        "id": 322396937,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674169299
    },
    {
        "content": "<p>It needs the right imports to properly compute the file hash</p>",
        "id": 322397162,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674169407
    },
    {
        "content": "<p>I mean, when I used <code>lake build</code> and ran this file stuff was fine so however it's done it should be the same level of dependence on casing either way</p>",
        "id": 322397294,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674169458
    },
    {
        "content": "<p>(also this import was generated by mathport so that should get fixed at the mathport level)</p>",
        "id": 322397312,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674169469
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.5BCI.5D.20error.20getting.20cache/near/322396159\">said</a>:</p>\n<blockquote>\n<p>Is Lean's import system case insensitive? (and out of curiosity, if so, why?)</p>\n</blockquote>\n<p>In some of my ports I had to fix the case of some imports since they showed up as errors</p>",
        "id": 322400383,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1674170985
    },
    {
        "content": "<p>That's just when we change the case relative to mathport</p>",
        "id": 322400979,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1674171275
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.5BCI.5D.20error.20getting.20cache/near/322397162\">said</a>:</p>\n<blockquote>\n<p>It needs the right imports to properly compute the file hash</p>\n</blockquote>\n<p>Yes, I understand that.  I think we should just print a warning in this case and ignore the file, instead of failing completely as we do now.</p>",
        "id": 322402387,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674172083
    },
    {
        "content": "<p>I'm thinking through the consequences. It would create a hash chain that's unresponsive to changes. Meaning that eventual changes to <code>Mathlib/Data/Int/GCD.lean</code> wouldn't trigger a change in the hashes of the files that import it, generating a breach for a cascade of hash collisions</p>",
        "id": 322403347,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674172688
    },
    {
        "content": "<p>I think the suggestion is simply to skip constructing the file cache for that file and all its dependents</p>",
        "id": 322403597,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674172856
    },
    {
        "content": "<p>meaning that the file has to be rebuilt from scratch</p>",
        "id": 322403633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674172870
    },
    {
        "content": "<p>we don't want to make a cache file unless we can do so correctly, but if we can't it shouldn't break the build</p>",
        "id": 322403712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674172905
    },
    {
        "content": "<p>Okay, but then if a file with an incorrect import sneaks in, it will cause <code>cache</code> not to do its job many times</p>",
        "id": 322404057,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674173102
    },
    {
        "content": "<p>I think that's an independent issue</p>",
        "id": 322404131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674173149
    },
    {
        "content": "<p>Right. If it were me, I wouldn't be willing to pay the price of such sneaky and viral increase in computational cost for the price of a few simple import line change</p>",
        "id": 322404439,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674173313
    },
    {
        "content": "<p>Because it will take someone's eye to notice \"hey, cache is taking too long here\". And then it might be the case that it's been recomputing a lot of things because one import line was wrong 20 (or who knows how many) PRs ago</p>",
        "id": 322404513,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674173359
    },
    {
        "content": "<p>at least it shouldn't give such an error that doesn't explain the likely source. i assume the imports that mathport gives are the golden standard, so I'd never be tempted to check them</p>",
        "id": 322404938,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674173575
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.5BCI.5D.20error.20getting.20cache/near/322404938\">said</a>:</p>\n<blockquote>\n<p>i assume the imports that mathport gives are the golden standard, so I'd never be tempted to check them</p>\n</blockquote>\n<p>That is very far from the truth. Mathport is especially bad at imports right now, and most of the work is being done by regexes in <a href=\"http://start_port.sh\">start_port.sh</a></p>",
        "id": 322405266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674173763
    },
    {
        "content": "<p>/poll What to do with wrong imports?<br>\nSkip caching for it and accept the risk of sneaky and viral increases in the CI time and computational cost<br>\nJust print a better error message</p>",
        "id": 322405441,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674173863
    },
    {
        "content": "<p>It should not be failing if lean is okay with the import. If lean is not okay then it doesn't really matter, does it?</p>",
        "id": 322405541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674173911
    },
    {
        "content": "<blockquote>\n<p>Because it will take someone's eye to notice \"hey, cache is taking too long here\".</p>\n</blockquote>\n<p>My suggestion was to print a warning in this case.</p>\n<blockquote>\n<p>And then it might be the case that it's been recomputing a lot of things because one import line was wrong 20 (or who knows how many) PRs ago</p>\n</blockquote>\n<p>If the PR has been merged into master, then the imports will be correct.</p>",
        "id": 322405546,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674173916
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.5BCI.5D.20error.20getting.20cache/near/322405266\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.5BCI.5D.20error.20getting.20cache/near/322404938\">said</a>:</p>\n<blockquote>\n<p>i assume the imports that mathport gives are the golden standard, so I'd never be tempted to check them</p>\n</blockquote>\n<p>That is very far from the truth. Mathport is especially bad at imports right now, and most of the work is being done by regexes in <a href=\"http://start_port.sh\">start_port.sh</a></p>\n</blockquote>\n<p>I've added a note in the wiki for this</p>",
        "id": 322405602,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674173955
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.5BCI.5D.20error.20getting.20cache/near/322405546\">said</a>:</p>\n<blockquote>\n<p>If the PR has been merged into master, then the imports will be correct.</p>\n</blockquote>\n<p>Then building would fail in this case?</p>",
        "id": 322405735,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674174019
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.5BCI.5D.20error.20getting.20cache/near/322404057\">said</a>:</p>\n<blockquote>\n<p>Okay, but then if a file with an incorrect import sneaks in, it will cause <code>cache</code> not to do its job many times</p>\n</blockquote>\n<p>To be clear: in my suggestion, we would skip all files that depend on the missing file.  We wouldn't produce (or query) caches for files with transitively missing imports.</p>",
        "id": 322405779,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674174048
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.5BCI.5D.20error.20getting.20cache/near/322397294\">said</a>:</p>\n<blockquote>\n<p>I mean, when I used <code>lake build</code> and ran this file stuff was fine</p>\n</blockquote>\n<p>Then why did this happen?</p>",
        "id": 322405881,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674174107
    },
    {
        "content": "<p>That's the second issue, independent of whether cache should break the build. It sounds like the import resolution algorithm is not the same in the cache as in lake/lean4</p>",
        "id": 322406187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674174275
    },
    {
        "content": "<p>Lean is case sensitive, but it can run on file systems that are not so I think it is possible for a mis-cased import to resolve anyway</p>",
        "id": 322406399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674174375
    },
    {
        "content": "<p>I suppose to catch this you would need to (when reading an <code>import Foo</code>) stat <code>Foo.lean</code> and check that the file name is in fact <code>Foo.lean</code> and not <code>fOo.lean</code></p>",
        "id": 322406702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674174516
    },
    {
        "content": "<p>PR: <a href=\"https://github.com/leanprover-community/mathlib4/pull/1698\">mathlib4#1698</a></p>",
        "id": 322409467,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674175888
    },
    {
        "content": "<p>Oh, wait, it can be optimized. I can cache those to avoid multiple lookups on the filesystem</p>",
        "id": 322409914,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674176130
    },
    {
        "content": "<p>Why not fetch caches</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.5BCI.5D.20error.20getting.20cache/near/322406399\">said</a>:</p>\n<blockquote>\n<p>Lean is case sensitive, but it can run on file systems that are not so I think it is possible for a mis-cased import to resolve anyway</p>\n</blockquote>\n<p>This might be a bug if it does; I don't think <a href=\"https://peps.python.org/pep-0235/\">python behaves this way</a>. The check for case sensitivity should be in lean's import mechanism, not just the cache tool</p>",
        "id": 322410734,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674176547
    },
    {
        "content": "<p>yes that's what I meant. Since the cache tool is failing and not lean it sounds like lean is to blame for erroneously allowing the import</p>",
        "id": 322411023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674176720
    },
    {
        "content": "<p>I'm not entirely sure how the resolution works, it might be lake's responsibility</p>",
        "id": 322411122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674176764
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1698\">mathlib4#1698</a> is updated</p>",
        "id": 322414442,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674178850
    },
    {
        "content": "<p>But TBH I don't agree with it. I think the appropriate approach would be to assume that the imports are correct and to print a better error message if the respective file can't be found (the assumption wasn't fulfilled), but still fail in the later case. Then if Lean is accepting weirdly cased imports on some machines, that should be taken care of separately</p>",
        "id": 322415205,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674179400
    },
    {
        "content": "<p>I mean, what's the point of avoiding a <code>cache</code> failure just to expect <code>lake build</code> to fail after a reasonably more expensive computation? It's better to fail earlier.</p>",
        "id": 322415919,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674179930
    },
    {
        "content": "<p>Here's the alternative solution: <a href=\"https://github.com/leanprover-community/mathlib4/pull/1700\">mathlib4#1700</a></p>\n<p>Feel free to pick any of the two</p>",
        "id": 322417219,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674180932
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> Please PR the <code>Gcd/GCD</code> name change to <code>start_port.sh</code>.</p>",
        "id": 322427089,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674189304
    },
    {
        "content": "<p>I suspect GCD is being turned into Gcd by some camel casing logic, similar to what happened to ENat, which became Enat a few days ago.</p>",
        "id": 322446150,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674200709
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 322447654,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674201336
    },
    {
        "content": "<p>mathport has to guess a Lean 4 import name, from the Lean 3 name.</p>",
        "id": 322447695,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674201355
    },
    {
        "content": "<p>So it is turning <code>gcd</code> into <code>Gcd</code>.</p>",
        "id": 322447719,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674201363
    },
    {
        "content": "<p>And <code>start_port.sh</code> can use a little bit of sed magic to fix that into <code>GCD</code>, before the porter even runs <code>lake exe cache get</code>.</p>",
        "id": 322447833,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674201401
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.5BCI.5D.20error.20getting.20cache/near/322427089\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> Please PR the <code>Gcd/GCD</code> name change to <code>start_port.sh</code>.</p>\n</blockquote>\n<p>if i got the syntax correct, <a href=\"https://github.com/leanprover-community/mathlib4/pull/1714\">mathlib4#1714</a></p>",
        "id": 322476926,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674210684
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.5BCI.5D.20error.20getting.20cache/near/322447695\">said</a>:</p>\n<blockquote>\n<p>mathport has to guess a Lean 4 import name, from the Lean 3 name.</p>\n</blockquote>\n<p>Got it. So it's called <code>gcd.lean</code> in Lean 3</p>",
        "id": 322509237,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674220273
    },
    {
        "content": "<blockquote>\n<p>But TBH I don't agree with it. I think the appropriate approach would be to assume that the imports are correct and to print a better error message if the respective file can't be found (the assumption wasn't fulfilled), but still fail in the later case.</p>\n</blockquote>\n<p>Let me make the case for the opposite behavior.  If a file doesn't compile (for any other reason than misspelled imports), then <code>lake exe cache get</code> will not fetch caches either---simply because Lean never produces an olean file and the <code>cache</code> will always get a 404.</p>\n<p>It is only consistent to do the same for missing/mistyped imports: this is just another compile error.  It would be confusing if one kind of compile error made <code>cache</code> refuse to do anything, while another kind of compile error would just silently result in no caches with no message whatsoever.</p>",
        "id": 322595303,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674241775
    },
    {
        "content": "<blockquote>\n<p>Then if Lean is accepting weirdly cased imports on some machines, that should be taken care of separately</p>\n</blockquote>\n<p>But I completely agree with that part.</p>",
        "id": 322595475,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674241824
    },
    {
        "content": "<p>I understand that it's more consistent, but it's also more expensive. If the computation of hashes can spot a build flaw earlier, there's no point in calling the building procedure. There is no point in downloading and decompressing anything either.</p>\n<p>It's a tradeoff, but it's up to you. I would pick the early failure detection side-effect</p>",
        "id": 322602804,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1674244312
    }
]