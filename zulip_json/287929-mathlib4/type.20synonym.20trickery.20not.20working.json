[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/773\">mathlib4#773</a>, there is a porting failure on a lemma deduced for <code>has_inf</code> via the corresponding lemma for <code>has_sup</code>, invoked on the <code>order_dual</code> of the original order.  This kind of proof is ubiquitous in the order theory files, so it would be good to find a fix.</p>\n<p>Here is a version without imports:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! ### Notation classes for `⊔`, `⊓` -/</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">HasSup</span> <span class=\"n\">where</span>\n  <span class=\"n\">sup</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">HasInf</span> <span class=\"n\">where</span>\n  <span class=\"n\">inf</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">68</span> <span class=\"s2\">\" ⊔ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">HasSup.sup</span>\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">69</span> <span class=\"s2\">\" ⊓ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">HasInf.inf</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! ### `OrderDual` and instances -/</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">OrderDual</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"o\">(</span><span class=\"n\">OrderDual</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">HasInf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HasSup</span> <span class=\"o\">(</span><span class=\"n\">OrderDual</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨((</span><span class=\"bp\">·</span> <span class=\"bp\">⊓</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)⟩</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! ### Example -/</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HasSup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">⊔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HasInf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">OrderDual</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"n\">h</span>\n  <span class=\"c1\">-- in lean 3 you don't need the argument `a`, i.e. this works:</span>\n  <span class=\"c1\">-- @foo (OrderDual α) _ _ _ _ _ h</span>\n</code></pre></div>\n<p>edit: minimized more</p>",
        "id": 312712075,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1669666067
    },
    {
        "content": "<p>The proof <code>@foo (OrderDual α) _ _ _ a _ h</code> I have provided here would have worked without the argument <code>a</code> in Lean 3.  That is, in Lean 3 this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">OrderDual</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>Interestingly, in Lean 3 the following does <em>not</em> work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">OrderDual</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>so maybe the <code>@</code> in Lean 3 was causing a change in elaboration order which happened to be convenient for this kind of thing?</p>",
        "id": 312712430,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1669666197
    },
    {
        "content": "<p>This sounds like <a href=\"#narrow/stream/287929-mathlib4/topic/logic.2Eequiv.2Ebasic.20mathlib4.23631/near/311746932\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/logic.2Eequiv.2Ebasic.20mathlib4.23631/near/311746932</a></p>",
        "id": 312712916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669666382
    },
    {
        "content": "<p>Gabriel's fix there was to insert a <code>by exact</code>, but that doesn't seem to work here.</p>",
        "id": 312713588,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1669666643
    },
    {
        "content": "<p>I think Gabriel's fix in that thread was actually to a different problem. The <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> that Mario linked to needs a fix in Lean 4 core, as far as I understand, but it hasn't been reported yet.</p>",
        "id": 312715001,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669667209
    },
    {
        "content": "<p>Ah, Mario has just reported it! <a href=\"https://github.com/leanprover/lean4/issues/1891\">https://github.com/leanprover/lean4/issues/1891</a></p>",
        "id": 312715123,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669667271
    },
    {
        "content": "<p>Thanks for explaining!  I confess I can't tell the relevance of that issue to this one.  However, if Mario and Scott now have it in hand, I'm very happy to leave it to you.</p>",
        "id": 312715438,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1669667384
    },
    {
        "content": "<p><del>I added a link to your PR to Mario's issue, and we can revisit when it is solved. It doesn't need to hold up this PR.</del></p>",
        "id": 312715715,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669667472
    },
    {
        "content": "<p>I take it back, on review that's a different issue. I will poke at this one and report it separately</p>",
        "id": 312715717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669667472
    },
    {
        "content": "<p>The <code>(e :)</code> trick works here</p>",
        "id": 312717186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669668071
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HasInf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">OrderDual</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">:)</span>\n</code></pre></div>",
        "id": 312717216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669668083
    },
    {
        "content": "<p>Huh!  Was there a previous discussion of this trick which you can point me to?</p>",
        "id": 312717582,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1669668230
    },
    {
        "content": "<p>this is the lean 4 version of the <code>(e : _)</code> trick from lean 3</p>",
        "id": 312717925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669668359
    },
    {
        "content": "<p>what it does is hide the expected type while elaborating the subterm, similar to <code>by have := e; exact e</code></p>",
        "id": 312718063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669668401
    },
    {
        "content": "<p>I see, thanks.  So indeed it was a change in elaboration order.  Are we assuming this is a feature, not a bug, from the point of view of the Lean 4 developers?</p>",
        "id": 312718780,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1669668682
    },
    {
        "content": "<p>i.e. the side effect of some other useful change?</p>",
        "id": 312718813,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1669668702
    },
    {
        "content": "<p>hard to say... hopefully Leo will be able to shed some light on this in <a href=\"https://github.com/leanprover/lean4/pull/1892\">lean4#1892</a></p>",
        "id": 312718920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669668741
    },
    {
        "content": "<p>I don't think it's about elaboration <em>order</em> per se, but rather there is a missed backtracking opportunity where we tried some solution but it turns out to be wrong and instead of unfolding some stuff and trying again it just gives an error</p>",
        "id": 312719135,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669668842
    },
    {
        "content": "<p>Thanks for finding the further minimization and opening the issue.  Is it relevant to mention on your issue that the following variant works in Lean 3 but not Lean 4?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">OrderDual</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 312720031,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1669669152
    },
    {
        "content": "<p>Actually, even this seems to work in Lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">OrderDual</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 312720241,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1669669222
    }
]