[
    {
        "content": "<p>Continuing the discussion from <a href=\"#narrow/stream/287929-mathlib4/topic/data.2Esigma.2Edefault\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/data.2Esigma.2Edefault</a>: is it helpful if I make PRs to mathlib that rename <code>default.lean</code> to <code>basic.lean</code> <em>iff</em> <code>default.lean</code> contains more than just import statements?</p>",
        "id": 311531893,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1669101638
    },
    {
        "content": "<p>no, <code>default</code> -&gt; <code>basic</code> is not correct. Generally, <code>T.basic</code> will contain the beginnings of theory <code>T</code>, the minimum required to give you the vocabulary and some theorems about it (sometimes this still turned out to be too much stuff and we made an even more basic basic called <code>T.defs</code>), while <code>T.default</code> (which can be imported as just <code>T</code>) is a more kitchen-sink import of everything about <code>T</code>. This latter thing is inherently problematic for imports in mathlib because you can easily get into dependency bloat and import cycles this way, but it is easier for users outside of mathlib to be able to pull in \"everything\" about <code>T</code>.</p>",
        "id": 311538103,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669104562
    },
    {
        "content": "<p>Lean 4 does not have the <code>T</code> vs <code>T.default</code> ambiguity anymore. You would just name the file <code>T.lean</code> if you want the equivalent behavior, so if we are talking about lean 3 refactors to make it more similar to lean 4, we should move all <code>T/default.lean</code> files to <code>T.lean</code>.</p>",
        "id": 311538352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669104687
    },
    {
        "content": "<p>Ok, a more generic question: should we try to converge to a mathlib3 in which <code>default.lean</code> files only contain <code>import</code> statements?</p>",
        "id": 311538402,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1669104719
    },
    {
        "content": "<p>We should probably have a rule about that, but I would be okay with it either way - we could put real files there or require import-only files</p>",
        "id": 311538526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669104778
    },
    {
        "content": "<p>I guess we would need to come up with a naming convention for the frontend file that brings it all together if that's required not to be <code>T.lean</code> itself</p>",
        "id": 311538641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669104841
    },
    {
        "content": "<p><code>frontend.lean</code>.</p>",
        "id": 311538984,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1669104992
    },
    {
        "content": "<p>But I think there are several <code>default.lean</code> files right now that duplicate the role of a <code>basic.lean</code>.</p>",
        "id": 311539037,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1669105015
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">‚ùØ</span> <span class=\"n\">git</span> <span class=\"n\">ls</span><span class=\"bp\">-</span><span class=\"n\">files</span> <span class=\"bp\">|</span> <span class=\"n\">rg</span> <span class=\"n\">default</span> <span class=\"bp\">|</span> <span class=\"n\">xargs</span> <span class=\"n\">wc</span> <span class=\"bp\">-</span><span class=\"n\">l</span>\n    <span class=\"mi\">9</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">big_operators</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">4</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">category</span><span class=\"bp\">/</span><span class=\"n\">Group</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">category</span><span class=\"bp\">/</span><span class=\"n\">Mon</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">3</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">category</span><span class=\"bp\">/</span><span class=\"n\">Ring</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">5</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">char_p</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n   <span class=\"mi\">14</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">continued_fractions</span><span class=\"bp\">/</span><span class=\"n\">computation</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n   <span class=\"mi\">14</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">continued_fractions</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n   <span class=\"mi\">15</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">group</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">group_power</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">group_with_zero</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n   <span class=\"mi\">12</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">module</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n   <span class=\"mi\">11</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">ring</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">3</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">category_theory</span><span class=\"bp\">/</span><span class=\"n\">adjunction</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">category_theory</span><span class=\"bp\">/</span><span class=\"n\">concrete_category</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">category_theory</span><span class=\"bp\">/</span><span class=\"n\">functor</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n   <span class=\"mi\">65</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">category_theory</span><span class=\"bp\">/</span><span class=\"n\">limits</span><span class=\"bp\">/</span><span class=\"n\">constructions</span><span class=\"bp\">/</span><span class=\"n\">over</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n   <span class=\"mi\">12</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">category_theory</span><span class=\"bp\">/</span><span class=\"n\">limits</span><span class=\"bp\">/</span><span class=\"n\">shapes</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n  <span class=\"mi\">144</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">category_theory</span><span class=\"bp\">/</span><span class=\"n\">linear</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">category_theory</span><span class=\"bp\">/</span><span class=\"n\">monad</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n  <span class=\"mi\">346</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">category_theory</span><span class=\"bp\">/</span><span class=\"n\">preadditive</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">category_theory</span><span class=\"bp\">/</span><span class=\"n\">products</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">5</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">category_theory</span><span class=\"bp\">/</span><span class=\"n\">subobject</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">category_theory</span><span class=\"bp\">/</span><span class=\"n\">sums</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">control</span><span class=\"bp\">/</span><span class=\"n\">traversable</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">fin</span><span class=\"bp\">/</span><span class=\"n\">tuple</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">finite</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">9</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">finset</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n   <span class=\"mi\">10</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">finsupp</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n   <span class=\"mi\">28</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">list</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n   <span class=\"mi\">14</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">multiset</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">4</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">mv_polynomial</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">3</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">nat</span><span class=\"bp\">/</span><span class=\"n\">choose</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">pfunctor</span><span class=\"bp\">/</span><span class=\"n\">univariate</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">5</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">polynomial</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">polynomial</span><span class=\"bp\">/</span><span class=\"n\">degree</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">9</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">qpf</span><span class=\"bp\">/</span><span class=\"n\">multivariate</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">9</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">rat</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n  <span class=\"mi\">370</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">rbmap</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">6</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">rbtree</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">7</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">rbtree</span><span class=\"bp\">/</span><span class=\"n\">default_lt.lean</span>\n    <span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">set</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">set</span><span class=\"bp\">/</span><span class=\"n\">intervals</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">sigma</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">5</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">geometry</span><span class=\"bp\">/</span><span class=\"n\">euclidean</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">group_theory</span><span class=\"bp\">/</span><span class=\"n\">group_action</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">group_theory</span><span class=\"bp\">/</span><span class=\"n\">submonoid</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">linear_algebra</span><span class=\"bp\">/</span><span class=\"n\">clifford_algebra</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">linear_algebra</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">8</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">linear_algebra</span><span class=\"bp\">/</span><span class=\"n\">matrix</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">number_theory</span><span class=\"bp\">/</span><span class=\"n\">padics</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">2</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">order</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">order</span><span class=\"bp\">/</span><span class=\"n\">filter</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">adjoin</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">polynomial</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n   <span class=\"mi\">41</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">linarith</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n  <span class=\"mi\">104</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">lint</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">7</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">monotonicity</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n  <span class=\"mi\">128</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">nth_rewrite</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">0</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">omega</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">1</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">rewrite_search</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n  <span class=\"mi\">248</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">category</span><span class=\"bp\">/</span><span class=\"n\">CompHaus</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n  <span class=\"mi\">296</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">category</span><span class=\"bp\">/</span><span class=\"n\">Profinite</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n    <span class=\"mi\">3</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">category</span><span class=\"bp\">/</span><span class=\"n\">Top</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n</code></pre></div>",
        "id": 311539110,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1669105044
    },
    {
        "content": "<p>Even for tactics, <code>frontend</code> doesn't necessarily convey that it is the whole tactic, only the... front end</p>",
        "id": 311539232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669105083
    },
    {
        "content": "<p>for mathematics it doesn't make sense at all</p>",
        "id": 311539277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669105094
    },
    {
        "content": "<p>(In fact, it is quite possible to have files that define just the frontend of a tactic without the backend. <code>Tactic.NormNum.Core</code> is exactly that - you get a tactic called <code>norm_num</code> with all the bells and whistles but it does almost nothing until you import the <code>NormNum.Basic</code> file)</p>",
        "id": 311539480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669105187
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">‚ùØ</span> <span class=\"n\">cat</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">category_theory</span><span class=\"bp\">/</span><span class=\"n\">limits</span><span class=\"bp\">/</span><span class=\"n\">constructions</span><span class=\"bp\">/</span><span class=\"n\">over</span><span class=\"bp\">/</span><span class=\"n\">default.lean</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Copyright (c) 2018 Johan Commelin. All rights reserved.</span>\n<span class=\"cm\">Released under Apache 2.0 license as described in the file LICENSE.</span>\n<span class=\"cm\">Authors: Johan Commelin, Reid Barton, Bhavik Mehta</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.limits.connected</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.limits.constructions.over.products</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.limits.constructions.over.connected</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.limits.constructions.limits_of_products_and_equalizers</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.limits.constructions.equalizers</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\"># Limits in the over category</span>\n\n<span class=\"cm\">Declare instances for limits in the over category: If `C` has finite wide pullbacks, `over B` has</span>\n<span class=\"cm\">finite limits, and if `C` has arbitrary wide pullbacks then `over B` has limits.</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">universes</span> <span class=\"n\">w</span> <span class=\"n\">v</span> <span class=\"n\">u</span> <span class=\"c1\">-- morphism levels before object levels. See note [category_theory universes].</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span> <span class=\"n\">category_theory.limits</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory.over</span>\n\n<span class=\"sd\">/-- Make sure we can derive pullbacks in `over B`. -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_pullbacks</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_pullbacks</span> <span class=\"o\">(</span><span class=\"n\">over</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">has_limits_of_shape</span> <span class=\"o\">(</span><span class=\"n\">ulift_hom.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ulift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">walking_cospan</span><span class=\"o\">))</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n    <span class=\"n\">has_limits_of_shape_of_equivalence</span> <span class=\"o\">(</span><span class=\"n\">ulift_hom_ulift_category.equiv.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">ulift_hom.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ulift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">walking_cospan</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">has_limits_of_shape_of_equivalence</span> <span class=\"o\">(</span><span class=\"n\">ulift_hom_ulift_category.equiv.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/-- Make sure we can derive equalizers in `over B`. -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_equalizers</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_equalizers</span> <span class=\"o\">(</span><span class=\"n\">over</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">has_limits_of_shape</span> <span class=\"o\">(</span><span class=\"n\">ulift_hom.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ulift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">walking_parallel_pair</span><span class=\"o\">))</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n    <span class=\"n\">has_limits_of_shape_of_equivalence</span> <span class=\"o\">(</span><span class=\"n\">ulift_hom_ulift_category.equiv.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">ulift_hom.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ulift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">walking_parallel_pair</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">has_limits_of_shape_of_equivalence</span> <span class=\"o\">(</span><span class=\"n\">ulift_hom_ulift_category.equiv.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">has_finite_limits</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_finite_wide_pullbacks</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_finite_limits</span> <span class=\"o\">(</span><span class=\"n\">over</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">has_finite_limits_of_has_equalizers_and_finite_products</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">construct_products.over_finite_products_of_finite_wide_pullbacks</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">has_equalizers_of_has_pullbacks_and_binary_products</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">has_pullbacks</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">‚ü©,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">construct_products.over_binary_product_of_pullback</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">has_limits</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_wide_pullbacks.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_limits_of_size.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">over</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">has_limits_of_has_equalizers_and_products</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">construct_products.over_products_of_wide_pullbacks</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">has_equalizers_of_has_pullbacks_and_binary_products</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">has_pullbacks</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®</span><span class=\"n\">infer_instance</span><span class=\"o\">‚ü©,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">construct_products.over_binary_product_of_pullback</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">category_theory.over</span>\n</code></pre></div>",
        "id": 311539589,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1669105218
    },
    {
        "content": "<p>I think this is an example of a file that I would like to rename.</p>",
        "id": 311539622,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1669105231
    },
    {
        "content": "<p>It can be replaced by a <code>default.lean</code> file that imports whatever the new name of this file is.</p>",
        "id": 311539684,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1669105260
    },
    {
        "content": "<p>I think <code>limits.lean</code> would be a good name.</p>",
        "id": 311539741,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1669105281
    },
    {
        "content": "<p>would the new default.lean have the same imports as this one?</p>",
        "id": 311539787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669105302
    },
    {
        "content": "<p>so this is just about moving things out of the \"central file\"</p>",
        "id": 311539923,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669105341
    },
    {
        "content": "<p>And in addition it would have the new <code>import bla/bla/limits.lean</code></p>",
        "id": 311539931,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1669105343
    },
    {
        "content": "<p>would people import bla/bla or bla/bla/limits?</p>",
        "id": 311540004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669105376
    },
    {
        "content": "<p>mathlib should not import default files</p>",
        "id": 311540053,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1669105398
    },
    {
        "content": "<p>but other people can</p>",
        "id": 311540076,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1669105405
    },
    {
        "content": "<p>It is likely that <code>limits.lean</code> would need less imports than the current <code>default.lean</code>.</p>",
        "id": 311540146,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1669105434
    },
    {
        "content": "<p>Maybe we should use <code>*.lean</code> instead of <code>default.lean</code>, and then users can write <code>import data.int.¬´*¬ª</code> to import everything from the module</p>",
        "id": 311551937,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669109508
    },
    {
        "content": "<p>(<em>mostly</em> joking)</p>",
        "id": 311552047,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669109539
    },
    {
        "content": "<p>When I'm teaching I just want to do <code>import tactic</code> to get all the tactics, <code>import topology</code> to get a chunk of topology etc. Fancy stuff which I can never remember how to even type into VS Code and looks more confusing would not be ideal :-)</p>",
        "id": 311552153,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669109572
    },
    {
        "content": "<p>Shall I tell the <code>port_status.py</code> script to not list <code>default.lean</code> files?</p>",
        "id": 312261650,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669413130
    },
    {
        "content": "<p>And on the mathlib side, we should move all content out of <code>default.lean</code> files.</p>",
        "id": 312261668,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669413150
    },
    {
        "content": "<p>Okay, <a href=\"https://github.com/leanprover-community/mathlib/pull/17724\">#17724</a> does the cleanup of <code>default.lean</code> files, I think. This touches lots of files, so speedy merge appreciated. :-)</p>",
        "id": 312264862,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669415409
    },
    {
        "content": "<p>Related, <a href=\"https://github.com/leanprover-community/mathlib/pull/17725\">#17725</a> skips listing <code>default.lean</code>files in the output of <code>port_status.py</code>.</p>",
        "id": 312265307,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669415740
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/17724\">#17724</a> doesn't build. Does anyone know what failed?</p>",
        "id": 312360837,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669475718
    },
    {
        "content": "<p>It looks like <code>category_theory.additive.basic</code> needs to <code>import category_theory.preadditive.basic</code>. <a href=\"https://github.com/leanprover-community/mathlib/blob/d73530dbe568413c0f8a211a1280f62bdd3d22e6/src/category_theory/additive/basic.lean#L6\">Link</a> to the broken line of code.</p>",
        "id": 312368545,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1669479114
    },
    {
        "content": "<p>Fixed. (Anyone should feel free to edit my PRs directly, or, for that matter, be bold about editing everyone else's PRs too. :-)</p>",
        "id": 312372421,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669481075
    }
]