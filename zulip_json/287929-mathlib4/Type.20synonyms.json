[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/903\">mathlib4#903</a>, a whole bunch of proofs involving type synonyms (<code>Additive</code>, <code>Multiplicative</code>, <code>OrderDual</code>) are just completely broken.  I've fixed them with a bunch of @, but it seems like this really should be debugged; we'll hit it again.  Does anyone have time to look at this?</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/903/commits/ad2c22008b3bf1bcfae0ea9962ac4bd775891dec\">Here</a>'s the commit adding a bunch of @, so look at the branch in its state before this.</p>",
        "id": 314912552,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670597792
    },
    {
        "content": "<p>Is this the same as <a href=\"#narrow/stream/270676-lean4/topic/What.20type.20annotation.20can.20do/near/314660799\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/What.20type.20annotation.20can.20do/near/314660799</a> ?</p>",
        "id": 314913642,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670598087
    },
    {
        "content": "<p>I think probably not, but it's possible.</p>",
        "id": 314914051,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670598186
    },
    {
        "content": "<p>There were no type synonyms in that one.</p>",
        "id": 314914100,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670598201
    },
    {
        "content": "<p>Interestingly, in the issue here, all the cases are actually a type synonym of a type synonym!   Like <code>Multiplicative αᵒᵈ</code>.</p>",
        "id": 314914441,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670598295
    },
    {
        "content": "<p><code>zero := Multiplicative.ofAdd (⊤ : α)</code> should probably be <code>zero := Multiplicative.ofAdd $ toDual (⊤ : α)</code></p>",
        "id": 314915009,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670598454
    },
    {
        "content": "<p>But maybe <code>toDual</code> is not imported yet there</p>",
        "id": 314915040,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670598463
    },
    {
        "content": "<p>If it's not, make it be. It's part of the basic API.</p>",
        "id": 314915115,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670598482
    },
    {
        "content": "<p>Sure, but it might be too late if half the order stuff is already ported to mathlib4</p>",
        "id": 314915213,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670598498
    },
    {
        "content": "<p>To check, you're saying that Lean 3 was cleverer, and you could sometimes omit the boilerplate <code>toDual</code>/<code>ofDual</code>; Lean 4 requires this all be there explicitly?</p>",
        "id": 314915395,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670598548
    },
    {
        "content": "<p>I'm saying that the code you're porting is somewhat sloppy, and it's possible that writing it in a less sloppy way would be less confusing to Lean 4. It's also entirely possible that my suggestion makes no difference</p>",
        "id": 314915526,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670598590
    },
    {
        "content": "<p>I think the <code>@</code>s there are probably  ok.</p>",
        "id": 314915701,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670598622
    },
    {
        "content": "<p>I'm curious; does <code>@top_add _ (_)</code> work instead of <code>@top_add α _</code>?</p>",
        "id": 314915745,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670598634
    },
    {
        "content": "<p>I would much prefer <code>toDual</code> over the <code>@</code>. It's less sloppy, as you said.</p>",
        "id": 314915803,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670598652
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Type.20synonyms/near/314915213\">said</a>:</p>\n<blockquote>\n<p>Sure, but it might be too late if half the order stuff is already ported to mathlib4</p>\n</blockquote>\n<p>Not sure what you mean. It's a matter of adding one import.</p>",
        "id": 314915898,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670598680
    },
    {
        "content": "<p>In any case, this doesn't seem to be the issue.  Before:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedAddCommMonoidWithTop</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">LinearOrderedCommMonoidWithZero</span> <span class=\"o\">(</span><span class=\"n\">Multiplicative</span> <span class=\"n\">α</span><span class=\"bp\">ᵒᵈ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">Multiplicative.orderedCommMonoid</span><span class=\"o\">,</span> <span class=\"n\">Multiplicative.linearOrder</span> <span class=\"k\">with</span>\n    <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">Multiplicative.ofAdd</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"n\">zero_mul</span> <span class=\"o\">:=</span> <span class=\"n\">top_add</span> <span class=\"c1\">-- failed to synthesize instance LinearOrderedAddCommMonoidWithTop (Multiplicative αᵒᵈ)</span>\n    <span class=\"bp\">&lt;</span><span class=\"n\">snip</span><span class=\"bp\">&gt;</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>After:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedAddCommMonoidWithTop</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">LinearOrderedCommMonoidWithZero</span> <span class=\"o\">(</span><span class=\"n\">Multiplicative</span> <span class=\"n\">α</span><span class=\"bp\">ᵒᵈ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">Multiplicative.orderedCommMonoid</span><span class=\"o\">,</span> <span class=\"n\">Multiplicative.linearOrder</span> <span class=\"k\">with</span>\n    <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">Multiplicative.ofAdd</span> <span class=\"o\">(</span><span class=\"n\">OrderDual.toDual</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n    <span class=\"n\">zero_mul</span> <span class=\"o\">:=</span> <span class=\"n\">top_add</span> <span class=\"c1\">-- failed to synthesize instance LinearOrderedAddCommMonoidWithTop (Multiplicative αᵒᵈ)</span>\n    <span class=\"bp\">&lt;</span><span class=\"n\">snip</span><span class=\"bp\">&gt;</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 314916405,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670598819
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Type.20synonyms/near/314915745\">said</a>:</p>\n<blockquote>\n<p>I'm curious; does <code>@top_add _ (_)</code> work instead of <code>@top_add α _</code>?</p>\n</blockquote>\n<p>How about this suggestion? GitPod is taking a while to build up to <code>WithZero</code> for me</p>",
        "id": 314916958,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670598956
    },
    {
        "content": "<p>Interesting.  Yes, that one works.  Still worse than Lean 3's simple <code>top_add</code>, of course.</p>",
        "id": 314917223,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670599028
    },
    {
        "content": "<p>Then it sounds like this is <a href=\"#narrow/stream/270676-lean4/topic/.60.28_.29.60.20vs.20.60_.60.20syntax/near/313936557\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.60.28_.29.60.20vs.20.60_.60.20syntax/near/313936557</a> again</p>",
        "id": 314919394,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670599585
    },
    {
        "content": "<p>Then it seems my comment there was prescient!</p>\n<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/270676-lean4/topic/.60.28_.29.60.20vs.20.60_.60.20syntax/near/314586601\">said</a>:</p>\n<blockquote>\n<p>This might be painful for e.g. <code>OrderDual</code>, <code>MulOpposite</code>.</p>\n</blockquote>",
        "id": 314922656,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670600493
    },
    {
        "content": "<p>I think probably for now we should use the <code>@top_add _ (_)</code> spelling instead of <code>@top_add α _</code>, since that flags that lean4 already knows how to work out all the arguments and it's just being stubborn</p>",
        "id": 314922931,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670600569
    },
    {
        "content": "<p>OK, that seems like a good reason.  I'll make the change throughout.</p>",
        "id": 314923217,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670600657
    },
    {
        "content": "<p>Hmm, there are two places in the file where <code>α _</code> works and <code>_ (_)</code> doesn't.  I've pushed the rest of the changes so maybe someone can take a look.</p>",
        "id": 314924614,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670601049
    },
    {
        "content": "<p>Can you link to the line where that happened?</p>",
        "id": 314925329,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670601249
    },
    {
        "content": "<p>The only two <code>α _</code> in the file, one sec ...</p>",
        "id": 314925439,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670601280
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/cf027a53e0dbd91e30c0361451d0502160f8ea66/Mathlib/Algebra/Order/WithZero.lean#L114\">https://github.com/leanprover-community/mathlib4/blob/cf027a53e0dbd91e30c0361451d0502160f8ea66/Mathlib/Algebra/Order/WithZero.lean#L114</a><br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/cf027a53e0dbd91e30c0361451d0502160f8ea66/Mathlib/Algebra/Order/WithZero.lean#L292\">https://github.com/leanprover-community/mathlib4/blob/cf027a53e0dbd91e30c0361451d0502160f8ea66/Mathlib/Algebra/Order/WithZero.lean#L292</a></p>",
        "id": 314925552,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670601314
    },
    {
        "content": "<p>In mathlib3 we also had a different spelling there</p>",
        "id": 314925884,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670601404
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/algebra/order/with_zero.lean#L109\">https://github.com/leanprover-community/mathlib/blob/master/src/algebra/order/with_zero.lean#L109</a></p>",
        "id": 314925887,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670601405
    },
    {
        "content": "<p>Ah, you're right, I introduced both of these during my <a href=\"https://github.com/leanprover-community/mathlib4/pull/903/commits/ad2c22008b3bf1bcfae0ea9962ac4bd775891dec\">@-fest</a>.</p>",
        "id": 314926108,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670601477
    },
    {
        "content": "<p>They were also both broken, and also fixable by @, but the error is presumably different.</p>",
        "id": 314926523,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670601608
    },
    {
        "content": "<p>The first one: mathport <code>fun a ↦ (zero_mul a : (0 : α) * a = 0)</code>, error </p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>failed to synthesize instance HMul α (Additive αᵒᵈ) ?m.26677\n</code></pre></div>\n<p>valid replacement is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">zero_mul</span> <span class=\"n\">α</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 314927555,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670601917
    },
    {
        "content": "<p>The second: mathport <code>fun a ha ↦ mul_inv_cancel ha</code>, error</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>type mismatch\n  mul_inv_cancel ?m.71933\nhas type\n  @Eq ?m.71275 (?m.71277 * ?m.71277⁻¹) 1 : Prop\nbut is expected to have type\n  @Eq (Additive αᵒᵈ) (a + -a) 0 : Prop\n</code></pre></div>\n<p>fixed by</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">mul_inv_cancel</span> <span class=\"n\">α</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 314927775,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670601985
    },
    {
        "content": "<p><code>fun a ↦ zero_mul (Additive.to_mul a)</code> is the less hacky proof of the first one</p>",
        "id": 314932574,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670603505
    },
    {
        "content": "<p>(<code>a.to_mul</code> is also not allowed in Lean4 which is a separate problem)</p>",
        "id": 314932713,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670603543
    },
    {
        "content": "<p>Indeed.  But the analogue doesn't work for the second!</p>",
        "id": 314939463,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670605533
    },
    {
        "content": "<p><code>fun a ha ↦ mul_inv_cancel (id ha : Additive.toMul a ≠ 0)</code> works for the second</p>",
        "id": 314940309,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670605792
    },
    {
        "content": "<p>Can you confirm that you recommend these versions over the <code>@mul_inv_cancel α _</code> versions?  Again because of</p>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Type.20synonyms/near/314922931\">said</a>:</p>\n<blockquote>\n<p>since that flags that lean4 already knows how to work out all the arguments and it's just being stubborn</p>\n</blockquote>\n<p>?  If so I'll make those changes.</p>",
        "id": 314942118,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670606389
    },
    {
        "content": "<p>Heather, does a different type annotation work for <code>zero_mul</code>? Like <code>0 * (a : α) = 0</code> or <code>(0 * a : α) = 0</code> or <code>(0 : α) * (a : α) = 0</code>?</p>",
        "id": 314943585,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1670606838
    },
    {
        "content": "<p>It seems that Lean is getting confused because <code>*</code> is now actually heterogeneous and it is failing to unify the types appropriately during elaboration.</p>",
        "id": 314943806,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1670606894
    },
    {
        "content": "<p>Even putting a type annotation on everything doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">zero_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 314944305,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670607023
    },
    {
        "content": "<p>If <code>a</code> is of a type defeq to <code>α</code>, then the type annotation is a no-op. You would have to use the <code>id</code> trick. Coes between defeq types generally seem like a problematic idea, it would be better to make <code>Additive</code> a structure. But I assume that is not desired in other contexts.</p>",
        "id": 314953794,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670609886
    },
    {
        "content": "<blockquote>\n<p>Can you confirm that you recommend these versions over the @mul_inv_cancel α _ versions? </p>\n</blockquote>\n<p>The <code>@</code> versions are what Kevin would call \"defeq abuse\", but they're what we used in mathlib3 so <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span>. Either spelling is fine</p>",
        "id": 314955571,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670610425
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>, the goal is not to make a coercion happen, but to force <code>zero_mul</code> to elaborate with the annotated type with no information of the expected type at that point in the expression</p>",
        "id": 314955779,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670610491
    },
    {
        "content": "<p>Actually Eric, I think Lean knows the expected type here. That's why it's getting it wrong. We are trying to force it to instead use a defeq type, which is why it can be considered defeq abuse.</p>",
        "id": 314963684,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1670613004
    },
    {
        "content": "<p>We're trying to locally change the expected type</p>",
        "id": 314966384,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670613890
    },
    {
        "content": "<p>In Lean3, we could say to Lean \"I know you want type <code>B</code>, but I'm going to write <code>(foo : A)</code> and you're going to forget that we're actually trying to produce a <code>B</code> until you're completely done with <code>foo</code>\". In Lean 4 some of the elaboration seems to be postponed until we're looking at a goal of <code>B</code> again</p>",
        "id": 314966617,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670613963
    },
    {
        "content": "<p>Here's something that does work in place of <code>fun a ha ↦ mul_inv_cancel ha</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"bp\">↦</span> <span class=\"o\">((</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">mul_inv_cancel</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 314968599,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670614629
    },
    {
        "content": "<p>Also</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">mul_inv_cancel</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Edit: I guess these are cheating because I provide <code>α</code> explicitly and we're trying to avoid that hint.</p>",
        "id": 314968789,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670614684
    },
    {
        "content": "<p>The <code>(e :)</code> elaborator has a special hack to deal with this postponement issue</p>",
        "id": 314969706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670615039
    },
    {
        "content": "<p>Yes, that's why it occurred to me that this might work.</p>",
        "id": 314969959,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670615120
    },
    {
        "content": "<p>Let me make a version of <code>(e : ty)</code> that forces no postponing...</p>",
        "id": 314970046,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670615161
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\":!\"</span> <span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"bp\">←</span> <span class=\"n\">elabType</span> <span class=\"n\">ty</span>\n  <span class=\"n\">withSynthesize</span> <span class=\"o\">(</span><span class=\"n\">mayPostpone</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">elabTerm</span> <span class=\"n\">e</span> <span class=\"n\">ty</span>\n</code></pre></div>\n<p>No one posted an MWE though so I don't have a good test case</p>",
        "id": 314970768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670615432
    },
    {
        "content": "<p>Note that this is missing the coercion insertion code from the standard type annotations. Actually I'm wondering whether that should really be done when expected and given type are non-defeq <em>at <code>reducible</code> level</em> since that is the level coercion resolution works on. Then <code>(a : α)</code> would have generated a coercion and affected resolution at <code>*</code>.</p>",
        "id": 314982929,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670620187
    },
    {
        "content": "<p>What exactly is the postponement issue? The expected type shouldn't just get lost during postponement.</p>",
        "id": 314983615,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670620483
    },
    {
        "content": "<p>I'll work on minimizing, but here's a version with imports:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.GroupWithZero.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Monoid.WithZero.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Group.Instances</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Monoid.TypeTags</span>\n\n\n<span class=\"kd\">class</span> <span class=\"n\">LinearOrderedCommGroupWithZero</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">LinearOrderedCommMonoidWithZero</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"n\">CommGroupWithZero</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedCommMonoidWithZero</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrderedAddCommMonoidWithTop</span> <span class=\"o\">(</span><span class=\"n\">Additive</span> <span class=\"n\">α</span><span class=\"bp\">ᵒᵈ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">Additive.orderedAddCommMonoid</span><span class=\"o\">,</span> <span class=\"n\">Additive.linearOrder</span> <span class=\"k\">with</span>\n    <span class=\"n\">top</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"n\">top_add'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">zero_mul</span> <span class=\"n\">a</span> <span class=\"c1\">-- failed to synthesize instance MulZeroClass (Additive αᵒᵈ)</span>\n    <span class=\"n\">le_top</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>It works with <code>fun a =&gt; zero_mul (Additive.toMul a)</code>.</p>",
        "id": 314985130,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670621074
    },
    {
        "content": "<p>reduced a little more (edit: and more):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.GroupWithZero.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.TypeTags</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Monoid.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Synonym</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"o\">(</span><span class=\"n\">Additive</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">LT</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">LT</span> <span class=\"o\">(</span><span class=\"n\">Additive</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n<span class=\"kd\">instance</span> <span class=\"n\">Additive.partialOrder</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">PartialOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">PartialOrder</span> <span class=\"o\">(</span><span class=\"n\">Additive</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n<span class=\"kd\">instance</span> <span class=\"n\">Additive.linearOrder</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrder</span> <span class=\"o\">(</span><span class=\"n\">Additive</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Additive.orderedAddCommMonoid</span> <span class=\"o\">[</span><span class=\"n\">OrderedCommMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">OrderedAddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">Additive</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">Additive.partialOrder</span><span class=\"o\">,</span> <span class=\"n\">Additive.addCommMonoid</span> <span class=\"k\">with</span>\n    <span class=\"n\">add_le_add_left</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"bp\">ᵒᵈ</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"bp\">ᵒᵈ</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">MulZeroClass</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MulZeroClass</span> <span class=\"n\">α</span><span class=\"bp\">ᵒᵈ</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n<span class=\"kd\">instance</span> <span class=\"n\">inst</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">CommMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CommMonoid</span> <span class=\"n\">α</span><span class=\"bp\">ᵒᵈ</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedCommMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrderedCommMonoid</span> <span class=\"n\">α</span><span class=\"bp\">ᵒᵈ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">OrderDual.instLinearOrderOrderDual</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">inst</span> <span class=\"k\">with</span>\n    <span class=\"n\">mul_le_mul_left</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">LinearOrderedCommMonoidWithZero</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">LinearOrderedCommMonoid</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"n\">CommMonoidWithZero</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">LinearOrderedCommMonoidWithZero</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrderedAddCommMonoidWithTop</span> <span class=\"o\">(</span><span class=\"n\">Additive</span> <span class=\"n\">α</span><span class=\"bp\">ᵒᵈ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">Additive.orderedAddCommMonoid</span><span class=\"o\">,</span> <span class=\"n\">Additive.linearOrder</span> <span class=\"k\">with</span>\n    <span class=\"n\">top</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"n\">top_add'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">zero_mul</span> <span class=\"o\">(</span><span class=\"n\">Additive.toMul</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n    <span class=\"n\">le_top</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 314987379,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670622051
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I think the following should be a MWE for this issue.  Can you test it with your proposed no-postponing feature?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Bot</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">bot</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"kd\">class</span> <span class=\"n\">Top</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">top</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"⊥\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Bot.bot</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"⊤\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Top.top</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MulBotClass</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Bot</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">bot_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">⊥</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">MulBotClass</span> <span class=\"o\">(</span><span class=\"n\">bot_mul</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddTopClass</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Top</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">top_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">⊤</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span>\n\n<span class=\"sd\">/-- a type synonym -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Additive</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n\n<span class=\"sd\">/-- identification with type synonym -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Additive.toMul</span> <span class=\"o\">:</span> <span class=\"n\">Additive</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Additive.add</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">Additive</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">@</span><span class=\"n\">Mul.mul</span> <span class=\"n\">α</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">MulBotClass</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">AddTopClass</span> <span class=\"o\">(</span><span class=\"n\">Additive</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">Additive.add</span> <span class=\"k\">with</span>\n    <span class=\"n\">top</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"n\">top_add</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bot_mul</span> <span class=\"n\">a</span> <span class=\"o\">}</span> <span class=\"c1\">-- failed to synthesize instance MulBotClass (Additive α)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">MulBotClass</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">AddTopClass</span> <span class=\"o\">(</span><span class=\"n\">Additive</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">Additive.add</span> <span class=\"k\">with</span>\n    <span class=\"n\">top</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"n\">top_add</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bot_mul</span> <span class=\"o\">(</span><span class=\"n\">Additive.toMul</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 315207351,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670765631
    },
    {
        "content": "<p>It's a bit weird that <code>top := (⊥ : α)</code> works! </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">top_add</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">bot_mul</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">))))</span> <span class=\"o\">}</span> <span class=\"c1\">-- failed to synthesize instance MulBotClass (Additive α)</span>\n</code></pre></div>\n<p>Somehow in Lean 4 you're committed to type <code>Additive α</code> by the time Lean is trying to unify the <code>_</code> in <code>fun a =&gt; _</code>, and no amount of tricks will persuade Lean that a has another type.</p>",
        "id": 315241975,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670783184
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">top_add</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bot_mul</span> <span class=\"n\">a</span> <span class=\"o\">}</span> <span class=\"c1\">-- works!</span>\n</code></pre></div>\n<p>But I don't think that this will solve the general problem.</p>",
        "id": 315242027,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670783222
    },
    {
        "content": "<p>In any case, I oversimplified a bit: the example I posted is susceptible to the <code>@bot_mul _ (_)</code> trick.  I think the following should be a real example.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Bot</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">bot</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"kd\">class</span> <span class=\"n\">Top</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">top</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"⊥\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Bot.bot</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"⊤\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Top.top</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MulBotClass</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Bot</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">bot_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">⊥</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">MulBotClass</span> <span class=\"o\">(</span><span class=\"n\">bot_mul</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Mul₂</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MulBotClass₂</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul₂</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">MulBotClass</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddTopClass₂</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Top</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">top_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">⊤</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span>\n\n<span class=\"sd\">/-- a type synonym -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Additive</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n\n<span class=\"sd\">/-- identification with type synonym -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Additive.toMul</span> <span class=\"o\">:</span> <span class=\"n\">Additive</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">MulBotClass₂</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">AddTopClass₂</span> <span class=\"o\">(</span><span class=\"n\">Additive</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Mul.mul</span> <span class=\"n\">α</span> <span class=\"n\">_</span>\n    <span class=\"n\">top</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"n\">top_add</span> <span class=\"o\">:=</span> <span class=\"n\">bot_mul</span> <span class=\"o\">}</span> <span class=\"c1\">-- type mismatch</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">MulBotClass₂</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">AddTopClass₂</span> <span class=\"o\">(</span><span class=\"n\">Additive</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Mul.mul</span> <span class=\"n\">α</span> <span class=\"n\">_</span>\n    <span class=\"n\">top</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"n\">top_add</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">bot_mul</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"c1\">-- type mismatch</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">MulBotClass₂</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">AddTopClass₂</span> <span class=\"o\">(</span><span class=\"n\">Additive</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Mul.mul</span> <span class=\"n\">α</span> <span class=\"n\">_</span>\n    <span class=\"n\">top</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"n\">top_add</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bot_mul</span> <span class=\"n\">a</span> <span class=\"o\">}</span> <span class=\"c1\">-- failed to synthesize instance</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">MulBotClass₂</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">AddTopClass₂</span> <span class=\"o\">(</span><span class=\"n\">Additive</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Mul.mul</span> <span class=\"n\">α</span> <span class=\"n\">_</span>\n    <span class=\"n\">top</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"n\">top_add</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bot_mul</span> <span class=\"o\">(</span><span class=\"n\">Additive.toMul</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 315246950,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670785981
    },
    {
        "content": "<p>Again</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">top_add</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bot_mul</span> <span class=\"n\">a</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>also works</p>",
        "id": 315247232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670786181
    },
    {
        "content": "<p>Here is something specifically that worked in Lean 3 and doesn't work in Lean 4.  In Lean 3, translating <a href=\"#narrow/stream/287929-mathlib4/topic/Type.20synonyms/near/315246950\">my example</a> using <code>old_structure_cmd</code>, the following works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">top_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">bot_mul</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>In Lean 4,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">top_add</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">bot_mul</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>fails with two errors,</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>failed to synthesize instance MulBotClass (Additive α)\nfailed to synthesize instance HMul α (Additive α) ?m.13158\n</code></pre></div>",
        "id": 315248183,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670786835
    },
    {
        "content": "<p>This reminds me of <a href=\"#narrow/stream/287929-mathlib4/topic/elaboration.20failure.20in.20algebra.2Eorder.2Egroup.2Eunits\">another example I posted</a>.  In both cases, in Lean 3 we helped Lean in a tricky situation by providing a type annotation, and that particular type annotation is no longer helpful in Lean 4.</p>",
        "id": 315248326,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670786931
    },
    {
        "content": "<p>And here is a second import-free example, mimicking one of the other errors in the same file.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Bot</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">bot</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"kd\">class</span> <span class=\"n\">Top</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">top</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">notation</span> <span class=\"s2\">\"⊥\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Bot.bot</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"⊤\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Top.top</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MulBotClass</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">,</span>  <span class=\"n\">Bot</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_inv_cancel</span> <span class=\"o\">[</span><span class=\"n\">MulBotClass</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Mul₂</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MulBotClass₂</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul₂</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">MulBotClass</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddTopClass₂</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Top</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">add_neg_cancel</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊤</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span>\n\n<span class=\"sd\">/-- a type synonym -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Additive</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n\n<span class=\"sd\">/-- identification with type synonym -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Additive.toMul</span> <span class=\"o\">:</span> <span class=\"n\">Additive</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">MulBotClass₂</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">AddTopClass₂</span> <span class=\"o\">(</span><span class=\"n\">Additive</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Mul.mul</span> <span class=\"n\">α</span> <span class=\"n\">_</span>\n    <span class=\"n\">top</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"n\">add_neg_cancel</span> <span class=\"o\">:=</span> <span class=\"n\">mul_inv_cancel</span> <span class=\"o\">}</span> <span class=\"c1\">-- type mismatch</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">MulBotClass₂</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">AddTopClass₂</span> <span class=\"o\">(</span><span class=\"n\">Additive</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Mul.mul</span> <span class=\"n\">α</span> <span class=\"n\">_</span>\n    <span class=\"n\">top</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"n\">add_neg_cancel</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">mul_inv_cancel</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"c1\">-- type mismatch</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">MulBotClass₂</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">AddTopClass₂</span> <span class=\"o\">(</span><span class=\"n\">Additive</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Mul.mul</span> <span class=\"n\">α</span> <span class=\"n\">_</span>\n    <span class=\"n\">top</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"n\">add_neg_cancel</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mul_inv_cancel</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">Additive.toMul</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 315250727,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670788513
    },
    {
        "content": "<p>The working proof </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">add_neg_cancel</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mul_inv_cancel</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">Additive.toMul</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>at the end was suggested by Eric <a href=\"#narrow/stream/287929-mathlib4/topic/Type.20synonyms/near/314940309\">above</a>.  But in Lean 3,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">add_neg_cancel</span> <span class=\"o\">:=</span> <span class=\"n\">mul_inv_cancel</span>\n</code></pre></div>\n<p>works!</p>",
        "id": 315250733,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670788519
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">add_neg_cancel</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">mul_inv_cancel</span> <span class=\"n\">α</span> <span class=\"n\">_</span> <span class=\"o\">}</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>but I agree it's not as good as the Lean 3 version!</p>",
        "id": 315260816,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670796771
    },
    {
        "content": "<p>I think it's worth remember that a lot of these spellings which work in Lean3 are things that are golfed to oblivion because no-one cares about them being readable or easy for the compiler. It's annoying to have to fix them in the port, but I don't think it's any great loss to lean4 for not supporting the type of nonsense we've historically written for these proofs</p>",
        "id": 315262527,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670798118
    },
    {
        "content": "<p>At the extreme, this probably means that in many places where we currently write <code>@some_lemma (order_dual X) _ _ _</code> we'd be forced to write something more like <code>fun x =&gt; some_lemma (to_dual x)</code> etc.</p>",
        "id": 315262642,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670798218
    },
    {
        "content": "<p>I think that more reliance on \"transfer\" across homs could reduce boilerplate even more, instead of having to give these mirage-proofs</p>",
        "id": 315262797,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1670798351
    },
    {
        "content": "<p>My dream is still for a <code>to_additive</code>-like tactic to handle them all.</p>",
        "id": 315263615,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670798998
    },
    {
        "content": "<p>All this defeq abuse is doing could be done by a script working on the proof term from the original proof.</p>",
        "id": 315263716,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670799046
    },
    {
        "content": "<p>Note there are some cases where the type alias is under an internal binder where it really is useful that the types are defeq; I think these come up in some quotient things that probably haven't been reached by the port yet</p>",
        "id": 315264510,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670799631
    },
    {
        "content": "<p>Yes, it will be <em>really</em> hard to hygienise all type synonyms if we don't have automation to do so. Given the pain we've seen in this stream over type synonyms these past weeks, I foresee that we'll be forced to write the automation sooner than later.</p>",
        "id": 315311492,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670833684
    },
    {
        "content": "<p>I'm still curious to see whether <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>'s <a href=\"#narrow/stream/287929-mathlib4/topic/Type.20synonyms/near/314970046\">proposed new Lean feature</a> would solve these.</p>",
        "id": 315321669,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670837403
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Type.20synonyms/near/315262642\">said</a>:</p>\n<blockquote>\n<p>At the extreme, this probably means that in many places where we currently write <code>@some_lemma (order_dual X) _ _ _</code> we'd be forced to write something more like <code>fun x =&gt; some_lemma (to_dual x)</code> etc.</p>\n</blockquote>\n<p>This gets awkward when all the <code>x : X</code> in <code>some_lemma</code> are implicit (because there are hypotheses involving them which are explicit).  That was the case <a href=\"#narrow/stream/287929-mathlib4/topic/Type.20synonyms/near/314940309\">here</a>.</p>",
        "id": 315321923,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670837500
    },
    {
        "content": "<p>It's not a proposed new feature, it's a simple macro which was given</p>",
        "id": 315321949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670837514
    },
    {
        "content": "<p>I am not exactly sure where to slot it into the example from your last ping</p>",
        "id": 315322034,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670837535
    },
    {
        "content": "<p>but this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">MulBotClass</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">AddTopClass</span> <span class=\"o\">(</span><span class=\"n\">Additive</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">Additive.add</span> <span class=\"k\">with</span>\n    <span class=\"n\">top</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"n\">top_add</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bot_mul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 315322101,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670837558
    },
    {
        "content": "<p><code>bot_mul (by exact a : α)</code> also works</p>",
        "id": 315322590,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670837715
    },
    {
        "content": "<p><code>bot_mul (a :! α)</code> does not work, since it seems the postponing is being done from outside the scope of the <code>:!</code></p>",
        "id": 315322694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670837758
    },
    {
        "content": "<p>It's certainly nice that Lean 4 provides this other spelling <code>bot_mul (α := α)</code> of <code>@bot_mul α _</code>.  That was actually how I was <a href=\"#narrow/stream/287929-mathlib4/topic/Type.20synonyms/near/314912552\">originally solving</a> these failures, but Eric <a href=\"#narrow/stream/287929-mathlib4/topic/Type.20synonyms/near/314922931\">pointed out</a> that with this spelling, in some cases we are giving more help to Lean 4 (the <code>α</code>) than it needed in Lean 3.  My <a href=\"#narrow/stream/287929-mathlib4/topic/Type.20synonyms/near/315250727\">second import-free example</a> was one of these cases, and I think we still haven't found a Lean 4 proof there that doesn't contain the hint about <code>α</code> or at least about passing between a type and its additivization.</p>\n<p><a href=\"#narrow/stream/287929-mathlib4/topic/Type.20synonyms/near/315248183\">My first import-free example</a>, the one you were looking at here, was solved in Lean 3 with an elaborate type annotation,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">top_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">bot_mul</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It's certainly not necessary that we get this ugly proof working in Lean 4; <code>bot_mul (α := α)</code> is strictly nicer in my opinion.  But I would have thought that this was exactly the use case of your <code>:!</code> macro and it's surprising to me that it doesn't work here.</p>",
        "id": 315326886,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670839173
    }
]