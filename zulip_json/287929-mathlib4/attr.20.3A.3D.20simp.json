[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> We have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"o\">(</span><span class=\"n\">attr</span> <span class=\"o\">:=</span> <span class=\"n\">simp</span><span class=\"o\">)]</span>\n  <span class=\"n\">toDual_smul</span> <span class=\"n\">ofDual_smul</span> <span class=\"n\">toDual_smul'</span> <span class=\"n\">ofDual_smul'</span>\n  <span class=\"n\">toLex_smul</span> <span class=\"n\">ofLex_smul</span> <span class=\"n\">toLex_smul'</span> <span class=\"n\">ofLex_smul'</span>\n</code></pre></div>\n<p>which gets the following error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">The</span> <span class=\"n\">source</span> <span class=\"n\">declaration</span> <span class=\"n\">has</span> <span class=\"kn\">attribute</span> <span class=\"n\">simp.</span>\n<span class=\"n\">This</span> <span class=\"kn\">attribute</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">translated</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"n\">declarations</span> <span class=\"n\">generated</span> <span class=\"kd\">by</span> <span class=\"n\">to_additive.</span> <span class=\"n\">Use</span> <span class=\"n\">something</span> <span class=\"n\">like</span>\n<span class=\"bp\">`</span><span class=\"kd\">@[to_additive (attr := simp)]</span><span class=\"bp\">`</span> <span class=\"n\">instead.</span>\n</code></pre></div>",
        "id": 323283260,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674574433
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Algebra/Group/OrderSynonym.lean#L300L302\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Algebra/Group/OrderSynonym.lean#L300L302</a></p>",
        "id": 323283533,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674574493
    },
    {
        "content": "<p>You have to remove <code>simp</code> from the original declaration.</p>",
        "id": 323286646,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1674575208
    },
    {
        "content": "<p>Not the most readable style</p>",
        "id": 323286714,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1674575222
    },
    {
        "content": "<p>How can we compile mathlib in such a way that it reports all these messages on stdout?</p>",
        "id": 323287005,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674575289
    },
    {
        "content": "<p>I am currently working on changing these warnings into linting errors, and fixing them all.<br>\nI'm adding some new features of <code>to_additive</code> so that you can easily additivize an already additive declaration (which is what is happening here). Please don't touch them, I'll fix it.<br>\nI'll improve the error message at the same time.</p>",
        "id": 323298087,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674578014
    },
    {
        "content": "<p>What I'm doing is also going to be a relatively big change throughout the library, almost certainly conflicting with <a href=\"https://github.com/leanprover-community/mathlib4/pull/1816\">!4#1816</a>, so I prefer if we merge <a href=\"https://github.com/leanprover-community/mathlib4/pull/1816\">!4#1816</a> before I start changing many files. <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> are you currently working on that PR?</p>",
        "id": 323308609,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674580690
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/attr.20.3A.3D.20simp/near/323287005\">said</a>:</p>\n<blockquote>\n<p>How can we compile mathlib in such a way that it reports all these messages on stdout?</p>\n</blockquote>\n<p>It's <code>lake build -v</code>.  But that also shows the full Lean command-line.  <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> You were the one who decided to hide stderr/stdout by default in Lake.  At the time we had lots of noise because of the unused variable warnings.  Are there other reasons as well?  Should we show the output again?</p>",
        "id": 323331490,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674587015
    },
    {
        "content": "<p>I wanted to hide the lean command-line, not stderr/stdout</p>",
        "id": 323331701,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674587076
    },
    {
        "content": "<p>I think stdout should just be printed so that we can see noisy files</p>",
        "id": 323331782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674587101
    },
    {
        "content": "<p>stderr too, although it would be nice if lake could interpret the output to control when and how it is presented</p>",
        "id": 323331967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674587160
    },
    {
        "content": "<p>I think <code>cargo</code> does something like <code>rustc --json</code> to do this kind of thing</p>",
        "id": 323332126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674587200
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/1819\">!4#1819</a> I change the log info messages to linter errors, and fixed all the current linter errors.</p>",
        "id": 323332165,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674587213
    },
    {
        "content": "<p>It would be nice if compilation of files continues after a linter error (both in CI and locally).</p>",
        "id": 323332282,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674587247
    },
    {
        "content": "<p>oh yes that is a major peeve for me</p>",
        "id": 323332359,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674587273
    },
    {
        "content": "<p>especially imports in interactive mode should not be blocked by warnings</p>",
        "id": 323332540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674587323
    },
    {
        "content": "<p>Filed as <a href=\"https://github.com/leanprover/lean4/pull/2061\">lean4#2061</a>.</p>",
        "id": 323337234,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674588687
    }
]