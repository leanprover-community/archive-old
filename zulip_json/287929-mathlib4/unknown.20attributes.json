[
    {
        "content": "<p>I ported data.nat.log in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1089\">mathlib4#1089</a> but I had to comment out two attributes which were unknown: <code>pp_nodot</code> and <code>mono</code>. What should I do about those?<br>\nShould the PR wait for a mono tactic (only the attribute is used here, not the tactic itself)? That might be one of the tactics that should be replaced by an aesop rule set? (although mono is usually non-finishing, so perhaps not)<br>\nAs for <code>pp_nodot</code>, I don't even know what it does in lean 3.</p>",
        "id": 316681330,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1671435107
    },
    {
        "content": "<p><code>pp_nodot</code> is an instruction for the pretty printer to not use dot-notation.</p>",
        "id": 316681813,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671435352
    },
    {
        "content": "<p>I had the same thought about <code>mono</code> a few days ago:<br>\n<a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20porting.20assignments/near/316258985\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Tactic.20porting.20assignments/near/316258985</a></p>\n<p>I am still trying to port <code>data.fin.basic</code>, which seems to be very high priority, but after that I might take a look at porting <code>mono</code> (if no one else wants to do it).</p>",
        "id": 316682419,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1671435622
    },
    {
        "content": "<p>Then I'll mark the PR as WIP until mono is ported or it becomes blocking for something urgent (which seems unlikely).</p>",
        "id": 316683678,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1671436303
    },
    {
        "content": "<p>if it is only the attribute, then you can just leave a porting note</p>",
        "id": 316683781,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1671436344
    },
    {
        "content": "<p>Right. I've done that. The PR is ready for review then.</p>",
        "id": 316683947,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1671436441
    },
    {
        "content": "<p>Should it be <code>clog</code> or <code>cLog</code>?</p>",
        "id": 316687725,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1671438354
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/unknown.20attributes/near/316682419\">said</a>:</p>\n<blockquote>\n<p>I had the same thought about <code>mono</code> a few days ago:<br>\n<a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20porting.20assignments/near/316258985\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Tactic.20porting.20assignments/near/316258985</a></p>\n<p>I am still trying to port <code>data.fin.basic</code>, which seems to be very high priority, but after that I might take a look at porting <code>mono</code> (if no one else wants to do it).</p>\n</blockquote>\n<p>I would suggest trying to build this on top of <code>solve_by_elim</code>.</p>",
        "id": 317073484,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671589059
    },
    {
        "content": "<p>(Post <a href=\"https://github.com/leanprover-community/mathlib/pull/856\">#856</a>, which I <em>really</em> need to finish, unless someone else wants to help. :-)</p>",
        "id": 317073546,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671589093
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/856\">mathlib4#856</a> in case anyone else wondered :)</p>",
        "id": 317074913,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671590351
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/unknown.20attributes/near/317073484\">said</a>:</p>\n<blockquote>\n<p>I would suggest trying to build this on top of <code>solve_by_elim</code>.</p>\n</blockquote>\n<p>For <span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span> or anyone thinking of implementing <code>mono</code> on top of <code>solve_by_elim</code>: I think this is blocked by <a href=\"https://github.com/leanprover-community/mathlib4/pull/856\">mathlib4#856</a> (providing a <code>.noBackTracking</code> option), because <code>mono</code> is not a finishing tactic and therefore has to have deterministic end state.  Jannis already made this point in discussion whether <code>mono</code> could be implemented on top of <code>aesop</code>:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20porting.20assignments/near/316258985\">said</a>:</p>\n<blockquote>\n<p>After a quick look at <code>mono</code>, it seems like Aesop could probably replace terminal <code>mono*</code> calls, but not non-terminal <code>mono</code> calls.</p>\n</blockquote>",
        "id": 318949572,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672647417
    }
]