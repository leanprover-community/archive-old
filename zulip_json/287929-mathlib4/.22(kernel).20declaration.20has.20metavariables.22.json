[
    {
        "content": "<p>I got a proof for <code>prodMap_comp_comp</code> based on the mathlib3 <code>tidy?</code> output for <a href=\"https://github.com/leanprover-community/mathlib4/pull/1179\">mathlib4#1179</a> but I now get the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"n\">declaration</span> <span class=\"n\">has</span> <span class=\"n\">metavariables</span> <span class=\"bp\">'</span><span class=\"n\">PFun.prodMap_comp_comp'</span>\n</code></pre></div>\n<p>What does this mean?</p>",
        "id": 322759376,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674322198
    },
    {
        "content": "<p>It means something went wrong. Most likely, a tactic.</p>",
        "id": 322759550,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674322274
    },
    {
        "content": "<p>Hmm -- none of the tactics fail. Is there any debugging or logging I can turn on?</p>",
        "id": 322760216,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674322622
    },
    {
        "content": "<p>Right, it's not that a tactic would have failed (in the tactic sense), but that it would have produced a bad term that still has a metavariable in it.</p>",
        "id": 322761975,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674323609
    },
    {
        "content": "<p>Is there <code>recover</code> in Lean 4?</p>",
        "id": 322761990,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674323621
    },
    {
        "content": "<p>Usually there is some guesswork involved I think, for example, if you are using some rarely used tactic then most likely it is responsible</p>",
        "id": 322762010,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674323639
    },
    {
        "content": "<p>isn't there a trace option to see any terms passed to the kernel? lemme poke around the trace autocompletions</p>",
        "id": 322762528,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674323917
    },
    {
        "content": "<p>It‚Äôs üíØ simp/dsimp/cases/constructor/intro/assumption</p>",
        "id": 322767366,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674326835
    },
    {
        "content": "<p>Just - a lot of the above</p>",
        "id": 322767612,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674326983
    },
    {
        "content": "<p>If you compare with the same proof in mathlib3, you should be able to pinpoint the error more precisely.</p>",
        "id": 322767785,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674327078
    },
    {
        "content": "<p>Proof was by tidy.</p>",
        "id": 322768038,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674327272
    },
    {
        "content": "<p>The current proof uses the walk that tidy? Produces.</p>",
        "id": 322768112,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674327341
    },
    {
        "content": "<p>You can use <code>show_term</code> to see the proof term, look for any <code>?m.NNN</code> inside the result</p>",
        "id": 322775242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674332018
    },
    {
        "content": "<p>Usually when I saw this, a term in the proof was full of metavars. I'd try writing a lot of explicit variables when you write it down</p>",
        "id": 322781847,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674337539
    },
    {
        "content": "<p>Or taking care with implicit lambdas</p>",
        "id": 322781862,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674337546
    },
    {
        "content": "<p>mathport doesn't annotate the implicit lambda feature</p>",
        "id": 322781874,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674337558
    },
    {
        "content": "<p>is there any way to turn it off for a file?</p>",
        "id": 322781892,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674337564
    },
    {
        "content": "<p>There‚Äôs an option for it, don‚Äôt remember what the full name is but I think it‚Äôs <code>‚Ä¶autoImplicitLambda</code></p>",
        "id": 322783253,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674338626
    },
    {
        "content": "<p>Even if you manage to fix the proof, please continue to report failures like this. The kernel should never see a metavariable (whatever the starting state of the proof), so this error always indicates a tactic bug.</p>",
        "id": 322784854,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1674339929
    },
    {
        "content": "<p>Here's the proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">prodMap_comp_comp</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œ≥</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"n\">Œ¥</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œµ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">Œµ</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œπ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">f‚ÇÇ.comp</span> <span class=\"n\">f‚ÇÅ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prodMap</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÇ.comp</span> <span class=\"n\">g‚ÇÅ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÇ.prodMap</span> <span class=\"n\">g‚ÇÇ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ.prodMap</span> <span class=\"n\">g‚ÇÅ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ext</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"c1\">-- porting notes: was `by tidy`, below is a golf'd verson of the `tidy?` proof</span>\n    <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">y</span><span class=\"bp\">;</span>\n    <span class=\"c1\">-- porting notes: `by tidy?` had `simp; dsimp; simp`</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">prodMap_apply</span><span class=\"o\">,</span> <span class=\"n\">comp_apply</span><span class=\"o\">,</span> <span class=\"n\">Part.mem_mk_iff</span><span class=\"o\">,</span>\n      <span class=\"n\">Prod.mk.injEq</span><span class=\"o\">,</span> <span class=\"n\">Part.bind_dom</span><span class=\"o\">,</span> <span class=\"n\">Part.mem_bind_iff</span><span class=\"o\">,</span>\n      <span class=\"n\">exists_exists_eq_and</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span>\n    <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">w</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">w</span> <span class=\"k\">with</span> <span class=\"n\">w_left</span> <span class=\"n\">w_right</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h_left</span> <span class=\"n\">h_right</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">constructor</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">w_left</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">w_right</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">assumption</span>\n    <span class=\"o\">}</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">h_left</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">h_right</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">assumption</span>\n    <span class=\"o\">}</span>\n</code></pre></div>\n<p>Output of <code>show_term</code> at the first <code>assumption</code> is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">mk.mk.mp.intro.intro.intro.h.h.left.intro.intro</span>\n<span class=\"n\">Œ±</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">Œ≤</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n<span class=\"n\">Œ≥</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span>\n<span class=\"n\">Œ¥</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_4</span>\n<span class=\"n\">Œµ</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_5</span>\n<span class=\"n\">Œπ</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_6</span>\n<span class=\"n\">ff‚ÇÅ</span><span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œ≤</span>\n<span class=\"n\">f‚ÇÇ</span><span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œ≥</span>\n<span class=\"n\">g‚ÇÅ</span><span class=\"o\">:</span> <span class=\"n\">Œ¥</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œµ</span>\n<span class=\"n\">g‚ÇÇ</span><span class=\"o\">:</span> <span class=\"n\">Œµ</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œπ</span>\n<span class=\"n\">fst</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">:</span> <span class=\"n\">Œ±</span>\n<span class=\"n\">snd</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">:</span> <span class=\"n\">Œ¥</span>\n<span class=\"n\">fst</span><span class=\"bp\">‚úù</span><span class=\"o\">:</span> <span class=\"n\">Œ≥</span>\n<span class=\"n\">snd</span><span class=\"bp\">‚úù</span><span class=\"o\">:</span> <span class=\"n\">Œπ</span>\n<span class=\"n\">w</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ</span> <span class=\"n\">fst</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Dom</span>\n<span class=\"n\">h</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÇ</span> <span class=\"o\">(</span><span class=\"n\">Part.get</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ</span> <span class=\"n\">fst</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span> <span class=\"n\">w</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">Dom</span>\n<span class=\"n\">w</span><span class=\"bp\">‚úù</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÅ</span> <span class=\"n\">snd</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Dom</span>\n<span class=\"n\">h</span><span class=\"bp\">‚úù</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÇ</span> <span class=\"o\">(</span><span class=\"n\">Part.get</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÅ</span> <span class=\"n\">snd</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span> <span class=\"n\">w</span><span class=\"bp\">‚úù</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">Dom</span>\n<span class=\"n\">h_left</span><span class=\"o\">:</span> <span class=\"n\">Part.get</span> <span class=\"o\">(</span><span class=\"n\">Part.bind</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ</span> <span class=\"n\">fst</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span> <span class=\"n\">f‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Part.bind</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ</span> <span class=\"n\">fst</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span> <span class=\"n\">f‚ÇÇ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Dom</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fst</span><span class=\"bp\">‚úù</span>\n<span class=\"n\">h_right</span><span class=\"o\">:</span> <span class=\"n\">Part.get</span> <span class=\"o\">(</span><span class=\"n\">Part.bind</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÅ</span> <span class=\"n\">snd</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span> <span class=\"n\">g‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Part.bind</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÅ</span> <span class=\"n\">snd</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span> <span class=\"n\">g‚ÇÇ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Dom</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">snd</span><span class=\"bp\">‚úù</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"n\">Part.get</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÇ</span> <span class=\"o\">(</span><span class=\"n\">Part.get</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ</span> <span class=\"n\">fst</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ</span> <span class=\"n\">fst</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Dom</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÇ</span> <span class=\"o\">(</span><span class=\"n\">Part.get</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ</span> <span class=\"n\">fst</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ</span> <span class=\"n\">fst</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Dom</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">Dom</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">fst</span><span class=\"bp\">‚úù</span>\n<span class=\"n\">case</span> <span class=\"n\">mk.mk.mp.intro.intro.intro.h.h.right.intro.intro</span>\n<span class=\"n\">Œ±</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">Œ≤</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n<span class=\"n\">Œ≥</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span>\n<span class=\"n\">Œ¥</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_4</span>\n<span class=\"n\">Œµ</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_5</span>\n<span class=\"n\">Œπ</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_6</span>\n<span class=\"n\">ff‚ÇÅ</span><span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œ≤</span>\n<span class=\"n\">f‚ÇÇ</span><span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œ≥</span>\n<span class=\"n\">g‚ÇÅ</span><span class=\"o\">:</span> <span class=\"n\">Œ¥</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œµ</span>\n<span class=\"n\">g‚ÇÇ</span><span class=\"o\">:</span> <span class=\"n\">Œµ</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œπ</span>\n<span class=\"n\">fst</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">:</span> <span class=\"n\">Œ±</span>\n<span class=\"n\">snd</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">:</span> <span class=\"n\">Œ¥</span>\n<span class=\"n\">fst</span><span class=\"bp\">‚úù</span><span class=\"o\">:</span> <span class=\"n\">Œ≥</span>\n<span class=\"n\">snd</span><span class=\"bp\">‚úù</span><span class=\"o\">:</span> <span class=\"n\">Œπ</span>\n<span class=\"n\">w</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ</span> <span class=\"n\">fst</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Dom</span>\n<span class=\"n\">h</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÇ</span> <span class=\"o\">(</span><span class=\"n\">Part.get</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ</span> <span class=\"n\">fst</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span> <span class=\"n\">w</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">Dom</span>\n<span class=\"n\">w</span><span class=\"bp\">‚úù</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÅ</span> <span class=\"n\">snd</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Dom</span>\n<span class=\"n\">h</span><span class=\"bp\">‚úù</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÇ</span> <span class=\"o\">(</span><span class=\"n\">Part.get</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÅ</span> <span class=\"n\">snd</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span> <span class=\"n\">w</span><span class=\"bp\">‚úù</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">Dom</span>\n<span class=\"n\">h_left</span><span class=\"o\">:</span> <span class=\"n\">Part.get</span> <span class=\"o\">(</span><span class=\"n\">Part.bind</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ</span> <span class=\"n\">fst</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span> <span class=\"n\">f‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Part.bind</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ</span> <span class=\"n\">fst</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span> <span class=\"n\">f‚ÇÇ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Dom</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fst</span><span class=\"bp\">‚úù</span>\n<span class=\"n\">h_right</span><span class=\"o\">:</span> <span class=\"n\">Part.get</span> <span class=\"o\">(</span><span class=\"n\">Part.bind</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÅ</span> <span class=\"n\">snd</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span> <span class=\"n\">g‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Part.bind</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÅ</span> <span class=\"n\">snd</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span> <span class=\"n\">g‚ÇÇ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Dom</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">snd</span><span class=\"bp\">‚úù</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"n\">Part.get</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÇ</span> <span class=\"o\">(</span><span class=\"n\">Part.get</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÅ</span> <span class=\"n\">snd</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÅ</span> <span class=\"n\">snd</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Dom</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÇ</span> <span class=\"o\">(</span><span class=\"n\">Part.get</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÅ</span> <span class=\"n\">snd</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÅ</span> <span class=\"n\">snd</span><span class=\"bp\">‚úù¬π</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Dom</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">Dom</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">snd</span><span class=\"bp\">‚úù</span>\n<span class=\"n\">Messages</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"n\">PFun.lean</span><span class=\"o\">:</span><span class=\"mi\">699</span><span class=\"o\">:</span><span class=\"mi\">72</span>\n<span class=\"n\">h_left</span>\n<span class=\"n\">PFun.lean</span><span class=\"o\">:</span><span class=\"mi\">699</span><span class=\"o\">:</span><span class=\"mi\">72</span>\n<span class=\"n\">h_right</span>\n</code></pre></div>",
        "id": 322788199,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674342299
    },
    {
        "content": "<p>It's similar for the other assumption except that the <code>show_term</code> term is a hygienic term.</p>",
        "id": 322788359,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674342437
    },
    {
        "content": "<p>If I explicitly name them, it doesn't help.</p>",
        "id": 322788458,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674342510
    },
    {
        "content": "<p>Now, all of the <code>constructor</code> and <code>cases</code> terms have metavars, but nothing by the time the actual proof state is generated.</p>",
        "id": 322788718,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674342738
    },
    {
        "content": "<p>Current state of the proof is the better styled:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">prodMap_comp_comp</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œ≥</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"n\">Œ¥</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œµ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">Œµ</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œπ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">f‚ÇÇ.comp</span> <span class=\"n\">f‚ÇÅ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prodMap</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÇ.comp</span> <span class=\"n\">g‚ÇÅ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÇ.prodMap</span> <span class=\"n\">g‚ÇÇ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ.prodMap</span> <span class=\"n\">g‚ÇÅ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ext</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"c1\">-- porting notes: was `by tidy`, below is a golf'd verson of the `tidy?` proof</span>\n    <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">y</span><span class=\"bp\">;</span>\n    <span class=\"c1\">-- porting notes: `by tidy?` had `simp; dsimp; simp`</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">prodMap_apply</span><span class=\"o\">,</span> <span class=\"n\">comp_apply</span><span class=\"o\">,</span> <span class=\"n\">Part.mem_mk_iff</span><span class=\"o\">,</span>\n      <span class=\"n\">Prod.mk.injEq</span><span class=\"o\">,</span> <span class=\"n\">Part.bind_dom</span><span class=\"o\">,</span> <span class=\"n\">Part.mem_bind_iff</span><span class=\"o\">,</span>\n      <span class=\"n\">exists_exists_eq_and</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span>\n    <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">w</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">w</span> <span class=\"k\">with</span> <span class=\"n\">w_left</span> <span class=\"n\">w_right</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h_left</span> <span class=\"n\">h_right</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">constructor</span>\n    <span class=\"bp\">.</span> <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">w_left</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">w_right</span>\n      <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">h_left</span>\n      <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">h_right</span>\n    <span class=\"bp\">.</span> <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">h_left</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases'</span> <span class=\"n\">h_right</span> <span class=\"k\">with</span> <span class=\"n\">hrl</span> <span class=\"n\">hrr</span>\n      <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">hrl</span>\n      <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">hrr</span>\n</code></pre></div>",
        "id": 322788889,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674342896
    },
    {
        "content": "<p>did you try <code>show_term</code> around the first subproof (the <code>. constructor ...</code> part)?</p>",
        "id": 322789188,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674343193
    },
    {
        "content": "<p>if you use <code>show_term</code> on a nonterminal tactic then an expression with metavars is expected</p>",
        "id": 322789254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674343227
    },
    {
        "content": "<p>a term like <code>h_left</code> is fine, same thing if the term is hygienic</p>",
        "id": 322789281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674343262
    },
    {
        "content": "<p>it's only metavariables you should be looking for</p>",
        "id": 322789289,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674343272
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.22.28kernel.29.20declaration.20has.20metavariables.22/near/322761990\">said</a>:</p>\n<blockquote>\n<p>Is there <code>recover</code> in Lean 4?</p>\n</blockquote>\n<p>yes</p>",
        "id": 322789388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674343379
    },
    {
        "content": "<p>you can also use <code>recover</code> here in place of <code>show_term</code>; it's a no-op if the enclosed tactic closed all the goals it was supposed to</p>",
        "id": 322789493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674343465
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"542196\">Arien Malec</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.22.28kernel.29.20declaration.20has.20metavariables.22/near/322788889\">said</a>:</p>\n<blockquote>\n<p>Current state of the proof is the better styled:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">prodMap_comp_comp</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œ≥</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"n\">Œ¥</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œµ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">Œµ</span> <span class=\"bp\">‚Üí.</span> <span class=\"n\">Œπ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">f‚ÇÇ.comp</span> <span class=\"n\">f‚ÇÅ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prodMap</span> <span class=\"o\">(</span><span class=\"n\">g‚ÇÇ.comp</span> <span class=\"n\">g‚ÇÅ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÇ.prodMap</span> <span class=\"n\">g‚ÇÇ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">f‚ÇÅ.prodMap</span> <span class=\"n\">g‚ÇÅ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ext</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"c1\">-- porting notes: was `by tidy`, below is a golf'd verson of the `tidy?` proof</span>\n    <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">y</span><span class=\"bp\">;</span>\n    <span class=\"c1\">-- porting notes: `by tidy?` had `simp; dsimp; simp`</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">prodMap_apply</span><span class=\"o\">,</span> <span class=\"n\">comp_apply</span><span class=\"o\">,</span> <span class=\"n\">Part.mem_mk_iff</span><span class=\"o\">,</span>\n      <span class=\"n\">Prod.mk.injEq</span><span class=\"o\">,</span> <span class=\"n\">Part.bind_dom</span><span class=\"o\">,</span> <span class=\"n\">Part.mem_bind_iff</span><span class=\"o\">,</span>\n      <span class=\"n\">exists_exists_eq_and</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span>\n    <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">w</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">w</span> <span class=\"k\">with</span> <span class=\"n\">w_left</span> <span class=\"n\">w_right</span> <span class=\"bp\">&lt;;&gt;</span>\n    <span class=\"n\">cases'</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h_left</span> <span class=\"n\">h_right</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">constructor</span>\n    <span class=\"bp\">.</span> <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">w_left</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">w_right</span>\n      <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">h_left</span>\n      <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">h_right</span>\n    <span class=\"bp\">.</span> <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">h_left</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases'</span> <span class=\"n\">h_right</span> <span class=\"k\">with</span> <span class=\"n\">hrl</span> <span class=\"n\">hrr</span>\n      <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">hrl</span>\n      <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">hrr</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Can you link to a branch?</p>",
        "id": 322789719,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674343727
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1179\">mathlib4#1179</a></p>",
        "id": 322790931,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674344831
    },
    {
        "content": "<p><code>show_term</code> after <code>.</code> and before <code>constructor</code> gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Exists.intro</span> <span class=\"o\">{</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">m.132259</span> <span class=\"n\">w_right</span> <span class=\"n\">w_left</span> <span class=\"n\">h_left</span> <span class=\"n\">h_right</span><span class=\"o\">,</span> <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">m.132260</span> <span class=\"n\">w_right</span> <span class=\"n\">w_left</span> <span class=\"n\">h_left</span> <span class=\"n\">h_right</span> <span class=\"o\">}</span>\n  <span class=\"o\">{</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">m.132136</span> <span class=\"n\">w_left</span> <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">w_left</span><span class=\"o\">),</span> <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">m.132193</span> <span class=\"n\">w_left</span> <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">w_left</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 322791038,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674344935
    }
]