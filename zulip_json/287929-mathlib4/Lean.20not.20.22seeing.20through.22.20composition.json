[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/1154\">mathlib4#1154</a>, we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">IsSMulRegular</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Function.Injective</span> <span class=\"o\">((</span><span class=\"bp\">·</span> <span class=\"bp\">•</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>In theorem <code>of_smul</code> I had to <code>simp [Function.comp] at cd</code> to get Lean to understand that <code>Function.comp (fun m ↦ a • m) ((fun x x_1 ↦ x • x_1) s) c = Function.comp (fun m ↦ a • m) ((fun x x_1 ↦ x • x_1) s) d</code> was really <code>a • s • c = a • s • d</code></p>\n<p>Is this expected gymnastics?</p>",
        "id": 317218291,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671646150
    },
    {
        "content": "<p>If <code>Function.comp</code> is not <code>reducible</code> then it doesn't surprise me that you have to explicitly tell Lean to unfold it; I doubt it would choose to unfold it by itself. No doubt it's definitional though -- did you try <code>dsimp only [Function.comp]</code>? non-terminal simps are usually to be avoided.</p>",
        "id": 317219710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671646564
    },
    {
        "content": "<p>I guess it used to work before from the shape of the previous proof...</p>\n<p>Will try <code>dsimp only</code></p>",
        "id": 317223345,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671647663
    },
    {
        "content": "<p>Maybe</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">IsSMulRegular</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Function.Injective</span> <span class=\"o\">((</span><span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>is a better definition?</p>",
        "id": 317224312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671647986
    },
    {
        "content": "<p>But this doesn't solve the problem: it's the same issue as <a href=\"#narrow/stream/287929-mathlib4/topic/dsimp.20before.20rw/near/317222314\">this</a> (see discussion before for an explanation of why it might be hard to fix)</p>",
        "id": 317224595,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671648069
    },
    {
        "content": "<p>Applied your suggestion(s), but as you note, doesn't solve the issue.</p>",
        "id": 317229086,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671649429
    },
    {
        "content": "<p>Also seeing issues where <code>simp only [one_mul]</code> doesn't work, but <code>simp [one_mul]</code> does.</p>",
        "id": 317229476,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671649552
    },
    {
        "content": "<p>What does <code>simp? [one_mul]</code> say?</p>",
        "id": 317251613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671657774
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>  pointed out that I wanted <code>one_smul</code></p>",
        "id": 317253558,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671658752
    },
    {
        "content": "<p>I think <code>simp [one_mul]</code> just <code>simp</code>'d everything away.</p>",
        "id": 317253601,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671658776
    },
    {
        "content": "<p>the suggestion was <code>simp? [one_mul]</code>, note the question mark</p>",
        "id": 317254358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671659137
    },
    {
        "content": "<p>Understood!  I went back and looked and <code>simp? [one_mul]</code> wasn't helpful (suggested <code>simp only</code>).</p>",
        "id": 317254802,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671659344
    },
    {
        "content": "<p>Same with <code>simp?</code></p>",
        "id": 317254936,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671659409
    },
    {
        "content": "<p>that's annoying, I had hoped it would have pointed out that it was <code>one_smul</code> that you wanted.</p>",
        "id": 317261682,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671662642
    },
    {
        "content": "<p>Can we revert the statement to the mathlib3 spelling of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">IsSMulRegular</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Function.Injective</span> <span class=\"o\">(</span><span class=\"n\">SMul.smul</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which I expect makes this problem go away?</p>",
        "id": 317264217,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671663860
    },
    {
        "content": "<p>It really doesn't. With that change,  we get lots of stuff like <code>a • SMul.smul s c = a • SMul.smul s d</code></p>",
        "id": 317266472,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671665108
    },
    {
        "content": "<p>I tried reverting to the previous proofs, but then I've still got to do the <code>dsimp</code> trick. I've got the proofs as is to pretty clean <code>rw</code>s after the <code>dsimp</code>s.</p>",
        "id": 317267381,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671665676
    },
    {
        "content": "<p>Wait, Lean4 doesn't print <code>SMul.smul a b</code> as <code>a • b</code> any more!?</p>",
        "id": 317268074,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671666108
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, do you know if that is expected behavior?</p>",
        "id": 317268281,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671666226
    },
    {
        "content": "<p>Seems like it might be a problem for any of the proposed solutions to this problem that have come up so far</p>",
        "id": 317268373,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671666264
    },
    {
        "content": "<p>no, it should be pretty printed</p>",
        "id": 317268378,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671666268
    },
    {
        "content": "<p>there must be something off here, I would need a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> to diagnose</p>",
        "id": 317268422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671666301
    },
    {
        "content": "<p>note that <code>SMul.smul a</code> will probably not be pretty printed, although it could be pretty printed as <code>(a • .)</code> in principle</p>",
        "id": 317268509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671666363
    },
    {
        "content": "<p>Yeah, i'm specifically worried about <span class=\"user-mention\" data-user-id=\"542196\">@Arien Malec</span>'s example above</p>",
        "id": 317269687,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671667099
    },
    {
        "content": "<p>Let me see if I can minimize to an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 317269763,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671667184
    },
    {
        "content": "<p>So I think</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.SmulWithZero</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Regular.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">IsSMulRegular</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Function.Injective</span> <span class=\"o\">(</span><span class=\"n\">SMul.smul</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">IsSMulRegular</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">M</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">of_smul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"o\">:</span> <span class=\"n\">IsSMulRegular</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">IsSMulRegular</span> <span class=\"n\">M</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">Function.Injective.of_comp</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">cd</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Gets you there.</p>",
        "id": 317270130,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671667443
    },
    {
        "content": "<p>Putting the cursor after <code>by</code>, I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span>\n<span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n<span class=\"n\">a</span><span class=\"bp\">✝</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">R</span>\n<span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">S</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝²</span><span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">S</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">S</span> <span class=\"n\">M</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">IsScalarTower</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">M</span>\n<span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">R</span>\n<span class=\"n\">ab</span><span class=\"o\">:</span> <span class=\"n\">IsSMulRegular</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">cd</span><span class=\"o\">:</span> <span class=\"n\">M</span>\n<span class=\"n\">cd</span><span class=\"o\">:</span> <span class=\"n\">Function.comp</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">↦</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">SMul.smul</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">Function.comp</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">↦</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">SMul.smul</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">d</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span>\n</code></pre></div>",
        "id": 317270212,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671667500
    },
    {
        "content": "<p>Then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">of_smul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"o\">:</span> <span class=\"n\">IsSMulRegular</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">IsSMulRegular</span> <span class=\"n\">M</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">Function.Injective.of_comp</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">cd</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Function.comp</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">cd</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>gets me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span>\n<span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n<span class=\"n\">a</span><span class=\"bp\">✝</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">R</span>\n<span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">S</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝²</span><span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">S</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">S</span> <span class=\"n\">M</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">IsScalarTower</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">M</span>\n<span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">R</span>\n<span class=\"n\">ab</span><span class=\"o\">:</span> <span class=\"n\">IsSMulRegular</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">cd</span><span class=\"o\">:</span> <span class=\"n\">M</span>\n<span class=\"n\">cd</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">SMul.smul</span> <span class=\"n\">s</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">SMul.smul</span> <span class=\"n\">s</span> <span class=\"n\">d</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span>\n</code></pre></div>",
        "id": 317270378,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671667636
    },
    {
        "content": "<p>And then I can't  <code>  rw [←smul_assoc, ←smul_assoc] at cd</code></p>",
        "id": 317270468,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671667720
    }
]