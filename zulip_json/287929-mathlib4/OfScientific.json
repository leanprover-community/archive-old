[
    {
        "content": "<p>I just encountered</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>failed to synthesize instance\n  OfScientific ℝ\n</code></pre></div>\n<p>while trying to refer to the real number 0.1.  Do we want an <code>OfScientific</code> instance for (say) any characteristic-zero field?  Is <code>norm_num</code> going to handle this?  cc <span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 322425443,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674187639
    },
    {
        "content": "<p>Hmm, I’m not really the one making design choices here, but I definitely think <code>norm_num</code> should be able to recognize scientific notation—it seems it can’t do this even in e.g. the <code>Rat</code> case. </p>\n<p>I’ll open an issue/branch and see how far I get writing the extension right now.</p>",
        "id": 322426394,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674188576
    },
    {
        "content": "<p>It also makes sense to me to have <code>OfScientific</code> defined for all charzero division rings. <code>Rat</code> has one already, and I don’t know if the general one should be defined in terms of casting Rat to the charzero field, or if this one should be abandoned in favor of a more general one, or what.</p>\n<p>But imo it should exist! I wonder if it’s somewhere in mathlib3 already?</p>",
        "id": 322426512,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674188686
    },
    {
        "content": "<p>Another semi-related question is whether <code>norm_num</code> should handle floats. (Semi-related because scientific notation defaults to <code>Float</code> unless you specify the type.) My guess is maybe, but I'd hope that's not needed soon? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 322427935,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674190100
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/OfScientific/near/322427935\">said</a>:</p>\n<blockquote>\n<p>scientific notation defaults to <code>Float</code> unless you specify the type</p>\n</blockquote>\n<p>Is there a way to turn this off?  We really don't want unsuspecting mathlib users to encounter <code>Float</code>s after typing 0.1.  If there's a default in mathlib it should be Rat.</p>",
        "id": 322550248,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674230771
    },
    {
        "content": "<p><code>OfScientific</code> is basically a notation typeclass, which provides the interpretation of decimal numbers. I think it is relatively safe to have a blanket implementation for anything that would have a <code>Rat.cast</code> instance.</p>",
        "id": 322578925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674236998
    },
    {
        "content": "<p>It is more or less unrelated to <code>norm_num</code>, unless that instance leaves some <code>ofScientific</code> term in the expression in which case <code>norm_num</code> will want to unfold it to a fraction</p>",
        "id": 322579104,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674237050
    },
    {
        "content": "<p>in lean 3, this instance was effectively unfolded at parse time, so if you write <code>0.2</code> you get exactly the same term as if you had written <code>1/5</code> instead</p>",
        "id": 322579225,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674237097
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/OfScientific/near/322427935\">said</a>:</p>\n<blockquote>\n<p>Another semi-related question is whether <code>norm_num</code> should handle floats. (Semi-related because scientific notation defaults to <code>Float</code> unless you specify the type.) My guess is maybe, but I'd hope that's not needed soon? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>This is fundamentally impossible for lean 4 <code>Float</code> as currently implemented, because everything is opaque.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/287929-mathlib4/topic/OfScientific/near/322550248\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/OfScientific/near/322427935\">said</a>:</p>\n<blockquote>\n<p>scientific notation defaults to <code>Float</code> unless you specify the type</p>\n</blockquote>\n<p>Is there a way to turn this off?  We really don't want unsuspecting mathlib users to encounter <code>Float</code>s after typing 0.1.  If there's a default in mathlib it should be Rat.</p>\n</blockquote>\n<p>I have not tried having multiple <code>@[default_instance]</code> instances at once, but I don't see any reason why it wouldn't work. If we provide another default instance for OfScientific pointing at Rat we can override this behavior.</p>",
        "id": 322579924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674237274
    },
    {
        "content": "<p>Is there going to be an issue having a [DivisionRing K] [CharZero K] instance for <code>OfScientific</code>; will it conflict in the case K = Rat with the instance for Rat?</p>",
        "id": 322580291,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674237361
    },
    {
        "content": "<p>(see discussion on <a href=\"https://github.com/leanprover-community/mathlib4/pull/1707\">mathlib4#1707</a>)</p>",
        "id": 322580399,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674237381
    },
    {
        "content": "<p>It shouldn't do, we already solved this problem in Lean 3</p>",
        "id": 322580670,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674237441
    },
    {
        "content": "<p>How?</p>",
        "id": 322580896,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674237471
    },
    {
        "content": "<p>By making it be part of the definition of <code>DivisionRing</code></p>",
        "id": 322581388,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674237570
    },
    {
        "content": "<p>For whatever reason it doesn’t seem to conflict as-is—if I type <code>#synth OfScientific Rat</code> after the <code>DivisionRing</code> instance I still get the <code>Rat</code> instance.</p>\n<p>Not sure how Lean decides which instance to prefer or if changing the location of the instance might introduce some issues, but if it does, maybe we could tinker with the instance priorities?</p>",
        "id": 322581896,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674237660
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/OfScientific/near/322581388\">said</a>:</p>\n<blockquote>\n<p>By making it be part of the definition of <code>DivisionRing</code></p>\n</blockquote>\n<p>What do you mean?  Even nonzero characteristic division rings?</p>",
        "id": 322581993,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674237686
    },
    {
        "content": "<p>This is what happens what <code>rat_cast</code>, yes.</p>",
        "id": 322582213,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674237718
    },
    {
        "content": "<p>We're talking about <code>OfScientific</code>, not rat casting.  (Of course they're related.)</p>",
        "id": 322582423,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674237750
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/OfScientific/near/322579104\">said</a>:</p>\n<blockquote>\n<p>It is more or less unrelated to <code>norm_num</code>, unless that instance leaves some <code>ofScientific</code> term in the expression in which case <code>norm_num</code> will want to unfold it to a fraction</p>\n</blockquote>\n<p>Currently we are left with an <code>ofScientific</code> in the expression and <code>norm_num</code> fails when encountering it. Is there a shortcut we’d want to use for unfolding it here, or is the standard procedure for evaluating things warranted?</p>",
        "id": 322583388,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674237919
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OfScientific#doc\">docs4#OfScientific</a> for reference</p>",
        "id": 322583653,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674237994
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/287929-mathlib4/topic/OfScientific/near/322582423\">said</a>:</p>\n<blockquote>\n<p>We're talking about <code>OfScientific</code>, not rat casting.  (Of course they're related.)</p>\n</blockquote>\n<p>The implementation for a division ring <code>K</code> is presumably going to be <code>ratCast (OfScientific ...)</code>. The implementation of <code>ratCast</code> for <code>Rat</code> is just <code>id</code>.</p>",
        "id": 322583796,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674238045
    },
    {
        "content": "<p>Well, <code>rat_cast</code> is enough to define <code>of_scientific</code>, so it should be included in at least all the structures where <code>rat_cast</code> is.</p>",
        "id": 322583837,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674238057
    },
    {
        "content": "<p>As Yael alludes to, if we introduce some other division ring which has a more efficient implementation of <code>ofScientific</code> that going through <code>Rat</code>, then we're in trouble unless we make <code>ofScientific</code> a field of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DivisionRing#doc\">docs4#DivisionRing</a></p>",
        "id": 322584641,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674238330
    },
    {
        "content": "<p>This seems to fail in Lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Rat.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>So I guess we really do need a <code>norm_num</code> extension.</p>",
        "id": 322587227,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674239182
    },
    {
        "content": "<p>That's weird; I guess division doesn't reduce any more?</p>",
        "id": 322587717,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674239335
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/OfScientific/near/322583388\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/OfScientific/near/322579104\">said</a>:</p>\n<blockquote>\n<p>It is more or less unrelated to <code>norm_num</code>, unless that instance leaves some <code>ofScientific</code> term in the expression in which case <code>norm_num</code> will want to unfold it to a fraction</p>\n</blockquote>\n<p>Currently we are left with an <code>ofScientific</code> in the expression and <code>norm_num</code> fails when encountering it. Is there a shortcut we’d want to use for unfolding it here, or is the standard procedure for evaluating things warranted?</p>\n</blockquote>\n<p>I was kind of hoping that lean would automatically unfold the instance like it does for coes, that would make things simpler. If there is a <code>ofScientific</code> then we need to do the usual thing in norm_num: have a norm_num extension that matches on <code>ofScientific</code> and unfolds it to a division or what have you. (If this comes up a few more times we might consider having a meta-norm_num tactic/macro which generates such extensions on demand, similar to the delaborator and formatter that you get for free using <code>syntax</code>.)</p>",
        "id": 322587860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674239378
    },
    {
        "content": "<p>Note that Thomas already made a first stab at a <code>norm_num</code> extension for <code>OfScientific</code>: <a href=\"https://github.com/leanprover-community/mathlib4/pull/1707\">mathlib4#1707</a></p>",
        "id": 322588042,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674239426
    },
    {
        "content": "<p>that last example does seem weird. What does it actually unfold to?</p>",
        "id": 322588101,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674239453
    },
    {
        "content": "<p>oh fun:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">whnf</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Decidable.rec</span>\n<span class=\"c1\">--   (fun h =&gt;</span>\n<span class=\"c1\">--     (fun hg =&gt; Rat.mk' (Int.div ↑1 ↑(Nat.gcd (Int.natAbs ↑1) (10 ^ 1))) (10 ^ 1 / Nat.gcd (Int.natAbs ↑1) (10 ^ 1))) h)</span>\n<span class=\"c1\">--   (fun h =&gt; (fun hg =&gt; Rat.mk' (↑1) (10 ^ 1)) h) (instDecidableEqNat (Nat.gcd (Int.natAbs ↑1) (10 ^ 1)) 1)</span>\n</code></pre></div>",
        "id": 322588246,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674239503
    },
    {
        "content": "<p>it looks like it got stuck evaluating <code>Nat.gcd</code></p>",
        "id": 322588365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674239533
    },
    {
        "content": "<p>Does nat.gcd reduce in Lean 3?</p>",
        "id": 322588689,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674239668
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/287929-mathlib4/topic/OfScientific/near/322588042\">said</a>:</p>\n<blockquote>\n<p>Note that Thomas already made a first stab at a <code>norm_num</code> extension for <code>OfScientific</code>: <a href=\"https://github.com/leanprover-community/mathlib4/pull/1707\">mathlib4#1707</a></p>\n</blockquote>\n<p>I’ve only got it half done—I’m actually encountering some really weird monad errors in the main extension! I’ll bring them up later when I continue working on it.</p>",
        "id": 322588697,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674239672
    },
    {
        "content": "<p>no it does not <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span></p>",
        "id": 322588742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674239687
    },
    {
        "content": "<p>the difference in this case is that the reduction of <code>0.1</code> to <code>1/10</code> is done by meta code in lean 3, so the theorem <code>0.1 = 1/10</code> in lean 3 is a syntactic tautology</p>",
        "id": 322588997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674239773
    },
    {
        "content": "<p>(Moving from the GitHub discussion) Where is <code>Rat.cast</code>? I can’t seem to find it—only <code>Rat.castRec</code>, <code>RatCast</code>, and <code>Rat.castCoe</code></p>",
        "id": 322648388,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674264597
    },
    {
        "content": "<p>I think it's called <code>RatCast.ratCast</code>.</p>",
        "id": 322648455,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674264631
    },
    {
        "content": "<p>My understanding (via Mario’s comments) is that that’s not the lawful version, though, and Rat.cast is meant to be lawful somehow</p>",
        "id": 322648597,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674264737
    },
    {
        "content": "<p>It seems to me like the laws for the rat cast are fields of <code>DivisionRing</code> directly, though. Does <code>Rat.cast</code> as a stand-alone typeclass actually exist yet?</p>",
        "id": 322649418,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674265450
    },
    {
        "content": "<p><code>Nat.cast</code> isn't lawful either.</p>",
        "id": 322651093,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674266857
    },
    {
        "content": "<p>The lawful version of <code>Nat.cast</code> is the <code>AddMonoidWithOne</code> type class.  And the lawful version of <code>Int.cast</code> is the <code>AddGroupWithOne</code> type class.</p>",
        "id": 322651178,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674266915
    },
    {
        "content": "<p>Requiring a <code>DivisionRing</code> instance to prove things about <code>RatCast.ratCast</code> is the right (or at least consistent) thing to do here.</p>",
        "id": 322651238,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674266987
    },
    {
        "content": "<p>Hot take: <code>AddMonoidWithOne</code> should be the <code>to_additive</code>ised version of <code>MonoidWithE</code>, with E=2.718....</p>",
        "id": 322700159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674297884
    },
    {
        "content": "<p>Do we have exponential periods yet?</p>",
        "id": 322701326,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674298366
    },
    {
        "content": "<p>Depending on which definition you want, they are either 5 lightyears away, or &lt; 2 days of hacking.</p>",
        "id": 322733712,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674311223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/OfScientific/near/322651238\">said</a>:</p>\n<blockquote>\n<p>Requiring a <code>DivisionRing</code> instance to prove things about <code>RatCast.ratCast</code> is the right (or at least consistent) thing to do here.</p>\n</blockquote>\n<p>Makes sense! So, if we added it as a field to <code>DivisionRing</code> would we also want a field that made <code>ofScientific</code> lawful (i.e. said it was extensionally equal to the cast of <code>Rat.ofScientific</code>)? </p>\n<p>This would make it easy to prove things about it (e.g. in <code>norm_num</code>), but I don’t know if any division rings somehow have completely different scientific notations.</p>",
        "id": 322778157,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674334308
    },
    {
        "content": "<p>The division rings which show up in my research are just full of things called <code>d</code> and <code>x</code>.</p>",
        "id": 322778612,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674334652
    },
    {
        "content": "<p>It shouldn’t be much overhead (computationally or cognitively) in almost all cases, I think, as the default values should take care of it like they do for <code>ratCast</code>: the default value of <code>ofScientific</code> will be the cast of <code>Rat.ofScientific</code>, and so the default proof that it’s lawful will be reflexivity, and you won’t even know it’s there. But if you need 0.1, you’ll have it. :)</p>",
        "id": 322779390,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674335372
    },
    {
        "content": "<p>I still think we should not make this a field and should just have an <code>OfScientific</code> instance for any division ring defined in terms of <code>Rat.ofScientific</code></p>",
        "id": 322779768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674335719
    },
    {
        "content": "<p>There are lots of definitions that are not fields, and structure fields have a significant cost on the overall typeclass system, so I would <em>really</em> rather not have silly things like this being something everyone has to deal with when making fields</p>",
        "id": 322779989,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674335879
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/OfScientific/near/322779768\">said</a>:</p>\n<blockquote>\n<p>I still think we should not make this a field and should just have an <code>OfScientific</code> instance for any division ring defined in terms of <code>Rat.ofScientific</code></p>\n</blockquote>\n<p>Mario, there's a point about this suggestion which I don't understand -- won't it mean that <code>Rat</code> gets two separate <code>OfScientific</code> instances?  Even though their data is the same, I would think that would cause problems.</p>",
        "id": 322780401,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674336187
    },
    {
        "content": "<p>they should be defeq</p>",
        "id": 322780419,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674336207
    },
    {
        "content": "<p>OK, maybe I hadn't appreciated that: it's ok to have multiple instances if they're defeq.</p>",
        "id": 322780439,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674336236
    },
    {
        "content": "<p>because the <code>RatCast Rat</code> instance should be the identity</p>",
        "id": 322780455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674336244
    },
    {
        "content": "<p>Do they need to be \"quickly\" defeq?</p>",
        "id": 322780487,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674336258
    },
    {
        "content": "<p>they should be defeq at instance reducibility</p>",
        "id": 322780504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674336284
    },
    {
        "content": "<p>which I think is the case here</p>",
        "id": 322780509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674336293
    },
    {
        "content": "<p>Hmm…if someone wants to implement a new definition of <code>ofScientific</code> for their division ring (which happens in one spot I think—something about Cauchy sequences), would that cause problems? Would we give the general one a lower priority or something?</p>",
        "id": 322780515,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674336300
    },
    {
        "content": "<p>They should not do that</p>",
        "id": 322780528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674336312
    },
    {
        "content": "<p>They already do <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 322780540,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674336325
    },
    {
        "content": "<p>in lean 3 this was simply not a possibility and I think that was a good thing</p>",
        "id": 322780546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674336330
    },
    {
        "content": "<p>this is one more knob that people can use to write the same thing in multiple ways</p>",
        "id": 322780555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674336347
    },
    {
        "content": "<p>(Maybe we can get rid of the bespoke definition? I haven’t checked…)</p>",
        "id": 322780634,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674336410
    },
    {
        "content": "<p>I'm sure the definition was written because the general one didn't exist yet</p>",
        "id": 322780650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674336429
    },
    {
        "content": "<p>I don't see that one? it's not listed at<br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Data/OfScientific.html#OfScientific\">https://leanprover-community.github.io/mathlib4_docs/Init/Data/OfScientific.html#OfScientific</a></p>",
        "id": 322780680,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674336459
    },
    {
        "content": "<p>Wow, if I’m looking at the right thing, it’s disappeared since this thread started! That’s convenient!</p>",
        "id": 322780834,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674336587
    },
    {
        "content": "<p>Oh, perhaps I’m mixing things up. I might have been thinking about things with custom <code>RatCast</code> implementations.  <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RatCast#doc\">docs4#RatCast</a></p>\n<p>Will that also make things potentially break though? When the instance of <code>ofScientific</code> for all division rings searches for a way to cast rationals, will it find the custom cast, or the canonical cast? (Should we just force the canonical cast somehow in this instance?)</p>",
        "id": 322781585,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674337305
    },
    {
        "content": "<p>It doesn't search for a way to cast rationals, the cast is baked into the definition and it is the canonical one</p>",
        "id": 322781756,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674337452
    },
    {
        "content": "<p>Hmmm. So writing <code>(3/4 : ℚ) : R</code> will use the canonical cast instead of whatever the division ring <code>R</code> has defined?</p>",
        "id": 322781855,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674337543
    },
    {
        "content": "<p>(Because that’s all this new instance we’re defining does atm)</p>",
        "id": 322781933,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674337577
    },
    {
        "content": "<p>I can only think of one case where the blanket instance is problematic: floating point numbers.  There the (naive) rat cast version has less precision than the current implementation which directly produces the mantissa.</p>",
        "id": 322783238,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674338609
    },
    {
        "content": "<p>We could declare the blanket instance only for division rings, where the cast is unique.</p>",
        "id": 322783390,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674338748
    },
    {
        "content": "<p>Is the cast definitionally unique for division rings or just propositionally unique? (Or is the latter enough for all purposes?) Does the <code>ratCast</code> field of division rings ever come into play here?</p>",
        "id": 322783630,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674338925
    },
    {
        "content": "<p>Just proposition ally.</p>",
        "id": 322783782,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674339045
    },
    {
        "content": "<p>The ratCast field is used for coercions from rational numbers as the name implies.</p>",
        "id": 322783811,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674339074
    },
    {
        "content": "<p>So when we write this instance for division rings for <code>ofScientific</code>, I’m guessing we should use the value in that field instead of the (potentially not defeq) canonical cast to cast the value of <code>Rat.ofScientific</code>, right? I’m just trying to figure out if that will ever cause any problems…</p>",
        "id": 322783971,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1674339235
    },
    {
        "content": "<p>Oh yeah, I think we should define of scientific in terms of rat cast.</p>",
        "id": 322784167,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674339389
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/OfScientific/near/322783238\">said</a>:</p>\n<blockquote>\n<p>I can only think of one case where the blanket instance is problematic: floating point numbers.  There the (naive) rat cast version has less precision than the current implementation which directly produces the mantissa.</p>\n</blockquote>\n<p>In that case we don't really care that it's the wrong instance since we aren't proving anything about those floats anyway</p>",
        "id": 322786838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674341295
    },
    {
        "content": "<p>It should be possible to implement that in such a way that there is no loss however, where the <code>Rat -&gt; Float</code> function builds the nearest float to the rational number according to the rounding mode</p>",
        "id": 322786922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674341352
    },
    {
        "content": "<p>Floating point numbers aren't a division ring so I don't see a conflict here?</p>",
        "id": 322789975,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674343973
    },
    {
        "content": "<p>That is, DivisionRing.toOfScientific should be safe</p>",
        "id": 322790175,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674344157
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/OfScientific/near/322786838\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/287929-mathlib4/topic/OfScientific/near/322783238\">said</a>:</p>\n<blockquote>\n<p>I can only think of one case where the blanket instance is problematic: floating point numbers.  There the (naive) rat cast version has less precision than the current implementation which directly produces the mantissa.</p>\n</blockquote>\n<p>In that case we don't really care that it's the wrong instance since we aren't proving anything about those floats anyway</p>\n</blockquote>\n<p>On the contrary, we care much more for floating-point numbers than for division rings because the two operations are not equivalent.  It's not just that we can't prove they're equal, we can actually observe that one of them is much worse!  For division rings, it doesn't really matter whether we define scientific literals as <code>ratCast ...</code> or <code>intCast .. / natCast ...</code> or something else, because we provably get the same result every time.  But for floating-point numbers e.g. going via <code>intCast .. / natCast ..</code> would have unacceptable numerical precision.</p>",
        "id": 322798849,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674351419
    },
    {
        "content": "<p>was <code>intCast .. / natCast ..</code> ever on the table?</p>",
        "id": 322799116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674351690
    },
    {
        "content": "<p>that is a terrible implementation</p>",
        "id": 322799124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674351697
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/OfScientific/near/322786922\">said</a>:</p>\n<blockquote>\n<p>It should be possible to implement that in such a way that there is no loss however, where the <code>Rat -&gt; Float</code> function builds the nearest float to the rational number according to the rounding mode</p>\n</blockquote>\n<p>It is a good idea to define <code>ratCast</code> that way (or at least close enough to that spec).  Which still leaves the issue that <code>0.1</code> might be a different floating-point number depending on which instance is used.  I'd like to avoid that potential nightmare.</p>",
        "id": 322799128,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674351702
    },
    {
        "content": "<p>Like Eric said, there is no diamond here</p>",
        "id": 322799185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674351739
    },
    {
        "content": "<p>?</p>",
        "id": 322799196,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674351745
    },
    {
        "content": "<p>Float is not a division ring</p>",
        "id": 322799204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674351755
    },
    {
        "content": "<p>Core has an <code>OfScientific</code> instance for <code>Float</code>.</p>",
        "id": 322799206,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674351756
    },
    {
        "content": "<p>no one is suggesting an instance for <code>[RatCast R] : OfScientific R</code></p>",
        "id": 322799241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674351794
    },
    {
        "content": "<p>Oh yeah, my objections doesn't apply to the <code>[DivisionrRing R] : OfScientific R</code> instance.</p>",
        "id": 322799245,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674351802
    },
    {
        "content": "<p>I don't think <code>Float</code> has a <code>RatCast</code> instance either, for that matter</p>",
        "id": 322799255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674351829
    },
    {
        "content": "<p>although it probably should</p>",
        "id": 322799270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674351843
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/OfScientific/near/322799241\">said</a>:</p>\n<blockquote>\n<p>no one is suggesting an instance for <code>[RatCast R] : OfScientific R</code></p>\n</blockquote>\n<p>I was going by Thomas's comment on the norm_num PR:</p>\n<blockquote>\n<p>Though, @digama0, you suggested a blanket implementation for anything that has an instance of RatCast.</p>\n</blockquote>",
        "id": 322799428,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674351990
    },
    {
        "content": "<p>yes, he misunderstood what I meant by \"the instances required to get <code>Rat.cast</code>\"</p>",
        "id": 322799462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674352050
    }
]