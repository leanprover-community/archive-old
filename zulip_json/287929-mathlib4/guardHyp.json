[
    {
        "content": "<p>Where did <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=guardHyp#doc\">docs4#guardHyp</a> go? Also the generated docs seem to be very out of date</p>",
        "id": 299262622,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1663378129
    },
    {
        "content": "<p>Voila: <a href=\"#narrow/stream/287929-mathlib4/topic/choose/near/298770777\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/choose/near/298770777</a></p>",
        "id": 299267300,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663383661
    },
    {
        "content": "<p>I've gotten a version of guardHyp for <code>conv</code> to work by mindless copy and paste (I am getting really good at that at least). In order that there is no duplicated code, I think that the original <code>evalGuardHyp</code> should be changed so that it calls another function that does the heavy lifting and <code>evalGuardHyp</code> just does the elaboration of the syntax. Does that sound about right?</p>\n<p>I.e., change <code>evalGuardHyp</code> to something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[inheritDoc guardHyp, tactic guardHyp]</span> <span class=\"kd\">def</span> <span class=\"n\">evalGuardHyp</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Elab.Tactic.Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">guard_hyp</span> <span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">c</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">eq</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">evalGuardHyp'</span> <span class=\"n\">h</span> <span class=\"n\">c</span> <span class=\"n\">ty</span> <span class=\"n\">eq</span> <span class=\"n\">val</span>\n</code></pre></div>\n<p>then the new conv-tactic is just</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[inheritDoc guardHyp, tactic convGuardHyp]</span> <span class=\"kd\">def</span> <span class=\"n\">evalConvGuardHyp</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Elab.Tactic.Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">conv</span><span class=\"bp\">|</span> <span class=\"n\">guard_hyp</span> <span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">c</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">eq</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">evalGuardHyp'</span> <span class=\"n\">h</span> <span class=\"n\">c</span> <span class=\"n\">ty</span> <span class=\"n\">eq</span> <span class=\"n\">val</span>\n</code></pre></div>",
        "id": 299386329,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1663476362
    },
    {
        "content": "<p>You should probably PR that to std along with the new tactic then</p>",
        "id": 299387265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663477556
    },
    {
        "content": "<p>First PR is here <del>std4#11</del><br>\n<a href=\"https://github.com/leanprover/std4/pull/11\">https://github.com/leanprover/std4/pull/11</a></p>",
        "id": 299467580,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1663528125
    },
    {
        "content": "<p>zulip links std4 to <a href=\"https://github.com/leanprover-community/std4/\">https://github.com/leanprover-community/std4/</a> not <a href=\"https://github.com/leanprover/std4/\">https://github.com/leanprover/std4/</a></p>",
        "id": 299467791,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1663528316
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/pull/11\">std4#11</a> -- fixed</p>",
        "id": 299469627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663529708
    },
    {
        "content": "<p>Thanks Mario, this looks so much better than what I came up with. for some reason I assumed that <code>conv</code> was implemented in Mathlib and I was going to make two PRs, but this is way better. Shouldn't <code>dsimp</code> then be in Lean4?</p>",
        "id": 299472937,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1663532527
    },
    {
        "content": "<p><code>dsimp</code> is in lean 4</p>",
        "id": 299472983,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663532612
    },
    {
        "content": "<p>I meant <code>dsimp</code> for <code>conv</code>, this PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/419\">mathlib4#419</a></p>",
        "id": 299473321,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1663532928
    },
    {
        "content": "<p>I doesn't really make sense in Mathlib4 if everything it needs is in Lean4 already</p>",
        "id": 299473366,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1663532980
    },
    {
        "content": "<p>Almost everything in std \"could be in lean 4 already\"</p>",
        "id": 299474400,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663533902
    },
    {
        "content": "<p>but if it's not required for implementing lean itself then there is a general discouragement of new additions to the bootstrap</p>",
        "id": 299474440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663533937
    },
    {
        "content": "<p>However, it is true that many things that are currently going in mathlib4 should go in std4 eventually. Std has higher standards than mathlib4, and it is not as much focused on backward compatibility with mathlib so new tactics should be justified for being generally useful rather than being needed for the port</p>",
        "id": 299474630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663534089
    }
]