[
    {
        "content": "<p>Is there a way of spelling <code>local attribute [-...]</code> in Lean 4?  I used to be able to do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.norm_num</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">norm_num</span><span class=\"o\">]</span> <span class=\"n\">norm_num.eval_nat_int_ext</span>\n</code></pre></div>\n<p>to disable a <code>norm_num</code> extension, this doesn't seem to work in mathlib 4 or maybe I have the wrong syntax?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.NormNum.Basic</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">norm_num</span><span class=\"o\">]</span> <span class=\"n\">Mathlib.Meta.NormNum.evalPow</span>\n<span class=\"c1\">-- attribute cannot be erased</span>\n</code></pre></div>",
        "id": 319128813,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672722665
    },
    {
        "content": "<p>That one's for teaching, but there are also a number of uses of <code>local attribute [-instance]</code> in mathlib.</p>",
        "id": 319128827,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672722692
    },
    {
        "content": "<p>This seems to be spelled <code>attribute [-foo]</code> now; erasing is only supported locally so there is no syntax like <code>attribute [local -foo]</code></p>",
        "id": 319129569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672723445
    },
    {
        "content": "<p>the reason it doesn't work for <code>norm_num</code> is because attributes have to explicitly opt-in to being erased and you have to write some extra code to support it. Most mathlib4 tactics don't support erasing right now</p>",
        "id": 319129673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672723546
    },
    {
        "content": "<p>Ah great.  Indeed instance erasing works just fine (I guess the fact that it was <code>local</code> automatically is what I hadn't realised):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Int.Order.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mul_self_lt_mul_self_iff</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">Int.linearOrderedCommRing</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mul_self_lt_mul_self_iff</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 319129970,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672723782
    },
    {
        "content": "<p>How hard would it be to make <code>norm_num</code> erasable?  Is there any similar example already implemented that could serve as a model?</p>",
        "id": 319130076,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672723827
    },
    {
        "content": "<p>Do you mind if I add this as an issue?  (If there's no reason in principle why it couldn't be done?)</p>",
        "id": 319130141,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672723919
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/287929-mathlib4/topic/local.20attribute.20.5B-.20.2E.2E.2E.5D/near/319130141\">said</a>:</p>\n<blockquote>\n<p>Do you mind if I add this as an issue?  (If there's no reason in principle why it couldn't be done?)</p>\n</blockquote>\n<p>Yes please, there is no fundamental issue with implementation. A similar example might be <code>simp</code>: you keep a map for erased norm_num extensions in addition to the regular map, and if the regular map produces a result, we first check the erased map to make sure the extension has not been erased, and if it is we skip it</p>",
        "id": 319134938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672727663
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1308\">mathlib4#1308</a>, feel free to make any corrections.</p>",
        "id": 319145118,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672734074
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"504487\">@Sarah Smith</span> reached out to me about trying this—I'm going to give it a shot, if that's alright :) I'll open a branch + PR for it and start committing!</p>",
        "id": 319705152,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1672969023
    },
    {
        "content": "<p>If anyone has some good simple examples of <code>norm_num</code> erasure (cases where something can't be proved when something is erased) for the test file, they're welcome here :)</p>",
        "id": 319726206,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1672987425
    },
    {
        "content": "<p>Also, for anyone familiar with the existing code: is there a reason we don't keep track of the <code>Entry</code> list when we use <code>addImportedFn</code>? Currently it returns <code>pure ⟨[], dt⟩</code>.</p>\n<p>I'm a little unsure of when we actually use the list of <code>Entry</code>s, to be honest...</p>",
        "id": 319726448,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1672987589
    },
    {
        "content": "<p>Here's one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">31</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">norm_num1</span>\n  <span class=\"n\">with_reducible</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>fails if you put it before the <code>evalPow</code> extension, succeds if you put it after.</p>",
        "id": 319726545,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672987668
    },
    {
        "content": "<p>So you'd like it to fail if you disable the <code>evalPow</code> extension.</p>",
        "id": 319726615,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672987690
    },
    {
        "content": "<p>It works! :) Up to the above details about the <code>Entry</code> list.</p>",
        "id": 319728174,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1672988794
    },
    {
        "content": "<p>Is there a way to restore an attribute after erasing it? I would have expected</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">norm_num</span><span class=\"o\">]</span> <span class=\"n\">Mathlib.Meta.NormNum.evalPow</span>\n</code></pre></div>\n<p>but that doesn't work.</p>",
        "id": 319728280,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1672988862
    },
    {
        "content": "<p>Can you mark the erasure with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">norm_num</span><span class=\"o\">]</span> <span class=\"k\">in</span>\n<span class=\"kd\">lemma</span> <span class=\"bp\">....</span>\n</code></pre></div>\n<p>to make it local to that lemma?</p>",
        "id": 319728567,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672989018
    },
    {
        "content": "<p>Or enclose the erasure in <code>section</code>/<code>end</code>?</p>",
        "id": 319728610,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672989051
    },
    {
        "content": "<p>Hmmm...I would have expected both of those to work, but neither of them do.</p>",
        "id": 319728853,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1672989158
    },
    {
        "content": "<p>Interestingly it doesn't complain about <code>attribute [-norm_num] ... in</code>, but nonetheless it doesn't work as expected. I wonder if that's something I can fix inside <code>norm_num</code> or if it has to do with how <code>[-_]</code> is elaborated...</p>",
        "id": 319728921,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1672989221
    },
    {
        "content": "<p>I have no idea, hopefully an expert will comment.</p>",
        "id": 319729324,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672989516
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/local.20attribute.20.5B-.20.2E.2E.2E.5D/near/319726448\">said</a>:</p>\n<blockquote>\n<p>Also, for anyone familiar with the existing code: is there a reason we don't keep track of the <code>Entry</code> list when we use <code>addImportedFn</code>? Currently it returns <code>pure ⟨[], dt⟩</code>.</p>\n<p>I'm a little unsure of when we actually use the list of <code>Entry</code>s, to be honest...</p>\n</blockquote>\n<p><code>addImportedFn</code> is responsible for setting up the initial state of the attribute after importing upstream modules (i.e. just after all the <code>import</code> lines). The first component of the pair is the list of entries defined in the current file, so it starts out empty. The list component is pushed to in <code>addEntryFn</code>, which is called when a new entry is added in the current file, and the list of entries is serialized into an array for future <code>import</code>s in <code>exportEntriesFn</code></p>",
        "id": 319732835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672991472
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/local.20attribute.20.5B-.20.2E.2E.2E.5D/near/319728280\">said</a>:</p>\n<blockquote>\n<p>Is there a way to restore an attribute after erasing it? I would have expected</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">norm_num</span><span class=\"o\">]</span> <span class=\"n\">Mathlib.Meta.NormNum.evalPow</span>\n</code></pre></div>\n<p>but that doesn't work.</p>\n</blockquote>\n<p>No, the only way to restore an erased attribute is to do it in a section and pop the scope</p>",
        "id": 319733169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672991668
    },
    {
        "content": "<p>Gotcha, makes sense!</p>",
        "id": 319735266,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1672992901
    },
    {
        "content": "<p>BTW is \"erased\" the official word for this? It has an unrelated, more common meaning in theorem proving/programming...</p>",
        "id": 319735371,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672992963
    },
    {
        "content": "<p>I need a way to check if a name has <code>[norm_num]</code>, though. I can't simply check if it's <code>NormNumExt</code>, because that doesn't account for already-erased attributes. The three options I can see are</p>\n<ol>\n<li>get all <code>NormNumExt</code> nodes of the <code>DiscrTree</code> (yikes?)</li>\n<li>add a field to the state that keeps track of active <code>norm_nums</code></li>\n<li>check if the name is<code>NormNumExt</code> by looking at the environment and check if not already <code>erased</code></li>\n</ol>\n<p>Which of these is best (or should I do something else)?</p>",
        "id": 319735724,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1672993150
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/287929-mathlib4/topic/local.20attribute.20.5B-.20.2E.2E.2E.5D/near/319735371\">said</a>:</p>\n<blockquote>\n<p>BTW is \"erased\" the official word for this? It has an unrelated, more common meaning in theorem proving/programming...</p>\n</blockquote>\n<p>Yep: <code>-</code> in e.g. <code>[-norm_num]</code> is secretly an <code>eraseAttr</code> syntax node, and the functionality for erasing an attribute is given by including the field <code>erase</code> when registering it :)</p>",
        "id": 319735885,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1672993242
    },
    {
        "content": "<p>I'm okay with saying that the usage of the word \"erase\" in this context is dev-only though</p>",
        "id": 319738366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672994565
    },
    {
        "content": "<p>not that I have a better naming suggestion</p>",
        "id": 319738430,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672994597
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span> in what context do you need to know if a name is <code>@[norm_num]</code> tagged?</p>",
        "id": 319738580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672994649
    },
    {
        "content": "<p>In defining the function <code>erase</code></p>",
        "id": 319738612,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1672994669
    },
    {
        "content": "<p>to give an error message if it's not already tagged?</p>",
        "id": 319738636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672994686
    },
    {
        "content": "<p>It should throw an error if the name doesn't have <code>[norm_num]</code>, yeah</p>",
        "id": 319738644,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1672994692
    },
    {
        "content": "<p>At least, patterning off existing <code>erase</code>s</p>",
        "id": 319738684,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1672994707
    },
    {
        "content": "<p>what does <code>simp</code> do?</p>",
        "id": 319738711,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672994716
    },
    {
        "content": "<p><code>simp</code> carries around all of the lemma names it's using in the state, I think?</p>",
        "id": 319738863,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1672994778
    },
    {
        "content": "<p>My guess is that it has other reasons to do so, though</p>",
        "id": 319738893,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1672994802
    },
    {
        "content": "<p>oh I see, it's the <code>lemmaNames</code> field</p>",
        "id": 319738937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672994825
    },
    {
        "content": "<p>nope, it is used nowhere else</p>",
        "id": 319738966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672994855
    },
    {
        "content": "<p>except in a test</p>",
        "id": 319738974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672994860
    },
    {
        "content": "<p>oh! well how about that</p>",
        "id": 319739161,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1672994941
    },
    {
        "content": "<p>but would (3) work? it seems more lightweight</p>",
        "id": 319739194,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1672994961
    },
    {
        "content": "<p>plus we need to access the environment in the course of giving the <code>erase</code> field anyway, so it's available</p>",
        "id": 319739215,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1672994979
    },
    {
        "content": "<p>being a <code>NormNumExt</code> is technically unrelated to being a norm num extension, you could always just define a random def with that type</p>",
        "id": 319739558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672995118
    },
    {
        "content": "<p>If you want to avoid the extra state I would prefer (1)</p>",
        "id": 319739709,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672995158
    },
    {
        "content": "<p>if it's a rare operation then a linear time operation over the discr tree seems fine, there is a small finite number of norm num extensions anyway</p>",
        "id": 319739772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672995196
    },
    {
        "content": "<p>Ok, nice; do you happen to know of a function to get all such nodes out of the <code>DiscrTree</code> or should I write it? I couldn't see it in <code>DiscrTree.lean</code>.</p>",
        "id": 319740027,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1672995289
    },
    {
        "content": "<p>(Also just to be clear the only reason I want to err on the side of avoiding the extra state is performance, which I don't have great intuition for—if it's fine to add to the state, that's probably easier, tbh.)</p>",
        "id": 319740433,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1672995465
    },
    {
        "content": "<p>Jannis had some DiscrTree operations in a PR to std I think</p>",
        "id": 319740692,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672995549
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/std4/pull/56\">std4#56</a></p>",
        "id": 319740999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672995672
    },
    {
        "content": "<p>you can steal the operations out of that and we can clean it up later</p>",
        "id": 319741071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672995702
    },
    {
        "content": "<p>sounds good! :) I'll leave a note.</p>",
        "id": 319741555,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1672995903
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/local.20attribute.20.5B-.20.2E.2E.2E.5D/near/319733169\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/287929-mathlib4/topic/local.20attribute.20.5B-.20.2E.2E.2E.5D/near/319728280\">said</a>:</p>\n<blockquote>\n<p>Is there a way to restore an attribute after erasing it? I would have expected</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">norm_num</span><span class=\"o\">]</span> <span class=\"n\">Mathlib.Meta.NormNum.evalPow</span>\n</code></pre></div>\n<p>but that doesn't work.</p>\n</blockquote>\n<p>No, the only way to restore an erased attribute is to do it in a section and pop the scope</p>\n</blockquote>\n<p>How exactly do you spell the scope pop? I was expecting maybe</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">norm_num_erase</span>\n<span class=\"n\">scoped</span><span class=\"o\">[</span><span class=\"n\">norm_num_erase</span><span class=\"o\">]</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">norm_num</span><span class=\"o\">]</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>but that doesn't seem to be right.</p>",
        "id": 319869182,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673041880
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">stuff</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">norm_num</span><span class=\"o\">]</span> <span class=\"n\">Mathlib.Meta.NormNum.evalPow</span>\n\n<span class=\"bp\">...</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">stuff</span>\n<span class=\"c1\">-- Mathlib.Meta.NormNum.evalPow is not erased</span>\n</code></pre></div>",
        "id": 319886518,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673051545
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">norm_num</span><span class=\"o\">]</span> <span class=\"n\">Mathlib.Meta.NormNum.evalPow</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">bla</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>should have the same effect, if you just want to erase the attribute in one declaration</p>",
        "id": 319886595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673051622
    },
    {
        "content": "<p>Those are what <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> originally suggested, but neither work for some reason</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">stuff</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">norm_num</span><span class=\"o\">]</span> <span class=\"n\">Mathlib.Meta.NormNum.evalPow</span>\n<span class=\"kd\">end</span> <span class=\"n\">stuff</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">31</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">norm_num1</span>\n  <span class=\"n\">guard_target</span> <span class=\"bp\">=ₛ</span> <span class=\"mi\">3</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">31</span> <span class=\"c1\">-- no change; still erased</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 319888552,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673052836
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">norm_num</span><span class=\"o\">]</span> <span class=\"n\">Mathlib.Meta.NormNum.evalPow</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">31</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">norm_num1</span>\n  <span class=\"n\">guard_target</span> <span class=\"bp\">=ₛ</span> <span class=\"mi\">3</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">31</span> <span class=\"c1\">-- no change; still erased</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 319888689,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673052907
    },
    {
        "content": "<p>It could be an issue in how you implemented the erase function? That is how erasing attributes is supposed to work from the user side</p>",
        "id": 319891050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673054690
    },
    {
        "content": "<p>Maybe—I tried to pattern it pretty closely after existing ones, but I’ll poke around and see if I can figure it out.</p>",
        "id": 319892132,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673055683
    },
    {
        "content": "<p>Update: really weird (to me): when I try to erase an imported <code>norm_num</code>, it works, but exhibits the above bad behavior. When i try to erase a <code>norm_num</code> extension defined in the same file, I get the error <code>attribute cannot be erased</code>—apparently <code>AttributeImpl.erase</code> is being called.</p>",
        "id": 319892986,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673056541
    },
    {
        "content": "<p>My guess currently is that e.g. <code>simp</code> uses a <code>ScopedEnvExtension</code> whereas <code>norm_num</code> just uses a <code>PersistentEnvExtension</code>?</p>",
        "id": 319895390,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673058631
    },
    {
        "content": "<p>A <code>ScopedEnvExtension</code> is just a <code>PersistentEnvExtension</code> with extra logic that has been inlined into the norm_num extension</p>",
        "id": 319895420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673058664
    },
    {
        "content": "<p>...Which I guess means that <code>erase</code> needs that extra logic to be inlined as well in order to work correctly? Or am I misinterpreting</p>",
        "id": 319895578,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673058787
    },
    {
        "content": "<p>yes, most likely</p>",
        "id": 319895601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673058812
    },
    {
        "content": "<p>Ok, thanks, that's helpful...I think I know where to look now</p>",
        "id": 319895677,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673058889
    },
    {
        "content": "<p>Hmm, I'm not totally sure the norm_num attribute <em>does</em> inline that extra logic yet. <code>ScopedEnvExtension</code> uses a <code>StateStack</code> which comes with <code>pushScope</code> and <code>popScope</code> functionality, but I don't see any circumlocutions for the state stack and scopes etc. in <code>norm_num</code>.</p>",
        "id": 319904258,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673066844
    },
    {
        "content": "<p>Am I correct in thinking that it's these functions which are responsible for managing the relevant scopes when e.g. <code>section</code>/<code>end</code> occurs?</p>",
        "id": 319904262,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673066852
    },
    {
        "content": "<p>yes</p>",
        "id": 319904281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673066876
    },
    {
        "content": "<p>Cool. Given that the extra logic doesn't exist yet, is it still a good idea to inline the necessary logic, or is it better to just switch to a <code>ScopedEnvExtension</code>?</p>",
        "id": 319904713,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673067151
    },
    {
        "content": "<p>still not sure what's going on with <code>AttributeImpl.erase</code>, though, and I wonder if it would be magically solved by using a <code>ScopedEnvExtension</code>.</p>",
        "id": 319904719,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673067165
    },
    {
        "content": "<p>I saw something about calling <code>.erase</code> on the list of erased attributes on your PR, which seems wrong</p>",
        "id": 319904751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673067210
    },
    {
        "content": "<p>That's when a norm_num extension is added (to make sure it's no longer erased). Not sure it really would ever apply, though.</p>",
        "id": 319904865,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673067341
    },
    {
        "content": "<p>Also it's just the hash map <code>.erase</code>, not the attribute's <code>erase</code></p>",
        "id": 319904922,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673067390
    },
    {
        "content": "<p>It's patterned off of what <code>SimpTheorems.addConst</code> does</p>",
        "id": 319904951,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673067438
    },
    {
        "content": "<p>that should never happen because you can't add the norm_num attribute to a definition twice</p>",
        "id": 319905361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673067805
    },
    {
        "content": "<p>Yeah, that's what I thought, but I didn't want to fail to account for some edge case I couldn't anticipate</p>",
        "id": 319905506,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673067920
    },
    {
        "content": "<p>I mean, it doesn't have anything to do with solving this scoping problem, though, right?</p>",
        "id": 319905528,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673067942
    },
    {
        "content": "<p>I thought you were trying to do scopes that way</p>",
        "id": 319905664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673068007
    },
    {
        "content": "<p>I don't follow—which way?</p>",
        "id": 319905705,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673068045
    },
    {
        "content": "<p>by erasing things from the map</p>",
        "id": 319905711,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673068056
    },
    {
        "content": "<p>which is wrong and explains the issues you were having earlier</p>",
        "id": 319905721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673068075
    },
    {
        "content": "<p>Currently I don't do scopes, is the point, I think.</p>",
        "id": 319905793,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673068123
    },
    {
        "content": "<p>to answer your question from before, using <code>ScopedEnvExtension</code> would make sense; the reason I avoided it before was because we didn't need scopes</p>",
        "id": 319905837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673068161
    },
    {
        "content": "<p>Would it make sense to implement scopes just for the hash set <code>erased</code> in the state somehow, without scoping the whole state?</p>",
        "id": 319905950,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673068238
    },
    {
        "content": "<p>if there is a way to implement scopes in a more lightweight way which takes advantage of the fact that norm num erasure is very rare and <code>@[norm_num]</code> itself can't be scoped, then that would be good too</p>",
        "id": 319905955,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673068247
    },
    {
        "content": "<p>Hmm. Can I inspect the current scope?</p>",
        "id": 319906037,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673068300
    },
    {
        "content": "<p>From within <code>IO Unit</code></p>",
        "id": 319906051,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673068310
    },
    {
        "content": "<p>no</p>",
        "id": 319906052,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673068314
    },
    {
        "content": "<p>certainly not just with that</p>",
        "id": 319906059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673068320
    },
    {
        "content": "<p>all of lean's state is up in some monad's <code>Context</code> or <code>State</code> type</p>",
        "id": 319906124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673068339
    },
    {
        "content": "<p>Right, I noticed it in e.g. <code>CommandElabM</code>'s state, iirc—I wasn't sure if <code>IO</code> extended it or something (or not)</p>",
        "id": 319906158,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673068395
    },
    {
        "content": "<p>no it's the other way around, <code>IO</code> is at the very bottom of the monad hierarchy</p>",
        "id": 319906178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673068416
    },
    {
        "content": "<p>ahh</p>",
        "id": 319906237,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673068462
    },
    {
        "content": "<p>Hmm. <code>erase</code> operates in <code>AttrM</code>. Is that enough?</p>",
        "id": 319906240,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673068476
    },
    {
        "content": "<p>Wait</p>",
        "id": 319906248,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673068489
    },
    {
        "content": "<p>Let me read that type again</p>",
        "id": 319906249,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673068495
    },
    {
        "content": "<p>AttrM is CoreM, which has a decent amount of state</p>",
        "id": 319906252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673068499
    },
    {
        "content": "<p>but I think you are asking the wrong question</p>",
        "id": 319906265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673068510
    },
    {
        "content": "<p>all of an extension's state has to live inside the <code>EnvExtension</code></p>",
        "id": 319906284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673068547
    },
    {
        "content": "<p>so if your attribute has a scoping effect then it needs to have a scope stack of some kind</p>",
        "id": 319906329,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673068577
    },
    {
        "content": "<p>Ok, makes sense</p>",
        "id": 319906335,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673068598
    },
    {
        "content": "<p>But what sort of things can implement that?</p>",
        "id": 319906338,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673068612
    },
    {
        "content": "<p>what do you mean?</p>",
        "id": 319906341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673068620
    },
    {
        "content": "<p>How can I get the scope state into the <code>EnvExtension</code> state?</p>",
        "id": 319906348,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673068625
    },
    {
        "content": "<p>Or, is that not quite how things flow?</p>",
        "id": 319906351,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673068636
    },
    {
        "content": "<p>it's the type variables in <code>PersistentEnvExtension</code></p>",
        "id": 319906355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673068643
    },
    {
        "content": "<p>(see the doc comment too: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.PersistentEnvExtension#doc\">docs4#Lean.PersistentEnvExtension</a>)</p>",
        "id": 319906366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673068660
    },
    {
        "content": "<p>Right, ok...so, hmm. Let's say a <code>section</code> or <code>end</code> is encountered. some <code>pushScope</code> or <code>popScope</code> occurs, right? Is that meant to reach in and affect the state somehow?</p>",
        "id": 319906552,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673068866
    },
    {
        "content": "<p>hm, looks like <code>ScopedEnvExtension</code>s do have an extra bit of magic: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.pushScope#src\">src4#Lean.pushScope</a></p>",
        "id": 319906584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673068911
    },
    {
        "content": "<p>I saw that! I was wondering how that worked</p>",
        "id": 319906638,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673068943
    },
    {
        "content": "<p><code>section</code> calls that function, which checks a global list of all <code>ScopedEnvExtension</code>s which is pushed to in <code>registerScopedEnvExtension</code></p>",
        "id": 319906645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673068955
    },
    {
        "content": "<p>so that means that even if you make a scoping-like <code>PersistentEnvExtension</code> you won't get a callback so you can't detect scopes</p>",
        "id": 319906657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673068983
    },
    {
        "content": "<p>I seee</p>",
        "id": 319906676,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673069026
    },
    {
        "content": "<p>Hmmm. So is the best option really to turn the whole thing into a <code>ScopedEnvExtension</code>? Or is there some tricky way we could, I don't know, set up a separate scoped extension just for keeping track of erased norm_nums, which the <code>PersistentEnvExtension</code> can keep a reference to? I'm not sure if that's possible, though. It seems like the persistent state can't access any of the information needed.</p>",
        "id": 319906924,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673069330
    },
    {
        "content": "<p>Unless—could the auxiliary scoped extension reach in and update a field of the persistent extension when it encountered a new scope?</p>",
        "id": 319907040,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673069478
    },
    {
        "content": "<p>you still have a fair amount of control with a scoped env extension, the interface is a little different though</p>",
        "id": 319907097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673069537
    },
    {
        "content": "<p>I don't think it should be a problem to scope only what you want to</p>",
        "id": 319907110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673069556
    },
    {
        "content": "<p>Ok, neat—one thing I noticed was that <code>addImportedFn</code> didn't seem to have a direct analogue type-wise</p>",
        "id": 319907130,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673069585
    },
    {
        "content": "<p>This is in the<code>Descr</code> argument to <code>registerScopedEnvExtension</code></p>",
        "id": 319907213,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673069661
    },
    {
        "content": "<p>I thought the <code>OLean</code> fields might be related, but they don't quite do the same thing...</p>",
        "id": 319907423,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673069857
    },
    {
        "content": "<p>you can see how they relate in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.ScopedEnvExtension.addImportedFn#src\">src4#Lean.ScopedEnvExtension.addImportedFn</a></p>",
        "id": 319907487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673069888
    },
    {
        "content": "<p>Oh I see! That looks like it makes sense. Tyvm for taking the time to explain all this. I'm going to pick this back up sometime tomorrow if I can :)</p>",
        "id": 319907823,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673070284
    },
    {
        "content": "<p>Ok, I think I got this working! <a href=\"https://github.com/leanprover-community/mathlib4/pull/1364\">mathlib4#1364</a></p>",
        "id": 320334541,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673299747
    },
    {
        "content": "<p>(A bit worried about the necessary switch from two <code>foldlM</code>'s to <code>ScopedEnvExtension</code>'s nested <code>for ... in</code>'s when building the tree on import, but I don't know—maybe it's the same behind the scenes?)</p>",
        "id": 320335816,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673300242
    },
    {
        "content": "<p>Also, as I'm guessing scoped extensions should be, it's now localizable—though I doubt that will get much, if any, use :)</p>",
        "id": 320336251,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673300433
    }
]