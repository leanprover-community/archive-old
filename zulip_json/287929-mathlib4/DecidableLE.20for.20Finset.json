[
    {
        "content": "<p>This is related to PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/1600\">mathlib4#1600</a>. In mathlib3, the theorem <a href=\"https://leanprover-community.github.io/mathlib_docs/combinatorics/set_family/compression/uv.html#uv.card_compress\">uv.card_compress</a> is able to infer that finset has a <code>[decidable_rel has_le.le]</code> (this is needed for <code>uv.compress</code>). However, nowhere in mathlib3 is an instance <code>decidable_le</code> for finsets explicitly declared, as far as I can tell. There is one for multisets, which I'm guessing this infers, since finsets essentially are multisets. Is that correct?</p>\n<p>Anyway, in mathlib4, this does not work anymore, and when porting uv.card_compress, lean bemoans the lack of a <code>DecidableRel fun x x_1 =&gt; x ≤ x_1</code> instance for the Finset.Le, as seen in the above PR. Should we add such an instance to Data.Finset.Basic, or how can we make lean infer it better?</p>",
        "id": 321924295,
        "sender_full_name": "Lukas Miaskiwskyi",
        "timestamp": 1673988920
    },
    {
        "content": "<p>It definitely is not using the one from <code>multiset</code>. Try looking at the corresponding statements in mathlib and inspect them with the infoview to see what instance is inferred.</p>",
        "id": 321935176,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673993335
    },
    {
        "content": "<p>I would guess it finds the instance for <code>subset</code></p>",
        "id": 321936133,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673993735
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Thanks, I spent so much time in lean 4 that I forgot that the lean 3 infoview is actually powerful enough to tell me that very easily. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.decidable_dforall_finset\">docs#finset.decidable_dforall_finset</a> is what it finds, which is also ported, so I still don't quite get the problem, but that brings me closer to understanding it (tomorrow after some sleep)</p>",
        "id": 321936670,
        "sender_full_name": "Lukas Miaskiwskyi",
        "timestamp": 1673993944
    },
    {
        "content": "<p>Hmm, did the definition of <code>subset</code> change?</p>",
        "id": 321936979,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673994094
    },
    {
        "content": "<p>There was a similar change with the definition on <code>set</code></p>",
        "id": 321937012,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673994115
    },
    {
        "content": "<p>I would guess that Lean3 just unfolded in places where Lean4 doesn't</p>",
        "id": 321939185,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673995031
    }
]