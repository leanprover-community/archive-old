[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I'm confused by something about the new <code>norm_num</code> functionality.  This works for me on top of <a href=\"https://github.com/leanprover-community/mathlib4/pull/1572\">mathlib4#1572</a>, the PR seemingly removing all sorries from the <code>norm_num</code> implementation.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.NormNum</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>\n<p>But it's false!  Consider the field <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}/3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/3</span></span></span></span>.</p>",
        "id": 321405459,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673727725
    },
    {
        "content": "<p>And indeed I can disprove it in that example in mathlib3.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"c1\">-- `ℤ / 3` is a field</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat.prime</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">nat.prime_three</span><span class=\"o\">⟩</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"c1\">-- 3⁻¹ + 6⁻¹ = 2⁻¹ is false in `ℤ / 3`</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span>  <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">6</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">],</span>\n  <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 321405510,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673727759
    },
    {
        "content": "<p>Ooh, that’s not good…</p>",
        "id": 321406876,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673728798
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1572\">mathlib4#1572</a></p>",
        "id": 321407170,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1673729009
    },
    {
        "content": "<p>there does seem to be no <code>sorry</code>ied statements in that mathlib...</p>",
        "id": 321407312,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1673729133
    },
    {
        "content": "<p>but I also can't seem to replicate:<br>\n<a href=\"/user_uploads/3121/EMKkrB93WMw1oAWSM2SJRvL2/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/EMKkrB93WMw1oAWSM2SJRvL2/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/EMKkrB93WMw1oAWSM2SJRvL2/image.png\"></a></div>",
        "id": 321407572,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1673729350
    },
    {
        "content": "<p>Huh, let me build, maybe somehow my system still has oleans from <code>master</code> rather than the branch?  Sorry for the confusion if so ...</p>",
        "id": 321407756,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673729511
    },
    {
        "content": "<p>Oh, yup, I thought I could replicate too but hitting \"refresh file dependencies\" just now took away the apparent success.</p>",
        "id": 321407884,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1673729600
    },
    {
        "content": "<p>Excellent, now it fails!  Sorry for the noise.  Presumably the issue</p>\n<blockquote>\n<p>The statement of <code>isRat_inv_pos</code> was also wrong, needing a <code>CharZero</code> assumption.</p>\n</blockquote>\n<p>fixed in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1572\">mathlib4#1572</a> was the culprit here.</p>",
        "id": 321408175,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673729783
    },
    {
        "content": "<p>9 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/Rat.20in.20norm_num\">#mathlib4 &gt; Rat in norm_num</a> by <span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span>.</p>",
        "id": 321409402,
        "sender_full_name": "Notification Bot",
        "timestamp": 1673730824
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> has marked this topic as resolved.</p>",
        "id": 321409461,
        "sender_full_name": "Notification Bot",
        "timestamp": 1673730845
    }
]