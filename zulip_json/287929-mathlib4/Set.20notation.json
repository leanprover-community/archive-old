[
    {
        "content": "<p>I thought it would be good to be able to write definitions like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">inv</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">×</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">×</span> <span class=\"n\">A</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>But this doesn't fit the pattern of set theory notation defined in Mathlib.Init.Set.lean.  So I tried this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"{ \"</span> <span class=\"n\">term</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">term</span> <span class=\"s2\">\" | \"</span> <span class=\"n\">term</span> <span class=\"s2\">\" }\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">({</span> <span class=\"bp\">$</span><span class=\"n\">pat</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">setOf</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">pat</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This seems to work, but then it creates problems for other set theory notation.  Something like <code>{x : Nat | x = 0}</code> becomes ambiguous--I assume that's because it fits both the previous syntax pattern and the new one I have defined.  Is there a way to eliminate the ambiguity?</p>",
        "id": 311062987,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1668887927
    },
    {
        "content": "<p>Allowing destructuring seems useful! Does it still work (as-is, not in a way that fixes the ambiguity) if you just use <code>fun $pat : $t =&gt; $p</code> on the rhs, since iirc <code>fun</code> allows destructuring as well? If so, maybe the ambiguity could be resolved by replacing the existing macro (which in this case would only differ by restricting <code>$pat</code> to be an <code>ident</code>).</p>\n<p>I think the trick, though, would be to first check if <code>$pat</code> was a valid destructuring for the given type, and if not, throw-unsupported and allow the low-priority <code>extBinders</code> case to take over. (But I’m not sure how to do the first part, and maybe there’s a reason that all of this wouldn’t be a good idea that I haven’t thought of.)</p>",
        "id": 311066421,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1668890455
    },
    {
        "content": "<p>Though, thinking about it, maybe it’s <code>Std.Util.ExtendedBinder</code> that should allow destructuring in general instead of just <code>ident</code>s? Not sure how much this would break or how feasible it would be, though…</p>",
        "id": 311067298,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1668891180
    },
    {
        "content": "<p>Perhaps what I need is this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"{ \"</span> <span class=\"n\">pat</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" | \"</span> <span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" }\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"n\">pat.raw.isIdent</span> <span class=\"k\">then</span>\n    <span class=\"n\">Lean.Elab.throwUnsupportedSyntax</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">Lean.Elab.Term.elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">setOf</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">pat</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"n\">none</span>\n</code></pre></div>\n<p>This avoids creating a second possible interpretation for something like <code>{x : Nat | x = 0}</code>.</p>\n<p>But would it make sense to add something like this to the Mathlib definition of set notation?</p>",
        "id": 311161349,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1668962890
    },
    {
        "content": "<p>On the other hand, this isn't good enough:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"{ \"</span> <span class=\"n\">pat</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" | \"</span> <span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" }\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"n\">pat.raw.isIdent</span> <span class=\"k\">then</span>\n    <span class=\"n\">Lean.Elab.throwUnsupportedSyntax</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">Lean.Elab.Term.elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">setOf</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">pat</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"n\">none</span>\n</code></pre></div>\n<p>This causes <code>{x &gt; 0 | x &lt; 10}</code> to be ambiguous.  I suppose a more complicated test could be used to avoid the ambiguity.</p>\n<p>Is the <code>binderPred</code> notation really needed for anything?  I'd rather have the destructuring notation than the <code>binderPred</code> notation.</p>",
        "id": 311165092,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1668965045
    },
    {
        "content": "<p>After a lot of experimentation, here's what I've come up with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"{ \"</span> <span class=\"n\">pat</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" | \"</span> <span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" }\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"n\">pat.raw.isIdent</span> <span class=\"k\">then</span>\n    <span class=\"n\">Lean.Elab.throwUnsupportedSyntax</span>  <span class=\"c1\">--To avoid creating ambiguity with existing set notation</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">Lean.Elab.Term.elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">setOf</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">pat</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"n\">none</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">identBinderPred</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"n\">binderPred</span> <span class=\"o\">:</span> <span class=\"n\">identBinderPred</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"{ \"</span> <span class=\"n\">pat</span><span class=\"o\">:(</span><span class=\"n\">identBinderPred</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"s2\">\" | \"</span> <span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" }\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"n\">pat.raw</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ident</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Elab.throwUnsupportedSyntax</span>  <span class=\"c1\">--To avoid ambiguity</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">_</span> <span class=\"bp\">`</span><span class=\"n\">identBinderPred__</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Elab.throwUnsupportedSyntax</span>  <span class=\"c1\">--To avoid ambiguity</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">patTerm</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Term</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">pat</span><span class=\"o\">⟩</span>\n      <span class=\"n\">Lean.Elab.Term.elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">setOf</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">patTerm</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">@[app_unexpander setOf]</span>\n<span class=\"kd\">def</span> <span class=\"n\">setOf.unexpander</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">_</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">match</span> <span class=\"bp\">$</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">pat</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">({</span> <span class=\"bp\">$</span><span class=\"n\">pat</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"o\">})</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>I don't understand all of this, but it seems to work.  It allows me to write things like <code>{(m, n) : Nat × Nat | m &lt; n}</code></p>\n<p>Is there any reason not to do this?  Is there a better way to do it?</p>",
        "id": 311876442,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1669226135
    }
]