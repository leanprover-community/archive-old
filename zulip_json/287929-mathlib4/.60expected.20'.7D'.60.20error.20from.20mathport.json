[
    {
        "content": "<p>Is the following a problem in mathport's output syntax?   <a href=\"https://github.com/leanprover-community/mathlib3port/blob/e1c547853a56c1309c8a2fddbb0dfe0789c5e239/Mathbin/Algebra/Order/WithZero.lean#L51\">Here</a> mathport outputs something of the following form, which gives the error <code>expected '}'</code> on <code>prop3</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">class1</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">prop1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">class2</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">class1</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">prop2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span>\n  <span class=\"n\">prop3</span> <span class=\"o\">:</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">inst</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">class1</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">class2</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">inst</span> <span class=\"k\">with</span> <span class=\"n\">prop2</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">prop3</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>The problem seems to be purely syntactic, since a reformatted final instance gives no errors.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">class2</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">inst</span> <span class=\"k\">with</span>\n    <span class=\"n\">prop2</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">prop3</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 314672498,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670505040
    },
    {
        "content": "<p>I think this is mentioned in the porting guide on the wiki, but it would be neat if mathport got it right in the first place, yeah</p>",
        "id": 314672750,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1670505132
    },
    {
        "content": "<p>Ah, thanks.  I updated the wiki discussion of this point to mention <code>expected '}'</code> as a symptom.</p>",
        "id": 314674634,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670505735
    },
    {
        "content": "<p>FYI, these are generally issues in the lean core formatter. Mathport actually can't do much about it since it uses the unmodified formatter from core</p>",
        "id": 314689936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670510262
    },
    {
        "content": "<p>If someone who knows how to invoke the formatter could produce a MWE of this, we should report it.</p>",
        "id": 314783587,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670538268
    },
    {
        "content": "<p>pretty printing a definition often works</p>",
        "id": 314783923,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670538441
    },
    {
        "content": "<p>the <code>formatTerm.lean</code> test file has a setup for testing formatting of arbitrary syntax</p>",
        "id": 314784066,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670538497
    },
    {
        "content": "<p>I'm not sure why there is a comma there in the first place. Mathport never uses commas in structure instances</p>",
        "id": 314784618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670538720
    },
    {
        "content": "<p>if you use any newlines it formats correctly</p>",
        "id": 314784707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670538740
    },
    {
        "content": "<p>oh the irony:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"c1\">-- TODO(Mario): formatter has trouble if you omit the commas</span>\n    <span class=\"k\">if</span> <span class=\"n\">catchall</span> <span class=\"k\">then</span>\n      <span class=\"bp\">`</span><span class=\"o\">({</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">srcs</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"k\">with</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">flds</span><span class=\"o\">],</span><span class=\"bp\">*</span> <span class=\"bp\">..</span> <span class=\"o\">})</span>\n    <span class=\"k\">else</span>\n      <span class=\"bp\">`</span><span class=\"o\">({</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">srcs</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"k\">with</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">flds</span><span class=\"o\">],</span><span class=\"bp\">*</span> <span class=\"o\">})</span>\n</code></pre></div>",
        "id": 314784909,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670538832
    }
]