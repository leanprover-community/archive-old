[
    {
        "content": "<p>Consider these examples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">B</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">h.left</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">B</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">And.left</span> <span class=\"n\">h</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">B</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">h.left</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h1</span>\n</code></pre></div>\n<p>The first works and the other two don't.  The error message in the second is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">h.left</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">h</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">B</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">✝</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"bp\">✝</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">?</span><span class=\"n\">m.88</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>The error message in the third is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">h1</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.353</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.353</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>I assume the problem is caused by the implicit argument in the definition of subset.  I have two questions:</p>\n<ol>\n<li>Why are the first and second examples different?  I thought <code>h.left</code> would be synonymous with <code>And.left h</code>.</li>\n<li>How do I avoid these problems with implicit arguments?</li>\n</ol>",
        "id": 312266319,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1669416607
    },
    {
        "content": "<p>By the way, in the third example, after the line <code>have h1 : A ⊆ B := h.left</code>, the tactic state includes <code>h1 : A ⊆ B</code> and the goal is <code>A ⊆ B</code>.  How could <code>exact h1</code> not work?</p>",
        "id": 312267392,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1669417395
    },
    {
        "content": "<p>2: It should be fixed by redefining:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">Subset</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s₁</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s₂</span>\n</code></pre></div>\n<p>as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">Subset</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"bp\">\\</span><span class=\"o\">{{</span><span class=\"n\">a</span><span class=\"bp\">\\</span><span class=\"o\">}},</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s₁</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s₂</span>\n</code></pre></div>",
        "id": 312267398,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669417400
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> , should I file an issue for this or will you?</p>",
        "id": 312279299,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1669424223
    },
    {
        "content": "<p>Was this manually ported incorrectly? Or is this a mathport bug?</p>",
        "id": 312443053,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669541374
    },
    {
        "content": "<p>it was manually ported before semi-implicits existed</p>",
        "id": 312444321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669542080
    },
    {
        "content": "<p>I filed an issue:  <a href=\"https://github.com/leanprover-community/mathlib4/issues/738\">#738</a>.</p>",
        "id": 312521983,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1669585867
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/735\">mathlib4#735</a> I encountered an issue where Lean 3 and Lean 4 elaborated a declaration differently, and I wanted to mention it in case it matters: The declaration in question was:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">units.mul_inv'</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">G₀</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">G₀</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">mul_inv_cancel</span> <span class=\"n\">u.ne_zero</span>\n</code></pre></div>\n<p>Note that Lean 3 elaborates this to `(↑u)⁻¹. However, the analogous declaration in Lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Units.mul_inv'</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">G₀</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">G₀</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">u</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mul_inv_cancel</span> <span class=\"n\">u.ne_zero</span>\n</code></pre></div>\n<p>elaborates to <code>↑(u⁻¹)</code>, which caused us a bit of confusion in that PR. It was easily fixed to match the Lean 3 declaration with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Units.mul_inv'</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">G₀</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">G₀</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mul_inv_cancel</span> <span class=\"n\">u.ne_zero</span>\n</code></pre></div>\n<p>Is this difference in elaboration expected and we just need to be aware it might be an issue, or is it aberrant behavior?</p>",
        "id": 312523322,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669586929
    }
]