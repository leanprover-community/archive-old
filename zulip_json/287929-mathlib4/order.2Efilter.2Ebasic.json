[
    {
        "content": "<p>The amount of <code>data.foobar</code> in <a href=\"https://tqft.net/mathlib4/2022-12-22/order.filter.basic.pdf\">https://tqft.net/mathlib4/2022-12-22/order.filter.basic.pdf</a> is quite unappetizing...</p>",
        "id": 317310360,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1671698042
    },
    {
        "content": "<p>It all comes from <code>data.set.finite</code> which will unlock a lot of things.</p>",
        "id": 317319026,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671701423
    },
    {
        "content": "<p>We have to port all of <code>data</code> eventually!</p>",
        "id": 317320581,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671701954
    },
    {
        "content": "<p>All dependencies are ported (1 is pending review). I'm going to start porting <code>Order.Filter.Basic</code>.</p>",
        "id": 322642823,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674261080
    },
    {
        "content": "<p>Do we have <code>tactic.monotonicity</code>?</p>",
        "id": 322643060,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674261208
    },
    {
        "content": "<p>Probably, not yet.</p>",
        "id": 322643202,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674261284
    },
    {
        "content": "<p>:(</p>",
        "id": 322643205,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674261286
    },
    {
        "content": "<p>No, current advice is to comment out any @[mono] and add a porting note.  Although I think that with the new tag_attribute functionality we could create a mono \"tag attribute\" and then at least keep tagging things <code>mono</code>, maybe even make a quickie implementation of <code>mono</code> as <code>apply_rules only using mono</code>.</p>",
        "id": 322643458,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674261471
    },
    {
        "content": "<p>In fact I can try that now.</p>",
        "id": 322643536,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674261500
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> Are the <code>mono</code> turning up in <code>Order.Filter.Basic</code> for attribute-tagging or for proofs?</p>",
        "id": 322643572,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674261524
    },
    {
        "content": "<p>I don't know yet.</p>",
        "id": 322644005,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674261775
    },
    {
        "content": "<p>Even if it's used for proofs, it should be easy to unfold these usages.</p>",
        "id": 322644066,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674261811
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/287929-mathlib4/topic/order.2Efilter.2Ebasic/near/322643458\">said</a>:</p>\n<blockquote>\n<p>maybe even make a quickie implementation of <code>mono</code> as <code>apply_rules only using mono</code>.</p>\n</blockquote>\n<p>My guess is that this will work for about 75% of mathlib uses of mono.</p>",
        "id": 322644164,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674261853
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1740\">mathlib4#1740</a> for a (cheap, very partial) <code>mono</code> implementation.</p>",
        "id": 322661901,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674275711
    },
    {
        "content": "<p>I fixed most proofs.</p>",
        "id": 322749055,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674317196
    },
    {
        "content": "<p>Notable exceptions are <code>filter_upwards</code> (probably, can be implemented as a macro; didn't try yet) and category theory stuff.</p>",
        "id": 322749106,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674317232
    },
    {
        "content": "<p>I see that some classes like <code>Functor</code>, <code>Monad</code>, and their <code>Lawful</code> versions changed. It would be nice if someone who understands what's changed and what's wrong with \"filter as a monad\" (there are some comments about conflicting instances) will have a look.</p>",
        "id": 322749366,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674317374
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> Do you already have a PR to track that you are porting this file?</p>",
        "id": 322751893,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674318547
    },
    {
        "content": "<p>Because it doesn't show up as WIP on <a href=\"https://leanprover-community.github.io/mathlib-port-status/old\">#port-status</a></p>",
        "id": 322751918,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674318557
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1750\">https://github.com/leanprover-community/mathlib4/pull/1750</a> How do I update <a href=\"https://leanprover-community.github.io/mathlib-port-status/old\">#port-status</a>?</p>",
        "id": 322752137,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674318662
    },
    {
        "content": "<p>It should happend automatically</p>",
        "id": 322752578,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674318909
    },
    {
        "content": "<p>Can you please merge master into your branch?</p>",
        "id": 322752653,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674318957
    },
    {
        "content": "<p>Done.</p>",
        "id": 322752998,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674319115
    },
    {
        "content": "<p>I’ll send the version I have of <code>filter_upwards</code> in ~1h</p>",
        "id": 322756057,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1674320557
    },
    {
        "content": "<p>Well or rather I’ll add it directly to the PR</p>",
        "id": 322756111,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1674320579
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> Any progress?</p>",
        "id": 322768207,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674327399
    },
    {
        "content": "<p>I just pushed, sorry for the delay, I had to make it up to date. I fixed some of the proofs, but some of them give weird errors, I'm looking into it</p>",
        "id": 322770478,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1674328880
    },
    {
        "content": "<p>I'll fix the rest.</p>",
        "id": 322771117,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674329215
    },
    {
        "content": "<p>Do we need these spaces in \" with\", \" using\"?</p>",
        "id": 322771244,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674329278
    },
    {
        "content": "<p>No we don't</p>",
        "id": 322771430,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1674329363
    },
    {
        "content": "<p>There were in <code>Mathport/Syntax</code> so I kept them</p>",
        "id": 322771498,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1674329406
    },
    {
        "content": "<p>One of the errors is here because we don't have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lift_pair\">docs#lift_pair</a></p>",
        "id": 322771725,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674329558
    },
    {
        "content": "<p>(If that wasn't clear, I'm looking into the failures that are linked to <code>filter_upwards</code>, because they suggest a bad implementation, not the other failures)</p>",
        "id": 322771887,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1674329673
    },
    {
        "content": "<p>I just pushed a fix to the tactic (a missing <code>withMainContext</code> made that the tactic only knew the context of the lemma, not the current context of the goal)</p>",
        "id": 322774352,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1674331375
    },
    {
        "content": "<p>Who should I ask about category theory stuff?</p>",
        "id": 322781066,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674336802
    },
    {
        "content": "<p>Do we want <code>filter</code> to be a monad? What are the issues with <code>applicative</code> instance?</p>",
        "id": 322781080,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674336824
    },
    {
        "content": "<p><code>applicative filter</code> is used for <code>topological_space (list _)</code></p>",
        "id": 322791765,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674345669
    },
    {
        "content": "<p>I created a few PRs that fix issues I found while porting to Lean 4: <a href=\"https://github.com/leanprover-community/mathlib/pull/18253\">#18253</a>, <a href=\"https://github.com/leanprover-community/mathlib/pull/18254\">#18254</a> (on the queue), <a href=\"https://github.com/leanprover-community/mathlib/pull/18255\">#18255</a></p>",
        "id": 322820883,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674372752
    },
    {
        "content": "<p>Ready for review.</p>",
        "id": 322931687,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1674442086
    }
]