[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, would it be possible for mathport to automatically guess the <code>#align</code>s for the <code>@[to_additive]</code> versions of statements? Currently it seems we need to add these #aligns by hand.</p>",
        "id": 314337781,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670365344
    },
    {
        "content": "<p>What we could do is have binport record lean 3 <code>to_additive</code> data in the lean 4 environment, and then synport can pick up on that when it is generating <code>#align</code> statements</p>",
        "id": 314338224,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670365548
    },
    {
        "content": "<p>what's the first file that uses to_additive?</p>",
        "id": 314339007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670365837
    },
    {
        "content": "<p>or any early one</p>",
        "id": 314339034,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670365846
    },
    {
        "content": "<p>Mathlib/Init/ZeroOne.lean</p>",
        "id": 314339310,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670365946
    },
    {
        "content": "<p>but Algebra/Group/Defs is maybe more representative. It has lots of #align my_mul myMul #align my_add myAdd pairs.</p>",
        "id": 314339520,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670366041
    },
    {
        "content": "<p>is ZeroOne in mathlib3?</p>",
        "id": 314339624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670366072
    },
    {
        "content": "<p>it's in a pretty fishy directory if it is...</p>",
        "id": 314339676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670366095
    },
    {
        "content": "<p>Yeah, sorry, I shouldn't have suggested that one. Algebra/Group/Defs is a good example.</p>",
        "id": 314340283,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670366328
    },
    {
        "content": "<p>gah, the tlean exporter is not outputting user attribute data</p>",
        "id": 314340739,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670366536
    },
    {
        "content": "<p>A sneak peek at mathport output:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> warning: mul_assoc -&gt; mul_assoc is a dubious translation:</span>\n<span class=\"cm\">lean 3 declaration is</span>\n<span class=\"cm\">  forall {G : Type.{u1}} [_inst_1 : Semigroup.{u1} G] (a : G) (b : G) (c : G), Eq.{succ u1} G (HMul.hMul.{u1, u1, u1} G G G (instHMul.{u1} G (Semigroup.toHasMul.{u1} G _inst_1)) (HMul.hMul.{u1, u1, u1} G G G (instHMul.{u1} G (Semigroup.toHasMul.{u1} G _inst_1)) a b) c) (HMul.hMul.{u1, u1, u1} G G G (instHMul.{u1} G (Semigroup.toHasMul.{u1} G _inst_1)) a (HMul.hMul.{u1, u1, u1} G G G (instHMul.{u1} G (Semigroup.toHasMul.{u1} G _inst_1)) b c))</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  forall {G : Type.{u1}} [_inst_1 : Semigroup.{u1} G] (a : G) (b : G) (c : G), Eq.{succ u1} G (HMul.hMul.{u1, u1, u1} G G G (instHMul.{u1} G (Semigroup.toMul.{u1} G _inst_1)) (HMul.hMul.{u1, u1, u1} G G G (instHMul.{u1} G (Semigroup.toMul.{u1} G _inst_1)) a b) c) (HMul.hMul.{u1, u1, u1} G G G (instHMul.{u1} G (Semigroup.toMul.{u1} G _inst_1)) a (HMul.hMul.{u1, u1, u1} G G G (instHMul.{u1} G (Semigroup.toMul.{u1} G _inst_1)) b c))</span>\n<span class=\"cm\">Case conversion may be inaccurate. Consider using '#align mul_assoc mul_assocₓ'. -/</span>\n<span class=\"kd\">@[no_rsimp, to_additive]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Semigroup.mul_assoc</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">mul_assoc</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">add_assoc</span> <span class=\"n\">add_assoc</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">Semigroup.to_is_associative</span> <span class=\"o\">:</span> <span class=\"n\">IsAssociative</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">*</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">mul_assoc</span><span class=\"o\">⟩</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">semigroup.to_is_associative</span> <span class=\"n\">Semigroup.to_is_associative</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">add_semigroup.to_is_associative</span> <span class=\"n\">AddSemigroup.to_is_associative</span>\n</code></pre></div>",
        "id": 314364635,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670379301
    },
    {
        "content": "<p>this will take a little while to get upstreamed though since it depends on <a href=\"https://github.com/leanprover-community/lean/pull/790\">lean#790</a></p>",
        "id": 314364681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670379350
    }
]