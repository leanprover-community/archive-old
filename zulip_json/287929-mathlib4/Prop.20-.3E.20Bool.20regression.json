[
    {
        "content": "<p>Stating things like <code>List.filter</code> and <code>Finset.filter</code> in terms of <code>Bool</code> instead of a decidable Prop seems like a real regression to me in terms of proving theorems. I understand that programmers really want <code>Bool</code> versions, but maybe having <code>Prop</code> versions everywhere in mathlib seems like a good idea. It's so much hassle going between <code>Prop</code> and <code>Bool</code>.</p>",
        "id": 321803092,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673953295
    },
    {
        "content": "<p>What are we going to do here?</p>",
        "id": 321993695,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674029593
    },
    {
        "content": "<p>Because right now we aren't being consistent</p>",
        "id": 321993716,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674029605
    },
    {
        "content": "<p>And that certainly causes a royal boatload of trouble</p>",
        "id": 321993740,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674029619
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> There are a lot of <code>rfl</code>s that now have to be replaced with <code>simp only [Bool.decide_coe]</code> or <code>simp only [decide_eq_true_eq]</code>.</p>",
        "id": 321994334,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674029865
    },
    {
        "content": "<p>I think we should try to use simp lemmas to rewrite bool stuff into prop stuff, and push <code>decide</code> to the leaves so you can use propositional logic wherever possible</p>",
        "id": 321994413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674029886
    },
    {
        "content": "<p>the problem is that there are some current simp lemmas that are fighting this</p>",
        "id": 321994447,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674029906
    },
    {
        "content": "<p>It's not only that, right? It's also that we genuinely have things that used to line up well in ml3, and now no longer line up.</p>",
        "id": 321994511,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674029944
    },
    {
        "content": "<p>A <code>rfl</code> or <code>id</code> that stopped working is not because of a simp-lemma going in the wrong direction.</p>",
        "id": 321994550,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674029964
    },
    {
        "content": "<p>like stuff that rewrites <code>b ≠ true ↔ b = false</code> or <code>decide (p ∧ q) = decide p &amp;&amp; decide q</code></p>",
        "id": 321994553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674029968
    },
    {
        "content": "<p>sure but that's going to happen whenever any definition changes, that's not clearly an indightment</p>",
        "id": 321994651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674030007
    },
    {
        "content": "<p>So: should the definitions change?</p>",
        "id": 321994718,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674030055
    },
    {
        "content": "<p>That's what Chris asked at the top of the thread</p>",
        "id": 321994734,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674030062
    },
    {
        "content": "<p>to answer that, we need some examples where the new world is worse than the old world, not just because change is hard</p>",
        "id": 321994768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674030081
    },
    {
        "content": "<p>Or we do the port with <code>List.filterProp</code> and refactor later.</p>",
        "id": 321994835,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674030117
    },
    {
        "content": "<p>If the prop valued version really is better for some use cases then we can make that an official thing. But it's hard to evaluate the examples in this thread alone since they are just general opinions. I totally get the sentiment, and share it to some extent, but it's not enough to make a policy decision one way or another.</p>",
        "id": 321995386,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674030328
    },
    {
        "content": "<p>Also Gabriel's PR to make Decidable a wrapper for a bool may also affect this</p>",
        "id": 321995488,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674030367
    },
    {
        "content": "<p>Certainly, all the simp lemmas that change <code>foo = true</code> into <code>bar = false</code> are terrible</p>",
        "id": 321995635,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674030436
    },
    {
        "content": "<p>Because many other simp lemmas have a <code>p x = true</code> nested somewhere in their LHS</p>",
        "id": 321995682,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674030467
    },
    {
        "content": "<p>Actually on the LHS, or in side conditions?</p>",
        "id": 321995923,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674030565
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">prod_ite_of_false</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 321995968,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674030593
    },
    {
        "content": "<p>Should this now use <code>bif</code>?</p>",
        "id": 321995983,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674030600
    },
    {
        "content": "<p>Otherwise you have a <code>if (p x = true) then ...</code></p>",
        "id": 321996047,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674030612
    },
    {
        "content": "<p>This is one of these places where I'm inclined to say: don't try this refactor <em>while</em> porting. We should either backport this stuff to mathlib3, or do the refactor after porting.</p>",
        "id": 321996188,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674030675
    },
    {
        "content": "<p>At that point it's also a lot easier to make a non-sentimental decision.</p>",
        "id": 321996372,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674030734
    },
    {
        "content": "<p>another thing that was floated earlier was to have a <code>IsTrue b</code> function which would be used instead of the current <code>b = true</code> for <code>Bool -&gt; Prop</code> coercion. That would make the expression a bit less \"active\" since a lot of other stuff keys on equality. For example Chris proposed a simp lemma <code>a = b &lt;-&gt; (a = true &lt;-&gt; b = true)</code> which doesn't really work because it would apply to itself, but it would work if it were spelled using <code>IsTrue</code></p>",
        "id": 321996465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674030769
    },
    {
        "content": "<p>Note that this is also (indirectly) what happened in lean 3: since coercions are not unfolded you would get <code>↑b</code> instead of <code>b = true</code> if you just use a bool for a prop</p>",
        "id": 321996808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674030926
    },
    {
        "content": "<p>If we have <code>p : \\a -&gt; Bool</code>, should we write <code>if p x then ...</code> or <code>bif p x then</code>?</p>",
        "id": 321997439,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674031175
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Why do you think introducing <code>IsTrue</code> is better than introducing <code>List.filterProp</code>?</p>",
        "id": 321997585,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674031219
    },
    {
        "content": "<p>For the first question, I have been recommending to use <code>if</code> over <code>bif</code> in anything used for reasoning</p>",
        "id": 321997725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674031262
    },
    {
        "content": "<p>IsTrue is one thing while List.filterProp is a zillion things</p>",
        "id": 321997920,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674031329
    },
    {
        "content": "<p>It's not clear to me that <code>filterProp</code> has any fundamental advantages over <code>filter (decide ...)</code>, as long as the lemmas are written to advantage this composition</p>",
        "id": 321997947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674031338
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Prop.20-.3E.20Bool.20regression/near/321997920\">said</a>:</p>\n<blockquote>\n<p>IsTrue is one thing while List.filterProp is a zillion things</p>\n</blockquote>\n<p>I don't follow. <code>List.filterProp</code> is exactly what we have in Lean 3. So <code>#align</code> whould make things Just Work.</p>",
        "id": 321998066,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674031393
    },
    {
        "content": "<p>But right now we have to fix a zillion things.</p>",
        "id": 321998089,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674031403
    },
    {
        "content": "<p>yeah but then we have two versions of everything and they have to interact</p>",
        "id": 321998153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674031425
    },
    {
        "content": "<p>But there are hundreds of definitions and lemmas about them that would need to be duplicated (it is not just <code>filter</code>, and not just <code>List</code>)</p>",
        "id": 321998155,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674031425
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Prop.20-.3E.20Bool.20regression/near/321997947\">said</a>:</p>\n<blockquote>\n<p>as long as the lemmas are written to advantage this composition</p>\n</blockquote>\n<p>But I don't know what \"the lemmas\" are. And clearly they currently haven't been written.</p>",
        "id": 321998185,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674031435
    },
    {
        "content": "<p>the lemmas about <code>filter</code> should be usable without any additional overhead if the filter expression happens to be <code>decide</code> of something</p>",
        "id": 321998302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674031479
    },
    {
        "content": "<p>I think this is already the case for <code>filter</code> at least</p>",
        "id": 321998353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674031503
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Prop.20-.3E.20Bool.20regression/near/321996808\">said</a>:</p>\n<blockquote>\n<p>Note that this is also (indirectly) what happened in lean 3: since coercions are not unfolded you would get <code>↑b</code> instead of <code>b = true</code> if you just use a bool for a prop</p>\n</blockquote>\n<p>So you're saying we lost the head of the expression in the port, namely <code>coe</code>? Then I agree <code>IsTrue</code> is a good idea, as it will behave like <code>coe</code> in Lean 3.</p>",
        "id": 321999149,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674031823
    },
    {
        "content": "<p>There's still a bunch of stuff that's unclear. For example, how should this theorem be stated? Should it be a boolean not, or maybe the statement should take <code>p : α → Prop</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">disjoint_filter_filter_neg</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Disjoint</span> <span class=\"o\">(</span><span class=\"n\">s.filter</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t.filter</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 322000201,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1674032166
    },
    {
        "content": "<p>I think using a <code>A -&gt; Prop</code> makes sense in that example</p>",
        "id": 322000455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674032277
    },
    {
        "content": "<p>a separate version using <code>p</code> and <code>(!p .)</code> also makes sense but I think it would not be the \"normal\" version</p>",
        "id": 322000594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674032336
    },
    {
        "content": "<p>Should <code>Finset.filter</code> just use <code>Prop</code>?</p>",
        "id": 322000645,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674032353
    },
    {
        "content": "<p>Maybe all of <code>Finset/*</code> should just not use <code>Bool</code>.</p>",
        "id": 322000663,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674032369
    },
    {
        "content": "<p>If the motivation is whether it is computation-vs-reasoning. I guess <code>Finset</code> is mostly reasoning?</p>",
        "id": 322000829,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674032417
    },
    {
        "content": "<p>Maybe... <code>Finset</code> should just be a <code>Set</code> together with a proof that it is finite...</p>",
        "id": 322000830,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674032417
    },
    {
        "content": "<p>I think that insofar as Finset is not what Reid just said it should act similarly to list/multiset. But it is quite possible that \"finite set\" will be overall easier to use for reasoning than finset, as long as rewriting lemmas exist</p>",
        "id": 322001143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674032538
    },
    {
        "content": "<p>I'm pretty okay with getting away from finset as \"computationally relevant\" since it is horrible for actual computation</p>",
        "id": 322001272,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674032612
    },
    {
        "content": "<p>How about for now we revert the multiset and finset API to talk about decidable predicates, since they are not yet in std and aren't very good for computation anyways, so that the Prop/Bool pain is confined to a relatively small number of files</p>",
        "id": 322024475,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674039888
    },
    {
        "content": "<p>That's fine with me, provided that we allow for the possibility of refactoring later when it is moved to std</p>",
        "id": 322026052,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674040381
    },
    {
        "content": "<p>Done in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1652\">mathlib4#1652</a></p>",
        "id": 322083994,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674056464
    }
]