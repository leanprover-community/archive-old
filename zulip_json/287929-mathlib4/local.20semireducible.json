[
    {
        "content": "<p>how do I adjust the transparency of a definition locally? In <a href=\"https://github.com/leanprover-community/mathlib4/pull/922\">mathlib4#922</a> mathport outputs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"n\">semireducible</span><span class=\"o\">]</span> <span class=\"n\">WithOne</span> <span class=\"n\">WithZero</span>\n</code></pre></div>\n<p>But Lean complains <code>invalid attribute 'semireducible', must be global</code>. However, if I also remove the <code>local</code> (and wrap this in a <code>section</code>) then it complains <code>invalid attribute 'semireducible', declaration is in an imported module</code></p>\n<p>How do I deal with this?</p>",
        "id": 314759304,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1670529321
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>: I know during the meeting we discussed just making <code>WithOne</code> semireducible. However, when I went to do so, I realized that it was <em>already</em> semireducible because it had never been marked irreducible in <a href=\"https://github.com/leanprover-community/mathlib4/pull/841\">mathlib4#841</a>. It turns out that the reason for this is that mathport just entirely ignored the <code>attribute [irreducible] with_one</code> line from mathlib3. This seems like a bug in mathport, right? Or am I missing something?</p>",
        "id": 314773420,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1670534222
    },
    {
        "content": "<p>Like I said in the meeting, <code>attribute [irreducible]</code> is just plain not supported in lean 4</p>",
        "id": 314773704,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670534323
    },
    {
        "content": "<p>I suppose it could print the line commented out and make a porting note of its own</p>",
        "id": 314773764,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670534348
    },
    {
        "content": "<p>Ummm... I'm confused. I thought what wasn't supported was <em>locally</em> changing the transparency of a definition. But I thought that the transparency could still be adjusted (globally and permanently) within the module in which it was declared. Indeed, adding <code>attribute [irreducible] WithOne</code> into <code>Algebra.Group.WithOne.Defs</code> does not yield an error and it seems to have the effect that makes it irreducible.</p>",
        "id": 314776399,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1670535262
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> pinging just to make sure you see this again, because I definitely don't understand.</p>",
        "id": 314781740,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1670537484
    },
    {
        "content": "<p>I could be wrong, but my understanding was that this causes problem for caching various things. Maybe it was fixed by just clearing all the caches, in which case it is possible to do but expensive</p>",
        "id": 314782800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670537921
    },
    {
        "content": "<p>Okay, I see. Thanks.</p>",
        "id": 314783080,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1670538019
    },
    {
        "content": "<p>Surely the autoporter should be flagging that it's ignoring various mathlib3 declarations?</p>",
        "id": 314790683,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670541439
    },
    {
        "content": "<p>I made a mathlib3 PR <a href=\"https://github.com/leanprover-community/mathlib/pull/17874\">#17874</a> removing a small number of <code>local attribute [semireducible]</code>s.</p>",
        "id": 314815732,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670558469
    },
    {
        "content": "<p>I think it would be a good idea if we start getting rid of all of these.</p>",
        "id": 314815752,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670558484
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">grep</span> <span class=\"bp\">-</span><span class=\"n\">r</span> <span class=\"bp\">'</span><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"bp\">\\</span><span class=\"o\">[</span><span class=\"n\">semireducible</span><span class=\"bp\">\\</span><span class=\"o\">]</span><span class=\"bp\">'</span> <span class=\"bp\">*</span> <span class=\"bp\">|</span> <span class=\"n\">grep</span> <span class=\"bp\">-</span><span class=\"n\">v</span> <span class=\"bp\">^</span><span class=\"kd\">meta</span> <span class=\"bp\">|</span> <span class=\"n\">grep</span> <span class=\"bp\">-</span><span class=\"n\">v</span> <span class=\"bp\">^</span><span class=\"n\">tactic</span>\n</code></pre></div>\n<p>says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">order</span><span class=\"bp\">/</span><span class=\"n\">monoid</span><span class=\"bp\">/</span><span class=\"n\">to_mul_bot.lean</span><span class=\"o\">:</span><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">semireducible</span><span class=\"o\">]</span> <span class=\"n\">with_zero</span>\n<span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">order</span><span class=\"bp\">/</span><span class=\"n\">monoid</span><span class=\"bp\">/</span><span class=\"n\">with_zero</span><span class=\"bp\">/</span><span class=\"n\">defs.lean</span><span class=\"o\">:</span><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">semireducible</span><span class=\"o\">]</span> <span class=\"n\">with_zero</span>\n<span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">group</span><span class=\"bp\">/</span><span class=\"n\">with_one</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span><span class=\"o\">:</span><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">semireducible</span><span class=\"o\">]</span> <span class=\"n\">with_one</span> <span class=\"n\">with_zero</span>\n<span class=\"n\">algebraic_geometry</span><span class=\"bp\">/</span><span class=\"n\">Gamma_Spec_adjunction.lean</span><span class=\"o\">:</span><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">semireducible</span><span class=\"o\">]</span> <span class=\"n\">Spec.to_LocallyRingedSpace</span>\n<span class=\"n\">algebraic_geometry</span><span class=\"bp\">/</span><span class=\"n\">Gamma_Spec_adjunction.lean</span><span class=\"o\">:</span><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">semireducible</span><span class=\"o\">]</span> <span class=\"n\">LocallyRingedSpace_adjunction</span> <span class=\"bp\">Î“</span><span class=\"n\">_Spec.adjunction</span>\n<span class=\"n\">algebraic_topology</span><span class=\"bp\">/</span><span class=\"n\">simplex_category.lean</span><span class=\"o\">:</span><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">semireducible</span><span class=\"o\">]</span> <span class=\"n\">simplex_category</span>\n<span class=\"n\">algebraic_topology</span><span class=\"bp\">/</span><span class=\"n\">simplex_category.lean</span><span class=\"o\">:</span><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">semireducible</span><span class=\"o\">]</span> <span class=\"n\">simplex_category.hom</span>\n<span class=\"n\">category_theory</span><span class=\"bp\">/</span><span class=\"n\">triangulated</span><span class=\"bp\">/</span><span class=\"n\">rotate.lean</span><span class=\"o\">:</span><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">semireducible</span><span class=\"o\">]</span> <span class=\"n\">shift_shift_neg</span> <span class=\"n\">shift_neg_shift</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">fin</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span><span class=\"o\">:</span><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">semireducible</span><span class=\"o\">]</span> <span class=\"n\">reflected</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">zmod</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span><span class=\"o\">:</span><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">semireducible</span><span class=\"o\">]</span> <span class=\"n\">int.nonneg</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">zmod</span><span class=\"bp\">/</span><span class=\"n\">quotient.lean</span><span class=\"o\">:</span><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">semireducible</span><span class=\"o\">]</span> <span class=\"n\">mul_opposite</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">rat</span><span class=\"bp\">/</span><span class=\"n\">meta_defs.lean</span><span class=\"o\">:</span><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">semireducible</span><span class=\"o\">]</span> <span class=\"n\">reflected</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">int</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span><span class=\"o\">:</span><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">semireducible</span><span class=\"o\">]</span> <span class=\"n\">reflected</span>\n<span class=\"n\">group_theory</span><span class=\"bp\">/</span><span class=\"n\">monoid_localization.lean</span><span class=\"o\">:</span><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">semireducible</span><span class=\"o\">]</span> <span class=\"n\">localization.mul</span> <span class=\"n\">localization.one</span> <span class=\"n\">localization.npow</span>\n<span class=\"n\">group_theory</span><span class=\"bp\">/</span><span class=\"n\">monoid_localization.lean</span><span class=\"o\">:</span><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">semireducible</span><span class=\"o\">]</span> <span class=\"n\">localization</span>\n<span class=\"n\">group_theory</span><span class=\"bp\">/</span><span class=\"n\">monoid_localization.lean</span><span class=\"o\">:</span><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">semireducible</span><span class=\"o\">]</span> <span class=\"n\">localization.zero</span> <span class=\"n\">localization.mul</span>\n<span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">fractional_ideal.lean</span><span class=\"o\">:</span><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">semireducible</span><span class=\"o\">]</span> <span class=\"n\">mul</span>\n<span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">fractional_ideal.lean</span><span class=\"o\">:</span><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">semireducible</span><span class=\"o\">]</span> <span class=\"n\">span_singleton</span>\n<span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">class_group.lean</span><span class=\"o\">:</span><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">semireducible</span><span class=\"o\">]</span> <span class=\"n\">to_principal_ideal</span>\n<span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">dedekind_domain</span><span class=\"bp\">/</span><span class=\"n\">selmer_group.lean</span><span class=\"o\">:</span><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">semireducible</span><span class=\"o\">]</span> <span class=\"n\">mul_opposite</span>\n<span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">localization</span><span class=\"bp\">/</span><span class=\"n\">fraction_ring.lean</span><span class=\"o\">:</span><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">semireducible</span><span class=\"o\">]</span> <span class=\"n\">is_fraction_ring.inv</span>\n<span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">group</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span><span class=\"o\">:</span><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">semireducible</span><span class=\"o\">]</span> <span class=\"n\">mul_opposite</span>\n</code></pre></div>",
        "id": 314815957,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670558620
    }
]