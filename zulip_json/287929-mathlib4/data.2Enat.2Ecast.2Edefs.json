[
    {
        "content": "<p>I've been avoiding this file even though it's close to the top because I know that coercions have changed in Lean 4. Has anyone else started thinking about this file yet? If so, do we have any sort of plan?</p>",
        "id": 310449419,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668616395
    },
    {
        "content": "<p>The thinking has been going on for a long time. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>  Most of the file is already ported, just in the \"wrong\" places (grep for AddMonoidWithOne).  I think only some of the lemmas are missing.</p>",
        "id": 310460374,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1668619617
    },
    {
        "content": "<p>I kind of figured someone smarter than me had seen it coming. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 310465512,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668621239
    },
    {
        "content": "<p>Do we have any sort of standard procedure for dealing with the coercion transition then? If so, can we write it up somewhere?</p>",
        "id": 310465683,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668621300
    },
    {
        "content": "<p>I think it should be done together with <code>Algebra.GroupWithZero.Defs</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/563\">mathlib4#563</a></p>",
        "id": 310523002,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1668642806
    },
    {
        "content": "<p>I will tackle this and then incorporate it into <a href=\"https://github.com/leanprover-community/mathlib4/pull/563\">mathlib4#563</a></p>",
        "id": 310674833,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668710676
    },
    {
        "content": "<p>Am I correct that <code>has_nat_cast</code> should just go away entirely?</p>",
        "id": 310682316,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668712986
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span></p>",
        "id": 310682533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668713063
    },
    {
        "content": "<p>Well spotted!  I wrote both the Lean 3 and Lean 4 versions of add_monoid_with_one in parallel.  The first version didn't have has_nat_cast, and that's the state that mathlib4 is in.</p>",
        "id": 310685682,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1668714104
    },
    {
        "content": "<p>I think I've added has_nat_cast afterwards to make defining type class instances easier.  (That is, you can set up the <code>ℕ → R</code> map without first proving that <code>R</code> is an additive monoid.)</p>",
        "id": 310685850,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1668714169
    },
    {
        "content": "<p>So what we should do is backport (forward port?) the NatCast type class to mathlib4.</p>",
        "id": 310685909,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1668714189
    },
    {
        "content": "<p>Yes, from experience having <code>has_nat_cast</code> makes defining instances more comfortable.</p>",
        "id": 310685967,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668714208
    },
    {
        "content": "<p>Okay, so I <em>should</em> port <code>has_nat_cast</code> to a <code>NatCast</code>type class. Got it.</p>",
        "id": 310686314,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668714322
    },
    {
        "content": "<p>Should it still go in <code>data.nat.cast.defs</code>? Or should I put it in <code>Mathlib.Algebra.GroupWithZero.Defs</code>?</p>",
        "id": 310686522,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668714401
    },
    {
        "content": "<p>I've also moved around the mathlib3 files long after the mathlib4 one was merged.  One reason was to reduce the imports.  So I think we should also have a <code>Mathlib.Data.Nat.Cast.Defs</code> split in mathlib4.</p>",
        "id": 310687396,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1668714693
    },
    {
        "content": "<p>Currently, in mathlib3, <code>add_monoid_with_one</code> and <code>has_nat_cast</code> are both defined in <code>data.nat.cast</code>. In mathlib4, <code>AddMonoidWithOne</code> is defined in <code>Mathlib.Algebra.GroupWithZero.Defs</code>. Are you wanting me to move that? Sorry, I'm just not understanding the plan.</p>",
        "id": 310693911,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668717006
    },
    {
        "content": "<p>Nevermind, I think I understand now. I just read the details on <a href=\"https://github.com/leanprover-community/mathlib/pull/563\">#563</a>. These things should move in mathlib4 to the places they appear in mathlib3.</p>",
        "id": 310694672,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668717291
    }
]