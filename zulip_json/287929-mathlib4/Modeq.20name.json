[
    {
        "content": "<p>What would you want the name of modeq to be in Lean 4? <code>Modeq</code> or <code>ModEq</code>? I think the latter makes more since</p>\n<p>Furthermore I'm having a little issue with the definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Modeq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"n\">deriving</span> <span class=\"n\">Decidable</span>\n</code></pre></div>\n<p>It cannot derive <code>Decidable</code> do we want to treat this as a bug and fix it upstream in the compiler or shall I write a manual instance?</p>",
        "id": 318669926,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672444892
    },
    {
        "content": "<p>delta deriving is still todo, it needs some upstream changes</p>",
        "id": 318670950,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672445757
    },
    {
        "content": "<p>the workaround is to write the instances manually (with a <code>Porting note</code>), you probably can't just skip them since later things will need those instances</p>",
        "id": 318671033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672445805
    },
    {
        "content": "<p><code>ModEq</code> seems like a fine name to me</p>",
        "id": 318671337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672446081
    },
    {
        "content": "<p>Oh I also have to write a manual <code>Trans</code> instance. Could it be that we want a <code>abbrev ModEq</code> instead of a <code>def ModEq</code>?</p>",
        "id": 318673234,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672447592
    },
    {
        "content": "<p>In mathlib3, for teaching, I actually used <code>attribute [irreducible]</code> on the def for <code>modeq</code>, because the definition is so unintuitive that I wanted to prevent the students from ever accidentally encountering it.</p>",
        "id": 318674177,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672448199
    },
    {
        "content": "<p>The definition is unintuitive? This is the only definition i have ever been taught and can think of to be honest :D How would you go about defining this?</p>",
        "id": 318674350,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672448333
    },
    {
        "content": "<p>So that's a vote in the opposite direction from <code>abbrev</code> -- I don't think we have any policy of taking teaching preferences into account for mathlib, though.</p>",
        "id": 318674358,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672448340
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Modeq.20name/near/318674350\">said</a>:</p>\n<blockquote>\n<p>The definition is unintuitive? This is the only definition i have ever been taught and can think of to be honest :D How would you go about defining this?</p>\n</blockquote>\n<p>I'm thinking of <code>int.modeq</code> rather than <code>nat.modeq</code>, but the definition I <a href=\"https://github.com/hrmacbeth/math2001/blob/b102dd81ec31a77e3f4f5e20b9f2471009506b51/src/03_Parity_and_Divisibility/03_Modular_Arithmetic_Theory.lean#L7\">teach in class</a> is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">int.modeq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 318674509,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672448433
    },
    {
        "content": "<p>It's easier to reason about -- no case splits in proofs.</p>",
        "id": 318674661,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672448548
    },
    {
        "content": "<p>Interesting. As a programmer I think of modeq as \"the remainders are equivalent\" which is exactly what the mathlib definition mirrors and when I explain students for example the RSA algorithm I can explain <code>a \\equiv b \\pmod n</code> as \"This is just notation for putting the modulo on both sides\" but I guess if you are building the mathematics up instead of just using all the nice modulo properties your approach might be easier.</p>",
        "id": 318674846,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672448694
    },
    {
        "content": "<p>Indeed, I think in many mathematical theories there's a difference between what's easy when building the theory and what's easy when using it.</p>",
        "id": 318674909,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672448751
    },
    {
        "content": "<p>Incidentally, there's no analogue of <code>attribute [irreducible]</code> in Lean 4, right?  Is there any other way to hide a definition post-facto?  (Maybe someone can point me to a previous discussion of this design decision?)</p>",
        "id": 318675064,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672448880
    },
    {
        "content": "<p><code>attribute [irreducible] ModEq</code> would work out without any issues.</p>",
        "id": 318675205,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672448979
    },
    {
        "content": "<p>Oh, great!  I wonder what I was thinking of?  I thought I had heard that it was no longer possible to mark definitions as irreducible after the fact.</p>",
        "id": 318675281,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672449021
    },
    {
        "content": "<p>From what I have seen in this stream it seems like the <code>attribute</code> feature in Lean 4 is either equivalent or actually a teeny bit better than in Lean 3 in what it allows you to do. There are a few syntax changes but in general everything I've seen from Lean 3 with <code>attribute</code> so far should work in Lean 4 as well.</p>",
        "id": 318675374,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672449107
    },
    {
        "content": "<p>Hmm ... do you know what Mario was referring to here?</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/local.20semireducible/near/314773704\">said</a>:</p>\n<blockquote>\n<p>Like I said in the meeting, <code>attribute [irreducible]</code> is just plain not supported in lean 4</p>\n</blockquote>",
        "id": 318675445,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672449146
    },
    {
        "content": "<p>Hm no, when i applied attribute [irreducible] just now I actually saw some proofs failing such as the fact that the <code>Trans</code> instance of <code>Eq</code> can be trivially used to prove one for <code>ModEq</code> and so on. So it does work and have an effect as well.</p>",
        "id": 318675659,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672449347
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  explained in the meeting that allowing declarations to become irreducible after the fact meant that some <code>dsimp</code> lemmas about the declarations would...now no longer typecheck...or something? So it was a bad idea?</p>",
        "id": 318676731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672450374
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Modeq.20name/near/318669926\">said</a>:</p>\n<blockquote>\n<p>What would you want the name of modeq to be in Lean 4? <code>Modeq</code> or <code>ModEq</code>? I think the latter makes more since</p>\n<p>Furthermore I'm having a little issue with the definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Modeq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"n\">deriving</span> <span class=\"n\">Decidable</span>\n</code></pre></div>\n<p>It cannot derive <code>Decidable</code> do we want to treat this as a bug and fix it upstream in the compiler or shall I write a manual instance?</p>\n</blockquote>\n<p>This definition is really crazy. Why on earth would anyone want to make this so complicated when the mathematical definition is so nice?</p>",
        "id": 318676838,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1672450465
    },
    {
        "content": "<p>Re <code>modeq</code> -- why not just prove <code>int.modeq_def (n a b : ℤ) : int.modeq n a b : ℤ &lt;-&gt; n ∣ (a - b) := ...</code> and tell them to rewrite the definition?</p>",
        "id": 318676844,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672450475
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Modeq.20name/near/318676838\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Modeq.20name/near/318669926\">said</a>:</p>\n<blockquote>\n<p>What would you want the name of modeq to be in Lean 4? <code>Modeq</code> or <code>ModEq</code>? I think the latter makes more since</p>\n<p>Furthermore I'm having a little issue with the definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Modeq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"n\">deriving</span> <span class=\"n\">Decidable</span>\n</code></pre></div>\n<p>It cannot derive <code>Decidable</code> do we want to treat this as a bug and fix it upstream in the compiler or shall I write a manual instance?</p>\n</blockquote>\n<p>This definition is really crazy. Why on earth would anyone want to make this so complicated when the mathematical definition is so nice?</p>\n</blockquote>\n<p>As explained above I would say the exact same to your definition <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 318676880,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672450520
    },
    {
        "content": "<p>Seriously, we can't take the remainder thing as the definition. The fact that this definition works for natural number is a completely meaningless accident.</p>",
        "id": 318676894,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1672450543
    },
    {
        "content": "<p>Also another question, is there a particular reason that <code>Nat.mod_zero</code> is not <code>@[simp]</code> anymore?</p>",
        "id": 318676896,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672450545
    },
    {
        "content": "<p>Oh I'm seeing it's a built-in theorem so I probably better ask the person that wrote it.</p>",
        "id": 318676960,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672450591
    },
    {
        "content": "<p>Henrik, who did that to you? We need a name. Who inflicted that definition on you?</p>",
        "id": 318676970,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1672450604
    },
    {
        "content": "<p>The reason the computer scientists like the definition is that they constantly think of things as subsets, they have a fear of quotients because of implementation issues. They are just choosing a fixed \"representative\" element in each equivalence class and defining a pathological function taking each element to the representative of the equivalence class. Mathematicians find these functions weird because they are not at all canonical, they don't have natural properties like f(a+b)=f(a)+f(b) and we'd rather use quotients than these ugly representatives.</p>",
        "id": 318676995,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672450632
    },
    {
        "content": "<p>I understand that fear, but it isn't relevant here. When defining the relation you don't need anything like a quotient.</p>",
        "id": 318677019,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1672450676
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Modeq.20name/near/318676970\">said</a>:</p>\n<blockquote>\n<p>Henrik, who did that to you? We need a name. Who inflicted that definition on you?</p>\n</blockquote>\n<p>That would be Professor Eich-Soellner. This nice looking lady: <a href=\"/user_uploads/3121/7YIX7ScBAE91_9Yl7KR7aYGw/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/7YIX7ScBAE91_9Yl7KR7aYGw/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/7YIX7ScBAE91_9Yl7KR7aYGw/image.png\"></a></div>",
        "id": 318677040,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672450684
    },
    {
        "content": "<p>A relation on a type can be defined by a function from the type (two things are related if their images are equal), and they choose to define the relation this way via a \"non-canonical\" map from nat to nat sending each element in the equivalence class to the representative. This makes the non-canonical map kind of embedded in the definition, making it much more difficult to work with.</p>",
        "id": 318677216,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672450826
    },
    {
        "content": "<p>Isn't <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span> (really) a quotient of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi><mo>×</mo><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N} \\times \\mathbb{N}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7722em;vertical-align:-0.0833em;\"></span><span class=\"mord mathbb\">N</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">N</span></span></span></span>?</p>",
        "id": 318677223,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1672450831
    },
    {
        "content": "<p>I do not dare asking whether she defines divisibility using the remainder operation.</p>",
        "id": 318677227,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1672450846
    },
    {
        "content": "<p>My lecture notes say no!<br>\n<a href=\"/user_uploads/3121/ku-hAv8Af3nUG_0qvC0XYEqO/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ku-hAv8Af3nUG_0qvC0XYEqO/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/ku-hAv8Af3nUG_0qvC0XYEqO/image.png\"></a></div>",
        "id": 318677350,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672450968
    },
    {
        "content": "<p>I've worked through the definition of <code>Int</code> as a quotient of <code>Nat \\times Nat</code> in Lean 3 and there is a terrifying 8-variable Grobner basis roblem in ring theory you need to do when proving something about multiplication, and <code>nlinarith</code> does it. But if you look at the term it generates, it uses mathlib's inbuilt <code>Int</code> which is presumably still the non-canonical definition. If the CS guys are happy to write the API and battle through the non-canonical functions like <code>of_neg_of_nat</code> then surely they can have any implementation they want?</p>",
        "id": 318677381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672451035
    },
    {
        "content": "<p>That's a relief.</p>",
        "id": 318677452,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1672451069
    },
    {
        "content": "<p>At least you'll be able to bring that bit to other rings.</p>",
        "id": 318677467,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1672451105
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Modeq.20name/near/318677381\">said</a>:</p>\n<blockquote>\n<p>I've worked through the definition of <code>Int</code> as a quotient of <code>Nat \\times Nat</code> in Lean 3 and there is a terrifying 8-variable Grobner basis roblem in ring theory you need to do when proving something about multiplication, and <code>nlinarith</code> does it. But if you look at the term it generates, it uses mathlib's inbuilt <code>Int</code> which is presumably still the non-canonical definition. If the CS guys are happy to write the API and battle through the non-canonical functions like <code>of_neg_of_nat</code> then surely they can have any implementation they want?</p>\n</blockquote>\n<p>As a cs guy that does not know what a Grobner basis is I would like to avoid that if possible maybe :P</p>",
        "id": 318677498,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672451131
    },
    {
        "content": "<p>It was a problem of the form \"a,b,c,d,e,f,g,h are nats, and a+b=c+d and e+f=g+h and <code>a*b+c*d+</code>blah blah blah = <code>c * f + d * e +</code> ..., and other polynomial identities are also true, and the goal is some other random equality of polynomials\"</p>",
        "id": 318677579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672451209
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> One of the issues with using a remainder-after-division to define modulo-equality is that you need to choose which remainder to use for normalization. For nat/int this is relatively clear what to use, but modulo congruence still is meaningful for other rings where you don't have a good way to normalize your div/mod.</p>\n<p>Even in CS there are confusions about div/mod, since there are two main conventions: is division from rounding toward zero or toward negative infinity? The Lean <code>%</code> operator uses the second convention, but C uses the first. Haskell has functions for both.</p>",
        "id": 318677825,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1672451445
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Modeq.20name/near/318677825\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> One of the issues with using a remainder-after-division to define modulo-equality is that you need to choose which remainder to use for normalization. For nat/int this is relatively clear what to use, but modulo congruence still is meaningful for other rings where you don't have a good way to normalize your div/mod.</p>\n<p>Even in CS there are confusions about div/mod, since there are two main conventions: is division from rounding toward zero or toward negative infinity? The Lean <code>%</code> operator uses the second convention, but C uses the first. Haskell has functions for both.</p>\n</blockquote>\n<p>My math classes trivially solve this issue by not telling us that a ring is a thing even :(</p>",
        "id": 318677908,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672451515
    },
    {
        "content": "<p>It would be great if eventually the modeq for <code>Int</code> was just <code>n ∣ (a - b)</code> (that's practically better two -- just one division rather than two to implement!)</p>\n<p>When I've thought about this before (and I think this is what Heather is referring to), for <code>Nat</code> you can't get much better than <code>a % n = b % n</code> since we have truncating subtraction. You could do <code>n ∣ (max a b - min a b)</code> at least...</p>",
        "id": 318677980,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1672451553
    },
    {
        "content": "<p>natural and integer division are also pathological functions (they don't satisfy nice theorems because of rounding errors) and the identity is not a pathological function, and neither is multplication, therefore the remainder function must also be pathological because a=(a/b)*b+a%b</p>",
        "id": 318677987,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672451572
    },
    {
        "content": "<p>They're implementation issues and shouldn't be exposed ;-)</p>",
        "id": 318678021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672451612
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> That doesn't solve the issue since you still have to choose your division rounding convention for normalization <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>\n<p>At least they all satisfy <code>a = div a b * b + mod a b</code> for whatever choices of <code>div</code> and <code>mod</code>. (Given the <code>div</code>, you define <code>mod</code> this way)</p>",
        "id": 318678026,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1672451619
    },
    {
        "content": "<p>I can't remember ever choosing a rounding convention even, we kinda just...went with it?</p>",
        "id": 318678098,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672451667
    },
    {
        "content": "<p>The definition should be <code>(n : \\Z) | a - b</code> ;-)</p>",
        "id": 318678118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672451697
    },
    {
        "content": "<p>When you assert that <code>0 &lt;= mod a b &lt; abs b</code> you've said you're rounding to negative infinity since that means <code>a &gt;= div a b * b</code></p>",
        "id": 318678139,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1672451721
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Modeq.20name/near/318678098\">said</a>:</p>\n<blockquote>\n<p>I can't remember ever choosing a rounding convention even, we kinda just...went with it?</p>\n</blockquote>\n<p>Henrik do you know about the issue where a random change in convention for integer division from Lean 3 to Lean 4 caused problems for mathlib4?</p>",
        "id": 318678201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672451773
    },
    {
        "content": "<p>Yes I did see the chats about it.</p>",
        "id": 318678269,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672451858
    },
    {
        "content": "<p>So, do you suggest that we define <code>int.modeq</code> first, then define <code>nat.modeq</code> using <code>int.modeq</code>?</p>",
        "id": 318678273,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1672451863
    },
    {
        "content": "<p>I'm not denying all of this is an issue or saying that you are wrong with your ideas of how to do things don't get me wrong^^ I'm just explaining the way I was taught. I'm very much aware that most of the mathematics I'm being taught in the style they are by my university is far far away from anything close to the rigor you would expect.</p>",
        "id": 318678345,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672451919
    },
    {
        "content": "<p>Which is part of the reason I'm doing mathlib porting work in the first place to be honest.</p>",
        "id": 318678380,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672451960
    },
    {
        "content": "<p>To be honest I have only recently started paying attention to the way logic and mathematics are taught to computer scientists, and I was really surprised by some of the things I saw.</p>",
        "id": 318678622,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672452144
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> I first learned about the modulo operator in QBasic and then used that intuition when learning about modulo congruence, which gave me the same sort of operational understanding, where <code>int.modeq n a b</code> is something you evaluate by modulo reducing <code>a</code> and <code>b</code> then checking equality. It took awhile before I really got that in math it's fine having relations that don't need to have computational content, which moving toward <code>n ∣ (a - b)</code> (or \"there exists a <code>k</code> such that <code>a = b + k * n</code>\") helped me with.</p>",
        "id": 318679116,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1672452617
    },
    {
        "content": "<p>The latter point of view also makes it more obvious that the \"point\" of congruence is that it's that you're wanting to work with numbers ignoring differences by multiples of the modulus, which the operational point of view obscures.</p>",
        "id": 318679240,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1672452745
    },
    {
        "content": "<p>Oh I'm perfectly content with these types of definitions. I can actually remember kind of intuitively using the 2nd one a couple of times while writing proofs.</p>",
        "id": 318679257,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672452783
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Your idea about defining <code>nat.modeq</code> in terms of <code>int.modeq</code> made me wonder if we need <code>nat.modeq</code> at all. I can't immediately think of a reason for it that can't be served by just writing <code>Nat</code>-specialized lemmas for <code>int.modeq</code>.</p>",
        "id": 318679277,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1672452841
    },
    {
        "content": "<p>Ha ha yeah that would be an interesting refactor! That's kind of weird that the way which seems to me to be more natural involves doing int before nat. It wouldn't surprise me if it ended up cleaner, a non-pathological subtraction makes proofs much easier.</p>",
        "id": 318679570,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672453104
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1274\">https://github.com/leanprover-community/mathlib4/pull/1274</a></p>",
        "id": 318680285,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672453896
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Modeq.20name/near/318679570\">said</a>:</p>\n<blockquote>\n<p>Ha ha yeah that would be an interesting refactor! That's kind of weird that the way which seems to me to be more natural involves doing int before nat. It wouldn't surprise me if it ended up cleaner, a non-pathological subtraction makes proofs much easier.</p>\n</blockquote>\n<p>Especially if we reuse general theory about, e.g., <a href=\"https://leanprover-community.github.io/mathlib_docs/find/con\">docs#con</a>.</p>",
        "id": 318692732,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1672466788
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Modeq.20name/near/318678201\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Modeq.20name/near/318678098\">said</a>:</p>\n<blockquote>\n<p>I can't remember ever choosing a rounding convention even, we kinda just...went with it?</p>\n</blockquote>\n<p>Henrik do you know about the issue where a random change in convention for integer division from Lean 3 to Lean 4 caused problems for mathlib4?</p>\n</blockquote>\n<p>In fact, if the <code>%</code> definition is used for <code>int.modeq</code> with the Lean 4 core definition of <code>%</code>, then the definition is simply wrong (positive and negative numbers won't be <code>modeq</code> modulo anything).</p>",
        "id": 318694276,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672468518
    },
    {
        "content": "<p>Oh unless they happen to be divisible by the modulus.</p>",
        "id": 318694345,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672468573
    },
    {
        "content": "<p>So, <code>a % n</code> is incompatible between Lean 3 and Lean 4?</p>",
        "id": 318694628,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1672468913
    },
    {
        "content": "<p>(for integer <code>a n</code>)</p>",
        "id": 318694677,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1672468926
    },
    {
        "content": "<p>Yes but mathlib4 fixes this by overriding the appropriate instance (and the hope is to merge the change into Lean 4 eventually).</p>",
        "id": 318694701,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672468959
    },
    {
        "content": "<p>I would be happy with a refactor wiping <code>nat.modeq</code> out of existence in favor of <code>int.modeq</code>, but isn't there a more general <code>ideal.modeq</code> to be had?</p>",
        "id": 318699232,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672473664
    },
    {
        "content": "<p>Or are we deciding to draw the line between theory building and simplicity of definition there?</p>",
        "id": 318699328,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672473747
    },
    {
        "content": "<p>We don't have <code>subgroup.modeq</code>...</p>",
        "id": 318700172,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1672474475
    },
    {
        "content": "<p>For the record, defining <code>int.modeq</code> in terms of subgroups is far worse for teaching than defining it in terms of <code>%</code> ...</p>",
        "id": 318704247,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672477387
    },
    {
        "content": "<p>Sub<em>groups</em>? you probably won't be so lucky...</p>",
        "id": 318704296,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672477431
    },
    {
        "content": "<p>I want to define it in terms of divisibility and I've taught it like that and it worked out great.</p>",
        "id": 318712752,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672482675
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Modeq.20name/near/318694701\">said</a>:</p>\n<blockquote>\n<p>(and the hope is to merge the change into Lean 4 eventually).</p>\n</blockquote>\n<p>I hope so! I didn't realize Lean 4 switched from the \"Python convention\" to the \"C convention.\" The Python convention is (in just my opinion) the correct one, in that it always gives a modulus in the range <code>0, 1, ..., n-1</code> when <code>n</code> is positive, so you can for example write <code>a[i % len(a)]</code> no matter what the integer <code>i</code> is.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span>\n<span class=\"c1\">-- -2</span>\n</code></pre></div>\n<p>Of course this also means that division is rounding toward zero rather than negative infinity:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span>\n<span class=\"c1\">--- -1</span>\n</code></pre></div>\n<p>I believe we should have both div/mod conventions in some capacity. It's just a question of what convention the operators <code>/</code> and <code>%</code> use.</p>",
        "id": 318749194,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1672498493
    },
    {
        "content": "<p>As a case study, Haskell chose to have two pairs of functions for integers: <code>div</code>/<code>mod</code> for the \"Python convention\", and <code>quot</code>/<code>rem</code> for the \"C convention.\" It doesn't supply operators for these, but Haskell also has a feature for using two-argument functions as binary operators, for example <code>5 `div` 3</code> for <code>div 5 3</code>.</p>",
        "id": 318750160,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1672499002
    },
    {
        "content": "<p><a href=\"#narrow/stream/341532-lean4-dev/topic/.5BRFC.5D.20Int.2Ediv.20convention/near/296956937\">https://leanprover.zulipchat.com/#narrow/stream/341532-lean4-dev/topic/.5BRFC.5D.20Int.2Ediv.20convention/near/296956937</a></p>",
        "id": 318752276,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672500114
    }
]