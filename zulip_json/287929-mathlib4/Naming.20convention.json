[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> has marked this topic as unresolved.</p>",
        "id": 322233057,
        "sender_full_name": "Notification Bot",
        "timestamp": 1674120817
    },
    {
        "content": "<p>Is this the right name?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">truncEquivFin_of_cardEq</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Trunc</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">truncEquivFin</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e.trans</span> <span class=\"o\">(</span><span class=\"n\">Fin.cast</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toEquiv</span>\n</code></pre></div>",
        "id": 322233063,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674120819
    },
    {
        "content": "<p>Or should it be <code>truncEquivFinOfCardEq</code>?</p>",
        "id": 322233124,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674120833
    },
    {
        "content": "<p>Also, shouldn't it be <code>FinType</code>/<code>FinSet</code>, with the second word capitalized as well?</p>",
        "id": 322287238,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1674136998
    },
    {
        "content": "<p><span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 322287509,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1674137076
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"481133\">@Alex Keizer</span>, the rule we're using is that if we wrote it as <code>oneword</code> it remains as <code>Oneword</code>, but <code>two_words</code> goes to <code>TwoWords</code></p>",
        "id": 322287725,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674137129
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I think we decided to prefer the <code>Of</code> name in a previous meeting; maybe see if you can find any matches for <code>Of</code> in existing lemma names?</p>",
        "id": 322287898,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674137167
    },
    {
        "content": "<p>So, <code>Zmod</code> or <code>ZMod</code>?</p>",
        "id": 322474290,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1674209932
    },
    {
        "content": "<p>We have <code>Int.ModEq</code> so maybe <code>ZMod</code> for parallelism?</p>",
        "id": 322551595,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674231138
    },
    {
        "content": "<p>Any other thoughts on that? <a href=\"https://github.com/leanprover-community/mathlib4/pull/1713\">mathlib4#1713</a> is otherwise ready to go, but currently uses <code>Zmod</code> not <code>ZMod</code></p>",
        "id": 322998111,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674473924
    },
    {
        "content": "<p>Does anyone know how I should handle a case where a class has a field <code>foo</code> but there's also a theorem <code>foo</code>?</p>",
        "id": 323300246,
        "sender_full_name": "zbatt",
        "timestamp": 1674578545
    },
    {
        "content": "<p>As in this case <a href=\"https://github.com/leanprover-community/mathlib4/pull/1817/files#diff-0fcce737a4ee880e8708637b10c88032ae1433cd34ad8623d1034a733e139e39R138\">here</a></p>",
        "id": 323300513,
        "sender_full_name": "zbatt",
        "timestamp": 1674578628
    },
    {
        "content": "<p>Here they are in different namespaces; is the issue just that you need to use <code>nonrec</code> or <code>_root_</code>, so that Lean doesn't think it's recursive?</p>",
        "id": 323301027,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674578750
    },
    {
        "content": "<p>to be honest I'm not entirely sure how nonrec or <code>_root_</code> work I'll look into it now</p>",
        "id": 323301262,
        "sender_full_name": "zbatt",
        "timestamp": 1674578791
    },
    {
        "content": "<p>Actually since you already wrote <code>Shelf.self_distrib</code> as the proof, it should Just Work with <code>theorem self_distrib [...]</code></p>",
        "id": 323302037,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674578990
    },
    {
        "content": "<p>since we're now in <code>namespace Rack</code></p>",
        "id": 323302075,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674579000
    },
    {
        "content": "<p>sorry what goes in the <code>[...]</code>? This currently doesn't work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">self_distrib</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">◃</span> <span class=\"n\">y</span> <span class=\"bp\">◃</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">◃</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">◃</span> <span class=\"n\">x</span> <span class=\"bp\">◃</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Shelf.self_distrib</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">rack.self_distrib</span> <span class=\"n\">Rack.self_distrib</span>\n</code></pre></div>",
        "id": 323302422,
        "sender_full_name": "zbatt",
        "timestamp": 1674579076
    },
    {
        "content": "<p>What is the error?</p>",
        "id": 323302574,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674579109
    },
    {
        "content": "<p><code>invalid declaration name 'Rack.self_distrib', structure 'Rack' has field 'self_distrib'</code></p>",
        "id": 323302619,
        "sender_full_name": "zbatt",
        "timestamp": 1674579119
    },
    {
        "content": "<p>Oh sorry, that wasn't obvious and I thought the issue was something else.</p>",
        "id": 323302790,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674579148
    },
    {
        "content": "<p>sorry, my bad</p>",
        "id": 323302831,
        "sender_full_name": "zbatt",
        "timestamp": 1674579156
    },
    {
        "content": "<p>My impression now is that this theorem is not needed in Lean 4 at all, because of the difference between Lean 3 (new-style!) structures and Lean 4 structures</p>",
        "id": 323303405,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674579304
    },
    {
        "content": "<p>I would check that the output of <code>#check Rack.self_distrib</code> matches <a href=\"https://leanprover-community.github.io/mathlib_docs/find/rack.self_distrib\">docs#rack.self_distrib</a>, and then #align the latter to the former, and add a porting note</p>",
        "id": 323303791,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674579394
    },
    {
        "content": "<p>it can't find it</p>",
        "id": 323304096,
        "sender_full_name": "zbatt",
        "timestamp": 1674579467
    },
    {
        "content": "<p>wait this is strange</p>",
        "id": 323304206,
        "sender_full_name": "zbatt",
        "timestamp": 1674579489
    },
    {
        "content": "<p>it was originally complaining that <code>'Rack' has field 'self_distrib'</code>, but if I get rid of the theorem and do <code>#check Rack.self_distrib</code> it tells me its unknown</p>",
        "id": 323304423,
        "sender_full_name": "zbatt",
        "timestamp": 1674579549
    },
    {
        "content": "<p>I'm trying to remember what the point of <code>rack.self_distrib</code> was. I <em>think</em> it's just meant to be a synonym for <code>shelf.self_distrib</code> but in the <code>rack</code> namespace, since structure extension can't help you with this.</p>",
        "id": 323304493,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674579565
    },
    {
        "content": "<p>You might be able to replace it with <code>export Shelf (self_distrib)</code> (if I got that syntax right)</p>",
        "id": 323304653,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674579602
    },
    {
        "content": "<p>that seems to have worked, thanks!</p>",
        "id": 323304817,
        "sender_full_name": "zbatt",
        "timestamp": 1674579635
    },
    {
        "content": "<p>though you run into the same issue with <code>act</code> and you don't seem able to export that in the same way</p>",
        "id": 323305693,
        "sender_full_name": "zbatt",
        "timestamp": 1674579873
    },
    {
        "content": "<p>It's fine renaming <code>rack.act</code> to <code>Rack.act'</code>. It's not used much, and its main purpose is to be an equivalence version of <code>shelf.act</code> if you need it.</p>",
        "id": 323306395,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674580079
    },
    {
        "content": "<p>gotcha</p>",
        "id": 323306476,
        "sender_full_name": "zbatt",
        "timestamp": 1674580093
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Naming.20convention/near/323304653\">said</a>:</p>\n<blockquote>\n<p>You might be able to replace it with <code>export Shelf (self_distrib)</code> (if I got that syntax right)</p>\n</blockquote>\n<p>Hmm, but we don't want it to be accessible from the root namespace, do we?</p>",
        "id": 323309068,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674580804
    },
    {
        "content": "<p>It won't be. In context, that's done within the <code>Rack</code> namespace.</p>",
        "id": 323309179,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674580835
    },
    {
        "content": "<p>Oh, does <code>export</code> know about the namespace it's in? I alwasy it was just stripping away namespaces.</p>",
        "id": 323309962,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1674581058
    },
    {
        "content": "<p>The <code>export</code> and <code>open</code> commands create aliases (which are not the same sort of thing as what you get from the alias command, confusingly)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">A</span>\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span>\n<span class=\"kd\">end</span> <span class=\"n\">A</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">B</span>\n<span class=\"kn\">export</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span> <span class=\"n\">B</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">x</span> <span class=\"c1\">-- unknown identifier</span>\n<span class=\"k\">#check</span> <span class=\"n\">B.x</span> <span class=\"c1\">-- A.x : Nat</span>\n</code></pre></div>",
        "id": 323311235,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674581413
    },
    {
        "content": "<p>The difference between <code>export</code> and <code>open</code> is whether these aliases work outside the current namespace.</p>",
        "id": 323311434,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674581488
    }
]