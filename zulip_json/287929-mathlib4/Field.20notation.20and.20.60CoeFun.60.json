[
    {
        "content": "<p>I came across this while looking into porting <code>Algebra.Group.TypeTags</code>. In Lean 3 we can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">logic.equiv.defs</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo.to_foo</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">≃</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f.to_foo</span> <span class=\"bp\">=</span> <span class=\"n\">f.to_foo</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but in Lean 4 we get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Equiv.Defs</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">def</span> <span class=\"n\">Foo.to_Foo</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">≃</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">λ</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">λ</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"bp\">λ</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> invalid field notation, function 'Foo.to_Foo' does not have argument with type (Foo ...) that can be used, it must be explicit or implicit with an unique name -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f.to_Foo</span> <span class=\"bp\">=</span> <span class=\"n\">f.to_Foo</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I am assuming this is because the elaborator for field notation has changed and no longer is happy to apply the <code>CoeFun</code>. Three possible options would be to</p>\n<ul>\n<li>a) adjust the elaborator (difficult); or</li>\n<li>b) port it as <code>Foo.to_Foo f</code> (easy, just churn); or</li>\n<li>c) port it as</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Foo.equiv_Foo</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">≃</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">λ</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">λ</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"bp\">λ</span><span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">Foo.to_Foo</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">equiv_Foo</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>(different kind of churn)</p>\n<p>What does everyone think?</p>",
        "id": 313388040,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1669932613
    },
    {
        "content": "<p>Having dot notation work on bundled morphisms like this was often convenient in Lean 3; it would be a shame to lose it</p>",
        "id": 313393152,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669934582
    },
    {
        "content": "<p>c) sounds like either something that should be done as a post-port refactor after first porting b), or as a pre-port refactor in mathlib3 if we're really sure a) is ruled out</p>",
        "id": 313393350,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669934663
    },
    {
        "content": "<p>The big problem with c) is that now you have two ways to spell the same thing and you either need lemmas about both, or need to declare one of them canonical and essentially never use the other.</p>",
        "id": 313393496,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669934724
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span>, could you give a more realistic example? I would argue that we never should have been writing <code>f.to_foo</code>! It took me a long moment to work out that this was meant to mean <code>(foo.to_foo : foo \\to foo) f</code> in the first place.</p>",
        "id": 313423050,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669953786
    },
    {
        "content": "<p>i.e. looking at an example like this, I would describe it as \"gross misuse of dot notation\" rather than \"convenient\". :-)</p>",
        "id": 313423076,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669953829
    },
    {
        "content": "<p>See, e.g., <a href=\"https://leanprover-community.github.io/mathlib_docs/find/enat.to_nat\">docs#enat.to_nat</a></p>",
        "id": 313426263,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669956351
    },
    {
        "content": "<p>It is natural to write <code>(n : ℕ∞).to_nat</code>; it is bundled as a <code>monoid_with_zero_hom</code>.</p>",
        "id": 313426326,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669956392
    },
    {
        "content": "<p>Note that it worked in Lean 3 only if the function had exactly 1 argument, so, e.g., we were unable to bundle <code>polynomial.map</code> without loosing dot notation.</p>",
        "id": 313426352,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669956429
    },
    {
        "content": "<p>If someone is interested in writing this up as an issue (i.e. with a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> that doesn't need mathlib4, and that explains a valuable use case), we could see what the Lean 4 devs think.</p>",
        "id": 313426878,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669956872
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Field.20notation.20and.20.60CoeFun.60/near/313426878\">said</a>:</p>\n<blockquote>\n<p>If someone is interested in writing this up as an issue (i.e. with a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> that doesn't need mathlib4, and that explains a valuable use case), we could see what the Lean 4 devs think.</p>\n</blockquote>\n<p>I will do it.</p>",
        "id": 313427705,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1669957597
    },
    {
        "content": "<p>It's quite possible that the answer will be \"you should unfold old coercions!\"</p>",
        "id": 313430920,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669960096
    },
    {
        "content": "<p>But this way we'll loose generic <code>map_mul</code> etc lemmas.</p>",
        "id": 313436781,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669964181
    },
    {
        "content": "<p>(unless someone rewrites <code>simp</code> so that it unifies <code>@[coe]</code> functions with <code>coe</code> in simp lemmas)</p>",
        "id": 313436865,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669964255
    },
    {
        "content": "<p>Just to point toward was was going on in the Lean 3 side, this is what the last paragraph for this Lean 3 commit message was about: <a href=\"https://github.com/leanprover-community/lean/commit/f2b2beefe2e9ab200d23e1c99dc20879eb32e9fa\">https://github.com/leanprover-community/lean/commit/f2b2beefe2e9ab200d23e1c99dc20879eb32e9fa</a></p>\n<p>Reproduced here:</p>\n<blockquote>\n<p>To preserve reverse compatibility, we (temporarily?) add a feature that if the elaborator fails to find an explicit argument corresponding to the structure, it will insert the structure as the first explicit argument. This matches the previous behavior for non-application dot notation (<code>x.f</code>). The reason for including this feature is that mathlib has been misusing this type of dot notation for terms with <code>has_coe_to_fun</code> instances. It is not currently compatible with Lean 4.</p>\n</blockquote>",
        "id": 313464471,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669975689
    },
    {
        "content": "<p>What was going on in Lean 3 is that there were two ways that dot notation was resolved, depending on whether it's a term of the form <code>x.f a b c</code> (with arguments) or <code>x.f</code> (no arguments). In the second case, if <code>x : Foo</code>, it would always turn it into <code>Foo.f x</code> no matter what. If <code>Foo.f</code> was an <code>equiv</code>, then since this isn't a function the elaborator would insert a <code>has_coe_to_fun</code> coercion for you.</p>\n<p>When there were arguments, then it would use a different resolution scheme and would always fail for this sort of <code>equiv</code> example.</p>",
        "id": 313464681,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669975794
    },
    {
        "content": "<p>(That commit fixed the fact that there were two separate ways of resolving dot notation, but the cost was explicitly programming in the old behavior to support this kind of <code>equiv</code> example.)</p>",
        "id": 313465497,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669976045
    },
    {
        "content": "<p>One way Lean 4 could be modified would be to have the elaborator try a pass at using a <code>CoeFun</code> instance if the normal dot notation resolution fails. Given my understanding of this part of the Lean 4 elaborator, this might not be very straightforward (at least it seems like it would involve reorganizing how it works, more than just a patch).</p>",
        "id": 313466278,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669976312
    },
    {
        "content": "<p>We could add this as a rule to lean 4: If we can't find an argument of type <code>Foo</code> in a <code>Foo.f</code> dot-notation application, but the target type has a <code>CoeFun</code> instance, then apply it and look in the new arguments, and so on recursively. However, that algorithm loops if you have <code>CoeFun A (B -&gt; A)</code> and you are looking for a <code>Foo</code> in <code>Foo.f : A</code></p>",
        "id": 313466380,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669976349
    },
    {
        "content": "<p>will we ever have instances of that form?</p>",
        "id": 313466658,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1669976445
    },
    {
        "content": "<p>Probably not, but I wrote one <a href=\"#narrow/stream/270676-lean4/topic/Showing.20functions.20in.20an.20unsafe.20way/near/313459521\">just a few minutes ago</a></p>",
        "id": 313466761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669976489
    },
    {
        "content": "<p>Lambda calculus types like to have a <code>CoeFun</code> instance for <code>.app</code></p>",
        "id": 313466832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669976514
    },
    {
        "content": "<p>In fact even <code>Expr</code> has one of these (in lean 3, not sure about lean 4)</p>",
        "id": 313466905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669976529
    },
    {
        "content": "<p>We could detect that the instance has this form explicitly as an optimization though</p>",
        "id": 313467023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669976574
    },
    {
        "content": "<p>or do cycle detection to avoid loops</p>",
        "id": 313467060,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669976588
    },
    {
        "content": "<p>or use a complexity measure on the syntactic term being coerced as as upper bound on the number of iterations <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> (observation: in realistic use cases, this feature is for arrow-like types, so the target of the dot notation ought to correspond to one of the subterms that is already present)</p>",
        "id": 313467399,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669976707
    },
    {
        "content": "<p>until I make a <code>CoeFun A (B -&gt; T A)</code> and <code>CoeFun (T (T (T (T A)))) (Foo -&gt; Unit)</code> because I really wanted to have four arguments and then a <code>Foo</code> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 313468642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669977043
    },
    {
        "content": "<p>Filed as <a href=\"https://github.com/leanprover/lean4/pull/1910\">lean4#1910</a>.</p>",
        "id": 313583136,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1670012899
    }
]