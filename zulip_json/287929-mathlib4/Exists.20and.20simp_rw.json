[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/892/files#r1045159380\">this part</a> of <code>Data.Set.Basic</code>, <code>simp_rw</code> seems to have lost functionality from mathlib3. </p>\n<p><code>simp_rw [th]</code> in mathlib3 can rewrite <code>∃ h : p, ...</code>, where p can be proven using theorem <code>th</code>, into <code>∃ h : true, ...</code>, but is unable to do so in mathlib4.</p>\n<p>On a separate note, <code>Exists</code> is not rendered as <code>∃ h : p, ...</code> in the infoview but as <code>Exists fun h ↦ ...</code>, making it difficult to see the type of each quantity that exists.</p>",
        "id": 315148894,
        "sender_full_name": "Winston Yin",
        "timestamp": 1670723884
    },
    {
        "content": "<p>I think that both of these issues have already been raised as issues in lean 4 or mathlib 4 (but am not in a position to check right now)</p>",
        "id": 315175797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670747614
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416472\">Winston Yin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Exists.20and.20simp_rw/near/315148894\">said</a>:</p>\n<blockquote>\n<p>On a separate note, <code>Exists</code> is not rendered as <code>∃ h : p, ...</code> in the infoview but as <code>Exists fun h ↦ ...</code>, making it difficult to see the type of each quantity that exists.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"416472\">@Winston Yin</span> Here is a previous discussion of this point:<br>\n<a href=\"#narrow/stream/287929-mathlib4/topic/Pretty.20printing.20of.20existential.20quantifier.20broken\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Pretty.20printing.20of.20existential.20quantifier.20broken</a></p>\n<p>It comes from an over-hasty implementation of the <code>↦</code> notation.  Medium-term we would like these notations not to conflict, short-term (until someone has the energy to write a more principled implementation, probably in core rather than just mathlib) we need to pick one.</p>",
        "id": 315256700,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670793060
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416472\">Winston Yin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Exists.20and.20simp_rw/near/315148894\">said</a>:</p>\n<blockquote>\n<p><code>simp_rw [th]</code> in mathlib3 can rewrite <code>∃ h : p, ...</code>, where p can be proven using theorem <code>th</code>, into <code>∃ h : true, ...</code>, but is unable to do so in mathlib4.</p>\n</blockquote>\n<p>I don't remember seeing this one discussed elsewhere but maybe someone else can point you to it.</p>",
        "id": 315256736,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670793111
    },
    {
        "content": "<p>Sorry -- I wrote that comment when I was away from Lean and then forgot about it. <a href=\"#narrow/stream/287929-mathlib4/topic/Difference.20in.20.60simp.60.20behaviour/near/314521054\">this</a> was what I was referrring to with <code>simp</code> not being able to rewrite <code>p</code> to <code>true</code> even with <code>h : p &lt;-&gt; true</code>. To be honest I'm still not entirely sure I understand what's going on properly here. I'm hoping that the issue here is covered either by <a href=\"https://github.com/leanprover/lean4/issues/1937\">https://github.com/leanprover/lean4/issues/1937</a> or <a href=\"https://github.com/leanprover/lean4/issues/1926\">https://github.com/leanprover/lean4/issues/1926</a> .</p>",
        "id": 315266281,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670801055
    }
]