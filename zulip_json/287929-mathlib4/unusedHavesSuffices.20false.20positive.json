[
    {
        "content": "<p>I think the <code>unusedHavesSuffices</code> linter is giving me a false positive on this theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">xgcd_zero_left</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">r'</span> <span class=\"n\">s'</span> <span class=\"n\">t'</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">xgcdAux</span> <span class=\"mi\">0</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">r'</span> <span class=\"n\">s'</span> <span class=\"n\">t'</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">r'</span><span class=\"o\">,</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">t'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">xgcdAux</span>\n  <span class=\"n\">exact</span> <span class=\"n\">if_pos</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>It gives <code>unnecessary have this : EuclideanDomain.r (r' % r) r</code>, and in the definition <code>xgcdAux</code> there's the line <code>have : r' % r ≺ r := mod_lt _ hr</code> (where locally <code>≺</code> means <code>EuclideanDomain.r</code>) which is needed for the termination check with well-founded recursion. What's the best fix? Maybe this is a bug with the linter, or maybe I'm missing something obvious.</p>",
        "id": 314239576,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1670334077
    },
    {
        "content": "<p>Replacing the <code>have :</code> with <code>have _ :</code> stops the linter complaining, but is this the best solution?</p>",
        "id": 314239750,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1670334125
    },
    {
        "content": "<p>What happens if you just delete the <code>unfold</code> line?</p>",
        "id": 314303888,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670353241
    },
    {
        "content": "<p>The <code>exact</code> line doesn't work in that case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">if_pos</span> <span class=\"n\">rfl</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"bp\">?</span><span class=\"n\">m.20158</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.20158</span> <span class=\"k\">then</span> <span class=\"bp\">?</span><span class=\"n\">m.20160</span> <span class=\"k\">else</span> <span class=\"bp\">?</span><span class=\"n\">m.20161</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.20160</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">xgcdAux</span> <span class=\"mi\">0</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">r'</span> <span class=\"n\">s'</span> <span class=\"n\">t'</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">r'</span><span class=\"o\">,</span> <span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">t'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 314327960,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1670361315
    },
    {
        "content": "<p>I think this happens because <code>xgcdAux</code> is defined through well-founded recursion and the equation compiler.</p>",
        "id": 314327994,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1670361336
    },
    {
        "content": "<p>do you have a MWE?</p>",
        "id": 314332953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670363425
    },
    {
        "content": "<p>I've minified it a little.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">WellFounded</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"mi\">0</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">WellFounded</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">true</span> <span class=\"k\">then</span>\n      <span class=\"mi\">0</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">hz</span> <span class=\"n\">a</span><span class=\"bp\">;</span>\n      <span class=\"n\">foo</span> <span class=\"n\">hr</span> <span class=\"mi\">0</span>\n  <span class=\"n\">termination_by'</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo_id</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">r</span> <span class=\"n\">hz</span> <span class=\"n\">hr</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">foo</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span>\n</code></pre></div>\n<p>Unfortunately there are still a few moving parts, I'm not sure what precisely causes it.</p>",
        "id": 314340216,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1670366292
    }
]