[
    {
        "content": "<p>On line 166 of <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Data/FinEnum.lean#L166\">FinEnum.lean</a> it used to say <code>symm</code> which I replaced with <code>apply Eq.symm</code>.  I realized this morning that seemed off so I went and double checked. If you replace <code>apply Eq.symm</code> with <code>symm</code> you get an error </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">symmetry</span> <span class=\"n\">lemmas</span> <span class=\"n\">only</span> <span class=\"n\">apply</span> <span class=\"n\">to</span> <span class=\"n\">binary</span> <span class=\"n\">relations</span><span class=\"o\">,</span> <span class=\"n\">not</span>\n  <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">xs_hd</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>Is this a bug?</p>",
        "id": 322301149,
        "sender_full_name": "zbatt",
        "timestamp": 1674140289
    },
    {
        "content": "<p>Mathlib.Init.Core has <code>attribute [symm] Eq.symm</code> so this is indeed unexpected (to me, at least) behaviour.</p>",
        "id": 322303702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674140905
    },
    {
        "content": "<p>I am investigating this.</p>",
        "id": 322307649,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1674141861
    },
    {
        "content": "<p>This is strange, logging the representation with <code>logInfo (repr tgt)</code> in <code>Symm.lean</code> tells us that the goal is <code>Lean.Expr.mvar (Lean.Name.mkNum _uniq 45724)</code>, but if you first do <code>suffices s = s\\ {xs_hd} from this</code> then the <code>symm</code> works fine</p>",
        "id": 322307800,
        "sender_full_name": "zbatt",
        "timestamp": 1674141900
    },
    {
        "content": "<p>I'm not sure if this is relevant, but this reminded me that in the <a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/meta/relation_tactics.lean#L13\">Lean 3</a> implementation there's a step where it instantiates the mvars of the target before proceeding.</p>",
        "id": 322308693,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674142071
    },
    {
        "content": "<p>I'm finding this really hard to minimise.</p>",
        "id": 322309184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674142172
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> <br>\nI just tried that locally and it didn't immediately work. That being said this is my first time doing anythin with tactic debugging so someone else should double check</p>\n<p>Update: I'm realizing I put it in the wrong place, so I'm checking again now. Hopefully it'll fix this time.</p>",
        "id": 322309198,
        "sender_full_name": "zbatt",
        "timestamp": 1674142177
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> I am testing if that is the solution here.</p>",
        "id": 322309214,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1674142180
    },
    {
        "content": "<p>Last time I was debugging <code>symm</code> and <code>trans</code> I just made the errors much more verbose temporarily. I will try that again if the above does not work (the build is slow now so each step takes a while).</p>",
        "id": 322309910,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1674142317
    },
    {
        "content": "<p>yep it worked!</p>",
        "id": 322310591,
        "sender_full_name": "zbatt",
        "timestamp": 1674142469
    },
    {
        "content": "<p>What is \"it\"?</p>",
        "id": 322310706,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1674142497
    },
    {
        "content": "<p>Specifcally, replace line 102 with <code>  g.symmAux (← instantiateMVars (← g.getType)) fun lem args body g =&gt; do</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Apply a symmetry lemma (i.e. marked with `@[symm]`) to a metavariable. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">MVarId</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">g.symmAux</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">g.getType</span><span class=\"o\">))</span> <span class=\"k\">fun</span> <span class=\"n\">lem</span> <span class=\"n\">args</span> <span class=\"n\">body</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">true</span> <span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">g.getType</span><span class=\"o\">)</span> <span class=\"n\">body</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n    <span class=\"n\">g.assign</span> <span class=\"o\">(</span><span class=\"n\">mkAppN</span> <span class=\"n\">lem</span> <span class=\"n\">args</span><span class=\"o\">)</span>\n    <span class=\"n\">return</span> <span class=\"n\">args.back.mvarId</span><span class=\"bp\">!</span>\n</code></pre></div>",
        "id": 322310748,
        "sender_full_name": "zbatt",
        "timestamp": 1674142505
    },
    {
        "content": "<p>I don't know enough about tactics to know if this is correct to do, but I thought I should point out that the same lack of  <code>instantiateMVars</code> appears on line 75. Should this be changed too?</p>",
        "id": 322311349,
        "sender_full_name": "zbatt",
        "timestamp": 1674142642
    },
    {
        "content": "<p>I am trying a line inserted after line 37:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">targetTy</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">targetTy</span>\n</code></pre></div>\n<p>It is still building. Let me see if it works.</p>",
        "id": 322311386,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1674142652
    },
    {
        "content": "<p>Actually my change probably fixes nothing as it is when the attribute is being added. I believe <span class=\"user-mention\" data-user-id=\"483794\">@zbatt</span> is right on both counts: the correct fix here and the same should be done on line 75.</p>",
        "id": 322312211,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1674142818
    },
    {
        "content": "<p>should I PR these changes?</p>",
        "id": 322313129,
        "sender_full_name": "zbatt",
        "timestamp": 1674143044
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"483794\">@zbatt</span> maybe it is best if you make both changes, build everything and make a PR. Is that fine?</p>",
        "id": 322313158,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1674143052
    },
    {
        "content": "<p>Our lines crossed.</p>",
        "id": 322313237,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1674143073
    },
    {
        "content": "<p>will do! (just give me a minute to submit some homework :p)</p>",
        "id": 322313254,
        "sender_full_name": "zbatt",
        "timestamp": 1674143078
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1683\">PR'd</a></p>",
        "id": 322315416,
        "sender_full_name": "zbatt",
        "timestamp": 1674143656
    },
    {
        "content": "<p>Just an alert - a lot of the code of <code>ext</code> is also common with <code>symm</code> and <code>trans</code> (my initial implementation of <code>symm</code> and <code>trans</code>was heavily modelled on <code>ext</code>). It may be worth checking if the same issue is there too.</p>",
        "id": 322316513,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1674143941
    },
    {
        "content": "<p><code>ext</code> it seems uses <a href=\"https://github.com/leanprover/std4/blob/5770b609aeae209cb80ac74655ee8c750c12aabd/Std/Tactic/Ext.lean#L85\"><code>getType'</code></a>, which includes <a href=\"https://github.com/leanprover/lean4/blob/cbdd76f6b608a3791cdc5df0c49f2200f2170f1f/src/Lean/Meta/Tactic/Util.lean#L64-L67\"><code>instantiateMVars</code></a>.</p>",
        "id": 322317262,
        "sender_full_name": "Parth Shastri",
        "timestamp": 1674144131
    },
    {
        "content": "<p>Also <code>trans</code> apppears to use <code>getMainTarget</code> so I don't think it should have the same issue.</p>",
        "id": 322366809,
        "sender_full_name": "zbatt",
        "timestamp": 1674158295
    }
]