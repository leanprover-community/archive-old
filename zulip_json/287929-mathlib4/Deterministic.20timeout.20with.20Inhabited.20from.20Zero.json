[
    {
        "content": "<p>I wanted to play around with modules, so I ported the basic definitions from original mathlib. Unfortunately, these definitions combined with this instance of Inhabited: <code>instance {α} [Zero α] : Inhabited α := ⟨0⟩</code> do not work properly. Simple scalar multiplication <code>r*x</code> gives deterministic timeout, you can crank up the <code>maxHeartbeats</code> to 2000 but we probably want to keep that low as possible, so I'm reporting it. </p>\n<p>Few notes:</p>\n<ol>\n<li>Setting low priority to the instance of Inhabited does not solve the problem.</li>\n<li>The problem occurs only when you import the whole mathlib <code>import Mathlib</code></li>\n</ol>",
        "id": 264680340,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1639387644
    },
    {
        "content": "<p>mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- import Mathlib.Algebra.Ring.Basic -- ok with only this</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MulAction</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">HMul</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">one_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">DistribMulAction</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddMonoid</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">MulAction</span> <span class=\"n\">M</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">smul_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">smul_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- set_option synthInstance.maxHeartbeats 2000</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DistribMulAction</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>  <span class=\"c1\">-- (deterministic) timeout at 'typeclass'</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Module</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">DistribMulAction</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">add_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">zero_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 264680356,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1639387672
    },
    {
        "content": "<p>Those two instances at the top are likely to cause diamonds</p>",
        "id": 264680647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639387851
    },
    {
        "content": "<p>Is that a problem in Lean 4?</p>",
        "id": 264680681,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1639387870
    },
    {
        "content": "<p>(unless inhabited is a Prop)</p>",
        "id": 264680688,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639387872
    },
    {
        "content": "<p>No it is not Prop</p>",
        "id": 264680706,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1639387882
    },
    {
        "content": "<p>I have no idea if it's a problem in lean 4. In Lean 3 I thought we used outparams to do this, or did at some point. Am I out of date?</p>",
        "id": 264681039,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639388058
    },
    {
        "content": "<blockquote>\n<p>Setting low priority to the instance of Inhabited does not solve the problem.</p>\n</blockquote>\n<p>Instance priorities rarely do what you want them to do, just avoid them.</p>",
        "id": 264681123,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639388115
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> Do you want <code>Nonempty</code> instead?</p>",
        "id": 264681148,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639388131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Deterministic.20timeout.20with.20Inhabited.20from.20Zero/near/264681148\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> Do you want <code>Nonempty</code> instead?</p>\n</blockquote>\n<p>Good idea! I'm using it in noncomputational context anyway, so I can use <code>Classical.choice</code> to actually get an element.</p>",
        "id": 264681586,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1639388381
    },
    {
        "content": "<p>The inhabited instances need to go of course.  But the issue why this blows up here is because of something different: when lean elaborates <code>m * n</code> it tries to coerce <code>m</code> into <code>n</code> (to see if it can turn the heterogeneous operation into a homogeneous one).  In other words, <code>(x : R)</code> triggers the same type class timeout.</p>\n<p>The reason is that <code>instance [Numeric α] : Coe ℕ α</code> is apparently too general, and introduces metavariables during TC synthesis.  Changing the <code>Coe</code> to <code>CoeTC</code> here makes the example work even with the conflicting inhabited instances.</p>",
        "id": 264682061,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639388646
    },
    {
        "content": "<p>Thanks a lot for investigating, I have noticed lots of Coe and Numeric in the trace output but was unable to make sense of.</p>",
        "id": 264682312,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1639388803
    },
    {
        "content": "<blockquote>\n<p>In other words, (x : R) triggers the same type class timeout.</p>\n</blockquote>\n<p>I can't reproduce that. It works fine for me.</p>",
        "id": 264682598,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1639388984
    },
    {
        "content": "<p>You won't see it in the error message, the coercion code will silently ignore the timeout.  But you can still see the type class search in the trace output.</p>",
        "id": 264687580,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639391896
    }
]