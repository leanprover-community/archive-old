[
    {
        "content": "<p>I was looking at what the ported data.fun_like.basic looks like. In the Lean 3 file there is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- This instance should have low priority, to ensure we follow the chain</span>\n<span class=\"c1\">-- `fun_like → has_coe_to_fun`</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">10</span><span class=\"o\">]</span> <span class=\"n\">coe_fn_trans</span>\n</code></pre></div>\n<p>This is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">coe_fn_trans</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_coe_to_fun</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">has_coe_t_aux</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_coe_t_aux.coe</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">_</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">coe_fn</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_coe_t_aux.coe</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">_</span> <span class=\"n\">x</span><span class=\"o\">)⟩</span>\n</code></pre></div>\n<p>from core Lean 3. I feel ill-equipped to deal things here, I have only the vaguest understanding of coercions in Lean 3 and no understanding of them in Lean 4. Is this supposed to be here in Lean 4? There is also</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fun_like</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">@[priority 100, -- Give this a priority between `coe_fn_trans` and the default priority</span>\n<span class=\"kd\">  nolint dangerous_instance]</span> <span class=\"c1\">-- `α` and `β` are out_params, so this instance should not be dangerous</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">fun_like.coe</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 308087169,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667620071
    },
    {
        "content": "<p>Related: core Lean 3 had a special name for the coercion to function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">coe_fn</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_coe_to_fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">has_coe_to_fun.coe</span>\n</code></pre></div>\n<p>Does core Lean 4 or mathlib4 have or want such a thing?</p>",
        "id": 308087570,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667620494
    },
    {
        "content": "<p>Generally speaking, I would just suggest you comment these kinds of things out and put a porting note. These elaboration details are likely to be out of date anyway and will need to be redone in the new context</p>",
        "id": 308090200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667623556
    },
    {
        "content": "<p>The answer to the last question is <code>has_coe_to_fun</code> -&gt; <code>CoeFun</code></p>",
        "id": 308090749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667624060
    }
]