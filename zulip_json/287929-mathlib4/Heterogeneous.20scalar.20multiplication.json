[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib4/pull/1169\">mathlib4#1169</a>, having made the <code>•</code> notation heterogeneous seems to have broken some simps.  Here's an import-free example: a simp that doesn't work, but if in the middle section you change</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">HSMul</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">hSMul</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">73</span> <span class=\"s2\">\" • \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">HSMul.hSMul</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instHSMul</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HSMul</span> <span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">hSMul</span> <span class=\"o\">:=</span> <span class=\"n\">SMul.smul</span>\n</code></pre></div>\n<p>to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">73</span> <span class=\"s2\">\" • \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">SMul.smul</span>\n</code></pre></div>\n<p>then it does work.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>/-! maps preserving addition -/</p>\n<p>structure AddHom (M N : Type) [Add M] [Add N] where<br>\n  to_fun : M → N<br>\n  map_add : ∀ x y, to_fun (x + y) = to_fun x + to_fun y</p>\n<p>instance [Add M] [Add N] : CoeFun (AddHom M N) fun _ =&gt; M → N where<br>\n  coe := AddHom.to_fun</p>\n<p>@[simp]<br>\ntheorem map_add [Add M] [Add N] (f : AddHom M N) (x y : M) : f (x + y) = f x + f y :=<br>\n  AddHom.map_add f x y</p>\n<p>/-! scalar multiplication -/</p>\n<p>class HSMul (M α : Type) (β : outParam (Type)) where<br>\n  hSMul : M → α → β</p>\n<p>infixr:73 \" • \" =&gt; HSMul.hSMul</p>\n<p>class SMul (M α : Type) where<br>\n  smul : M → α → α</p>\n<p>-- infixr:73 \" • \" =&gt; SMul.smul</p>\n<p>instance instHSMul [SMul M α] : HSMul M α α where<br>\n  hSMul := SMul.smul</p>\n<p>class Module (M α : Type) [Add M] [Add α] extends SMul M α where<br>\n  add_smul : ∀ (r s : M) (x : α), (r + s) • x = r • x + s • x</p>\n<p>/-! composition definitions -/</p>\n<p>@[simp]<br>\ndef SMul.comp.smul [SMul N α] (g : M → N) (m : M) (a : α) : α := g m • a</p>\n<p>@[reducible]<br>\ndef SMul.comp [SMul N α] (g : M → N) : SMul M α where<br>\n  smul := SMul.comp.smul g</p>\n<p>@[reducible]<br>\ndef Module.compHom [Add α] [Add M] [Add N] [Module N α] (f : AddHom M N) : Module M α :=<br>\n  { smul := SMul.comp.smul f<br>\n    add_smul := fun r s x =&gt; by simp [add_smul] }</p>\n</div></div>",
        "id": 317473060,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671754534
    },
    {
        "content": "<p>Is this a familiar problem?  What's the fix?  (And can someone remind me why we made <code>•</code> heterogeneous, anyway?)</p>",
        "id": 317473180,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671754593
    },
    {
        "content": "<p>This is the same issue as <a href=\"#narrow/stream/270676-lean4/topic/unfolding.20earlier.20fields\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/unfolding.20earlier.20fields</a></p>",
        "id": 317484951,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1671763276
    },
    {
        "content": "<p>One potential workaround is to define the smul instance separately, and add an explicit simp-lemma to unfold it.</p>",
        "id": 317485431,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1671763716
    },
    {
        "content": "<p><del>Thanks Gabriel!  I don't understand your comment at that link, though -- could you explain more about the fix?</del> snap <span aria-label=\"racecar\" class=\"emoji emoji-1f3ce\" role=\"img\" title=\"racecar\">:racecar:</span></p>",
        "id": 317485435,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671763717
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.HaveI</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Spread</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! maps preserving addition -/</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">AddHom</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n<span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span>\n<span class=\"n\">map_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">to_fun</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">to_fun</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"o\">(</span><span class=\"n\">AddHom</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span> <span class=\"n\">where</span>\n<span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">AddHom.to_fun</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">map_add</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">AddHom</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"n\">AddHom.map_add</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! scalar multiplication -/</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">HSMul</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n<span class=\"n\">hSMul</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">73</span> <span class=\"s2\">\" • \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">HSMul.hSMul</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">SMul</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"n\">smul</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"c1\">-- infixr:73 \" • \" =&gt; SMul.smul</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instHSMul</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HSMul</span> <span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n<span class=\"n\">hSMul</span> <span class=\"o\">:=</span> <span class=\"n\">SMul.smul</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Module</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n<span class=\"n\">add_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">s</span> <span class=\"bp\">•</span> <span class=\"n\">x</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! composition definitions -/</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">SMul.comp.smul</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">N</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">SMul.comp</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">N</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n<span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"n\">SMul.comp.smul</span> <span class=\"n\">g</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Module.compSMul</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">N</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">AddHom</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"n\">SMul.comp.smul</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Module.compSMul_def</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">N</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">AddHom</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Module.compSMul</span> <span class=\"n\">f</span>\n  <span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Module.compHom</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">N</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">AddHom</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">__</span> <span class=\"o\">:=</span> <span class=\"n\">Module.compSMul</span> <span class=\"n\">f</span>\n  <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_smul</span><span class=\"o\">]</span>\n</code></pre></div>\n</div></div>",
        "id": 317485445,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1671763729
    },
    {
        "content": "<p>Interesting!  Yes, that works in the file, thanks.</p>",
        "id": 317486280,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1671764411
    },
    {
        "content": "<p>I just made an import-free example of a typeclass inference problem <a href=\"#narrow/stream/287929-mathlib4/topic/typeclass.20instance.20problem.20with.20singleton\">which came up in the port earlier today</a>, where the problem is seemingly not a Lean 3/Lean 4 change, but a Mathlib 3/Mathlib 4 change: our choice to wrap scalar multiplication in an extra layer of heterogeneous scalar multiplication.  Compare</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Singleton</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">singleton</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Singleton</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">HSMul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n <span class=\"n\">hSMul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">SMul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instHSMul</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HSMul</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">SMul.smul</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Set.hasSmul</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">HSMul.hSMul</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">Singleton.singleton</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">SMul.smul</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">Singleton.singleton</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>with the <a href=\"https://leanprover-community.github.io/lean-web-editor/#code=variables%20%7B%CE%B1%20%CE%B2%20%CE%B3%20%3A%20Type%7D%0A%0Aclass%20Singleton%20%28%CE%B1%20%3A%20out_param%20Type%29%20%28%CE%B2%20%3A%20Type%29%20%3A%3D%0A%28%20singleton%20%3A%20%CE%B1%20%E2%86%92%20%CE%B2%20%29%0A%0Adef%20Set%20%28%CE%B1%20%3A%20Type%29%20%3A%3D%20%CE%B1%20%E2%86%92%20Prop%0A%0Ainstance%20%3A%20Singleton%20%CE%B1%20%28Set%20%CE%B1%29%20%3A%3D%20sorry%0A%0Aclass%20HSMul%20%28%CE%B1%20%3A%20Type%29%20%28%CE%B2%20%3A%20Type%29%20%28%CE%B3%20%3A%20out_param%20Type%29%20%3A%3D%0A%28%20hSMul%20%3A%20%CE%B1%20%E2%86%92%20%CE%B2%20%E2%86%92%20%CE%B3%20%29%0A%0Aclass%20SMul%20%28%CE%B1%20%3A%20Type%29%20%28%CE%B2%20%3A%20Type%29%20%3A%3D%0A%28%20smul%20%3A%20%CE%B1%20%E2%86%92%20%CE%B2%20%E2%86%92%20%CE%B2%20%29%0A%0Ainstance%20instHSMul%20%5BSMul%20%CE%B1%20%CE%B2%5D%20%3A%20HSMul%20%CE%B1%20%CE%B2%20%CE%B2%20%3A%3D%20%E2%9F%A8SMul.smul%E2%9F%A9%0A%0Avariables%20%5BSMul%20%CE%B1%20%CE%B2%5D%20%7Bs%20%3A%20Set%20%CE%B1%7D%20%7Bb%20%3A%20%CE%B2%7D%0A%0Ainstance%20Set.hasSmul%20%3A%20SMul%20%28Set%20%CE%B1%29%20%28Set%20%CE%B2%29%20%3A%3D%20sorry%0A%0Aexample%20%3A%20Set%20%CE%B2%20%3A%3D%20HSMul.hSMul%20s%20%28Singleton.singleton%20b%29%20--%20fails%0A%0Aexample%20%3A%20Set%20%CE%B2%20%3A%3D%20SMul.smul%20s%20%28Singleton.singleton%20b%29%20--%20works%0A\">mathlib3 version</a>.</p>",
        "id": 320612717,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673419862
    },
    {
        "content": "<p>As far as I can tell these two are exact translations and fail in the same ways.  So the culprit should be the <code>HSMul</code> layer.</p>",
        "id": 320612756,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673419892
    },
    {
        "content": "<p>Did we previously discuss the choice to invent <code>HSMul</code>?  Could someone link to that discussion?  What is the expected benefit?</p>",
        "id": 320612828,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673419926
    },
    {
        "content": "<p>While writing this message I discovered that I had previously started another thread with the same title, with something else that was broken by adding an <code>HSMul</code> layer.  Scroll up to see it.</p>",
        "id": 320612909,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673419993
    },
    {
        "content": "<p>I think we introduced hsmul to match the built-in operator type classes like hmul</p>",
        "id": 320613555,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673420390
    },
    {
        "content": "<p>Right, it in fact has the same signature as HMul.  But did we have some intended use case?</p>",
        "id": 320613686,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673420458
    },
    {
        "content": "<p>I vaguely remember it was about separating the notation (cdot) from the mathlib meaning (multiplication by scalar) because somebody wanted to use the notation for something that was not scalar multiplication?</p>",
        "id": 320613783,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1673420523
    },
    {
        "content": "<p>As far as I know there wasn't any particular motivation to add <code>HSMul</code> other than consistency with core. We certainly don't have any current things that need it.</p>",
        "id": 320625864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673422970
    },
    {
        "content": "<p>Yes, I would be happy to ditch it.</p>",
        "id": 320625937,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673422982
    },
    {
        "content": "<p>I think this issue is caused by not marking the <code>SMul -&gt; HSMul</code> instance as a default instance though</p>",
        "id": 320626039,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673423002
    },
    {
        "content": "<p>unlike the <code>Add -&gt; HAdd</code> instances</p>",
        "id": 320626109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673423016
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> introduced it because of <code>to_additive</code> troubles. But I think those could have been solved another way.</p>",
        "id": 320626133,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673423025
    },
    {
        "content": "<p>I would be surprised if <code>HSMul</code> has any issues above and beyond what we already have to deal with for <code>HAdd</code> and <code>HPow</code></p>",
        "id": 320626431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673423077
    },
    {
        "content": "<p>OK, I found Jireh's post in favour of HSMul using the pointers Yaël gave about the history with <code>to_additive</code>.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/to_additive.20issues/near/311930584\">said</a>:</p>\n<blockquote>\n<p>Look, I propose creating the <code>HSMul</code> class for now so that I can fix <code>to_additive</code> translating <code>pow</code> to <code>smul</code> without potentially clobbering <code>HMul</code>. If later we wish to change Lean 4 core to remove <code>HPow</code> and we can convince the devs, fine, we can do that when the time comes.</p>\n</blockquote>",
        "id": 320633818,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673424450
    },
    {
        "content": "<p>Mario, does this clarify anything for you?  Do you still think we need a <code>SMul -&gt; HSMul</code> default instance to fix this?</p>",
        "id": 320634252,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673424522
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> what other way?</p>\n<p>Yes, the introduction of <code>HSMul</code> was primarily to fix <code>to_additive</code>, but I think the other benefit was keeping the <code>smul</code> and <code>mul</code> notations completely separate. Eric also mentioned a use case in that thread IIRC (can't link right now, on mobile, Heather, can you do it?).</p>",
        "id": 320724553,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1673449523
    },
    {
        "content": "<blockquote>\n<p>Do you still think we need a SMul -&gt; HSMul default instance to fix this?</p>\n</blockquote>\n<p>I think we should certainly have this, and can revisit whether the H version is needed at all later</p>",
        "id": 320728505,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673450502
    },
    {
        "content": "<p>To be clear, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instHSMul#doc\">docs4#instHSMul</a> aleady exists, it's just missing the <code>@[defaultInstance]</code> attribute that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=instHMul#doc\">docs4#instHMul</a> has</p>",
        "id": 320728883,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673450592
    },
    {
        "content": "<p>Added in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1501\">mathlib4#1501</a></p>",
        "id": 320913966,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1673522951
    }
]