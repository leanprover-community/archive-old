[
    {
        "content": "<p>I'm stuck trying to port <a href=\"https://leanprover-community.github.io/mathlib_docs/find/centroid_hom.coe_to_add_monoid_hom_injective\">docs#centroid_hom.coe_to_add_monoid_hom_injective</a> to mathlib4. Here is the original from mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">coe_to_add_monoid_hom_injective</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">centroid_hom</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→+</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">fun_like.congr_fun</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Here is the current port in mathlib4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">coe_to_add_monoid_hom_injective</span> <span class=\"o\">:</span> <span class=\"n\">Injective</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">CentroidHom</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→+</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">ext</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">FunLike.congr_fun</span> <span class=\"n\">h</span> <span class=\"n\">a</span>\n    <span class=\"n\">this</span>\n</code></pre></div>\n<p>With <code>set_option autoImplicit false</code>, I get the error <code>unknown identifier 'coe'</code>.<br>\nWhen I comment it out , I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">FunLike.congr_fun</span> <span class=\"n\">h</span> <span class=\"n\">a</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>I'm more confused about the former. Not sure what to do here.</p>",
        "id": 319532418,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1672906053
    },
    {
        "content": "<p>If you comment out <code>set_option autoImplicit false</code> then you're just saying \"let coe be a random function <code>CentroidHom α → α →+ α</code>\" which is clearly not what you want.</p>",
        "id": 319537684,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672908716
    },
    {
        "content": "<p>Try replacing <code>coe</code> with <code>fun x =&gt; \\u x</code> perhaps?</p>",
        "id": 319538039,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672908848
    },
    {
        "content": "<p><code>(\\u)</code> should do</p>",
        "id": 319538264,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672908952
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Issue.20porting.20Algebra.2EHom.2ECentroid.2Ecoe_to_add_monoid_hom.2E.2E.2E/near/319538264\">said</a>:</p>\n<blockquote>\n<p><code>(\\u)</code> should do</p>\n</blockquote>\n<p>Oh, I see. This worked. Thanks!</p>",
        "id": 319653213,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1672945579
    },
    {
        "content": "<p>Does <code>↑f a</code> equal <code>(↑f) a</code> or <code>↑(f a)</code>?</p>",
        "id": 319688949,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1672959773
    },
    {
        "content": "<p>I ask because I'm getting this error message (and have been getting similar ones):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"bp\">↑↑?</span><span class=\"n\">f</span>\n<span class=\"n\">fg</span><span class=\"o\">:</span> <span class=\"n\">CentroidHom</span> <span class=\"n\">α</span>\n<span class=\"n\">ab</span><span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">↑↑</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑↑</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 319689357,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1672959953
    },
    {
        "content": "<p>It equals the first. The code snippet you just gave is very hard to debug because there are probably three different functions called <code>coe</code> in it!</p>",
        "id": 319690592,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672960497
    },
    {
        "content": "<p>Hence my confusion :/</p>",
        "id": 319691334,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1672960851
    },
    {
        "content": "<p>Is there a way to get Lean to stop using <code>\\u</code> and <code>\\u=</code> so that I can figure out what's wrong?</p>",
        "id": 319691611,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1672960993
    },
    {
        "content": "<p><code>set_option pp.notation false</code> + <code>set_option pp.notation.explicit true</code> maybe?</p>",
        "id": 319691737,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672961048
    },
    {
        "content": "<p>It looks like <code>set_option pp.coercions false</code> is what I was looking for. Thanks for pointing me in the right direction.</p>",
        "id": 319692598,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1672961457
    },
    {
        "content": "<p>Do you know you can click on any term on the infoview to inspect its type and definition? This would also have given you the information you want</p>",
        "id": 319696637,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672963716
    }
]