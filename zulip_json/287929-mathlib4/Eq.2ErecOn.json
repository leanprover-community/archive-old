[
    {
        "content": "<p>I'm <a href=\"https://github.com/leanprover-community/mathlib4/pull/1516\">porting Data.Fin.Tuple.Basic</a> and I'm having issues with <code>Eq.recOn</code>.</p>",
        "id": 321076349,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1673580411
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/port/Data.Fin.Tuple.Basic/Mathlib/Data/Fin/Tuple/Basic.lean#L429\">Here</a> I get the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">eq_rec_compose</span> <span class=\"bp\">?</span><span class=\"n\">m.49854</span> <span class=\"bp\">?</span><span class=\"n\">m.49855</span> <span class=\"bp\">?</span><span class=\"n\">m.49856</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Eq.recOn</span> <span class=\"bp\">?</span><span class=\"n\">m.49854</span> <span class=\"o\">(</span><span class=\"n\">Eq.recOn</span> <span class=\"bp\">?</span><span class=\"n\">m.49855</span> <span class=\"bp\">?</span><span class=\"n\">m.49856</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Eq.recOn</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.49851</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.49853</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m.49856</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">_root_.cast</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">castSucc.toEmbedding</span> <span class=\"o\">(</span><span class=\"n\">castLt</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">α</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_root_.cast</span> <span class=\"n\">C2</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">_root_.cast</span> <span class=\"n\">C1</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 321076357,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1673580420
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/port/Data.Fin.Tuple.Basic/Mathlib/Data/Fin/Tuple/Basic.lean#L550\">Here</a> and in the line below, I get the error </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">elaborate</span> <span class=\"n\">eliminator</span><span class=\"o\">,</span> <span class=\"n\">invalid</span> <span class=\"n\">motive</span>\n  <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 321076396,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1673580479
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"570929\">Maxwell Thum</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Eq.2ErecOn/near/321076357\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/port/Data.Fin.Tuple.Basic/Mathlib/Data/Fin/Tuple/Basic.lean#L429\">Here</a> I get the error</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">eq_rec_compose</span> <span class=\"bp\">?</span><span class=\"n\">m.49854</span> <span class=\"bp\">?</span><span class=\"n\">m.49855</span> <span class=\"bp\">?</span><span class=\"n\">m.49856</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Eq.recOn</span> <span class=\"bp\">?</span><span class=\"n\">m.49854</span> <span class=\"o\">(</span><span class=\"n\">Eq.recOn</span> <span class=\"bp\">?</span><span class=\"n\">m.49855</span> <span class=\"bp\">?</span><span class=\"n\">m.49856</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Eq.recOn</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.49851</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.49853</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m.49856</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">_root_.cast</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">castSucc.toEmbedding</span> <span class=\"o\">(</span><span class=\"n\">castLt</span> <span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">α</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_root_.cast</span> <span class=\"n\">C2</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">_root_.cast</span> <span class=\"n\">C1</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>For this it turned out I just needed to fill in the blanks: <code>exact eq_rec_compose (Eq.trans C2.symm C1) C2 y</code>. Not sure why Lean 4 can't do this when Lean 3 could.</p>",
        "id": 321083891,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1673586642
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"570929\">Maxwell Thum</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Eq.2ErecOn/near/321076396\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/port/Data.Fin.Tuple.Basic/Mathlib/Data/Fin/Tuple/Basic.lean#L550\">Here</a> and in the line below, I get the error </p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">elaborate</span> <span class=\"n\">eliminator</span><span class=\"o\">,</span> <span class=\"n\">invalid</span> <span class=\"n\">motive</span>\n  <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span> <span class=\"n\">x</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Replacing <code>Eq.recOn (succAbove_castLt hlt) (p _)</code> with <code>@Eq.recOn _ _ (fun x _ ↦ α x) _ (succAbove_castLt hlt) (p _)</code> (and analogous for the line below) works for some reason</p>",
        "id": 321086257,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1673588682
    },
    {
        "content": "<p>I tried to leave a comment on <a href=\"https://math.commelin.net/files/port_status.html\">#port-status</a> for data.fin.tuple.basic saying \"please wait for a mathlib3 PR (<a href=\"https://github.com/leanprover-community/mathlib/pull/10346\">#10346</a>)\", but the comment seems to be lost. <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, what's the mechanism to write those comments? I thought I did what <a href=\"https://github.com/leanprover-community/mathlib/wiki/mathlib4-port-status\">#port-wiki</a> requested</p>",
        "id": 321108068,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673600043
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <a href=\"https://github.com/leanprover-community/mathlib4/wiki/port-comments/_edit\">https://github.com/leanprover-community/mathlib4/wiki/port-comments/_edit</a></p>",
        "id": 321108229,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673600087
    },
    {
        "content": "<p>Ugh I forgot the <code>.basic</code> at the end of this filename</p>",
        "id": 321108341,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673600129
    }
]