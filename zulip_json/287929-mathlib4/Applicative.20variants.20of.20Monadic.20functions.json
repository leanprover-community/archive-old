[
    {
        "content": "<p>In the <code>data.list.defs</code> there are functions that are analogues of <code>List.mapIdxM</code> but are defined in terms of <code>Applicative</code> (from a type signature perspective, the only difference is replacing <code>Monad m</code> with <code>Applicative m</code></p>\n<p>I could either:</p>\n<ol>\n<li><code>#align</code> the difference away, betting that zero code in <code>mathlib</code> cares about the difference &amp; it's covariant anyway.</li>\n<li>Create <code>List.mapIdxA</code> variants with the <code>Applicative</code> constraint (with the con that the monadic variants are going to be better maintained over time b/c they are in <code>Std4</code>.</li>\n</ol>\n<p>In the Haskell community, people Care Deeply about constraining to the minimum set of laws; I don't get the sense than the Lean community does as much?</p>",
        "id": 313187036,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669856760
    },
    {
        "content": "<p>My guess is that in the long run we may end up with none of the \"Haskell category theory\" in mathlib itself, and that it will all move out to std or a separate library.</p>",
        "id": 313190071,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669859092
    },
    {
        "content": "<p>Note that the monadic functions actually perform better than the applicative ones even when both are applicable, because applicative functors require lots of mapping over closures to do anything with the value. It is a conscious design choice of lean 4 to stick to <code>Monad</code> functions</p>",
        "id": 313213172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669876759
    },
    {
        "content": "<p>Cool -- I'll <code>#align</code> away these to the <code>Monad</code>-flavored ones in <code>Std</code></p>",
        "id": 313312163,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669910313
    }
]