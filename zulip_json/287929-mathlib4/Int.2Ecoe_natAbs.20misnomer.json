[
    {
        "content": "<p>I imagine this is very, very low priority, but thought I'd mention: I think <code>Int.coe_natAbs</code> should be <code>Int.coe_nat_abs</code>. Currently <code>coe_natAbs (n : ℕ) : |(n : ℤ)| = n</code>, which involves <code>abs</code>, not <code>natAbs</code>. By the name, I'd expect <code>coe_natAbs</code> to be what <code>Int.natAbs_cast</code> is (<code>natAbs_cast (n : ℕ) : natAbs ↑n = n</code>).</p>",
        "id": 316151830,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671142469
    },
    {
        "content": "<p>nice find! I expect that was an overzealous search+replace of <code>nat_abs</code> to <code>natAbs</code>. If we fix it, our naming scheme pays off my distinguishing the two :-)</p>",
        "id": 316152534,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1671142786
    },
    {
        "content": "<p>Please PR! :-)</p>",
        "id": 316178308,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671157654
    },
    {
        "content": "<p><code>coe_natAbs</code> would rather be <code>coe_natAbs (n : ℤ) : (n.nat_abs : ℤ) = |n|</code>.</p>",
        "id": 316243932,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671190754
    },
    {
        "content": "<p>And <code>coe_nat_abs</code> should be <code>abs_coe_nat</code>, so the new naming convention still hasn't helped <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 316244208,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671190843
    },
    {
        "content": "<p>Good find, I remember being mislead by this theorem name in mathlib3!</p>",
        "id": 316245239,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1671191190
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/17967\">#17967</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/1080\">mathlib4#1080</a></p>",
        "id": 316303236,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671206939
    },
    {
        "content": "<p>I guess this might be a good time to ask: what exactly is the naming scheme that tells us that e.g. <code>abs</code> should come before <code>coe</code>? I sort of get it, but is “how to name a lemma in mathlib4” (in general) written down anywhere? (This would also help me guess the names of lemmas!)</p>",
        "id": 316319835,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671211464
    },
    {
        "content": "<p>It's outermost to innermost application from left to right (with the occasional exception of predicates, which might come last, eg <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.nonempty\">docs#set.nonempty</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective\">docs#function.injective</a>). In <code>(n.nat_abs : ℤ)</code>, <code>int.coe_nat</code> is outermost, and <code>nat_abs</code> is innermost.</p>",
        "id": 316320257,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671211566
    },
    {
        "content": "<p>I see…it also seems like we omit <code>eq_&lt;rhs&gt;</code> when the rhs is “obvious” somehow?</p>",
        "id": 316321055,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671211802
    },
    {
        "content": "<p>Yes. And we omit <code>_eq</code>/<code>_iff</code> when it's clear it's gonna be an equality/equivalence.</p>",
        "id": 316321206,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671211835
    },
    {
        "content": "<p>Do we still write outermost first even when infix notation is standard? Or is it just <code>eq</code>/<code>iff</code> that get written “in the middle”?</p>",
        "id": 316321399,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671211893
    },
    {
        "content": "<p>No, infix notation takes over the precedence convention. But there's a bit of a grey area on whether dot notation is infix.</p>",
        "id": 316321671,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671211968
    },
    {
        "content": "<p>If there is no <code>notation</code> attached to it, I tend to say no.</p>",
        "id": 316321734,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671211991
    },
    {
        "content": "<p>Neat, ok, thanks! :)</p>",
        "id": 316321737,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671211992
    },
    {
        "content": "<p>But even when there's infix notation, we sometimes act as it if were a regular two arguments function and instead precise the argument using <code>_left</code>/<code>_right</code>.</p>",
        "id": 316321971,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671212069
    },
    {
        "content": "<p>This is particularly useful when several infix notations are mixed and do not associate (we unfortunately don't allow brackets in lemma names <span aria-label=\"pensive\" class=\"emoji emoji-1f614\" role=\"img\" title=\"pensive\">:pensive:</span>).</p>",
        "id": 316322147,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671212127
    },
    {
        "content": "<p>Another source of confusion is that <code>x.foo.bar</code> should be called <code>bar_foo</code>/<code>bar_foo_x</code> according to the inner/outermost rule, but <code>foo_bar</code> visually.</p>",
        "id": 316323073,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671212408
    },
    {
        "content": "<p>I strongly prefer the first convention because it does not depend on whether you use dot notation or not.</p>",
        "id": 316323152,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671212433
    }
]