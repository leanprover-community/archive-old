[
    {
        "content": "<p>There are problems in the port of Data.Int.Order.Basic caused by a clash between <code>Nat.Cast</code> and <code>Int.ofNat</code>, both are coercions <code>Int</code> to <code>Nat</code>. In Lean3 I think we made the decision to always use <code>Nat.Cast</code>in Lean3, I guess we're making the same decision in Lean4? I'm not up to date with all of this.</p>",
        "id": 314947732,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1670608074
    },
    {
        "content": "<p>In Lean3 we didn't need to make the decision, we just used <code>coe</code> as the head symbol of the simp-normal form</p>",
        "id": 314948065,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670608178
    },
    {
        "content": "<p>Which one is <code>coe</code>?</p>",
        "id": 314948280,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1670608230
    },
    {
        "content": "<p>Both are coercions in Lean4</p>",
        "id": 314948308,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1670608239
    },
    {
        "content": "<p>It doesn't matter in Lean 3, typeclass search can unify them because the typeclass instances are defeq. <code>simp</code> matches the head symbol and concludes it's worth a try</p>",
        "id": 314948335,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670608248
    },
    {
        "content": "<p>I would guess in the long term we maybe want to use an <code>algebra.coe</code> symbol for all of <code>Nat.cast</code>, <code>Int.cast</code>, <code>algebraMap</code>, <code>subgroup.subtype</code>, ...</p>",
        "id": 314948520,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670608309
    },
    {
        "content": "<p>Which is essentially the refactor that <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> was trying to make in  Lean 3</p>",
        "id": 314948548,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670608318
    },
    {
        "content": "<p>The two coercions are not defeq <code>Int.ofNat</code> is a constructor of <code>Int</code> and <code>Nat.Cast</code> is defined by induction on <code>Nat</code></p>",
        "id": 314949195,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1670608495
    },
    {
        "content": "<p>That's not true in Lean 3</p>",
        "id": 314951226,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670609096
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.Cast#doc\">docs4#Nat.Cast</a></p>",
        "id": 314951243,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670609103
    },
    {
        "content": "<p>Here they're made defeq: <a href=\"https://github.com/leanprover-community/mathlib/blob/42343ce564ba64b4dc636953c5a1882c95523680/src/data/int/basic.lean#L49\">https://github.com/leanprover-community/mathlib/blob/42343ce564ba64b4dc636953c5a1882c95523680/src/data/int/basic.lean#L49</a></p>",
        "id": 314951298,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670609126
    },
    {
        "content": "<p>I forgot about that.</p>",
        "id": 314957674,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1670611086
    },
    {
        "content": "<p>So the correct thing to do is just make sure <code>Int.ofNat</code> is not a coercion in Lean4</p>",
        "id": 314958245,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1670611253
    },
    {
        "content": "<p>That's not an option though, because it's in core (made into a <code>@[coe]</code> in Std) and I don't see <code>Nat.cast</code> making it to Std without a big refactor</p>",
        "id": 314959118,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670611536
    },
    {
        "content": "<p>That would regress the behavior of lean-without-mathlib way too much</p>",
        "id": 314959242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670611564
    },
    {
        "content": "<p>We can add a simp lemma that sends ofNat to Nat.cast, and maybe set the Nat.cast priority higher?</p>",
        "id": 314959312,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670611586
    },
    {
        "content": "<p>you should just not use theorems about <code>ofNat</code> after <code>Nat.cast</code> is defined</p>",
        "id": 314959335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670611595
    },
    {
        "content": "<p>and that</p>",
        "id": 314959352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670611600
    },
    {
        "content": "<p>I thought the simp lemma already existed</p>",
        "id": 314959376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670611607
    },
    {
        "content": "<p>and it does have higher priority</p>",
        "id": 314959434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670611623
    },
    {
        "content": "<p>(well, it's probably the same priority but it is defined later)</p>",
        "id": 314959483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670611635
    },
    {
        "content": "<p>I suspect the simp lemma causes loops in Lean3, since the RHS unifies with the LHS after matching explicit arguments; but maybe that's not how it works.</p>",
        "id": 314959524,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670611652
    },
    {
        "content": "<p>well the setup work for the casts is mostly new code anyway</p>",
        "id": 314959637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670611686
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Int.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Int.ofNat</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.cast</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"bp\">?</span>\n<span class=\"c1\">-- Try this: simp only [Int.ofNat_eq_cast]</span>\n</code></pre></div>",
        "id": 314960060,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670611832
    },
    {
        "content": "<p>I'd still rather not use the <code>coe</code> notation here. It's very confusing when a <code>rw</code> doesn't work because it's the wrong <code>↑</code>. Both are printed with an <code>↑</code></p>",
        "id": 315350268,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1670846555
    },
    {
        "content": "<p>I think the best course of action would be to remove the <code>@[coe]</code> attribute from <code>Rat.ofInt</code> and <code>Int.ofNat</code> in std4.  It's hard to do anything about core, but std4's mission is to be unopinionated and leave decisions to libraries downstream.  And if std4's decisions conflict with mathlib, then they clearly aren't unopinionated.</p>",
        "id": 315413181,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1670864145
    },
    {
        "content": "<blockquote>\n<p>That's not an option though, because it's in core (made into a @[coe] in Std) and I don't see Nat.cast making it to Std without a big refactor</p>\n</blockquote>\n<p>NB: all that's necessary is to move the <code>NatCast</code>/<code>IntCast</code> classes to std4.  That should be a fairly small change (small enough that I don't see any technical reasons it couldn't be in core even).</p>",
        "id": 315413905,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1670864318
    },
    {
        "content": "<p>Hm, that's a good point. I will see whether we can move NatCast to std and give it an <code>Int.ofNat</code> instance, would that still cause a conflict?</p>",
        "id": 315518499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670912148
    },
    {
        "content": "<p>the existing <code>Coe Nat Int</code> instance in core should be mostly harmless once it is overridden in std</p>",
        "id": 315518691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670912253
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/pull/63\">std4#63</a></p>",
        "id": 315523437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670914919
    },
    {
        "content": "<p>Are you planning on testing this with mathlib4, or would you like someone else to do that?</p>",
        "id": 315527893,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670917170
    },
    {
        "content": "<p>I can do it if no one gets to it in the next few hours</p>",
        "id": 315533248,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670919701
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/972\">mathlib4#972</a> tests that <a href=\"https://github.com/leanprover/std4/pull/63\">std4#63</a> works.</p>",
        "id": 315549253,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670925558
    },
    {
        "content": "<p>I think the port of Data.Int.Order.Basic, <a href=\"https://github.com/leanprover-community/mathlib4/pull/938\">mathlib4#938</a>, could merge that into it and proceed, if someone wants to do that.</p>",
        "id": 315549441,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670925603
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, <a href=\"https://github.com/leanprover/std4/pull/63\">std4#63</a> will need <code>main</code> merged into it before I can properly fix <a href=\"https://github.com/leanprover-community/mathlib4/pull/972\">mathlib4#972</a>. I've merged <code>main</code> into <a href=\"https://github.com/leanprover/std4/pull/63\">std4#63</a> as <a href=\"https://github.com/leanprover/std4/pull/66\">std4#66</a>.</p>",
        "id": 315565460,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670930588
    },
    {
        "content": "<p>I'm inclined to keep the name <code>ofNat</code> in the lemmas for the time being, because these still aren't the correct <code>Nat.cast</code> lemmas, and they certainly aren't about <code>Int.cast</code></p>",
        "id": 315569401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670931810
    }
]