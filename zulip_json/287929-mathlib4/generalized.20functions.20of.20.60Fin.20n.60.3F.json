[
    {
        "content": "<p>This is a little puzzle, worked in Lean 3, but fails in Lean 4</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Vector</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Vector</span>\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">67</span> <span class=\"s2\">\" ::ᵥ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Vector.cons</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mOfFn</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">nil</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">f</span> <span class=\"mi\">0</span>\n    <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"bp\">←</span> <span class=\"n\">mOfFn</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">i.succ</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span><span class=\"bp\">ᵥ</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mOfFn_pure</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LawfulMonad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mOfFn</span> <span class=\"n\">m</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">ofFn</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mOfFn</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">mOfFn_pure</span> <span class=\"n\">m</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">n</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">ofFn</span><span class=\"o\">]</span> <span class=\"c1\">-- issue with `f` here</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Vector</span>\n</code></pre></div>\n<p>error is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">argument</span>\n  <span class=\"n\">f</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.10511</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n</code></pre></div>",
        "id": 322130097,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674068489
    },
    {
        "content": "<p>maybe it wants the <code>fun i =&gt;f i.succ</code> like above?</p>",
        "id": 322130618,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674068602
    },
    {
        "content": "<p>lean 4's message seems very reasonable here. I don't see how this could typecheck, <code>f</code> is not a <code>Fin n</code> function</p>",
        "id": 322131453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674068781
    },
    {
        "content": "<p>I think that's right, but how'd it work in Lean 3?</p>",
        "id": 322131542,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674068805
    },
    {
        "content": "<p>what's the original code?</p>",
        "id": 322131575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674068812
    },
    {
        "content": "<p>Ah, in Lean 3, there's some magic with function parameters? There's a fix often where in Lean 3 the <code>f</code> is elided, and is required in Lean 4</p>",
        "id": 322131858,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674068890
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">m_of_fn_pure</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_lawful_monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">m_of_fn</span> <span class=\"n\">m</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">of_fn</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">m_of_fn</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">m_of_fn_pure</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">of_fn</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 322131921,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674068910
    },
    {
        "content": "<p>I don't think the argument is <code>f</code></p>",
        "id": 322132008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674068943
    },
    {
        "content": "<p>does it not work with nothing / <code>_</code>?</p>",
        "id": 322132089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674068965
    },
    {
        "content": "<p>so it does....</p>",
        "id": 322132278,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674069018
    },
    {
        "content": "<p>Now I've simp'd to a <code>do</code> notation....</p>",
        "id": 322132367,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674069048
    },
    {
        "content": "<p>which is sort of unhelpful...</p>",
        "id": 322132453,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674069078
    },
    {
        "content": "<p>I guess the lean 3 proof is using the simp lemma <code>let a &lt;- pure b; f a</code> ~&gt; <code>f b</code></p>",
        "id": 322132676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674069159
    },
    {
        "content": "<p>which should also exist in lean 4</p>",
        "id": 322132724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674069179
    },
    {
        "content": "<p>what's the lemma called in Lean 3?</p>",
        "id": 322132850,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674069226
    },
    {
        "content": "<p>there's <code>pure_bind</code></p>",
        "id": 322132998,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674069274
    },
    {
        "content": "<p>Through</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mOfFn_pure</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LawfulMonad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mOfFn</span> <span class=\"n\">m</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">ofFn</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mOfFn</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">mOfFn_pure</span> <span class=\"n\">m</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">n</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">ofFn</span><span class=\"o\">,</span> <span class=\"n\">pure_bind</span><span class=\"o\">,</span> <span class=\"n\">bind_pure_comp</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I have the goal to <code>((fun a =&gt; f 0 ::ᵥ a) &lt;$&gt; mOfFn fun i =&gt; pure (f (Fin.succ i))) = pure (f 0 ::ᵥ ofFn fun i =&gt; f (Fin.succ i))</code> which <em>feels</em> close...</p>",
        "id": 322136803,
        "sender_full_name": "Arien Malec",
        "timestamp": 1674070570
    }
]