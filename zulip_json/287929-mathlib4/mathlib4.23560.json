[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/560\">mathlib4#560</a> could use help from someone who knows how <code>decreasing_by</code> works</p>",
        "id": 310716838,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1668726599
    },
    {
        "content": "<p>Haven't looked at the PR but you should just need to provide a proof that the recursive argument is smaller than the input.</p>",
        "id": 310719038,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668727617
    },
    {
        "content": "<p>This is the definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">WellFounded.asymmetric</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">WellFounded</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">⦄,</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"n\">hab</span> <span class=\"n\">hba</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">asymmetric</span> <span class=\"n\">h</span> <span class=\"n\">hba</span> <span class=\"n\">hab</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span>\n<span class=\"n\">decreasing_by</span> <span class=\"o\">{</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>this is not a recursive definition, it is a name resolution issue. (We need to document this on the port wiki page.)</p>",
        "id": 310720417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668728330
    },
    {
        "content": "<p>you need to use an appropriately qualified version of <code>asymmetric</code> here; lean 3 would resolve this without <code>WellFounded.asymmetric</code> in scope but lean 4 will think you are calling yourself here</p>",
        "id": 310720497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668728387
    },
    {
        "content": "<p>Over in mathlib3 we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">well_founded.asymmetric</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">well_founded</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">⦄,</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">hab</span> <span class=\"n\">hba</span><span class=\"o\">,</span> <span class=\"n\">well_founded.asymmetric</span> <span class=\"n\">hba</span> <span class=\"n\">hab</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span> <span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩],</span>\n                     <span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.assumption</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 310721004,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668728633
    },
    {
        "content": "<p>oh, I stand corrected</p>",
        "id": 310721987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668728940
    },
    {
        "content": "<p>I don't even know what mathport does with <code>using_well_founded</code> clauses</p>",
        "id": 310722120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668728981
    },
    {
        "content": "<p>the answer is: nothing at all, it completely forgot those existed</p>",
        "id": 310722864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668729172
    },
    {
        "content": "<p>Something is weird, here, however.</p>",
        "id": 310723412,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668729332
    },
    {
        "content": "<p>You can replace the <code>sorry</code> above with <code>change (0 : ℕ) &lt; 0</code>, so it's not going to be provable as written.</p>",
        "id": 310723480,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668729355
    },
    {
        "content": "<p>the <code>termination_by</code> is incorrect and was not added by mathport</p>",
        "id": 310724309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668729564
    },
    {
        "content": "<p>oof, there is a bug in lean 3 causing <code>using_well_founded</code> clauses not to be exported at all, so we'll need to cut a new release</p>",
        "id": 310724492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668729607
    },
    {
        "content": "<p>The <code>termination_by</code> is my attempt to approximate the <code>rel_tac</code> in mathlib3, not knowing what I am doing!</p>",
        "id": 310725300,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1668729953
    },
    {
        "content": "<p>I've fixed this now, using an auxiliary definition</p>",
        "id": 310728624,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668731782
    }
]