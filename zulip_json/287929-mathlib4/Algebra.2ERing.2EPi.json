[
    {
        "content": "<p>You could just work around that and leave a porting note: you just have to prove a product of groups is a group, a product of rings is a ring etc manually, which isn't hard, it's just repetitive.</p>",
        "id": 317193390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671638784
    },
    {
        "content": "<p>That's true, if no-one claims it before me I might work on that in about 4-5 hours.</p>",
        "id": 317193813,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1671638888
    },
    {
        "content": "<p>Unfortunately I still have uni work to do in the meantime!</p>",
        "id": 317194020,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1671638945
    },
    {
        "content": "<p>This problem already came up when porting <code>Algebra.Group.Pi</code>, and we worked around it there</p>",
        "id": 317198346,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671640267
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/287929-mathlib4/topic/not.20porting.20pi_instance/near/315626876\">this thread</a> and <span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span>' <a href=\"#narrow/stream/287929-mathlib4/topic/not.20porting.20pi_instance/near/316350427\">message here</a></p>",
        "id": 317198476,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671640312
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1151\">mathlib4#1151</a> makes a start on Algebra.Ring.PI</p>",
        "id": 317203982,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671641877
    },
    {
        "content": "<p>A message was moved here from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/Data.2EReal.2ECauSeq\">#mathlib4 &gt; Data.Real.CauSeq</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 317204467,
        "sender_full_name": "Notification Bot",
        "timestamp": 1671642004
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"385895\">@Jon Eugster</span>, who stated in that PR that they were intending to wait for <code>pi_instance</code>, which seems to go against the approach used for Algebra.Group.Pi</p>",
        "id": 317204633,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671642068
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Algebra.2ERing.2EPi/near/317204633\">said</a>:</p>\n<blockquote>\n<p>cc <span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span>, who stated in that PR that they were intending to wait for <code>pi_instance</code>, which seems to go against the approach used for Algebra.Group.Pi</p>\n</blockquote>\n<p>The entire file is just fixing <code>refine_struct</code>, is this tactic now available?</p>\n<p>If <code>Algebra.Ring.Pi</code> is on anybody's priority list, then I'll finish the port of that tonight.</p>",
        "id": 317218675,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1671646274
    },
    {
        "content": "<p><code>refine_struct</code> is also eminently work-round-able if we're just moving fast and ignoring stuff.</p>",
        "id": 317219400,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671646457
    },
    {
        "content": "<p>It's on the priority list since it's now on the path to <code>data.real.basic</code></p>",
        "id": 317220660,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671646895
    },
    {
        "content": "<p>on it <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 317222673,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1671647454
    }
]