[
    {
        "content": "<p><code>Algebra.Field.Defs</code> starts with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The default definition of the coercion `(↑(a : ℚ) : K)` for a division ring `K`</span>\n<span class=\"sd\">is defined as `(a / b : K) = (a : K) * (b : K)⁻¹`.</span>\n<span class=\"sd\">Use `coe` instead of `rat.cast_rec` for better definitional behaviour.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Rat.castRec</span> <span class=\"o\">[</span><span class=\"n\">HasLiftT</span> <span class=\"n\">ℕ</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HasLiftT</span> <span class=\"n\">ℤ</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Inv</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"n\">K</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span>\n</code></pre></div>\n<p>and I don't have a clue what the <code>HasLiftT</code> bits should be now. Is that something that needs to be imported from <a href=\"https://github.com/leanprover-community/lean3port/blob/master/Leanbin/Init/Coe.lean\">lean3port</a> or do we need something else entirely?</p>",
        "id": 313148597,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1669840016
    },
    {
        "content": "<p>No, this is waiting on the <code>lift</code> tactic, which Yury has been porting in <a href=\"https://github.com/leanprover-community/mathlib4/pull/723\">https://github.com/leanprover-community/mathlib4/pull/723</a></p>",
        "id": 313151361,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669840957
    },
    {
        "content": "<p>He says that the code is working there, but I don't know what he's been testing it on as there are no tests in the PR.</p>",
        "id": 313151405,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669840976
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_lift_t\">docs#has_lift_t</a> is nothing to do with <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#lift\">tactic#lift</a>, is it?</p>",
        "id": 313151960,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669841175
    },
    {
        "content": "<p>Are you thinking of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/can_lift\">docs#can_lift</a>?</p>",
        "id": 313151994,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669841185
    },
    {
        "content": "<p>Oh, my mistake.</p>",
        "id": 313152071,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669841215
    },
    {
        "content": "<p>Can we just replace these with <code>CoeT</code> (or <code>Coe</code>)?</p>",
        "id": 313152893,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669841487
    },
    {
        "content": "<p><code>CoeTail</code> seems to be right answer here.</p>",
        "id": 313154161,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669841904
    },
    {
        "content": "<p>Okay, I've almost finished with porting this file.</p>",
        "id": 313155173,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669842229
    },
    {
        "content": "<p>Thanks! Looks like it wasn't too bad once you got past the coercions. One question though: shouldn't <code>ratCastMk</code> be <code>ratCast_mk</code>?</p>",
        "id": 313171144,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1669848022
    },
    {
        "content": "<p>Ah, yes, you're right.</p>",
        "id": 313172035,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669848433
    },
    {
        "content": "<p>Fixed in <a href=\"https://github.com/leanprover-community/mathlib4/pull/808\">mathlib4#808</a>.</p>",
        "id": 313180075,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669852532
    }
]