[
    {
        "content": "<p>I'm getting the message for <a href=\"https://github.com/leanprover-community/mathlib4/pull/1517\">mathlib4#1517</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Encodable.encode_true</span> <span class=\"c\">/-</span><span class=\"cm\"> Left-hand side simplifies from</span>\n<span class=\"cm\">  Encodable.encode true</span>\n<span class=\"cm\">to</span>\n<span class=\"cm\">  Encodable.encode (↑Equiv.boolEquivPUnitSumPUnit true)</span>\n<span class=\"cm\">using</span>\n<span class=\"cm\">  simp only [@Encodable.encode_ofEquiv]</span>\n<span class=\"cm\">Try to change the left-hand side to the simplified term!</span>\n</code></pre></div>\n<p>I assume I want to <code>nolint</code> this one (and the equivalent for <code>false</code>)</p>",
        "id": 321247174,
        "sender_full_name": "Arien Malec",
        "timestamp": 1673640282
    },
    {
        "content": "<p>No, because the linter has a valid complaint.</p>",
        "id": 321248640,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673640792
    },
    {
        "content": "<p>In this case, please copy the lemma, and call it <code>encode_true'</code>. Mark that copy as <code>@[simp]</code> and remove <code>@[simp]</code> from the original.<br>\nIn the copy, turn the LHS into what the linter suggests.</p>",
        "id": 321248726,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673640833
    },
    {
        "content": "<p>Ooh, wait. These are <code>rfl</code>-lemmas. So the <code>dsimp</code> test applies.</p>",
        "id": 321248861,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673640876
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=boolEquivPUnitSumPUnit#doc\">docs4#boolEquivPUnitSumPUnit</a></p>",
        "id": 321249182,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673641011
    },
    {
        "content": "<p>Huh? The docs seem broken.</p>",
        "id": 321249254,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673641036
    },
    {
        "content": "<p>Anyway, it looks like maybe that equiv should have simp lemmas.</p>",
        "id": 321249320,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673641061
    },
    {
        "content": "<p>I guess my issue here is thinking that <code>↑Equiv.boolEquivPUnitSumPUnit true</code> is simpler than <code>true</code></p>",
        "id": 321249638,
        "sender_full_name": "Arien Malec",
        "timestamp": 1673641186
    },
    {
        "content": "<p>Well, it can become simpler.</p>",
        "id": 321249782,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673641240
    },
    {
        "content": "<p>There should be a simp-lemma for that expression.</p>",
        "id": 321249819,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673641254
    },
    {
        "content": "<p>Where is that equiv defined?</p>",
        "id": 321249850,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673641264
    },
    {
        "content": "<p>mathlib or core?</p>",
        "id": 321249861,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673641267
    },
    {
        "content": "<p><code>Mathlib.Logic.Equiv.Basic</code></p>\n<p>But then again, if I try what <code>simpNF</code> suggests, I get:</p>\n<p><code>invalid coercion notation, expected type is not known</code></p>",
        "id": 321250398,
        "sender_full_name": "Arien Malec",
        "timestamp": 1673641478
    },
    {
        "content": "<p>Can you write <code>attribute [simps] Equiv.boolEquivPUnitSumPUnit</code> just above that <code>encode_true</code> lemma?</p>",
        "id": 321250928,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673641704
    },
    {
        "content": "<p>Nope -- declaration is in an imported module.</p>",
        "id": 321251124,
        "sender_full_name": "Arien Malec",
        "timestamp": 1673641796
    },
    {
        "content": "<p>Ooof, Lean4 is so strict about these things <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 321260426,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673645253
    },
    {
        "content": "<p>(<a href=\"https://github.com/leanprover-community/mathlib4/pull/1517\">mathlib4#1517</a> since the link above is broken)</p>",
        "id": 321267025,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673647756
    },
    {
        "content": "<p><code>Encodable.encode_ofEquiv</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/encodable.encode_of_equiv\">docs#encodable.encode_of_equiv</a>) feels like a bad simp lemma to me</p>",
        "id": 321267267,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673647853
    },
    {
        "content": "<p>Unfolding instances is a pretty weird things to do</p>",
        "id": 321267285,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673647860
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/simpNF.20definition.20of.20.22simplified.22.3F/near/321267025\">said</a>:</p>\n<blockquote>\n<p>(<a href=\"https://github.com/leanprover-community/mathlib4/pull/1517\">mathlib4#1517</a> since the link above is broken)</p>\n</blockquote>\n<p>Oops, fixed.</p>",
        "id": 321273486,
        "sender_full_name": "Arien Malec",
        "timestamp": 1673650553
    },
    {
        "content": "<p>Removed, should put PR back to green.</p>",
        "id": 321282702,
        "sender_full_name": "Arien Malec",
        "timestamp": 1673655659
    },
    {
        "content": "<p>Sadly we won't spell <code>true</code> as <code>inr</code> (or the reverse?).</p>",
        "id": 321282831,
        "sender_full_name": "Arien Malec",
        "timestamp": 1673655758
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/simpNF.20definition.20of.20.22simplified.22.3F/near/321267285\">said</a>:</p>\n<blockquote>\n<p>Unfolding instances is a pretty weird things to do</p>\n</blockquote>\n<p>Thinking again, can this be resolved by putting a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=noindex#doc\">docs4#noindex</a> around the instance argument after the @? Would that prevent unification and force syntactic matching?</p>",
        "id": 321319447,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673687433
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/simpNF.20definition.20of.20.22simplified.22.3F/near/321319447\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/simpNF.20definition.20of.20.22simplified.22.3F/near/321267285\">said</a>:</p>\n<blockquote>\n<p>Unfolding instances is a pretty weird things to do</p>\n</blockquote>\n<p>Thinking again, can this be resolved by putting a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=noindex#doc\">docs4#noindex</a> around the instance argument after the @? Would that prevent unification and force syntactic matching?</p>\n</blockquote>\n<p>It's the opposite - <code>noindex</code> will make it ignore the syntactic matching by replacing it with a metavariable, and then use unification to ensure that the instance applies. (That is, you can use <code>noindex</code> to make instances that match up to semireducible defeq, rather than simply reducible/instance defeq.)</p>",
        "id": 321322183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673688710
    },
    {
        "content": "<p>Is there any way to make this lemma only match syntactically and not via unification? I realize this is sort of a special case and that unification is the right thing to do for typeclass arguments most of the time</p>",
        "id": 321330803,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673692671
    }
]