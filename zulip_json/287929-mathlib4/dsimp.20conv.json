[
    {
        "content": "<p>So I've looked a bit into the conv-version of <code>dsimp</code> and I have run into two issues: First I don't know what<br>\nthe syntax argument of <code>mkSimpContext</code> is supposed to do (so in the code I first set it to <code>Lean.Syntax.missing</code>).<br>\nAlso I messed up the elaboration, so that it changes the usual dsimp and not the <code>conv</code> <code>dsimp</code> and I have no idea how to fix that.</p>\n<p>The code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Core</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Lean.Parser.Tactic.Conv</span>\n<span class=\"kn\">open</span> <span class=\"n\">Elab.Tactic</span> <span class=\"n\">Elab.Tactic.Conv</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> N -/</span> <span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">dsimp</span><span class=\"o\">)</span> <span class=\"s2\">\"dsimp\"</span> <span class=\"o\">(</span><span class=\"bp\">&amp;</span><span class=\"s2\">\" only\"</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">dsimpArgs</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">conv</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">evalDSimp</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">{</span> <span class=\"n\">ctx</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"o\">}</span> <span class=\"bp\">←</span> <span class=\"n\">mkSimpContext</span> <span class=\"n\">stx</span> <span class=\"o\">(</span><span class=\"n\">eraseLocal</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">kind</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">dsimp</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">lhs</span> <span class=\"bp\">←</span> <span class=\"n\">getLhs</span>\n  <span class=\"k\">let</span> <span class=\"n\">result</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Meta.dsimp</span> <span class=\"n\">lhs</span> <span class=\"n\">ctx</span>\n  <span class=\"n\">changeLhs</span> <span class=\"n\">result</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"dsimp\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">evalDSimp</span> <span class=\"n\">Lean.Syntax.missing</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">lhs</span>\n    <span class=\"n\">dsimp</span>\n</code></pre></div>",
        "id": 299075367,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1663291308
    },
    {
        "content": "<p>If I change it to <code>elab \"dsimp\" : conv =&gt; ..</code>, then the error becomes \"unsupported syntax category 'conv'\" and I have no idea what that refers to</p>",
        "id": 299075750,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1663291711
    },
    {
        "content": "<p>So there's quite a few things going on here.</p>",
        "id": 299104765,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1663312988
    },
    {
        "content": "<p>Let me start at the end.</p>",
        "id": 299104795,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1663313007
    },
    {
        "content": "<blockquote>\n<p><code>elab \"dsimp\" : conv =&gt; ..</code></p>\n</blockquote>\n<p>Yes, it would be nice if we had this..  But it is not implemented in core.  (As you've noticed we only have it for <code>tactic</code> but not for <code>conv</code>.)</p>",
        "id": 299104988,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1663313123
    },
    {
        "content": "<p>The error message means just that: the <code>elab</code> command does not support <code>conv</code>.</p>",
        "id": 299105021,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1663313147
    },
    {
        "content": "<p>Even if <code>elab ... : conv</code> worked it does something different than what you think it does.  The <code>elab</code> command declares a new syntax parser (in this case <code>dsimp</code>) and then immediately defines an elaborator for this syntax.  It would conflict with the syntax defined at the beginning of the file (and produce ambiguous parse trees with choice nodes).</p>",
        "id": 299105426,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1663313363
    },
    {
        "content": "<p>If you looked at how the <code>simp</code> conv tactic is implemented in core, it looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[builtinTactic Lean.Parser.Tactic.Conv.simp]</span> <span class=\"kd\">def</span> <span class=\"n\">evalSimp</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n</code></pre></div>\n<p>The <code>builtinTactic</code> attribute is what registers the <code>evalSimp</code> attribute as an elaborator for the <code>simp</code> conv-tactic in core.  The reason that this is called <code>builtinTactic</code> is because it uses <code>builtin_initialize</code> to add the tactic elaborator when loading the C++ code.</p>",
        "id": 299106136,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1663313688
    },
    {
        "content": "<p>In mathlib, we need to use <code>@[tactic Lean.Parser.Tactic.Conv.simp]</code> instead.</p>",
        "id": 299106176,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1663313707
    },
    {
        "content": "<blockquote>\n<p><code>mkSimpContext</code></p>\n</blockquote>\n<p>The <code>mkSimpContext</code> function is super evil.  Basically it assumes that the syntax argument is defined in exactly the same way as the builtin simp tactic, just with a different name.  If you want to use it, you need to define <code>dsimp</code> as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">dsimp</span><span class=\"o\">)</span> <span class=\"s2\">\"dsimp \"</span> <span class=\"o\">(</span><span class=\"n\">config</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">discharger</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"bp\">&amp;</span><span class=\"s2\">\"only \"</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"s2\">\"[\"</span> <span class=\"n\">dsimpArg</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"s2\">\"]\"</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">conv</span>\n</code></pre></div>\n<p>Basically it looks at <code>stx[1]</code> and hopes that it is a <code>(config)?</code>.  If you leave out the <code>(config)?</code> in the syntax definition, <code>mkSimpContext</code> will fail in exciting ways.</p>",
        "id": 299107236,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1663314181
    },
    {
        "content": "<p>(For consistency, I would suggest to use the syntax definition above ^^ and use <code>mkSimpContext</code>.)</p>",
        "id": 299107291,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1663314206
    },
    {
        "content": "<p>Thank you so much Gabriel, it now works <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span> <br>\nI saw the <code>builtinTactic</code> attribute, but I did not know that there is a version for non-builtin tactics. Is this documented anywhere and if not where should it be? maybe in <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span>'s book?<br>\nThe reason I changed the syntax was only that I had funny import errors in the beginning and I thought leaving out some arguments might make it easier to get going.</p>",
        "id": 299205422,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1663348104
    },
    {
        "content": "<p>do we have any useful tests for <code>dsimp</code> in mathlib3? I could not find anything in the <code>test/conv</code> folder and the one above does not really test more than that the command does not fail, because <code>conv</code> can finish the goal on its own</p>",
        "id": 299210008,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1663349731
    },
    {
        "content": "<p>nevertheless the info view shows that it works as it should</p>",
        "id": 299210152,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1663349781
    },
    {
        "content": "<p>Feel free to invent some tests.  I would probably set up a goal like <code>a * 1 + 0</code> and then two separate tests <code>dsimp</code> and <code>dsimp only [Nat.add_zero]</code>.</p>",
        "id": 299210499,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1663349923
    },
    {
        "content": "<p>I've managed to find one test that actually fails if the <code>dsimp</code> is omitted.</p>",
        "id": 299217153,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1663352277
    }
]