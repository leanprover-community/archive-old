[
    {
        "content": "<p>In <code>Logic.Encodable.Lattice</code>,  </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[elab_as_elim]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Union_decode₂_cases</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H0</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">decode₂</span> <span class=\"n\">β</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>gives me the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unexpected</span> <span class=\"n\">eliminator</span> <span class=\"n\">resulting</span> <span class=\"n\">type</span>\n  <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">union</span><span class=\"bp\">ᵢ</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">union</span><span class=\"bp\">ᵢ</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 321316217,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1673685560
    },
    {
        "content": "<p>Is this an issue with <code>elab_as_elim</code>? Perhaps a feature?</p>",
        "id": 321316343,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1673685608
    },
    {
        "content": "<p>I think in Lean 3, <code>elab_as_elim</code> was often just ignored</p>",
        "id": 321316381,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673685652
    },
    {
        "content": "<p>Is it safe to just comment it out or delete it then?</p>",
        "id": 321316409,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1673685669
    },
    {
        "content": "<p>Commenting out with a porting note seems fine</p>",
        "id": 321316465,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673685703
    },
    {
        "content": "<p>But maybe this is a feature that Lean could support</p>",
        "id": 321316535,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673685730
    }
]