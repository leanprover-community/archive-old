[
    {
        "content": "<p>In <code>Algebra.GCDMonoid.Basic</code>, there is a theorem</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">lcm_eq_zero_iff</span> <span class=\"o\">[</span><span class=\"n\">GCDMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lcm</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>In <code>Algebra.GCDMonoid.Multiset</code>, there is a generalization of that theorem</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">lcm_eq_zero_iff</span> <span class=\"o\">[</span><span class=\"n\">Nontrivial</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s.lcm</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>whose proof uses the aforementioned <code>lcm_eq_zero_iff</code>.</p>",
        "id": 321303501,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1673674828
    },
    {
        "content": "<p>My issue is that when I try to <code>simp</code> using the first <code>lcm_eq_zero_iff</code> in the proof of the second, Lean thinks I'm referring to the second one (which I'm trying to prove!)</p>",
        "id": 321303599,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1673674937
    },
    {
        "content": "<p>And I can't figure out how to make Lean refer to the correct one</p>",
        "id": 321303833,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1673675225
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"570929\">@Maxwell Thum</span> Either add <code>nonrec</code> before the <code>theorem</code> keyword, or use <code>_root_.lcm_eq_zero_iff</code>.</p>",
        "id": 321303905,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673675295
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Similar.20theorems.20in.20different.20files.20with.20same.20name/near/321303905\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"570929\">Maxwell Thum</span> Either add <code>nonrec</code> before the <code>theorem</code> keyword, or use <code>_root_.lcm_eq_zero_iff</code>.</p>\n</blockquote>\n<p>I think that works; thanks!</p>",
        "id": 321303938,
        "sender_full_name": "Maxwell Thum",
        "timestamp": 1673675346
    }
]