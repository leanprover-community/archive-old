[
    {
        "content": "<p>I was attempting to port <code>Data.Fin.VecNotation.lean</code> and I noticed that many Fin definitions were marked noncomputable. I traced it back to <a href=\"https://github.com/leanprover-community/mathlib4/blob/d1e6d8643531bd36f7c7bb612413decb7cb07ede/Mathlib/Data/Fin/Basic.lean#L1663\"><code>Fin.induction</code></a> which was using <code>induction'</code> which is not suported by the compiler yet. If you change the definition to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">induction</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">castSucc</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">i.succ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">Fin.mk_zero</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">hs</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">lt_of_succ_lt_succ</span> <span class=\"n\">hi</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">Fin.induction</span> <span class=\"n\">h0</span> <span class=\"n\">hs</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">lt_of_succ_lt</span> <span class=\"n\">hi</span><span class=\"o\">⟩)</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">fin.induction</span> <span class=\"n\">Fin.induction</span>\n</code></pre></div>\n<p>it works computably!<br>\nBecause of this, a couple of previously noncomputable definitions that relied on <code>Fin.induction</code> can be made computable. I guess my questions are is there a reason this was left uncomputable, and if not, should I PR this change along with removing noncomputable tags where possible?</p>",
        "id": 321962684,
        "sender_full_name": "zbatt",
        "timestamp": 1674008237
    },
    {
        "content": "<p>I don't think we want to optimize this yet, as it depends on the work on the new compiler. A change in the definition could cause breakage in mathlib due to different defeqs</p>",
        "id": 321990189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674028031
    },
    {
        "content": "<p>One way to get the best of both worlds would be to use your definition as <code>Fin.inductionImpl</code> and then use <code>@[implemented_by Fin.inductionImpl]</code> on <code>Fin.induction</code>, without changing the definition</p>",
        "id": 321990362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674028110
    },
    {
        "content": "<p>but ultimately we want the original definition to Just Work</p>",
        "id": 321990384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674028122
    },
    {
        "content": "<p>I'm surprised this is called induction when it's doing recursion (ie constructing data). Is it ever used to construct data in mathlib? Probably.</p>",
        "id": 322000970,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674032468
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Computable.20Fin.20Induction/near/321990362\">said</a>:</p>\n<blockquote>\n<p>One way to get the best of both worlds would be to use your definition as <code>Fin.inductionImpl</code> and then use <code>@[implemented_by Fin.inductionImpl]</code> on <code>Fin.induction</code>, without changing the definition</p>\n</blockquote>\n<p>Sounds good! I'll implement this with a porting note and PR it a bit later today</p>",
        "id": 322065603,
        "sender_full_name": "zbatt",
        "timestamp": 1674052068
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 322071501,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674053551
    }
]