[
    {
        "content": "<p>ENat is difficult to port right now because it's definition is being unfolded. I think some backported fix is needed. I think the best thing here is to just get rid of it and use <code>WithTop Nat</code> directly rather than making a structure. The only reason we didn't do that initially was because Mario wanted to use <code>roption</code> (now <code>Part</code>), but we don't do that anymore. Maybe <code>WithTop</code> didn't even exist back then, I'm not sure.</p>",
        "id": 321135256,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673608815
    },
    {
        "content": "<p>Yeah, sounds reasonable.</p>",
        "id": 321136264,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673609151
    },
    {
        "content": "<p>Should <code>WithTop Nat</code> be a one field structure though? An inductive type defined the same way as <code>Option</code>? Should there be a backport of any of this?</p>",
        "id": 321136956,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673609379
    },
    {
        "content": "<p>These fixes are hard to backport because we have more defeqs in Lean 4.</p>",
        "id": 321137242,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673609472
    },
    {
        "content": "<p>It would be nice if we had an <code>@[almost_irreducible]</code> attribute that makes definitions irreducible, but paired with a <code>(almost_irreducible.unfold (x : X) : Y)</code> function that unifies <code>X</code> with <code>Y</code> unfolding <code>almost_irreducible</code>s that might appear within <code>X</code> and <code>Y</code></p>",
        "id": 321139471,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673610089
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>, can you give an example of where it ends up unfolded?</p>",
        "id": 321139751,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673610172
    },
    {
        "content": "<p>A coercion ends up using <code>WithTop.some</code> even though the type ascribed is ENat.</p>",
        "id": 321139904,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673610218
    },
    {
        "content": "<p>Can you link to the line where that happens?</p>",
        "id": 321139970,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673610238
    },
    {
        "content": "<p>But why do we care about <code>ENat</code> being a definition? We use it in exactly the same way as <code>WithTop Nat</code>, right?</p>",
        "id": 321140407,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673610363
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/a19f51dac5dfa88cdae64c9f13d80ed5bea8feb7/Mathlib/Data/ENat/Basic.lean#L101\">line 101</a> Sorry, had to take some time to find it</p>",
        "id": 321140466,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673610373
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/enat/near/321140407\">said</a>:</p>\n<blockquote>\n<p>But why do we care about <code>ENat</code> being a definition? We use it in exactly the same way as <code>WithTop Nat</code>, right?</p>\n</blockquote>\n<p>Exactly, I propose just getting rid of it and using <code>WithTop Nat</code></p>",
        "id": 321140573,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673610405
    },
    {
        "content": "<p>I'm not opposed to that, but I want to work out what causes the unfolding</p>",
        "id": 321140654,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673610432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span>, when I run <code>lake exe cache get</code> on this PR (<a href=\"https://github.com/leanprover-community/mathlib4/pull/1514\">https://github.com/leanprover-community/mathlib4/pull/1514</a>), I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">uncaught</span> <span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Enat</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span>\n</code></pre></div>",
        "id": 321140736,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673610461
    },
    {
        "content": "<p>Sorry, I see the problem. It uses the theorem <code>WithTop.recTopCoe</code></p>",
        "id": 321140758,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673610468
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/enat/near/321140736\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span>, when I run <code>lake exe cache get</code> on this PR (<a href=\"https://github.com/leanprover-community/mathlib4/pull/1514\">https://github.com/leanprover-community/mathlib4/pull/1514</a>), I get</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">uncaught</span> <span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Enat</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I just fixed it, it's to do with <code>Enat</code> vs <code>ENat</code> in the file name</p>",
        "id": 321140940,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673610519
    },
    {
        "content": "<p>Ah, so the unwanted unfolding didn't happen in a statement, but in a proof where you asked it to be unfolded explicitly</p>",
        "id": 321141178,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673610600
    },
    {
        "content": "<p>That sounds like working as intended to me</p>",
        "id": 321141236,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673610605
    },
    {
        "content": "<p>I made a backporting PR for this <a href=\"https://github.com/leanprover-community/mathlib/pull/18173\">https://github.com/leanprover-community/mathlib/pull/18173</a></p>",
        "id": 321368580,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1673707917
    },
    {
        "content": "<p>Won't be missing this myself <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 322400536,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1674171064
    }
]