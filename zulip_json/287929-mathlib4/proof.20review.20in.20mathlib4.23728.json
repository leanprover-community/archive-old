[
    {
        "content": "<p>I'm down to two issues in <a href=\"https://github.com/leanprover-community/mathlib4/pull/728\">mathlib4#728</a> that are stumping me.</p>\n<p>first issue in <code>max_lt_max</code> -- the <code>simp</code>s that worked in Lean 3 don't work post-port, and I'm sure this is a trivial fix, but I'm not seeing it...</p>\n<p>Second two issues are weirder -- the <code>mathlib</code> proof has a typing issue post port -- I've played around with parentheses, etc to see if I can ; I have a tactic proof that works when the theorem is named <code>Max.left_comm'</code> but if I changed the name to  <code>Max.left_comm</code> with the same proof I get an \"issues with structural recursion\" error -- it's possible here that Lean is getting confused between the version of <code>left_comm</code> that's defined in <code>Init.Logic</code> but I don't know how to provide a scoped name here for a top level opened term....</p>",
        "id": 312257017,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669410005
    },
    {
        "content": "<p>Not sure why <code>simp</code> fails, but this works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">max_lt_max</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">max</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">max_lt_iff</span><span class=\"o\">,</span> <span class=\"n\">lt_max_iff</span><span class=\"o\">,</span> <span class=\"n\">lt_max_iff</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">Or.inl</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">Or.inr</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 312258747,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1669411142
    },
    {
        "content": "<p>Or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">max_lt_max</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">max</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"n\">max_lt</span> <span class=\"o\">(</span><span class=\"n\">lt_max_of_lt_left</span> <span class=\"n\">h₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lt_max_of_lt_right</span> <span class=\"n\">h₂</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 312258929,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1669411287
    },
    {
        "content": "<p>And</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Max.left_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">max</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">_root_.left_comm</span> <span class=\"n\">max</span> <span class=\"n\">max_comm</span> <span class=\"n\">max_assoc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Max.right_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"n\">_root_.right_comm</span> <span class=\"n\">max</span> <span class=\"n\">max_comm</span> <span class=\"n\">max_assoc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n</code></pre></div>",
        "id": 312259046,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1669411342
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"542196\">@Arien Malec</span> I pushed those changes ^</p>",
        "id": 312259132,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1669411423
    },
    {
        "content": "<p>Perfect!</p>",
        "id": 312259240,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669411478
    },
    {
        "content": "<p>Maybe someone wants to figure out why <code>simp</code> no longer works, but at least you're unblocked now</p>",
        "id": 312259327,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1669411558
    },
    {
        "content": "<p>I think these things are important to note -- someone should add a porting note</p>",
        "id": 312361063,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669475831
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> did.</p>",
        "id": 312361685,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669476098
    },
    {
        "content": "<p>His constructive solution is prettier than the original <code>simp</code>, but the particular failure mode of <code>simp</code> here is odd. Why does repeating <code>lt_max_iff</code> work here?</p>",
        "id": 312367255,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669478485
    },
    {
        "content": "<p>I haven't verified, but my hypothesis is that the different lemmas were applied in a different order</p>",
        "id": 312373254,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1669481523
    },
    {
        "content": "<p>Which would be why controlling the order by using rw instead of simp helped</p>",
        "id": 312373401,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1669481624
    },
    {
        "content": "<p>Oh, missed that you did <code>rw</code>!</p>",
        "id": 312373541,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669481677
    },
    {
        "content": "<p>You can see what order the simp lemmas are being applied with <code>set_option trace.Meta.Tactic.simp.rewrite true</code>.</p>",
        "id": 312383030,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669487166
    }
]