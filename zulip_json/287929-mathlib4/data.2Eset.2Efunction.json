[
    {
        "content": "<p>The PR for Data.Set.Function is almost ready, but I have to stop working on it for several hours, in case anyone wants to have a go at finishing it up: <a href=\"https://github.com/leanprover-community/mathlib4/pull/1035\">mathlib4#1035</a></p>",
        "id": 315930811,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1671058816
    },
    {
        "content": "<p>There are just 3 declarations that need their proofs fixed and I think a few long lines and then it will be done.</p>",
        "id": 315930865,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1671058842
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span>, does your reaction mean youâ€™re working on it? Iâ€™ll give it a go rn if youâ€™re not.</p>",
        "id": 315935243,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671061056
    },
    {
        "content": "<p>yes, I am having a look at it now. I don't mind if you look at it as well</p>",
        "id": 315935602,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1671061235
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"387244\">@YaÃ«l Dillies</span> who has some open PRs against the mathlib3 file</p>",
        "id": 315935677,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671061282
    },
    {
        "content": "<p>Ok! I saw your reaction after I did the easy bit: fixing the formatting. We just delete mathport warnings (which are above declarations that are good to go), right?</p>",
        "id": 315935905,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671061428
    },
    {
        "content": "<p>(Pushed the format-fixing commit assuming so. If not Iâ€™ll undo it.)</p>",
        "id": 315936218,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671061600
    },
    {
        "content": "<p>partial progress for the first sorry:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">restrict_extend_range</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Î±</span> <span class=\"bp\">â†’</span> <span class=\"n\">Î²</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Î±</span> <span class=\"bp\">â†’</span> <span class=\"n\">Î³</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g'</span> <span class=\"o\">:</span> <span class=\"n\">Î²</span> <span class=\"bp\">â†’</span> <span class=\"n\">Î³</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">restrict</span> <span class=\"o\">(</span><span class=\"n\">extend</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">g'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">Î»</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x.coe_prop.some</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">restrict_dite</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>works in mathlib3</p>",
        "id": 315937268,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1671062231
    },
    {
        "content": "<p>and also in mathlib4 <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 315937350,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1671062282
    },
    {
        "content": "<p>sorries have been fixed - <span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span> I leave the formatting things to you</p>",
        "id": 315937556,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1671062383
    },
    {
        "content": "<p>Maybe we should consider a terminal <code>convert</code> as evil</p>",
        "id": 315937778,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1671062467
    },
    {
        "content": "<p>Nice! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> my formatting commit apparently got in right before your commits, so with your merge I think we should be good!</p>",
        "id": 315937967,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671062569
    },
    {
        "content": "<p>I missed two errors, but now it the branch builds without errors on my machine and also the linter is happy</p>",
        "id": 315940684,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1671064289
    },
    {
        "content": "<p>Great! (I was finding and fixing the long lines manuallyâ€”I've been struggling with some error building mathlib4 for the past hour or so, and couldn't access <code>#lint</code> ðŸ˜…)</p>",
        "id": 315940887,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671064435
    },
    {
        "content": "<blockquote>\n<p>Maybe we should consider a terminal convert as evil</p>\n</blockquote>\n<p>I find non-terminal converts to be much more evil.</p>",
        "id": 315940971,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1671064475
    },
    {
        "content": "<p>but these are actually useful and not a hack</p>",
        "id": 315941016,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1671064514
    },
    {
        "content": "<p>How are terminal converts not useful?  They allow you to plug in a proof \"up to subsingletons\".</p>",
        "id": 315942276,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1671065332
    },
    {
        "content": "<p>On the other hand non-terminal converts are pretty fragile in my experience.  If you change the reducibility of a definition, or add subsingleton instances, the tactic suddenly returns a whole different set of goals.  And these goals might not even be provable anymore.  Whenever I see a convert break during a refactoring, I try to remove it.</p>",
        "id": 315942533,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1671065492
    },
    {
        "content": "<p>I've used terminal <code>convert</code> once or twice in mathlib3 and the reason was that <code>exact</code> had really weird errors, but I was convinced that it should be just <code>exact</code> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span><br>\nI agree that <code>convert</code> is very fragile, but sometimes it is very close to how the informal proof goes and it is more tedious to work around with rather artificial <code>have</code>s.</p>",
        "id": 315943020,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1671065788
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span>, <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span>, I fixed quite a few names in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1035/commits/8fc6e42ae6ea6e1283c81b05e7f7c9420751d0c8\">https://github.com/leanprover-community/mathlib4/pull/1035/commits/8fc6e42ae6ea6e1283c81b05e7f7c9420751d0c8</a>, for future reference.</p>\n<p>I'll merge shortly.</p>",
        "id": 315959232,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671079513
    },
    {
        "content": "<p>Thanks. But I'm confused why, for example, <code>Monotone.rangeFactorization</code> has that spelling. It's a theorem, so it should be snake_case, right?</p>",
        "id": 315959750,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1671079938
    },
    {
        "content": "<p>Oh wait, I get it. It's a lemma about <code>rangeFactorization</code>. Sorry, that's why I missed this and <code>codRestrict</code>. I'll check for this better next time.</p>",
        "id": 315959896,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1671080043
    },
    {
        "content": "<p>The <code>mapsTo</code> was just one that slipped by.</p>",
        "id": 315959914,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1671080066
    },
    {
        "content": "<blockquote>\n<p>On the other hand non-terminal converts are pretty fragile in my experience.  If you change the reducibility of a definition, or add subsingleton instances, the tactic suddenly returns a whole different set of goals.  And these goals might not even be provable anymore.  Whenever I see a convert break during a refactoring, I try to remove it.</p>\n</blockquote>\n<p>only 7 hours later I have three broken <code>convert</code>s..</p>",
        "id": 315980408,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1671092679
    },
    {
        "content": "<p><code>convert using 1</code> is a bit less fragile</p>",
        "id": 315982176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671093381
    }
]