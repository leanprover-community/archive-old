[
    {
        "content": "<p>time and time again, when I've ported, unification has felt far weaker that in lean3, making many things like <code>congr_arg  _</code> needing to be replaced with <code>congrArg (· * r)</code>. I guess some part of this is to do with the heterogeneous operations by default, but I fear this is gonna hurt more and more the deeper into porting we go :(</p>",
        "id": 322530501,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674226037
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> I agree with the \"general impression\", but do you have time to make a mwe?  I think we should be reporting these things in the hope of getting specific changes to the algorithm.  The devs have done this before.</p>",
        "id": 322551406,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674231098
    },
    {
        "content": "<p>here's one simple one, no imports needed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">congrArg</span> <span class=\"n\">_</span> <span class=\"c1\">--fails, works with (· * c)</span>\n</code></pre></div>",
        "id": 322588077,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674239439
    },
    {
        "content": "<p>Is the issue that we need to fix the unification algorithm, or is it that we need to provide Lean with unification hints now? I was under the impression that the latter is something it might be helpful to start doing again, even though we banned it in mathlib 3.</p>",
        "id": 322588564,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674239624
    },
    {
        "content": "<p>what's a unification hint?</p>",
        "id": 322589197,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674239836
    },
    {
        "content": "<p>I've never come across a situation where a unification hint looks like the best most robust solution, compared to things like changing the unification algorithm itself</p>",
        "id": 322589460,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674239920
    },
    {
        "content": "<p>This seems like a MWE example of unification hints:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unif_hint</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">x</span> <span class=\"bp\">≟</span> <span class=\"mi\">5</span> <span class=\"bp\">⊢</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">≟</span> <span class=\"mi\">10</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">even_double</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span> <span class=\"n\">even_double</span>\n</code></pre></div>\n<p>except it doesn't work</p>",
        "id": 322590611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674240321
    },
    {
        "content": "<p>What if you flip the equality?</p>",
        "id": 322592721,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674241000
    },
    {
        "content": "<p>no dice</p>",
        "id": 322592872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674241049
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> are you going to open a Lean 4 issue explaining the regression? This worked fine in Lean 3.</p>",
        "id": 322605521,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674245258
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2051\">lean4#2051</a></p>",
        "id": 322615308,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1674248645
    }
]