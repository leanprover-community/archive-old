[
    {
        "content": "<p>I am currently looking at some category theory files and it looks at though <code>Functor.map</code> is being interpreted as the <code>Functor.map</code> from <code>Init.Prelude</code>. Is there a work around for this? <code>CategoryTheory.Functor.map</code> isn't recognized.</p>",
        "id": 313705606,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1670082960
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Functor.Basic</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Functor.map</span> <span class=\"c1\">-- Functor.map : (?m.5 → ?m.6) → ?m.3 ?m.5 → ?m.3 ?m.6</span>\n<span class=\"k\">#check</span> <span class=\"n\">CategoryTheory.Functor.map</span> <span class=\"c1\">-- ERROR: unknown constant 'CategoryTheory.Functor.map'</span>\n</code></pre></div>",
        "id": 313709026,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1670084759
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Functor.map#doc\">docs4#CategoryTheory.Functor.map</a> exist?</p>",
        "id": 313709447,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670084995
    },
    {
        "content": "<p>I think it should refer to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Prefunctor.map#doc\">docs4#Prefunctor.map</a> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/prefunctor.map\">docs#prefunctor.map</a>)</p>",
        "id": 313709608,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670085033
    },
    {
        "content": "<p>This is the same problem as <a href=\"#narrow/stream/287929-mathlib4/topic/Porting.20Algebra.2EGroup.2EExt/near/313673480\">this thread</a></p>",
        "id": 313709663,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670085069
    },
    {
        "content": "<p>Ok, so if I want something like <code>@Functor.map _ _ _ _ F X Y</code>, I would need to write <code>@Prefunctor.map _ _ _ _ F.toPrefunctor X Y</code>? That's unfortunate if true.</p>",
        "id": 313711069,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1670085844
    },
    {
        "content": "<p>Looks like this is hardly a solution. :(<br>\n<a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Functor.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Faithful</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"c1\">-- Want: map_injective : ∀ {X Y : C}, Function.Injective (@Functor.map C _ D _ F X Y) := by aesop_cat</span>\n  <span class=\"n\">map_injective</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">},</span> <span class=\"n\">Function.Injective</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Prefunctor.map</span> <span class=\"n\">C</span> <span class=\"n\">_</span> <span class=\"n\">D</span> <span class=\"n\">_</span> <span class=\"n\">F.toPrefunctor</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop_cat</span>\n\n<span class=\"c1\">-- Want: map_injective (F : C ⥤ D) [Faithful F] : Function.Injective &lt;| (@Functor.map C _ D _ F X Y) :=</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">map_injective</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Faithful</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Prefunctor.map</span> <span class=\"n\">C</span> <span class=\"n\">_</span> <span class=\"n\">D</span> <span class=\"n\">_</span> <span class=\"n\">F.toPrefunctor</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- Type Error: F has type  C ⥤ D</span>\n  <span class=\"c1\">-- Expected type: Prefunctor.map ?m.501.toPrefunctor ?m.505 = Prefunctor.map ?m.501.toPrefunctor ?m.506 : Prop</span>\n  <span class=\"n\">Faithful.map_injective</span> <span class=\"n\">F</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">CategoryTheory</span>\n</code></pre></div>\n<p>I'm certainly not familiar enough with lean4 to know what to do instead.</p>",
        "id": 313712433,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1670086792
    },
    {
        "content": "<p>That is a bit unfortunate, and I'm not seeing an easy workaround. In this particular case, it's not going to come up very often (we just don't talk about <code>Functor.map</code> as a function that often). Nearly always we have <code>F.map f</code>, which of course works fine.</p>",
        "id": 313712691,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670086919
    },
    {
        "content": "<p>You can leave porting notes at both <code>map_injective</code>s, but don't let this hold up a port.</p>",
        "id": 313712756,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670086938
    },
    {
        "content": "<p>Does something like <code>(F.map : (X \\--&gt; Y) \\to (F.obj X \\--&gt; F.obj Y))</code> work?</p>",
        "id": 313712933,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670087064
    },
    {
        "content": "<p>I am still getting this type error in the proof of <code>map_injective</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Faithful.map_injective</span> <span class=\"n\">F</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">F</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Prefunctor.map</span> <span class=\"bp\">?</span><span class=\"n\">m.794.toPrefunctor</span> <span class=\"bp\">?</span><span class=\"n\">m.798</span> <span class=\"bp\">=</span> <span class=\"n\">Prefunctor.map</span> <span class=\"bp\">?</span><span class=\"n\">m.794.toPrefunctor</span> <span class=\"bp\">?</span><span class=\"n\">m.799</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 313713316,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1670087287
    },
    {
        "content": "<p>Look at the type signature: <code>F</code> is implicit.</p>",
        "id": 313713402,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670087349
    },
    {
        "content": "<p>Back in mathlib3 we had</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">faithful</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">map_injective'</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">},</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">functor.map</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">F</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and the <code>[]</code> there made the <code>F</code> argument explicit.</p>",
        "id": 313713435,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670087385
    },
    {
        "content": "<p>As far as I can tell, there is no analogue of this in Lean 4, and so mathport just drops it.</p>",
        "id": 313713493,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670087403
    },
    {
        "content": "<p>But for here, just omitting the <code>F</code> suffices.</p>",
        "id": 313713554,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670087454
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Functor.2Emap.20name.20collision/near/313712691\">said</a>:</p>\n<blockquote>\n<p>That is a bit unfortunate, and I'm not seeing an easy workaround. In this particular case, it's not going to come up very often (we just don't talk about <code>Functor.map</code> as a function that often). Nearly always we have <code>F.map f</code>, which of course works fine.</p>\n</blockquote>\n<p>In that case, can't you do <code>(F.map \\.)</code>?</p>",
        "id": 313753746,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670118961
    }
]