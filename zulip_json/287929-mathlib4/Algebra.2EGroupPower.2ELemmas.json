[
    {
        "content": "<p>I've done a little more than the first half of the port of <code>Algebra.GroupPower.Lemmas</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1055\">#1055</a>. I am stopping now and I will not work on it until Monday I think. If someone wants to keep working on it no problem, just push to PR.</p>\n<p>NB: I didn't change any name, so all of them must be checked.</p>",
        "id": 316287631,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671202941
    },
    {
        "content": "<p>I will probably try a bit tomorrow morning Indian time.</p>",
        "id": 316306650,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1671207812
    },
    {
        "content": "<p>It's not very funny, but nothing too annoying, it's just a long file. Also, I think we should move all lemmas about <code>bit0/bit1</code> to a single section, maybe at the end.</p>",
        "id": 316313784,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671209758
    },
    {
        "content": "<p>I mean, lemmas <code>bit0/bit1</code> in the statement. Their use in proofs should be avoided.</p>",
        "id": 316313993,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671209821
    },
    {
        "content": "<p>I'm not sure why we are hunting <code>bit0</code> and <code>bit1</code> down like this. I understand numerals don't use them anymore, but why removing them from <em>proofs</em>?</p>",
        "id": 316314294,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671209898
    },
    {
        "content": "<p>Because they are proving invariant under an arbitrary binary representation that isn't useful in Lean4?</p>",
        "id": 316315054,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671210093
    },
    {
        "content": "<p>\"isn't useful <em>to Lean 4 core</em>\" is what you meant to say</p>",
        "id": 316315820,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671210301
    },
    {
        "content": "<p>My impression is that the reasons these proofs were done is that <code>bit0</code> and <code>bit1</code> were central to bitwise operations in Lean 3 and they aren't central to anything in Lean 4. If there's an area of group theory or whatever that finds <code>a + a</code> and <code>a + a + 1</code> interesting operations, fair enough.</p>",
        "id": 316317819,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671210886
    },
    {
        "content": "<p>Parity is pretty central <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 316317970,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671210927
    },
    {
        "content": "<p>It's a weird definition of <code>even</code>/<code>odd</code>, and a weird definition of binary parity.</p>",
        "id": 316318519,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671211077
    },
    {
        "content": "<p>What is a non-weird definition of even/odd, then?</p>",
        "id": 316319286,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671211298
    },
    {
        "content": "<p>We already have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/even\">docs#even</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/odd\">docs#odd</a></p>",
        "id": 316319556,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1671211383
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Parity_(mathematics)\">https://en.wikipedia.org/wiki/Parity_(mathematics)</a></p>",
        "id": 316320476,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671211632
    },
    {
        "content": "<p><a href=\"https://ncatlab.org/nlab/show/even+number\">https://ncatlab.org/nlab/show/even+number</a></p>",
        "id": 316320526,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671211646
    },
    {
        "content": "<p>hope these help <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 316320538,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671211649
    },
    {
        "content": "<p>This is a <code>bit0</code> definition at heart <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 316320702,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671211688
    },
    {
        "content": "<p><code>bit0</code>/<code>bit1</code> are <code>even</code>/<code>odd</code> the wrong way round, yeah?</p>",
        "id": 316320912,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671211761
    },
    {
        "content": "<p>It's weird of course to write <code>2 * a</code> as <code>a + a</code>. Otherwise the definitions are fine.</p>",
        "id": 316321438,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671211906
    },
    {
        "content": "<p><code>even</code> is <code>\\exists b, a = b + b</code>, <code>bit0</code> is just the <code>b + b</code> part</p>",
        "id": 316321645,
        "sender_full_name": "Arien Malec",
        "timestamp": 1671211962
    },
    {
        "content": "<p>I mean, if we want to remove them is better to avoid using them in untalented statements (bit0 was used in the proof of   Bernoulli's inequality)</p>",
        "id": 316340453,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671217474
    },
    {
        "content": "<p>I don't see any reason to define a new function <code>f(b)</code> for <code>b + b</code> or <code>2 * b</code>, it just impedes vision. However I can see the argument for just porting everything mindlessly and then considering deleting them later.</p>",
        "id": 316342403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671218151
    },
    {
        "content": "<p>Where the lemmas exist to allow simplification of expressions involving numerals, it would also be a good idea to implement whatever's needed for the equivalent simplification in Lean 4 (i.e. what's needed for <code>simp</code> or <code>norm_num</code> or some such tactic to do the simplification automatically, which may vary from case to case), before deleting them.</p>",
        "id": 316388257,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1671239390
    },
    {
        "content": "<p>I have fixed the issues in <code>Algebra/GroupPower/Lemmas</code> (sometimes with roundabout proofs) but this has broken one proof in <code>Tactic/NormNum/Basic' which imports this file. This is a </code>simp` proof perhaps broken by a new simp lemma.</p>\n<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> or <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> can you take a look?</p>",
        "id": 316407475,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1671257797
    },
    {
        "content": "<p>Regarding above, please don't move lemmas around, it just makes life harder for reviewers or people who come later to solve problems. We're trying to port as boringly as possible, please. :-)</p>",
        "id": 316407590,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1671257920
    },
    {
        "content": "<p>I did not move any lemmas, only fixed proofs. I took this over from <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> so he may know if any lemmas were moved. I will check with git.</p>",
        "id": 316407812,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1671258118
    },
    {
        "content": "<p>It seems that the signatures of  a couple of lemmas were changed to use coercion instead of  <code>.cast</code>. I don't see any other deletions.</p>",
        "id": 316408368,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1671258648
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <br>\nIt is fixed I believe. A lemma was added in the ad hoc port that was removed in the port. I have restored it with a porting note and things seem fine locally. <br>\nFor reference, this was the lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">pow_eq</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">m.pow</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 316410356,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1671260402
    },
    {
        "content": "<p>I changed an import to avoid a cycle (caused by the ad hoc port), I didn't move any lemma around.</p>",
        "id": 316411640,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671261142
    },
    {
        "content": "<p>Also, there is the declaration that is now a tautology that needs to be fixed. See my message in the thread about norm_cast (on my phone, sorry)</p>",
        "id": 316412147,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671261607
    },
    {
        "content": "<p>Changing imports is also likely to break future ports; did you change the imports of the ad hoc port?</p>",
        "id": 316412825,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671262106
    },
    {
        "content": "<p>Somehow one lemma of the ad hoc port got deleted. I don't know if it was because it was not actually a port or whether it was accidentally deleted while editing (I could have done that).</p>",
        "id": 316414710,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1671263706
    },
    {
        "content": "<p>I am running the linter and commenting out tautologies (with porting notes).</p>",
        "id": 316414728,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1671263735
    },
    {
        "content": "<p>No, I only removed a dependency on a norm num and now the imports reflect the mathlib3 situation. Sorry but I don't have a computer today, so I cannot explain better.</p>",
        "id": 316414732,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671263739
    },
    {
        "content": "<p>What I saw finally was that the lemma <code>pow_eq</code> was in the ad hoc version but not in the ported version. I have put it back. I don't know where it went away - it could have been me while editing accidentally deleting it.</p>",
        "id": 316414859,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1671263847
    },
    {
        "content": "<p>If a lemma has become a tautology then this might not be an indication that it needs deleting, but might rather be a consequence of the fact that parsing has changed a little and the statement needs to be changed slightly. See got example Riccardo's n^m lemma in another thread (sorry, on mobile). I think the autoporter is getting these wrong?</p>",
        "id": 316421681,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671268413
    },
    {
        "content": "<p>The autoport commented that lemma, so it was right. I uncommented it because I didn't see it is a tautology. But Yaël's version seems reasonable</p>",
        "id": 316421810,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671268499
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> I believe the PR is ready (two rounds of review and I addressed most comments) but one comment of <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> is regarding code you ported at line 390:<br>\n\"Do we really want a TODO in a docstring as opposed to just in a comment in the code?\"</p>\n<p>Can you address this?</p>",
        "id": 316696131,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1671441254
    },
    {
        "content": "<p>That line has nothing to do with the port, it is also in <a href=\"https://github.com/leanprover-community/mathlib/blob/d2617e08382c6f606d78efff82ce2e21b408fd6c/src/algebra/group_power/lemmas.lean#L263\">mathlib3</a>. I agree a comment would be better, but maybe we just want to keep it as in mathlib.</p>",
        "id": 316698456,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671442181
    },
    {
        "content": "<p>I don't mind, I just thought it was odd</p>",
        "id": 316699721,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671442610
    },
    {
        "content": "<p>Hopefully the other comments are addressed (in many cases taking your shorter proofs).</p>",
        "id": 316705336,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1671444683
    }
]