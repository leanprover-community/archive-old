[
    {
        "content": "<p>I notice that the \"apply config\" objects no longer have a transparency setting in Lean 4, whereas they did in Lean 3, compare <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.ApplyConfig#doc\">docs4#Lean.Meta.ApplyConfig</a> with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.apply_cfg\">docs#tactic.apply_cfg</a>.  I assume that in Lean 4 the intention is to deal with this using <code>with_reducible</code> or similar.  Is that right?  For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Rat.Order</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mul_le_mul</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">with_reducible</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">mul_le_mul</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">tactic 'apply' failed, failed to unify</span>\n<span class=\"cm\">  ?a * ?c ≤ ?b * ?d</span>\n<span class=\"cm\">with</span>\n<span class=\"cm\">  a / 4 ≤ b / 4</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 321736515,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673915394
    },
    {
        "content": "<p>I noticed this because in mathlib3 the transparency setting in <code>apply_config</code> percolated to a transparency setting in <code>apply_rules</code>, where I used it a lot.  (For example, to ensure that in an example like the above, I could use an <code>apply_rules</code> attribute set including both <code>mul_le_mul</code> and <code>div_le_div</code>, without fussing about lemma ordering to make sure that the dumb choice didn't take precedence.)</p>\n<p>I guess it's now a little harder to provide transparency settings for <code>apply_rules</code> and <code>solve_by_elim</code>, but if my guess above about the expected approach is correct, probably it's not too hard?  Anyway, that's one more feature request from me on <code>solve_by_elim</code> ... cc <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span></p>",
        "id": 321736653,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673915483
    },
    {
        "content": "<p>Does it work if you put <code>with_reducible</code> around the <code>solve_by_elim</code> / <code>apply_rules</code>?</p>",
        "id": 321737090,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673915801
    },
    {
        "content": "<p>Yes.  This makes the sensible choice <code>div_le_div</code> no matter what the ordering of <code>[mul_le_mul, div_le_div]</code> is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Field.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Rat.Order</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">with_reducible</span> <span class=\"o\">{</span>\n  <span class=\"n\">apply_rules</span> <span class=\"o\">[</span><span class=\"n\">mul_le_mul</span><span class=\"o\">,</span> <span class=\"n\">div_le_div</span><span class=\"o\">]</span>\n  <span class=\"bp\">.</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">.</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">.</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">.</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>and this does nothing (as desired):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">with_reducible</span> <span class=\"o\">{</span>\n  <span class=\"n\">apply_rules</span> <span class=\"o\">[</span><span class=\"n\">mul_le_mul</span><span class=\"o\">]</span>\n  <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 321737431,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673916029
    },
    {
        "content": "<p>But it's awkward having to put <code>with_reducible</code> around the whole thing, including the proofs of the goals created -- is there a syntax for <code>with_reducible { ... }</code> which sends the goals produced onwards, so the sorries don't need to be inside the braces?</p>",
        "id": 321737507,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673916096
    },
    {
        "content": "<p>It's okay, I can add this as an option to solve_by_elim easily.</p>",
        "id": 321737700,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673916227
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1609\">mathlib4#1609</a>, not tested at all! <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>, could you check if that helps, and then write a test case? (Either post here or add the to PR directly, as suits you.)</p>",
        "id": 321737855,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673916330
    },
    {
        "content": "<p>Wow, that was fast :). I'm off now for a couple of hours but I'll test it later tonight.  Thank you!</p>",
        "id": 321737956,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673916378
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> It works perfectly.  I pushed a test.</p>",
        "id": 321742426,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1673920136
    }
]