[
    {
        "content": "<p>I pushed a first pass on fixing some capitalization. But I need to do something else for a bit.</p>",
        "id": 319767949,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673006731
    },
    {
        "content": "<p><code>to_additive</code> in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">prod_is_unit</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"bp\">∈</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">IsUnit</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">IsUnit</span> <span class=\"n\">L.prod</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">List.prod_cons</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">IsUnit.mul</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">mem_cons_self</span> <span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">prod_is_unit</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"n\">mt</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">u</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">mem_cons_of_mem</span> <span class=\"n\">h</span> <span class=\"n\">mt</span><span class=\"o\">))</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">list.prod_is_unit</span> <span class=\"n\">List.prod_is_unit</span>\n</code></pre></div>\n<p>errors with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Mathlib.Algebra.Group.Units._auxLemma.22</span>\n<span class=\"n\">argument</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">AddMonoid</span> <span class=\"n\">M</span>\n<span class=\"n\">but</span> <span class=\"n\">function</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Monoid</span> <span class=\"n\">M</span><span class=\"o\">],</span> <span class=\"n\">IsUnit</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">True</span>\n</code></pre></div>",
        "id": 319779731,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673011443
    },
    {
        "content": "<p>Is <code>to_additive</code> forgetting to translate some stuff?</p>",
        "id": 319779793,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673011459
    },
    {
        "content": "<p>This is <a href=\"https://github.com/leanprover-community/mathlib4/pull/1149\">mathlib4#1149</a>, fixed by <a href=\"https://github.com/leanprover-community/mathlib4/pull/1314\">mathlib4#1314</a></p>",
        "id": 319786902,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1673013779
    },
    {
        "content": "<p>Ok, good!</p>",
        "id": 319786990,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673013806
    },
    {
        "content": "<p>So we just need some people to review some meta PRs</p>",
        "id": 319787022,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673013818
    },
    {
        "content": "<p>I dealt with a few comments on <a href=\"https://github.com/leanprover-community/mathlib4/pull/1314\">mathlib4#1314</a>.</p>",
        "id": 319913242,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673074878
    },
    {
        "content": "<p>5 out of 6 errors in this file have to do with <code>to_additive</code>.</p>",
        "id": 319977973,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673106763
    },
    {
        "content": "<p>So if we can get <a href=\"https://github.com/leanprover-community/mathlib4/pull/1314\">mathlib4#1314</a> in, that would be great.</p>",
        "id": 319978785,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673107221
    },
    {
        "content": "<p>My feeling is that it would also solve the final error.</p>",
        "id": 319978836,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673107240
    },
    {
        "content": "<p>This one seems back on track!</p>",
        "id": 320307630,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673291232
    },
    {
        "content": "<p>And CI is happy</p>",
        "id": 320310196,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673291986
    }
]