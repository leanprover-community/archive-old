[
    {
        "content": "<p>In Mathlib4, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[trans]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">trans_left</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">TransGen</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hbc</span> <span class=\"o\">:</span> <span class=\"n\">ReflTransGen</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TransGen</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>gives me an error:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code> @[trans] attribute only applies to lemmas proving x ∼ y → y ∼ z → x ∼ z, got ∀ {α : Type u_1} {r : α → α → Prop}\n  {a b c : α}, TransGen r a b → ReflTransGen r b c → TransGen r a c\n</code></pre></div>\n<p>The issue here is that it's not the same relation being used three times, but two relations are involved. In Lean 3 it looks like we could be more liberal with our <code>trans</code> tagging -- IIRC this was the trick that made <code>calc</code> allow things like <code>a &lt; b ... &lt;= c ...</code>, because <code>lt_of_lt_of_le</code> What do I do here? I'm in no position to make <code>trans</code> work more generally, but am I missing an import which does this, and if not then should I just add a TODO or open an issue or what?</p>",
        "id": 308779535,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667998183
    },
    {
        "content": "<p>PS my imports are</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Relator</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Propext</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Relation.Rfl</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Use</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.LibrarySearch</span>\n</code></pre></div>",
        "id": 308779677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667998227
    },
    {
        "content": "<p>Note that <code>calc</code> doesn't use the <code>@[trans]</code> attribute anymore, it uses the <code>Trans</code> typeclass which does allow non-uniform relations</p>",
        "id": 308783615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667999614
    },
    {
        "content": "<p>the <code>@[trans]</code> attribute is only used by the <code>trans</code> tactic (previously <code>transitivity</code>) which does require uniform relations since it has to make something up for the subgoals</p>",
        "id": 308783787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667999672
    },
    {
        "content": "<p>so you can just not tag it as <code>@[trans]</code> and add a <code>Trans</code> instance instead</p>",
        "id": 308783857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667999697
    },
    {
        "content": "<p>If I have a relation which is transitive and I prove this and attach <code>@[trans]</code>, should the system automatically make the <code>Trans</code> instance?</p>",
        "id": 309043621,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668102749
    },
    {
        "content": "<p>it could (and probably should). It doesn't right now</p>",
        "id": 309047728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668103849
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span> , could you please expand docs on this attribute / <code>trans</code> tactic? Namely, how does it interact with <code>Trans</code> class?</p>",
        "id": 321083191,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673586013
    },
    {
        "content": "<p>E.g.,</p>\n<ul>\n<li>Does it create a <code>Trans</code> instance?</li>\n<li>Does it use <code>Trans</code> instances?</li>\n</ul>\n<p>I mean, is it enough to have one of <code>@[trans]</code>/<code>Trans</code>? If yes, which one?</p>",
        "id": 321083280,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673586097
    },
    {
        "content": "<p>I'll check and document, but the intention is that it uses the Trans class</p>",
        "id": 321083660,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1673586433
    },
    {
        "content": "<p>Then we can drop some <code>@[trans]</code> attrs.</p>",
        "id": 321084277,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673587010
    },
    {
        "content": "<p>At least after I add an instance <code>[IsTrans α r] : Trans r r r</code>.</p>",
        "id": 321084317,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673587047
    },
    {
        "content": "<p>IMHO, we should either drop <code>@[trans]</code> or make it generate a <code>Trans</code> instance instead of using its own data.</p>",
        "id": 321085476,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673587985
    },
    {
        "content": "<p>Because in <code>mathlib3</code>, <code>@[trans]</code> was used both by <code>trans</code> and <code>calc</code>.</p>",
        "id": 321085576,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673588062
    },
    {
        "content": "<p>Then <code>trans</code> tactic can be just <code>apply IsTrans.trans</code>.</p>",
        "id": 321087073,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673589397
    },
    {
        "content": "<p>I agree that in principle a better design will be to have @[trans] generate a <code>Trans</code> instance and having the <code>trans</code> tactic use <code>Trans</code> classes only. The one thing to be wary off is that there may be instances of <code>@[trans]</code> labelled lemmas that do not have a corresponding <code>Trans</code> class. In <code>lean 3</code> the attributes <code>sym</code> and <code>trans</code> could be applied very liberally.</p>",
        "id": 321112317,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1673601540
    },
    {
        "content": "<p>Any specific examples that work with Lean 3 calc?</p>",
        "id": 321113841,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673602074
    },
    {
        "content": "<p>I don't know examples. I have to think through this: figure out what is needed to make a <code>Trans</code> instance and then see if adding these breaks any <code>@[trans]</code> labels.</p>",
        "id": 321143020,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1673611193
    },
    {
        "content": "<p>I just checked the definition of the <code>Trans</code> class and using one way is not that easy, and I do not know if it is even valid in all cases. The issue is that in many cases <code>@[trans]</code> is applied to a family of transitivity relations. So we will have to map to a similar family of instances, which will take some work. And, as I mentioned, there is no check in mathlib that the attribute is only applied to families of a certain shape.</p>\n<p>Initially I had assumed that <code>symm</code> and <code>trans</code> attributes were only for the standard shapes and this led to errors during the port, i.e., the test while adding the attribute failing (which was not desired). As I said, one can try to add a parametrized collection of <code>Trans</code> instances for the attribute and give an error if this fails. But as this is a bit fiddly, if the present dual approach is not harmful we should consider living with it.</p>",
        "id": 321181666,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1673621842
    }
]