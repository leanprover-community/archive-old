[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/FMM.202021/near/247701918\">said</a>:</p>\n<blockquote>\n<p>Here are my slides: <a href=\"/user_uploads/3121/sl0pTs6l5urs6BNmxcuu4nSM/Porting_Mathlib.pdf\">Porting_Mathlib.pdf</a></p>\n</blockquote>\n<p>My internet access here doesn't allow me to attend Zoom talks. Can anyone reveal whether Mario answered any questions about the porting schedule?</p>",
        "id": 247720236,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1627657666
    },
    {
        "content": "<p>I estimated one year, but there is a large variance on that. There is nothing like a schedule in terms of milestones</p>",
        "id": 247720388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627657738
    },
    {
        "content": "<p>One year from now?</p>",
        "id": 247720431,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1627657757
    },
    {
        "content": "<p>It's hard to tell from the slides: did you decide on one strategy (maybe mixing several tools)?</p>",
        "id": 247720638,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1627657830
    },
    {
        "content": "<p>less seems plausible, but I still don't know what some stages of the process will actually look like</p>",
        "id": 247720641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627657831
    },
    {
        "content": "<p>What does the grey color mean on Page 26?</p>",
        "id": 247720696,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1627657858
    },
    {
        "content": "<p>At that point I said that <code>olean-port</code> and <code>lean3-port</code> are strictly dominated by <code>synport</code> because it has better information to work from</p>",
        "id": 247720790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627657907
    },
    {
        "content": "<p>and the plan involves all three of the remaining methods</p>",
        "id": 247721078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627657942
    },
    {
        "content": "<p>the next slide tries to summarize how they interact</p>",
        "id": 247721112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627657955
    },
    {
        "content": "<p>Daniel has argued that the current <code>binport</code> in the mathport repo is actually somewhere between what I called <code>olean-port</code> and <code>binport</code></p>",
        "id": 247721240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627658018
    },
    {
        "content": "<p>I really think we shouldn't be afraid of \"stop the world and port everything\". We simply have to reach a consensus among all mathlib maintainers to simply stop merging stuff. I'm pretty sure everyone is convinced this is extremely important, we are simply waiting for your signal.</p>",
        "id": 247721248,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1627658023
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Mario's.20FMM.202021.20talk/near/247720638\">said</a>:</p>\n<blockquote>\n<p>It's hard to tell from the slides: did you decide on one strategy (maybe mixing several tools)?</p>\n</blockquote>\n<p>We have not converged on a specific roadmap yet. The solution will very likely involve a mix of synport, binport, delabbing defs/types from binport, running large-scale proof search to fix broken proofs, and then a (still unclear how herculean) manual process at the end. I think there is good chance the whole process takes much less than a year, but TBD</p>",
        "id": 247721303,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1627658044
    },
    {
        "content": "<p>as long as we can do that sufficiently quickly it's not a bad strategy. But we need the porting tools to be ready to make sure it is straightforward</p>",
        "id": 247721389,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627658076
    },
    {
        "content": "<p>Most people expect it will be a lot of manual work anyway. The key is whether this can be parallelized. It's not only about having several people working in parallel, it's about how much things will diverge (we can fear the early files will force so many variations that the late files will have to be rewritten from scratch).</p>",
        "id": 247721554,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1627658162
    },
    {
        "content": "<p>I would really like to avoid that</p>",
        "id": 247721655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627658196
    },
    {
        "content": "<p>Of course I understand we all want to avoid that.</p>",
        "id": 247721677,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1627658208
    },
    {
        "content": "<p>We have some really promising results, it might actually be largely automatic</p>",
        "id": 247721749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627658250
    },
    {
        "content": "<p>Anyway, my point is that once you get the tactics working in Lean 4 and you'll be happy with your porting tool then I'm sure we can provide a lot of forces for grunt work.</p>",
        "id": 247721845,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1627658285
    },
    {
        "content": "<p>I don't think there's any way we can avoid a massive cleanup operation afterwards.  There's lots of Lean 3-specific workaround and hacks in mathlib after all.</p>",
        "id": 247721851,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1627658288
    },
    {
        "content": "<p>The examples on my slides were mostly autogenerated, except for formatting and name resolution (which isn't hooked up yet but will eventually be part of synport)</p>",
        "id": 247721856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627658291
    },
    {
        "content": "<p>the output was formatted, but it doesn't quite hit the style guide yet</p>",
        "id": 247721958,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627658347
    },
    {
        "content": "<p>Mario, how much MSR time do you still have?</p>",
        "id": 247721983,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1627658360
    },
    {
        "content": "<p>On Page 29, do we have to use the obfuscated Lean 4 forall or can we reintroduced the readable notation, at least in mathlib?</p>",
        "id": 247722160,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1627658437
    },
    {
        "content": "<p>It's even worse on the next page <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 247722299,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1627658506
    },
    {
        "content": "<p>until 27 Aug</p>",
        "id": 247722411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627658551
    },
    {
        "content": "<p>Oh, that's too soon. I should stop writing questions and let you work.</p>",
        "id": 247722485,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1627658593
    },
    {
        "content": "<p>Right now there is a hole in synport where we insert the \"DArrow heuristic\" - once types become available it will be easier to use forall for props</p>",
        "id": 247722524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627658609
    },
    {
        "content": "<p>it is capable of producing both ATM</p>",
        "id": 247722633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627658650
    },
    {
        "content": "<p>we could just use forall everywhere too</p>",
        "id": 247722669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627658670
    },
    {
        "content": "<p>but I don't know if people feel Pi should be Pi</p>",
        "id": 247722693,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627658681
    },
    {
        "content": "<p>Mathematicians would definitely prefer forall everywhere.</p>",
        "id": 247722715,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1627658691
    },
    {
        "content": "<p>lean 3 uses Pi when the codomain is a type</p>",
        "id": 247722761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627658708
    },
    {
        "content": "<p>For us it makes sense that forall and Pi are different, but if we need to choose only one then it's definitely forall</p>",
        "id": 247722790,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1627658724
    },
    {
        "content": "<p>also, this is one of the cases where lean forgets which is which very early in parsing so that the AST doesn't record it; if we modify lean to keep track of the distinction we can just use forall iff the user used forall in lean 3, which will probably yield the best results</p>",
        "id": 247722955,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627658800
    },
    {
        "content": "<p>another case is <code>lemma</code> vs <code>theorem</code>, which you will note also shows up in the example. Lean 3 forgets which is which right in the tokenizer, so the parser doesn't export the info</p>",
        "id": 247723079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627658868
    },
    {
        "content": "<p>But I have heard it said that mathlib's lemma vs theorem markings are way off anyway so maybe preserving them isn't worth it</p>",
        "id": 247723176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627658903
    },
    {
        "content": "<p>Honestly that lemma vs theorem information is not worth fighting for. Our current mathlib is a mess here.</p>",
        "id": 247723182,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1627658907
    },
    {
        "content": "<p>also <code>fun</code> vs <code>\\lam</code> and <code>-&gt;</code> vs <code>\\r</code></p>",
        "id": 247723297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627658980
    },
    {
        "content": "<p>You already know what mathematicians want (no ascii art, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>↦</mo></mrow><annotation encoding=\"application/x-tex\">\\mapsto</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mrel\">↦</span></span></span></span>).</p>",
        "id": 247723706,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1627659172
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Mario's.20FMM.202021.20talk/near/247721845\">said</a>:</p>\n<blockquote>\n<p>Anyway, my point is that once you get the tactics working in Lean 4 and you'll be happy with your porting tool then I'm sure we can provide a lot of forces for grunt work.</p>\n</blockquote>\n<p>We will not be shy about enlisting this help when it is appropriate. Right now there is still both (a) a lot of low-hanging fruit to improve the automatic part and (b) still too many hard-to-diagnose issues when using the binported oleans for it to be worth having non-devs experimenting with them yet. We may be within ~1 week of solving enough elab issues for it to be extremely useful if users start trying to patch random synport-importing-binport files and reporting issues they hit.</p>",
        "id": 247723707,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1627659172
    },
    {
        "content": "<p>So lemme get this straight: is there any way at all I can have mathlib3's <code>Scheme</code> in Lean 4 right now?</p>",
        "id": 247740132,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627667138
    },
    {
        "content": "<p>You can get a translated <code>Mathlib.scheme</code> in lean 4 right now with binport; a lean 4 file that appears to be defining <code>Scheme</code> but actually has lots of errors is coming soonish</p>",
        "id": 247741275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627667745
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Yes, these <code>.olean</code>s work with Lean4 master: <a href=\"https://github.com/dselsam/mathport/releases/tag/v0.0.0.0\">https://github.com/dselsam/mathport/releases/tag/v0.0.0.0</a> I can also run the same pipeline on other repos e.g. liquid if it would be useful. <strong>HOWEVER</strong> when trying to use these oleans, you will currently hit subtle yet-to-be-addressed issues elaborating new terms. We are making rapid progress here and the experience should be much better in ~1 week.</p>",
        "id": 247741407,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1627667787
    },
    {
        "content": "<p>Most of the remaining issues only emerge once the typeclass instances start getting insanely big later in the library. This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Prime</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">exists_infinite_primes_alt</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">Prime</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">minFac</span> <span class=\"o\">(</span><span class=\"n\">n.factorial</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">f1</span> <span class=\"o\">:</span> <span class=\"n\">n.factorial</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">ne_of_gt</span> <span class=\"bp\">$</span> <span class=\"n\">succ_lt_succ'</span> <span class=\"bp\">$</span> <span class=\"n\">factorial_pos</span> <span class=\"n\">n</span>\n  <span class=\"k\">have</span> <span class=\"n\">pp</span> <span class=\"o\">:</span> <span class=\"n\">Prime</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">min_fac_prime</span> <span class=\"n\">f1</span>\n  <span class=\"k\">have</span> <span class=\"n\">np</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">le_of_not_ge</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">n.factorial</span> <span class=\"o\">:=</span> <span class=\"n\">dvd_factorial</span> <span class=\"o\">(</span><span class=\"n\">min_fac_pos</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Nat.dvd_add_iff_right</span> <span class=\"n\">h₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">min_fac_dvd</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"n\">pp.not_dvd_one</span> <span class=\"n\">h₂</span>\n  <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">np</span><span class=\"o\">,</span> <span class=\"n\">pp</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>Note the annoying prime in the name <code>succ_lt_succ'</code> -- this is due to a clash with the existing one. Still hoping somebody will backport <a href=\"#narrow/stream/270676-lean4/topic/backporting.20Nat.2ELe/near/246798442\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/backporting.20Nat.2ELe/near/246798442</a></p>",
        "id": 247741944,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1627668014
    },
    {
        "content": "<p>I don't really understand what it means to backport Nat.le . Does this mean changing the definition of <code>nat.le</code> in Lean 3 or mathlib or wherever it is to something different and then picking up all the pieces?</p>",
        "id": 247742437,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627668238
    },
    {
        "content": "<p>Yes, it means somehow making Lean's <code>nat.le</code> def-eq-compatible with Lean4's. I suspect the refactor can be contained after patching a small number of proofs and won't leak very far out of the file defining it.</p>",
        "id": 247742724,
        "sender_full_name": "Daniel Selsam",
        "timestamp": 1627668394
    }
]