[
    {
        "content": "<p>Hi, is there any page where I can see which mathlib tactics were ported to Lean 4? E.g., do we already have <code>rcases</code>/<code>rintro</code>?</p>",
        "id": 254420918,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632337534
    },
    {
        "content": "<p>You can also go look at <a href=\"https://github.com/leanprover-community/mathlib4/tree/master/Mathlib/Tactic\">https://github.com/leanprover-community/mathlib4/tree/master/Mathlib/Tactic</a> (for the manual port -- which is, as I understand it, were the ported tactics go).</p>",
        "id": 254423342,
        "sender_full_name": "Mac",
        "timestamp": 1632338564
    },
    {
        "content": "<p>It would be nice to have a table with status (not started, NN is working on it, ported).</p>",
        "id": 254445785,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632347944
    },
    {
        "content": "<p>I think about trying to write some Lean 4 meta code, and I don't want to work on something that is being ported by a pro.</p>",
        "id": 254446051,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632348035
    },
    {
        "content": "<p>My guess is that no one is working on <code>rcases</code> at the moment</p>",
        "id": 254448311,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632349175
    },
    {
        "content": "<p>I would suggest copying the syntax from <a href=\"https://github.com/leanprover/mathport/blob/master/Lib/Mathport/Prelude/Syntax.lean\">https://github.com/leanprover/mathport/blob/master/Lib/Mathport/Prelude/Syntax.lean</a> when you want to start working on a new tactic</p>",
        "id": 254448467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632349255
    },
    {
        "content": "<p>Which part of this file?</p>",
        "id": 254450780,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632350381
    },
    {
        "content": "<p>I'm going to finish docs for my Stokes' thm PR, then try to port a tactic. May be, I'll start with <code>choose</code> because it has a simpler syntax.</p>",
        "id": 254450899,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632350441
    },
    {
        "content": "<p>For example, if you want to port <code>rcases</code>, you should look for <code>syntax \"rcases\" ... : tactic</code></p>",
        "id": 254452171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632351143
    },
    {
        "content": "<p><code>rcases</code> is more complicated than some others since it defines a syntax class for rcases patterns, but the grammar is <a href=\"https://github.com/leanprover/mathport/blob/master/Lib/Mathport/Prelude/Syntax.lean#L254-L263\">here</a></p>",
        "id": 254452270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632351201
    },
    {
        "content": "<p>So to make this into an actual tactic, you would accompany that <code>syntax</code> with an <code>elab</code> that determines how the tactic behaves</p>",
        "id": 254452394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632351256
    },
    {
        "content": "<p>For simple tactics or those with a simple desugaring you can instead make it a <code>macro</code> and provide the tactic it expands into</p>",
        "id": 254452453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632351291
    },
    {
        "content": "<p>I'll come back and ask more questions in a few days.</p>",
        "id": 254452970,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632351579
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20status.3F/near/254445785\">said</a>:</p>\n<blockquote>\n<p>It would be nice to have a table with status (not started, NN is working on it, ported).</p>\n</blockquote>\n<p>In favour of this. I'd also be willing to tackle porting a few tactics, but we need to make sure, we're all choosing the same one</p>",
        "id": 254678073,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1632476920
    },
    {
        "content": "<p>I would say, for now just post here if you want to claim a tactic. As long as it's not a huge tactic, there probably won't be a huge gap before the PR shows up and/or lands in mathlib4</p>",
        "id": 254681759,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632478894
    },
    {
        "content": "<p>Or (for non-trivial ones) open an issue when starting and close it with the PR when finished?</p>",
        "id": 254690575,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1632484016
    },
    {
        "content": "<p>FWIW I started looking at <code>rcases</code> today <span aria-label=\"triangular flag\" class=\"emoji emoji-1f6a9\" role=\"img\" title=\"triangular flag\">:triangular_flag:</span></p>",
        "id": 255232582,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1632841700
    },
    {
        "content": "<p>Probably best to introduce a new syntax category for the patterns and them parse them into what in Lean 3 is <code>rcases_pat</code>....</p>",
        "id": 255232733,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1632841753
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110789\">@Jakob von Raumer</span> Like I said above, I would recommend basing your tactic on the syntax defined in mathport <a href=\"https://github.com/leanprover/mathport/blob/master/Mathport/Prelude/Syntax.lean#L252-L261\">here</a></p>",
        "id": 255313469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632869534
    },
    {
        "content": "<p>Probably some things can be simplified. Flattening the patterns can be done by macros, and I think we don't need to do the thing with <code>get_local_and_type</code> anymore, since <code>cases</code> gives us an <code>FVarSubst</code></p>",
        "id": 255365107,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1632906140
    },
    {
        "content": "<p>Is there a source material on how to write tactics for Mathlib4?</p>",
        "id": 269052737,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642990081
    },
    {
        "content": "<p>not really, but thanks for volunteering to write the docs :P</p>",
        "id": 269052826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642990199
    },
    {
        "content": "<p>Which docs? The docstrings for the tactics we currently have?</p>",
        "id": 269052987,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642990421
    },
    {
        "content": "<p>Or are you talking about these TODOs? <a href=\"https://leanprover.github.io/lean4/doc/tactics.html\">https://leanprover.github.io/lean4/doc/tactics.html</a></p>",
        "id": 269052993,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642990441
    },
    {
        "content": "<p>I mean the lean 4 metaprogramming tutorial</p>",
        "id": 269053054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642990516
    },
    {
        "content": "<p>that doesn't exist</p>",
        "id": 269053058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642990523
    },
    {
        "content": "<p>It's about half syntax/macro stuff and half <code>Elab</code> and <code>MetaM</code> stuff</p>",
        "id": 269053111,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642990571
    },
    {
        "content": "<p>I mean, I would if I could, but I don't think I'm quite there yet (that's why I asked for some material to get started <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span>)</p>",
        "id": 269053215,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642990752
    },
    {
        "content": "<p>I can try to answer questions if you have any</p>",
        "id": 269053291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642990833
    },
    {
        "content": "<p>I have some shallow experience with <code>Elab</code> and <code>MetaM</code> and almost zero experience with syntax/macro. I'm willing to engage with these matters because I want to learn, but it will take quite a while before I'm able to organize the subject in a didactic way focused on tactic writing</p>",
        "id": 269054171,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642991775
    },
    {
        "content": "<p>the syntax/macro part is tactic writing in easy mode</p>",
        "id": 269054183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642991810
    },
    {
        "content": "<p>for a simple but not completely trivial example of a macro tactic, see <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Basic.lean#L195-L206\"><code>iterate</code></a></p>",
        "id": 269054300,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642991967
    },
    {
        "content": "<p>for a completely trivial example see <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Basic.lean#L26\"><code>rfl</code></a></p>",
        "id": 269054359,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642992027
    },
    {
        "content": "<p>(actually that one is slightly more than it seems because there is also a definition of <code>rfl</code> in core, and when you use <code>rfl</code> in a tactic proof it will try both versions)</p>",
        "id": 269054371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642992073
    },
    {
        "content": "<p>I was looking at that file earlier and I got lost because there seem to exist many ways to define a tactic.<br>\n<code>syntax</code>, <code>macro_rules</code>, <code>macro</code> and <code>elab</code></p>",
        "id": 269054521,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642992328
    },
    {
        "content": "<p>It was a bit overwhelming because they're all unfamiliar to me</p>",
        "id": 269054527,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642992354
    },
    {
        "content": "<ul>\n<li><code>syntax</code> declares the syntax of a tactic. If you do this then it will parse in a tactic block but you will get an error saying that it is unimplemented</li>\n<li><code>macro_rules</code> pattern matches on a syntax object for your tactic application, binding the arguments and doing something with them. This defines a macro tactic, and the idea is that the rhs of the pattern is another tactic or tactic sequence with your arguments interpolated in.</li>\n<li><code>macro</code> is a shorthand for declaring a <code>syntax</code> and a <code>macro_rules</code>, in the special case that there is only one <code>macro_rules</code> match branch. The syntax looks mostly like <code>syntax</code> on the left side, except you name the arguments, and then the right hand side is a tactic quotation like in <code>macro_rules</code>.</li>\n<li><code>elab</code> and <code>elab_rules</code> are similar to <code>macro</code> and <code>macro_rules</code>, but they are for defining elaborator tactics. These are used for more heavyweight or primitive tactics that are not simply sugar for another tactic expression. The left hand side is the same as <code>macro</code> and <code>macro_rules</code> respectively but the right hand side is now a <code>TacticM Unit</code> and you can call lean internals to get the goal, call <code>MetaM</code> functions and so on.</li>\n</ul>",
        "id": 269055957,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642994243
    },
    {
        "content": "<p>Wow, thank you very much for the explanations! I am going to study these in the upcoming weeks</p>",
        "id": 269056159,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642994465
    },
    {
        "content": "<p>I have so many questions I don't even know where to start. I'm gonna dig some more and let the information sink deeper.<br>\nI do have one comment though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">`</span><span class=\"n\">iterate</span> <span class=\"n\">n</span> <span class=\"o\">{</span> <span class=\"bp\">...</span> <span class=\"o\">}</span><span class=\"bp\">`</span> <span class=\"n\">runs</span> <span class=\"n\">the</span> <span class=\"n\">tactic</span> <span class=\"n\">block</span> <span class=\"n\">exactly</span> <span class=\"bp\">`</span><span class=\"n\">n</span><span class=\"bp\">`</span> <span class=\"n\">times.</span>\n<span class=\"bp\">`</span><span class=\"n\">iterate</span> <span class=\"o\">{</span> <span class=\"bp\">...</span> <span class=\"o\">}</span><span class=\"bp\">`</span> <span class=\"n\">runs</span> <span class=\"n\">the</span> <span class=\"n\">tactic</span> <span class=\"n\">block</span> <span class=\"n\">repeatedly</span> <span class=\"n\">until</span> <span class=\"n\">failure.</span>\n</code></pre></div>\n<p>The brackets are a bit confusing because one may think they're part of the syntax</p>",
        "id": 269204923,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643081109
    },
    {
        "content": "<p>The brackets <em>are</em> part of the syntax</p>",
        "id": 269362677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643171880
    },
    {
        "content": "<p>That is, those aren't the same brackets as the ones you normally use to group under a subgoal. For instance <code>iterate 1 { skip }</code> will do nothing but <code>iterate 1 { { skip } }</code> will fail if there are any remaining goals</p>",
        "id": 269362833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643172028
    },
    {
        "content": "<p>and <code>iterate 1 skip</code> is syntactically incorrect</p>",
        "id": 269362847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643172057
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span></p>",
        "id": 269362876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643172095
    },
    {
        "content": "<p>Well I would have expected what Arthur expected, one takeaway for me from my experience with metaprogramming was that curly brackets are more than just for grouping. I guess if nothing else, we know that brackets are a bit confusing because one may not know whether they're part of the syntax or not.</p>",
        "id": 269369883,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1643179749
    },
    {
        "content": "<p>the basic rule is that <code>{ tacs }</code> on its own is the <code>solve1</code> function, and <code>foo { tacs }</code> or <code>bar expr + bla =&gt; { tacs }</code> are syntaxes for passing a tactic sequence to the tactic combinator <code>foo</code> or <code>bar</code></p>",
        "id": 269372591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643182697
    },
    {
        "content": "<p>You can make your own interactive tactic accept a block by using an argument of type <code>itactic</code></p>",
        "id": 269372633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643182747
    },
    {
        "content": "<p>The most common tactics accepting braced blocks that you are likely to run across in mathlib are <code>all_goals { ... }</code>, <code>any_goals { ... }</code>,<code>try { ... }</code> and <code>case : x y z { ... }</code>, as well as <code>repeat { ... }</code> and <code>iterate n { ... }</code></p>",
        "id": 269372785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643182870
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Hm, I suspect something strange is happening here. It works fine without brackets and when I use brackets it's not digging deep enough</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">iterate</span> <span class=\"mi\">1</span> <span class=\"n\">skip</span> <span class=\"c1\">-- works</span>\n  <span class=\"n\">iterate</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_assoc</span><span class=\"o\">]</span> <span class=\"c1\">-- goals accomplished</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">iterate</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_assoc</span><span class=\"o\">]}</span> <span class=\"c1\">-- unsolved goals</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">iterate</span> <span class=\"mi\">3</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_assoc</span><span class=\"o\">]</span> <span class=\"c1\">-- goals accomplished</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">iterate</span> <span class=\"mi\">3</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_assoc</span><span class=\"o\">]}</span> <span class=\"c1\">-- unsolved goals</span>\n</code></pre></div>",
        "id": 269400565,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643198881
    },
    {
        "content": "<p>I think Mario was mixing up Lean 3 and Lean 4.  I don't think any tactic in Lean 4 requires braces itself.  In Lean 4, braces always mean that the goal must be solved by the enclosed tactic.</p>",
        "id": 269400742,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643198998
    },
    {
        "content": "<p>Ah, that makes sense:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">iterate</span> <span class=\"mi\">1</span> <span class=\"o\">{</span><span class=\"n\">skip</span><span class=\"o\">}</span> <span class=\"c1\">-- unsolved goals but I didn't want to solve it here anyways</span>\n  <span class=\"n\">iterate</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_assoc</span><span class=\"o\">]</span> <span class=\"c1\">-- goals accomplished</span>\n</code></pre></div>",
        "id": 269400817,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643199050
    },
    {
        "content": "<blockquote>\n<p>The brackets are part of the syntax</p>\n</blockquote>\n<p>No they're not in Lean 4.  If you want to iterate multiple tactics, you can enclose them in parentheses like <code>iterate (rw [a]; simp)</code>.</p>",
        "id": 269400878,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643199109
    },
    {
        "content": "<p>Oh, yes that was all lean 3 info. I inferred as much from the docstring; if the lean 4 <code>iterate</code> says that then it needs a rewrite</p>",
        "id": 269421112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643207921
    },
    {
        "content": "<p>I can open a PR soon</p>",
        "id": 269517488,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643249928
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/173\">https://github.com/leanprover-community/mathlib4/pull/173</a></p>",
        "id": 269678546,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643337162
    },
    {
        "content": "<p>Following up after reading Yakov's interview (I've been with this question in my head for a few days), do we know the most wanted tactics for Mathlib4? I think an accessible/updated list like this could help outsiders jump in and help effectively</p>",
        "id": 270045927,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643641732
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> had a list somewhere, I think</p>",
        "id": 270046039,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643641776
    },
    {
        "content": "<p>The list is <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Mathport/Syntax.lean\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Mathport/Syntax.lean</a> : every <code>syntax</code> in that file is a TODO</p>",
        "id": 270068329,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643649378
    },
    {
        "content": "<p>We talked about having a more organized list, say ordered by difficulty or priority (usefulness for the port), but now I'm second guessing how to provide that information. Should it be a <code>tactic_wishlist.md</code> file separate from <code>Syntax.lean</code>? Or perhaps I could put comments like <code>-- expected difficulty: easy</code> on each of the syntax lines?</p>",
        "id": 270068792,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643649538
    },
    {
        "content": "<p>I think a separate markdown file linked from the main repo README allows more visibility. Then there's also the benefit of tweaking it without needing to change Lean source code</p>",
        "id": 270069451,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643649802
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/175\">https://github.com/leanprover-community/mathlib4/pull/175</a> getting used to it</p>",
        "id": 270143445,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643684056
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20status.3F/near/270068329\">said</a>:</p>\n<blockquote>\n<p>The list is <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Mathport/Syntax.lean\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Mathport/Syntax.lean</a> : every <code>syntax</code> in that file is a TODO</p>\n</blockquote>\n<p>Is a link to this file already posted as an issue somewhere?</p>",
        "id": 270157985,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643695731
    },
    {
        "content": "<p>Should there be a github project tracking these?</p>",
        "id": 270157990,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643695740
    },
    {
        "content": "<p>Like I said, I don't really know how to structure the issue. If you want to take a stab at it please post an issue on mathport or add a page on the leanprover community web site, and I will chip in to make the information as accurate as possible</p>",
        "id": 270170796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643705446
    },
    {
        "content": "<p>Actually I guess I didn't say, I must not have sent that message. It's hard to know what to say about all this stuff</p>",
        "id": 270170917,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643705501
    },
    {
        "content": "<p>I know nothing about tactic writing so shouldn't really be wading in here but I thought Yakov's suggestion in the community blog post \"choose a random file and get it working\" was an interesting one. It might be another way of deciding what to work on. I don't know how far we are from getting any file working at this point though. Does logic.basic get autotranslated yet?</p>",
        "id": 270174471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643707124
    },
    {
        "content": "<p>I've already done \"choose a random file and get it working\" for maybe 8 mathlib files or so</p>",
        "id": 270174690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643707220
    },
    {
        "content": "<p>working from the bottom, of course, so no fancy tactics were in use</p>",
        "id": 270174738,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643707241
    },
    {
        "content": "<p>Everything gets autotranslated, it's just a question of how many red squiggles you have to battle. I would guess that logic.basic isn't too bad, except for the fact that it is used for some initial mathlib tactic setup because it is \"that one file that literally everything imports\"</p>",
        "id": 270174995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643707337
    },
    {
        "content": "<p>and those tactics might not all be translated</p>",
        "id": 270175038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643707349
    },
    {
        "content": "<p>like <code>library_note</code></p>",
        "id": 270175057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643707355
    },
    {
        "content": "<p>Your \"get a random file working\" efforts are exactly what inspired me</p>",
        "id": 270175127,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643707381
    },
    {
        "content": "<p>There is a tension between making the theorems typecheck and preserving the original proofs though. When the file translation is goal directed (as I was), you might be tempted to just get the proofs working by a workaround for the issue of the day, which will later have to be cleaned up</p>",
        "id": 270175542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643707540
    },
    {
        "content": "<p>Not to derail the tactic topic -- but if we get a tiny rooted subbranch of some files working in mathlib4, we can suggest future mathlib3 PRs on the corresponding files to also port their PRs on this subbranch in mathlib4. It's not required, but could be a good way of helping surface new issues</p>",
        "id": 270175704,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643707607
    },
    {
        "content": "<p>I think we should strive for preserving the proofs, on the premise that those proofs are the way we want to be able to write proofs, so if lean 4 can't do it then that's a deficiency that we will feel even at t=infinity of the port</p>",
        "id": 270175723,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643707622
    },
    {
        "content": "<p>People rarely touch <code>logic.basic</code>and the like, and when they do, the changes are tiny -- so maybe they can try to also get them into mathlib4?</p>",
        "id": 270175790,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643707656
    },
    {
        "content": "<p>I don't know about asking a non-self-selected group of contributors to suddenly get involved in lean 4 porting</p>",
        "id": 270175998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643707735
    },
    {
        "content": "<p>Also the current version of Logic.Basic in mathlib4 is not very close to mathlib both content and style-wise.</p>",
        "id": 270176061,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643707768
    },
    {
        "content": "<blockquote>\n<p>I think we should strive for preserving the proofs, on the premise that those proofs are the way we want to be able to write proofs</p>\n</blockquote>\n<p>I disagree on the premise.  Mathlib proofs are 50% writing what you mean, and 50% making Lean happy.  Preserving <code>obtain</code>/<code>have</code>/etc. is certainly high priority, but spending effort on preserving <code>dsimp; simp</code> is imho wasted.</p>",
        "id": 270176458,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643707945
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20status.3F/near/270068329\">said</a>:</p>\n<blockquote>\n<p>The list is <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Mathport/Syntax.lean\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Mathport/Syntax.lean</a> : every <code>syntax</code> in that file is a TODO</p>\n</blockquote>\n<p>Is this file maintained manually, or generated/updated by some of the porting tools?</p>",
        "id": 270176549,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643708003
    },
    {
        "content": "<p>maintained manually</p>",
        "id": 270176570,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643708019
    },
    {
        "content": "<p>So when you see new tactics being added to mathlib, feel free to PR the syntax to mathlib4 (we also need to adapt mathport after that).</p>",
        "id": 270176668,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643708065
    },
    {
        "content": "<p>Hopefully we can use judgment to determine what part of mathlib proofs are not preservation-worthy. But I want to avoid this becoming a sour grapes argument where we get rid of stuff that is genuinely useful because we don't want to support it</p>",
        "id": 270176766,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643708120
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <a href=\"https://github.com/leanprover-community/mathlib4/pull/175#discussion_r796385559\">said</a>:</p>\n<blockquote>\n<p>I believe this function is called List.splitAt and is already in mathlib4.</p>\n</blockquote>\n<p>Indeed it's under <code>Data/List/Defs.lean</code>, but when I import it a lot of things tick red, so I'm not sure how to make use of it</p>",
        "id": 270207048,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643721494
    },
    {
        "content": "<p>That's because the extra import created a cyclic dependency.  I would split up the Tactic/Basic.lean file, it's too large anyhow.</p>",
        "id": 270211366,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643723081
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20status.3F/near/270175998\">said</a>:</p>\n<blockquote>\n<p>I don't know about asking a non-self-selected group of contributors to suddenly get involved in lean 4 porting</p>\n</blockquote>\n<p>Do you think something like a Google forms might help on getting a read on the community about this? Maybe there people interested in helping out but don't know how and don't want to bother with questions (just an exemplary hypothesis)</p>",
        "id": 270222286,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643726953
    },
    {
        "content": "<p>There are absolutely people like that. I've only checked the stream due to Kevin's comment in a 'Lean4' topic. I rarely use mathlib due to the nature of  the stuff I do with Lean (so it hasn't really occurred to me to check what's being done wrt. mathlib port), but 'porting the community over to Lean4' faster is valuable :).</p>",
        "id": 270482660,
        "sender_full_name": "František Silváši",
        "timestamp": 1643848873
    },
    {
        "content": "<p>Question: in Lean 3 we could have an argument like this: <code>(l : parse pexpr_list_or_texpr)</code> which would allow the user to enter an expression or a list of expressions and in the tactic definition we'd access it as a list. Is it still possible with Lean 4? I noticed that <code>rw</code> and <code>simp</code>, for instance, seem to always require a list of expressions like <code>rw [myTheorem]</code> and <code>rw myTheorem</code> doesn't work anymore</p>",
        "id": 270484499,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643850051
    },
    {
        "content": "<p>Yes, it's possible, that change was deliberate to make the syntax more regular</p>",
        "id": 270493054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643856322
    },
    {
        "content": "<p>note that lean 3 <code>simp</code> also does not accept a single lemma without brackets, only <code>rw</code></p>",
        "id": 270493087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643856359
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20status.3F/near/270493054\">said</a>:</p>\n<blockquote>\n<p>Yes, it's possible, that change was deliberate to make the syntax more regular</p>\n</blockquote>\n<p>Is this the new Mathlib4 standard?</p>",
        "id": 270493155,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643856402
    },
    {
        "content": "<p>It was a lean 4 core decision</p>",
        "id": 270493161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643856411
    },
    {
        "content": "<p>these tactics are defined in core</p>",
        "id": 270493174,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643856431
    },
    {
        "content": "<p>But I mean, is this style encouraged in Mathlib4 tactics as well?</p>",
        "id": 270493197,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643856453
    },
    {
        "content": "<p>I tried to keep a syntax consistent with lean 4 core tactics when possible, because users shouldn't have to worry about whether the tactic was defined in mathlib or core to guess the syntax</p>",
        "id": 270493289,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643856541
    },
    {
        "content": "<p>The reason that lean 3 <code>simp</code> couldn't take an unbracketed expression was because it did not work with the config argument, which has the syntax <code>simp [th1, th2] cfg</code></p>",
        "id": 270493382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643856613
    },
    {
        "content": "<p>I think if you let it parse an expression at the position of the brackets it will try interpreting <code>[th1, th2] cfg</code> as an expression (applying a list of terms to another term)</p>",
        "id": 270493424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643856673
    },
    {
        "content": "<p>this isn't an issue for <code>rw</code> because it doesn't have a cfg argument</p>",
        "id": 270493434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643856691
    },
    {
        "content": "<p>Got it. While I like a more regular syntax, I also miss writing <code>rw e</code></p>",
        "id": 270493445,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643856701
    },
    {
        "content": "<p>In lean 4, the cfg argument has moved to the start and has a different syntax, <code>simp (config := cfg) [th1, th2]</code> so this isn't a concern anymore</p>",
        "id": 270493495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643856724
    },
    {
        "content": "<p>I wouldn't be opposed to changing it but you should take it up with leo</p>",
        "id": 270493531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643856769
    },
    {
        "content": "<p>mathlib will follow whatever lean 4 core does here</p>",
        "id": 270493550,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643856796
    },
    {
        "content": "<p>i'm a very green Lean user so I'd rather see what more senior users think first</p>",
        "id": 270493655,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643856867
    },
    {
        "content": "<p>I'm gonna try writing <code>simp_rw</code> for Mathlib4 as my first 100% authorial tactic port</p>",
        "id": 270493875,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643857064
    },
    {
        "content": "<p>You shouldn't have to worry about syntax decisions for tactic porting since the work is already done in <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Mathport/Syntax.lean\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Mathport/Syntax.lean</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">simpRw</span><span class=\"o\">)</span> <span class=\"s2\">\"simp_rw \"</span> <span class=\"n\">rwRuleSeq</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n</code></pre></div>",
        "id": 270495014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643858084
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20status.3F/near/270493434\">said</a>:</p>\n<blockquote>\n<p>this isn't an issue for <code>rw</code> because it doesn't have a cfg argument</p>\n</blockquote>\n<p>But you <em>can</em> provide some sort of <code>cfg</code>, right? What with the <code>{ occs := ... }</code>?</p>",
        "id": 270497939,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643861196
    },
    {
        "content": "<p>Oh that's a good point. I just tested and <code>by rw [th] {}</code> parses as you would expect while <code>by rw th {}</code> tries to apply <code>{}</code> to <code>th</code>, which seems reasonable. Now I'm curious what would happen if we just tried the same thing for <code>simp</code></p>",
        "id": 270499069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643862346
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/178\">https://github.com/leanprover-community/mathlib4/pull/178</a></p>",
        "id": 270624238,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643925471
    },
    {
        "content": "<p>I couldn't figure out how to deal with <code>rwRuleSeq</code> when trying to port <code>simp_rw</code> so I ported other tactics instead.<br>\nGuidance on how to mimic <a href=\"https://github.com/leanprover-community/mathlib/blob/30a731ca565b92955e40274652f4c2b6f4db79f4/src/tactic/simp_rw.lean#L47\">this behavior</a> is appreciated <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 270625059,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643925817
    },
    {
        "content": "<p>do you have a WIP that I can play with?</p>",
        "id": 270625493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643926010
    },
    {
        "content": "<p>Nope... I didn't go much further than defining an <code>elab</code> and getting stuck in the first line of code <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 270626495,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643926446
    },
    {
        "content": "<p>The hard part seems to be getting the positional goal state display right. Otherwise it looks like this can be implemented as a macro tactic</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">simpRw</span><span class=\"o\">)</span> <span class=\"s2\">\"simp_rw \"</span> <span class=\"n\">rws</span><span class=\"o\">:</span><span class=\"n\">rwRuleSeq</span> <span class=\"n\">loc</span><span class=\"o\">:(</span><span class=\"n\">ppSpace</span> <span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">loc</span> <span class=\"o\">:=</span> <span class=\"n\">loc.getOptional</span><span class=\"bp\">?</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"bp\">←</span> <span class=\"n\">rws</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">getSepArgs.mapM</span> <span class=\"k\">fun</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">rwRule</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">simp</span><span class=\"bp\">%$</span><span class=\"n\">e</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">loc</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">rwRule</span><span class=\"bp\">|</span> <span class=\"bp\">←%$</span><span class=\"n\">tk</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">simp</span><span class=\"bp\">%$</span><span class=\"n\">tk</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">loc</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Macro.throwUnsupported</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">stx</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 270630915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643928848
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 270660933,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643942932
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> let me know if you really think we should enhance <code>swap</code> and <code>rotate</code> with that <a href=\"https://github.com/leanprover-community/mathlib4/pull/178#issuecomment-1029486400\">idea of yours</a> at this point</p>",
        "id": 270662471,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643944393
    },
    {
        "content": "<p>I don't see any reason not to, I can help you with the implementation if you like</p>",
        "id": 270662559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643944465
    },
    {
        "content": "<p>My only point of doubt is making the optional <code>&lt;-</code> argument</p>",
        "id": 270662619,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643944540
    },
    {
        "content": "<p>Quick poll: should the syntax for moving the <code>n</code>th-to-last goal to the front be called <code>swap &lt;- n</code> or <code>swap -n</code>? Ditto for <code>rotate &lt;- n</code> vs <code>rotate -n</code> for rotating left instead of the default right</p>",
        "id": 270662678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643944576
    },
    {
        "content": "<p><code>-n</code> seems more natural to me.</p>",
        "id": 270662717,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1643944644
    },
    {
        "content": "<p>actually <code>-n</code> is faster so i'm changing my mind</p>",
        "id": 270662733,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643944681
    },
    {
        "content": "<p>(but I still would like to know how to make the optional <code>&lt;-</code> parameter for the syntax)</p>",
        "id": 270662811,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643944746
    },
    {
        "content": "<p>To parse this, you would do <code>syntax \"rotate\" \"-\"? num : tactic</code></p>",
        "id": 270662813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643944749
    },
    {
        "content": "<p>wait, so <code>rotate -1</code> and <code>rotate - 1</code> would have the same behavior?</p>",
        "id": 270662834,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643944778
    },
    {
        "content": "<p>with possible <code>ppSpace</code> in there to make things print nicely</p>",
        "id": 270662835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643944780
    },
    {
        "content": "<p>yes</p>",
        "id": 270662836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643944784
    },
    {
        "content": "<p><code>num</code> doesn't accept negatives IIRC</p>",
        "id": 270662881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643944806
    },
    {
        "content": "<p>if that's what you're worried about</p>",
        "id": 270662892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643944814
    },
    {
        "content": "<p>I was hoping it would accept negatives</p>",
        "id": 270662913,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643944846
    },
    {
        "content": "<p>that is, I don't think \"negative literals\" are a thing</p>",
        "id": 270662919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643944851
    },
    {
        "content": "<p>num is basically the <code>[0-9]+</code> regex</p>",
        "id": 270662927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643944864
    },
    {
        "content": "<p>i'll do the adjustments tomorrow <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 270662928,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643944865
    },
    {
        "content": "<p>(not really, there are other base inputs but you get the idea)</p>",
        "id": 270662945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643944890
    },
    {
        "content": "<p>what about the left arrow? how to get that in the syntax?</p>",
        "id": 270663045,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643945013
    },
    {
        "content": "<p>(just so I can learn)</p>",
        "id": 270663048,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643945024
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20status.3F/near/270662927\">said</a>:</p>\n<blockquote>\n<p>num is basically the <code>[0-9]+</code> regex</p>\n</blockquote>\n<p>Fyi, its not just decimal numbers, it also includes hex, octal, and binary.</p>",
        "id": 270663549,
        "sender_full_name": "Mac",
        "timestamp": 1643945614
    },
    {
        "content": "<p>that was the parenthetical</p>",
        "id": 270663649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643945744
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20status.3F/near/270663045\">said</a>:</p>\n<blockquote>\n<p>what about the left arrow? how to get that in the syntax?</p>\n</blockquote>\n<p>just replace <code>\"-\"</code> with <code>\"←\"</code></p>",
        "id": 270663715,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643945801
    },
    {
        "content": "<p>or <code>(\"←\" &lt;|&gt; \"&lt;-\")</code> for the ascii artists</p>",
        "id": 270663731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643945829
    },
    {
        "content": "<p>or <code>(\"-\" &lt;|&gt; \"←\" &lt;|&gt; \"&lt;-\")</code> if you want to be indecisive</p>",
        "id": 270663756,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643945874
    },
    {
        "content": "<p>This one is in <code>Syntax.lean</code> but seems to be already implemented:<br>\n<code>syntax (name := ext) \"ext\" (ppSpace ident)? : attr</code></p>",
        "id": 270796686,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644025619
    },
    {
        "content": "<p>Ah, that's true, <code>ext</code> in lean 4 core is most similar to lean 3 <code>funext</code>, so you will have to rename the mathlib <code>ext</code> tactic to <code>ext'</code></p>",
        "id": 270796909,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644025835
    },
    {
        "content": "<p>actually scratch that, the syntax you wrote isn't the syntax for <code>ext</code></p>",
        "id": 270796946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644025884
    },
    {
        "content": "<p>I think what happened is that someone implemented a basic form of <code>ext</code> but the syntax doesn't match the full mathlib <code>ext</code> grammar so the original syntax was kept in the <code>Syntax.lean</code> file for mathport to use</p>",
        "id": 270797022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644025931
    },
    {
        "content": "<p>Ah, okay</p>",
        "id": 270797033,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644025946
    },
    {
        "content": "<p>I think the first thing to do is to make mathlib4 <code>ext</code> use the <code>Syntax.lean</code> grammar without implementing the extra bells and whistles just yet</p>",
        "id": 270797055,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644025975
    },
    {
        "content": "<p>just fail if the input isn't an ident</p>",
        "id": 270797066,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644025990
    },
    {
        "content": "<p>although that's also going to involve rcases since mathlib <code>ext</code> uses rcases patterns</p>",
        "id": 270797087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644026027
    },
    {
        "content": "<p>I'm trying to pick the ones with a good trade-off between learning and difficulty</p>",
        "id": 270797257,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644026180
    },
    {
        "content": "<p>I will look into <code>rcases</code> myself, it's one of the more complicated ones. You shouldn't have to interact with it beyond the syntax, which I guess is already extracted into a file in mathlib4</p>",
        "id": 270797319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644026263
    },
    {
        "content": "<p>I'm going to try <code>set</code> next</p>",
        "id": 270798327,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644027368
    },
    {
        "content": "<p>Forgot to say that <code>simp_rw</code> is ready for review: <a href=\"https://github.com/leanprover-community/mathlib4/pull/180\">https://github.com/leanprover-community/mathlib4/pull/180</a></p>",
        "id": 270839747,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644083233
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Tactic.20status.3F/near/270493054\">said</a>:</p>\n<blockquote>\n<p>Yes, it's possible, that change was deliberate to make the syntax more regular</p>\n</blockquote>\n<p>So, I'm implementing <code>use</code> and I'm sitting in front of this question again. In mathlib one can do <code>use e</code> or <code>use [e1, e2, ...]</code>. Are we going to restrict the syntax to <code>use [...]</code>?</p>",
        "id": 270889888,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644154035
    },
    {
        "content": "<p>(BTW I'm not asking Mario specifically so everyone's input is welcome)</p>",
        "id": 270891863,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644156521
    },
    {
        "content": "<p>Probably unrelated to the argument syntax, but on the topic of <code>use</code>, I hope the error handling can be improved over the Lean 3 version</p>",
        "id": 270892305,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644157098
    },
    {
        "content": "<p>Hmm, based on a quick grep, <code>use e</code> seems to be used maybe 5 times as often as <code>use [..]</code> (very rough count, because \"use\" occurs a lot on comments as well). While talking about the syntax, often when I use <code>use [..]</code>, I end up rewriting it as <code>refine ⟨..⟩</code> and the difference in braces is a minor annoyance. Maybe <code>use</code> could use <code>⟨..⟩</code>as well?</p>",
        "id": 270892563,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1644157462
    },
    {
        "content": "<p>yeah, I really don't know why we have <code>use</code> when compared to <code>refine</code>. we could make <code>use \\&lt;a,b,c\\&gt;</code> be a shortcut for <code>refine \\&lt;a,b,c,_,_...\\&gt;</code>, which I'd be in favour of</p>",
        "id": 270893126,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644158192
    },
    {
        "content": "<p>I'm not sure, but I think that <code>use</code> does some form of <code>refl</code>, besides what is achieved by <code>refine ...</code>, but, honestly, this something that I only observed rarely.</p>",
        "id": 270893868,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1644159324
    },
    {
        "content": "<p>I think a lot of the unpredictability of use (and bad error messages) is because it is not equivalent to that refine.  The following two examples both work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">×</span> <span class=\"n\">string</span><span class=\"o\">,</span> <span class=\"n\">x.1</span> <span class=\"bp\">=</span> <span class=\"n\">x.2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"s2\">\"a\"</span><span class=\"o\">,</span> <span class=\"s2\">\"a\"</span><span class=\"o\">]</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">×</span> <span class=\"n\">string</span><span class=\"o\">,</span> <span class=\"n\">x.1</span> <span class=\"bp\">=</span> <span class=\"n\">x.2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">use</span> <span class=\"o\">[(</span><span class=\"s2\">\"a\"</span><span class=\"o\">,</span> <span class=\"s2\">\"a\"</span><span class=\"o\">)]</span>\n</code></pre></div>",
        "id": 270894463,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644160100
    },
    {
        "content": "<p>(Originally I wanted to use <code>ℕ</code> instead of <code>string</code>, but that shows a different behavior since <code>0</code> coerces to <code>ℕ × ℕ</code>)</p>",
        "id": 270894509,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644160198
    },
    {
        "content": "<p>I have the impression that the poor error handling of <code>use</code> is related to this flexibility, but I don't have a good understanding of the situation because I found it was easier to just use <code>refine</code> all the time</p>",
        "id": 270894565,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644160253
    },
    {
        "content": "<p>Oh wow I never realized that <code>use</code> would try to recurse into the \"left\" side like that. That does make more sense now.</p>",
        "id": 270895393,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644161414
    },
    {
        "content": "<p><code>use</code> was written after me and possibly others complained that mathematician users wanted a simple tactic to make progress on <code>\\exists</code> goals which was better than <code>existsi</code>, which would for example barf on <code>existsi 0</code> if the goal was <code>\\exists (r : real), ...</code>. It's a great beginner tactic for people who aren't ready to start partially solving goals with refine and who have no concept of constructors for inductive types</p>",
        "id": 270896810,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644163290
    },
    {
        "content": "<p>That seems reasonable enough, but I don't know where the \"<code>∃ (x : α × β), ...</code> should take either one or two arguments depending on what works\" behavior came from.</p>",
        "id": 270896968,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644163454
    },
    {
        "content": "<p>To me, if I'm trying to prove <code>∃ (x : α × β), ...</code>, I'd expect <code>use</code> to accept something like <code>(a, b)</code>. <code>use [a, b]</code> seems a bit odd to me</p>",
        "id": 270897150,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644163692
    },
    {
        "content": "<p>This feature of <code>use</code> was requested by Mario way back in <a href=\"https://github.com/leanprover-community/mathlib/pull/486\">#486</a> and added in <a href=\"https://github.com/leanprover-community/mathlib/pull/497\">#497</a></p>",
        "id": 270897774,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1644164599
    },
    {
        "content": "<p>(Remember when tactic docs lived in <code>tactics.md</code>?)</p>",
        "id": 270897786,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1644164622
    },
    {
        "content": "<p>what, I can't believe I suggested that</p>",
        "id": 270897910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644164780
    },
    {
        "content": "<p>\"Requested\" might be a strong word, to be fair</p>",
        "id": 270897938,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1644164841
    },
    {
        "content": "<p>So that makes it two questions:</p>\n<ul>\n<li>Do we want to restrict the syntax to <code>use [...]</code>?</li>\n<li>Do we want <code>use</code> to keep that \"<code>Prod</code>-destructing\" behavior?</li>\n</ul>",
        "id": 270898284,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644165312
    },
    {
        "content": "<p>While we don't have those answers, here goes <code>use</code> in its simplest form:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/184\">https://github.com/leanprover-community/mathlib4/pull/184</a></p>",
        "id": 270914122,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644184659
    },
    {
        "content": "<p>An update on my tactics porting effort: I've looked through the remaining tactics and I noticed that they are no longer easy enough for me. And while I'm on a trip visiting my family, I am also waiting for some content from <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span>'s metaprogramming guide, which I'm sure will be helpful to get more tactics ported to Mathlib4.</p>\n<p>Jannis, the scope for the guide ended up pretty big so here's an idea: I wouldn't hesitate to start off a mdbook skeleton and then invite the community to help. I know how big scopes can be daunting to face alone!</p>",
        "id": 273640066,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1646141446
    }
]