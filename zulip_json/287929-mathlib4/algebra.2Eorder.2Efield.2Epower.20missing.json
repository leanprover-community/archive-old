[
    {
        "content": "<p>Not quite sure what's going on here. Currently <code>./scripts/port_status.py</code> is reporting <code>algebra.order.absolute_value</code> as ready for porting so I claimed it. But the autoported file is barfing on the notation <code>→ₙ*</code>, which in Lean 3 is notation for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_hom\">docs#mul_hom</a> , defined in <code>algebra.hom.group</code> which does not seem to have been ported. </p>\n<p>Digging a little further it seems that in mathlib3, <code>algebra.order.absolute_value</code> imports <code>algebra.order.hom.basic</code> which imports <code>tactic.positivity</code>; so far so good, and we have <code>Mathlib.Tactic.Positivity</code> in mathlib4. However in mathlib3 <code>tactic.positivity</code> imports <code>algebra.order.field.power</code> (because it uses <code>zpow_bit0_nonneg</code>, presumably deprecated in Lean 4) and this latter file has not yet been ported to mathlib4 as far as I can see; in mathlib4 this import is avoided. But I think that this means that actually <code>algebra.order.absolute_value</code> is not at all ready for porting. Is my diagnosis correct and, if it is, how should I indicate this to the system?</p>",
        "id": 311829404,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669211319
    },
    {
        "content": "<p>See previous discussion here: <a href=\"#narrow/stream/287929-mathlib4/topic/port.20progress/near/311248898\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/port.20progress/near/311248898</a></p>",
        "id": 311830177,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1669211581
    },
    {
        "content": "<p>Short term, you could add some explicit imports on the mathlib3 side; medium term the script should pick this up, I think</p>",
        "id": 311830375,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1669211635
    },
    {
        "content": "<p>Adding the explicit import seems totally reasonable on the mathlib3 side</p>",
        "id": 311832829,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669212411
    },
    {
        "content": "<p>Yes. The <code>leanproject import-graph --exclude-tactics</code> jumps through some hoops to remember transitive imports as it removes vertices corresponding to tactics files. However <code>port_status.py</code> doesn't.</p>",
        "id": 311838081,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669213982
    },
    {
        "content": "<p>Clearly the right solution here is to replace <code>./scripts/port_status.py</code> with <code>leanproject port-status</code>, so we don't have independent calculations of the \"ready\" set.</p>",
        "id": 311843666,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669215713
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib-tools/pull/146\">https://github.com/leanprover-community/mathlib-tools/pull/146</a> will be a prerequisite for that, currently <code>leanproject</code> doesn't parse as much of the file as <code>port_status</code> does</p>",
        "id": 311844968,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669216073
    },
    {
        "content": "<p>Also, <code>leanproject</code> is really slow, because it runs <code>lean --deps</code> a million times, where <code>port_status.py</code> just parses text files.</p>",
        "id": 311846348,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669216528
    },
    {
        "content": "<p>I wonder if <code>lean --deps</code> is actually necessary now that we have normalised all the import lines in mathlib.</p>",
        "id": 311846401,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669216546
    },
    {
        "content": "<p>I think it used to be necessary because people wrote multiple imports on lines, etc.</p>",
        "id": 311846453,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669216561
    },
    {
        "content": "<p><code>leanproject import_graph</code> isn't just for mathlib, so it ought to deal with things written not in the mathlib style</p>",
        "id": 311846679,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669216620
    },
    {
        "content": "<p>Are you happy with <a href=\"https://github.com/leanprover-community/mathlib/pull/17620\">https://github.com/leanprover-community/mathlib/pull/17620</a>? It will need a mathlibtools release to unbreak people</p>",
        "id": 311847114,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669216740
    },
    {
        "content": "<p>Re: <a href=\"https://github.com/leanprover-community/mathlib-tools/pull/146\">https://github.com/leanprover-community/mathlib-tools/pull/146</a>, won't the comments fields you extract here be clobbered by the <code>port_status()</code> function, which write \"ready\" without looking?</p>",
        "id": 311847477,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669216840
    },
    {
        "content": "<p>Oh, I hadn't realized that the <code>FileStatus</code> objects were mutated later on</p>",
        "id": 311847917,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669216972
    },
    {
        "content": "<p>Maybe <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> can advise what the <code>comments</code> field was intended for</p>",
        "id": 311848243,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669217061
    },
    {
        "content": "<p>I think we should just have a separate \"ready\" field!</p>",
        "id": 311848305,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669217084
    },
    {
        "content": "<p>Or just keep a separate <code>is_ready[filestatus]</code> dictionary around inside <code>port_status</code> rather than attaching extra state to <code>FileStatus</code> that is sometimes uninitialized</p>",
        "id": 311848676,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669217189
    },
    {
        "content": "<p>The mutation is only for the graph display, it doesn't end up reserializing the mutated FileStatus anywhere.</p>",
        "id": 311866633,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1669222699
    },
    {
        "content": "<p>If you do keep the <code>is_ready</code> as a separate dictionary, the coloring code/logic now has to look in several places -- that's why I kept it localized to the FileStatus for now</p>",
        "id": 311866727,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1669222738
    },
    {
        "content": "<p>the <code>comments</code> field was intended for the various additional text that users had put in the yaml, like <code>WIP</code> or <code>claimed by Foo Bar</code></p>",
        "id": 311866791,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1669222765
    },
    {
        "content": "<p>I think that's what my PR put in those fields, so it sounds like I did that right at least</p>",
        "id": 311875367,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669225738
    }
]