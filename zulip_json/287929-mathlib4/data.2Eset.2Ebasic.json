[
    {
        "content": "<p>Please can people not port <code>data.set.basic</code>? I am working on splitting it up (part of the motivation is previous discussions here and the other part is in <a href=\"https://github.com/leanprover-community/mathlib/pull/17801\">#17801</a>).</p>",
        "id": 313616888,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670029553
    },
    {
        "content": "<p>It's very much on the porting radar so I would recommend prioritising it, doing nothing in the PR other than splitting it, and asking for a speedy merge when you're ready.</p>",
        "id": 313617015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670029624
    },
    {
        "content": "<p>Yeah, I know and I will try, but I need some <span aria-label=\"zzz\" class=\"emoji emoji-1f4a4\" role=\"img\" title=\"zzz\">:zzz:</span> first</p>",
        "id": 313617172,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670029737
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>, how soon do you think you can have your PR in by?</p>",
        "id": 313617178,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670029738
    },
    {
        "content": "<p>Sleep first. :-)</p>",
        "id": 313617203,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670029760
    },
    {
        "content": "<p>In 24±ε hours</p>",
        "id": 313617214,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670029768
    },
    {
        "content": "<p>Update: I'm waiting for <a href=\"https://github.com/leanprover-community/mathlib/pull/17805\">#17805</a> (some cleanup that's easier to do once than twice) before performing the actual split. I already tried a prototype split in local and it seems to go down well.</p>",
        "id": 313736909,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670104227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> build seems to be failing in 17805</p>",
        "id": 313738163,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1670105251
    },
    {
        "content": "<p>Feel free to fix. I'm off for the next couple of hours</p>",
        "id": 313738707,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670105549
    },
    {
        "content": "<p>/me is starting the actual split</p>",
        "id": 313930846,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670235996
    },
    {
        "content": "<p>Here's the PR: <a href=\"https://github.com/leanprover-community/mathlib/pull/17825\">#17825</a>. Beware it's a complete mess still. I'm gonna do something else for the next few hours because I exhausted my productivity.</p>",
        "id": 313981153,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670249088
    },
    {
        "content": "<p>I'm happy to take comments but please don't touch it yet. I have enough to wrangle with myself.</p>",
        "id": 313981277,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670249122
    },
    {
        "content": "<p>I am working on data.set.basic. What would you suggest?</p>",
        "id": 314075691,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1670258530
    },
    {
        "content": "<p>I am actually waiting for <code>data.order.symm_diff</code></p>",
        "id": 314075830,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1670258573
    },
    {
        "content": "<p>This file probably can't be ported just yet, we need to wait for <a href=\"https://github.com/leanprover-community/mathlib/pull/17825\">#17825</a> to land.</p>",
        "id": 314075938,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1670258602
    },
    {
        "content": "<p>but symm_diff only depends on boolean_algebra</p>",
        "id": 314076199,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1670258672
    },
    {
        "content": "<p>and that has been ported as of two or three days ago.</p>",
        "id": 314076265,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1670258693
    },
    {
        "content": "<p>If you want to contribute to the port, may I suggest you first try porting a file that's less critical?</p>",
        "id": 314076581,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670258765
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/842\">mathlib4#842</a> has been approved to merge <code>data.order.symm_diff</code>, but bors is a bit broken so it hasn't been merged yet.</p>",
        "id": 314076671,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1670258788
    },
    {
        "content": "<p>At any rate, please nobody port <code>data.set.basic</code> yet.</p>",
        "id": 314076796,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670258822
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/data.2Eset.2Ebasic/near/314076581\">said</a>:</p>\n<blockquote>\n<p>If you want to contribute to the port, may I suggest you first try porting a file that's less critical?</p>\n</blockquote>\n<p>Okay. Could you suggest where I might begin? I am a CS theorist in training (i.e. doing my PhD). My interests go towards combinatorics, graphs theory, computability etc, and at least some of the relevant files rely on data.set</p>",
        "id": 314078024,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1670259158
    },
    {
        "content": "<p>Have you looked at what files are currently available?</p>",
        "id": 314078143,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670259196
    },
    {
        "content": "<p>I checked <a href=\"https://math.commelin.net/files/port_status.html\">https://math.commelin.net/files/port_status.html</a> <br>\nOf the files that have had their immediate dependencies ported, it appears all are taken. Before reading this conversation, I was waiting for order.symm_diff to go through before porting data.set.basic</p>",
        "id": 314078499,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1670259288
    },
    {
        "content": "<p>Here's a more up to date one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span> <span class=\"n\">The</span> <span class=\"n\">following</span> <span class=\"n\">files</span> <span class=\"k\">have</span> <span class=\"n\">all</span> <span class=\"n\">dependencies</span> <span class=\"n\">ported</span> <span class=\"n\">already</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"n\">should</span> <span class=\"n\">be</span> <span class=\"n\">ready</span> <span class=\"n\">to</span> <span class=\"n\">port</span><span class=\"o\">:</span>\n<span class=\"bp\">#</span> <span class=\"n\">Earlier</span> <span class=\"n\">items</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">list</span> <span class=\"n\">are</span> <span class=\"n\">required</span> <span class=\"k\">in</span> <span class=\"n\">more</span> <span class=\"n\">places</span> <span class=\"k\">in</span> <span class=\"n\">mathlib.</span>\n<span class=\"n\">control.traversable.basic</span>    <span class=\"c1\">-- mathlib4#788 @kbuzzard 1fc36cc9c8264e6e81253f88be7fb2cb6c92d76a</span>\n<span class=\"n\">algebra.divisibility.basic</span>    <span class=\"c1\">-- mathlib4#833 70d50ecfd4900dd6d328da39ab7ebd516abe4025</span>\n<span class=\"n\">lean_core.data.vector</span>    <span class=\"c1\">-- mathlib4#834 e574b1a4e891376b0ef974b926da39e05da12a06</span>\n<span class=\"n\">data.string.basic</span>    <span class=\"c1\">-- WIP @javra</span>\n<span class=\"n\">data.nat.bits</span>\n<span class=\"n\">control.bifunctor</span>    <span class=\"c1\">-- mathlib4#809 62a5626868683c104774de8d85b9855234ac807c</span>\n<span class=\"n\">category_theory.functor.fully_faithful</span>    <span class=\"c1\">-- WIP mathlib4#846 70d50ecfd4900dd6d328da39ab7ebd516abe4025</span>\n<span class=\"n\">category_theory.bicategory.basic</span>    <span class=\"c1\">-- Depending on slice tactic</span>\n<span class=\"n\">algebra.group.ext</span>    <span class=\"c1\">-- mathlib4#850 e574b1a4e891376b0ef974b926da39e05da12a06</span>\n<span class=\"n\">data.stream.init</span>    <span class=\"c1\">-- mathlib4#849 e574b1a4e891376b0ef974b926da39e05da12a06</span>\n<span class=\"n\">data.rbtree.init</span>    <span class=\"c1\">-- WIP @digama</span>\n<span class=\"n\">data.typevec</span>    <span class=\"c1\">-- WIP j-loreaux</span>\n<span class=\"n\">control.monad.writer</span>\n<span class=\"n\">data.rbtree.default_lt</span>    <span class=\"c1\">-- WIP @digama</span>\n<span class=\"n\">category_theory.category.Kleisli</span>    <span class=\"c1\">-- WIP mathlib4#843 70d50ecfd4900dd6d328da39ab7ebd516abe4025</span>\n<span class=\"n\">lean_core.data.buffer.parser</span>\n<span class=\"n\">data.two_pointing</span>    <span class=\"c1\">-- WIP Yaël</span>\n<span class=\"n\">data.vector3</span>    <span class=\"c1\">-- WIP Thomas mathlib4#633 fd47bdf09e90f553519c712378e651975fe8c829</span>\n<span class=\"n\">lean_core.data.dlist</span>\n<span class=\"n\">data.erased</span>\n<span class=\"n\">data.json</span>\n<span class=\"n\">data.mllist</span>    <span class=\"c1\">-- probably not needed</span>\n<span class=\"n\">data.nat.even_odd_rec</span>\n<span class=\"n\">data.sigma.default</span>    <span class=\"c1\">-- do not port default files</span>\n<span class=\"n\">algebra.group_with_zero.default</span>    <span class=\"c1\">-- do not port default files</span>\n<span class=\"n\">algebra.ring.default</span>    <span class=\"c1\">-- do not port default files</span>\n<span class=\"n\">combinatorics.quiver.push</span>\n<span class=\"n\">lean_core.algebraic_geometry.EllipticCurve</span>\n\n<span class=\"bp\">#</span> <span class=\"n\">The</span> <span class=\"n\">following</span> <span class=\"n\">files</span> <span class=\"k\">have</span> <span class=\"n\">their</span> <span class=\"n\">immediate</span> <span class=\"n\">dependencies</span> <span class=\"n\">ported</span> <span class=\"n\">already</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"n\">may</span> <span class=\"n\">be</span> <span class=\"n\">ready</span> <span class=\"n\">to</span> <span class=\"n\">port</span><span class=\"o\">:</span>\n<span class=\"n\">order.hom.basic</span>    <span class=\"c1\">-- please adopt mathlib4#804 62a5626868683c104774de8d85b9855234ac807c</span>\n<span class=\"n\">order.symm_diff</span>    <span class=\"c1\">-- mathlib4#842 6eb334bd8f3433d5b08ba156b8ec3e6af47e1904</span>\n<span class=\"n\">algebra.group.type_tags</span>    <span class=\"c1\">-- mathlib4#832 6eb334bd8f3433d5b08ba156b8ec3e6af47e1904</span>\n<span class=\"n\">algebra.order.monoid.with_zero.defs</span>    <span class=\"c1\">-- mathlib4#851 dad7ecf9a1feae63e6e49f07619b7087403fb8d4</span>\n<span class=\"n\">algebra.hom.equiv.basic</span>    <span class=\"c1\">-- mathlib4#835 76171581280d5b5d1e2d1f4f37e5420357bdc636</span>\n<span class=\"n\">data.sigma.order</span>    <span class=\"c1\">-- WIP j-loreaux</span>\n<span class=\"n\">order.heyting.boundary</span>    <span class=\"c1\">-- mathlib4#844 70d50ecfd4900dd6d328da39ab7ebd516abe4025</span>\n</code></pre></div>",
        "id": 314078560,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1670259308
    },
    {
        "content": "<p>Yaël, I'm not seeing the mathlib4 companion pr to  <a href=\"https://github.com/leanprover-community/mathlib/pull/17825\">#17825</a> yet, when do you think you'll have it ready?</p>",
        "id": 314078605,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1670259331
    },
    {
        "content": "<p>Given you have a CS background, maybe the things in <code>data</code> or <code>control</code> might be more accessible to you.</p>",
        "id": 314078686,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1670259358
    },
    {
        "content": "<p>I will open it once I got <a href=\"https://github.com/leanprover-community/mathlib/pull/17825\">#17825</a> to compile. I'm not a great fan of work duplication!</p>",
        "id": 314078762,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670259376
    },
    {
        "content": "<p>... also because I will need to port some of <code>data.set.basic</code> while doing so.</p>",
        "id": 314079225,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670259514
    },
    {
        "content": "<p>Just to be clear: are you going to expand the scope of your block further after this?</p>",
        "id": 314080182,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1670259741
    },
    {
        "content": "<p>I am not planning to, no.</p>",
        "id": 314080329,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670259776
    },
    {
        "content": "<p>If data.set.basic is t<br>\n<span class=\"user-mention silent\" data-user-id=\"492774\">Sky Wilshaw</span> <a href=\"#narrow/stream/287929-mathlib4/topic/data.2Eset.2Ebasic/near/314078686\">said</a>:</p>\n<blockquote>\n<p>Given you have a CS background, maybe the things in <code>data</code> or <code>control</code> might be more accessible to you.</p>\n</blockquote>\n<p>I think I will take up <code>data.nat.bits</code> then. I'd be happy to help with files under <code>data.set</code> too because from a theorist's point of view, these appear to be the most important for graph theory and combinatorics.</p>",
        "id": 314080579,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1670259843
    },
    {
        "content": "<p>I can tell you that the most important files for combinatorics are rather the ones involving <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset\">docs#finset</a>, but we're far from it still!</p>",
        "id": 314080738,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670259897
    },
    {
        "content": "<p>As far as I'm aware, there are some changes from Lean 3 to Lean 4 involving <code>bit0</code> and <code>bit1</code> - I'd ask some others for advice on this.</p>",
        "id": 314081134,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1670260009
    },
    {
        "content": "<p>okay, in that case I'd like to remove the WIP for data.set.basic in the port status file. But I don't seem to have the permission to edit the wiki. What's the process to get this?</p>",
        "id": 314082804,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1670260470
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"492774\">Sky Wilshaw</span> <a href=\"#narrow/stream/287929-mathlib4/topic/data.2Eset.2Ebasic/near/314081134\">said</a>:</p>\n<blockquote>\n<p>As far as I'm aware, there are some changes from Lean 3 to Lean 4 involving <code>bit0</code> and <code>bit1</code> - I'd ask some others for advice on this.</p>\n</blockquote>\n<p>Thanks, I will open a separate thread for this.</p>",
        "id": 314082909,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1670260497
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466334\">@Shreyas Srinivas</span> I'm really sorry that it's difficult for you to find something to do. There is a lot of stuff going on which those \"in the know\" know about (e.g. the complications with <code>data.set.basic</code> and the fact that <code>data.nat.bits</code> is kind of being ignored because we don't know exactly what form we want it to be in in Lean 4). If you want some advice about where to find files to port, here's the algorithm I'm using.</p>\n<p>1) Look at the pdfs being generated by a bot in the \"port progress\" thread in this <a class=\"stream\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4\">#mathlib4</a> stream.<br>\n2) Choose a goal which we're making progress on, or a goal you're interested in.<br>\n3) Take a look at the linked pdf and see where the boundary is (green files are done, blue files are being worked on, white files are not done) and then check in the port-status wiki page and perhaps also glance through the open PRs in mathlib4 and also perhaps search this site for the name of the file just to check there are no problems with it.<br>\n4) Claim that file by editing the wiki page, making a branch in mathlib4, copying the autoported effort from mathlib3port, pushing to github and stating the mathlib3 commit (taken from the mathlib3port readme) in your first message on github about the file. <br>\n5) Get stuck in, and if you get stuck then create a new thread here in the mathlib4 stream with questions (questions are answered more quickly on Zulip than on github). </p>\n<p>Good luck! You'll need push access to non-master branches in both mathlib3 and mathlib4; to do that you'll need to ask a maintainer for push rights to non-master branches of these repos and they'll need to know your github userid.</p>",
        "id": 314114627,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670270550
    },
    {
        "content": "<p>I think the biggest current difficulty (at least, from my limited perspective!) is the small number of available files. Because we're so early on in the port, I managed to port loads of files at the end of last week but since have found it really hard to make progress after I'd finished the easy ones.</p>",
        "id": 314127538,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1670275560
    },
    {
        "content": "<p>My hope is that after we finish data.set.basic and algebra.order.field.defs, the amount of free files should start increasing.</p>",
        "id": 314127997,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1670275700
    },
    {
        "content": "<p>I'm pretty concerned that this PR is going to hold everything up, at the worst possible time. (People are waiting to port this file, and it is on the critical path for the targets that we need to have done in the next two weeks so people preparing courses using Lean4 can do their course prep!)</p>",
        "id": 314146476,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670283605
    },
    {
        "content": "<p>I think we need to get this PR compiling and linting asap, and to prepare the mathlib4 port, which may require considerable work. I'll try to come back to this later today, but if anyone wants to fix the linting issues and downstream problems with missing imports, that would be great.</p>",
        "id": 314146631,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670283690
    },
    {
        "content": "<p>Yeah I'm putting as much time as I can into it. Hopefully the split will be ready by  this evening and compiling by the end of tomorrow.</p>",
        "id": 314157938,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670291103
    },
    {
        "content": "<p>Just to give <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> a sense of urgency. There are only six files in mathlib4 right now that are ready to be ported (i.e. all dependencies are ported) and aren't currently part of an open PR. There isn't really very much left to do that does not depend on <code>data.set.basic</code>.</p>",
        "id": 314300860,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1670352376
    },
    {
        "content": "<p>I've been trying for the past two hours to work on it from the Eurostar, but alas it just never loaded <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 314301178,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670352473
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/data.2Eset.2Ebasic/near/313617015\">said</a>:</p>\n<blockquote>\n<p>It's very much on the porting radar so I would recommend prioritising it, doing nothing in the PR other than splitting it, and asking for a speedy merge when you're ready.</p>\n</blockquote>\n<p>Maybe you could switch to a more modest PR, along the lines of Kevin's advice.  If I understand correctly you are currently doing a refactor (of <code>order/monotone</code>) as well as a split.</p>",
        "id": 314301712,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1670352624
    },
    {
        "content": "<p>Yes, this is needed to insert the coe to sort coercion before <code>order.monotone</code></p>",
        "id": 314304126,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670353298
    },
    {
        "content": "<p>There are already available subplits in the form of <code>data.set.image</code>, but they won't help with the port because those will be new files <em>after</em> <code>data.set.basic</code></p>",
        "id": 314304492,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670353392
    },
    {
        "content": "<p>If somebody wants to PR those subsplits independently, please do so! They are basically ready (just need module docs) and will fluidify the rest of the split (by having less downstream imports that need fixing).</p>",
        "id": 314304937,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670353512
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/data.2Eset.2Ebasic/near/314304492\">said</a>:</p>\n<blockquote>\n<p>There are already available subplits in the form of <code>data.set.image</code> and <code>data.set.n_ary</code>, but they won't help with the port because those will be new files <em>after</em> <code>data.set.basic</code></p>\n</blockquote>\n<p>I imagine that it won't be long before <code>data.set.image</code> blocks something. There's not much that depends on sets but not images.</p>",
        "id": 314306198,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1670353879
    },
    {
        "content": "<p>What needs to be done on the set file? Is it just fixing the build?</p>",
        "id": 314306295,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1670353907
    },
    {
        "content": "<p>I think this PR will cause a bottleneck in Mathlib4 and prevent anyone from working on the port for a few days, particularly given that it changes already ported files. I'm leaning towards being much more firm about the idea of not changing already ported files in mathlib and generating much more work in the port and not merging this refactor unless it is done in Mathlib4.</p>",
        "id": 314308376,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1670354478
    },
    {
        "content": "<p>What is bothering you exactly? That there's no corresponding mathlib4 PR? Writing it will be much easier than writing the mathlib PR, so I've decided to do it once I managed to stabilise <a href=\"https://github.com/leanprover-community/mathlib/pull/17825\">#17825</a>.</p>",
        "id": 314332242,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670363154
    },
    {
        "content": "<p>Yael, the problem is that most of the porting effort is now held up by this PR. Other people can't work on the port because of your PR.</p>",
        "id": 314335597,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670364451
    },
    {
        "content": "<p>I feel like <a href=\"https://github.com/leanprover-community/mathlib/pull/17825\">#17825</a> is trying to do so much at once that there's no way it's getting finished in a reasonable time - so many changes to argument order, proofs, ...</p>\n<p>As an alternative, I pushed <a href=\"https://github.com/leanprover-community/mathlib/pull/17835\">#17835</a>, which should be easily reviewable commit-by-commit and highly unlikely to contain unintended changes. It doesn't do everything <a href=\"https://github.com/leanprover-community/mathlib/pull/17825\">#17825</a> wants to do, but it creates a <code>data.set.defs</code> which doesn't import <code>order.monotone</code>, so should be a lot easier to build on top if if we decide to go forward.</p>\n<p>I'd also be fine just not making any sweeping changes in mathlib3, of course</p>",
        "id": 314339968,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1670366207
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/data.2Eset.2Ebasic/near/314304937\">said</a>:</p>\n<blockquote>\n<p>If somebody wants to PR those subsplits independently, please do so! They are basically ready (just need module docs) and will fluidify the rest of the split (by having less downstream imports that need fixing).</p>\n</blockquote>\n<p>I did <code>set.n_ary</code> in <a href=\"https://github.com/leanprover-community/mathlib/pull/17836\">#17836</a></p>",
        "id": 314340134,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670366269
    },
    {
        "content": "<p>That's it for me today - feel free to pick it up from here</p>",
        "id": 314340136,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1670366270
    },
    {
        "content": "<p>I have a family emergency. I won't be able to do anything today, maybe tomorrow as well. Please do whatever and sorry for the terrible timing.</p>",
        "id": 314343130,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670367560
    },
    {
        "content": "<p>No problem. I hope everything works out okay.</p>",
        "id": 314343293,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670367618
    },
    {
        "content": "<p>I think in this case we will just delay refactoring data.set.basic until after it has been ported.</p>",
        "id": 314343328,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670367632
    },
    {
        "content": "<p>The PR builds, though (modulo linting failures)</p>",
        "id": 314344501,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1670368172
    },
    {
        "content": "<p>Which PR?</p>",
        "id": 314346165,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670368959
    },
    {
        "content": "<p>Oh! <a href=\"https://github.com/leanprover-community/mathlib/pull/17825\">#17825</a>.</p>",
        "id": 314346188,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670368976
    },
    {
        "content": "<p>Okay, let's see if we can get it done, then.</p>",
        "id": 314346206,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670368987
    },
    {
        "content": "<p>I just had a look a porting data.set.basic as is. It's not too bad. There are a lot of broken proofs (and some that use tauto or cc, which we don't have for now.)</p>",
        "id": 314346251,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670369032
    },
    {
        "content": "<p>I'm not immediately sure how to fix the notation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">80</span> <span class=\"s2\">\" '' \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">image</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mem_image_iff_bex</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">)(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"n\">bex_def.symm</span>\n</code></pre></div>\n<p>Fails at <code>f '' s</code> with <code>missing end of character literal</code>.</p>",
        "id": 314346400,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670369106
    },
    {
        "content": "<p>(If anyone wants to have a look, this is on the branch data_set_basic.)</p>",
        "id": 314346425,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670369122
    },
    {
        "content": "<p>I think I fixed the last linting errors on <a href=\"https://github.com/leanprover-community/mathlib/pull/17825\">#17825</a>.</p>",
        "id": 314349081,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670370397
    },
    {
        "content": "<p>That sounds like a lexer issue, it should be fixable in core</p>",
        "id": 314351438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670371541
    },
    {
        "content": "<p>Okay, we better <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> it. I can hopefully do that later today, but if anyone is keen, please go ahead. :-)</p>",
        "id": 314356641,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670373933
    },
    {
        "content": "<p>Reported as <a href=\"https://github.com/leanprover/lean4/issues/1922\">https://github.com/leanprover/lean4/issues/1922</a></p>",
        "id": 314366225,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670380527
    },
    {
        "content": "<p>Hm, since <code>''</code> doesn't work maybe you should use <code>'</code> to disambiguate it: <code>f ''' s</code></p>",
        "id": 314366965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670381072
    },
    {
        "content": "<p>I've temporarily gone with <code>!!</code>. Hopefully we won't forget to change it back. :-)</p>",
        "id": 314369838,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670383116
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/data.2Eset.2Ebasic/near/314304937\">said</a>:</p>\n<blockquote>\n<p>If somebody wants to PR those subsplits independently, please do so! They are basically ready (just need module docs) and will fluidify the rest of the split (by having less downstream imports that need fixing).</p>\n</blockquote>\n<p><code>set.image</code> is in <a href=\"https://github.com/leanprover-community/mathlib/pull/17842\">#17842</a></p>",
        "id": 314567221,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670450809
    },
    {
        "content": "<p>Re <code>''</code>: I think it's worth remarking that although <code>''</code> is standard mathlib notation, it's not actually standard mathematical notation (despite Mario's claims that he saw it in a book once), so perhaps our instinct \"please let us keep our nonstandard notation which we're used to\" could be turned into \"maybe we can fall in love with a new notation\" if this issue is actually problematic. If you could make standard maths notation <code>f(S)</code> work (here <code>f : X-&gt;Y</code> and <code>S : set Y</code>) that would be even better ;-) Maybe even a weird unicode bracket? We use a weird unicode symbol for divides, after all, and nobody complains about that, because it was always there.</p>",
        "id": 314569904,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670451797
    },
    {
        "content": "<p>All I can contribute to this is that from my perspective (a math person new to lean), <code>''</code> does indeed look pretty strange and unfriendly!</p>",
        "id": 314570264,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1670451955
    },
    {
        "content": "<p><code>''</code> is standard in the set theory literature afaiu.</p>",
        "id": 314570403,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670452009
    },
    {
        "content": "<blockquote>\n<p>If you could make standard maths notation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(S)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span> work </p>\n</blockquote>\n<p>sometimes you can write <code> f • s</code>...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.group_action.basic</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">pointwise</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">function.End</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">•</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 314570598,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670452100
    },
    {
        "content": "<p>If anyone wants to propose some alternatives in case we can't keep <code>''</code>, we can use that in the interim instead of <code>!!</code>.</p>",
        "id": 314570673,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670452146
    },
    {
        "content": "<p><code>&lt;$&gt;</code> also already works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span>  <span class=\"c1\">-- doesn't work over different universes</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 314570840,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670452212
    },
    {
        "content": "<p>How about <code>f ″ s</code>? (<code>″</code> is \"double prime\")</p>",
        "id": 314571517,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670452505
    },
    {
        "content": "<p>Here are some round Unicode brackets reminiscent of the standard (outside of actual set theory :) ) image notation—not sure if they’re visually distinct enough from ascii though.</p>",
        "id": 314571558,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1670452532
    },
    {
        "content": "<p><code>f ❨ S ❩</code></p>",
        "id": 314571620,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1670452558
    },
    {
        "content": "<p><code>f ❪ S ❫</code></p>",
        "id": 314571728,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1670452599
    },
    {
        "content": "<p><code>f ⟮ S ⟯</code></p>",
        "id": 314571785,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1670452630
    },
    {
        "content": "<p>I think brackets would be a bad idea, especially while simultaneously trying to teach newcomers that in lean functions are written without brackets</p>",
        "id": 314571810,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670452645
    },
    {
        "content": "<p>Personally I would prefer infix</p>",
        "id": 314571813,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670452649
    },
    {
        "content": "<p>I'd really like if we could make <code>&lt;$&gt;</code> work (by rewriting the monad framework to be universe polymorphic), because then we could use the same notation for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.map\">docs#finset.map</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subgroup.map\">docs#subgroup.map</a>, ... as well. But that's probably not a viable thing to try until after the port.</p>",
        "id": 314571939,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670452697
    },
    {
        "content": "<p>I don’t think there’s a standard infix notation for the image recognizable by most mathematicians, so I suppose that opens it up to anything with the right vibes! (Other brackets I found included turtle shell, if not used for anything else: <code>f ❲ S ❳</code>)</p>",
        "id": 314572343,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1670452876
    },
    {
        "content": "<p>Though…I might gently caution against <code>&lt;$&gt;</code> if the goal is “make mathlib notation friendly to mathematicians”. That seems complicated and programmer-y to me, whereas at least <code>''</code> is visually simple and has precedent in a niche area of math (well, they’re all niche, ultimately, but you know what I mean :) )</p>\n<p>But on the other hand…maybe it would open up mathematicians to the joys of monads and unify the concept of image with other <code>map</code> operations in math…? Maybe programmer notation has something to add here? :) Just some thoughts.</p>",
        "id": 314573093,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1670453243
    },
    {
        "content": "<p>I agree <code>''</code> is much better than <code>&lt;$&gt;</code>, for the purpose of not making mathematicians' eyes glaze over.</p>",
        "id": 314573571,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670453468
    },
    {
        "content": "<p>Would a unicode double quote work? Not sure which one would best</p>",
        "id": 314577573,
        "sender_full_name": "Richard Osborn",
        "timestamp": 1670455374
    },
    {
        "content": "<p>Eric Wieser has mentioned one such (presumably interim?) option—just for fun I wanted to see what others I could find on shapecatcher.<br>\nTwo characters: <code>Ꞌ Ꞌ</code> <code>ˈ ˈ</code><br>\nOne character: <code>ᐦ</code> (<code>ʺ</code>)<br>\n(Though I imagine <code>!!</code> is more convenient to use as a placeholder, so I’m guessing this would only be useful if the parsing issue is somehow insurmountable…)</p>",
        "id": 314579769,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1670456666
    },
    {
        "content": "<p>Though, actually, the one-character nature of <code>f ᐦ S</code> is kind of visually nice regardless, if it can be entered easily…!</p>",
        "id": 314580062,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1670456835
    },
    {
        "content": "<p>Symmetry with <code>preimage</code> is something else to consider</p>",
        "id": 314580169,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670456894
    },
    {
        "content": "<p>Good point! What’s that syntax like?</p>",
        "id": 314580219,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1670456932
    },
    {
        "content": "<p>Note also that as of the commit to mathlib3 just now (which won't be in mathport yet), notation for <code>''</code> is no longer a decision that needs to be made to port <code>data.set.basic</code> (it now lives in <code>data.set.image</code>)</p>",
        "id": 314580228,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670456938
    },
    {
        "content": "<p>Is it just <code>⁻¹</code>?</p>",
        "id": 314580249,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1670456955
    },
    {
        "content": "<p><code>f ⁻¹' s</code>, rather</p>",
        "id": 314580386,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670457042
    },
    {
        "content": "<p>ah, I see</p>",
        "id": 314580413,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1670457064
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/287929-mathlib4/topic/data.2Eset.2Ebasic/near/314570403\">said</a>:</p>\n<blockquote>\n<p><code>''</code> is standard in the set theory literature afaiu.</p>\n</blockquote>\n<p>It's kind of <code>f “ S</code>. Sorry if too late for this comment.</p>",
        "id": 314580594,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1670457201
    },
    {
        "content": "<p>Yes, I know. I guess I meant \"is the ascii equivalent of...\"</p>",
        "id": 314580760,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670457318
    },
    {
        "content": "<p>Can we get <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mo>∗</mo></msub><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">f_*S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1757em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> to work with any <code>map</code> operation? I know it wasn't possible in Lean 3 for universe reasons, but maybe we can have a specific elaborator in Lean 4.</p>",
        "id": 314583029,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1670458728
    },
    {
        "content": "<p>I think it was already possible in lean3, we'd just have to reinvent all the monad typeclasses in a polymorphic way</p>",
        "id": 314583374,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670458995
    },
    {
        "content": "<p>Maybe there's a universe elaboration issue I'm not aware of; I thought the limitation was just the way the typeclasses in core were designed.</p>",
        "id": 314583489,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670459070
    },
    {
        "content": "<p>Like Patrick suggests, having some version of <code>_*</code> as notation for <code>map</code> would be really nice.</p>",
        "id": 314613322,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1670481971
    },
    {
        "content": "<p>I don't think we necessarily need to rewrite all the monad infrastructure.</p>",
        "id": 314613352,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1670481995
    },
    {
        "content": "<p>Something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_map</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"c1\">-- probably `Z` should be out_param</span>\n<span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Y</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which can have instances for <code>X = A -&gt; B</code>, <code>Y = set A</code>, <code>Z = set B</code>. But also for <code>X = A -&gt;+* B</code>, <code>Y = ideal A</code>, <code>Z = ideal B</code>, etc...</p>",
        "id": 314613549,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1670482120
    },
    {
        "content": "<p>I've manually updated <a href=\"https://github.com/leanprover-community/mathlib4/pull/892\">https://github.com/leanprover-community/mathlib4/pull/892</a> to remove the material that was moved out in <a href=\"https://github.com/leanprover-community/mathlib/pull/17842\">https://github.com/leanprover-community/mathlib/pull/17842</a>.</p>",
        "id": 314625142,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670487584
    },
    {
        "content": "<p>Are we going to go through this chaos several more times? This is not a good use of your time Scott. What other big files need a mathlib3 refactor before porting? If there are any then it would make sense to do them ASAP rather than just as the tide hits them. But maybe this is the last big example?</p>",
        "id": 314626030,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670487932
    },
    {
        "content": "<p>Top 50 long files (<code>data/set/basic</code> is now almost at the bottom):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"mi\">4194</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">list</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n    <span class=\"mi\">4012</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">measure</span><span class=\"bp\">/</span><span class=\"n\">measure_space.lean</span>\n    <span class=\"mi\">3494</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">calculus</span><span class=\"bp\">/</span><span class=\"n\">cont_diff.lean</span>\n    <span class=\"mi\">3193</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">group_theory</span><span class=\"bp\">/</span><span class=\"n\">subgroup</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n    <span class=\"mi\">3132</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">calculus</span><span class=\"bp\">/</span><span class=\"n\">fderiv.lean</span>\n    <span class=\"mi\">3086</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">metric_space</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n    <span class=\"mi\">3061</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">finset</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n    <span class=\"mi\">3032</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">integral</span><span class=\"bp\">/</span><span class=\"n\">lebesgue.lean</span>\n    <span class=\"mi\">2956</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">function</span><span class=\"bp\">/</span><span class=\"n\">lp_space.lean</span>\n    <span class=\"mi\">2711</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">integral</span><span class=\"bp\">/</span><span class=\"n\">interval_integral.lean</span>\n    <span class=\"mi\">2678</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">order</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n    <span class=\"mi\">2676</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">buffer</span><span class=\"bp\">/</span><span class=\"n\">parser</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n    <span class=\"mi\">2602</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">order</span><span class=\"bp\">/</span><span class=\"n\">filter</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n    <span class=\"mi\">2489</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">core.lean</span>\n    <span class=\"mi\">2449</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">computability</span><span class=\"bp\">/</span><span class=\"n\">turing_machine.lean</span>\n    <span class=\"mi\">2429</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">inner_product_space</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n    <span class=\"mi\">2378</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">set_theory</span><span class=\"bp\">/</span><span class=\"n\">ordinal</span><span class=\"bp\">/</span><span class=\"n\">arithmetic.lean</span>\n    <span class=\"mi\">2369</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">multiset</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n    <span class=\"mi\">2355</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">ideal</span><span class=\"bp\">/</span><span class=\"n\">operations.lean</span>\n    <span class=\"mi\">2273</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">function</span><span class=\"bp\">/</span><span class=\"n\">conditional_expectation</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n    <span class=\"mi\">2248</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">category_theory</span><span class=\"bp\">/</span><span class=\"n\">limits</span><span class=\"bp\">/</span><span class=\"n\">shapes</span><span class=\"bp\">/</span><span class=\"n\">pullbacks.lean</span>\n    <span class=\"mi\">2229</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">special_functions</span><span class=\"bp\">/</span><span class=\"n\">pow.lean</span>\n    <span class=\"mi\">2209</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">calculus</span><span class=\"bp\">/</span><span class=\"n\">deriv.lean</span>\n    <span class=\"mi\">2176</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">linear_algebra</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n    <span class=\"mi\">2122</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">constructions</span><span class=\"bp\">/</span><span class=\"n\">borel_space.lean</span>\n    <span class=\"mi\">2118</span> <span class=\"n\">docs</span><span class=\"bp\">/</span><span class=\"n\">references.bib</span>\n    <span class=\"mi\">2106</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">algebraic_geometry</span><span class=\"bp\">/</span><span class=\"n\">open_immersion.lean</span>\n    <span class=\"mi\">2101</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">module</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n    <span class=\"mi\">2079</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">matrix</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n    <span class=\"mi\">2049</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">power_series</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n    <span class=\"mi\">2014</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">real</span><span class=\"bp\">/</span><span class=\"n\">ennreal.lean</span>\n    <span class=\"mi\">1988</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">dfinsupp</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n    <span class=\"mi\">1987</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">normed_space</span><span class=\"bp\">/</span><span class=\"n\">operator_norm.lean</span>\n    <span class=\"mi\">1937</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">unique_factorization_domain.lean</span>\n    <span class=\"mi\">1932</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">separation.lean</span>\n    <span class=\"mi\">1907</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">function</span><span class=\"bp\">/</span><span class=\"n\">strongly_measurable</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n    <span class=\"mi\">1898</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">big_operators</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n    <span class=\"mi\">1896</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">subset_properties.lean</span>\n    <span class=\"mi\">1886</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">integral</span><span class=\"bp\">/</span><span class=\"n\">set_to_l1.lean</span>\n    <span class=\"mi\">1874</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">fin</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n    <span class=\"mi\">1872</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n    <span class=\"mi\">1851</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">set</span><span class=\"bp\">/</span><span class=\"n\">lattice.lean</span>\n    <span class=\"mi\">1792</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">uniform_space</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n    <span class=\"mi\">1763</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">combinatorics</span><span class=\"bp\">/</span><span class=\"n\">simple_graph</span><span class=\"bp\">/</span><span class=\"n\">connectivity.lean</span>\n    <span class=\"mi\">1750</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">geometry</span><span class=\"bp\">/</span><span class=\"n\">manifold</span><span class=\"bp\">/</span><span class=\"n\">mfderiv.lean</span>\n    <span class=\"mi\">1731</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">order</span><span class=\"bp\">/</span><span class=\"n\">filter</span><span class=\"bp\">/</span><span class=\"n\">at_top_bot.lean</span>\n    <span class=\"mi\">1728</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">set</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n    <span class=\"mi\">1728</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">normed</span><span class=\"bp\">/</span><span class=\"n\">group</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n    <span class=\"mi\">1725</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">asymptotics</span><span class=\"bp\">/</span><span class=\"n\">asymptotics.lean</span>\n    <span class=\"mi\">1691</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">integral</span><span class=\"bp\">/</span><span class=\"n\">bochner.lean</span>\n</code></pre></div>",
        "id": 314626496,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1670488177
    },
    {
        "content": "<p>Okay, and which of those are closest to being available for porting? :)</p>",
        "id": 314626647,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1670488220
    },
    {
        "content": "<p>Seems like <code>data.list.basic</code> only depends on <code>algebra.order.ring.canonical</code> (unported) and <code>data.nat.order.basic</code> (ported in a pr), so we probably shouldn't touch it</p>",
        "id": 314626973,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1670488406
    },
    {
        "content": "<p>Otoh, why would <code>data.list.basic</code> depend on <code>algebra.order.ring.canonical</code>...</p>",
        "id": 314627206,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1670488540
    },
    {
        "content": "<p>Is there ever a good reason for letting files become more than 1000 lines long?</p>",
        "id": 314627448,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670488652
    },
    {
        "content": "<p>I'm not aware of any such reason</p>",
        "id": 314627568,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1670488703
    },
    {
        "content": "<p>Just <code>docs/references.bib</code>, maybe</p>",
        "id": 314627597,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1670488724
    },
    {
        "content": "<p>There are currently 186 lean files that are &gt; 1000 lines long</p>",
        "id": 314627686,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1670488792
    },
    {
        "content": "<p>Okay, <code>data.set.basic</code> is almost ready to go.</p>",
        "id": 314628633,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670489233
    },
    {
        "content": "<p>One or two broken proofs, if someone wants to take over.</p>",
        "id": 314628648,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670489244
    },
    {
        "content": "<p>Yes, these refactors should have been done a while back, I guess. It's accumulated technical debt...</p>",
        "id": 314628774,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670489295
    },
    {
        "content": "<p>Maybe we need a 1000 line linter. :-)</p>",
        "id": 314629104,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670489447
    },
    {
        "content": "<p>All that is left on <code>data.set.basic</code> is a proof by <code>itauto</code> that has to be written out by hand, and a complicated simp that is failing, I don't quickly see how to reproduce it.</p>",
        "id": 314629248,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670489518
    },
    {
        "content": "<p>I'll take a look</p>",
        "id": 314629308,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1670489535
    },
    {
        "content": "<p>I better go make dinner here. :-)</p>",
        "id": 314629342,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670489548
    },
    {
        "content": "<p>Hmmm, I'm struggling to get the newest Lean version working with VScode. I guess I need to go through a huge update fest.</p>",
        "id": 314635529,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1670491890
    },
    {
        "content": "<p>It's working now</p>",
        "id": 314637521,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1670492662
    },
    {
        "content": "<p>I replaced the <code>itauto</code> with the term mode proof from <code>show_term {itauto}</code> in mathlib3...</p>",
        "id": 314639172,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670493319
    },
    {
        "content": "<p>Ok, let me try to fix the other one</p>",
        "id": 314639308,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1670493366
    },
    {
        "content": "<p>oh, <code>simp</code> closes the goal</p>",
        "id": 314639421,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670493413
    },
    {
        "content": "<p>We're done!</p>",
        "id": 314639432,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670493417
    },
    {
        "content": "<p>Great!</p>",
        "id": 314639462,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1670493427
    },
    {
        "content": "<p>I'm never sure how much effort to put into working out why <code>simp</code> has changed.</p>",
        "id": 314639551,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670493460
    },
    {
        "content": "<p>Some fraction of the <code>simp</code> failures are worth diagnosing and fixing, as they'll make life easier later.</p>",
        "id": 314639688,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670493491
    },
    {
        "content": "<p>But it's very hard to guess how big that fraction is, or whether you're in it...</p>",
        "id": 314639728,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670493509
    },
    {
        "content": "<p>Oof, it definitely doesn't #lint...</p>",
        "id": 314639866,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670493566
    },
    {
        "content": "<p>I'm taking a look at <code>src/group_theory/subgroup/basic.lean</code>, fwiw</p>",
        "id": 314647774,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1670496256
    },
    {
        "content": "<p>That file was a personal goal for me in the porting process, because I felt that by the time we'd got to subgroups it would be possible to start marketing the port to young mathematicians. I got a bunch of people at Xena to write a lot of those files (bundled subgroups, subrings,.sub-other things) the first time around and it was a really good learning experience for them.</p>",
        "id": 314648129,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670496374
    },
    {
        "content": "<p>I made <a href=\"https://github.com/leanprover-community/mathlib/pull/17852\">#17852</a> to push <code>data.finset.basic</code> a bit towards the bottom of that list</p>",
        "id": 314650876,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670497456
    },
    {
        "content": "<p>And <a href=\"https://github.com/leanprover-community/mathlib/pull/17853\">#17853</a> for <code>algebra.algebra.basic</code></p>",
        "id": 314656558,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670499621
    },
    {
        "content": "<p>86 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/set.20image.20notation\">#mathlib4 &gt; set image notation</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 314669654,
        "sender_full_name": "Notification Bot",
        "timestamp": 1670504110
    },
    {
        "content": "<p>The remaining lint lemmas for <code>data.set.basic</code> warrant some discussion:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">nonempty_coe_sort</span> <span class=\"c\">/-</span><span class=\"cm\"> Left-hand side simplifies from</span>\n<span class=\"cm\">  Nonempty ↑s</span>\n<span class=\"cm\">to</span>\n<span class=\"cm\">  Exists fun a ↦ a ∈ s</span>\n<span class=\"cm\">using</span>\n<span class=\"cm\">  simp only [nonempty_subtype]</span>\n<span class=\"cm\">Try to change the left-hand side to the simplified term!</span>\n<span class=\"cm\"> -/</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">is_empty_coe_sort</span> <span class=\"c\">/-</span><span class=\"cm\"> Left-hand side simplifies from</span>\n<span class=\"cm\">  IsEmpty ↑s</span>\n<span class=\"cm\">to</span>\n<span class=\"cm\">  ∀ (x : α), ¬x ∈ s</span>\n<span class=\"cm\">using</span>\n<span class=\"cm\">  simp only [isEmpty_subtype]</span>\n<span class=\"cm\">Try to change the left-hand side to the simplified term!</span>\n<span class=\"cm\"> -/</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">sep_union</span> <span class=\"c\">/-</span><span class=\"cm\"> Left-hand side simplifies from</span>\n<span class=\"cm\">  { x | x ∈ s ∪ t ∧ p x }</span>\n<span class=\"cm\">to</span>\n<span class=\"cm\">  { x | (x ∈ s ∨ x ∈ t) ∧ p x }</span>\n<span class=\"cm\">using</span>\n<span class=\"cm\">  simp only [Set.mem_union]</span>\n<span class=\"cm\">Try to change the left-hand side to the simplified term!</span>\n<span class=\"cm\"> -/</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">sep_inter</span> <span class=\"c\">/-</span><span class=\"cm\"> Left-hand side simplifies from</span>\n<span class=\"cm\">  { x | x ∈ s ∩ t ∧ p x }</span>\n<span class=\"cm\">to</span>\n<span class=\"cm\">  { x | (x ∈ s ∧ x ∈ t) ∧ p x }</span>\n<span class=\"cm\">using</span>\n<span class=\"cm\">  simp only [Set.mem_inter_iff]</span>\n<span class=\"cm\">Try to change the left-hand side to the simplified term!</span>\n</code></pre></div>",
        "id": 314785089,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670538891
    },
    {
        "content": "<p>They are all examples where <code>simp</code> having become a little bit stronger, we now have divergences in simp \"normal form\".</p>",
        "id": 314785330,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670538995
    },
    {
        "content": "<p>What is the coe function from <code>Set A</code> to <code>Type</code>?</p>",
        "id": 314785424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670539052
    },
    {
        "content": "<p>This is itself a hack:</p>",
        "id": 314785468,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670539069
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Porting note: I've introduced this abbreviation, with the `@[coe]` attribute,</span>\n<span class=\"c1\">-- so that `norm_cast` has something to index on.</span>\n<span class=\"sd\">/-- Given the set `s`, `type_of_Set s` is the `Type` of element of `s`. -/</span>\n<span class=\"kd\">@[coe]</span> <span class=\"n\">abbrev</span> <span class=\"n\">type_of_Set</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">}</span>\n\n<span class=\"sd\">/-- Coercion from a set to the corresponding subtype. -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">CoeSort</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">type_of_Set</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 314785533,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670539083
    },
    {
        "content": "<p>why is it an abbrev?</p>",
        "id": 314785571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670539102
    },
    {
        "content": "<p>it should be a regular declaration</p>",
        "id": 314785585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670539108
    },
    {
        "content": "<p>I'm not sure I would call it a hack</p>",
        "id": 314785608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670539120
    },
    {
        "content": "<p>we already had such a function, it was called coe before</p>",
        "id": 314785634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670539132
    },
    {
        "content": "<p>Okay, good. Making it regular caused a few more things to break, but they all look fixable.</p>",
        "id": 314785635,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670539132
    },
    {
        "content": "<p>It looks like <code>sep_union</code> and friends are because <code>sep</code> is not a thing anymore</p>",
        "id": 314785857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670539224
    },
    {
        "content": "<p>I'm not sure, should it be?</p>",
        "id": 314785925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670539265
    },
    {
        "content": "<p>Have to run. I've pushed making <code>type_of_Set</code> a <code>def</code> again, and fixed some of the probles.</p>",
        "id": 314786917,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670539709
    },
    {
        "content": "<p>There's one broken proof, and we're now missing the <code>Preorder ↑s</code> instance.</p>",
        "id": 314786960,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670539734
    },
    {
        "content": "<p>Drive-by comment: this should be <code>TypeOfSet</code>, no? Or maybe <code>Set.AsType</code>?</p>",
        "id": 314849611,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670577674
    },
    {
        "content": "<p>Yes on the casing convention. How about <code>Set.Elems</code>?</p>",
        "id": 314854409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670579252
    },
    {
        "content": "<p>or should it be <code>Set.Elem</code> since we don't pluralize types</p>",
        "id": 314854614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670579317
    },
    {
        "content": "<p><code>nonempty_subtype</code> and <code>nonempty_coe_sort</code> are duplicates</p>",
        "id": 314864158,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670582439
    },
    {
        "content": "<p><code>data.set.basic</code> is still waiting to be merged and holding lots up. The last problem had been the missing <code>Preorder ↑s</code> instance. Winston had committed a fix that just wrote the relevant instance from <code>Subtype</code> in by hand, but this isn't very satisfactory.</p>\n<p>For now I've gone back to making <code>Set.Elem</code> <code>reducible</code> (no need to go so far as <code>abbrev</code>) so that the instances from <code>Subtype</code> come along for free. I'm dubious that this is really the right answer, but since so much is waiting on <code>data.set.basic</code> at the moment, I propose merging as is and then fixing later.</p>",
        "id": 315272101,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1670806302
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Could you please chime in on this decision?</p>",
        "id": 315298466,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1670827585
    },
    {
        "content": "<p>Seems like we will want them to be distinct eventually if not already</p>",
        "id": 315298730,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670827756
    },
    {
        "content": "<p>I thought that instances on <code>\\u s</code> didn't apply to <code>{x // x \\in s}</code> already in mathlib</p>",
        "id": 315298769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670827785
    },
    {
        "content": "<p>But I'm fine with doing whatever for now and refactoring later</p>",
        "id": 315298855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670827824
    },
    {
        "content": "<p>Ok, let's get this merged</p>",
        "id": 315298927,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1670827883
    },
    {
        "content": "<p>Ooh, Scott already did (-;</p>",
        "id": 315298971,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1670827914
    }
]