[
    {
        "content": "<p>I've had linter errors for the <code>to_additive</code> and <code>instance</code> combination and tracked it down to this todo in <code>to_additive</code>: <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/ToAdditive.lean#L359\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/ToAdditive.lean#L359</a><br>\nis there any news on that (this comment is 6 months old) and is it now possible to implement the <code>instance</code> attribute in <code>to_additive</code>?</p>",
        "id": 310831640,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1668781010
    },
    {
        "content": "<p>Ah, if <code>to_additive</code> doesn't work on <code>instances</code> this at least explain some errors I've got!</p>",
        "id": 310834524,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668781870
    },
    {
        "content": "<p>if the linter complains that your def should be a lemma even though it is an instance, then yes</p>",
        "id": 310835542,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1668782166
    },
    {
        "content": "<p>(this is what happened to me)</p>",
        "id": 310835576,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1668782179
    },
    {
        "content": "<p>and of course it only complains at the additive versions</p>",
        "id": 310835638,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1668782207
    },
    {
        "content": "<p>Yes, this is exactly what happened.</p>",
        "id": 310835782,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668782266
    },
    {
        "content": "<p>the easy way out is to do the instances by hand, but this is obviously stupid</p>",
        "id": 310835901,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1668782307
    },
    {
        "content": "<p>As a workaround you can add it by hand, with a porting note. But I agree it's annoying, if we start doing this a lot we will surely forget to use <code>to_additive</code> later.</p>",
        "id": 310835929,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668782318
    },
    {
        "content": "<p>Ahah, I see we agree :D</p>",
        "id": 310835955,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668782328
    },
    {
        "content": "<p>Ok, so I've looked a bit more into this and the underlying issue seems to be that the part in <code>to_additive</code> that does the copying of attributes is in a <code>CoreM</code> monad, whereas adding instances is in <code>MetaM</code>. I did not find anything in the history in Lean 4 that suggests that there were any changes to how instances are added.<br>\nI don't really see why we cannot just bump the monad, the instance attribute obviously runs in the <code>MetaM</code> monad.</p>",
        "id": 311590311,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1669123011
    },
    {
        "content": "<p>It doesn't look too bad actually: <a href=\"https://github.com/leanprover-community/mathlib4/pull/678\">mathlib4#678</a> but I have to go to sleep now..<br>\nIs the defLemma linter included in <code>#lint</code>? I had it now that <code>#lint</code> did not complain, but CI did.</p>",
        "id": 311600335,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1669126003
    }
]