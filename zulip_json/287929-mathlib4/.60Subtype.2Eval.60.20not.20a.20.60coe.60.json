[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> I was surprised to learn just now that <code>Subtype.val</code> is not marked with the <code>coe</code> attribute in either Lean 4 core or <code>Std</code>. Is there a reason for this?</p>",
        "id": 311975250,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669282766
    },
    {
        "content": "<p>And yet this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">e</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 312019474,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669297686
    },
    {
        "content": "<p>and this fails</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Coe</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>and this works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"n\">s</span><span class=\"bp\">;</span>\n  <span class=\"c1\">-- a: α := s.val</span>\n  <span class=\"n\">exact</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>and so my confusion about how coercions work in Lean 4 grows ever larger :-)</p>",
        "id": 312019630,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669297750
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> It's a <code>CoeHead</code> instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">CoeHead</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p><code>Coe</code> is only for chainable coercions. Lean uses <code>CoeT</code> I believe to actually compute a coercion instance.</p>",
        "id": 312021463,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669298283
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">CoeT</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"c1\">-- type mismatch?!</span>\n</code></pre></div>\n<p>In the example I posted with the <code>↑</code> it's not possible to click on the <code>↑</code> to find out what's going on because it is eagerly unfolded to <code>Subtype.val</code>. That's kind of annoying if you don't know what's going on in the middle of a complex term and want to work it out.</p>\n<p>I also still have 0 feeling as to why computer scientists are telling me that a certain random coercion is only allowed at the start or end of a series of coercions; hopefully I will get this feeling one day.</p>",
        "id": 312022312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669298514
    },
    {
        "content": "<p>That's not the issue here. The <code>coe</code> classes are different from the <code>coe</code> attribute.</p>",
        "id": 312022446,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669298548
    },
    {
        "content": "<p>(Let me add to the noise about non-<code>@[coe]</code>) <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> the <code>CoeT</code> class requires the term being coerced as the second argument.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">CoeT</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"n\">x</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 312023101,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669298735
    },
    {
        "content": "<p>Oh I am not even sure I had internalised the fact that a coe attribute existed! What does it do? OK got it (the joys of <code>import Mathlib</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">The `@[coe]` attribute on a function (which should also appear in a</span>\n<span class=\"sd\">`instance : Coe A B := ⟨myFn⟩` declaration) allows the delaborator to show</span>\n<span class=\"sd\">applications of this function as `↑` when printing expressions.</span>\n<span class=\"sd\">-/</span>\n</code></pre></div>\n<p>Can you put this attribute on <code>CoeHead</code> and <code>CoeFoot</code> or whatever the other one's called?</p>",
        "id": 312023110,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669298739
    },
    {
        "content": "<p>We're missing the latter, but we have an instance of the former (for some choice of <code>Coe</code> class)</p>",
        "id": 312023121,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669298742
    },
    {
        "content": "<p>The attribute registers the <code>def</code> in which it is applied as a coercion. This is necessary if you want to know that there is a coercion appearing in some expression because they are unfolded (i.e., there is no function called <code>coe</code>). So things like <code>norm_cast</code> absolutely must have functions registered with the <code>coe</code> attribute, otherwise it can't tell where the coercions are.</p>",
        "id": 312023833,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669298962
    },
    {
        "content": "<p>I can't get the attribute to work so I'm still way behind everyone else (but at least we're all now talking about the same thing):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">coe</span><span class=\"o\">]</span> <span class=\"n\">subtypeCoe</span>\n<span class=\"kd\">@[coe]</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"n\">s</span><span class=\"bp\">;</span>\n  <span class=\"c1\">-- still `a : α := s.val`</span>\n  <span class=\"n\">exact</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>Isn't the idea that it's supposed to print <code>a : α := ↑s</code> in the tactic state, or am I still not understanding?</p>",
        "id": 312023927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669298994
    },
    {
        "content": "<p>No, the attribute should go on <code>Subtype.val</code></p>",
        "id": 312024071,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669299034
    },
    {
        "content": "<p>That's the function given in the <code>Coe</code> instance.</p>",
        "id": 312024189,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669299080
    },
    {
        "content": "<p>Well thanks for asking this question because I've learnt a ton from it! Now hopefully someone will answer it :-)</p>",
        "id": 312024630,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669299225
    },
    {
        "content": "<p>I suspect the answer to the question is that it's just an oversight. If there's a different answer, then <em>I</em> may learn a lot.</p>",
        "id": 312024850,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669299287
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.CoeExt</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">coe</span><span class=\"o\">]</span> <span class=\"n\">Subtype.val</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"n\">s</span><span class=\"bp\">;</span>\n  <span class=\"c1\">-- `a : α := ↑s` τda</span>\n  <span class=\"n\">exact</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 312025062,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669299353
    },
    {
        "content": "<p>If you get errors when applying the <code>norm_cast</code> attribute like <code>norm_cast: badly shaped lemma, lhs must contain at least one coe</code>, then there is very decent chance that a <code>coe</code> attribute is missing, which is what caused me to ask this question in the first place (see my comment on <a href=\"https://github.com/leanprover-community/mathlib4/pull/642\">mathlib4#642</a>).</p>",
        "id": 312025978,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669299620
    },
    {
        "content": "<p>Kevin, note also that someone (maybe Moritz?) wrote up some details about coercions on the mathlib4 <a href=\"https://github.com/leanprover-community/mathlib4/wiki\">wiki</a></p>",
        "id": 312026608,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669299822
    },
    {
        "content": "<p>Yes, I started it, but I guess there have been additions and corrections to it already. and if something came from this discussion that is not covered there I would be really happy if it shows up in the wiki eventually.</p>",
        "id": 312027925,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1669300222
    },
    {
        "content": "<p>I'll add some information to the wiki about why the <code>coe</code> attribute is necessary tomorrow.</p>",
        "id": 312029695,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669300750
    },
    {
        "content": "<p>Oh there is a ton of stuff on the porting page which I hadn't seen before! Thanks! I read it all a while ago and since then have only ever looked at the top :-)</p>",
        "id": 312029798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669300778
    },
    {
        "content": "<p>It seems that <code>FunLike</code> makes Lean stop unfolding at <code>FunLike.coe</code>, so for <code>Equiv</code> etc. we have Lean3-like behavior.</p>",
        "id": 312124584,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669358627
    },
    {
        "content": "<p>I added a paragraph about this to the wiki page. Note that I don't understand why it works this way.</p>",
        "id": 312124679,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669358676
    },
    {
        "content": "<p>So what would be the simp normal form for an equiv? <code>e.to_fun x</code> or <code>FunLike.coe e x</code>? If we use the latter it means that we are thinking the complete unfolding of coercions introduced in Lean 4 is a bad idea and that we have crafted a devious way to avoid it. If we use the former it means we can't have universal simp lemmas applying to all FunLike stuff.</p>",
        "id": 312129815,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1669361873
    },
    {
        "content": "<p>Currently we use <code>FunLike.coe</code></p>",
        "id": 312129997,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669361963
    },
    {
        "content": "<p>(and I don't understand why unfolding coercions is a good idea; may be, I'm wrong)</p>",
        "id": 312130078,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669361997
    },
    {
        "content": "<p>E.g., it leaks the path <code>CoeTrans</code> found from <code>α</code> to <code>β</code>.</p>",
        "id": 312130255,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669362084
    },
    {
        "content": "<p>There can be different defeq paths. Lean 3 would not care about this difference.</p>",
        "id": 312130288,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669362111
    },
    {
        "content": "<p>I mean something like <code>(e : Equiv α β).toEmbedding.toFun</code> vs <code>e.toFun</code>.</p>",
        "id": 312130425,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669362171
    },
    {
        "content": "<p>Or <code>(e : LinearIsometryEquiv _ _ _).toLinearEquiv.toEquiv</code> vs <code>e.toIsometric.toEquiv</code>.</p>",
        "id": 312130502,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669362223
    },
    {
        "content": "<p>Does it even leak the path if all the coercions are tagged with <code>@[coe]</code>? Presumably.</p>",
        "id": 312130930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669362439
    },
    {
        "content": "<p><code>@[coe]</code> only affects pretty printing.</p>",
        "id": 312135048,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669364346
    },
    {
        "content": "<p>(as far as I understand)</p>",
        "id": 312135073,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669364356
    },
    {
        "content": "<p>It doesn't affect the actual term. So, if you want to apply a lemma, then you need to know which functions are behind those arrows.</p>",
        "id": 312135169,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669364400
    },
    {
        "content": "<p>(or emulate Lean 3 as we do with <code>FunLike</code>)</p>",
        "id": 312135267,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669364426
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60Subtype.2Eval.60.20not.20a.20.60coe.60/near/312135048\">said</a>:</p>\n<blockquote>\n<p><code>@[coe]</code> only affects pretty printing.</p>\n</blockquote>\n<p>I see. So in some sense the actual function <code>coe</code> no longer exists at all. It is only used by Lean 4 to try and fix type errors, so appears transiently at this point and, if successful, is immediately unfolded. So now we have the problem that things like <code>ring_equiv.to_ring_hom.to_monoid_hom.to_mul_hom.to_fun</code> are now monsters.</p>",
        "id": 312136013,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669364803
    },
    {
        "content": "<p>Disclaimer: I'm <strong>not</strong> a Lean 4 expert.</p>",
        "id": 312136519,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669365015
    },
    {
        "content": "<p>Another issue that comes to my mind. We should have a generic <code>Nat.cast</code>. But what if <code>((n : Nat) : Int)</code> unfolds to <code>Int.ofNat n</code> instead of <code>Nat.cast n</code> (I didn't check function names)?</p>",
        "id": 312136733,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669365103
    },
    {
        "content": "<p>A user sees the arrow, tries to apply a lemma about the generic <code>Nat.cast</code>, and fails.</p>",
        "id": 312136820,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669365126
    },
    {
        "content": "<p>Let's wait for an expert to come and explain how it should work.</p>",
        "id": 312136939,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669365202
    },
    {
        "content": "<p>I am not that expert on coercions in Lean 4, but as a data point adding <code>[coe]</code> to <code>Subtype.val</code> does not cause errors in current mathlib4, and allows putting back in the missing @[norm_cast]s in <a href=\"https://github.com/leanprover-community/mathlib4/pull/642\">mathlib4#642</a>.</p>",
        "id": 312226740,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669395395
    },
    {
        "content": "<p>As that PR has been holding things up for a while, but looks pretty ready to go, I would like to merge that now (but continue this discussion and then make changes as needed!)</p>",
        "id": 312226820,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669395431
    },
    {
        "content": "<p>But <code>[coe]</code> is still a syntatic sugar, yes?</p>",
        "id": 312256225,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669409546
    },
    {
        "content": "<p>So, we can't apply lemmas about a generic <code>Nat.cast</code> to <code>Int.ofNat</code> or whatever specific function <code>((n : Nat) : Int)</code> unfolds to?</p>",
        "id": 312256476,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669409692
    },
    {
        "content": "<p>Scott, I'm not at my machine now, but can you put that <code>coe</code> attribute in that file just with a note that it needs to move to an appropriate place?</p>",
        "id": 312259638,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669411786
    },
    {
        "content": "<p>It's in <code>Data/Subtype.lean</code> now.</p>",
        "id": 312261115,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1669412747
    },
    {
        "content": "<p>I think the <code>Nat.cast</code> vs <code>Int.ofNat</code> conundrum has the same answer as in mathlib: make a simp lemma to go from one to the other.</p>",
        "id": 312267513,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1669417465
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/287929-mathlib4/topic/.60Subtype.2Eval.60.20not.20a.20.60coe.60/near/312135048\">said</a>:</p>\n<blockquote>\n<p><code>@[coe]</code> only affects pretty printing.</p>\n</blockquote>\n<p>The <code>@[coe]</code> attribute affects two things:</p>\n<ol>\n<li>pretty printing, and</li>\n<li>the <code>norm_cast</code> tactic.</li>\n</ol>\n<p>So yeah, <code>Subtype.val</code> should most probably be tagged <code>@[coe]</code>.</p>",
        "id": 312428361,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1669528202
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Why Lean 4 doesn't unfold beyond <code>FunLike.coe</code>?</p>",
        "id": 312433301,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669533800
    },
    {
        "content": "<p>I am not Gabriel, but if you look at <a href=\"https://github.com/leanprover-community/mathlib4/blob/6b6f0338eb271a83eb23f9aa7a4c013a3ca36b5c/Mathlib/Data/FunLike/Basic.lean#L126-L130\">https://github.com/leanprover-community/mathlib4/blob/6b6f0338eb271a83eb23f9aa7a4c013a3ca36b5c/Mathlib/Data/FunLike/Basic.lean#L126-L130</a> then it is somewhat obvious: the <code>coe</code> of <code>FunLike</code> is not the 'real' <code>coe</code> and therefore if you declare an instance of <code>FunLike</code> then the coercion seems to find the <code>FunLike</code> coercion to <code>FunLike.coe</code> first and the elaborator puts in <code>FunLike.coe</code> and does not care that this is defeq to something meaningful</p>",
        "id": 312438540,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1669538051
    },
    {
        "content": "<p>We have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"n\">F</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"n\">where</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">FunLike.coe</span>\n</code></pre></div>\n<p>in the same file.</p>",
        "id": 312486879,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669564112
    },
    {
        "content": "<p>yes, this is the coercion I meant</p>",
        "id": 312523539,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1669587103
    },
    {
        "content": "<p>How is it different from <code>coeTrans</code>?</p>",
        "id": 312548919,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669605826
    },
    {
        "content": "<p>(does it unfold <code>coeTrans</code>?)</p>",
        "id": 312548932,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669605840
    }
]