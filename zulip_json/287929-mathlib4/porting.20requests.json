[
    {
        "content": "<p>Since we have a wide open space of files to port at the moment, I thought I would make a thread for people to request specific files to get them bumped up in priority.</p>",
        "id": 306118004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666730396
    },
    {
        "content": "<ul>\n<li><code>algebra.invertible</code>: I'm going to need parts of this for <code>norm_num</code>, although I can work around it for now.</li>\n</ul>",
        "id": 306118119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666730425
    },
    {
        "content": "<p>For which</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">leanproject</span> <span class=\"kn\">import</span><span class=\"bp\">-</span><span class=\"n\">graph</span> <span class=\"c1\">--to algebra.invertible --exclude-tactics --port-status algebra.invertible.pdf</span>\n</code></pre></div>\n<p>says <a href=\"/user_uploads/3121/90e5JbGeOOhvi7pqDDZEI3_B/algebra.invertible.pdf\">algebra.invertible.pdf</a>.</p>",
        "id": 306119064,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666730830
    },
    {
        "content": "<p>This may be a case where refactoring the file in mathlib3 to isolate the parts you need might be warranted first.</p>",
        "id": 306119404,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666730982
    },
    {
        "content": "<p>yikes</p>",
        "id": 306121290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666731771
    },
    {
        "content": "<p>Yeah, import creep is vicious. :-)</p>",
        "id": 306121503,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666731850
    },
    {
        "content": "<p>I remember the days when stuff in \"algebra\" was supposed to have low dependencies</p>",
        "id": 306121509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666731854
    },
    {
        "content": "<p>I think it was a poor choice of name</p>",
        "id": 306121591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666731890
    },
    {
        "content": "<p>Most of this tree is transitive imports via <code>algebra.order.ring</code> and <code>data.set.lattice</code>. I suspect very large portions of <code>algebra.invertible</code> don't need anything from either of those.</p>",
        "id": 306121666,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666731923
    },
    {
        "content": "<p><code>data.nat.cast -&gt; algebra.ne_zero</code> seems super suspicious</p>",
        "id": 306121990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666732057
    },
    {
        "content": "<p>I thought I turned that inside out? I'm not sure what happened</p>",
        "id": 306122270,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1666732175
    },
    {
        "content": "<p>maybe it was for <code>add_monoid_with_one</code> stuff</p>",
        "id": 306122292,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1666732181
    },
    {
        "content": "<p>it used to import <code>algebra.invertible</code> before too :)</p>",
        "id": 306122438,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1666732213
    },
    {
        "content": "<p>I feel like we need a bot that posts about \"dependency regressions\" in mathlib similar to performance regressions in software projects. \"The average number of transitive dependencies went up by 10 by this PR\" would be nice to see</p>",
        "id": 306122957,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666732356
    },
    {
        "content": "<p>This seems to compile, fwiw:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">--- src/algebra/invertible.lean</span><span class=\"w\"></span>\n<span class=\"gi\">+++ src/algebra/invertible.lean</span><span class=\"w\"></span>\n<span class=\"gu\">@@ -5,7 +5,8 @@ Authors: Anne Baanen</span><span class=\"w\"></span>\n<span class=\"w\"> </span>-/<span class=\"w\"></span>\n\n<span class=\"w\"> </span>import algebra.group.units<span class=\"w\"></span>\n<span class=\"gd\">-import algebra.ne_zero</span><span class=\"w\"></span>\n<span class=\"gi\">+import algebra.group_with_zero.units</span><span class=\"w\"></span>\n<span class=\"gi\">+--import algebra.ne_zero</span><span class=\"w\"></span>\n<span class=\"w\"> </span>import algebra.ring.basic<span class=\"w\"></span>\n\n<span class=\"w\"> </span>/-!<span class=\"w\"></span>\n<span class=\"gu\">@@ -214,8 +215,8 @@ lemma nonzero_of_invertible [mul_zero_one_class α] (a : α) [nontrivial α] [in</span><span class=\"w\"></span>\n<span class=\"w\"> </span>λ ha, zero_ne_one $ calc   0 = ⅟a * a : by simp [ha]<span class=\"w\"></span>\n<span class=\"w\"> </span>                         ... = 1 : inv_of_mul_self a<span class=\"w\"></span>\n\n<span class=\"gd\">-@[priority 100] instance invertible.ne_zero [mul_zero_one_class α] [nontrivial α] (a : α)</span><span class=\"w\"></span>\n<span class=\"gd\">-  [invertible a] : ne_zero a := ⟨nonzero_of_invertible a⟩</span><span class=\"w\"></span>\n<span class=\"gi\">+--@[priority 100] instance invertible.ne_zero [mul_zero_one_class α] [nontrivial α] (a : α)</span><span class=\"w\"></span>\n<span class=\"gi\">+--  [invertible a] : ne_zero a := ⟨nonzero_of_invertible a⟩</span><span class=\"w\"></span>\n\n<span class=\"w\"> </span>section monoid_with_zero<span class=\"w\"></span>\n<span class=\"w\"> </span>variable [monoid_with_zero α]<span class=\"w\"></span>\n</code></pre></div>",
        "id": 306125996,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1666733141
    },
    {
        "content": "<p>I think a nicer refactor would be to push <code>ne_zero</code> much lower</p>",
        "id": 306144150,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666741571
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/17171\">#17171</a></p>",
        "id": 306145992,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666742863
    },
    {
        "content": "<p>what does <code>leanproject import-graph</code> give you after that PR <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> ?</p>",
        "id": 306146259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666743042
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/qpKExYRAenekANj7CY53P5Xw/algebra.invertible.pdf\">algebra.invertible.pdf</a></p>",
        "id": 306154508,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666750225
    },
    {
        "content": "<p>So it's a fair improvement (by avoiding data.nat.cast, we transitively avoid data.set.lattice and bunch of its imports).</p>",
        "id": 306154726,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666750457
    },
    {
        "content": "<p>But there's still a undigestible bolus of order theory coming in via data.nat.basic</p>",
        "id": 306154749,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666750481
    },
    {
        "content": "<p><code>algebra.group_power.basic</code> says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">The</span> <span class=\"n\">power</span> <span class=\"n\">operation</span> <span class=\"n\">on</span> <span class=\"n\">monoids</span> <span class=\"n\">and</span> <span class=\"n\">groups.</span>\n<span class=\"n\">We</span> <span class=\"n\">separate</span> <span class=\"n\">this</span> <span class=\"k\">from</span> <span class=\"n\">group</span><span class=\"o\">,</span> <span class=\"n\">because</span> <span class=\"n\">it</span> <span class=\"n\">depends</span> <span class=\"n\">on</span> <span class=\"bp\">`</span><span class=\"n\">ℕ</span><span class=\"bp\">`</span><span class=\"o\">,</span>\n<span class=\"n\">which</span> <span class=\"k\">in</span> <span class=\"n\">turn</span> <span class=\"n\">depends</span> <span class=\"n\">on</span> <span class=\"n\">other</span> <span class=\"n\">parts</span> <span class=\"n\">of</span> <span class=\"n\">algebra.</span>\n</code></pre></div>\n<p>So it seems like this is expected for group power, but <code>algebra.group_power.ring -&gt; algebra.ne_zero</code> now sounds even more suspicious</p>",
        "id": 306155775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666751494
    },
    {
        "content": "<p>yep, there is exactly one thing in the file that uses that bolus:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">pow</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">no_zero_divisors</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ne_zero</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ne_zero</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">pow_ne_zero</span> <span class=\"n\">n</span> <span class=\"n\">out</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>We can easily invert this dependency.</p>",
        "id": 306155875,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666751625
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/17175\">#17175</a></p>",
        "id": 306157872,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666753680
    },
    {
        "content": "<p>Hmmm, that still leaves us with <code>algebra.ne_zero</code> importing <code>algebra.order.ring</code>, because of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">bit1</span> <span class=\"o\">[</span><span class=\"n\">canonically_ordered_comm_semiring</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ne_zero</span> <span class=\"o\">(</span><span class=\"n\">bit1</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">le_iff_exists_add'.2</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h.symm</span><span class=\"o\">⟩)</span> <span class=\"n\">zero_lt_one.not_le</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>I bet if we can move that as well we can really lower <code>algebra.ne_zero</code> and <code>algebra.invertible</code>.</p>",
        "id": 306158555,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666754416
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/17176\">#17176</a></p>",
        "id": 306159461,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666755307
    },
    {
        "content": "<p>Ah, nice. The supremum of <a href=\"https://github.com/leanprover-community/mathlib/pull/17171\">#17171</a>, <a href=\"https://github.com/leanprover-community/mathlib/pull/17174\">#17174</a>, <a href=\"https://github.com/leanprover-community/mathlib/pull/17175\">#17175</a>, and <a href=\"https://github.com/leanprover-community/mathlib/pull/17176\">#17176</a> reduces the import hierarchy for <code>algebra.invertible</code> to:<br>\n<a href=\"/user_uploads/3121/vj2Fma0UA2W8MnqbUuU1sxNl/algebra.invertible.sup.pdf\">algebra.invertible.sup.pdf</a>, which is much more manageable.</p>",
        "id": 306159549,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666755417
    },
    {
        "content": "<p>I bet we could strip even more: surely <code>logic.embedding</code> is not really needed here. But not for now. :-)</p>",
        "id": 306159633,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666755510
    },
    {
        "content": "<p>Well, I did :) <a href=\"https://github.com/leanprover-community/mathlib/pull/17177\">#17177</a></p>",
        "id": 306160361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666756314
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/yhq8vouSRSScVVPiHLMM7mQR/algebra.invertible.pdf\">algebra.invertible.pdf</a></p>",
        "id": 306160822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666756733
    },
    {
        "content": "<p>now that dependency graph actually makes sense</p>",
        "id": 306160875,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666756800
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/17179\">#17179</a> will remove a further two nodes from that graph.</p>",
        "id": 306161613,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666757351
    },
    {
        "content": "<p>and <a href=\"https://github.com/leanprover-community/mathlib/pull/17180\">#17180</a> another two. :-)</p>",
        "id": 306162123,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666757687
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/287929-mathlib4/topic/porting.20requests/near/306160361\">said</a>:</p>\n<blockquote>\n<p>Well, I did :) <a href=\"https://github.com/leanprover-community/mathlib/pull/17177\">#17177</a></p>\n</blockquote>\n<p>Fwiw, you got a \"rejected by label\" from bors</p>",
        "id": 306178416,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1666768799
    },
    {
        "content": "<p>What's the difference between light blue and dark blue again?</p>",
        "id": 306179934,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666769453
    },
    {
        "content": "<p>light blue is \"all prereqs met\", darker blue is \"there is PR but it's not merged yet\"</p>",
        "id": 306181139,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1666769964
    },
    {
        "content": "<p>More precisely, \"ready to start porting, all prereqs present\" is <code>turquoise1</code>, \"there is an unmerged PR\" is <code>lightskyblue</code></p>",
        "id": 306181369,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1666770083
    },
    {
        "content": "<p>If I turn my data.bool.basic port branch into a PR (I got everything compiling yesterday for the first time, it's also a port of a core Lean file) then how does the system know there's a PR for data.bool.basic?</p>",
        "id": 306184375,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666771362
    },
    {
        "content": "<p>You have to edit the file here: <a href=\"https://github.com/leanprover-community/mathlib/wiki/mathlib4-port-status\">https://github.com/leanprover-community/mathlib/wiki/mathlib4-port-status</a></p>",
        "id": 306184427,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1666771383
    },
    {
        "content": "<p>Got it -- sorry I'm learning a new trick here and it takes time</p>",
        "id": 306184489,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666771414
    },
    {
        "content": "<p>(wrong thread again, why does this only happen to me?)</p>",
        "id": 306264573,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1666797570
    },
    {
        "content": "<p>An update on porting progress. Here are some graphs for interesting targets:</p>\n<ul>\n<li><a href=\"/user_uploads/3121/hvAe3_soAZvh5ejnC5miduY8/algebra.invertible.pdf\">algebra.invertible.pdf</a> (post <a href=\"https://github.com/leanprover-community/mathlib/pull/17177\">#17177</a>)</li>\n<li><a href=\"/user_uploads/3121/Etf0K-l7IfuOiKL5biHcr0x0/limits.pdf\">limits.pdf</a> </li>\n<li><a href=\"/user_uploads/3121/0d1Z10E6ZdHUJhV0pKDafF47/algebra.order.ring.pdf\">algebra.order.ring.pdf</a> </li>\n</ul>\n<p>Here's the list of currently available porting targets:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">data.fun_like.basic</span>\n<span class=\"n\">data.prod.basic</span>    <span class=\"c1\">-- WIP</span>\n<span class=\"n\">data.subtype</span>\n<span class=\"n\">data.option.basic</span>    <span class=\"c1\">-- PRd as mathlib4#493</span>\n<span class=\"n\">logic.function.conjugate</span>\n<span class=\"n\">data.nat.cast.defs</span>\n<span class=\"n\">data.bool.basic</span>    <span class=\"c1\">-- WIP Kevin Buzzard</span>\n<span class=\"n\">logic.relation</span>\n<span class=\"n\">control.functor</span>\n<span class=\"n\">lean_core.data.vector</span>\n<span class=\"n\">data.char</span>\n<span class=\"n\">logic.lemmas</span>\n<span class=\"n\">algebra.order.floor</span>    <span class=\"c1\">-- Blocked by tactic.abel and tactic.linarith</span>\n</code></pre></div>\n<p>(plus some lower priority stuff). It's tempting to believe that <code>data.fun_like.[basic|embedding|equiv]</code> could possibly be done as a single PR.</p>",
        "id": 307649851,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1667444477
    },
    {
        "content": "<p>Both <code>abel</code> and <code>linarith</code> have open PRs that more-or-less work, so someone brave could start on <code>algebra.order.floor</code> by merging those branches into theirs.</p>",
        "id": 307649917,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1667444530
    },
    {
        "content": "<p>I've taken a look at <code>data.fun_like.basic</code> and <code>data.subtype</code> and I think they're both beyond my pay grade. <code>data.fun_like.basic</code> assumes more about coercions than I know (but if someone wants to start me off I can have a go) and <code>data.subtype</code> uses stuff like <code>initialize_simps_projections</code> which I don't understand and might not even be ported yet.</p>",
        "id": 308088057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667620994
    },
    {
        "content": "<p>Could someone move the <code>units</code> section out of <code>data.int.basic</code>? That section requires more imports than everything else.</p>",
        "id": 309408158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668305635
    },
    {
        "content": "<p>Mario are you on a recent branch? <code>data.int.basic</code> has two imports for me: <code>data.nat.basic</code> and <code>order.monotone</code>, the former is obviously necessary and the later is used only for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">coe_nat_strict_mono</span> <span class=\"o\">:</span> <span class=\"n\">strict_mono</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">int.coe_nat_lt.2</span>\n</code></pre></div>",
        "id": 309412597,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1668310729
    },
    {
        "content": "<p>and there is a file <code>data.int.units</code> already that imports <code>algebra.group_power.order</code> and lots of other stuff through <code>data.int.order.basic</code></p>",
        "id": 309412745,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1668310884
    },
    {
        "content": "<p>This change just landed in the last day or two.</p>",
        "id": 309414314,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668312804
    },
    {
        "content": "<p>Note that I did not judge that by looking at the import line, but rather by the fact that the file is full of stuff that typechecks with almost no imports, and then there is a section at the bottom with a bunch of fancy things from mathlib algebra</p>",
        "id": 309414587,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668313091
    },
    {
        "content": "<p>(I'm actually moving that file to <code>Std</code> so that section sticks out)</p>",
        "id": 309414615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668313154
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span>, are you still working on this?</p>",
        "id": 309417201,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668316210
    },
    {
        "content": "<p>(I'm tempted to have a look at rearranging to remove uses of <code>units</code>, but don't want to duplicate if you're already doing this.)</p>",
        "id": 309417241,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668316251
    },
    {
        "content": "<p>I don't really know how to do it properly, so it might be better if you do it</p>",
        "id": 309417276,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1668316296
    },
    {
        "content": "<p>On it.</p>",
        "id": 309418464,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668317567
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/17508\">#17508</a></p>",
        "id": 309419596,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668318805
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/287929-mathlib4/topic/porting.20requests/near/309419596\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/17508\">#17508</a></p>\n</blockquote>\n<p>While you are doing that, can you perhaps include the additional lemmas from <a href=\"https://github.com/leanprover-community/mathlib/pull/17478\">#17478</a> ?</p>",
        "id": 309434751,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1668333073
    },
    {
        "content": "<p>Could you explain why that's better than two separate PRs?</p>",
        "id": 309441121,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668337558
    },
    {
        "content": "<p>Less work? If one gets merged, the other needs to be changed in any case, so why not do it right away? This probably saves some CI cycles, too.</p>",
        "id": 309448887,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1668342514
    },
    {
        "content": "<p>Hmm... I'm conflicted. I like having the refactoring PRs neither add or remove material, so it's easier to be sure they are only refactors. :-)</p>",
        "id": 309449320,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668342711
    },
    {
        "content": "<p>But I do like not having things rot on the queue!</p>",
        "id": 309449387,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668342730
    },
    {
        "content": "<p>OK; I'll leave it to you to resolve this conflict <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>.</p>",
        "id": 309451221,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1668343723
    },
    {
        "content": "<p>I've sent  <a href=\"https://github.com/leanprover-community/mathlib/pull/17478\">#17478</a> to bors</p>",
        "id": 309457686,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668347110
    },
    {
        "content": "<p>Oh, I now see that the other one is also on the queue</p>",
        "id": 309457735,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668347151
    },
    {
        "content": "<p>I guess I'll let bors decide which one to spit out (or <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> if you get there first)</p>",
        "id": 309457799,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668347169
    },
    {
        "content": "<p>They are in the same batch, so this batch will fail.</p>",
        "id": 309458034,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1668347318
    },
    {
        "content": "<p>Bors will split the batch automatically if the merge conflicts</p>",
        "id": 309460006,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668348316
    },
    {
        "content": "<p>Looks like mine will get there first...</p>",
        "id": 309472957,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1668355943
    },
    {
        "content": "<p>there's no real porting targets that seem open and mathematical right now, so what other tasks are there for someone wanting to get involved?</p>",
        "id": 311050628,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1668879875
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/5keEmE9fMITeJLNRgAtSB00i/image.png\">image.png</a> for this section, is it about just eyeballing the files and making sure there's no big changes?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/5keEmE9fMITeJLNRgAtSB00i/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/5keEmE9fMITeJLNRgAtSB00i/image.png\"></a></div>",
        "id": 311050685,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1668879918
    },
    {
        "content": "<p>After <a href=\"https://github.com/leanprover-community/mathlib/pull/17616\">#17616</a> lands, I think it would be useful to do a similar task for <code>data.list.big_operators</code>.  That file has a lot of imports.  It lies on the path to <code>data.list.perm</code> and through that to <code>data.fintype.basic</code>, so anything you could strip from that path would be helpful.</p>",
        "id": 311051603,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1668880517
    },
    {
        "content": "<p>Or maybe we don't need big operators for the part of <code>data.list.perm</code> needed for fintype?  So maybe the split should happen higher up?  Anyway, I'm not sure, but it's worth looking into.</p>",
        "id": 311051834,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1668880644
    },
    {
        "content": "<p>It just doesn't seem like we should need lemmas about divisibility to define fintype ....</p>",
        "id": 311052212,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1668880863
    },
    {
        "content": "<p>About the \"the following files have been modified since the commit ....\"</p>\n<p>Two things:</p>\n<ol>\n<li>I think the plan is to at some point have a flag for the port_status script which will help you do this, but for now ...</li>\n<li>Take the file in question and <code>git diff port-status-SHA master -- /path/to/file</code> (in mathlib3). If the only change is the mathlib4 synchronization label, then update the port-status page for the file with the current SHA from mathlib master.</li>\n</ol>\n<p>If there are new changes to the file, then port the new changes to mathlib4 (or make sure they are already there somehow).</p>",
        "id": 311053259,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668881471
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/287929-mathlib4/topic/porting.20requests/near/311050628\">said</a>:</p>\n<blockquote>\n<p>there's no real porting targets that seem open and mathematical right now, so what other tasks are there for someone wanting to get involved?</p>\n</blockquote>\n<p>Porting targets that are not mathematical.</p>",
        "id": 311053604,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1668881684
    },
    {
        "content": "<p>To second Patrick's point, you are likely capable of porting the non-mathematical things, e.g., I doubt <code>data.stream.defs</code> would be that hard, but I haven't looked carefully.</p>",
        "id": 311054835,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668882393
    },
    {
        "content": "<p>I’ve been following a heuristic of “not deeply mathematical” and ideally non-critical path &amp; if I can do some grunt work that helps more experienced folks hone in on the hard bits that’s fine too. Helps to have a generally high tolerance for grunt work or wasted effort if it helps expose issues (see my many adventures discovering things already in Std or only on critical path for tactics)</p>",
        "id": 311062847,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668887819
    },
    {
        "content": "<p>I felt less confident about them because I'm more likely to mess up important meta-details; I'll still give it a shot, though</p>",
        "id": 311065002,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1668889532
    },
    {
        "content": "<p>I prefer to change little, not make any change that I don’t understand, and comment on any uncertainty….</p>",
        "id": 311065366,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668889767
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/porting.20requests/near/311053259\">said</a>:</p>\n<blockquote>\n<p>About the \"the following files have been modified since the commit ....\"</p>\n<p>Two things:</p>\n<ol>\n<li>I think the plan is to at some point have a flag for the port_status script which will help you do this, but for now ...</li>\n<li>Take the file in question and <code>git diff port-status-SHA master -- /path/to/file</code> (in mathlib3). If the only change is the mathlib4 synchronization label, then update the port-status page for the file with the current SHA from mathlib master.</li>\n</ol>\n<p>If there are new changes to the file, then port the new changes to mathlib4 (or make sure they are already there somehow).</p>\n</blockquote>\n<p>I've just made <a href=\"https://github.com/leanprover-community/mathlib/pull/17630\">#17630</a>, which adds a simple option that outputs the required <code>git diff</code> command. Hopefully it makes it less work to check this.</p>",
        "id": 311066637,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1668890610
    },
    {
        "content": "<p>using this script patch, I very coarsely verified that the following files are ported okay (I excluded any files that had even a non-trivial import change for quick checking):</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">order.synonym</span>\n<span class=\"n\">order.compare</span>\n<span class=\"n\">order.monotone</span>\n<span class=\"n\">order.max</span>\n<span class=\"n\">order.rel_classes</span>\n<span class=\"n\">category_theory.concrete_category.bundled</span>\n<span class=\"n\">logic.pairwise</span>\n<span class=\"n\">logic.nonempty</span>\n<span class=\"n\">logic.unique</span>\n<span class=\"n\">logic.relation</span>\n<span class=\"n\">logic.is_empty</span>\n<span class=\"n\">logic.relator</span>\n<span class=\"n\">logic.equiv.defs</span>\n<span class=\"n\">logic.function.iterate</span>\n<span class=\"n\">logic.function.conjugate</span>\n<span class=\"n\">data.subtype</span>\n<span class=\"n\">data.quot</span>\n<span class=\"n\">data.bracket</span>\n<span class=\"n\">data.char</span>\n<span class=\"n\">data.prod.pprod</span>\n<span class=\"n\">data.fun_like.embedding</span>\n<span class=\"n\">data.fun_like.equiv</span>\n<span class=\"n\">data.fin.fin2</span>\n<span class=\"n\">data.num.basic</span>\n<span class=\"n\">data.option.defs</span>\n<span class=\"n\">data.pnat.defs</span>\n<span class=\"n\">algebra.abs</span>\n<span class=\"n\">algebra.covariant_and_contravariant</span>\n<span class=\"n\">algebra.order.ring.lemmas</span>\n<span class=\"n\">algebra.group.commutator</span>\n<span class=\"n\">algebra.group_power.identities</span>\n<span class=\"n\">algebra.homology.complex_shape</span>\n</code></pre></div>\n</div></div>\n<p>If anyone else can verify these, I'll change these's SHAs on the status page</p>",
        "id": 311067478,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1668891333
    },
    {
        "content": "<p>(a helpful git option was <code>git config pager.diff false</code></p>",
        "id": 311067502,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1668891353
    },
    {
        "content": "<p>Note: your script should diff against <code>master</code>, not <code>HEAD</code></p>",
        "id": 311067640,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668891447
    },
    {
        "content": "<p>Just in case someone is on another branch without realizing it.</p>",
        "id": 311067666,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668891469
    },
    {
        "content": "<p>Do you think I should make that change generally to the script or just when outputting? I wonder if this current functionality is useful for someone preparing a PR to do with <code>mathlib4</code></p>",
        "id": 311067971,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1668891658
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/287929-mathlib4/topic/porting.20requests/near/311054835\">said</a>:</p>\n<blockquote>\n<p>To second Patrick's point, you are likely capable of porting the non-mathematical things, e.g., I doubt <code>data.stream.defs</code> would be that hard, but I haven't looked carefully.</p>\n</blockquote>\n<p>oh, there's another definition of <code>Stream</code> already</p>",
        "id": 311069022,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1668892477
    },
    {
        "content": "<p>I ran all the diffs against <code>c4658a649d216f57e99621708b09dcb3dcccbd23</code> on master. Looks like <code>data.bool.basic</code> can also go on your list. However, I think the following fileshave changes (and I have not checked them against mathlib4). If you checked them against mathlib4, that's fine, but if you haven't don't update the SHAs.</p>\n<ul>\n<li><code>order.compare</code></li>\n<li><code>category_theory.concrete_category.bundled</code></li>\n<li><code>logic.equiv.defs</code></li>\n<li><code>data.subtype</code></li>\n<li><code>data.fun_like.equiv</code></li>\n</ul>",
        "id": 311073106,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668895789
    },
    {
        "content": "<p>If you have time and are willing, you could synchronize the files that need it with mathlib4, but I don't have time tonight to try and do that.</p>",
        "id": 311073319,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668895956
    },
    {
        "content": "<p>Okay, I checked most of those manually as well (just proof changes apart from <code>fun_like.equiv</code>). I'll put these in and maybe I'll fix discrepancies on others later</p>",
        "id": 311073425,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1668896053
    },
    {
        "content": "<p>Looking at the state of things this morning, the <em>really</em> <em>really</em> helpful thing that people can do is review each others PRs (e.g. check #align's, fix errors, mark as approved), and then post in a thread here requests for merging (or merge yourself if you self-identify as someone who should do that :-)</p>",
        "id": 311079891,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668901290
    },
    {
        "content": "<p>We have a big PR queue.</p>",
        "id": 311079894,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668901295
    },
    {
        "content": "<p>If someone could add the <a href=\"https://bit.ly/3cKk3ld\">#queue4</a> linkifier that would be lovely.</p>",
        "id": 311079899,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668901307
    },
    {
        "content": "<p>Oh! It exists. :-)</p>",
        "id": 311079907,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668901321
    },
    {
        "content": "<p>Okay --- go forth and review all those PRs, and anything that looks ready to go, hunt down someone who will hit <code>bors merge</code> on it. :-)</p>",
        "id": 311079959,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668901342
    },
    {
        "content": "<p>I am soon to be essentially offline for 72 hours, due to some complicated travel.</p>",
        "id": 311079971,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668901371
    },
    {
        "content": "<p>Priorities for attention should be <a href=\"https://github.com/leanprover-community/mathlib/pull/641\">#641</a> and <a href=\"https://github.com/leanprover-community/mathlib/pull/631\">#631</a>.</p>",
        "id": 311080540,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668901949
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/641\">mathlib4#641</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/631\">mathlib4#631</a></p>",
        "id": 311080594,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1668902011
    },
    {
        "content": "<p>Is there any chance we could ask people to in future just commit the raw mathbin file as the first commit?</p>",
        "id": 311080607,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1668902027
    },
    {
        "content": "<p>Yes! It's been suggested before. <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>, would you verify that it is in the wiki?</p>",
        "id": 311080664,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668902051
    },
    {
        "content": "<p>No, it hasn't. I'll add it now</p>",
        "id": 311080678,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1668902075
    },
    {
        "content": "<p>In fact, I'd say <a href=\"https://github.com/leanprover-community/mathlib4/pull/641\">mathlib4#641</a> is ready to go, except for the <code>library_note \"coercion into rings\"</code> needing updating.</p>",
        "id": 311081062,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668902421
    },
    {
        "content": "<p>If <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> would be willing to either rewrite that, or just say \"please leave a 'Porting note' that this library note is out of date and needs repair\", then I think we should merge.</p>",
        "id": 311081180,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668902474
    },
    {
        "content": "<p>Okay I've rewrote the library note.</p>",
        "id": 311081632,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1668902828
    },
    {
        "content": "<p>Haha, great, the solution was to delete the confusing paragraph. :-)</p>",
        "id": 311081736,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668902921
    },
    {
        "content": "<p>I believe <a href=\"https://github.com/leanprover-community/mathlib4/pull/616\">mathlib4#616</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/649\">mathlib4#649</a> are good to go pending review. <a href=\"https://github.com/leanprover-community/mathlib4/pull/638\">mathlib4#638</a> has a universe linting error if good just needs an override.</p>",
        "id": 311083739,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668904702
    },
    {
        "content": "<p>Probably you should fix the universe linting error. Let me know if you need help.</p>",
        "id": 311087959,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668909009
    },
    {
        "content": "<p>I definitely need help -- not sure what's causing it...</p>",
        "id": 311088906,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668910026
    },
    {
        "content": "<p>I'll try to have a quick look in an hour or so.</p>",
        "id": 311090330,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668911622
    },
    {
        "content": "<p>The reason I <em>think</em> this is OK is that it occurs in the typeclass instances for <code>ULift</code> which is designed to do universe shenanigans. In particular, the lint is for  \"<code>max u v</code> in the type where neither <code>u</code> nor <code>v</code> occur by themselves\" but <code>ULift</code> by definition maps to <code>Type (max s r)</code></p>",
        "id": 311091039,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668912429
    },
    {
        "content": "<p>The lint is for when <code>u</code> and <code>v</code> appear together as <code>max u v</code> <em>everywhere</em> in the declaration and proof. If you use <code>ULift.{u, v}</code>  then <code>u</code> and <code>v</code> are appearing separately</p>",
        "id": 311091236,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668912653
    },
    {
        "content": "<p>The code is <em>never</em> using <code>max u v</code>; this only happens behind the scenes in the typeclass instance. It's possible I need a fix by adding explicit universe types for all the invocations of <code>ULift</code>?</p>",
        "id": 311091417,
        "sender_full_name": "Arien Malec",
        "timestamp": 1668912877
    },
    {
        "content": "<p>I mean the elaborated term uses <code>max u v</code></p>",
        "id": 311091989,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668913518
    },
    {
        "content": "<p>(If you have a specific example in mind you should probably do it on another thread, this one is about porting requests and progress toward them)</p>",
        "id": 311092075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668913593
    },
    {
        "content": "<p>I just picked up a light blue node and ported it. Is this change desired? <a href=\"https://github.com/leanprover-community/mathlib4/pull/1307\">https://github.com/leanprover-community/mathlib4/pull/1307</a> Port/order.concept</p>",
        "id": 319131392,
        "sender_full_name": "Casavaca",
        "timestamp": 1672725058
    },
    {
        "content": "<p>Anyone interested to help me with this pull request?</p>",
        "id": 319619553,
        "sender_full_name": "Casavaca",
        "timestamp": 1672935557
    },
    {
        "content": "<p>Usually pull requests are made from branches of leanprover-community/mathlib4 ; I'm not sure your PR will ever make it onto <a href=\"https://bit.ly/3cKk3ld\">#queue4</a> because it hasn't been done in this way. Why not ping the maintainers letting them now your github userid and ask for push access to non-master branches of mathlib4? I don't ever look at the PRs in mathlib4, I only ever look at <a href=\"https://bit.ly/3cKk3ld\">#queue4</a> because those are the PRs which are \"ready for review\".</p>",
        "id": 319629028,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672938173
    },
    {
        "content": "<p>That's helpful. Thanks.</p>",
        "id": 319636507,
        "sender_full_name": "Casavaca",
        "timestamp": 1672940281
    },
    {
        "content": "<p>PS I also looked at your PR today given that you flagged it explicitly :-)</p>",
        "id": 319683890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672957619
    }
]