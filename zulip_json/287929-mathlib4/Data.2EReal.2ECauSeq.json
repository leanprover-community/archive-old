[
    {
        "content": "<p>I have a problem with <code>rw</code> being stupid:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/mcdoll/data_real_causeq/Mathlib/Data/Real/CauSeq.lean#L435\">https://github.com/leanprover-community/mathlib4/blob/mcdoll/data_real_causeq/Mathlib/Data/Real/CauSeq.lean#L435</a><br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/mcdoll/data_real_causeq/Mathlib/Data/Real/CauSeq.lean#L467\">https://github.com/leanprover-community/mathlib4/blob/mcdoll/data_real_causeq/Mathlib/Data/Real/CauSeq.lean#L467</a><br>\nThe first one is very weird: it should be a trivial application of <code>mul_apply</code>, but even when giving <code>mul_apply</code> all arguments it cannot find <code>(a * b) n</code>.</p>",
        "id": 317120668,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1671616940
    },
    {
        "content": "<p>Are there errors earlier in the file for you?</p>",
        "id": 317121885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671617307
    },
    {
        "content": "<p>yes, but they are very unrelated.</p>",
        "id": 317122337,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1671617456
    },
    {
        "content": "<p>replacing all broken proofs by sorry's does not help</p>",
        "id": 317123425,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1671617840
    },
    {
        "content": "<p>I replaced all broken proofs with <code>sorry</code> up to <code>instance ring : Ring (CauSeq β abv) := by</code> and for me this has an error (<code>unknown tactic</code> for <code>refine_struct</code>) and because this is the definition of the ring structure this might be the problem with the CommRing structure. Are you 100% sure that the problem is not the earlier errors? Can you post a version with no errors other than the ones you're interested in? I'm on your branch.</p>",
        "id": 317124522,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671618179
    },
    {
        "content": "<p>pushed</p>",
        "id": 317125272,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1671618455
    },
    {
        "content": "<p>(have to go and make dinner, feel free to push fixes)</p>",
        "id": 317125517,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1671618536
    },
    {
        "content": "<p>I have a mathlib3 PR that removes the use of <code>refine_struct</code> there, if that's useful</p>",
        "id": 317129815,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671619991
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/17796\">#17796</a></p>",
        "id": 317129901,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671620023
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span> please tell us whether Eric's mathlib3 PR would make your mathlib4 life easier. If yes then we can merge the mathlib3 PR today and then we'll have to run mathport again.</p>",
        "id": 317131160,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671620426
    },
    {
        "content": "<p>the diff does not say that it removes anything in CauSeq</p>",
        "id": 317132387,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1671620784
    },
    {
        "content": "<p>Are you honestly sure that the problem with a multiplication not being defeq to another multiplication is not related to the fact that you have sorried the ring structure?</p>",
        "id": 317132594,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671620857
    },
    {
        "content": "<p>I don't understand these things well enough so I might be worrying about nothing.</p>",
        "id": 317132774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671620902
    },
    {
        "content": "<p>if the PR gets merged, ping me and I merge in the new mathport version into my mathlib4-PR</p>",
        "id": 317134447,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1671621434
    },
    {
        "content": "<p>The issue is that one multiplication uses <code>CauSeq.instMulCauSeq</code> and the other does not.</p>",
        "id": 317134523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671621460
    },
    {
        "content": "<blockquote>\n<p>the diff does not say that it removes anything in CauSeq</p>\n</blockquote>\n<p>Fixed</p>",
        "id": 317134702,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671621520
    },
    {
        "content": "<p>that is great - is it possible to remove the ring <code>refine_struct</code> as well?</p>",
        "id": 317134928,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1671621589
    },
    {
        "content": "<p>The other uses <code>src✝</code> which uses <code>CauSeq.ring</code> which uses <code>sorry</code></p>",
        "id": 317135024,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671621614
    },
    {
        "content": "<p>Sorrying data in structures is a very well-known way of creating a lot of hard to debug mess down the road.</p>",
        "id": 317135108,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671621652
    },
    {
        "content": "<p>So Kevin's explanation seems very likely.</p>",
        "id": 317135161,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671621674
    },
    {
        "content": "<p>One multiplication uses</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">CauSeq</span> <span class=\"n\">β</span> <span class=\"n\">abv</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">ε0</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hF</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">f.bounded'</span> <span class=\"mi\">0</span>\n      <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hG</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">g.bounded'</span> <span class=\"mi\">0</span>\n      <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">δ0</span><span class=\"o\">,</span> <span class=\"n\">Hδ</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rat_mul_continuous_lemma</span> <span class=\"n\">abv</span> <span class=\"n\">ε0</span>\n      <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_forall_ge_and</span> <span class=\"o\">(</span><span class=\"n\">f.cauchy₃</span> <span class=\"n\">δ0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g.cauchy₃</span> <span class=\"n\">δ0</span><span class=\"o\">)</span>\n      <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">j</span> <span class=\"n\">ij</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">H₁</span><span class=\"o\">,</span> <span class=\"n\">H₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"n\">_</span> <span class=\"n\">le_rfl</span>\n        <span class=\"n\">Hδ</span> <span class=\"o\">(</span><span class=\"n\">hF</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hG</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H₁</span> <span class=\"n\">_</span> <span class=\"n\">ij</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H₂</span> <span class=\"n\">_</span> <span class=\"n\">ij</span><span class=\"o\">)⟩⟩⟩</span>\n</code></pre></div>\n<p>and the other uses</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">ring</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">CauSeq</span> <span class=\"n\">β</span> <span class=\"n\">abv</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and this is why the rewrite fails right now.</p>",
        "id": 317135167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671621676
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EReal.2ECauSeq/near/317134523\">said</a>:</p>\n<blockquote>\n<p>The issue is that one multiplication uses <code>CauSeq.instMulCauSeq</code> and the other does not.</p>\n</blockquote>\n<p>you are right.</p>",
        "id": 317135637,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1671621813
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EReal.2ECauSeq/near/317134928\">said</a>:</p>\n<blockquote>\n<p>that is great - is it possible to remove the ring <code>refine_struct</code> as well?</p>\n</blockquote>\n<p>Done. Is <code>Algebra.Ring.Pi</code> ported yet? <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Pi.instRing?#doc\">docs4#Pi.instRing?</a></p>",
        "id": 317135646,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671621819
    },
    {
        "content": "<p>Seems not; my suggestion would be to port <code>Algebra.Ring.Pi</code> first, and then by the time you're done my PR could be through</p>",
        "id": 317135872,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671621907
    },
    {
        "content": "<p>No it isn't ported yet.</p>",
        "id": 317135958,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671621944
    },
    {
        "content": "<p>Eric, can I assume the data/real folder compile on your branch?</p>",
        "id": 317136168,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671622017
    },
    {
        "content": "<p>Not as of the last two commits, because I only just authored them</p>",
        "id": 317136251,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671622055
    },
    {
        "content": "<p>I mean: does it compile on your computer?</p>",
        "id": 317136288,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671622071
    },
    {
        "content": "<p>I can try for you now?</p>",
        "id": 317136305,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671622079
    },
    {
        "content": "<p>I'm not talking about compiling the whole mathlib, only those two files.</p>",
        "id": 317136367,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671622089
    },
    {
        "content": "<p>Oh, so not the whole data/real folder, just data/real/basic?</p>",
        "id": 317136511,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671622131
    },
    {
        "content": "<p><code>data/real/basic.lean</code> and its dependencies compile on that branch</p>",
        "id": 317136611,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671622160
    },
    {
        "content": "<p>Note that we seem to be missing <code>Algebra.Group.Pi</code> as well as <code>Algebra.Ring.Pi</code></p>",
        "id": 317136690,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671622190
    },
    {
        "content": "<p>Ok, it is very unlikely that build will fail later so I told bors to merge.</p>",
        "id": 317136793,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671622210
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 317136846,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671622227
    },
    {
        "content": "<p>Now you can port  those two <code>Pi</code> files while waiting for the merge <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 317136921,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671622256
    },
    {
        "content": "<p>I'm going to pretend/assume that was aimed at <span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span>!</p>",
        "id": 317137049,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671622307
    },
    {
        "content": "<p>Moritz is having dinner now.</p>",
        "id": 317137236,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671622377
    },
    {
        "content": "<p>Group.Pi landed in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1088\">mathlib4#1088</a></p>",
        "id": 317137267,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671622388
    },
    {
        "content": "<p>And GroupAction.Pi landed in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1115\">mathlib4#1115</a>; so I think it really is just one file</p>",
        "id": 317137462,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671622452
    },
    {
        "content": "<p>I can port <code>Algebra.Ring.Pi</code> tomorrow if nobody does it before me.<br>\nAs for the errors, did something change about extending <code>structure</code>s from Lean 3 to Lean 4? If a type has a <code>Mul</code> and an <code>Add</code> instance, then a sorried out <code>Ring</code> instance should not skrew up proofs without any good error messages.<br>\nProbably I just never encountered this in Lean 3.</p>",
        "id": 317155120,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1671628468
    },
    {
        "content": "<p>There has definitely been a change in how instance synthesis works in Lean 4 v Lean 3, because if you set pp.all to true then in Lean 4 you get monster monster terms which we never had in Lean 3 -- stuff like <code>LinearOrder.toPartialOrder.toPreorder.toLE</code>.</p>",
        "id": 317172508,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671633170
    },
    {
        "content": "<p>The first <code>a * b</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">HMul.hMul.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CauSeq.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91476</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"n\">abv</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CauSeq.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91476</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"n\">abv</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CauSeq.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91476</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"n\">abv</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHMul.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CauSeq.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91476</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"n\">abv</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toMul.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CauSeq.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91476</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"n\">abv</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalSemiring.toNonUnitalNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CauSeq.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91476</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"n\">abv</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonUnitalSemiring.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CauSeq.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91476</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"n\">abv</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toSemiring.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CauSeq.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91476</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"n\">abv</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.mk.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CauSeq.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91476</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"n\">abv</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toSemiring.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CauSeq.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91476</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"n\">abv</span><span class=\"o\">)</span> <span class=\"n\">src</span><span class=\"bp\">✝</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toNeg.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CauSeq.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91476</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"n\">abv</span><span class=\"o\">)</span> <span class=\"n\">src</span><span class=\"bp\">✝</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toSub.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CauSeq.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91476</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"n\">abv</span><span class=\"o\">)</span> <span class=\"n\">src</span><span class=\"bp\">✝</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.sub_eq_add_neg.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CauSeq.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91476</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"n\">abv</span><span class=\"o\">)</span> <span class=\"n\">src</span><span class=\"bp\">✝</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.zsmul.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CauSeq.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91476</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"n\">abv</span><span class=\"o\">)</span> <span class=\"n\">src</span><span class=\"bp\">✝</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.zsmul_zero'.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CauSeq.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91476</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"n\">abv</span><span class=\"o\">)</span> <span class=\"n\">src</span><span class=\"bp\">✝</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.zsmul_succ'.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CauSeq.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91476</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"n\">abv</span><span class=\"o\">)</span> <span class=\"n\">src</span><span class=\"bp\">✝</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.zsmul_neg'.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CauSeq.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91476</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"n\">abv</span><span class=\"o\">)</span> <span class=\"n\">src</span><span class=\"bp\">✝</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.add_left_neg.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CauSeq.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91476</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"n\">abv</span><span class=\"o\">)</span> <span class=\"n\">src</span><span class=\"bp\">✝</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toIntCast.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CauSeq.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91476</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"n\">abv</span><span class=\"o\">)</span> <span class=\"n\">src</span><span class=\"bp\">✝</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.intCast_ofNat.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CauSeq.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91476</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"n\">abv</span><span class=\"o\">)</span> <span class=\"n\">src</span><span class=\"bp\">✝</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.intCast_negSucc.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CauSeq.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91476</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"n\">abv</span><span class=\"o\">)</span> <span class=\"n\">src</span><span class=\"bp\">✝</span><span class=\"o\">)))))))</span>\n      <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>and the second is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">HMul.hMul.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CauSeq.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91476</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"n\">abv</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CauSeq.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91476</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"n\">abv</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CauSeq.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91476</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"n\">abv</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHMul.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CauSeq.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91476</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"n\">abv</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CauSeq.instMulCauSeq.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91476</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">inst</span><span class=\"bp\">✝³</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.91695</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"n\">abv</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n      <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 317172893,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671633276
    },
    {
        "content": "<p>The first one traces <code>Mul</code> back up to the sorried <code>Ring</code> instance even though the <code>Mul</code> is already there. The second one catches the <code>Mul</code> you already defined -- this is <code>@CauSeq.instMulCauSeq</code>.</p>",
        "id": 317173147,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671633343
    },
    {
        "content": "<p>I was looking at porting <code>Algebra.Ring.Pi</code> yesterday, I think it required (a mathlib4 version of) <code>tactic.pi_instances</code>, which I don't think has been ported.</p>",
        "id": 317192758,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1671638622
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#pi_instances\">tactic#pi_instances</a></p>",
        "id": 317192997,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671638684
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EReal.2ECauSeq/near/317129815\">said</a>:</p>\n<blockquote>\n<p>I have a mathlib3 PR that removes the use of <code>refine_struct</code> there, if that's useful</p>\n</blockquote>\n<p>I have a similar PR that removes the use for <code>real.comm_ring</code> at <a href=\"https://github.com/leanprover-community/mathlib/pull/8146\">#8146</a>, although I expect that might have build issues</p>",
        "id": 317214935,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671645200
    },
    {
        "content": "<p>I encountered a new and weird problem, namely that I have lots of casts that seem to be not defeq and there are no <code>simp</code>-lemmas for them. I have no time to work on that until the 25th, so if anyone that knows how casts in the algebraic hierachy work, please have a look at this mess:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/1124/files#diff-18f1434dcab7d38fad2c5144ab5f653c1eef55b9d1d49d20951e556af4ad0317R432\">https://github.com/leanprover-community/mathlib4/pull/1124/files#diff-18f1434dcab7d38fad2c5144ab5f653c1eef55b9d1d49d20951e556af4ad0317R432</a><br>\n(I've added a few definitions and lemmas that probably should not exist, but otherwise I had no idea what was going on)</p>",
        "id": 317539981,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1671793537
    },
    {
        "content": "<p>the <code>natCast</code> in <code>AddGroupWithOne</code> was previously <code>fun n =&gt; const n</code></p>",
        "id": 317540261,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1671793632
    },
    {
        "content": "<p>Can we get the mathlib 4 CI to show errors inline like mathlib 3 does?</p>",
        "id": 317549955,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671796674
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">natCast_eq'</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">@</span><span class=\"n\">Nat.cast</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">NonAssocRing.toNatCast</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>looks like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Pi.NonAssocRing#doc\">docs4#Pi.NonAssocRing</a> was ported incorrectly</p>",
        "id": 317550671,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671796877
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">natCast_eq'</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"bp\">@</span><span class=\"n\">Nat.cast</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">NonAssocRing.toNatCast</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>looks like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Pi.NonAssocRing#doc\">docs4#Pi.NonAssocRing</a> was ported incorrectly</p>",
        "id": 317550728,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671796895
    },
    {
        "content": "<p>Oh. The docs are not up to date :(</p>",
        "id": 317550729,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671796895
    },
    {
        "content": "<p>(bad wifi. Sorry for double post)</p>",
        "id": 317550877,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671796935
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1185\">mathlib4#1185</a> should fix this</p>",
        "id": 317554751,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671798172
    },
    {
        "content": "<p>Do you understand why mathlib3 didn't hit this issue?</p>",
        "id": 317555067,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671798278
    },
    {
        "content": "<p>Yes, because we broke the file in the port. It was not broken in mathlib3</p>",
        "id": 317556177,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671798639
    },
    {
        "content": "<p>(The reason is that in mathlib3 we implemented things with a tactic that doesn't exist in mathlib4)</p>",
        "id": 317556233,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671798661
    },
    {
        "content": "<p>I suppose the safe way to handle this is to backport the removal of the tactic first (to make sure everything works), then do a regular port</p>",
        "id": 317556315,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671798689
    },
    {
        "content": "<p>I guess the most efficient way is to merge your fix but then think about backporting the removal of <code>pi_instance</code> in files that are sufficient far away from the rising tide.</p>",
        "id": 317556988,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1671798897
    },
    {
        "content": "<p>This should be unblocked again</p>",
        "id": 317655166,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671837935
    },
    {
        "content": "<p>I've merged master (and your fix is definitively in there), but it did not fix the issue</p>",
        "id": 317672999,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1671856728
    },
    {
        "content": "<p>it seems there are other instances where we have defeq problems</p>",
        "id": 317673017,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1671856754
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/Pi.addMonoidWithOne\">docs#Pi.addMonoidWithOne</a> is to blame, it also wasn't ported correctly</p>",
        "id": 317685406,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671868554
    },
    {
        "content": "<p>Default arguments are dangerous because if we forget to port them, we get the wrong thing instead of an error</p>",
        "id": 317685463,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671868580
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1197\">mathlib4#1197</a></p>",
        "id": 317686045,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671869142
    },
    {
        "content": "<p>thanks so much.</p>",
        "id": 317686510,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1671869465
    },
    {
        "content": "<p>That does fix the errors</p>",
        "id": 317686527,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1671869485
    },
    {
        "content": "<p>Dumb question: why is this in a different place than in mathlib 3?</p>",
        "id": 317686929,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671869823
    },
    {
        "content": "<p>Ad-hoc thingy?</p>",
        "id": 317686937,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671869829
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/nat/cast/basic.lean#L255\">https://github.com/leanprover-community/mathlib/blob/master/src/data/nat/cast/basic.lean#L255</a></p>",
        "id": 317687043,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671869892
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1088\">mathlib4#1088</a></p>",
        "id": 317687145,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671869982
    },
    {
        "content": "<p>So there is still <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Data/Nat/Cast/Basic.lean#L284\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Data/Nat/Cast/Basic.lean#L284</a> as well; is this good/bad?</p>",
        "id": 317687722,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671870384
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EReal.2ECauSeq/near/317686929\">said</a>:</p>\n<blockquote>\n<p>Dumb question: why is this in a different place than in mathlib 3?</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> suggested this in <a href=\"#narrow/stream/287929-mathlib4/topic/not.20porting.20pi_instance/near/315626876\">a previous thread</a></p>",
        "id": 317688171,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671870694
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EReal.2ECauSeq/near/317687722\">said</a>:</p>\n<blockquote>\n<p>So there is still <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Data/Nat/Cast/Basic.lean#L284\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Data/Nat/Cast/Basic.lean#L284</a> as well; is this good/bad?</p>\n</blockquote>\n<p>I guess bad<del>, let me rewrite to use that</del> but it's not imported yet for me to use</p>",
        "id": 317688198,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671870712
    },
    {
        "content": "<p>\"messy\" is probably more accurate than \"bad\"</p>",
        "id": 317688411,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671870813
    },
    {
        "content": "<p>Can we get a porting note about how this instance was moved? Moving instances is always tricky, because of their implicit nature</p>",
        "id": 317690834,
        "sender_full_name": "Reid Barton",
        "timestamp": 1671872271
    },
    {
        "content": "<p>there seems to be one error left which probably also comes from a diamond: <code>sub_add_sub_cancel</code> times out on l592 in<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/1124/files#diff-18f1434dcab7d38fad2c5144ab5f653c1eef55b9d1d49d20951e556af4ad0317R592\">https://github.com/leanprover-community/mathlib4/pull/1124/files#diff-18f1434dcab7d38fad2c5144ab5f653c1eef55b9d1d49d20951e556af4ad0317R592</a><br>\nMy guess was that the <code>Sub</code> instance is somehow bad and I replaced it by the analogue of the <code>Add</code> instance, but that did not help, so I am suspecting that the Pi-stuff is to blame again.</p>",
        "id": 317691522,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1671872591
    },
    {
        "content": "<p>You're probably right</p>",
        "id": 317695591,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671874809
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Pi.addGroup#doc\">docs4#Pi.addGroup</a></p>",
        "id": 317695660,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671874867
    },
    {
        "content": "<p>Looks ok to me</p>",
        "id": 317695875,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671874974
    },
    {
        "content": "<p>You can use the infoview to debug the diamond and tactics like <code>dsimp [Pi.addGroup]</code> etc</p>",
        "id": 317695946,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671875019
    },
    {
        "content": "<p>It's apparent we need a linter to check that we don't define <code>WeakInstance Foo</code> and <code>StrongInstance Foo</code> in a way that causes a diamond</p>",
        "id": 317696087,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671875076
    },
    {
        "content": "<p>Or we remove all the default-valued fields so that this doesn't happen in the first place</p>",
        "id": 317696154,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671875109
    },
    {
        "content": "<p>I've used <code>set_option pp.all true</code> and that is a huge mess, but without that I cannot see anything useful in the infoview. I haven't considered <code>dsimp</code></p>",
        "id": 317696301,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1671875179
    },
    {
        "content": "<p>You can use the widgets in the infoview instead of pp.all</p>",
        "id": 317696578,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671875347
    },
    {
        "content": "<p>You want to find where the instances come from (by clicking on <code>-</code>) and unfold them until you see a default coming from somewhere</p>",
        "id": 317696616,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671875370
    },
    {
        "content": "<p>I had a quick look and nothing jumped out as obvious</p>",
        "id": 317745603,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671898642
    },
    {
        "content": "<p>The usual approach of using <code>convert _ using 1</code> times out</p>",
        "id": 317745758,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671898756
    },
    {
        "content": "<p>I pushed a commit that gets it to as simple as possible a case where <code>exact sub</code> fails</p>",
        "id": 317775311,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671923745
    },
    {
        "content": "<p>Ah, fixed!</p>",
        "id": 317775559,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671923964
    },
    {
        "content": "<p>I think this is just a Lean4 unification problem</p>",
        "id": 317775569,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671923975
    },
    {
        "content": "<p>For whatever reason, <code>rw [some_lemma]</code> failed but <code>exact some_lemma.symm</code> worked</p>",
        "id": 317775641,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671924021
    },
    {
        "content": "<p>It's pretty scary that this fails in such a confusing way</p>",
        "id": 317775687,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671924095
    },
    {
        "content": "<p>that sounds like a bug to me. The <code>rw</code> should clearly not fail if all the instances are fine.</p>",
        "id": 317777625,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1671926042
    },
    {
        "content": "<p>My hunch is that we actually need to define the Pi instances more like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">group'</span><span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Group</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">divInvMonoid</span> <span class=\"k\">with</span>\n    <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">Mul.mul</span>\n    <span class=\"n\">div</span> <span class=\"o\">:=</span> <span class=\"n\">Div.div</span>\n    <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">Inv.inv</span>\n    <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">One.one</span>\n    <span class=\"n\">zpow</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">^</span> <span class=\"n\">z</span>\n    <span class=\"c1\">--pi_instance</span>\n    <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">mul_left_inv</span> <span class=\"n\">_</span>\n    <span class=\"o\">}</span>\n</code></pre></div>\n<p>that is, copy over all the data fields manually in ways such that the inner operators unify differently</p>",
        "id": 317778124,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671926464
    },
    {
        "content": "<p>We effectively do this in Mathlib3, and the port dropped this; I've run into problems in Lean3 in the past where this helped</p>",
        "id": 317778220,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671926526
    },
    {
        "content": "<p>branch4#eric-wieser/test-pi-instances is hitting timeouts when I try to do the above, which suggests to me this might indeed be the fix</p>",
        "id": 317779136,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671927397
    },
    {
        "content": "<p>In particular,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">commRing</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">CommRing</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">commSemiring</span> <span class=\"k\">with</span>\n    <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">Zero.zero</span>\n    <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">Mul.mul</span>\n    <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">One.one</span>\n    <span class=\"n\">sub</span> <span class=\"o\">:=</span> <span class=\"n\">Sub.sub</span>\n    <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">Add.add</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>times out</p>",
        "id": 317779163,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671927430
    },
    {
        "content": "<p>Which looks a bit like <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>'s frame/coframe problem</p>",
        "id": 317779175,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671927443
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Data.2EReal.2ECauSeq/near/317778124\">said</a>:</p>\n<blockquote>\n<p>My hunch is that we actually need to define the Pi instances more like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">group'</span><span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Group</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">divInvMonoid</span> <span class=\"k\">with</span>\n    <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">Mul.mul</span>\n    <span class=\"n\">div</span> <span class=\"o\">:=</span> <span class=\"n\">Div.div</span>\n    <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">Inv.inv</span>\n    <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">One.one</span>\n    <span class=\"n\">zpow</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">z</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">^</span> <span class=\"n\">z</span>\n    <span class=\"c1\">--pi_instance</span>\n    <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">mul_left_inv</span> <span class=\"n\">_</span>\n    <span class=\"o\">}</span>\n</code></pre></div>\n<p>that is, copy over all the data fields manually in ways such that the inner operators unify differently</p>\n</blockquote>\n<p>Does this suggestion \"go against new structures\"? I would be interested in hearing the views of the people who properly understand why the switch to new structures is important. <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> ?</p>",
        "id": 317779905,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671928182
    },
    {
        "content": "<p>Note that also that <code>Pi</code> was not the only very slow instance in that complete lattice file. <a href=\"#narrow/stream/287929-mathlib4/topic/Performance.20issue.20with.20.60CompleteBooleanAlgebra.60/near/316817990\">Here</a> I give three examples of super-speedup hacks, and only one involves Pi.</p>",
        "id": 317780055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671928286
    },
    {
        "content": "<p>I'm finding these things difficult to minimise because as I slim down the questions the timeouts get shorter. I replace a bunch of proofs with <code>sorry</code>s and a five second declaration goes down to two seconds. The actual time taken in the mathlib file is horrible. One could easily switch to my slick constructions in the link above and leave a porting note but my guess is that this is going to keep happening and I've seen situations where the data needed to feed to <code>mk</code> is not to hand; we're lucky in the linked examples.</p>\n<p>By the way I don't know how to switch the profiler on,  but I would love to report something of the form \"elaboration of this declaration took n heart beats on lean version blah, which was about 5 seconds on my new fast machine\".</p>",
        "id": 317780242,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671928462
    },
    {
        "content": "<p>I don't think this goes against new style structures necessarily. The conflict is between \"a pi type has multiplication because it is a monoid because every fibre is a monoid\" and \"a pi type has multiplication because every fibre has multiplication because every fibre is a monoid\". These are defeq, but tricky to unify and this only gets worse the more typeclass paths there are (eg for <code>Ring</code>)</p>",
        "id": 317780354,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671928573
    },
    {
        "content": "<p>Another thing which would be nice would be a machine which de-mathlibiffied my examples because the code in the issue I opened <a href=\"https://github.com/leanprover/lean4/issues/1986\">https://github.com/leanprover/lean4/issues/1986</a> took ages for me to write -- for example notation is getting complex and <code>notation3</code> is in mathlib and I don't really understand the code so stripping it out was hard for me. Also there is this crazy bug I run into in VS Code where jump to definition will sometimes jump to a file which is not imported, which is really confusing. Feels a bit like the issue where if you change a file you import and write to disc, Lean4 doesn't auto-reload. Also difficult to minimise -- stuff is just broken and you kill all Lean process and restart VS Code and it usually fixes itself.</p>",
        "id": 317780638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671928869
    },
    {
        "content": "<p>This PR is now ready for review</p>",
        "id": 317961491,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1672063267
    },
    {
        "content": "<p>Let's make sure to update the porting comments before merging</p>",
        "id": 317981164,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672072560
    }
]