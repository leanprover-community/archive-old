[
    {
        "content": "<p>So the summary as I understand is that the core work is done, <code>apply</code> has to be tweaked to make reordering optional to get <code>fapply</code>, then <code>constructor</code> modified to call <code>fapply</code> to get <code>fconstructor</code> and then this is easily leveraged  to give <code>use</code>. All this will happen in the natural course of things.</p>",
        "id": 257992755,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1634545159
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> has marked this topic as resolved.</p>",
        "id": 257992769,
        "sender_full_name": "Notification Bot",
        "timestamp": 1634545169
    },
    {
        "content": "<p>By the way I noticed that mathlib's <code>use</code> produces bad error messages when there is a type error, to the point that it was easier to always use <code>refine</code> (or even <code>existsi</code>). I never figured out quite why that was.</p>",
        "id": 257998173,
        "sender_full_name": "Reid Barton",
        "timestamp": 1634548189
    },
    {
        "content": "<p>I got the impression that it was trying to do too much, and then when something failed it didn't have a clear understanding of exactly what failed.</p>",
        "id": 257998474,
        "sender_full_name": "Reid Barton",
        "timestamp": 1634548332
    },
    {
        "content": "<p>Yes, I don't like the mathlib behavior either.  For example it always failed for me when I tried to <code>use _</code> on a goal like <code>⊢ ∃ x, ...</code>.</p>",
        "id": 257998554,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634548383
    },
    {
        "content": "<p>In Lean 4 we can implement this a lot more slickly now with non-deterministic macro expansion.  Something like this should work to get roughly the current behavior, but I'm not sure if the UX is better (e.g. <code>use _</code> won't give helpful output here):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"use\"</span> <span class=\"o\">(</span><span class=\"n\">colGt</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">max</span><span class=\"o\">)</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">use</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">skip</span><span class=\"o\">)</span>\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">use</span> <span class=\"bp\">$</span><span class=\"n\">ts</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">constructor</span><span class=\"o\">)</span>\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">use</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">$</span><span class=\"n\">ts</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">exact</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"bp\">$</span><span class=\"n\">ts</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 257999759,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634549028
    },
    {
        "content": "<p>Personally, I think it would make more sense to hardcode the behavior for certain connectives.  That is, only allow ∃ and ∧-left but in return give good error messages and allow underscores.</p>",
        "id": 257999905,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1634549085
    },
    {
        "content": "<p>I guess for porting purposes we may want a version that reproduces the current behavior though (at least in the non-erroring case).</p>",
        "id": 258001531,
        "sender_full_name": "Reid Barton",
        "timestamp": 1634549961
    },
    {
        "content": "<p>A quick random sample says that <code>subtype</code> is also popular for use with <code>use</code>, and that there are also many like <code>⁅x,m'⁆ ∈ (submodule.map ↑f ↑N).carrier</code>, which is an existential after some unfolding.</p>",
        "id": 258001701,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634550052
    },
    {
        "content": "<p>A historical note: my memory was that <code>existsi</code> was very bad at guessing types, and I would have students complaining that <code>existsi 0</code> would fail because lean was expecting a real. I think Rob wrote the first version of <code>use</code> in order to stop me moaning about this.</p>",
        "id": 258041699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634568973
    },
    {
        "content": "<p>I agree that <code>existsi</code> also had some issue like this.</p>",
        "id": 258053244,
        "sender_full_name": "Reid Barton",
        "timestamp": 1634573126
    },
    {
        "content": "<p><code>use</code> also simps with <code>exists_prop</code>, I think. So that the resulting goal looks nicer.</p>",
        "id": 258059821,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634575368
    }
]